name: Automated Version and Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
      - 'LICENSE'

permissions:
  contents: write
  pull-requests: write

jobs:
  version-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Analyze commits and determine version bump
        id: analyze
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Last tag: $LAST_TAG"

          # Get commits since last tag
          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi

          # Determine version bump type based on conventional commits
          BUMP_TYPE="patch"

          # Check for breaking changes (major version)
          if echo "$COMMITS" | grep -qE "^(feat|fix|chore|docs|style|refactor|perf|test)(\(.+\))?!:" || echo "$COMMITS" | grep -q "BREAKING CHANGE:"; then
            BUMP_TYPE="major"
          # Check for features (minor version)
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?:"; then
            BUMP_TYPE="minor"
          fi

          echo "Bump type: $BUMP_TYPE"
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

          # Calculate new version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${major}.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="${major}.${minor}.$((patch + 1))"
              ;;
          esac

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Check if we actually have changes to release
          if [ "$LAST_TAG" != "v0.0.0" ] && [ -z "$COMMITS" ]; then
            echo "No commits since last tag"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Update version in package.json
        if: steps.analyze.outputs.has_changes == 'true'
        run: |
          npm version ${{ steps.analyze.outputs.new_version }} --no-git-tag-version

          # Also update manifest.json
          node -e "
          const fs = require('fs');
          const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
          manifest.version = '${{ steps.analyze.outputs.new_version }}';
          fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2));
          "

          # Update versions.json
          node -e "
          const fs = require('fs');
          const versions = JSON.parse(fs.readFileSync('versions.json', 'utf8'));
          versions['${{ steps.analyze.outputs.new_version }}'] = '0.15.0';
          fs.writeFileSync('versions.json', JSON.stringify(versions, null, 2));
          "

      - name: Generate changelog entry
        if: steps.analyze.outputs.has_changes == 'true'
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Generate changelog entry
          {
            echo "## [${{ steps.analyze.outputs.new_version }}] - $(date +%Y-%m-%d)"
            echo ""
            echo "### Changes"
            echo ""

            # Get commits and format them
            if [ -z "$LAST_TAG" ]; then
              git log --pretty=format:"- %s" --no-merges
            else
              git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges
            fi

            echo ""
            echo ""
          } > new_changelog_entry.md

          # Prepend to CHANGELOG.md (after the header if it exists)
          if [ -f CHANGELOG.md ]; then
            # Check if CHANGELOG.md has a header (# Changelog or similar)
            if head -1 CHANGELOG.md | grep -q "^#"; then
              head -1 CHANGELOG.md > temp_changelog.md
              echo "" >> temp_changelog.md
              cat new_changelog_entry.md >> temp_changelog.md
              tail -n +2 CHANGELOG.md >> temp_changelog.md
            else
              cat new_changelog_entry.md > temp_changelog.md
              cat CHANGELOG.md >> temp_changelog.md
            fi
            mv temp_changelog.md CHANGELOG.md
          else
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            cat new_changelog_entry.md >> CHANGELOG.md
          fi

          # Save changelog for release notes
          cat new_changelog_entry.md > release_notes.md

      - name: Build the plugin
        if: steps.analyze.outputs.has_changes == 'true'
        run: |
          npm ci
          npm run build

      - name: Commit version bump
        if: steps.analyze.outputs.has_changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          git add package.json package-lock.json manifest.json versions.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.analyze.outputs.new_version }} [skip ci]

          Automated version bump and changelog update"

          git push origin main

      - name: Create GitHub Release
        if: steps.analyze.outputs.has_changes == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.analyze.outputs.new_version }}
          name: Release v${{ steps.analyze.outputs.new_version }}
          body_path: release_notes.md
          files: |
            main.js
            manifest.json
          draft: false
          prerelease: false