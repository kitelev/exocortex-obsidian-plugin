name: Comprehensive CI

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: comprehensive-ci-${{ github.ref }}
  cancel-in-progress: false

env:
  CACHE_VERSION: v2
  NODE_OPTIONS: --max-old-space-size=4096

jobs:
  # Build and validate across platforms
  build-matrix:
    name: Build - ${{ matrix.os }} / Node ${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        node: ["18.x", "20.x"]
    outputs:
      ubuntu-build-cache: ${{ steps.cache-build.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.longpaths true
          git config --global core.autocrlf false
        shell: bash

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .jest-cache
          key: deps-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('package-lock.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            deps-${{ matrix.os }}-node${{ matrix.node }}-
            deps-${{ matrix.os }}-

      - name: Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit --silent
          npm ls --depth=0 || true

      - name: TypeScript Check
        run: npx tsc --noEmit

      - name: Build Plugin
        run: npm run build

      - name: Cache Build Artifacts
        id: cache-build
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20.x'
        uses: actions/cache@v4
        with:
          path: |
            main.js
            manifest.json
            styles.css
            dist/
            .tsbuildinfo
          key: build-main-${{ github.sha }}-${{ env.CACHE_VERSION }}

      - name: Validate Build Output
        run: |
          if [ ! -f main.js ]; then
            echo "‚ùå main.js not found"
            exit 1
          fi
          if [ ! -f manifest.json ]; then
            echo "‚ùå manifest.json not found"
            exit 1
          fi
          echo "‚úÖ Build validation passed"
        shell: bash

      - name: Upload Build Artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.node == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: plugin-build
          path: |
            main.js
            manifest.json
            styles.css

  # Code quality checks
  quality-checks:
    name: Quality Checks
    needs: build-matrix
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: deps-ubuntu-latest-node20.x-${{ hashFiles('package-lock.json') }}-${{ env.CACHE_VERSION }}

      - name: Install Dependencies
        run: |
          if [ ! -d "node_modules" ] || [ ! -f "node_modules/.package-lock.json" ]; then
            npm ci --prefer-offline --no-audit --silent
          else
            echo "‚úÖ Dependencies cached and available"
          fi

      - name: Check Format
        run: npm run format:check || npx prettier --check "src/**/*.{ts,tsx,js,jsx}"

      - name: Lint Code
        run: npm run lint || npx eslint src --ext .ts,.tsx --max-warnings=0

      - name: Check Types
        run: npm run check:types || npx tsc --noEmit

  # Final status report
  ci-status:
    name: CI Status Report
    needs: [build-matrix, quality-checks]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Generate Status Report
        run: |
          echo "# üìä Comprehensive CI Status Report"
          echo ""
          echo "## Build Matrix"
          echo "Status: ${{ needs.build-matrix.result }}"
          echo ""
          echo "## Quality Checks"
          echo "Status: ${{ needs.quality-checks.result }}"
          echo ""

          if [[ "${{ needs.build-matrix.result }}" != "success" || 
                "${{ needs.quality-checks.result }}" != "success" ]]; then
            echo "‚ùå **CI Failed** - Critical checks did not pass"
            exit 1
          fi

          echo "‚úÖ **CI Passed** - All critical checks successful"
          echo ""
          echo "### Coverage"
          echo "- Platforms tested: Linux, macOS"
          echo "- Node versions: 18.x, 20.x"
          echo "- Quality checks: format, lint, types"