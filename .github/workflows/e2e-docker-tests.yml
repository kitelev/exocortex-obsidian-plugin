name: 'E2E Docker Tests'

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**'
      - 'package.json'
      - 'wdio.*.conf.ts'
      - 'docker-compose*.yml'
      - '.github/workflows/e2e-docker-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/e2e/**' 
      - 'package.json'
      - 'wdio.*.conf.ts'
      - 'docker-compose*.yml'
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      stability_runs:
        description: 'Number of stability test runs'
        required: false
        default: '3'
        type: choice
        options:
          - '1'
          - '3'
          - '5'
          - '10'
      test_timeout:
        description: 'Test timeout in minutes'
        required: false
        default: '15'
        type: number

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  e2e-docker-tests:
    name: 'E2E Tests (Docker)'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm install --save-dev \
            @wdio/cli@^8.0.0 \
            @wdio/local-runner@^8.0.0 \
            @wdio/mocha-framework@^8.0.0 \
            @wdio/spec-reporter@^8.0.0 \
            @wdio/docker-service@^8.0.0 \
            @wdio/allure-reporter@^8.0.0 \
            webdriverio@^8.0.0 \
            chai@^5.3.3

      - name: 'Build Plugin'
        run: |
          npm run build
          ls -la main.js manifest.json

      - name: 'Setup Docker BuildX'
        uses: docker/setup-buildx-action@v3

      - name: 'Create Test Directories'
        run: |
          mkdir -p tests/e2e/docker/test-results/screenshots
          mkdir -p tests/e2e/docker/test-results/allure-results
          mkdir -p tests/e2e/docker/test-results/videos
          mkdir -p tests/e2e/docker/wdio-logs

      - name: 'Copy Plugin to Test Vault'
        run: |
          mkdir -p tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin
          cp main.js tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin/
          cp manifest.json tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin/
          cp styles.css tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin/ || true

      - name: 'Start Obsidian Docker Service'  
        run: |
          cd tests/e2e/docker
          docker-compose -f docker-compose.e2e.yml up -d obsidian-e2e
          
          # Wait for Obsidian container to be healthy
          echo "Waiting for Obsidian container to be ready..."
          timeout 300 bash -c 'until docker-compose -f docker-compose.e2e.yml ps | grep -q healthy; do echo "Waiting..."; sleep 10; done'
          
          # Verify the container is responding  
          timeout 60 bash -c 'until curl -f -s http://localhost:8084 > /dev/null; do echo "Waiting for HTTP..."; sleep 5; done'
          
          echo "‚úÖ Obsidian container is ready!"

      - name: 'Install Docker Test Dependencies'
        run: |
          cd tests/e2e/docker
          npm install

      - name: 'Run REAL Plugin Tests (No More Fakes!)'
        timeout-minutes: 30
        run: |
          cd tests/e2e/docker
          ./run-real-tests.sh
        env:
          CI: true
          DOCKER_BUILDKIT: 1

      - name: 'Capture Service Logs on Failure'
        if: failure()
        run: |
          echo "Capturing Docker service logs..."
          cd tests/e2e/docker
          docker-compose -f docker-compose.e2e.yml logs > test-results/docker-services.log
          
          # Capture Obsidian container logs
          docker-compose -f docker-compose.e2e.yml logs obsidian-e2e > test-results/obsidian.log || true
          
          # List container status
          docker-compose -f docker-compose.e2e.yml ps > test-results/container-status.log || true

      - name: 'Upload Real Test Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: real-plugin-test-results-${{ github.run_number }}
          path: |
            tests/e2e/docker/test-results/
          retention-days: 30

      - name: 'Upload Real Plugin Screenshots'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: real-plugin-screenshots-${{ github.run_number }}
          path: tests/e2e/docker/test-results/real-plugin-screenshots/
          retention-days: 14

      - name: 'Generate Test Summary'
        if: always()
        run: |
          cd tests/e2e/docker
          echo "# Real Plugin Test Results" > test-summary.md
          echo "" >> test-summary.md
          
          # Check if real test results exist
          if [ -f "test-results/real-plugin-screenshots/real_test_report.json" ]; then
            echo "‚úÖ **Real Plugin Tests**: COMPLETED" >> test-summary.md
            echo "üì∏ **Screenshots**: Available in artifacts" >> test-summary.md
            echo "üî• **No More Fake Tests**: All tests now verify real plugin functionality" >> test-summary.md
          else
            echo "‚ùå **Real Plugin Tests**: No results found" >> test-summary.md
          fi
          
          cat test-summary.md

      - name: 'Cleanup Docker Services'
        if: always()
        run: |
          docker-compose -f tests/e2e/docker/docker-compose.e2e.yml down --volumes --remove-orphans
          docker system prune -f

  stability-test:
    name: 'Stability Test'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          npm ci
          npm install --save-dev \
            @wdio/cli@^8.0.0 \
            @wdio/local-runner@^8.0.0 \
            @wdio/mocha-framework@^8.0.0 \
            @wdio/spec-reporter@^8.0.0 \
            @wdio/docker-service@^8.0.0 \
            webdriverio@^8.0.0 \
            chai@^5.3.3

      - name: 'Build Plugin'
        run: npm run build

      - name: 'Setup Docker BuildX'
        uses: docker/setup-buildx-action@v3

      - name: 'Prepare Test Environment'
        run: |
          mkdir -p tests/e2e/docker/test-results/stability-logs
          mkdir -p tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin
          cp main.js tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin/
          cp manifest.json tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin/
          cp styles.css tests/e2e/docker/test-vault/.obsidian/plugins/exocortex-obsidian-plugin/ || true

      - name: 'Run Stability Tests'
        run: |
          export STABILITY_RUNS=${{ github.event.inputs.stability_runs || '3' }}
          export TEST_TIMEOUT=${{ github.event.inputs.test_timeout || '15' }}
          
          # Modify the script to use the inputs
          sed -i "s/RUNS=5/RUNS=${STABILITY_RUNS}/" tests/e2e/docker/run-stable-quick.sh
          sed -i "s/TEST_TIMEOUT=900/TEST_TIMEOUT=$((TEST_TIMEOUT * 60))/" tests/e2e/docker/run-stable-quick.sh
          
          ./tests/e2e/docker/run-stable-quick.sh

      - name: 'Upload Stability Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: stability-test-results-${{ github.run_number }}
          path: tests/e2e/docker/test-results/stability-logs/
          retention-days: 30

      - name: 'Comment PR with Stability Results'
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'tests/e2e/docker/test-results/stability-logs/stability-report.json';
            
            if (fs.existsSync(path)) {
              const report = JSON.parse(fs.readFileSync(path, 'utf8'));
              const { stability_test } = report;
              
              const status = stability_test.stability === 'STABLE' ? '‚úÖ STABLE' : '‚ùå UNSTABLE';
              const emoji = stability_test.stability === 'STABLE' ? 'üéâ' : '‚ö†Ô∏è';
              
              const comment = `## ${emoji} E2E Stability Test Results
              
              **Status**: ${status}
              **Success Rate**: ${stability_test.success_rate}% (${stability_test.passed_runs}/${stability_test.total_runs})
              **Total Duration**: ${Math.round(stability_test.total_duration_seconds / 60)} minutes
              **Average per Run**: ${stability_test.average_duration_seconds} seconds
              
              ${stability_test.stability === 'UNSTABLE' ? 
                '‚ö†Ô∏è **Action Required**: Some E2E tests are failing intermittently. Please review the test logs and fix any flaky tests.' : 
                '‚ú® **Great Job**: All E2E tests are running reliably!'
              }`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  report-results:
    name: 'Report Test Results'
    runs-on: ubuntu-latest
    needs: [e2e-docker-tests]
    if: always()
    
    steps:
      - name: 'Download All Artifacts'
        uses: actions/download-artifact@v4
        
      - name: 'Generate Summary Report'
        run: |
          echo "# E2E Docker Test Results" > summary.md
          echo "" >> summary.md
          
          # Count passed/failed tests
          passed=0
          failed=0
          
          for result_dir in e2e-test-results-*; do
            if [ -d "$result_dir" ]; then
              test_name=$(echo "$result_dir" | sed 's/e2e-test-results-//' | sed 's/-[0-9]*$//')
              
              if find "$result_dir" -name "*.json" -exec grep -l "\"failures\": 0" {} \; | head -n1; then
                echo "‚úÖ $test_name: PASSED" >> summary.md
                ((passed++))
              else
                echo "‚ùå $test_name: FAILED" >> summary.md
                ((failed++))
              fi
            fi
          done
          
          echo "" >> summary.md
          echo "**Summary**: $passed passed, $failed failed" >> summary.md
          
          cat summary.md

      - name: 'Comment PR with Results'
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('summary.md')) {
              const summary = fs.readFileSync('summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }