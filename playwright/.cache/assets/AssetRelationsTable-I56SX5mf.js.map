{"version":3,"file":"AssetRelationsTable-I56SX5mf.js","sources":["../../../src/presentation/components/AssetRelationsTable.tsx"],"sourcesContent":["import React, { useState, useMemo } from 'react';\n\nexport interface AssetRelation {\n  path: string;\n  title: string;\n  propertyName?: string;\n  isBodyLink: boolean;\n  created: number;\n  modified: number;\n  metadata: Record<string, any>;\n}\n\nexport interface AssetRelationsTableProps {\n  relations: AssetRelation[];\n  groupByProperty?: boolean;\n  sortBy?: string;\n  sortOrder?: 'asc' | 'desc';\n  showProperties?: string[];\n  onAssetClick?: (path: string) => void;\n}\n\ninterface SortState {\n  column: string;\n  order: 'asc' | 'desc';\n}\n\nexport const AssetRelationsTable: React.FC<AssetRelationsTableProps> = ({\n  relations,\n  groupByProperty = false,\n  sortBy = 'title',\n  sortOrder = 'asc',\n  showProperties = [],\n  onAssetClick,\n}) => {\n  const [sortState, setSortState] = useState<SortState>({\n    column: sortBy,\n    order: sortOrder,\n  });\n\n  const handleSort = (column: string) => {\n    setSortState(prev => ({\n      column,\n      order: prev.column === column && prev.order === 'asc' ? 'desc' : 'asc',\n    }));\n  };\n\n  const sortedRelations = useMemo(() => {\n    const sorted = [...relations].sort((a, b) => {\n      let aVal: any = a[sortState.column as keyof AssetRelation];\n      let bVal: any = b[sortState.column as keyof AssetRelation];\n\n      if (sortState.column === 'title') {\n        aVal = a.title.toLowerCase();\n        bVal = b.title.toLowerCase();\n      }\n\n      if (typeof aVal === 'string' && typeof bVal === 'string') {\n        return sortState.order === 'asc'\n          ? aVal.localeCompare(bVal)\n          : bVal.localeCompare(aVal);\n      }\n\n      if (typeof aVal === 'number' && typeof bVal === 'number') {\n        return sortState.order === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n\n      return 0;\n    });\n\n    return sorted;\n  }, [relations, sortState]);\n\n  const groupedRelations = useMemo(() => {\n    if (!groupByProperty) return { ungrouped: sortedRelations };\n\n    return sortedRelations.reduce((acc, relation) => {\n      const group = relation.propertyName || 'Body Links';\n      if (!acc[group]) acc[group] = [];\n      acc[group].push(relation);\n      return acc;\n    }, {} as Record<string, AssetRelation[]>);\n  }, [sortedRelations, groupByProperty]);\n\n  const renderTable = (items: AssetRelation[]) => (\n    <table className=\"exocortex-relations-table\">\n      <thead>\n        <tr>\n          <th onClick={() => handleSort('title')} className=\"sortable\">\n            Title {sortState.column === 'title' && (sortState.order === 'asc' ? '↑' : '↓')}\n          </th>\n          <th onClick={() => handleSort('created')} className=\"sortable\">\n            Created {sortState.column === 'created' && (sortState.order === 'asc' ? '↑' : '↓')}\n          </th>\n          <th onClick={() => handleSort('modified')} className=\"sortable\">\n            Modified {sortState.column === 'modified' && (sortState.order === 'asc' ? '↑' : '↓')}\n          </th>\n          {showProperties.map(prop => (\n            <th key={prop}>{prop}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {items.map(relation => (\n          <tr key={relation.path} data-path={relation.path}>\n            <td>\n              <a\n                href=\"#\"\n                onClick={e => {\n                  e.preventDefault();\n                  onAssetClick?.(relation.path);\n                }}\n                className=\"internal-link\"\n              >\n                {relation.title}\n              </a>\n            </td>\n            <td>{new Date(relation.created).toLocaleDateString()}</td>\n            <td>{new Date(relation.modified).toLocaleDateString()}</td>\n            {showProperties.map(prop => (\n              <td key={prop}>{relation.metadata[prop] || '-'}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  if (groupByProperty) {\n    return (\n      <div className=\"exocortex-relations-grouped\">\n        {Object.entries(groupedRelations).map(([groupName, items]) => (\n          <div key={groupName} className=\"relation-group\">\n            <h3 className=\"group-header\">{groupName}</h3>\n            {renderTable(items)}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return <div className=\"exocortex-relations\">{renderTable(sortedRelations)}</div>;\n};\n"],"names":["useState","useMemo","jsxs","jsx"],"mappings":"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"}