{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/autocomplete/QueryContext.ts","mappings":";;;AAAA,IAAY,SAOX;AAPD,WAAY,SAAS;IACjB,8BAAiB,CAAA;IACjB,oCAAuB,CAAA;IACvB,wBAAW,CAAA;IACX,kCAAqB,CAAA;IACrB,8BAAiB,CAAA;IACjB,8BAAiB,CAAA;AACrB,CAAC,EAPW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAOpB;AAED,IAAY,UAWX;AAXD,WAAY,UAAU;IAClB,+BAAiB,CAAA;IACjB,6BAAe,CAAA;IACf,+BAAiB,CAAA;IACjB,mCAAqB,CAAA;IACrB,6BAAe,CAAA;IACf,mCAAqB,CAAA;IACrB,mCAAqB,CAAA;IACrB,6BAAe,CAAA;IACf,+BAAiB,CAAA;IACjB,+BAAiB,CAAA;AACrB,CAAC,EAXW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAWrB;AAUD,MAAa,YAAY;IACrB,YACqB,KAAa,EACb,cAAsB,EACtB,YAAoB,EACpB,cAAwB,EACxB,SAA2B,EAC3B,aAAgC,EAChC,OAAsB;QANtB,UAAK,GAAL,KAAK,CAAQ;QACb,mBAAc,GAAd,cAAc,CAAQ;QACtB,iBAAY,GAAZ,YAAY,CAAQ;QACpB,mBAAc,GAAd,cAAc,CAAU;QACxB,cAAS,GAAT,SAAS,CAAkB;QAC3B,kBAAa,GAAb,aAAa,CAAmB;QAChC,YAAO,GAAP,OAAO,CAAe;QAEvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,iBAAiB;QACb,OAAO,IAAI,CAAC,cAAc,CAAC;IAC/B,CAAC;IAED,eAAe;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,iBAAiB;QACb,OAAO,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAED,YAAY;QACR,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IAED,gBAAgB;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAED,UAAU;QACN,OAAO,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IAED,UAAU,CAAC,UAAsB;QAC7B,OAAO,IAAI,CAAC,aAAa,KAAK,UAAU,CAAC;IAC7C,CAAC;IAED,aAAa,CAAC,UAAsB;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;QACvE,IAAI,WAAW,KAAK,CAAC,CAAC;YAAE,OAAO,KAAK,CAAC;QAErC,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,WAAW,CAAC;IACpD,CAAC;IAED,mBAAmB;QACf,MAAM,SAAS,GAAG,IAAI,GAAG,EAAU,CAAC;QAEpC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE;gBAC1C,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;aACnD;SACJ;QAED,OAAO,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,cAAc;QACV,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,CAAC;QACzE,OAAO,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;IACzF,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,MAQb;QACG,OAAO,IAAI,YAAY,CACnB,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,YAAY,IAAI,EAAE,EACzB,MAAM,CAAC,cAAc,IAAI,EAAE,EAC3B,MAAM,CAAC,SAAS,IAAI,IAAI,EACxB,MAAM,CAAC,aAAa,IAAI,IAAI,EAC5B,MAAM,CAAC,OAAO,IAAI,EAAE,CACvB,CAAC;IACN,CAAC;CACJ;AAzFD,oCAyFC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/autocomplete/QueryContext.ts"],"sourcesContent":["export enum QueryType {\n    SELECT = 'SELECT',\n    CONSTRUCT = 'CONSTRUCT',\n    ASK = 'ASK',\n    DESCRIBE = 'DESCRIBE',\n    INSERT = 'INSERT',\n    DELETE = 'DELETE'\n}\n\nexport enum ClauseType {\n    SELECT = 'SELECT',\n    WHERE = 'WHERE',\n    FILTER = 'FILTER',\n    OPTIONAL = 'OPTIONAL',\n    UNION = 'UNION',\n    ORDER_BY = 'ORDER_BY',\n    GROUP_BY = 'GROUP_BY',\n    LIMIT = 'LIMIT',\n    OFFSET = 'OFFSET',\n    PREFIX = 'PREFIX'\n}\n\nexport interface QueryClause {\n    type: ClauseType;\n    startPosition: number;\n    endPosition: number;\n    variables: string[];\n    content: string;\n}\n\nexport class QueryContext {\n    constructor(\n        private readonly query: string,\n        private readonly cursorPosition: number,\n        private readonly currentToken: string,\n        private readonly previousTokens: string[],\n        private readonly queryType: QueryType | null,\n        private readonly currentClause: ClauseType | null,\n        private readonly clauses: QueryClause[]\n    ) {\n        Object.freeze(this);\n    }\n\n    getQuery(): string {\n        return this.query;\n    }\n\n    getCursorPosition(): number {\n        return this.cursorPosition;\n    }\n\n    getCurrentToken(): string {\n        return this.currentToken;\n    }\n\n    getPreviousTokens(): string[] {\n        return [...this.previousTokens];\n    }\n\n    getQueryType(): QueryType | null {\n        return this.queryType;\n    }\n\n    getCurrentClause(): ClauseType | null {\n        return this.currentClause;\n    }\n\n    getClauses(): QueryClause[] {\n        return [...this.clauses];\n    }\n\n    isInClause(clauseType: ClauseType): boolean {\n        return this.currentClause === clauseType;\n    }\n\n    isAfterClause(clauseType: ClauseType): boolean {\n        const clauseIndex = this.clauses.findIndex(c => c.type === clauseType);\n        if (clauseIndex === -1) return false;\n        \n        const clause = this.clauses[clauseIndex];\n        return this.cursorPosition > clause.endPosition;\n    }\n\n    getVariablesInScope(): string[] {\n        const variables = new Set<string>();\n        \n        for (const clause of this.clauses) {\n            if (clause.endPosition < this.cursorPosition) {\n                clause.variables.forEach(v => variables.add(v));\n            }\n        }\n        \n        return Array.from(variables);\n    }\n\n    isStartOfQuery(): boolean {\n        const trimmedQuery = this.query.substring(0, this.cursorPosition).trim();\n        return trimmedQuery.length === 0 || trimmedQuery.length === this.currentToken.length;\n    }\n\n    static create(params: {\n        query: string;\n        cursorPosition: number;\n        currentToken?: string;\n        previousTokens?: string[];\n        queryType?: QueryType | null;\n        currentClause?: ClauseType | null;\n        clauses?: QueryClause[];\n    }): QueryContext {\n        return new QueryContext(\n            params.query,\n            params.cursorPosition,\n            params.currentToken || '',\n            params.previousTokens || [],\n            params.queryType || null,\n            params.currentClause || null,\n            params.clauses || []\n        );\n    }\n}"],"version":3}