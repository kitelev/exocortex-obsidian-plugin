{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/test-cleanup.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/test-cleanup.ts"],"sourcesContent":["/**\n * Global Test Cleanup System\n * Prevents memory leaks and ensures proper test isolation\n */\n\n// Track global state for cleanup\ninterface GlobalTestState {\n    timers: Set<NodeJS.Timeout>;\n    intervals: Set<NodeJS.Timeout>;\n    eventListeners: Map<EventTarget, Array<{ type: string; listener: EventListener }>>;\n    domNodes: Set<Element>;\n    mockInstances: Set<any>;\n}\n\nconst globalTestState: GlobalTestState = {\n    timers: new Set(),\n    intervals: new Set(),\n    eventListeners: new Map(),\n    domNodes: new Set(),\n    mockInstances: new Set()\n};\n\n// Override setTimeout to track timers\nconst originalSetTimeout = global.setTimeout;\nglobal.setTimeout = ((...args: any[]) => {\n    const timer = originalSetTimeout.apply(global, args as [Function, number]);\n    globalTestState.timers.add(timer);\n    return timer;\n}) as typeof setTimeout;\n\n// Override setInterval to track intervals\nconst originalSetInterval = global.setInterval;\nglobal.setInterval = ((...args: any[]) => {\n    const interval = originalSetInterval.apply(global, args as [Function, number]);\n    globalTestState.intervals.add(interval);\n    return interval;\n}) as typeof setInterval;\n\n// Override clearTimeout\nconst originalClearTimeout = global.clearTimeout;\nglobal.clearTimeout = ((timer: NodeJS.Timeout) => {\n    globalTestState.timers.delete(timer);\n    return originalClearTimeout(timer);\n}) as typeof clearTimeout;\n\n// Override clearInterval\nconst originalClearInterval = global.clearInterval;\nglobal.clearInterval = ((interval: NodeJS.Timeout) => {\n    globalTestState.intervals.delete(interval);\n    return originalClearInterval(interval);\n}) as typeof clearInterval;\n\n// Track DOM event listeners\nif (typeof EventTarget !== 'undefined' && EventTarget.prototype.addEventListener) {\n    const originalAddEventListener = EventTarget.prototype.addEventListener;\n    EventTarget.prototype.addEventListener = function(type: string, listener: EventListener, options?: boolean | AddEventListenerOptions) {\n        if (!globalTestState.eventListeners.has(this)) {\n            globalTestState.eventListeners.set(this, []);\n        }\n        globalTestState.eventListeners.get(this)!.push({ type, listener });\n        return originalAddEventListener.call(this, type, listener, options);\n    };\n}\n\n// Track DOM nodes created during tests\nif (typeof document !== 'undefined' && document.createElement) {\n    const originalCreateElement = document.createElement;\n    document.createElement = function<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K] {\n        const element = originalCreateElement.call(this, tagName, options);\n        globalTestState.domNodes.add(element);\n        return element;\n    };\n}\n\n/**\n * Memory-safe mock factory\n */\nexport class MemorySafeMockFactory {\n    private static instances = new Map<string, any>();\n    \n    static createMock<T>(identifier: string, mockImplementation: () => T): T {\n        if (this.instances.has(identifier)) {\n            return this.instances.get(identifier);\n        }\n        \n        const mock = mockImplementation();\n        this.instances.set(identifier, mock);\n        globalTestState.mockInstances.add(mock);\n        return mock;\n    }\n    \n    static clearMock(identifier: string): void {\n        if (this.instances.has(identifier)) {\n            const mock = this.instances.get(identifier);\n            globalTestState.mockInstances.delete(mock);\n            this.instances.delete(identifier);\n        }\n    }\n    \n    static clearAllMocks(): void {\n        this.instances.clear();\n        globalTestState.mockInstances.clear();\n    }\n}\n\n/**\n * Force cleanup of all test resources\n */\nexport function forceCleanupTestResources(): void {\n    // Clear all timers\n    globalTestState.timers.forEach(timer => {\n        try {\n            clearTimeout(timer);\n        } catch (e) {\n            // Ignore cleanup errors\n        }\n    });\n    globalTestState.timers.clear();\n    \n    // Clear all intervals\n    globalTestState.intervals.forEach(interval => {\n        try {\n            clearInterval(interval);\n        } catch (e) {\n            // Ignore cleanup errors\n        }\n    });\n    globalTestState.intervals.clear();\n    \n    // Remove all event listeners\n    globalTestState.eventListeners.forEach((listeners, target) => {\n        listeners.forEach(({ type, listener }) => {\n            try {\n                target.removeEventListener(type, listener);\n            } catch (e) {\n                // Ignore cleanup errors\n            }\n        });\n    });\n    globalTestState.eventListeners.clear();\n    \n    // Clean up DOM nodes\n    if (typeof document !== 'undefined') {\n        globalTestState.domNodes.forEach(node => {\n            try {\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n            } catch (e) {\n                // Ignore cleanup errors\n            }\n        });\n        globalTestState.domNodes.clear();\n        \n        // Clear document body\n        if (document.body) {\n            document.body.innerHTML = '';\n        }\n    }\n    \n    // Clear mock instances\n    MemorySafeMockFactory.clearAllMocks();\n    \n    // Force garbage collection if available\n    if (typeof global.gc === 'function') {\n        try {\n            global.gc();\n        } catch (e) {\n            // Ignore GC errors\n        }\n    }\n}\n\n/**\n * Memory usage tracker for tests\n */\nexport class MemoryTracker {\n    private static snapshots: Array<{ test: string; memory: NodeJS.MemoryUsage; timestamp: number }> = [];\n    \n    static takeSnapshot(testName: string): NodeJS.MemoryUsage {\n        const memory = process.memoryUsage();\n        this.snapshots.push({\n            test: testName,\n            memory,\n            timestamp: Date.now()\n        });\n        \n        // Keep only last 10 snapshots to prevent memory buildup\n        if (this.snapshots.length > 10) {\n            this.snapshots.shift();\n        }\n        \n        return memory;\n    }\n    \n    static getMemoryIncrease(from: string, to: string): number {\n        const fromSnapshot = this.snapshots.find(s => s.test === from);\n        const toSnapshot = this.snapshots.find(s => s.test === to);\n        \n        if (!fromSnapshot || !toSnapshot) {\n            return 0;\n        }\n        \n        return toSnapshot.memory.heapUsed - fromSnapshot.memory.heapUsed;\n    }\n    \n    static reportMemoryUsage(): void {\n        if (process.env.JEST_VERBOSE || process.env.MEMORY_DEBUG) {\n            console.log('Memory Usage Report:');\n            this.snapshots.forEach(snapshot => {\n                const mb = (snapshot.memory.heapUsed / 1024 / 1024).toFixed(2);\n                console.log(`  ${snapshot.test}: ${mb}MB`);\n            });\n        }\n    }\n    \n    static clearSnapshots(): void {\n        this.snapshots.length = 0;\n    }\n}\n\n// Global setup and teardown\nbeforeEach(() => {\n    // Clear any hanging resources before each test\n    forceCleanupTestResources();\n    \n    // Take memory snapshot\n    const testName = expect.getState()?.currentTestName || 'unknown';\n    MemoryTracker.takeSnapshot(`before-${testName}`);\n});\n\nafterEach(() => {\n    // Clear all resources after each test\n    forceCleanupTestResources();\n    \n    // Take memory snapshot\n    const testName = expect.getState()?.currentTestName || 'unknown';\n    MemoryTracker.takeSnapshot(`after-${testName}`);\n    \n    // Report excessive memory usage\n    const increase = MemoryTracker.getMemoryIncrease(`before-${testName}`, `after-${testName}`);\n    const warningThreshold = process.env.CI ? 10 * 1024 * 1024 : 50 * 1024 * 1024; // 10MB in CI, 50MB locally\n    \n    if (increase > warningThreshold) {\n        console.warn(`Warning: Test \"${testName}\" used ${(increase / 1024 / 1024).toFixed(2)}MB of memory`);\n    }\n});\n\nafterAll(() => {\n    // Final cleanup and memory report\n    forceCleanupTestResources();\n    MemoryTracker.reportMemoryUsage();\n    MemoryTracker.clearSnapshots();\n});\n\n// Export utilities for use in tests\nexport { globalTestState, forceCleanupTestResources };"],"version":3}