b850b8b22922e863ac1447d2fff13b64
"use strict";
/**
 * Global Test Cleanup System
 * Prevents memory leaks and ensures proper test isolation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.globalTestState = exports.MemoryTracker = exports.forceCleanupTestResources = exports.MemorySafeMockFactory = void 0;
const globalTestState = {
    timers: new Set(),
    intervals: new Set(),
    eventListeners: new Map(),
    domNodes: new Set(),
    mockInstances: new Set()
};
exports.globalTestState = globalTestState;
// Override setTimeout to track timers
const originalSetTimeout = global.setTimeout;
global.setTimeout = ((...args) => {
    const timer = originalSetTimeout.apply(global, args);
    globalTestState.timers.add(timer);
    return timer;
});
// Override setInterval to track intervals
const originalSetInterval = global.setInterval;
global.setInterval = ((...args) => {
    const interval = originalSetInterval.apply(global, args);
    globalTestState.intervals.add(interval);
    return interval;
});
// Override clearTimeout
const originalClearTimeout = global.clearTimeout;
global.clearTimeout = ((timer) => {
    globalTestState.timers.delete(timer);
    return originalClearTimeout(timer);
});
// Override clearInterval
const originalClearInterval = global.clearInterval;
global.clearInterval = ((interval) => {
    globalTestState.intervals.delete(interval);
    return originalClearInterval(interval);
});
// Track DOM event listeners
if (typeof EventTarget !== 'undefined' && EventTarget.prototype.addEventListener) {
    const originalAddEventListener = EventTarget.prototype.addEventListener;
    EventTarget.prototype.addEventListener = function (type, listener, options) {
        if (!globalTestState.eventListeners.has(this)) {
            globalTestState.eventListeners.set(this, []);
        }
        globalTestState.eventListeners.get(this).push({ type, listener });
        return originalAddEventListener.call(this, type, listener, options);
    };
}
// Track DOM nodes created during tests
if (typeof document !== 'undefined' && document.createElement) {
    const originalCreateElement = document.createElement;
    document.createElement = function (tagName, options) {
        const element = originalCreateElement.call(this, tagName, options);
        globalTestState.domNodes.add(element);
        return element;
    };
}
/**
 * Memory-safe mock factory
 */
class MemorySafeMockFactory {
    static createMock(identifier, mockImplementation) {
        if (this.instances.has(identifier)) {
            return this.instances.get(identifier);
        }
        const mock = mockImplementation();
        this.instances.set(identifier, mock);
        globalTestState.mockInstances.add(mock);
        return mock;
    }
    static clearMock(identifier) {
        if (this.instances.has(identifier)) {
            const mock = this.instances.get(identifier);
            globalTestState.mockInstances.delete(mock);
            this.instances.delete(identifier);
        }
    }
    static clearAllMocks() {
        this.instances.clear();
        globalTestState.mockInstances.clear();
    }
}
exports.MemorySafeMockFactory = MemorySafeMockFactory;
MemorySafeMockFactory.instances = new Map();
/**
 * Force cleanup of all test resources
 */
function forceCleanupTestResources() {
    // Clear all timers
    globalTestState.timers.forEach(timer => {
        try {
            clearTimeout(timer);
        }
        catch (e) {
            // Ignore cleanup errors
        }
    });
    globalTestState.timers.clear();
    // Clear all intervals
    globalTestState.intervals.forEach(interval => {
        try {
            clearInterval(interval);
        }
        catch (e) {
            // Ignore cleanup errors
        }
    });
    globalTestState.intervals.clear();
    // Remove all event listeners
    globalTestState.eventListeners.forEach((listeners, target) => {
        listeners.forEach(({ type, listener }) => {
            try {
                target.removeEventListener(type, listener);
            }
            catch (e) {
                // Ignore cleanup errors
            }
        });
    });
    globalTestState.eventListeners.clear();
    // Clean up DOM nodes
    if (typeof document !== 'undefined') {
        globalTestState.domNodes.forEach(node => {
            try {
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            }
            catch (e) {
                // Ignore cleanup errors
            }
        });
        globalTestState.domNodes.clear();
        // Clear document body
        if (document.body) {
            document.body.innerHTML = '';
        }
    }
    // Clear mock instances
    MemorySafeMockFactory.clearAllMocks();
    // Force garbage collection if available
    if (typeof global.gc === 'function') {
        try {
            global.gc();
        }
        catch (e) {
            // Ignore GC errors
        }
    }
}
exports.forceCleanupTestResources = forceCleanupTestResources;
/**
 * Memory usage tracker for tests
 */
class MemoryTracker {
    static takeSnapshot(testName) {
        const memory = process.memoryUsage();
        this.snapshots.push({
            test: testName,
            memory,
            timestamp: Date.now()
        });
        // Keep only last 10 snapshots to prevent memory buildup
        if (this.snapshots.length > 10) {
            this.snapshots.shift();
        }
        return memory;
    }
    static getMemoryIncrease(from, to) {
        const fromSnapshot = this.snapshots.find(s => s.test === from);
        const toSnapshot = this.snapshots.find(s => s.test === to);
        if (!fromSnapshot || !toSnapshot) {
            return 0;
        }
        return toSnapshot.memory.heapUsed - fromSnapshot.memory.heapUsed;
    }
    static reportMemoryUsage() {
        if (process.env.JEST_VERBOSE || process.env.MEMORY_DEBUG) {
            console.log('Memory Usage Report:');
            this.snapshots.forEach(snapshot => {
                const mb = (snapshot.memory.heapUsed / 1024 / 1024).toFixed(2);
                console.log(`  ${snapshot.test}: ${mb}MB`);
            });
        }
    }
    static clearSnapshots() {
        this.snapshots.length = 0;
    }
}
exports.MemoryTracker = MemoryTracker;
MemoryTracker.snapshots = [];
// Global setup and teardown
beforeEach(() => {
    // Clear any hanging resources before each test
    forceCleanupTestResources();
    // Take memory snapshot
    const testName = expect.getState()?.currentTestName || 'unknown';
    MemoryTracker.takeSnapshot(`before-${testName}`);
});
afterEach(() => {
    // Clear all resources after each test
    forceCleanupTestResources();
    // Take memory snapshot
    const testName = expect.getState()?.currentTestName || 'unknown';
    MemoryTracker.takeSnapshot(`after-${testName}`);
    // Report excessive memory usage
    const increase = MemoryTracker.getMemoryIncrease(`before-${testName}`, `after-${testName}`);
    const warningThreshold = process.env.CI ? 10 * 1024 * 1024 : 50 * 1024 * 1024; // 10MB in CI, 50MB locally
    if (increase > warningThreshold) {
        console.warn(`Warning: Test "${testName}" used ${(increase / 1024 / 1024).toFixed(2)}MB of memory`);
    }
});
afterAll(() => {
    // Final cleanup and memory report
    forceCleanupTestResources();
    MemoryTracker.reportMemoryUsage();
    MemoryTracker.clearSnapshots();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,