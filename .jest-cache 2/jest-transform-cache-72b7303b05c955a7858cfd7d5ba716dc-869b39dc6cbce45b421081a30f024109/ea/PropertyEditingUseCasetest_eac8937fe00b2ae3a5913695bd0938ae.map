{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/integration/PropertyEditingUseCase.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/integration/PropertyEditingUseCase.test.ts"],"sourcesContent":["import { PropertyEditingUseCase } from '../../src/application/use-cases/PropertyEditingUseCase';\nimport { IAssetRepository } from '../../src/domain/repositories/IAssetRepository';\nimport { Asset } from '../../src/domain/entities/Asset';\nimport { AssetId } from '../../src/domain/value-objects/AssetId';\nimport { ClassName } from '../../src/domain/value-objects/ClassName';\nimport { OntologyPrefix } from '../../src/domain/value-objects/OntologyPrefix';\n\ndescribe('PropertyEditingUseCase Integration', () => {\n    let useCase: PropertyEditingUseCase;\n    let mockRepository: jest.Mocked<IAssetRepository>;\n    let mockPlugin: any;\n\n    beforeEach(() => {\n        mockRepository = {\n            findById: jest.fn(),\n            findByFilename: jest.fn(),\n            findByClass: jest.fn(),\n            findByOntology: jest.fn(),\n            save: jest.fn(),\n            delete: jest.fn(),\n            exists: jest.fn(),\n            findAll: jest.fn()\n        } as any;\n\n        mockPlugin = {\n            findPropertiesForClass: jest.fn(),\n            findAssetsByClass: jest.fn()\n        };\n\n        useCase = new PropertyEditingUseCase(mockRepository, mockPlugin);\n    });\n\n    afterEach(() => {\n        jest.clearAllMocks();\n        jest.clearAllTimers();\n        // Clear references to prevent memory leaks\n        mockRepository = null as any;\n        mockPlugin = null as any;\n        useCase = null as any;\n    });\n\n    describe('execute with different asset identifiers', () => {\n        const testAsset = Asset.create({\n            id: AssetId.generate(),\n            label: 'Test Asset',\n            className: ClassName.create('TestClass').getValue()!,\n            ontology: OntologyPrefix.create('test').getValue()!,\n            properties: { testProp: 'oldValue' }\n        }).getValue()!;\n\n        it('should find asset by UUID and update property', async () => {\n            mockRepository.findById.mockResolvedValue(testAsset);\n            mockRepository.save.mockResolvedValue(undefined);\n\n            const result = await useCase.execute({\n                assetId: testAsset.getId().toString(),\n                propertyName: 'testProp',\n                value: 'newValue',\n                propertyDefinition: {\n                    propertyName: 'testProp',\n                    label: 'Test Property',\n                    range: 'string',\n                    isRequired: false\n                }\n            });\n\n            expect(result.isSuccess).toBe(true);\n            expect(mockRepository.findById).toHaveBeenCalled();\n            expect(mockRepository.save).toHaveBeenCalled();\n        });\n\n        it('should fallback to filename when UUID not found', async () => {\n            mockRepository.findById.mockResolvedValue(null);\n            mockRepository.findByFilename.mockResolvedValue(testAsset);\n            mockRepository.save.mockResolvedValue(undefined);\n\n            const result = await useCase.execute({\n                assetId: 'MyAsset.md',\n                propertyName: 'testProp',\n                value: 'newValue',\n                propertyDefinition: {\n                    propertyName: 'testProp',\n                    label: 'Test Property',\n                    range: 'string',\n                    isRequired: false\n                }\n            });\n\n            expect(result.isSuccess).toBe(true);\n            expect(mockRepository.findById).toHaveBeenCalled();\n            expect(mockRepository.findByFilename).toHaveBeenCalledWith('MyAsset.md');\n            expect(mockRepository.save).toHaveBeenCalled();\n        });\n\n        it('should handle filename without extension', async () => {\n            mockRepository.findById.mockResolvedValue(null);\n            mockRepository.findByFilename.mockResolvedValue(testAsset);\n            mockRepository.save.mockResolvedValue(undefined);\n\n            const result = await useCase.execute({\n                assetId: 'MyAsset',\n                propertyName: 'testProp',\n                value: 'newValue',\n                propertyDefinition: {\n                    propertyName: 'testProp',\n                    label: 'Test Property',\n                    range: 'string',\n                    isRequired: false\n                }\n            });\n\n            expect(result.isSuccess).toBe(true);\n            expect(mockRepository.findByFilename).toHaveBeenCalledWith('MyAsset');\n        });\n\n        it('should return error when asset not found by any method', async () => {\n            mockRepository.findById.mockResolvedValue(null);\n            mockRepository.findByFilename.mockResolvedValue(null);\n\n            const result = await useCase.execute({\n                assetId: 'NonExistent',\n                propertyName: 'testProp',\n                value: 'newValue',\n                propertyDefinition: {\n                    propertyName: 'testProp',\n                    label: 'Test Property',\n                    range: 'string',\n                    isRequired: false\n                }\n            });\n\n            expect(result.isFailure).toBe(true);\n            expect(result.error).toContain('Asset not found');\n        });\n\n        it('should handle file paths as identifiers', async () => {\n            mockRepository.findById.mockResolvedValue(null);\n            mockRepository.findByFilename.mockResolvedValue(testAsset);\n            mockRepository.save.mockResolvedValue(undefined);\n\n            const result = await useCase.execute({\n                assetId: 'folder/subfolder/MyAsset.md',\n                propertyName: 'testProp',\n                value: 'newValue',\n                propertyDefinition: {\n                    propertyName: 'testProp',\n                    label: 'Test Property',\n                    range: 'string',\n                    isRequired: false\n                }\n            });\n\n            expect(result.isSuccess).toBe(true);\n            expect(mockRepository.findByFilename).toHaveBeenCalledWith('folder/subfolder/MyAsset.md');\n        });\n    });\n\n    describe('property validation', () => {\n        const testAsset = Asset.create({\n            id: AssetId.generate(),\n            label: 'Test Asset',\n            className: ClassName.create('TestClass').getValue()!,\n            ontology: OntologyPrefix.create('test').getValue()!,\n            properties: {}\n        }).getValue()!;\n\n        beforeEach(() => {\n            mockRepository.findById.mockResolvedValue(testAsset);\n            mockRepository.save.mockResolvedValue(undefined);\n        });\n\n        it('should validate required fields', async () => {\n            const result = await useCase.execute({\n                assetId: 'test-id',\n                propertyName: 'requiredProp',\n                value: '',\n                propertyDefinition: {\n                    propertyName: 'requiredProp',\n                    label: 'Required Property',\n                    range: 'string',\n                    isRequired: true\n                }\n            });\n\n            expect(result.isFailure).toBe(true);\n            expect(result.error).toContain('Required Property is required');\n        });\n\n        it('should allow empty values for optional fields', async () => {\n            const result = await useCase.execute({\n                assetId: 'test-id',\n                propertyName: 'optionalProp',\n                value: '',\n                propertyDefinition: {\n                    propertyName: 'optionalProp',\n                    label: 'Optional Property',\n                    range: 'string',\n                    isRequired: false\n                }\n            });\n\n            expect(result.isSuccess).toBe(true);\n        });\n\n        it('should validate enum values', async () => {\n            const result = await useCase.execute({\n                assetId: 'test-id',\n                propertyName: 'statusProp',\n                value: 'invalid',\n                propertyDefinition: {\n                    propertyName: 'statusProp',\n                    label: 'Status',\n                    range: 'enum:pending,active,completed',\n                    isRequired: true\n                }\n            });\n\n            expect(result.isFailure).toBe(true);\n            expect(result.error).toContain('Status must be one of: pending, active, completed');\n        });\n\n        it('should validate date format', async () => {\n            const result = await useCase.execute({\n                assetId: 'test-id',\n                propertyName: 'dateProp',\n                value: 'not-a-date',\n                propertyDefinition: {\n                    propertyName: 'dateProp',\n                    label: 'Date',\n                    range: 'date',\n                    isRequired: true\n                }\n            });\n\n            expect(result.isFailure).toBe(true);\n            expect(result.error).toContain('Date must be a valid date');\n        });\n\n        it('should validate custom regex patterns', async () => {\n            const result = await useCase.execute({\n                assetId: 'test-id',\n                propertyName: 'emailProp',\n                value: 'invalid-email',\n                propertyDefinition: {\n                    propertyName: 'emailProp',\n                    label: 'Email',\n                    range: 'string',\n                    isRequired: true,\n                    validation: '^[\\\\w\\\\.-]+@[\\\\w\\\\.-]+\\\\.\\\\w+$'\n                }\n            });\n\n            expect(result.isFailure).toBe(true);\n            expect(result.error).toContain('Email format is invalid');\n        });\n    });\n});"],"version":3}