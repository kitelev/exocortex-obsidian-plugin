3dbf07bbf760172aa865a25ca5ed7eaa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PropertyEditingUseCase_1 = require("../../src/application/use-cases/PropertyEditingUseCase");
const Asset_1 = require("../../src/domain/entities/Asset");
const AssetId_1 = require("../../src/domain/value-objects/AssetId");
const ClassName_1 = require("../../src/domain/value-objects/ClassName");
const OntologyPrefix_1 = require("../../src/domain/value-objects/OntologyPrefix");
describe('PropertyEditingUseCase Integration', () => {
    let useCase;
    let mockRepository;
    let mockPlugin;
    beforeEach(() => {
        mockRepository = {
            findById: jest.fn(),
            findByFilename: jest.fn(),
            findByClass: jest.fn(),
            findByOntology: jest.fn(),
            save: jest.fn(),
            delete: jest.fn(),
            exists: jest.fn(),
            findAll: jest.fn()
        };
        mockPlugin = {
            findPropertiesForClass: jest.fn(),
            findAssetsByClass: jest.fn()
        };
        useCase = new PropertyEditingUseCase_1.PropertyEditingUseCase(mockRepository, mockPlugin);
    });
    afterEach(() => {
        jest.clearAllMocks();
        jest.clearAllTimers();
        // Clear references to prevent memory leaks
        mockRepository = null;
        mockPlugin = null;
        useCase = null;
    });
    describe('execute with different asset identifiers', () => {
        const testAsset = Asset_1.Asset.create({
            id: AssetId_1.AssetId.generate(),
            label: 'Test Asset',
            className: ClassName_1.ClassName.create('TestClass').getValue(),
            ontology: OntologyPrefix_1.OntologyPrefix.create('test').getValue(),
            properties: { testProp: 'oldValue' }
        }).getValue();
        it('should find asset by UUID and update property', async () => {
            mockRepository.findById.mockResolvedValue(testAsset);
            mockRepository.save.mockResolvedValue(undefined);
            const result = await useCase.execute({
                assetId: testAsset.getId().toString(),
                propertyName: 'testProp',
                value: 'newValue',
                propertyDefinition: {
                    propertyName: 'testProp',
                    label: 'Test Property',
                    range: 'string',
                    isRequired: false
                }
            });
            expect(result.isSuccess).toBe(true);
            expect(mockRepository.findById).toHaveBeenCalled();
            expect(mockRepository.save).toHaveBeenCalled();
        });
        it('should fallback to filename when UUID not found', async () => {
            mockRepository.findById.mockResolvedValue(null);
            mockRepository.findByFilename.mockResolvedValue(testAsset);
            mockRepository.save.mockResolvedValue(undefined);
            const result = await useCase.execute({
                assetId: 'MyAsset.md',
                propertyName: 'testProp',
                value: 'newValue',
                propertyDefinition: {
                    propertyName: 'testProp',
                    label: 'Test Property',
                    range: 'string',
                    isRequired: false
                }
            });
            expect(result.isSuccess).toBe(true);
            expect(mockRepository.findById).toHaveBeenCalled();
            expect(mockRepository.findByFilename).toHaveBeenCalledWith('MyAsset.md');
            expect(mockRepository.save).toHaveBeenCalled();
        });
        it('should handle filename without extension', async () => {
            mockRepository.findById.mockResolvedValue(null);
            mockRepository.findByFilename.mockResolvedValue(testAsset);
            mockRepository.save.mockResolvedValue(undefined);
            const result = await useCase.execute({
                assetId: 'MyAsset',
                propertyName: 'testProp',
                value: 'newValue',
                propertyDefinition: {
                    propertyName: 'testProp',
                    label: 'Test Property',
                    range: 'string',
                    isRequired: false
                }
            });
            expect(result.isSuccess).toBe(true);
            expect(mockRepository.findByFilename).toHaveBeenCalledWith('MyAsset');
        });
        it('should return error when asset not found by any method', async () => {
            mockRepository.findById.mockResolvedValue(null);
            mockRepository.findByFilename.mockResolvedValue(null);
            const result = await useCase.execute({
                assetId: 'NonExistent',
                propertyName: 'testProp',
                value: 'newValue',
                propertyDefinition: {
                    propertyName: 'testProp',
                    label: 'Test Property',
                    range: 'string',
                    isRequired: false
                }
            });
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Asset not found');
        });
        it('should handle file paths as identifiers', async () => {
            mockRepository.findById.mockResolvedValue(null);
            mockRepository.findByFilename.mockResolvedValue(testAsset);
            mockRepository.save.mockResolvedValue(undefined);
            const result = await useCase.execute({
                assetId: 'folder/subfolder/MyAsset.md',
                propertyName: 'testProp',
                value: 'newValue',
                propertyDefinition: {
                    propertyName: 'testProp',
                    label: 'Test Property',
                    range: 'string',
                    isRequired: false
                }
            });
            expect(result.isSuccess).toBe(true);
            expect(mockRepository.findByFilename).toHaveBeenCalledWith('folder/subfolder/MyAsset.md');
        });
    });
    describe('property validation', () => {
        const testAsset = Asset_1.Asset.create({
            id: AssetId_1.AssetId.generate(),
            label: 'Test Asset',
            className: ClassName_1.ClassName.create('TestClass').getValue(),
            ontology: OntologyPrefix_1.OntologyPrefix.create('test').getValue(),
            properties: {}
        }).getValue();
        beforeEach(() => {
            mockRepository.findById.mockResolvedValue(testAsset);
            mockRepository.save.mockResolvedValue(undefined);
        });
        it('should validate required fields', async () => {
            const result = await useCase.execute({
                assetId: 'test-id',
                propertyName: 'requiredProp',
                value: '',
                propertyDefinition: {
                    propertyName: 'requiredProp',
                    label: 'Required Property',
                    range: 'string',
                    isRequired: true
                }
            });
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Required Property is required');
        });
        it('should allow empty values for optional fields', async () => {
            const result = await useCase.execute({
                assetId: 'test-id',
                propertyName: 'optionalProp',
                value: '',
                propertyDefinition: {
                    propertyName: 'optionalProp',
                    label: 'Optional Property',
                    range: 'string',
                    isRequired: false
                }
            });
            expect(result.isSuccess).toBe(true);
        });
        it('should validate enum values', async () => {
            const result = await useCase.execute({
                assetId: 'test-id',
                propertyName: 'statusProp',
                value: 'invalid',
                propertyDefinition: {
                    propertyName: 'statusProp',
                    label: 'Status',
                    range: 'enum:pending,active,completed',
                    isRequired: true
                }
            });
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Status must be one of: pending, active, completed');
        });
        it('should validate date format', async () => {
            const result = await useCase.execute({
                assetId: 'test-id',
                propertyName: 'dateProp',
                value: 'not-a-date',
                propertyDefinition: {
                    propertyName: 'dateProp',
                    label: 'Date',
                    range: 'date',
                    isRequired: true
                }
            });
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Date must be a valid date');
        });
        it('should validate custom regex patterns', async () => {
            const result = await useCase.execute({
                assetId: 'test-id',
                propertyName: 'emailProp',
                value: 'invalid-email',
                propertyDefinition: {
                    propertyName: 'emailProp',
                    label: 'Email',
                    range: 'string',
                    isRequired: true,
                    validation: '^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'
                }
            });
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Email format is invalid');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,