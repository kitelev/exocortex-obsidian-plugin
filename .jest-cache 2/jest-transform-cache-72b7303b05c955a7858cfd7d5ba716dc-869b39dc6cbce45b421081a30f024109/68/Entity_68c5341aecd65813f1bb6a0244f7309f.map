{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Entity.ts","mappings":";;;AAAA;;;GAGG;AACH,MAAsB,MAAM;IAKxB,YAAsB,KAAQ;QAFtB,kBAAa,GAAU,EAAE,CAAC;QAG9B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAkB;QAC5B,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,EAAE;YACzC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,KAAK,MAAM,EAAE;YACjB,OAAO,IAAI,CAAC;SACf;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACxB,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC;IACnC,CAAC;IAEO,QAAQ,CAAC,CAAM;QACnB,OAAO,CAAC,YAAY,MAAM,CAAC;IAC/B,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,WAAgB;QACrC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzC,CAAC;IAEM,WAAW;QACd,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED,IAAW,YAAY;QACnB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAES,eAAe;QACrB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC9B,CAAC;IAES,iBAAiB;QACvB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;CACJ;AAtDD,wBAsDC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Entity.ts"],"sourcesContent":["/**\n * Base Entity class for Domain-Driven Design\n * Entities have identity and lifecycle\n */\nexport abstract class Entity<T> {\n    protected readonly _id: string | number;\n    protected props: T;\n    private _domainEvents: any[] = [];\n\n    protected constructor(props: T) {\n        this.props = props;\n    }\n\n    /**\n     * Entities are equal if they have the same ID\n     */\n    public equals(object?: Entity<T>): boolean {\n        if (object === null || object === undefined) {\n            return false;\n        }\n\n        if (this === object) {\n            return true;\n        }\n\n        if (!this.isEntity(object)) {\n            return false;\n        }\n\n        return this._id === object._id;\n    }\n\n    private isEntity(v: any): v is Entity<any> {\n        return v instanceof Entity;\n    }\n\n    /**\n     * Domain events\n     */\n    protected addDomainEvent(domainEvent: any): void {\n        this._domainEvents.push(domainEvent);\n    }\n\n    public clearEvents(): void {\n        this._domainEvents = [];\n    }\n\n    public get domainEvents(): any[] {\n        return this._domainEvents;\n    }\n\n    protected getDomainEvents(): any[] {\n        return this._domainEvents;\n    }\n\n    protected clearDomainEvents(): void {\n        this._domainEvents = [];\n    }\n}"],"version":3}