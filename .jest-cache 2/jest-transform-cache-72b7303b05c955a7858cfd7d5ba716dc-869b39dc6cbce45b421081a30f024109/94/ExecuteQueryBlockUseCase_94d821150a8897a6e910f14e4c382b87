78240e2b301c7e18954be664ccb4b3ce
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteQueryBlockUseCase = void 0;
const Result_1 = require("../../domain/core/Result");
class ExecuteQueryBlockUseCase {
    constructor(app) {
        this.app = app;
    }
    async execute(request) {
        const startTime = Date.now();
        try {
            // Get all files
            let files = this.app.vault.getFiles();
            // Filter by class if specified
            if (request.blockConfig.className) {
                files = this.filterByClass(files, request.blockConfig.className);
            }
            // Apply property filters
            if (request.blockConfig.propertyFilters && request.blockConfig.propertyFilters.length > 0) {
                files = this.applyPropertyFilters(files, request.blockConfig.propertyFilters, request.currentAssetPath, request.currentAssetFrontmatter);
            }
            // Apply relation filter if specified
            if (request.blockConfig.relationProperty) {
                files = this.filterByRelation(files, request.blockConfig.relationProperty, request.currentAssetPath);
            }
            const totalCount = files.length;
            // Sort results
            if (request.blockConfig.sortBy) {
                files = this.sortFiles(files, request.blockConfig.sortBy, request.blockConfig.sortOrder || 'asc');
            }
            // Limit results
            if (request.blockConfig.maxResults && request.blockConfig.maxResults > 0) {
                files = files.slice(0, request.blockConfig.maxResults);
            }
            const executionTime = Date.now() - startTime;
            return Result_1.Result.ok({
                results: files,
                totalCount,
                executionTime
            });
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to execute query block: ${error}`);
        }
    }
    filterByClass(files, className) {
        const cleanClassName = this.cleanClassName(className);
        return files.filter(file => {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter)
                return false;
            const instanceClass = metadata.frontmatter['exo__Instance_class'];
            const fileClassName = this.cleanClassName(instanceClass);
            return fileClassName === cleanClassName;
        });
    }
    applyPropertyFilters(files, filters, currentAssetPath, currentAssetFrontmatter) {
        return files.filter(file => {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter)
                return false;
            // Check all filters
            for (const filter of filters) {
                if (!this.evaluateFilter(metadata.frontmatter, filter, currentAssetPath, currentAssetFrontmatter, file)) {
                    return false;
                }
            }
            return true;
        });
    }
    evaluateFilter(frontmatter, filter, currentAssetPath, currentAssetFrontmatter, file) {
        const propertyValue = frontmatter[filter.property];
        let filterValue = filter.value;
        // Replace template variables
        if (typeof filterValue === 'string') {
            filterValue = filterValue
                .replace('{{current_asset}}', `[[${currentAssetPath}]]`)
                .replace('{{current_file}}', `[[${currentAssetPath}]]`);
            // Replace frontmatter variables
            const varMatch = filterValue.match(/\{\{fm\.(.+?)\}\}/g);
            if (varMatch) {
                varMatch.forEach((match) => {
                    const prop = match.replace(/\{\{fm\.|}\}/g, '');
                    const value = currentAssetFrontmatter[prop];
                    if (value) {
                        filterValue = filterValue.replace(match, value);
                    }
                });
            }
        }
        // Clean values for comparison
        const cleanPropValue = this.cleanValue(propertyValue);
        const cleanFilterValue = this.cleanValue(filterValue);
        switch (filter.operator) {
            case 'equals':
                return this.valuesEqual(cleanPropValue, cleanFilterValue);
            case 'notEquals':
                return !this.valuesEqual(cleanPropValue, cleanFilterValue);
            case 'contains':
                return this.valueContains(cleanPropValue, cleanFilterValue);
            case 'startsWith':
                return this.valueStartsWith(cleanPropValue, cleanFilterValue);
            case 'endsWith':
                return this.valueEndsWith(cleanPropValue, cleanFilterValue);
            case 'exists':
                return propertyValue !== undefined && propertyValue !== null;
            case 'notExists':
                return propertyValue === undefined || propertyValue === null;
            default:
                return false;
        }
    }
    valuesEqual(value1, value2) {
        // Handle arrays
        if (Array.isArray(value1)) {
            return value1.some(v => this.valuesEqual(v, value2));
        }
        // Handle wikilinks
        const clean1 = this.cleanClassName(value1);
        const clean2 = this.cleanClassName(value2);
        return clean1 === clean2;
    }
    valueContains(value, searchValue) {
        if (Array.isArray(value)) {
            return value.some(v => this.valueContains(v, searchValue));
        }
        const str = this.cleanClassName(value).toLowerCase();
        const search = this.cleanClassName(searchValue).toLowerCase();
        return str.includes(search);
    }
    valueStartsWith(value, searchValue) {
        if (Array.isArray(value)) {
            return value.some(v => this.valueStartsWith(v, searchValue));
        }
        const str = this.cleanClassName(value).toLowerCase();
        const search = this.cleanClassName(searchValue).toLowerCase();
        return str.startsWith(search);
    }
    valueEndsWith(value, searchValue) {
        if (Array.isArray(value)) {
            return value.some(v => this.valueEndsWith(v, searchValue));
        }
        const str = this.cleanClassName(value).toLowerCase();
        const search = this.cleanClassName(searchValue).toLowerCase();
        return str.endsWith(search);
    }
    filterByRelation(files, relationProperty, currentAssetPath) {
        const currentLink = `[[${currentAssetPath}]]`;
        return files.filter(file => {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter)
                return false;
            const relationValue = metadata.frontmatter[relationProperty];
            if (!relationValue)
                return false;
            if (Array.isArray(relationValue)) {
                return relationValue.some(v => this.cleanClassName(v) === this.cleanClassName(currentLink));
            }
            return this.cleanClassName(relationValue) === this.cleanClassName(currentLink);
        });
    }
    sortFiles(files, sortBy, order) {
        return files.sort((a, b) => {
            const aMetadata = this.app.metadataCache.getFileCache(a);
            const bMetadata = this.app.metadataCache.getFileCache(b);
            const aValue = aMetadata?.frontmatter?.[sortBy] || '';
            const bValue = bMetadata?.frontmatter?.[sortBy] || '';
            let comparison = 0;
            if (aValue < bValue)
                comparison = -1;
            if (aValue > bValue)
                comparison = 1;
            return order === 'asc' ? comparison : -comparison;
        });
    }
    cleanClassName(value) {
        if (!value)
            return '';
        const str = Array.isArray(value) ? value[0] : value;
        return str?.toString().replace(/\[\[|\]\]/g, '').trim() || '';
    }
    cleanValue(value) {
        if (Array.isArray(value)) {
            return value.map(v => this.cleanValue(v));
        }
        if (typeof value === 'string') {
            return value.replace(/\[\[|\]\]/g, '').trim();
        }
        return value;
    }
}
exports.ExecuteQueryBlockUseCase = ExecuteQueryBlockUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9FeGVjdXRlUXVlcnlCbG9ja1VzZUNhc2UudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEscURBQWtEO0FBY2xELE1BQWEsd0JBQXdCO0lBQ2pDLFlBQ1ksR0FBUTtRQUFSLFFBQUcsR0FBSCxHQUFHLENBQUs7SUFDakIsQ0FBQztJQUVKLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBaUM7UUFDM0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRTdCLElBQUk7WUFDQSxnQkFBZ0I7WUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFdEMsK0JBQStCO1lBQy9CLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7Z0JBQy9CLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3BFO1lBRUQseUJBQXlCO1lBQ3pCLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdkYsS0FBSyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FDN0IsS0FBSyxFQUNMLE9BQU8sQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUNuQyxPQUFPLENBQUMsZ0JBQWdCLEVBQ3hCLE9BQU8sQ0FBQyx1QkFBdUIsQ0FDbEMsQ0FBQzthQUNMO1lBRUQscUNBQXFDO1lBQ3JDLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDdEMsS0FBSyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FDekIsS0FBSyxFQUNMLE9BQU8sQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQ3BDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FDM0IsQ0FBQzthQUNMO1lBRUQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUVoQyxlQUFlO1lBQ2YsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtnQkFDNUIsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQ2xCLEtBQUssRUFDTCxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFDMUIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxTQUFTLElBQUksS0FBSyxDQUN6QyxDQUFDO2FBQ0w7WUFFRCxnQkFBZ0I7WUFDaEIsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxDQUFDLEVBQUU7Z0JBQ3RFLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQztZQUU3QyxPQUFPLGVBQU0sQ0FBQyxFQUFFLENBQTRCO2dCQUN4QyxPQUFPLEVBQUUsS0FBSztnQkFDZCxVQUFVO2dCQUNWLGFBQWE7YUFDaEIsQ0FBQyxDQUFDO1NBRU47UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FDZCxrQ0FBa0MsS0FBSyxFQUFFLENBQzVDLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFTyxhQUFhLENBQUMsS0FBYyxFQUFFLFNBQWlCO1FBQ25ELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdEQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVc7Z0JBQUUsT0FBTyxLQUFLLENBQUM7WUFFekMsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ2xFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFekQsT0FBTyxhQUFhLEtBQUssY0FBYyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLG9CQUFvQixDQUN4QixLQUFjLEVBQ2QsT0FBYyxFQUNkLGdCQUF3QixFQUN4Qix1QkFBNEI7UUFFNUIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsUUFBUSxFQUFFLFdBQVc7Z0JBQUUsT0FBTyxLQUFLLENBQUM7WUFFekMsb0JBQW9CO1lBQ3BCLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FDcEIsUUFBUSxDQUFDLFdBQVcsRUFDcEIsTUFBTSxFQUNOLGdCQUFnQixFQUNoQix1QkFBdUIsRUFDdkIsSUFBSSxDQUNQLEVBQUU7b0JBQ0MsT0FBTyxLQUFLLENBQUM7aUJBQ2hCO2FBQ0o7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxjQUFjLENBQ2xCLFdBQWdCLEVBQ2hCLE1BQVcsRUFDWCxnQkFBd0IsRUFDeEIsdUJBQTRCLEVBQzVCLElBQVc7UUFFWCxNQUFNLGFBQWEsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25ELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFL0IsNkJBQTZCO1FBQzdCLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFO1lBQ2pDLFdBQVcsR0FBRyxXQUFXO2lCQUNwQixPQUFPLENBQUMsbUJBQW1CLEVBQUUsS0FBSyxnQkFBZ0IsSUFBSSxDQUFDO2lCQUN2RCxPQUFPLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxnQkFBZ0IsSUFBSSxDQUFDLENBQUM7WUFFNUQsZ0NBQWdDO1lBQ2hDLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUN6RCxJQUFJLFFBQVEsRUFBRTtnQkFDVixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUU7b0JBQy9CLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO29CQUNoRCxNQUFNLEtBQUssR0FBRyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUMsSUFBSSxLQUFLLEVBQUU7d0JBQ1AsV0FBVyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO3FCQUNuRDtnQkFDTCxDQUFDLENBQUMsQ0FBQzthQUNOO1NBQ0o7UUFFRCw4QkFBOEI7UUFDOUIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN0RCxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdEQsUUFBUSxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3JCLEtBQUssUUFBUTtnQkFDVCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFOUQsS0FBSyxXQUFXO2dCQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBRS9ELEtBQUssVUFBVTtnQkFDWCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFFaEUsS0FBSyxZQUFZO2dCQUNiLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUVsRSxLQUFLLFVBQVU7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBRWhFLEtBQUssUUFBUTtnQkFDVCxPQUFPLGFBQWEsS0FBSyxTQUFTLElBQUksYUFBYSxLQUFLLElBQUksQ0FBQztZQUVqRSxLQUFLLFdBQVc7Z0JBQ1osT0FBTyxhQUFhLEtBQUssU0FBUyxJQUFJLGFBQWEsS0FBSyxJQUFJLENBQUM7WUFFakU7Z0JBQ0ksT0FBTyxLQUFLLENBQUM7U0FDcEI7SUFDTCxDQUFDO0lBRU8sV0FBVyxDQUFDLE1BQVcsRUFBRSxNQUFXO1FBQ3hDLGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN4RDtRQUVELG1CQUFtQjtRQUNuQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0MsT0FBTyxNQUFNLEtBQUssTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFTyxhQUFhLENBQUMsS0FBVSxFQUFFLFdBQW1CO1FBQ2pELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTlELE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU8sZUFBZSxDQUFDLEtBQVUsRUFBRSxXQUFtQjtRQUNuRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztTQUNoRTtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU5RCxPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVPLGFBQWEsQ0FBQyxLQUFVLEVBQUUsV0FBbUI7UUFDakQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFOUQsT0FBTyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxLQUFjLEVBQUUsZ0JBQXdCLEVBQUUsZ0JBQXdCO1FBQ3ZGLE1BQU0sV0FBVyxHQUFHLEtBQUssZ0JBQWdCLElBQUksQ0FBQztRQUU5QyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLEVBQUUsV0FBVztnQkFBRSxPQUFPLEtBQUssQ0FBQztZQUV6QyxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLGFBQWE7Z0JBQUUsT0FBTyxLQUFLLENBQUM7WUFFakMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUM5QixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FDMUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUM5RCxDQUFDO2FBQ0w7WUFFRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEtBQUssSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNuRixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxTQUFTLENBQUMsS0FBYyxFQUFFLE1BQWMsRUFBRSxLQUFxQjtRQUNuRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6RCxNQUFNLE1BQU0sR0FBRyxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RELE1BQU0sTUFBTSxHQUFHLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFdEQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBRW5CLElBQUksTUFBTSxHQUFHLE1BQU07Z0JBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUksTUFBTSxHQUFHLE1BQU07Z0JBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQztZQUVwQyxPQUFPLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sY0FBYyxDQUFDLEtBQVU7UUFDN0IsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUN0QixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNwRCxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNsRSxDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQVU7UUFDekIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM3QztRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzNCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDakQ7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0o7QUE1UUQsNERBNFFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9hcHBsaWNhdGlvbi91c2UtY2FzZXMvRXhlY3V0ZVF1ZXJ5QmxvY2tVc2VDYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBRdWVyeUJsb2NrQ29uZmlnIH0gZnJvbSAnLi4vLi4vZG9tYWluL2VudGl0aWVzL0xheW91dEJsb2NrJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4uLy4uL2RvbWFpbi9jb3JlL1Jlc3VsdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhlY3V0ZVF1ZXJ5QmxvY2tSZXF1ZXN0IHtcbiAgICBibG9ja0NvbmZpZzogUXVlcnlCbG9ja0NvbmZpZztcbiAgICBjdXJyZW50QXNzZXRQYXRoOiBzdHJpbmc7XG4gICAgY3VycmVudEFzc2V0RnJvbnRtYXR0ZXI6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeGVjdXRlUXVlcnlCbG9ja1Jlc3BvbnNlIHtcbiAgICByZXN1bHRzOiBURmlsZVtdO1xuICAgIHRvdGFsQ291bnQ6IG51bWJlcjtcbiAgICBleGVjdXRpb25UaW1lOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBFeGVjdXRlUXVlcnlCbG9ja1VzZUNhc2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwcDogQXBwXG4gICAgKSB7fVxuXG4gICAgYXN5bmMgZXhlY3V0ZShyZXF1ZXN0OiBFeGVjdXRlUXVlcnlCbG9ja1JlcXVlc3QpOiBQcm9taXNlPFJlc3VsdDxFeGVjdXRlUXVlcnlCbG9ja1Jlc3BvbnNlPj4ge1xuICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEdldCBhbGwgZmlsZXNcbiAgICAgICAgICAgIGxldCBmaWxlcyA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVzKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpbHRlciBieSBjbGFzcyBpZiBzcGVjaWZpZWRcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmJsb2NrQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGZpbGVzID0gdGhpcy5maWx0ZXJCeUNsYXNzKGZpbGVzLCByZXF1ZXN0LmJsb2NrQ29uZmlnLmNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFwcGx5IHByb3BlcnR5IGZpbHRlcnNcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmJsb2NrQ29uZmlnLnByb3BlcnR5RmlsdGVycyAmJiByZXF1ZXN0LmJsb2NrQ29uZmlnLnByb3BlcnR5RmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZmlsZXMgPSB0aGlzLmFwcGx5UHJvcGVydHlGaWx0ZXJzKFxuICAgICAgICAgICAgICAgICAgICBmaWxlcywgXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYmxvY2tDb25maWcucHJvcGVydHlGaWx0ZXJzLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmN1cnJlbnRBc3NldFBhdGgsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY3VycmVudEFzc2V0RnJvbnRtYXR0ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBcHBseSByZWxhdGlvbiBmaWx0ZXIgaWYgc3BlY2lmaWVkXG4gICAgICAgICAgICBpZiAocmVxdWVzdC5ibG9ja0NvbmZpZy5yZWxhdGlvblByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgZmlsZXMgPSB0aGlzLmZpbHRlckJ5UmVsYXRpb24oXG4gICAgICAgICAgICAgICAgICAgIGZpbGVzLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmJsb2NrQ29uZmlnLnJlbGF0aW9uUHJvcGVydHksXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuY3VycmVudEFzc2V0UGF0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsQ291bnQgPSBmaWxlcy5sZW5ndGg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNvcnQgcmVzdWx0c1xuICAgICAgICAgICAgaWYgKHJlcXVlc3QuYmxvY2tDb25maWcuc29ydEJ5KSB7XG4gICAgICAgICAgICAgICAgZmlsZXMgPSB0aGlzLnNvcnRGaWxlcyhcbiAgICAgICAgICAgICAgICAgICAgZmlsZXMsXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3QuYmxvY2tDb25maWcuc29ydEJ5LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmJsb2NrQ29uZmlnLnNvcnRPcmRlciB8fCAnYXNjJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExpbWl0IHJlc3VsdHNcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LmJsb2NrQ29uZmlnLm1heFJlc3VsdHMgJiYgcmVxdWVzdC5ibG9ja0NvbmZpZy5tYXhSZXN1bHRzID4gMCkge1xuICAgICAgICAgICAgICAgIGZpbGVzID0gZmlsZXMuc2xpY2UoMCwgcmVxdWVzdC5ibG9ja0NvbmZpZy5tYXhSZXN1bHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZXhlY3V0aW9uVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBSZXN1bHQub2s8RXhlY3V0ZVF1ZXJ5QmxvY2tSZXNwb25zZT4oe1xuICAgICAgICAgICAgICAgIHJlc3VsdHM6IGZpbGVzLFxuICAgICAgICAgICAgICAgIHRvdGFsQ291bnQsXG4gICAgICAgICAgICAgICAgZXhlY3V0aW9uVGltZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxFeGVjdXRlUXVlcnlCbG9ja1Jlc3BvbnNlPihcbiAgICAgICAgICAgICAgICBgRmFpbGVkIHRvIGV4ZWN1dGUgcXVlcnkgYmxvY2s6ICR7ZXJyb3J9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGZpbHRlckJ5Q2xhc3MoZmlsZXM6IFRGaWxlW10sIGNsYXNzTmFtZTogc3RyaW5nKTogVEZpbGVbXSB7XG4gICAgICAgIGNvbnN0IGNsZWFuQ2xhc3NOYW1lID0gdGhpcy5jbGVhbkNsYXNzTmFtZShjbGFzc05hbWUpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZpbGVzLmZpbHRlcihmaWxlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICBpZiAoIW1ldGFkYXRhPy5mcm9udG1hdHRlcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZUNsYXNzID0gbWV0YWRhdGEuZnJvbnRtYXR0ZXJbJ2V4b19fSW5zdGFuY2VfY2xhc3MnXTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVDbGFzc05hbWUgPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKGluc3RhbmNlQ2xhc3MpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZmlsZUNsYXNzTmFtZSA9PT0gY2xlYW5DbGFzc05hbWU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIGFwcGx5UHJvcGVydHlGaWx0ZXJzKFxuICAgICAgICBmaWxlczogVEZpbGVbXSwgXG4gICAgICAgIGZpbHRlcnM6IGFueVtdLFxuICAgICAgICBjdXJyZW50QXNzZXRQYXRoOiBzdHJpbmcsXG4gICAgICAgIGN1cnJlbnRBc3NldEZyb250bWF0dGVyOiBhbnlcbiAgICApOiBURmlsZVtdIHtcbiAgICAgICAgcmV0dXJuIGZpbGVzLmZpbHRlcihmaWxlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICBpZiAoIW1ldGFkYXRhPy5mcm9udG1hdHRlcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBhbGwgZmlsdGVyc1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWx0ZXIgb2YgZmlsdGVycykge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ldmFsdWF0ZUZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEuZnJvbnRtYXR0ZXIsIFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBc3NldFBhdGgsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBc3NldEZyb250bWF0dGVyLFxuICAgICAgICAgICAgICAgICAgICBmaWxlXG4gICAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgZXZhbHVhdGVGaWx0ZXIoXG4gICAgICAgIGZyb250bWF0dGVyOiBhbnksIFxuICAgICAgICBmaWx0ZXI6IGFueSxcbiAgICAgICAgY3VycmVudEFzc2V0UGF0aDogc3RyaW5nLFxuICAgICAgICBjdXJyZW50QXNzZXRGcm9udG1hdHRlcjogYW55LFxuICAgICAgICBmaWxlOiBURmlsZVxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBwcm9wZXJ0eVZhbHVlID0gZnJvbnRtYXR0ZXJbZmlsdGVyLnByb3BlcnR5XTtcbiAgICAgICAgbGV0IGZpbHRlclZhbHVlID0gZmlsdGVyLnZhbHVlO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVwbGFjZSB0ZW1wbGF0ZSB2YXJpYWJsZXNcbiAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWVcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgne3tjdXJyZW50X2Fzc2V0fX0nLCBgW1ske2N1cnJlbnRBc3NldFBhdGh9XV1gKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCd7e2N1cnJlbnRfZmlsZX19JywgYFtbJHtjdXJyZW50QXNzZXRQYXRofV1dYCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXBsYWNlIGZyb250bWF0dGVyIHZhcmlhYmxlc1xuICAgICAgICAgICAgY29uc3QgdmFyTWF0Y2ggPSBmaWx0ZXJWYWx1ZS5tYXRjaCgvXFx7XFx7Zm1cXC4oLis/KVxcfVxcfS9nKTtcbiAgICAgICAgICAgIGlmICh2YXJNYXRjaCkge1xuICAgICAgICAgICAgICAgIHZhck1hdGNoLmZvckVhY2goKG1hdGNoOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcCA9IG1hdGNoLnJlcGxhY2UoL1xce1xce2ZtXFwufH1cXH0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRBc3NldEZyb250bWF0dGVyW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWUucmVwbGFjZShtYXRjaCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENsZWFuIHZhbHVlcyBmb3IgY29tcGFyaXNvblxuICAgICAgICBjb25zdCBjbGVhblByb3BWYWx1ZSA9IHRoaXMuY2xlYW5WYWx1ZShwcm9wZXJ0eVZhbHVlKTtcbiAgICAgICAgY29uc3QgY2xlYW5GaWx0ZXJWYWx1ZSA9IHRoaXMuY2xlYW5WYWx1ZShmaWx0ZXJWYWx1ZSk7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGZpbHRlci5vcGVyYXRvcikge1xuICAgICAgICAgICAgY2FzZSAnZXF1YWxzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNFcXVhbChjbGVhblByb3BWYWx1ZSwgY2xlYW5GaWx0ZXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdub3RFcXVhbHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy52YWx1ZXNFcXVhbChjbGVhblByb3BWYWx1ZSwgY2xlYW5GaWx0ZXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdjb250YWlucyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVDb250YWlucyhjbGVhblByb3BWYWx1ZSwgY2xlYW5GaWx0ZXJWYWx1ZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdzdGFydHNXaXRoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZVN0YXJ0c1dpdGgoY2xlYW5Qcm9wVmFsdWUsIGNsZWFuRmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnZW5kc1dpdGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlRW5kc1dpdGgoY2xlYW5Qcm9wVmFsdWUsIGNsZWFuRmlsdGVyVmFsdWUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnZXhpc3RzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHlWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BlcnR5VmFsdWUgIT09IG51bGw7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdub3RFeGlzdHMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eVZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcGVydHlWYWx1ZSA9PT0gbnVsbDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgdmFsdWVzRXF1YWwodmFsdWUxOiBhbnksIHZhbHVlMjogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIC8vIEhhbmRsZSBhcnJheXNcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUxKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlMS5zb21lKHYgPT4gdGhpcy52YWx1ZXNFcXVhbCh2LCB2YWx1ZTIpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSGFuZGxlIHdpa2lsaW5rc1xuICAgICAgICBjb25zdCBjbGVhbjEgPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKHZhbHVlMSk7XG4gICAgICAgIGNvbnN0IGNsZWFuMiA9IHRoaXMuY2xlYW5DbGFzc05hbWUodmFsdWUyKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjbGVhbjEgPT09IGNsZWFuMjtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSB2YWx1ZUNvbnRhaW5zKHZhbHVlOiBhbnksIHNlYXJjaFZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc29tZSh2ID0+IHRoaXMudmFsdWVDb250YWlucyh2LCBzZWFyY2hWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBzZWFyY2ggPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKHNlYXJjaFZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN0ci5pbmNsdWRlcyhzZWFyY2gpO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHZhbHVlU3RhcnRzV2l0aCh2YWx1ZTogYW55LCBzZWFyY2hWYWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNvbWUodiA9PiB0aGlzLnZhbHVlU3RhcnRzV2l0aCh2LCBzZWFyY2hWYWx1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBzdHIgPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBzZWFyY2ggPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKHNlYXJjaFZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHN0ci5zdGFydHNXaXRoKHNlYXJjaCk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgdmFsdWVFbmRzV2l0aCh2YWx1ZTogYW55LCBzZWFyY2hWYWx1ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNvbWUodiA9PiB0aGlzLnZhbHVlRW5kc1dpdGgodiwgc2VhcmNoVmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3Qgc3RyID0gdGhpcy5jbGVhbkNsYXNzTmFtZSh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3Qgc2VhcmNoID0gdGhpcy5jbGVhbkNsYXNzTmFtZShzZWFyY2hWYWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdHIuZW5kc1dpdGgoc2VhcmNoKTtcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBmaWx0ZXJCeVJlbGF0aW9uKGZpbGVzOiBURmlsZVtdLCByZWxhdGlvblByb3BlcnR5OiBzdHJpbmcsIGN1cnJlbnRBc3NldFBhdGg6IHN0cmluZyk6IFRGaWxlW10ge1xuICAgICAgICBjb25zdCBjdXJyZW50TGluayA9IGBbWyR7Y3VycmVudEFzc2V0UGF0aH1dXWA7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmlsZXMuZmlsdGVyKGZpbGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgIGlmICghbWV0YWRhdGE/LmZyb250bWF0dGVyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9uVmFsdWUgPSBtZXRhZGF0YS5mcm9udG1hdHRlcltyZWxhdGlvblByb3BlcnR5XTtcbiAgICAgICAgICAgIGlmICghcmVsYXRpb25WYWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWxhdGlvblZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWxhdGlvblZhbHVlLnNvbWUodiA9PiBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbkNsYXNzTmFtZSh2KSA9PT0gdGhpcy5jbGVhbkNsYXNzTmFtZShjdXJyZW50TGluaylcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbGVhbkNsYXNzTmFtZShyZWxhdGlvblZhbHVlKSA9PT0gdGhpcy5jbGVhbkNsYXNzTmFtZShjdXJyZW50TGluayk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHNvcnRGaWxlcyhmaWxlczogVEZpbGVbXSwgc29ydEJ5OiBzdHJpbmcsIG9yZGVyOiAnYXNjJyB8ICdkZXNjJyk6IFRGaWxlW10ge1xuICAgICAgICByZXR1cm4gZmlsZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgY29uc3QgYU1ldGFkYXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoYSk7XG4gICAgICAgICAgICBjb25zdCBiTWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgYVZhbHVlID0gYU1ldGFkYXRhPy5mcm9udG1hdHRlcj8uW3NvcnRCeV0gfHwgJyc7XG4gICAgICAgICAgICBjb25zdCBiVmFsdWUgPSBiTWV0YWRhdGE/LmZyb250bWF0dGVyPy5bc29ydEJ5XSB8fCAnJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGNvbXBhcmlzb24gPSAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYVZhbHVlIDwgYlZhbHVlKSBjb21wYXJpc29uID0gLTE7XG4gICAgICAgICAgICBpZiAoYVZhbHVlID4gYlZhbHVlKSBjb21wYXJpc29uID0gMTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG9yZGVyID09PSAnYXNjJyA/IGNvbXBhcmlzb24gOiAtY29tcGFyaXNvbjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgY2xlYW5DbGFzc05hbWUodmFsdWU6IGFueSk6IHN0cmluZyB7XG4gICAgICAgIGlmICghdmFsdWUpIHJldHVybiAnJztcbiAgICAgICAgY29uc3Qgc3RyID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVswXSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gc3RyPy50b1N0cmluZygpLnJlcGxhY2UoL1xcW1xcW3xcXF1cXF0vZywgJycpLnRyaW0oKSB8fCAnJztcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBjbGVhblZhbHVlKHZhbHVlOiBhbnkpOiBhbnkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5tYXAodiA9PiB0aGlzLmNsZWFuVmFsdWUodikpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1xcW1xcW3xcXF1cXF0vZywgJycpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=