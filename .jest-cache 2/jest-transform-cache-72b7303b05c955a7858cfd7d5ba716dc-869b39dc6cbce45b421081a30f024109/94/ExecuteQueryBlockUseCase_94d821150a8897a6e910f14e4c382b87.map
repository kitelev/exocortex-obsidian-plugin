{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/ExecuteQueryBlockUseCase.ts","mappings":";;;AAEA,qDAAkD;AAclD,MAAa,wBAAwB;IACjC,YACY,GAAQ;QAAR,QAAG,GAAH,GAAG,CAAK;IACjB,CAAC;IAEJ,KAAK,CAAC,OAAO,CAAC,OAAiC;QAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,IAAI;YACA,gBAAgB;YAChB,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;YAEtC,+BAA+B;YAC/B,IAAI,OAAO,CAAC,WAAW,CAAC,SAAS,EAAE;gBAC/B,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;aACpE;YAED,yBAAyB;YACzB,IAAI,OAAO,CAAC,WAAW,CAAC,eAAe,IAAI,OAAO,CAAC,WAAW,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvF,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAC7B,KAAK,EACL,OAAO,CAAC,WAAW,CAAC,eAAe,EACnC,OAAO,CAAC,gBAAgB,EACxB,OAAO,CAAC,uBAAuB,CAClC,CAAC;aACL;YAED,qCAAqC;YACrC,IAAI,OAAO,CAAC,WAAW,CAAC,gBAAgB,EAAE;gBACtC,KAAK,GAAG,IAAI,CAAC,gBAAgB,CACzB,KAAK,EACL,OAAO,CAAC,WAAW,CAAC,gBAAgB,EACpC,OAAO,CAAC,gBAAgB,CAC3B,CAAC;aACL;YAED,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC;YAEhC,eAAe;YACf,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE;gBAC5B,KAAK,GAAG,IAAI,CAAC,SAAS,CAClB,KAAK,EACL,OAAO,CAAC,WAAW,CAAC,MAAM,EAC1B,OAAO,CAAC,WAAW,CAAC,SAAS,IAAI,KAAK,CACzC,CAAC;aACL;YAED,gBAAgB;YAChB,IAAI,OAAO,CAAC,WAAW,CAAC,UAAU,IAAI,OAAO,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,EAAE;gBACtE,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;aAC1D;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;YAE7C,OAAO,eAAM,CAAC,EAAE,CAA4B;gBACxC,OAAO,EAAE,KAAK;gBACd,UAAU;gBACV,aAAa;aAChB,CAAC,CAAC;SAEN;QAAC,OAAO,KAAK,EAAE;YACZ,OAAO,eAAM,CAAC,IAAI,CACd,kCAAkC,KAAK,EAAE,CAC5C,CAAC;SACL;IACL,CAAC;IAEO,aAAa,CAAC,KAAc,EAAE,SAAiB;QACnD,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;QAEtD,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE,WAAW;gBAAE,OAAO,KAAK,CAAC;YAEzC,MAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC;YAClE,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;YAEzD,OAAO,aAAa,KAAK,cAAc,CAAC;QAC5C,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oBAAoB,CACxB,KAAc,EACd,OAAc,EACd,gBAAwB,EACxB,uBAA4B;QAE5B,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE,WAAW;gBAAE,OAAO,KAAK,CAAC;YAEzC,oBAAoB;YACpB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,cAAc,CACpB,QAAQ,CAAC,WAAW,EACpB,MAAM,EACN,gBAAgB,EAChB,uBAAuB,EACvB,IAAI,CACP,EAAE;oBACC,OAAO,KAAK,CAAC;iBAChB;aACJ;YAED,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAClB,WAAgB,EAChB,MAAW,EACX,gBAAwB,EACxB,uBAA4B,EAC5B,IAAW;QAEX,MAAM,aAAa,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC;QAE/B,6BAA6B;QAC7B,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;YACjC,WAAW,GAAG,WAAW;iBACpB,OAAO,CAAC,mBAAmB,EAAE,KAAK,gBAAgB,IAAI,CAAC;iBACvD,OAAO,CAAC,kBAAkB,EAAE,KAAK,gBAAgB,IAAI,CAAC,CAAC;YAE5D,gCAAgC;YAChC,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;YACzD,IAAI,QAAQ,EAAE;gBACV,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,EAAE;oBAC/B,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;oBAChD,MAAM,KAAK,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC;oBAC5C,IAAI,KAAK,EAAE;wBACP,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;qBACnD;gBACL,CAAC,CAAC,CAAC;aACN;SACJ;QAED,8BAA8B;QAC9B,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACtD,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAEtD,QAAQ,MAAM,CAAC,QAAQ,EAAE;YACrB,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAE9D,KAAK,WAAW;gBACZ,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAE/D,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAEhE,KAAK,YAAY;gBACb,OAAO,IAAI,CAAC,eAAe,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAElE,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC;YAEhE,KAAK,QAAQ;gBACT,OAAO,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,CAAC;YAEjE,KAAK,WAAW;gBACZ,OAAO,aAAa,KAAK,SAAS,IAAI,aAAa,KAAK,IAAI,CAAC;YAEjE;gBACI,OAAO,KAAK,CAAC;SACpB;IACL,CAAC;IAEO,WAAW,CAAC,MAAW,EAAE,MAAW;QACxC,gBAAgB;QAChB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;SACxD;QAED,mBAAmB;QACnB,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE3C,OAAO,MAAM,KAAK,MAAM,CAAC;IAC7B,CAAC;IAEO,aAAa,CAAC,KAAU,EAAE,WAAmB;QACjD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;SAC9D;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAE9D,OAAO,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAEO,eAAe,CAAC,KAAU,EAAE,WAAmB;QACnD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;SAChE;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAE9D,OAAO,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEO,aAAa,CAAC,KAAU,EAAE,WAAmB;QACjD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;SAC9D;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAC;QAE9D,OAAO,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAEO,gBAAgB,CAAC,KAAc,EAAE,gBAAwB,EAAE,gBAAwB;QACvF,MAAM,WAAW,GAAG,KAAK,gBAAgB,IAAI,CAAC;QAE9C,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC3D,IAAI,CAAC,QAAQ,EAAE,WAAW;gBAAE,OAAO,KAAK,CAAC;YAEzC,MAAM,aAAa,GAAG,QAAQ,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;YAC7D,IAAI,CAAC,aAAa;gBAAE,OAAO,KAAK,CAAC;YAEjC,IAAI,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBAC9B,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAC1B,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAC9D,CAAC;aACL;YAED,OAAO,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,SAAS,CAAC,KAAc,EAAE,MAAc,EAAE,KAAqB;QACnE,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACvB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACzD,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAEzD,MAAM,MAAM,GAAG,SAAS,EAAE,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACtD,MAAM,MAAM,GAAG,SAAS,EAAE,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YAEtD,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,IAAI,MAAM,GAAG,MAAM;gBAAE,UAAU,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,MAAM,GAAG,MAAM;gBAAE,UAAU,GAAG,CAAC,CAAC;YAEpC,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CAAC,KAAU;QAC7B,IAAI,CAAC,KAAK;YAAE,OAAO,EAAE,CAAC;QACtB,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACpD,OAAO,GAAG,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IAClE,CAAC;IAEO,UAAU,CAAC,KAAU;QACzB,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7C;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,OAAO,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;SACjD;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;CACJ;AA5QD,4DA4QC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/ExecuteQueryBlockUseCase.ts"],"sourcesContent":["import { App, TFile } from 'obsidian';\nimport { QueryBlockConfig } from '../../domain/entities/LayoutBlock';\nimport { Result } from '../../domain/core/Result';\n\nexport interface ExecuteQueryBlockRequest {\n    blockConfig: QueryBlockConfig;\n    currentAssetPath: string;\n    currentAssetFrontmatter: any;\n}\n\nexport interface ExecuteQueryBlockResponse {\n    results: TFile[];\n    totalCount: number;\n    executionTime: number;\n}\n\nexport class ExecuteQueryBlockUseCase {\n    constructor(\n        private app: App\n    ) {}\n\n    async execute(request: ExecuteQueryBlockRequest): Promise<Result<ExecuteQueryBlockResponse>> {\n        const startTime = Date.now();\n        \n        try {\n            // Get all files\n            let files = this.app.vault.getFiles();\n            \n            // Filter by class if specified\n            if (request.blockConfig.className) {\n                files = this.filterByClass(files, request.blockConfig.className);\n            }\n            \n            // Apply property filters\n            if (request.blockConfig.propertyFilters && request.blockConfig.propertyFilters.length > 0) {\n                files = this.applyPropertyFilters(\n                    files, \n                    request.blockConfig.propertyFilters,\n                    request.currentAssetPath,\n                    request.currentAssetFrontmatter\n                );\n            }\n            \n            // Apply relation filter if specified\n            if (request.blockConfig.relationProperty) {\n                files = this.filterByRelation(\n                    files,\n                    request.blockConfig.relationProperty,\n                    request.currentAssetPath\n                );\n            }\n            \n            const totalCount = files.length;\n            \n            // Sort results\n            if (request.blockConfig.sortBy) {\n                files = this.sortFiles(\n                    files,\n                    request.blockConfig.sortBy,\n                    request.blockConfig.sortOrder || 'asc'\n                );\n            }\n            \n            // Limit results\n            if (request.blockConfig.maxResults && request.blockConfig.maxResults > 0) {\n                files = files.slice(0, request.blockConfig.maxResults);\n            }\n            \n            const executionTime = Date.now() - startTime;\n            \n            return Result.ok<ExecuteQueryBlockResponse>({\n                results: files,\n                totalCount,\n                executionTime\n            });\n            \n        } catch (error) {\n            return Result.fail<ExecuteQueryBlockResponse>(\n                `Failed to execute query block: ${error}`\n            );\n        }\n    }\n    \n    private filterByClass(files: TFile[], className: string): TFile[] {\n        const cleanClassName = this.cleanClassName(className);\n        \n        return files.filter(file => {\n            const metadata = this.app.metadataCache.getFileCache(file);\n            if (!metadata?.frontmatter) return false;\n            \n            const instanceClass = metadata.frontmatter['exo__Instance_class'];\n            const fileClassName = this.cleanClassName(instanceClass);\n            \n            return fileClassName === cleanClassName;\n        });\n    }\n    \n    private applyPropertyFilters(\n        files: TFile[], \n        filters: any[],\n        currentAssetPath: string,\n        currentAssetFrontmatter: any\n    ): TFile[] {\n        return files.filter(file => {\n            const metadata = this.app.metadataCache.getFileCache(file);\n            if (!metadata?.frontmatter) return false;\n            \n            // Check all filters\n            for (const filter of filters) {\n                if (!this.evaluateFilter(\n                    metadata.frontmatter, \n                    filter,\n                    currentAssetPath,\n                    currentAssetFrontmatter,\n                    file\n                )) {\n                    return false;\n                }\n            }\n            \n            return true;\n        });\n    }\n    \n    private evaluateFilter(\n        frontmatter: any, \n        filter: any,\n        currentAssetPath: string,\n        currentAssetFrontmatter: any,\n        file: TFile\n    ): boolean {\n        const propertyValue = frontmatter[filter.property];\n        let filterValue = filter.value;\n        \n        // Replace template variables\n        if (typeof filterValue === 'string') {\n            filterValue = filterValue\n                .replace('{{current_asset}}', `[[${currentAssetPath}]]`)\n                .replace('{{current_file}}', `[[${currentAssetPath}]]`);\n                \n            // Replace frontmatter variables\n            const varMatch = filterValue.match(/\\{\\{fm\\.(.+?)\\}\\}/g);\n            if (varMatch) {\n                varMatch.forEach((match: string) => {\n                    const prop = match.replace(/\\{\\{fm\\.|}\\}/g, '');\n                    const value = currentAssetFrontmatter[prop];\n                    if (value) {\n                        filterValue = filterValue.replace(match, value);\n                    }\n                });\n            }\n        }\n        \n        // Clean values for comparison\n        const cleanPropValue = this.cleanValue(propertyValue);\n        const cleanFilterValue = this.cleanValue(filterValue);\n        \n        switch (filter.operator) {\n            case 'equals':\n                return this.valuesEqual(cleanPropValue, cleanFilterValue);\n                \n            case 'notEquals':\n                return !this.valuesEqual(cleanPropValue, cleanFilterValue);\n                \n            case 'contains':\n                return this.valueContains(cleanPropValue, cleanFilterValue);\n                \n            case 'startsWith':\n                return this.valueStartsWith(cleanPropValue, cleanFilterValue);\n                \n            case 'endsWith':\n                return this.valueEndsWith(cleanPropValue, cleanFilterValue);\n                \n            case 'exists':\n                return propertyValue !== undefined && propertyValue !== null;\n                \n            case 'notExists':\n                return propertyValue === undefined || propertyValue === null;\n                \n            default:\n                return false;\n        }\n    }\n    \n    private valuesEqual(value1: any, value2: any): boolean {\n        // Handle arrays\n        if (Array.isArray(value1)) {\n            return value1.some(v => this.valuesEqual(v, value2));\n        }\n        \n        // Handle wikilinks\n        const clean1 = this.cleanClassName(value1);\n        const clean2 = this.cleanClassName(value2);\n        \n        return clean1 === clean2;\n    }\n    \n    private valueContains(value: any, searchValue: string): boolean {\n        if (Array.isArray(value)) {\n            return value.some(v => this.valueContains(v, searchValue));\n        }\n        \n        const str = this.cleanClassName(value).toLowerCase();\n        const search = this.cleanClassName(searchValue).toLowerCase();\n        \n        return str.includes(search);\n    }\n    \n    private valueStartsWith(value: any, searchValue: string): boolean {\n        if (Array.isArray(value)) {\n            return value.some(v => this.valueStartsWith(v, searchValue));\n        }\n        \n        const str = this.cleanClassName(value).toLowerCase();\n        const search = this.cleanClassName(searchValue).toLowerCase();\n        \n        return str.startsWith(search);\n    }\n    \n    private valueEndsWith(value: any, searchValue: string): boolean {\n        if (Array.isArray(value)) {\n            return value.some(v => this.valueEndsWith(v, searchValue));\n        }\n        \n        const str = this.cleanClassName(value).toLowerCase();\n        const search = this.cleanClassName(searchValue).toLowerCase();\n        \n        return str.endsWith(search);\n    }\n    \n    private filterByRelation(files: TFile[], relationProperty: string, currentAssetPath: string): TFile[] {\n        const currentLink = `[[${currentAssetPath}]]`;\n        \n        return files.filter(file => {\n            const metadata = this.app.metadataCache.getFileCache(file);\n            if (!metadata?.frontmatter) return false;\n            \n            const relationValue = metadata.frontmatter[relationProperty];\n            if (!relationValue) return false;\n            \n            if (Array.isArray(relationValue)) {\n                return relationValue.some(v => \n                    this.cleanClassName(v) === this.cleanClassName(currentLink)\n                );\n            }\n            \n            return this.cleanClassName(relationValue) === this.cleanClassName(currentLink);\n        });\n    }\n    \n    private sortFiles(files: TFile[], sortBy: string, order: 'asc' | 'desc'): TFile[] {\n        return files.sort((a, b) => {\n            const aMetadata = this.app.metadataCache.getFileCache(a);\n            const bMetadata = this.app.metadataCache.getFileCache(b);\n            \n            const aValue = aMetadata?.frontmatter?.[sortBy] || '';\n            const bValue = bMetadata?.frontmatter?.[sortBy] || '';\n            \n            let comparison = 0;\n            \n            if (aValue < bValue) comparison = -1;\n            if (aValue > bValue) comparison = 1;\n            \n            return order === 'asc' ? comparison : -comparison;\n        });\n    }\n    \n    private cleanClassName(value: any): string {\n        if (!value) return '';\n        const str = Array.isArray(value) ? value[0] : value;\n        return str?.toString().replace(/\\[\\[|\\]\\]/g, '').trim() || '';\n    }\n    \n    private cleanValue(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map(v => this.cleanValue(v));\n        }\n        \n        if (typeof value === 'string') {\n            return value.replace(/\\[\\[|\\]\\]/g, '').trim();\n        }\n        \n        return value;\n    }\n}"],"version":3}