62a1d703cfd2b7175a026a7914a0a443
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PropertyEditingUseCase_1 = require("../../../../src/application/use-cases/PropertyEditingUseCase");
const AssetId_1 = require("../../../../src/domain/value-objects/AssetId");
describe('PropertyEditingUseCase', () => {
    let useCase;
    let mockAssetRepository;
    let mockPlugin;
    beforeEach(() => {
        // Setup mock repository
        mockAssetRepository = {
            save: jest.fn(),
            findById: jest.fn(),
            findByFilename: jest.fn(),
            findAll: jest.fn(),
            delete: jest.fn(),
            exists: jest.fn(),
            updateFrontmatterByPath: jest.fn()
        };
        // Setup mock plugin
        mockPlugin = {
            findPropertiesForClass: jest.fn(),
            findAssetsByClass: jest.fn()
        };
        useCase = new PropertyEditingUseCase_1.PropertyEditingUseCase(mockAssetRepository, mockPlugin);
    });
    afterEach(() => {
        jest.clearAllMocks();
        jest.clearAllTimers();
        // Clear references to prevent memory leaks
        mockAssetRepository = null;
        mockPlugin = null;
        useCase = null;
    });
    describe('Basic Functionality', () => {
        test('should create useCase with repository and plugin', () => {
            expect(useCase).toBeDefined();
            expect(useCase.execute).toBeDefined();
        });
        test('should implement UseCase interface', () => {
            expect(typeof useCase.execute).toBe('function');
            expect(typeof useCase.getPropertiesForClass).toBe('function');
            expect(typeof useCase.getAssetsForClass).toBe('function');
        });
        test('should accept valid dependencies in constructor', () => {
            const newUseCase = new PropertyEditingUseCase_1.PropertyEditingUseCase(mockAssetRepository, mockPlugin);
            expect(newUseCase).toBeInstanceOf(PropertyEditingUseCase_1.PropertyEditingUseCase);
        });
    });
    describe('Request Validation', () => {
        test('should fail when assetId is missing', async () => {
            const request = {
                assetId: '',
                propertyName: 'test',
                value: 'value',
                propertyDefinition: {
                    propertyName: 'test',
                    label: 'Test',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Asset ID is required');
        });
        test('should fail when propertyName is missing', async () => {
            const request = {
                assetId: 'test-id',
                propertyName: '',
                value: 'value',
                propertyDefinition: {
                    propertyName: 'test',
                    label: 'Test',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Property name is required');
        });
        test('should pass validation with valid request', async () => {
            const request = {
                assetId: 'valid-id.md',
                propertyName: 'test',
                value: 'value',
                propertyDefinition: {
                    propertyName: 'test',
                    label: 'Test',
                    range: 'string',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should handle null assetId', async () => {
            const request = {
                assetId: null,
                propertyName: 'test',
                value: 'value',
                propertyDefinition: {
                    propertyName: 'test',
                    label: 'Test',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Asset ID is required');
        });
        test('should handle null propertyName', async () => {
            const request = {
                assetId: 'test-id',
                propertyName: null,
                value: 'value',
                propertyDefinition: {
                    propertyName: 'test',
                    label: 'Test',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Property name is required');
        });
    });
    describe('Property Value Validation', () => {
        test('should validate required properties', async () => {
            const request = {
                assetId: 'test-id',
                propertyName: 'requiredProp',
                value: '',
                propertyDefinition: {
                    propertyName: 'requiredProp',
                    label: 'Required Property',
                    range: 'string',
                    isRequired: true
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Required Property is required');
        });
        test('should allow empty values for non-required properties', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'optionalProp',
                value: '',
                propertyDefinition: {
                    propertyName: 'optionalProp',
                    label: 'Optional Property',
                    range: 'string',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should validate number properties', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'numberProp',
                value: 'not-a-number',
                propertyDefinition: {
                    propertyName: 'numberProp',
                    label: 'Number Property',
                    range: 'number',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Number Property must be a number');
        });
        test('should validate valid numbers', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'numberProp',
                value: '42',
                propertyDefinition: {
                    propertyName: 'numberProp',
                    label: 'Number Property',
                    range: 'number',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should validate date properties', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'dateProp',
                value: 'not-a-date',
                propertyDefinition: {
                    propertyName: 'dateProp',
                    label: 'Date Property',
                    range: 'date',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Date Property must be a valid date');
        });
        test('should validate valid dates', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'dateProp',
                value: '2024-12-31',
                propertyDefinition: {
                    propertyName: 'dateProp',
                    label: 'Date Property',
                    range: 'date',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should validate boolean properties', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'boolProp',
                value: 'not-a-boolean',
                propertyDefinition: {
                    propertyName: 'boolProp',
                    label: 'Boolean Property',
                    range: 'boolean',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Boolean Property must be true or false');
        });
        test('should validate valid booleans', async () => {
            const trueRequest = {
                assetId: 'test-id.md',
                propertyName: 'boolProp',
                value: true,
                propertyDefinition: {
                    propertyName: 'boolProp',
                    label: 'Boolean Property',
                    range: 'boolean',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const trueResult = await useCase.execute(trueRequest);
            expect(trueResult.isSuccess).toBe(true);
            const falseRequest = {
                assetId: 'test-id.md',
                propertyName: 'boolProp',
                value: false,
                propertyDefinition: {
                    propertyName: 'boolProp',
                    label: 'Boolean Property',
                    range: 'boolean',
                    isRequired: false
                }
            };
            const falseResult = await useCase.execute(falseRequest);
            expect(falseResult.isSuccess).toBe(true);
        });
        test('should validate enum properties', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'enumProp',
                value: 'invalid',
                propertyDefinition: {
                    propertyName: 'enumProp',
                    label: 'Enum Property',
                    range: 'enum:low,medium,high',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Enum Property must be one of: low, medium, high');
        });
        test('should validate valid enum values', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'enumProp',
                value: 'medium',
                propertyDefinition: {
                    propertyName: 'enumProp',
                    label: 'Enum Property',
                    range: 'enum:low,medium,high',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should validate with custom regex', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'regexProp',
                value: 'invalid-format',
                propertyDefinition: {
                    propertyName: 'regexProp',
                    label: 'Regex Property',
                    range: 'string',
                    isRequired: false,
                    validation: '^[A-Z]{3}-\\d{3}$'
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Regex Property format is invalid');
        });
        test('should pass custom regex validation', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'regexProp',
                value: 'ABC-123',
                propertyDefinition: {
                    propertyName: 'regexProp',
                    label: 'Regex Property',
                    range: 'string',
                    isRequired: false,
                    validation: '^[A-Z]{3}-\\d{3}$'
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should handle invalid regex gracefully', async () => {
            const request = {
                assetId: 'test-id.md',
                propertyName: 'regexProp',
                value: 'any-value',
                propertyDefinition: {
                    propertyName: 'regexProp',
                    label: 'Regex Property',
                    range: 'string',
                    isRequired: false,
                    validation: '[invalid-regex'
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true); // Should skip invalid regex validation
        });
    });
    describe('Direct File Path Updates', () => {
        test('should use direct path update for file paths', async () => {
            const request = {
                assetId: 'path/to/file.md',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(mockAssetRepository.updateFrontmatterByPath).toHaveBeenCalledWith('path/to/file.md', { title: 'New Title' });
        });
        test('should handle direct update errors', async () => {
            const request = {
                assetId: 'path/to/file.md',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            mockAssetRepository.updateFrontmatterByPath.mockRejectedValue(new Error('File not found'));
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Failed to update property: Error: File not found');
        });
        test('should detect file paths correctly', async () => {
            const filePaths = [
                'file.md',
                'folder/file.md',
                'deep/nested/path/file.md',
                '../relative/path.md',
                './current/path.md'
            ];
            for (const filePath of filePaths) {
                const request = {
                    assetId: filePath,
                    propertyName: 'test',
                    value: 'value',
                    propertyDefinition: {
                        propertyName: 'test',
                        label: 'Test',
                        range: 'string',
                        isRequired: false
                    }
                };
                mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
                const result = await useCase.execute(request);
                expect(result.isSuccess).toBe(true);
                expect(mockAssetRepository.updateFrontmatterByPath).toHaveBeenCalledWith(filePath, { test: 'value' });
            }
        });
        test('should fallback to Asset ID lookup when direct update not available', async () => {
            const request = {
                assetId: 'path/to/file.md',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            // Mock repository without updateFrontmatterByPath method
            const repoWithoutDirectUpdate = { ...mockAssetRepository };
            delete repoWithoutDirectUpdate.updateFrontmatterByPath;
            const useCaseWithoutDirectUpdate = new PropertyEditingUseCase_1.PropertyEditingUseCase(repoWithoutDirectUpdate, mockPlugin);
            // Mock asset creation and retrieval
            const mockAsset = {
                setProperty: jest.fn(),
                getId: jest.fn().mockReturnValue(AssetId_1.AssetId.create('valid-uuid').getValue())
            };
            repoWithoutDirectUpdate.findByFilename.mockResolvedValue(mockAsset);
            repoWithoutDirectUpdate.save.mockResolvedValue(undefined);
            const result = await useCaseWithoutDirectUpdate.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(repoWithoutDirectUpdate.findByFilename).toHaveBeenCalledWith('path/to/file.md');
            expect(mockAsset.setProperty).toHaveBeenCalledWith('title', 'New Title');
        });
    });
    describe('Asset ID Based Updates', () => {
        test('should update asset by UUID', async () => {
            const validUUID = '123e4567-e89b-12d3-a456-426614174000';
            const mockAsset = {
                setProperty: jest.fn(),
                getId: jest.fn().mockReturnValue(AssetId_1.AssetId.create(validUUID).getValue())
            };
            mockAssetRepository.findById.mockResolvedValue(mockAsset);
            mockAssetRepository.save.mockResolvedValue(undefined);
            const request = {
                assetId: validUUID,
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(mockAssetRepository.findById).toHaveBeenCalled();
            expect(mockAsset.setProperty).toHaveBeenCalledWith('title', 'New Title');
            expect(mockAssetRepository.save).toHaveBeenCalledWith(mockAsset);
        });
        test('should fallback to filename lookup when UUID lookup fails', async () => {
            const mockAsset = {
                setProperty: jest.fn(),
                getId: jest.fn().mockReturnValue(AssetId_1.AssetId.create('123e4567-e89b-12d3-a456-426614174000').getValue())
            };
            mockAssetRepository.findById.mockResolvedValue(null);
            mockAssetRepository.findByFilename.mockResolvedValue(mockAsset);
            mockAssetRepository.save.mockResolvedValue(undefined);
            const request = {
                assetId: 'invalid-uuid',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(mockAssetRepository.findByFilename).toHaveBeenCalledWith('invalid-uuid');
            expect(mockAsset.setProperty).toHaveBeenCalledWith('title', 'New Title');
        });
        test('should fail when asset not found by ID or filename', async () => {
            mockAssetRepository.findById.mockResolvedValue(null);
            mockAssetRepository.findByFilename.mockResolvedValue(null);
            const request = {
                assetId: 'nonexistent',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Asset not found: nonexistent');
        });
        test('should handle repository errors during asset lookup', async () => {
            mockAssetRepository.findById.mockRejectedValue(new Error('Database error'));
            const request = {
                assetId: 'test-id',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Failed to update property: Error: Database error');
        });
        test('should handle save errors', async () => {
            const mockAsset = {
                setProperty: jest.fn(),
                getId: jest.fn().mockReturnValue(AssetId_1.AssetId.create('123e4567-e89b-12d3-a456-426614174000').getValue())
            };
            mockAssetRepository.findByFilename.mockResolvedValue(mockAsset);
            mockAssetRepository.save.mockRejectedValue(new Error('Save failed'));
            const request = {
                assetId: 'test-asset',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Failed to update property: Error: Save failed');
        });
    });
    describe('Property Value Types', () => {
        beforeEach(() => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
        });
        test('should handle string values', async () => {
            const request = {
                assetId: 'test.md',
                propertyName: 'description',
                value: 'This is a description',
                propertyDefinition: {
                    propertyName: 'description',
                    label: 'Description',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toBe('This is a description');
        });
        test('should handle numeric values', async () => {
            const request = {
                assetId: 'test.md',
                propertyName: 'count',
                value: 42,
                propertyDefinition: {
                    propertyName: 'count',
                    label: 'Count',
                    range: 'number',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toBe(42);
        });
        test('should handle boolean values', async () => {
            const request = {
                assetId: 'test.md',
                propertyName: 'active',
                value: true,
                propertyDefinition: {
                    propertyName: 'active',
                    label: 'Active',
                    range: 'boolean',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toBe(true);
        });
        test('should handle array values', async () => {
            const arrayValue = ['item1', 'item2', 'item3'];
            const request = {
                assetId: 'test.md',
                propertyName: 'tags',
                value: arrayValue,
                propertyDefinition: {
                    propertyName: 'tags',
                    label: 'Tags',
                    range: 'array',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toEqual(arrayValue);
        });
        test('should handle object values', async () => {
            const objectValue = { nested: 'value', count: 5 };
            const request = {
                assetId: 'test.md',
                propertyName: 'metadata',
                value: objectValue,
                propertyDefinition: {
                    propertyName: 'metadata',
                    label: 'Metadata',
                    range: 'object',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toEqual(objectValue);
        });
        test('should handle null values for non-required properties', async () => {
            const request = {
                assetId: 'test.md',
                propertyName: 'optional',
                value: null,
                propertyDefinition: {
                    propertyName: 'optional',
                    label: 'Optional',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toBeNull();
        });
        test('should handle undefined values for non-required properties', async () => {
            const request = {
                assetId: 'test.md',
                propertyName: 'optional',
                value: undefined,
                propertyDefinition: {
                    propertyName: 'optional',
                    label: 'Optional',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toBeUndefined();
        });
    });
    describe('Plugin Integration', () => {
        test('should get properties for class through plugin', async () => {
            const mockProperties = [
                {
                    name: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: true
                },
                {
                    name: 'description',
                    label: 'Description',
                    range: 'text',
                    isRequired: false
                }
            ];
            mockPlugin.findPropertiesForClass.mockResolvedValue(mockProperties);
            const result = await useCase.getPropertiesForClass('exo__Task');
            expect(result.isSuccess).toBe(true);
            expect(result.getValue()).toEqual(mockProperties);
            expect(mockPlugin.findPropertiesForClass).toHaveBeenCalledWith('exo__Task');
        });
        test('should handle plugin errors when getting properties', async () => {
            mockPlugin.findPropertiesForClass.mockRejectedValue(new Error('Plugin error'));
            const result = await useCase.getPropertiesForClass('exo__Task');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Failed to get properties: Plugin error');
        });
        test('should get assets for class through plugin', async () => {
            const mockAssets = [
                { id: '1', title: 'Asset 1' },
                { id: '2', title: 'Asset 2' }
            ];
            mockPlugin.findAssetsByClass.mockResolvedValue(mockAssets);
            const result = await useCase.getAssetsForClass('exo__Task');
            expect(result.isSuccess).toBe(true);
            expect(result.getValue()).toEqual(mockAssets);
            expect(mockPlugin.findAssetsByClass).toHaveBeenCalledWith('exo__Task', true);
        });
        test('should handle plugin errors when getting assets', async () => {
            mockPlugin.findAssetsByClass.mockRejectedValue(new Error('Plugin error'));
            const result = await useCase.getAssetsForClass('exo__Task');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Failed to get assets: Plugin error');
        });
        test('should pass correct parameters to plugin methods', async () => {
            mockPlugin.findPropertiesForClass.mockResolvedValue([]);
            mockPlugin.findAssetsByClass.mockResolvedValue([]);
            await useCase.getPropertiesForClass('custom__Class');
            await useCase.getAssetsForClass('custom__Class');
            expect(mockPlugin.findPropertiesForClass).toHaveBeenCalledWith('custom__Class');
            expect(mockPlugin.findAssetsByClass).toHaveBeenCalledWith('custom__Class', true);
        });
    });
    describe('Response Structure', () => {
        test('should return correct success response structure', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const request = {
                assetId: 'test.md',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue()).toEqual({
                success: true,
                updatedValue: 'New Title'
            });
        });
        test('should return correct failure response structure', async () => {
            const request = {
                assetId: '',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Asset ID is required');
        });
        test('should preserve original value in success response', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const complexValue = {
                nested: {
                    array: [1, 2, 3],
                    string: 'test'
                }
            };
            const request = {
                assetId: 'test.md',
                propertyName: 'metadata',
                value: complexValue,
                propertyDefinition: {
                    propertyName: 'metadata',
                    label: 'Metadata',
                    range: 'object',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toEqual(complexValue);
        });
    });
    describe('Edge Cases and Error Handling', () => {
        test('should handle extremely large property values', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            // Reduce size for CI memory efficiency
            const largeSize = process.env.CI ? 10000 : 50000;
            const largeValue = 'A'.repeat(largeSize);
            const request = {
                assetId: 'test.md',
                propertyName: 'largeField',
                value: largeValue,
                propertyDefinition: {
                    propertyName: 'largeField',
                    label: 'Large Field',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().updatedValue).toBe(largeValue);
            // Clear large string reference
            request.value = null;
        });
        test('should handle special characters in property names', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const specialPropName = 'prop-with-special_chars$123';
            const request = {
                assetId: 'test.md',
                propertyName: specialPropName,
                value: 'test value',
                propertyDefinition: {
                    propertyName: specialPropName,
                    label: 'Special Property',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should handle circular references in object values', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const obj1 = { name: 'obj1' };
            const obj2 = { name: 'obj2', ref: obj1 };
            obj1.ref = obj2; // Create circular reference
            const request = {
                assetId: 'test.md',
                propertyName: 'circular',
                value: obj1,
                propertyDefinition: {
                    propertyName: 'circular',
                    label: 'Circular',
                    range: 'object',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isSuccess).toBe(true);
        });
        test('should handle concurrent updates gracefully', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const concurrentCount = process.env.CI ? 5 : 10; // Reduce for CI
            const requests = Array(concurrentCount).fill(null).map((_, i) => ({
                assetId: `test${i}.md`,
                propertyName: 'title',
                value: `Title ${i}`,
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            }));
            const promises = requests.map(req => useCase.execute(req));
            const results = await Promise.all(promises);
            results.forEach((result, i) => {
                expect(result.isSuccess).toBe(true);
                expect(result.getValue().updatedValue).toBe(`Title ${i}`);
            });
            // Clear references
            requests.length = 0;
            promises.length = 0;
            results.length = 0;
        });
        test('should handle timeout scenarios', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockImplementation(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 100)));
            const request = {
                assetId: 'test.md',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            const result = await useCase.execute(request);
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Timeout');
        });
        test('should handle malformed property definitions', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const request = {
                assetId: 'test.md',
                propertyName: 'test',
                value: 'value',
                propertyDefinition: {
                    propertyName: 'test',
                    label: null,
                    range: undefined,
                    isRequired: null
                }
            };
            const result = await useCase.execute(request);
            // Should handle gracefully and succeed
            expect(result.isSuccess).toBe(true);
        });
    });
    describe('Performance Tests', () => {
        test('should complete property updates within reasonable time', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const startTime = Date.now();
            const request = {
                assetId: 'test.md',
                propertyName: 'title',
                value: 'New Title',
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            };
            await useCase.execute(request);
            const endTime = Date.now();
            const duration = endTime - startTime;
            expect(duration).toBeLessThan(100); // Should complete within 100ms
        });
        test('should handle batch updates efficiently', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const startTime = Date.now();
            const batchSize = process.env.CI ? 10 : 25; // Reduce batch size for CI
            const requests = Array(batchSize).fill(null).map((_, i) => ({
                assetId: `test${i}.md`,
                propertyName: 'title',
                value: `Title ${i}`,
                propertyDefinition: {
                    propertyName: 'title',
                    label: 'Title',
                    range: 'string',
                    isRequired: false
                }
            }));
            const promises = requests.map(req => useCase.execute(req));
            await Promise.all(promises);
            // Clear references
            requests.length = 0;
            promises.length = 0;
            const endTime = Date.now();
            const duration = endTime - startTime;
            const timeoutLimit = process.env.CI ? 2000 : 1000; // More lenient for CI
            expect(duration).toBeLessThan(timeoutLimit);
        });
        test('should not accumulate memory over multiple executions', async () => {
            mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);
            const initialMemory = process.memoryUsage().heapUsed;
            const requests = [];
            // Reduce iterations for CI memory efficiency
            const iterations = process.env.CI ? 10 : 50;
            for (let i = 0; i < iterations; i++) {
                const request = {
                    assetId: `test${i}.md`,
                    propertyName: 'title',
                    value: `Title ${i}`,
                    propertyDefinition: {
                        propertyName: 'title',
                        label: 'Title',
                        range: 'string',
                        isRequired: false
                    }
                };
                requests.push(request);
            }
            // Execute in smaller batches to prevent memory buildup
            const batchSize = 5;
            for (let i = 0; i < requests.length; i += batchSize) {
                const batch = requests.slice(i, i + batchSize);
                await Promise.all(batch.map(req => useCase.execute(req)));
                // Clear references after each batch
                batch.length = 0;
            }
            // Clear the requests array
            requests.length = 0;
            // Force garbage collection if possible
            if (global.gc) {
                global.gc();
            }
            const finalMemory = process.memoryUsage().heapUsed;
            const memoryIncrease = finalMemory - initialMemory;
            // Memory increase should be reasonable (less than 3MB in CI, 8MB locally)
            const memoryLimit = process.env.CI ? 3 * 1024 * 1024 : 8 * 1024 * 1024;
            expect(memoryIncrease).toBeLessThan(memoryLimit);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9hcHBsaWNhdGlvbi91c2UtY2FzZXMvUHJvcGVydHlFZGl0aW5nVXNlQ2FzZS50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEseUdBQXFKO0FBR3JKLDBFQUF1RTtBQUt2RSxRQUFRLENBQUMsd0JBQXdCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksT0FBK0IsQ0FBQztJQUNwQyxJQUFJLG1CQUFrRCxDQUFDO0lBQ3ZELElBQUksVUFBZSxDQUFDO0lBRXBCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWix3QkFBd0I7UUFDeEIsbUJBQW1CLEdBQUc7WUFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNuQixjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUN6QixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNqQix1QkFBdUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1NBQ3JDLENBQUM7UUFFRixvQkFBb0I7UUFDcEIsVUFBVSxHQUFHO1lBQ1Qsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUNqQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1NBQy9CLENBQUM7UUFFRixPQUFPLEdBQUcsSUFBSSwrQ0FBc0IsQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLDJDQUEyQztRQUMzQyxtQkFBbUIsR0FBRyxJ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RyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUM7Z0JBQy9DLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRTFELG9DQUFvQztnQkFDcEMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7YUFDcEI7WUFFRCwyQkFBMkI7WUFDM0IsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFFcEIsdUNBQXVDO1lBQ3ZDLElBQUksTUFBTSxDQUFDLEVBQUUsRUFBRTtnQkFDWCxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7YUFDZjtZQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7WUFDbkQsTUFBTSxjQUFjLEdBQUcsV0FBVyxHQUFHLGFBQWEsQ0FBQztZQUVuRCwwRUFBMEU7WUFDMUUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztZQUN2RSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi90ZXN0cy91bml0L2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9Qcm9wZXJ0eUVkaXRpbmdVc2VDYXNlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydHlFZGl0aW5nVXNlQ2FzZSwgVXBkYXRlUHJvcGVydHlSZXF1ZXN0LCBVcGRhdGVQcm9wZXJ0eVJlc3BvbnNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9Qcm9wZXJ0eUVkaXRpbmdVc2VDYXNlJztcbmltcG9ydCB7IElBc3NldFJlcG9zaXRvcnkgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL3JlcG9zaXRvcmllcy9JQXNzZXRSZXBvc2l0b3J5JztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi9lbnRpdGllcy9Bc3NldCc7XG5pbXBvcnQgeyBBc3NldElkIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL0Fzc2V0SWQnO1xuaW1wb3J0IHsgQ2xhc3NOYW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL0NsYXNzTmFtZSc7XG5pbXBvcnQgeyBPbnRvbG9neVByZWZpeCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9kb21haW4vdmFsdWUtb2JqZWN0cy9PbnRvbG9neVByZWZpeCc7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL2NvcmUvUmVzdWx0JztcblxuZGVzY3JpYmUoJ1Byb3BlcnR5RWRpdGluZ1VzZUNhc2UnLCAoKSA9PiB7XG4gICAgbGV0IHVzZUNhc2U6IFByb3BlcnR5RWRpdGluZ1VzZUNhc2U7XG4gICAgbGV0IG1vY2tBc3NldFJlcG9zaXRvcnk6IGplc3QuTW9ja2VkPElBc3NldFJlcG9zaXRvcnk+O1xuICAgIGxldCBtb2NrUGx1Z2luOiBhbnk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgLy8gU2V0dXAgbW9jayByZXBvc2l0b3J5XG4gICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkgPSB7XG4gICAgICAgICAgICBzYXZlOiBqZXN0LmZuKCksXG4gICAgICAgICAgICBmaW5kQnlJZDogamVzdC5mbigpLFxuICAgICAgICAgICAgZmluZEJ5RmlsZW5hbWU6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGZpbmRBbGw6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGRlbGV0ZTogamVzdC5mbigpLFxuICAgICAgICAgICAgZXhpc3RzOiBqZXN0LmZuKCksXG4gICAgICAgICAgICB1cGRhdGVGcm9udG1hdHRlckJ5UGF0aDogamVzdC5mbigpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU2V0dXAgbW9jayBwbHVnaW5cbiAgICAgICAgbW9ja1BsdWdpbiA9IHtcbiAgICAgICAgICAgIGZpbmRQcm9wZXJ0aWVzRm9yQ2xhc3M6IGplc3QuZm4oKSxcbiAgICAgICAgICAgIGZpbmRBc3NldHNCeUNsYXNzOiBqZXN0LmZuKClcbiAgICAgICAgfTtcblxuICAgICAgICB1c2VDYXNlID0gbmV3IFByb3BlcnR5RWRpdGluZ1VzZUNhc2UobW9ja0Fzc2V0UmVwb3NpdG9yeSwgbW9ja1BsdWdpbik7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgICAgamVzdC5jbGVhckFsbFRpbWVycygpO1xuICAgICAgICAvLyBDbGVhciByZWZlcmVuY2VzIHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzXG4gICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkgPSBudWxsIGFzIGFueTtcbiAgICAgICAgbW9ja1BsdWdpbiA9IG51bGwgYXMgYW55O1xuICAgICAgICB1c2VDYXNlID0gbnVsbCBhcyBhbnk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnQmFzaWMgRnVuY3Rpb25hbGl0eScsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSB1c2VDYXNlIHdpdGggcmVwb3NpdG9yeSBhbmQgcGx1Z2luJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHVzZUNhc2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QodXNlQ2FzZS5leGVjdXRlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaW1wbGVtZW50IFVzZUNhc2UgaW50ZXJmYWNlJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHR5cGVvZiB1c2VDYXNlLmV4ZWN1dGUpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgICAgICAgICBleHBlY3QodHlwZW9mIHVzZUNhc2UuZ2V0UHJvcGVydGllc0ZvckNsYXNzKS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgICAgICAgZXhwZWN0KHR5cGVvZiB1c2VDYXNlLmdldEFzc2V0c0ZvckNsYXNzKS50b0JlKCdmdW5jdGlvbicpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgYWNjZXB0IHZhbGlkIGRlcGVuZGVuY2llcyBpbiBjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1VzZUNhc2UgPSBuZXcgUHJvcGVydHlFZGl0aW5nVXNlQ2FzZShtb2NrQXNzZXRSZXBvc2l0b3J5LCBtb2NrUGx1Z2luKTtcbiAgICAgICAgICAgIGV4cGVjdChuZXdVc2VDYXNlKS50b0JlSW5zdGFuY2VPZihQcm9wZXJ0eUVkaXRpbmdVc2VDYXNlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUmVxdWVzdCBWYWxpZGF0aW9uJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgZmFpbCB3aGVuIGFzc2V0SWQgaXMgbWlzc2luZycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAnJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ3ZhbHVlJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnQXNzZXQgSUQgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGZhaWwgd2hlbiBwcm9wZXJ0eU5hbWUgaXMgbWlzc2luZycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC1pZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ3ZhbHVlJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnUHJvcGVydHkgbmFtZSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgcGFzcyB2YWxpZGF0aW9uIHdpdGggdmFsaWQgcmVxdWVzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndmFsaWQtaWQubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3Rlc3QnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAndmFsdWUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBudWxsIGFzc2V0SWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogbnVsbCBhcyBhbnksXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGVzdCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3Rlc3QnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1Rlc3QnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzRmFpbHVyZSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ0Fzc2V0IElEIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbnVsbCBwcm9wZXJ0eU5hbWUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QtaWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogbnVsbCBhcyBhbnksXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd2YWx1ZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3Rlc3QnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1Rlc3QnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzRmFpbHVyZSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ1Byb3BlcnR5IG5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUHJvcGVydHkgVmFsdWUgVmFsaWRhdGlvbicsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIHJlcXVpcmVkIHByb3BlcnRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QtaWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3JlcXVpcmVkUHJvcCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdyZXF1aXJlZFByb3AnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1JlcXVpcmVkIFByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzRmFpbHVyZSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ1JlcXVpcmVkIFByb3BlcnR5IGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBhbGxvdyBlbXB0eSB2YWx1ZXMgZm9yIG5vbi1yZXF1aXJlZCBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdvcHRpb25hbFByb3AnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnb3B0aW9uYWxQcm9wJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdPcHRpb25hbCBQcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCB2YWxpZGF0ZSBudW1iZXIgcHJvcGVydGllcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC1pZC5tZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnbnVtYmVyUHJvcCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdub3QtYS1udW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdudW1iZXJQcm9wJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdOdW1iZXIgUHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzRmFpbHVyZSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ051bWJlciBQcm9wZXJ0eSBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCB2YWxpZGF0ZSB2YWxpZCBudW1iZXJzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdudW1iZXJQcm9wJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJzQyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnbnVtYmVyUHJvcCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnTnVtYmVyIFByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIGRhdGUgcHJvcGVydGllcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC1pZC5tZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnZGF0ZVByb3AnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnbm90LWEtZGF0ZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ2RhdGVQcm9wJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdEYXRlIFByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnRGF0ZSBQcm9wZXJ0eSBtdXN0IGJlIGEgdmFsaWQgZGF0ZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgdmFsaWQgZGF0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QtaWQubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ2RhdGVQcm9wJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJzIwMjQtMTItMzEnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdkYXRlUHJvcCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnRGF0ZSBQcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgYm9vbGVhbiBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdib29sUHJvcCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdub3QtYS1ib29sZWFuJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnYm9vbFByb3AnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0Jvb2xlYW4gUHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc0ZhaWx1cmUpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCdCb29sZWFuIFByb3BlcnR5IG11c3QgYmUgdHJ1ZSBvciBmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgdmFsaWQgYm9vbGVhbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0cnVlUmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdib29sUHJvcCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ2Jvb2xQcm9wJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdCb29sZWFuIFByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdib29sZWFuJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHRydWVSZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUodHJ1ZVJlcXVlc3QpO1xuICAgICAgICAgICAgZXhwZWN0KHRydWVSZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuXG4gICAgICAgICAgICBjb25zdCBmYWxzZVJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC1pZC5tZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnYm9vbFByb3AnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnYm9vbFByb3AnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0Jvb2xlYW4gUHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IGZhbHNlUmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKGZhbHNlUmVxdWVzdCk7XG4gICAgICAgICAgICBleHBlY3QoZmFsc2VSZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgdmFsaWRhdGUgZW51bSBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdlbnVtUHJvcCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdpbnZhbGlkJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnZW51bVByb3AnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0VudW0gUHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ2VudW06bG93LG1lZGl1bSxoaWdoJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnRW51bSBQcm9wZXJ0eSBtdXN0IGJlIG9uZSBvZjogbG93LCBtZWRpdW0sIGhpZ2gnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIHZhbGlkIGVudW0gdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdlbnVtUHJvcCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdtZWRpdW0nLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdlbnVtUHJvcCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnRW51bSBQcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnZW51bTpsb3csbWVkaXVtLGhpZ2gnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIHZhbGlkYXRlIHdpdGggY3VzdG9tIHJlZ2V4JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdyZWdleFByb3AnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnaW52YWxpZC1mb3JtYXQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdyZWdleFByb3AnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1JlZ2V4IFByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbjogJ15bQS1aXXszfS1cXFxcZHszfSQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzRmFpbHVyZSkudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ1JlZ2V4IFByb3BlcnR5IGZvcm1hdCBpcyBpbnZhbGlkJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBwYXNzIGN1c3RvbSByZWdleCB2YWxpZGF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdyZWdleFByb3AnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnQUJDLTEyMycsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3JlZ2V4UHJvcCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnUmVnZXggUHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uOiAnXltBLVpdezN9LVxcXFxkezN9JCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgaW52YWxpZCByZWdleCBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0LWlkLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdyZWdleFByb3AnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnYW55LXZhbHVlJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAncmVnZXhQcm9wJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdSZWdleCBQcm9wZXJ0eScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb246ICdbaW52YWxpZC1yZWdleCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7IC8vIFNob3VsZCBza2lwIGludmFsaWQgcmVnZXggdmFsaWRhdGlvblxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdEaXJlY3QgRmlsZSBQYXRoIFVwZGF0ZXMnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCB1c2UgZGlyZWN0IHBhdGggdXBkYXRlIGZvciBmaWxlIHBhdGhzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICdwYXRoL3RvL2ZpbGUubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QobW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgICAgICAgJ3BhdGgvdG8vZmlsZS5tZCcsXG4gICAgICAgICAgICAgICAgeyB0aXRsZTogJ05ldyBUaXRsZScgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBkaXJlY3QgdXBkYXRlIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAncGF0aC90by9maWxlLm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOZXcgVGl0bGUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0ZpbGUgbm90IGZvdW5kJykpO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnRmFpbGVkIHRvIHVwZGF0ZSBwcm9wZXJ0eTogRXJyb3I6IEZpbGUgbm90IGZvdW5kJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBkZXRlY3QgZmlsZSBwYXRocyBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aHMgPSBbXG4gICAgICAgICAgICAgICAgJ2ZpbGUubWQnLFxuICAgICAgICAgICAgICAgICdmb2xkZXIvZmlsZS5tZCcsXG4gICAgICAgICAgICAgICAgJ2RlZXAvbmVzdGVkL3BhdGgvZmlsZS5tZCcsXG4gICAgICAgICAgICAgICAgJy4uL3JlbGF0aXZlL3BhdGgubWQnLFxuICAgICAgICAgICAgICAgICcuL2N1cnJlbnQvcGF0aC5tZCdcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZmlsZVBhdGggb2YgZmlsZVBhdGhzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICBhc3NldElkOiBmaWxlUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGVzdCcsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAndmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3Rlc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAgICAgICAgICAgICBmaWxlUGF0aCxcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXN0OiAndmFsdWUnIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgZmFsbGJhY2sgdG8gQXNzZXQgSUQgbG9va3VwIHdoZW4gZGlyZWN0IHVwZGF0ZSBub3QgYXZhaWxhYmxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICdwYXRoL3RvL2ZpbGUubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBNb2NrIHJlcG9zaXRvcnkgd2l0aG91dCB1cGRhdGVGcm9udG1hdHRlckJ5UGF0aCBtZXRob2RcbiAgICAgICAgICAgIGNvbnN0IHJlcG9XaXRob3V0RGlyZWN0VXBkYXRlID0geyAuLi5tb2NrQXNzZXRSZXBvc2l0b3J5IH07XG4gICAgICAgICAgICBkZWxldGUgKHJlcG9XaXRob3V0RGlyZWN0VXBkYXRlIGFzIGFueSkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGg7XG5cbiAgICAgICAgICAgIGNvbnN0IHVzZUNhc2VXaXRob3V0RGlyZWN0VXBkYXRlID0gbmV3IFByb3BlcnR5RWRpdGluZ1VzZUNhc2UocmVwb1dpdGhvdXREaXJlY3RVcGRhdGUsIG1vY2tQbHVnaW4pO1xuXG4gICAgICAgICAgICAvLyBNb2NrIGFzc2V0IGNyZWF0aW9uIGFuZCByZXRyaWV2YWxcbiAgICAgICAgICAgIGNvbnN0IG1vY2tBc3NldCA9IHtcbiAgICAgICAgICAgICAgICBzZXRQcm9wZXJ0eTogamVzdC5mbigpLFxuICAgICAgICAgICAgICAgIGdldElkOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKEFzc2V0SWQuY3JlYXRlKCd2YWxpZC11dWlkJykuZ2V0VmFsdWUoKSlcbiAgICAgICAgICAgIH0gYXMgYW55O1xuXG4gICAgICAgICAgICByZXBvV2l0aG91dERpcmVjdFVwZGF0ZS5maW5kQnlGaWxlbmFtZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrQXNzZXQpO1xuICAgICAgICAgICAgcmVwb1dpdGhvdXREaXJlY3RVcGRhdGUuc2F2ZS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlV2l0aG91dERpcmVjdFVwZGF0ZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXBvV2l0aG91dERpcmVjdFVwZGF0ZS5maW5kQnlGaWxlbmFtZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3BhdGgvdG8vZmlsZS5tZCcpO1xuICAgICAgICAgICAgZXhwZWN0KG1vY2tBc3NldC5zZXRQcm9wZXJ0eSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3RpdGxlJywgJ05ldyBUaXRsZScpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdBc3NldCBJRCBCYXNlZCBVcGRhdGVzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgdXBkYXRlIGFzc2V0IGJ5IFVVSUQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWxpZFVVSUQgPSAnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwJztcbiAgICAgICAgICAgIGNvbnN0IG1vY2tBc3NldCA9IHtcbiAgICAgICAgICAgICAgICBzZXRQcm9wZXJ0eTogamVzdC5mbigpLFxuICAgICAgICAgICAgICAgIGdldElkOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKEFzc2V0SWQuY3JlYXRlKHZhbGlkVVVJRCkuZ2V0VmFsdWUoKSlcbiAgICAgICAgICAgIH0gYXMgYW55O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUlkLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tBc3NldCk7XG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnNhdmUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6IHZhbGlkVVVJRCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOZXcgVGl0bGUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUlkKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgICAgICBleHBlY3QobW9ja0Fzc2V0LnNldFByb3BlcnR5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGl0bGUnLCAnTmV3IFRpdGxlJyk7XG4gICAgICAgICAgICBleHBlY3QobW9ja0Fzc2V0UmVwb3NpdG9yeS5zYXZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrQXNzZXQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgZmFsbGJhY2sgdG8gZmlsZW5hbWUgbG9va3VwIHdoZW4gVVVJRCBsb29rdXAgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2NrQXNzZXQgPSB7XG4gICAgICAgICAgICAgICAgc2V0UHJvcGVydHk6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICBnZXRJZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShBc3NldElkLmNyZWF0ZSgnMTIzZTQ1NjctZTg5Yi0xMmQzLWE0NTYtNDI2NjE0MTc0MDAwJykuZ2V0VmFsdWUoKSlcbiAgICAgICAgICAgIH0gYXMgYW55O1xuXG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUlkLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlGaWxlbmFtZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrQXNzZXQpO1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5zYXZlLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAnaW52YWxpZC11dWlkJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOZXcgVGl0bGUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnaW52YWxpZC11dWlkJyk7XG4gICAgICAgICAgICBleHBlY3QobW9ja0Fzc2V0LnNldFByb3BlcnR5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGl0bGUnLCAnTmV3IFRpdGxlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBmYWlsIHdoZW4gYXNzZXQgbm90IGZvdW5kIGJ5IElEIG9yIGZpbGVuYW1lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlJZC5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5RmlsZW5hbWUubW9ja1Jlc29sdmVkVmFsdWUobnVsbCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAnbm9uZXhpc3RlbnQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnQXNzZXQgbm90IGZvdW5kOiBub25leGlzdGVudCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHJlcG9zaXRvcnkgZXJyb3JzIGR1cmluZyBhc3NldCBsb29rdXAnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUlkLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRGF0YWJhc2UgZXJyb3InKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC1pZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAnTmV3IFRpdGxlJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc0ZhaWx1cmUpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCdGYWlsZWQgdG8gdXBkYXRlIHByb3BlcnR5OiBFcnJvcjogRGF0YWJhc2UgZXJyb3InKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzYXZlIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tBc3NldCA9IHtcbiAgICAgICAgICAgICAgICBzZXRQcm9wZXJ0eTogamVzdC5mbigpLFxuICAgICAgICAgICAgICAgIGdldElkOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKEFzc2V0SWQuY3JlYXRlKCcxMjNlNDU2Ny1lODliLTEyZDMtYTQ1Ni00MjY2MTQxNzQwMDAnKS5nZXRWYWx1ZSgpKVxuICAgICAgICAgICAgfSBhcyBhbnk7XG5cbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5RmlsZW5hbWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja0Fzc2V0KTtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuc2F2ZS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1NhdmUgZmFpbGVkJykpO1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QtYXNzZXQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnRmFpbGVkIHRvIHVwZGF0ZSBwcm9wZXJ0eTogRXJyb3I6IFNhdmUgZmFpbGVkJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1Byb3BlcnR5IFZhbHVlIFR5cGVzJywgKCkgPT4ge1xuICAgICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzdHJpbmcgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdkZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdUaGlzIGlzIGEgZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdkZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnRGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKS51cGRhdGVkVmFsdWUpLnRvQmUoJ1RoaXMgaXMgYSBkZXNjcmlwdGlvbicpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIG51bWVyaWMgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdjb3VudCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IDQyLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdjb3VudCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnQ291bnQnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKS51cGRhdGVkVmFsdWUpLnRvQmUoNDIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGJvb2xlYW4gdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdhY3RpdmUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdhY3RpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0FjdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKS51cGRhdGVkVmFsdWUpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgYXJyYXkgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXJyYXlWYWx1ZSA9IFsnaXRlbTEnLCAnaXRlbTInLCAnaXRlbTMnXTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC5tZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGFncycsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFycmF5VmFsdWUsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RhZ3MnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RhZ3MnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ2FycmF5JyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5nZXRWYWx1ZSgpLnVwZGF0ZWRWYWx1ZSkudG9FcXVhbChhcnJheVZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBvYmplY3QgdmFsdWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2JqZWN0VmFsdWUgPSB7IG5lc3RlZDogJ3ZhbHVlJywgY291bnQ6IDUgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3Q6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiAndGVzdC5tZCcsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnbWV0YWRhdGEnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBvYmplY3RWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnbWV0YWRhdGEnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ01ldGFkYXRhJyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmdldFZhbHVlKCkudXBkYXRlZFZhbHVlKS50b0VxdWFsKG9iamVjdFZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBudWxsIHZhbHVlcyBmb3Igbm9uLXJlcXVpcmVkIHByb3BlcnRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ29wdGlvbmFsJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnb3B0aW9uYWwnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ09wdGlvbmFsJyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmdldFZhbHVlKCkudXBkYXRlZFZhbHVlKS50b0JlTnVsbCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHVuZGVmaW5lZCB2YWx1ZXMgZm9yIG5vbi1yZXF1aXJlZCBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdvcHRpb25hbCcsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnb3B0aW9uYWwnLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ09wdGlvbmFsJyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICBpc1JlcXVpcmVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmdldFZhbHVlKCkudXBkYXRlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1BsdWdpbiBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGdldCBwcm9wZXJ0aWVzIGZvciBjbGFzcyB0aHJvdWdoIHBsdWdpbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tQcm9wZXJ0aWVzID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0Rlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6ICd0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBtb2NrUGx1Z2luLmZpbmRQcm9wZXJ0aWVzRm9yQ2xhc3MubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb3BlcnRpZXMpO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmdldFByb3BlcnRpZXNGb3JDbGFzcygnZXhvX19UYXNrJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5nZXRWYWx1ZSgpKS50b0VxdWFsKG1vY2tQcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIGV4cGVjdChtb2NrUGx1Z2luLmZpbmRQcm9wZXJ0aWVzRm9yQ2xhc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdleG9fX1Rhc2snKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBwbHVnaW4gZXJyb3JzIHdoZW4gZ2V0dGluZyBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja1BsdWdpbi5maW5kUHJvcGVydGllc0ZvckNsYXNzLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignUGx1Z2luIGVycm9yJykpO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmdldFByb3BlcnRpZXNGb3JDbGFzcygnZXhvX19UYXNrJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnRmFpbGVkIHRvIGdldCBwcm9wZXJ0aWVzOiBQbHVnaW4gZXJyb3InKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGdldCBhc3NldHMgZm9yIGNsYXNzIHRocm91Z2ggcGx1Z2luJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbW9ja0Fzc2V0cyA9IFtcbiAgICAgICAgICAgICAgICB7IGlkOiAnMScsIHRpdGxlOiAnQXNzZXQgMScgfSxcbiAgICAgICAgICAgICAgICB7IGlkOiAnMicsIHRpdGxlOiAnQXNzZXQgMicgfVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgbW9ja1BsdWdpbi5maW5kQXNzZXRzQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrQXNzZXRzKTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5nZXRBc3NldHNGb3JDbGFzcygnZXhvX19UYXNrJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5nZXRWYWx1ZSgpKS50b0VxdWFsKG1vY2tBc3NldHMpO1xuICAgICAgICAgICAgZXhwZWN0KG1vY2tQbHVnaW4uZmluZEFzc2V0c0J5Q2xhc3MpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdleG9fX1Rhc2snLCB0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBwbHVnaW4gZXJyb3JzIHdoZW4gZ2V0dGluZyBhc3NldHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBtb2NrUGx1Z2luLmZpbmRBc3NldHNCeUNsYXNzLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignUGx1Z2luIGVycm9yJykpO1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmdldEFzc2V0c0ZvckNsYXNzKCdleG9fX1Rhc2snKTtcblxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc0ZhaWx1cmUpLnRvQmUodHJ1ZSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmVycm9yKS50b0JlKCdGYWlsZWQgdG8gZ2V0IGFzc2V0czogUGx1Z2luIGVycm9yJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBwYXNzIGNvcnJlY3QgcGFyYW1ldGVycyB0byBwbHVnaW4gbWV0aG9kcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tQbHVnaW4uZmluZFByb3BlcnRpZXNGb3JDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG4gICAgICAgICAgICBtb2NrUGx1Z2luLmZpbmRBc3NldHNCeUNsYXNzLm1vY2tSZXNvbHZlZFZhbHVlKFtdKTtcblxuICAgICAgICAgICAgYXdhaXQgdXNlQ2FzZS5nZXRQcm9wZXJ0aWVzRm9yQ2xhc3MoJ2N1c3RvbV9fQ2xhc3MnKTtcbiAgICAgICAgICAgIGF3YWl0IHVzZUNhc2UuZ2V0QXNzZXRzRm9yQ2xhc3MoJ2N1c3RvbV9fQ2xhc3MnKTtcblxuICAgICAgICAgICAgZXhwZWN0KG1vY2tQbHVnaW4uZmluZFByb3BlcnRpZXNGb3JDbGFzcykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2N1c3RvbV9fQ2xhc3MnKTtcbiAgICAgICAgICAgIGV4cGVjdChtb2NrUGx1Z2luLmZpbmRBc3NldHNCeUNsYXNzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY3VzdG9tX19DbGFzcycsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdSZXNwb25zZSBTdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gY29ycmVjdCBzdWNjZXNzIHJlc3BvbnNlIHN0cnVjdHVyZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOZXcgVGl0bGUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKSkudG9FcXVhbCh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1cGRhdGVkVmFsdWU6ICdOZXcgVGl0bGUnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIHJldHVybiBjb3JyZWN0IGZhaWx1cmUgcmVzcG9uc2Ugc3RydWN0dXJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICcnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnQXNzZXQgSUQgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIHByZXNlcnZlIG9yaWdpbmFsIHZhbHVlIGluIHN1Y2Nlc3MgcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbXBsZXhWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICBuZXN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgYXJyYXk6IFsxLCAyLCAzXSxcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nOiAndGVzdCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ21ldGFkYXRhJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogY29tcGxleFZhbHVlLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdtZXRhZGF0YScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnTWV0YWRhdGEnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ29iamVjdCcsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKS51cGRhdGVkVmFsdWUpLnRvRXF1YWwoY29tcGxleFZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnRWRnZSBDYXNlcyBhbmQgRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZXh0cmVtZWx5IGxhcmdlIHByb3BlcnR5IHZhbHVlcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgLy8gUmVkdWNlIHNpemUgZm9yIENJIG1lbW9yeSBlZmZpY2llbmN5XG4gICAgICAgICAgICBjb25zdCBsYXJnZVNpemUgPSBwcm9jZXNzLmVudi5DSSA/IDEwMDAwIDogNTAwMDA7XG4gICAgICAgICAgICBjb25zdCBsYXJnZVZhbHVlID0gJ0EnLnJlcGVhdChsYXJnZVNpemUpO1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdsYXJnZUZpZWxkJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbGFyZ2VWYWx1ZSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eURlZmluaXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAnbGFyZ2VGaWVsZCcsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnTGFyZ2UgRmllbGQnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKS51cGRhdGVkVmFsdWUpLnRvQmUobGFyZ2VWYWx1ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsZWFyIGxhcmdlIHN0cmluZyByZWZlcmVuY2VcbiAgICAgICAgICAgIHJlcXVlc3QudmFsdWUgPSBudWxsO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBwcm9wZXJ0eSBuYW1lcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3Qgc3BlY2lhbFByb3BOYW1lID0gJ3Byb3Atd2l0aC1zcGVjaWFsX2NoYXJzJDEyMyc7XG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogc3BlY2lhbFByb3BOYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAndGVzdCB2YWx1ZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogc3BlY2lhbFByb3BOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1NwZWNpYWwgUHJvcGVydHknLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LmlzU3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzIGluIG9iamVjdCB2YWx1ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LnVwZGF0ZUZyb250bWF0dGVyQnlQYXRoLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG9iajE6IGFueSA9IHsgbmFtZTogJ29iajEnIH07XG4gICAgICAgICAgICBjb25zdCBvYmoyOiBhbnkgPSB7IG5hbWU6ICdvYmoyJywgcmVmOiBvYmoxIH07XG4gICAgICAgICAgICBvYmoxLnJlZiA9IG9iajI7IC8vIENyZWF0ZSBjaXJjdWxhciByZWZlcmVuY2VcblxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdDogVXBkYXRlUHJvcGVydHlSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6ICd0ZXN0Lm1kJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICdjaXJjdWxhcicsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG9iajEsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ2NpcmN1bGFyJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDaXJjdWxhcicsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGNvbmN1cnJlbnQgdXBkYXRlcyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBjb25zdCBjb25jdXJyZW50Q291bnQgPSBwcm9jZXNzLmVudi5DSSA/IDUgOiAxMDsgLy8gUmVkdWNlIGZvciBDSVxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdHMgPSBBcnJheShjb25jdXJyZW50Q291bnQpLmZpbGwobnVsbCkubWFwKChfLCBpKSA9PiAoe1xuICAgICAgICAgICAgICAgIGFzc2V0SWQ6IGB0ZXN0JHtpfS5tZGAsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiAndGl0bGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBgVGl0bGUgJHtpfWAsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2VzID0gcmVxdWVzdHMubWFwKHJlcSA9PiB1c2VDYXNlLmV4ZWN1dGUocmVxKSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgICAgICAgICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNTdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuZ2V0VmFsdWUoKS51cGRhdGVkVmFsdWUpLnRvQmUoYFRpdGxlICR7aX1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGVhciByZWZlcmVuY2VzXG4gICAgICAgICAgICByZXF1ZXN0cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcHJvbWlzZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIHJlc3VsdHMubGVuZ3RoID0gMDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB0aW1lb3V0IHNjZW5hcmlvcycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja0ltcGxlbWVudGF0aW9uKFxuICAgICAgICAgICAgICAgICgpID0+IG5ldyBQcm9taXNlKChfLCByZWplY3QpID0+IFxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoJ1RpbWVvdXQnKSksIDEwMClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9Db250YWluKCdUaW1lb3V0Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbWFsZm9ybWVkIHByb3BlcnR5IGRlZmluaXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3Rlc3QnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAndmFsdWUnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0ZXN0JyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG51bGwgYXMgYW55LFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogdW5kZWZpbmVkIGFzIGFueSxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogbnVsbCBhcyBhbnlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIC8vIFNob3VsZCBoYW5kbGUgZ3JhY2VmdWxseSBhbmQgc3VjY2VlZFxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1BlcmZvcm1hbmNlIFRlc3RzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgY29tcGxldGUgcHJvcGVydHkgdXBkYXRlcyB3aXRoaW4gcmVhc29uYWJsZSB0aW1lJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgYXNzZXRJZDogJ3Rlc3QubWQnLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05ldyBUaXRsZScsXG4gICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdUaXRsZScsXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuXG4gICAgICAgICAgICBleHBlY3QoZHVyYXRpb24pLnRvQmVMZXNzVGhhbigxMDApOyAvLyBTaG91bGQgY29tcGxldGUgd2l0aGluIDEwMG1zXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgYmF0Y2ggdXBkYXRlcyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkudXBkYXRlRnJvbnRtYXR0ZXJCeVBhdGgubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcblxuICAgICAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoU2l6ZSA9IHByb2Nlc3MuZW52LkNJID8gMTAgOiAyNTsgLy8gUmVkdWNlIGJhdGNoIHNpemUgZm9yIENJXG5cbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RzID0gQXJyYXkoYmF0Y2hTaXplKS5maWxsKG51bGwpLm1hcCgoXywgaSkgPT4gKHtcbiAgICAgICAgICAgICAgICBhc3NldElkOiBgdGVzdCR7aX0ubWRgLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogYFRpdGxlICR7aX1gLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5RGVmaW5pdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnVGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9taXNlcyA9IHJlcXVlc3RzLm1hcChyZXEgPT4gdXNlQ2FzZS5leGVjdXRlKHJlcSkpO1xuICAgICAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgICAgICAgICAvLyBDbGVhciByZWZlcmVuY2VzXG4gICAgICAgICAgICByZXF1ZXN0cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcHJvbWlzZXMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgY29uc3QgZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGVuZFRpbWUgLSBzdGFydFRpbWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXRMaW1pdCA9IHByb2Nlc3MuZW52LkNJID8gMjAwMCA6IDEwMDA7IC8vIE1vcmUgbGVuaWVudCBmb3IgQ0lcbiAgICAgICAgICAgIGV4cGVjdChkdXJhdGlvbikudG9CZUxlc3NUaGFuKHRpbWVvdXRMaW1pdCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBub3QgYWNjdW11bGF0ZSBtZW1vcnkgb3ZlciBtdWx0aXBsZSBleGVjdXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS51cGRhdGVGcm9udG1hdHRlckJ5UGF0aC5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgICBjb25zdCBpbml0aWFsTWVtb3J5ID0gcHJvY2Vzcy5tZW1vcnlVc2FnZSgpLmhlYXBVc2VkO1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdHM6IFVwZGF0ZVByb3BlcnR5UmVxdWVzdFtdID0gW107XG5cbiAgICAgICAgICAgIC8vIFJlZHVjZSBpdGVyYXRpb25zIGZvciBDSSBtZW1vcnkgZWZmaWNpZW5jeVxuICAgICAgICAgICAgY29uc3QgaXRlcmF0aW9ucyA9IHByb2Nlc3MuZW52LkNJID8gMTAgOiA1MDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0OiBVcGRhdGVQcm9wZXJ0eVJlcXVlc3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2V0SWQ6IGB0ZXN0JHtpfS5tZGAsXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogJ3RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGBUaXRsZSAke2l9YCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlEZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWU6ICd0aXRsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1RpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiAnc3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVxdWlyZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlcXVlc3RzLnB1c2gocmVxdWVzdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgaW4gc21hbGxlciBiYXRjaGVzIHRvIHByZXZlbnQgbWVtb3J5IGJ1aWxkdXBcbiAgICAgICAgICAgIGNvbnN0IGJhdGNoU2l6ZSA9IDU7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcXVlc3RzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXRjaCA9IHJlcXVlc3RzLnNsaWNlKGksIGkgKyBiYXRjaFNpemUpO1xuICAgICAgICAgICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGJhdGNoLm1hcChyZXEgPT4gdXNlQ2FzZS5leGVjdXRlKHJlcSkpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDbGVhciByZWZlcmVuY2VzIGFmdGVyIGVhY2ggYmF0Y2hcbiAgICAgICAgICAgICAgICBiYXRjaC5sZW5ndGggPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgcmVxdWVzdHMgYXJyYXlcbiAgICAgICAgICAgIHJlcXVlc3RzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgIC8vIEZvcmNlIGdhcmJhZ2UgY29sbGVjdGlvbiBpZiBwb3NzaWJsZVxuICAgICAgICAgICAgaWYgKGdsb2JhbC5nYykge1xuICAgICAgICAgICAgICAgIGdsb2JhbC5nYygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBmaW5hbE1lbW9yeSA9IHByb2Nlc3MubWVtb3J5VXNhZ2UoKS5oZWFwVXNlZDtcbiAgICAgICAgICAgIGNvbnN0IG1lbW9yeUluY3JlYXNlID0gZmluYWxNZW1vcnkgLSBpbml0aWFsTWVtb3J5O1xuXG4gICAgICAgICAgICAvLyBNZW1vcnkgaW5jcmVhc2Ugc2hvdWxkIGJlIHJlYXNvbmFibGUgKGxlc3MgdGhhbiAzTUIgaW4gQ0ksIDhNQiBsb2NhbGx5KVxuICAgICAgICAgICAgY29uc3QgbWVtb3J5TGltaXQgPSBwcm9jZXNzLmVudi5DSSA/IDMgKiAxMDI0ICogMTAyNCA6IDggKiAxMDI0ICogMTAyNDtcbiAgICAgICAgICAgIGV4cGVjdChtZW1vcnlJbmNyZWFzZSkudG9CZUxlc3NUaGFuKG1lbW9yeUxpbWl0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=