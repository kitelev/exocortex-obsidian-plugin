fb0639ae82625f931f2f7b176b010887
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Result = void 0;
/**
 * Result class for handling success and failure states
 * Following functional programming patterns for error handling
 */
class Result {
    constructor(isSuccess, error, value) {
        if (isSuccess && error) {
            throw new Error('InvalidOperation: A result cannot be successful and contain an error');
        }
        if (!isSuccess && !error) {
            throw new Error('InvalidOperation: A failing result needs to contain an error message');
        }
        this.isSuccess = isSuccess;
        this.isFailure = !isSuccess;
        this.error = error;
        this._value = value;
        Object.freeze(this);
    }
    getValue() {
        if (!this.isSuccess) {
            throw new Error(`Can't get the value of an error result. Use 'errorValue' instead.`);
        }
        return this._value;
    }
    errorValue() {
        return this.error;
    }
    getErrorMessage() {
        return this.error;
    }
    getError() {
        return this.error;
    }
    static ok(value) {
        return new Result(true, undefined, value);
    }
    static fail(error) {
        return new Result(false, error);
    }
    static combine(results) {
        for (const result of results) {
            if (result.isFailure)
                return result;
        }
        return Result.ok();
    }
}
exports.Result = Result;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9jb3JlL1Jlc3VsdC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQTs7O0dBR0c7QUFDSCxNQUFhLE1BQU07SUFNZixZQUFvQixTQUFrQixFQUFFLEtBQWMsRUFBRSxLQUFTO1FBQzdELElBQUksU0FBUyxJQUFJLEtBQUssRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLHNFQUFzRSxDQUFDLENBQUM7U0FDM0Y7UUFDRCxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0VBQXNFLENBQUMsQ0FBQztTQUMzRjtRQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFlLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFVLENBQUM7UUFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQztTQUN4RjtRQUVELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRU0sVUFBVTtRQUNiLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRU0sZUFBZTtRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVNLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxFQUFFLENBQUksS0FBUztRQUN6QixPQUFPLElBQUksTUFBTSxDQUFJLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFJLENBQUksS0FBYTtRQUMvQixPQUFPLElBQUksTUFBTSxDQUFJLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFzQjtRQUN4QyxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixJQUFJLE1BQU0sQ0FBQyxTQUFTO2dCQUFFLE9BQU8sTUFBTSxDQUFDO1NBQ3ZDO1FBQ0QsT0FBTyxNQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDdkIsQ0FBQztDQUNKO0FBeERELHdCQXdEQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvZG9tYWluL2NvcmUvUmVzdWx0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVzdWx0IGNsYXNzIGZvciBoYW5kbGluZyBzdWNjZXNzIGFuZCBmYWlsdXJlIHN0YXRlc1xuICogRm9sbG93aW5nIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmcgcGF0dGVybnMgZm9yIGVycm9yIGhhbmRsaW5nXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXN1bHQ8VD4ge1xuICAgIHB1YmxpYyBpc1N1Y2Nlc3M6IGJvb2xlYW47XG4gICAgcHVibGljIGlzRmFpbHVyZTogYm9vbGVhbjtcbiAgICBwdWJsaWMgZXJyb3I6IHN0cmluZztcbiAgICBwcml2YXRlIF92YWx1ZTogVDtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoaXNTdWNjZXNzOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdmFsdWU/OiBUKSB7XG4gICAgICAgIGlmIChpc1N1Y2Nlc3MgJiYgZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZE9wZXJhdGlvbjogQSByZXN1bHQgY2Fubm90IGJlIHN1Y2Nlc3NmdWwgYW5kIGNvbnRhaW4gYW4gZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzU3VjY2VzcyAmJiAhZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZE9wZXJhdGlvbjogQSBmYWlsaW5nIHJlc3VsdCBuZWVkcyB0byBjb250YWluIGFuIGVycm9yIG1lc3NhZ2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaXNTdWNjZXNzID0gaXNTdWNjZXNzO1xuICAgICAgICB0aGlzLmlzRmFpbHVyZSA9ICFpc1N1Y2Nlc3M7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvciBhcyBzdHJpbmc7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdmFsdWUgYXMgVDtcblxuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRWYWx1ZSgpOiBUIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3VjY2Vzcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBnZXQgdGhlIHZhbHVlIG9mIGFuIGVycm9yIHJlc3VsdC4gVXNlICdlcnJvclZhbHVlJyBpbnN0ZWFkLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcnJvclZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRFcnJvck1lc3NhZ2UoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEVycm9yKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgb2s8VT4odmFsdWU/OiBVKTogUmVzdWx0PFU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQ8VT4odHJ1ZSwgdW5kZWZpbmVkLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBmYWlsPFU+KGVycm9yOiBzdHJpbmcpOiBSZXN1bHQ8VT4ge1xuICAgICAgICByZXR1cm4gbmV3IFJlc3VsdDxVPihmYWxzZSwgZXJyb3IpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY29tYmluZShyZXN1bHRzOiBSZXN1bHQ8YW55PltdKTogUmVzdWx0PGFueT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHJlc3VsdCBvZiByZXN1bHRzKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzRmFpbHVyZSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUmVzdWx0Lm9rKCk7XG4gICAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==