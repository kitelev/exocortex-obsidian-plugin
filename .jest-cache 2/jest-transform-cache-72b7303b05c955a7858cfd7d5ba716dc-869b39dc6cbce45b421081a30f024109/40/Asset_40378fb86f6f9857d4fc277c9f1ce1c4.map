{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/Asset.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/Asset.ts"],"sourcesContent":["import { AssetId } from '../value-objects/AssetId';\nimport { ClassName } from '../value-objects/ClassName';\nimport { OntologyPrefix } from '../value-objects/OntologyPrefix';\nimport { Entity } from '../core/Entity';\nimport { Result } from '../core/Result';\n\ninterface AssetProps {\n  id: AssetId;\n  title: string;\n  className: ClassName;\n  ontology: OntologyPrefix;\n  label?: string;\n  description?: string;\n  properties: Map<string, any>;\n  createdAt: Date;\n  updatedAt: Date;\n  filePath?: string; // Store the actual file path\n}\n\n/**\n * Domain entity representing an Exocortex Asset\n * Core business logic and invariants\n */\nexport class Asset extends Entity<AssetProps> {\n  \n  private constructor(props: AssetProps) {\n    super(props);\n  }\n\n  static create(params: {\n    id: AssetId;\n    className: ClassName;\n    ontology: OntologyPrefix;\n    label: string;\n    description?: string;\n    properties?: Record<string, any>;\n  }): Result<Asset> {\n    if (!params.label || params.label.trim().length === 0) {\n      return Result.fail<Asset>('Asset label cannot be empty');\n    }\n\n    const props: AssetProps = {\n      id: params.id,\n      title: params.label,\n      className: params.className,\n      ontology: params.ontology,\n      label: params.label,\n      description: params.description,\n      properties: new Map(Object.entries(params.properties || {})),\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    return Result.ok<Asset>(new Asset(props));\n  }\n\n  // Getters\n  getId(): AssetId {\n    return this.props.id;\n  }\n\n  getTitle(): string {\n    return this.props.title;\n  }\n\n  getClassName(): ClassName {\n    return this.props.className;\n  }\n\n  getOntologyPrefix(): OntologyPrefix {\n    return this.props.ontology;\n  }\n\n  getProperties(): Map<string, any> {\n    return new Map(this.props.properties);\n  }\n\n  getProperty(key: string): any {\n    return this.props.properties.get(key);\n  }\n\n  getCreatedAt(): Date {\n    return this.props.createdAt;\n  }\n\n  getUpdatedAt(): Date {\n    return this.props.updatedAt;\n  }\n\n  // Business methods\n  updateTitle(title: string): void {\n    if (!title || title.trim().length === 0) {\n      throw new Error('Asset title cannot be empty');\n    }\n    this.props.title = title;\n    this.props.updatedAt = new Date();\n  }\n\n  setProperty(key: string, value: any): void {\n    this.props.properties.set(key, value);\n    this.props.updatedAt = new Date();\n  }\n\n  removeProperty(key: string): void {\n    this.props.properties.delete(key);\n    this.props.updatedAt = new Date();\n  }\n\n  changeClass(className: ClassName): void {\n    this.props.className = className;\n    this.props.updatedAt = new Date();\n  }\n\n  toFrontmatter(): Record<string, any> {\n    // Always ensure mandatory fields are present with proper formats\n    const frontmatter: Record<string, any> = {\n      'exo__Asset_uid': this.props.id.toString(),\n      'exo__Asset_label': this.props.title,\n      'exo__Asset_isDefinedBy': `[[!${this.props.ontology.toString()}]]`,\n      'exo__Asset_createdAt': this.props.createdAt.toISOString().replace(/\\.\\d{3}Z$/, ''), // Remove milliseconds for cleaner format\n      'exo__Instance_class': [this.props.className.toWikiLink()]\n    };\n\n    // Add custom properties\n    for (const [key, value] of this.props.properties) {\n      if (!frontmatter[key]) {\n        frontmatter[key] = value;\n      }\n    }\n\n    return frontmatter;\n  }\n\n  /**\n   * Validates if an asset has all mandatory properties for creation\n   * @param frontmatter The frontmatter to validate\n   * @returns ValidationResult indicating success or failure with details\n   */\n  private static validateMandatoryProperties(frontmatter: Record<string, any>): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    \n    // Check for mandatory exo__Asset_uid (UUID format)\n    const uid = frontmatter['exo__Asset_uid'];\n    if (!uid) {\n      errors.push('Missing mandatory field: exo__Asset_uid');\n    } else {\n      // Validate UUID format\n      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(uid.toString())) {\n        errors.push('exo__Asset_uid must be a valid UUID format');\n      }\n    }\n    \n    // Check for mandatory exo__Asset_isDefinedBy (ontology reference)\n    const isDefinedBy = frontmatter['exo__Asset_isDefinedBy'];\n    if (!isDefinedBy) {\n      errors.push('Missing mandatory field: exo__Asset_isDefinedBy');\n    } else {\n      // Validate format like \"[[Ontology - Exocortex]]\" or \"[[!exo]]\"\n      const ontologyRegex = /^\\[\\[(!?[a-zA-Z][a-zA-Z0-9_\\- ]*)\\]\\]$/;\n      if (!ontologyRegex.test(isDefinedBy.toString())) {\n        errors.push('exo__Asset_isDefinedBy must be in format [[Ontology Name]] or [[!prefix]]');\n      }\n    }\n    \n    // Check for mandatory exo__Asset_createdAt (ISO timestamp)\n    const createdAt = frontmatter['exo__Asset_createdAt'];\n    if (!createdAt) {\n      errors.push('Missing mandatory field: exo__Asset_createdAt');\n    } else {\n      // Validate ISO timestamp format (YYYY-MM-DDTHH:mm:ss or with milliseconds and timezone)\n      const isoRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?(Z|[+-]\\d{2}:\\d{2})?$/;\n      if (!isoRegex.test(createdAt.toString())) {\n        errors.push('exo__Asset_createdAt must be in ISO timestamp format (YYYY-MM-DDTHH:mm:ss)');\n      }\n    }\n    \n    return {\n      isValid: errors.length === 0,\n      errors\n    };\n  }\n\n  static fromFrontmatter(frontmatter: Record<string, any>, fileName: string): Asset | null {\n    // Validate mandatory properties first\n    const validation = Asset.validateMandatoryProperties(frontmatter);\n    if (!validation.isValid) {\n      console.warn(`Asset validation failed for ${fileName}:`, validation.errors);\n      return null; // Silently ignore invalid assets\n    }\n    \n    try {\n      const idResult = AssetId.create(frontmatter['exo__Asset_uid']);\n      if (!idResult.isSuccess) {\n        console.warn(`Invalid Asset ID for ${fileName}:`, idResult.getError());\n        return null;\n      }\n      const id = idResult.getValue()!;\n      \n      const label = frontmatter['exo__Asset_label'] || fileName.replace('.md', '');\n      \n      const classValue = Array.isArray(frontmatter['exo__Instance_class']) \n        ? frontmatter['exo__Instance_class'][0] \n        : frontmatter['exo__Instance_class'];\n      const classNameResult = ClassName.create(classValue || 'exo__Asset');\n      const className = classNameResult.isSuccess ? classNameResult.getValue() : ClassName.create('exo__Asset').getValue()!;\n      \n      const ontologyValue = frontmatter['exo__Asset_isDefinedBy']?.replace(/\\[\\[!?|\\]\\]/g, '') || 'exo';\n      const ontologyResult = OntologyPrefix.create(ontologyValue);\n      const ontology = ontologyResult.isSuccess ? ontologyResult.getValue() : OntologyPrefix.create('exo').getValue()!;\n      \n      const createdAt = new Date(frontmatter['exo__Asset_createdAt']);\n      if (isNaN(createdAt.getTime())) {\n        console.warn(`Invalid createdAt timestamp for ${fileName}`);\n        return null;\n      }\n      \n      const properties: Record<string, any> = {};\n      for (const [key, value] of Object.entries(frontmatter)) {\n        if (!key.startsWith('exo__Asset_') && !key.startsWith('exo__Instance_')) {\n          properties[key] = value;\n        }\n      }\n      \n      // Use the factory method instead of constructor\n      const result = Asset.create({\n        id,\n        label,\n        className,\n        ontology,\n        properties\n      });\n      \n      if (result.isSuccess) {\n        const asset = result.getValue()!;\n        // Update timestamps with validated values\n        (asset as any).props.createdAt = createdAt;\n        return asset;\n      } else {\n        console.warn('Failed to create asset from frontmatter:', result.getError());\n      }\n      \n      return null;\n    } catch (error) {\n      console.warn('Failed to create asset from frontmatter:', error);\n      return null;\n    }\n  }\n}"],"version":3}