c7477383dd2164d490c202334688f6ed
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
const AssetId_1 = require("../value-objects/AssetId");
const ClassName_1 = require("../value-objects/ClassName");
const OntologyPrefix_1 = require("../value-objects/OntologyPrefix");
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
/**
 * Domain entity representing an Exocortex Asset
 * Core business logic and invariants
 */
class Asset extends Entity_1.Entity {
    constructor(props) {
        super(props);
    }
    static create(params) {
        if (!params.label || params.label.trim().length === 0) {
            return Result_1.Result.fail('Asset label cannot be empty');
        }
        const props = {
            id: params.id,
            title: params.label,
            className: params.className,
            ontology: params.ontology,
            label: params.label,
            description: params.description,
            properties: new Map(Object.entries(params.properties || {})),
            createdAt: new Date(),
            updatedAt: new Date()
        };
        return Result_1.Result.ok(new Asset(props));
    }
    // Getters
    getId() {
        return this.props.id;
    }
    getTitle() {
        return this.props.title;
    }
    getClassName() {
        return this.props.className;
    }
    getOntologyPrefix() {
        return this.props.ontology;
    }
    getProperties() {
        return new Map(this.props.properties);
    }
    getProperty(key) {
        return this.props.properties.get(key);
    }
    getCreatedAt() {
        return this.props.createdAt;
    }
    getUpdatedAt() {
        return this.props.updatedAt;
    }
    // Business methods
    updateTitle(title) {
        if (!title || title.trim().length === 0) {
            throw new Error('Asset title cannot be empty');
        }
        this.props.title = title;
        this.props.updatedAt = new Date();
    }
    setProperty(key, value) {
        this.props.properties.set(key, value);
        this.props.updatedAt = new Date();
    }
    removeProperty(key) {
        this.props.properties.delete(key);
        this.props.updatedAt = new Date();
    }
    changeClass(className) {
        this.props.className = className;
        this.props.updatedAt = new Date();
    }
    toFrontmatter() {
        // Always ensure mandatory fields are present with proper formats
        const frontmatter = {
            'exo__Asset_uid': this.props.id.toString(),
            'exo__Asset_label': this.props.title,
            'exo__Asset_isDefinedBy': `[[!${this.props.ontology.toString()}]]`,
            'exo__Asset_createdAt': this.props.createdAt.toISOString().replace(/\.\d{3}Z$/, ''),
            'exo__Instance_class': [this.props.className.toWikiLink()]
        };
        // Add custom properties
        for (const [key, value] of this.props.properties) {
            if (!frontmatter[key]) {
                frontmatter[key] = value;
            }
        }
        return frontmatter;
    }
    /**
     * Validates if an asset has all mandatory properties for creation
     * @param frontmatter The frontmatter to validate
     * @returns ValidationResult indicating success or failure with details
     */
    static validateMandatoryProperties(frontmatter) {
        const errors = [];
        // Check for mandatory exo__Asset_uid (UUID format)
        const uid = frontmatter['exo__Asset_uid'];
        if (!uid) {
            errors.push('Missing mandatory field: exo__Asset_uid');
        }
        else {
            // Validate UUID format
            const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
            if (!uuidRegex.test(uid.toString())) {
                errors.push('exo__Asset_uid must be a valid UUID format');
            }
        }
        // Check for mandatory exo__Asset_isDefinedBy (ontology reference)
        const isDefinedBy = frontmatter['exo__Asset_isDefinedBy'];
        if (!isDefinedBy) {
            errors.push('Missing mandatory field: exo__Asset_isDefinedBy');
        }
        else {
            // Validate format like "[[Ontology - Exocortex]]" or "[[!exo]]"
            const ontologyRegex = /^\[\[(!?[a-zA-Z][a-zA-Z0-9_\- ]*)\]\]$/;
            if (!ontologyRegex.test(isDefinedBy.toString())) {
                errors.push('exo__Asset_isDefinedBy must be in format [[Ontology Name]] or [[!prefix]]');
            }
        }
        // Check for mandatory exo__Asset_createdAt (ISO timestamp)
        const createdAt = frontmatter['exo__Asset_createdAt'];
        if (!createdAt) {
            errors.push('Missing mandatory field: exo__Asset_createdAt');
        }
        else {
            // Validate ISO timestamp format (YYYY-MM-DDTHH:mm:ss or with milliseconds and timezone)
            const isoRegex = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d{3})?(Z|[+-]\d{2}:\d{2})?$/;
            if (!isoRegex.test(createdAt.toString())) {
                errors.push('exo__Asset_createdAt must be in ISO timestamp format (YYYY-MM-DDTHH:mm:ss)');
            }
        }
        return {
            isValid: errors.length === 0,
            errors
        };
    }
    static fromFrontmatter(frontmatter, fileName) {
        // Validate mandatory properties first
        const validation = Asset.validateMandatoryProperties(frontmatter);
        if (!validation.isValid) {
            console.warn(`Asset validation failed for ${fileName}:`, validation.errors);
            return null; // Silently ignore invalid assets
        }
        try {
            const idResult = AssetId_1.AssetId.create(frontmatter['exo__Asset_uid']);
            if (!idResult.isSuccess) {
                console.warn(`Invalid Asset ID for ${fileName}:`, idResult.getError());
                return null;
            }
            const id = idResult.getValue();
            const label = frontmatter['exo__Asset_label'] || fileName.replace('.md', '');
            const classValue = Array.isArray(frontmatter['exo__Instance_class'])
                ? frontmatter['exo__Instance_class'][0]
                : frontmatter['exo__Instance_class'];
            const classNameResult = ClassName_1.ClassName.create(classValue || 'exo__Asset');
            const className = classNameResult.isSuccess ? classNameResult.getValue() : ClassName_1.ClassName.create('exo__Asset').getValue();
            const ontologyValue = frontmatter['exo__Asset_isDefinedBy']?.replace(/\[\[!?|\]\]/g, '') || 'exo';
            const ontologyResult = OntologyPrefix_1.OntologyPrefix.create(ontologyValue);
            const ontology = ontologyResult.isSuccess ? ontologyResult.getValue() : OntologyPrefix_1.OntologyPrefix.create('exo').getValue();
            const createdAt = new Date(frontmatter['exo__Asset_createdAt']);
            if (isNaN(createdAt.getTime())) {
                console.warn(`Invalid createdAt timestamp for ${fileName}`);
                return null;
            }
            const properties = {};
            for (const [key, value] of Object.entries(frontmatter)) {
                if (!key.startsWith('exo__Asset_') && !key.startsWith('exo__Instance_')) {
                    properties[key] = value;
                }
            }
            // Use the factory method instead of constructor
            const result = Asset.create({
                id,
                label,
                className,
                ontology,
                properties
            });
            if (result.isSuccess) {
                const asset = result.getValue();
                // Update timestamps with validated values
                asset.props.createdAt = createdAt;
                return asset;
            }
            else {
                console.warn('Failed to create asset from frontmatter:', result.getError());
            }
            return null;
        }
        catch (error) {
            console.warn('Failed to create asset from frontmatter:', error);
            return null;
        }
    }
}
exports.Asset = Asset;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,