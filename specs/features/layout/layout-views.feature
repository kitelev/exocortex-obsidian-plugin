# language: ru
Функция: Различные виды отображения Layout

  Как пользователь Exocortex плагина
  Я хочу выбирать между разными способами отображения связанных заметок
  Чтобы работать с информацией наиболее удобным способом

  Правило: Табличный вид (Table Layout)

    Сценарий: Базовая таблица
      Дано конфигурация:
        """yaml
        layout: table
        """
      Когда рендерится Universal Layout
      Тогда создаётся элемент <table>
      И таблица имеет класс "exocortex-table"
      И таблица содержит <thead> и <tbody>
      И колонки по умолчанию: Name, exo__Instance_class, Relation Type, Modified

    Сценарий: Таблица с дополнительными свойствами
      Дано конфигурация:
        """yaml
        layout: table
        showProperties:
          - exo__Instance_class
          - exo__Status
          - exo__Priority
        """
      Тогда таблица содержит колонки:
        | Name | exo__Instance_class | exo__Status | exo__Priority | Relation Type | Modified |
      И свойство "exo__Instance_class" не дублируется

    Сценарий: Адаптация для мобильных
      Дано я использую Obsidian на мобильном устройстве
      И конфигурация "layout: table"
      Когда рендерится таблица
      Тогда <table> имеет класс "mobile-responsive"

  Правило: Списочный вид (List Layout)

    Сценарий: Базовый список
      Дано конфигурация:
        """yaml
        layout: list
        """
      Когда рендерится Universal Layout
      Тогда создаётся контейнер с классом "exocortex-backlinks-list"
      И каждая заметка отображается как элемент списка
      И элемент содержит кликабельную ссылку с названием

    Сценарий: Список с дополнительными свойствами
      Дано конфигурация:
        """yaml
        layout: list
        showProperties:
          - exo__Status
          - exo__Priority
        """
      Когда рендерится список
      Тогда под каждой ссылкой отображается блок с свойствами
      И блок имеет класс "exocortex-properties"
      И каждое свойство форматируется как "Имя: Значение"

  Правило: Карточный вид (Cards Layout)

    Сценарий: Базовые карточки
      Дано конфигурация:
        """yaml
        layout: cards
        """
      Когда рендерится Universal Layout
      Тогда создаётся контейнер с классом "exocortex-backlinks-cards"
      И каждая заметка отображается как карточка
      И карточка имеет класс "exocortex-card"

    Сценарий: Карточки с метаданными
      Дано конфигурация:
        """yaml
        layout: cards
        showProperties:
          - exo__Instance_class
          - exo__Status
        """
      Когда рендерится карточка
      Тогда карточка содержит заголовок с названием заметки
      И под заголовком отображается Instance Class как бейдж
      И внизу карточки блок с дополнительными свойствами

    Сценарий: Relation Type в карточках
      Дано заметка связана через свойство "exo__Parent"
      И используется "layout: cards"
      Когда рендерится карточка
      Тогда карточка содержит бейдж с текстом "exo__Parent"
      И бейдж имеет класс "exocortex-relation-badge"

  Правило: Групповой вид (Grouped Tables)

    Сценарий: Группировка по Instance Class
      Дано конфигурация:
        """yaml
        layout: table
        groupByProperty: true
        """
      И существуют заметки:
        | Name     | exo__Instance_class |
        | Задача 1 | [[ems__Task]]       |
        | Задача 2 | [[ems__Task]]       |
        | Проект 1 | [[ems__Project]]    |
      Когда рендерится Universal Layout
      Тогда создаётся группа "ems__Task" с 2 заметками
      И создаётся группа "ems__Project" с 1 заметкой
      И каждая группа имеет собственную таблицу
      И каждая группа имеет независимое состояние сортировки

    Сценарий: Заголовки групп
      Дано включена группировка по свойствам
      Когда рендерится группа "ems__Task"
      Тогда заголовок группы содержит название "ems__Task"
      И заголовок показывает количество заметок в группе
      И заголовок имеет класс "exocortex-group-header"

  Правило: Лимитирование результатов

    Сценарий: Ограничение количества заметок
      Дано существует 50 связанных заметок
      И конфигурация:
        """yaml
        layout: table
        limit: 10
        """
      Когда рендерится таблица
      Тогда отображается только 10 заметок
      И заметки берутся первыми после сортировки

    Сценарий: Лимит без сортировки
      Дано существует 20 связанных заметок
      И конфигурация "limit: 5"
      Когда рендерится layout
      Тогда отображается 5 заметок
      И порядок соответствует порядку обнаружения связей

  Правило: Заголовки и счётчики

    Сценарий: Заголовок с количеством
      Дано существует 7 связанных заметок
      Когда рендерится Universal Layout
      Тогда заголовок содержит текст "Related Assets (7)"
      И число соответствует количеству отображаемых заметок
      И архивные заметки не учитываются в счётчике
