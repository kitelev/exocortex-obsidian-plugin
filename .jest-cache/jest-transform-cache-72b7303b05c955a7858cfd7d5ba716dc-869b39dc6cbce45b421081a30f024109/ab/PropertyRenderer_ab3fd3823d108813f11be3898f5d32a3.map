{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/components/PropertyRenderer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/components/PropertyRenderer.ts"],"sourcesContent":["import {\n  App,\n  Setting,\n  TextComponent,\n  DropdownComponent,\n  ToggleComponent,\n  TextAreaComponent,\n  ButtonComponent,\n  Notice,\n} from \"obsidian\";\nimport { PropertyEditingUseCase } from \"../../application/use-cases/PropertyEditingUseCase\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Component for rendering editable properties in asset views\n * Following the same patterns as the asset creation form\n */\nexport class PropertyRenderer {\n  private editingProperty: string | null = null;\n  private originalValues: Map<string, any> = new Map();\n  private propertyInputs: Map<string, any> = new Map();\n\n  constructor(\n    private app: App,\n    private propertyEditingUseCase: PropertyEditingUseCase,\n  ) {}\n\n  /**\n   * Render properties block with inline editing capability\n   */\n  async renderPropertiesBlock(\n    container: HTMLElement,\n    assetId: string,\n    className: string,\n    currentProperties: Record<string, any>,\n  ): Promise<void> {\n    // Get property definitions for the class\n    const propertiesResult =\n      await this.propertyEditingUseCase.getPropertiesForClass(className);\n\n    if (propertiesResult.isFailure) {\n      container.createEl(\"div\", {\n        text: \"Failed to load properties\",\n        cls: \"exocortex-error-message\",\n      });\n      return;\n    }\n\n    const properties = propertiesResult.getValue();\n\n    // Create properties container\n    const propertiesEl = container.createDiv({\n      cls: \"exocortex-properties-editable\",\n    });\n\n    // Render each property\n    for (const prop of properties) {\n      this.renderProperty(\n        propertiesEl,\n        assetId,\n        prop,\n        currentProperties[prop.propertyName],\n      );\n    }\n\n    // Add custom properties not in schema\n    const schemaPropertyNames = new Set(properties.map((p) => p.propertyName));\n    for (const [key, value] of Object.entries(currentProperties)) {\n      if (!schemaPropertyNames.has(key) && !key.startsWith(\"exo__\")) {\n        this.renderCustomProperty(propertiesEl, assetId, key, value);\n      }\n    }\n  }\n\n  /**\n   * Render individual property with edit capability\n   */\n  private renderProperty(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const propertyEl = container.createDiv({ cls: \"exocortex-property-item\" });\n\n    // Property label\n    const labelEl = propertyEl.createDiv({ cls: \"exocortex-property-label\" });\n    labelEl.createSpan({ text: property.label || property.propertyName });\n    if (property.isRequired) {\n      labelEl.createSpan({ text: \" *\", cls: \"required-indicator\" });\n    }\n\n    // Property value container\n    const valueContainer = propertyEl.createDiv({\n      cls: \"exocortex-property-value\",\n    });\n\n    if (this.editingProperty === property.propertyName) {\n      // Render edit control\n      this.renderEditControl(valueContainer, assetId, property, currentValue);\n    } else {\n      // Render read-only value with click to edit\n      this.renderReadOnlyValue(valueContainer, assetId, property, currentValue);\n    }\n\n    // Property description\n    if (property.description) {\n      propertyEl.createDiv({\n        text: property.description,\n        cls: \"exocortex-property-description\",\n      });\n    }\n  }\n\n  /**\n   * Render read-only value that becomes editable on click\n   */\n  private renderReadOnlyValue(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    value: any,\n  ): void {\n    const valueEl = container.createDiv({\n      cls: \"exocortex-property-value-readonly\",\n    });\n\n    // Display formatted value\n    const displayValue = this.formatDisplayValue(\n      value,\n      property.type || property.range,\n    );\n    valueEl.createSpan({ text: displayValue || \"(empty)\" });\n\n    // Add edit icon\n    const editIcon = valueEl.createSpan({\n      cls: \"exocortex-edit-icon\",\n      text: \"✏️\",\n    });\n\n    // Click handler to enter edit mode\n    valueEl.addEventListener(\"click\", () => {\n      this.enterEditMode(container, assetId, property, value);\n    });\n\n    // Keyboard navigation\n    valueEl.tabIndex = 0;\n    valueEl.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Enter\" || e.key === \" \") {\n        e.preventDefault();\n        this.enterEditMode(container, assetId, property, value);\n      }\n    });\n  }\n\n  /**\n   * Enter edit mode for a property\n   */\n  private enterEditMode(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    // Save original value for cancel\n    this.originalValues.set(property.propertyName, currentValue);\n    this.editingProperty = property.propertyName;\n\n    // Clear container and render edit control\n    container.empty();\n    this.renderEditControl(container, assetId, property, currentValue);\n  }\n\n  /**\n   * Render appropriate edit control based on property type\n   */\n  private renderEditControl(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const controlContainer = container.createDiv({\n      cls: \"exocortex-edit-control\",\n    });\n\n    // Handle different property types\n    if (property.isObjectProperty) {\n      this.renderObjectPropertyDropdown(\n        controlContainer,\n        assetId,\n        property,\n        currentValue,\n      );\n    } else if (property.range?.startsWith(\"enum:\")) {\n      this.renderEnumDropdown(\n        controlContainer,\n        assetId,\n        property,\n        currentValue,\n      );\n    } else if (property.range === \"boolean\") {\n      this.renderBooleanToggle(\n        controlContainer,\n        assetId,\n        property,\n        currentValue,\n      );\n    } else if (property.range === \"date\") {\n      this.renderDateInput(controlContainer, assetId, property, currentValue);\n    } else if (property.range === \"number\") {\n      this.renderNumberInput(controlContainer, assetId, property, currentValue);\n    } else if (property.range === \"text\" || property.range === \"description\") {\n      this.renderTextArea(controlContainer, assetId, property, currentValue);\n    } else if (property.range === \"array\") {\n      this.renderArrayInput(controlContainer, assetId, property, currentValue);\n    } else {\n      // Default to text input\n      this.renderTextInput(controlContainer, assetId, property, currentValue);\n    }\n\n    // Add save/cancel buttons\n    this.renderEditActions(controlContainer, assetId, property);\n  }\n\n  /**\n   * Render dropdown for object properties\n   */\n  private async renderObjectPropertyDropdown(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): Promise<void> {\n    const dropdown = new DropdownComponent(container);\n\n    // Get assets of the range class\n    const rangeClass = property.range?.replace(/\\[\\[|\\]\\]/g, \"\");\n    if (rangeClass) {\n      const assetsResult =\n        await this.propertyEditingUseCase.getAssetsForClass(rangeClass);\n\n      if (assetsResult.isSuccess) {\n        const assets = assetsResult.getValue();\n\n        dropdown.addOption(\"\", \"-- Select --\");\n        for (const asset of assets) {\n          const wikiLink = `[[${asset.fileName}]]`;\n          const displayName =\n            asset.label !== asset.fileName\n              ? `${asset.label} (${asset.fileName})`\n              : asset.fileName;\n          dropdown.addOption(wikiLink, displayName);\n        }\n      }\n    }\n\n    // Set current value\n    if (currentValue) {\n      dropdown.setValue(currentValue);\n    }\n\n    // Store reference for saving\n    this.propertyInputs.set(property.propertyName, dropdown);\n\n    // Focus the dropdown\n    dropdown.selectEl.focus();\n  }\n\n  /**\n   * Render enum dropdown\n   */\n  private renderEnumDropdown(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const dropdown = new DropdownComponent(container);\n\n    const options = property.range.substring(5).split(\",\");\n    dropdown.addOption(\"\", \"-- Select --\");\n    for (const option of options) {\n      dropdown.addOption(option.trim(), option.trim());\n    }\n\n    if (currentValue) {\n      dropdown.setValue(currentValue);\n    }\n\n    this.propertyInputs.set(property.propertyName, dropdown);\n    dropdown.selectEl.focus();\n  }\n\n  /**\n   * Render text input\n   */\n  private renderTextInput(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const textInput = new TextComponent(container);\n    textInput.setValue(currentValue || \"\");\n\n    this.propertyInputs.set(property.propertyName, textInput);\n    textInput.inputEl.focus();\n    textInput.inputEl.select();\n\n    // Handle keyboard shortcuts\n    textInput.inputEl.addEventListener(\"keydown\", (e) => {\n      if (e.key === \"Enter\") {\n        e.preventDefault();\n        this.saveProperty(assetId, property);\n      } else if (e.key === \"Escape\") {\n        e.preventDefault();\n        this.cancelEdit(container, assetId, property);\n      }\n    });\n  }\n\n  /**\n   * Render edit action buttons\n   */\n  private renderEditActions(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n  ): void {\n    const actionsEl = container.createDiv({ cls: \"exocortex-edit-actions\" });\n\n    // Save button\n    new ButtonComponent(actionsEl)\n      .setIcon(\"check\")\n      .setTooltip(\"Save (Enter)\")\n      .onClick(() => this.saveProperty(assetId, property));\n\n    // Cancel button\n    new ButtonComponent(actionsEl)\n      .setIcon(\"x\")\n      .setTooltip(\"Cancel (Escape)\")\n      .onClick(() => this.cancelEdit(container, assetId, property));\n  }\n\n  /**\n   * Save property value\n   */\n  private async saveProperty(assetId: string, property: any): Promise<void> {\n    const input = this.propertyInputs.get(property.propertyName);\n    if (!input) return;\n\n    let value: any;\n    if (input instanceof TextComponent) {\n      value = input.getValue();\n    } else if (input instanceof DropdownComponent) {\n      value = input.getValue();\n    } else if (input instanceof ToggleComponent) {\n      value = input.getValue();\n    }\n\n    // Validate and save\n    const result = await this.propertyEditingUseCase.execute({\n      assetId,\n      propertyName: property.propertyName,\n      value,\n      propertyDefinition: property,\n    });\n\n    if (result.isSuccess) {\n      // Exit edit mode and refresh display\n      this.editingProperty = null;\n      this.propertyInputs.delete(property.propertyName);\n      this.originalValues.delete(property.propertyName);\n\n      // Show success indicator\n      new Notice(\"Property updated\", 1000);\n    } else {\n      // Show error\n      new Notice(`Error: ${result.error}`, 3000);\n    }\n  }\n\n  /**\n   * Cancel edit and restore original value\n   */\n  private cancelEdit(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n  ): void {\n    const originalValue = this.originalValues.get(property.propertyName);\n\n    this.editingProperty = null;\n    this.propertyInputs.delete(property.propertyName);\n    this.originalValues.delete(property.propertyName);\n\n    // Re-render as read-only\n    container.empty();\n    this.renderReadOnlyValue(container, assetId, property, originalValue);\n  }\n\n  /**\n   * Format value for display\n   */\n  private formatDisplayValue(value: any, type: string): string {\n    if (value === null || value === undefined) {\n      return \"\";\n    }\n\n    if (Array.isArray(value)) {\n      return value.join(\", \");\n    }\n\n    if (typeof value === \"boolean\") {\n      return value ? \"✓\" : \"✗\";\n    }\n\n    return String(value);\n  }\n\n  /**\n   * Render custom property not in schema\n   */\n  private renderCustomProperty(\n    container: HTMLElement,\n    assetId: string,\n    propertyName: string,\n    value: any,\n  ): void {\n    const property = {\n      propertyName,\n      label: propertyName,\n      range: \"string\",\n      isRequired: false,\n      description: \"Custom property\",\n    };\n\n    this.renderProperty(container, assetId, property, value);\n  }\n\n  // Additional methods for other input types...\n  private renderBooleanToggle(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const toggle = new ToggleComponent(container);\n    toggle.setValue(currentValue || false);\n    this.propertyInputs.set(property.propertyName, toggle);\n  }\n\n  private renderDateInput(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const dateInput = new TextComponent(container);\n    dateInput.inputEl.type = \"date\";\n    dateInput.setValue(currentValue || \"\");\n    this.propertyInputs.set(property.propertyName, dateInput);\n    dateInput.inputEl.focus();\n  }\n\n  private renderNumberInput(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const numberInput = new TextComponent(container);\n    numberInput.inputEl.type = \"number\";\n    numberInput.setValue(String(currentValue || \"\"));\n    this.propertyInputs.set(property.propertyName, numberInput);\n    numberInput.inputEl.focus();\n  }\n\n  private renderTextArea(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const textArea = new TextAreaComponent(container);\n    textArea.setValue(currentValue || \"\");\n    this.propertyInputs.set(property.propertyName, textArea);\n    textArea.inputEl.focus();\n  }\n\n  private renderArrayInput(\n    container: HTMLElement,\n    assetId: string,\n    property: any,\n    currentValue: any,\n  ): void {\n    const arrayContainer = container.createDiv({\n      cls: \"exocortex-array-input\",\n    });\n    const values = Array.isArray(currentValue) ? currentValue : [];\n\n    // Render existing values\n    values.forEach((val, index) => {\n      const itemEl = arrayContainer.createDiv({ cls: \"array-item\" });\n      const input = new TextComponent(itemEl);\n      input.setValue(val);\n\n      new ButtonComponent(itemEl).setIcon(\"x\").onClick(() => {\n        values.splice(index, 1);\n        this.renderArrayInput(container, assetId, property, values);\n      });\n    });\n\n    // Add new item button\n    new ButtonComponent(arrayContainer)\n      .setButtonText(\"Add item\")\n      .onClick(() => {\n        values.push(\"\");\n        this.renderArrayInput(container, assetId, property, values);\n      });\n\n    this.propertyInputs.set(property.propertyName, { values });\n  }\n}\n"],"version":3}