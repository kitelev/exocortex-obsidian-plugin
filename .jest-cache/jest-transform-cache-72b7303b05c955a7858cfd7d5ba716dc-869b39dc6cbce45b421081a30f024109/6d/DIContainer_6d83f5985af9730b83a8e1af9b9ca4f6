bb486ee35bacb75cf1115536b1c23691
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIContainer = void 0;
const tslib_1 = require("tslib");
const Container_1 = require("../../application/core/Container");
const ObsidianAssetRepository_1 = require("../repositories/ObsidianAssetRepository");
const ObsidianOntologyRepository_1 = require("../repositories/ObsidianOntologyRepository");
const ObsidianClassViewRepository_1 = require("../repositories/ObsidianClassViewRepository");
const ObsidianButtonRepository_1 = require("../repositories/ObsidianButtonRepository");
const ObsidianClassLayoutRepository_1 = require("../repositories/ObsidianClassLayoutRepository");
// Use Cases
const CreateAssetUseCase_1 = require("../../application/use-cases/CreateAssetUseCase");
const RenderClassButtonsUseCase_1 = require("../../application/use-cases/RenderClassButtonsUseCase");
const ExecuteButtonCommandUseCase_1 = require("../../application/use-cases/ExecuteButtonCommandUseCase");
const PropertyEditingUseCase_1 = require("../../application/use-cases/PropertyEditingUseCase");
const QueryTemplateUseCase_1 = require("../../application/use-cases/QueryTemplateUseCase");
const ObsidianCommandExecutor_1 = require("../services/ObsidianCommandExecutor");
const ErrorHandlerService_1 = require("../../application/services/ErrorHandlerService");
const SPARQLAutocompleteService_1 = require("../../application/services/SPARQLAutocompleteService");
const GraphSuggestionRepository_1 = require("../repositories/GraphSuggestionRepository");
const ObsidianQueryTemplateRepository_1 = require("../repositories/ObsidianQueryTemplateRepository");
// Presentation
const ButtonRenderer_1 = require("../../presentation/components/ButtonRenderer");
const PropertyRenderer_1 = require("../../presentation/components/PropertyRenderer");
const LayoutRenderer_1 = require("../../presentation/renderers/LayoutRenderer");
/**
 * Dependency Injection Container Setup
 * Following Clean Architecture - wires up all dependencies
 */
class DIContainer {
    constructor(app) {
        this.app = app;
        this.container = Container_1.Container.getInstance();
        this.registerDependencies();
    }
    static initialize(app, plugin) {
        if (!DIContainer.instance) {
            DIContainer.instance = new DIContainer(app);
        }
        else {
            // Always update app and plugin references
            DIContainer.instance.app = app;
            if (plugin) {
                DIContainer.instance.plugin = plugin;
            }
            // Re-register dependencies to ensure they use the new app instance
            DIContainer.instance.container.clear();
            DIContainer.instance.registerDependencies();
        }
        if (plugin && !DIContainer.instance.plugin) {
            DIContainer.instance.plugin = plugin;
        }
        return DIContainer.instance;
    }
    static getInstance() {
        if (!DIContainer.instance) {
            throw new Error('DIContainer not initialized. Call initialize(app) first.');
        }
        return DIContainer.instance;
    }
    /**
     * Async initialize method for backward compatibility
     */
    initialize(app) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Already initialized in constructor, this is for backward compatibility
            return Promise.resolve();
        });
    }
    /**
     * Reset the container instance (for testing purposes)
     */
    static reset() {
        DIContainer.instance = null;
    }
    registerDependencies() {
        // Register Obsidian App
        this.container.register('App', () => this.app);
        // Register Repositories
        this.container.register('IAssetRepository', () => new ObsidianAssetRepository_1.ObsidianAssetRepository(this.app));
        this.container.register('IOntologyRepository', () => new ObsidianOntologyRepository_1.ObsidianOntologyRepository(this.app));
        this.container.register('IClassViewRepository', () => new ObsidianClassViewRepository_1.ObsidianClassViewRepository(this.app));
        this.container.register('IButtonRepository', () => new ObsidianButtonRepository_1.ObsidianButtonRepository(this.app));
        this.container.register('IClassLayoutRepository', () => {
            var _a, _b;
            return new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(this.app, ((_b = (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.layoutsFolderPath) || 'layouts');
        });
        this.container.register('IQueryTemplateRepository', () => {
            var _a, _b, _c, _d;
            return new ObsidianQueryTemplateRepository_1.ObsidianQueryTemplateRepository(this.app, ((_b = (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.templatesPath) || '.exocortex/templates', ((_d = (_c = this.plugin) === null || _c === void 0 ? void 0 : _c.settings) === null || _d === void 0 ? void 0 : _d.templateUsageDataPath) || '.exocortex/template-usage.json');
        });
        // Register Services
        this.container.register('ICommandExecutor', () => new ObsidianCommandExecutor_1.ObsidianCommandExecutor(this.app, this.container.resolve('IAssetRepository')));
        // Register Error Handler Service
        this.container.register('ErrorHandlerService', () => new ErrorHandlerService_1.ErrorHandlerService({
            showUserNotification: true,
            logToConsole: true,
            trackMetrics: true,
            autoRecover: false
        }));
        // Register Autocomplete Services
        this.container.register('ISuggestionRepository', () => {
            var _a;
            // Need to get graph instance - will be provided by plugin
            const graph = ((_a = this.plugin) === null || _a === void 0 ? void 0 : _a.graph) || null;
            return new GraphSuggestionRepository_1.GraphSuggestionRepository(graph);
        });
        this.container.register('SPARQLAutocompleteService', () => {
            var _a;
            return new SPARQLAutocompleteService_1.SPARQLAutocompleteService(this.container.resolve('ISuggestionRepository'), ((_a = this.plugin) === null || _a === void 0 ? void 0 : _a.graph) || null);
        });
        // Register Use Cases
        this.container.register('CreateAssetUseCase', () => new CreateAssetUseCase_1.CreateAssetUseCase(this.container.resolve('IAssetRepository'), this.container.resolve('IOntologyRepository')));
        this.container.register('RenderClassButtonsUseCase', () => new RenderClassButtonsUseCase_1.RenderClassButtonsUseCase(this.container.resolve('IClassViewRepository'), this.container.resolve('IButtonRepository')));
        this.container.register('ExecuteButtonCommandUseCase', () => new ExecuteButtonCommandUseCase_1.ExecuteButtonCommandUseCase(this.container.resolve('IButtonRepository'), this.container.resolve('ICommandExecutor')));
        this.container.register('PropertyEditingUseCase', () => new PropertyEditingUseCase_1.PropertyEditingUseCase(this.container.resolve('IAssetRepository'), this.plugin || this.app // Use plugin if available, otherwise app
        ));
        this.container.register('QueryTemplateUseCase', () => new QueryTemplateUseCase_1.QueryTemplateUseCase(this.container.resolve('IQueryTemplateRepository')));
        // Register Presentation Components
        this.container.register('ButtonRenderer', () => new ButtonRenderer_1.ButtonRenderer(this.app, this.container.resolve('RenderClassButtonsUseCase'), this.container.resolve('ExecuteButtonCommandUseCase')));
        this.container.register('PropertyRenderer', () => new PropertyRenderer_1.PropertyRenderer(this.app, this.container.resolve('PropertyEditingUseCase')));
        this.container.register('LayoutRenderer', () => new LayoutRenderer_1.LayoutRenderer(this.app, this.container.resolve('IClassLayoutRepository'), this.container.resolve('PropertyRenderer')));
    }
    /**
     * Resolve a dependency from the container
     */
    resolve(token) {
        return this.container.resolve(token);
    }
    /**
     * Get specific use cases for common operations
     */
    getCreateAssetUseCase() {
        return this.resolve('CreateAssetUseCase');
    }
    getRenderButtonsUseCase() {
        return this.resolve('RenderClassButtonsUseCase');
    }
    getExecuteButtonCommandUseCase() {
        return this.resolve('ExecuteButtonCommandUseCase');
    }
    getButtonRenderer() {
        return this.resolve('ButtonRenderer');
    }
    getPropertyRenderer() {
        return this.resolve('PropertyRenderer');
    }
    getLayoutRenderer() {
        return this.resolve('LayoutRenderer');
    }
    getPropertyEditingUseCase() {
        return this.resolve('PropertyEditingUseCase');
    }
    getQueryTemplateUseCase() {
        return this.resolve('QueryTemplateUseCase');
    }
    getQueryTemplateRepository() {
        return this.resolve('IQueryTemplateRepository');
    }
    /**
     * Clean up resources
     */
    dispose() {
        // Clean up any resources if needed
        this.container.clear();
    }
}
exports.DIContainer = DIContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,