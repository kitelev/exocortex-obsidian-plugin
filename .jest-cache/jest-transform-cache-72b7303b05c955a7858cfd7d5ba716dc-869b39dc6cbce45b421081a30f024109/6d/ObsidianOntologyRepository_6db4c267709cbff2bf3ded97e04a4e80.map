{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianOntologyRepository.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianOntologyRepository.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { IOntologyRepository } from \"../../domain/repositories/IOntologyRepository\";\nimport { Ontology } from \"../../domain/entities/Ontology\";\nimport { OntologyPrefix } from \"../../domain/value-objects/OntologyPrefix\";\n\n/**\n * Obsidian implementation of IOntologyRepository\n * Handles ontology persistence using Obsidian vault\n */\nexport class ObsidianOntologyRepository implements IOntologyRepository {\n  constructor(private app: App) {}\n\n  async findByPrefix(prefix: OntologyPrefix): Promise<Ontology | null> {\n    const fileName = `!${prefix.toString()}.md`;\n    const file = this.app.vault.getAbstractFileByPath(fileName);\n\n    if (file instanceof TFile) {\n      const cache = this.app.metadataCache.getFileCache(file);\n      if (cache?.frontmatter) {\n        return Ontology.fromFrontmatter(cache.frontmatter);\n      }\n    }\n\n    return null;\n  }\n\n  async findAll(): Promise<Ontology[]> {\n    const files = this.app.vault.getMarkdownFiles();\n    const ontologies: Ontology[] = [];\n\n    for (const file of files) {\n      if (file.name.startsWith(\"!\")) {\n        const cache = this.app.metadataCache.getFileCache(file);\n        if (cache?.frontmatter?.[\"exo__Ontology_prefix\"]) {\n          ontologies.push(Ontology.fromFrontmatter(cache.frontmatter));\n        }\n      }\n    }\n\n    return ontologies;\n  }\n\n  async save(ontology: Ontology): Promise<void> {\n    const fileName = `!${ontology.getPrefix().toString()}.md`;\n    const frontmatter = ontology.toFrontmatter();\n\n    // Build YAML frontmatter\n    const yamlLines = [\"---\"];\n    for (const [key, value] of Object.entries(frontmatter)) {\n      if (Array.isArray(value)) {\n        yamlLines.push(`${key}:`);\n        for (const item of value) {\n          yamlLines.push(`  - ${item}`);\n        }\n      } else {\n        yamlLines.push(`${key}: ${value}`);\n      }\n    }\n    yamlLines.push(\"---\", \"\");\n\n    const content = yamlLines.join(\"\\n\");\n\n    // Check if file exists\n    const existingFile = this.app.vault.getAbstractFileByPath(fileName);\n    if (existingFile instanceof TFile) {\n      await this.app.vault.modify(existingFile, content);\n    } else {\n      await this.app.vault.create(fileName, content);\n    }\n  }\n\n  async exists(prefix: OntologyPrefix): Promise<boolean> {\n    const fileName = `!${prefix.toString()}.md`;\n    const file = this.app.vault.getAbstractFileByPath(fileName);\n    return file instanceof TFile;\n  }\n}\n"],"version":3}