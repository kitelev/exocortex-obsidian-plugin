6563ced3134749747262b0c1c3d3b1ee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataviewQueryEngine = void 0;
const Result_1 = require("../../domain/core/Result");
/**
 * Dataview Query Engine Implementation
 * Adapts the Dataview plugin API to our generic query engine interface
 */
class DataviewQueryEngine {
    constructor(dataviewApi) {
        this.dataviewApi = dataviewApi;
    }
    getType() {
        return "dataview";
    }
    isAvailable() {
        return !!this.dataviewApi && typeof this.dataviewApi.pages === "function";
    }
    async executeQuery(query, context) {
        if (!this.isAvailable()) {
            return Result_1.Result.fail("Dataview is not available");
        }
        try {
            const result = await this.parseAndExecuteQuery(query, context);
            return Result_1.Result.ok(result);
        }
        catch (error) {
            return Result_1.Result.fail(`Dataview query error: ${error}`);
        }
    }
    async renderQuery(container, query, context) {
        if (!this.isAvailable()) {
            return Result_1.Result.fail("Dataview is not available");
        }
        try {
            await this.renderDataviewQuery(container, query, context);
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Dataview render error: ${error}`);
        }
    }
    async getPages(source) {
        if (!this.isAvailable()) {
            return Result_1.Result.fail("Dataview is not available");
        }
        try {
            const pages = this.dataviewApi.pages(source);
            return Result_1.Result.ok(pages ? Array.from(pages) : []);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to get pages: ${error}`);
        }
    }
    async getPageMetadata(path) {
        if (!this.isAvailable()) {
            return Result_1.Result.fail("Dataview is not available");
        }
        try {
            const page = this.dataviewApi.page(path);
            return Result_1.Result.ok(page || {});
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to get page metadata: ${error}`);
        }
    }
    validateQuery(query) {
        if (!query || query.trim().length === 0) {
            return Result_1.Result.fail("Query cannot be empty");
        }
        // Basic validation for Dataview query syntax
        const trimmedQuery = query.trim().toLowerCase();
        const validStartKeywords = ["table", "list", "task", "calendar"];
        const hasValidStart = validStartKeywords.some((keyword) => trimmedQuery.startsWith(keyword));
        if (!hasValidStart && !trimmedQuery.includes("dv.")) {
            return Result_1.Result.fail("Query must start with table, list, task, calendar, or contain dv. calls");
        }
        return Result_1.Result.ok(true);
    }
    async parseAndExecuteQuery(query, context) {
        const queryLines = query.trim().split("\n");
        const firstLine = queryLines[0].toLowerCase();
        if (firstLine.startsWith("table")) {
            return await this.executeTableQuery(query, context);
        }
        else if (firstLine.startsWith("list")) {
            return await this.executeListQuery(query, context);
        }
        else if (firstLine.startsWith("task")) {
            return await this.executeTaskQuery(query, context);
        }
        else if (firstLine.startsWith("calendar")) {
            return await this.executeCalendarQuery(query, context);
        }
        else {
            // Try to execute as raw JavaScript
            return await this.executeRawQuery(query, context);
        }
    }
    async executeTableQuery(query, context) {
        const tableMatch = query.match(/table\s+(.+?)\s+from/s);
        const fromMatch = query.match(/from\s+(.+?)(?:\s+where|$)/s);
        const whereMatch = query.match(/where\s+(.+?)$/s);
        if (!fromMatch) {
            throw new Error("Invalid table query: missing FROM clause");
        }
        const source = fromMatch[1].trim();
        const fields = tableMatch
            ? tableMatch[1].split(",").map((f) => f.trim())
            : [];
        let pages = this.dataviewApi.pages(source);
        if (whereMatch) {
            // Apply where clause (simplified - in real implementation would need proper expression evaluation)
            const whereClause = whereMatch[1];
            pages = pages.where((p) => this.evaluateWhereClause(p, whereClause));
        }
        const data = pages.map((p) => {
            const row = { file: p.file };
            fields.forEach((field) => {
                row[field] = this.getFieldValue(p, field);
            });
            return row;
        });
        return {
            type: "table",
            data: Array.from(data),
            columns: ["file", ...fields],
            metadata: { source, where: whereMatch?.[1] },
        };
    }
    async executeListQuery(query, context) {
        const fromMatch = query.match(/from\s+(.+?)(?:\s+where|$)/s);
        if (!fromMatch) {
            throw new Error("Invalid list query: missing FROM clause");
        }
        const source = fromMatch[1].trim();
        const pages = this.dataviewApi.pages(source);
        return {
            type: "list",
            data: Array.from(pages).map((p) => p.file),
            metadata: { source },
        };
    }
    async executeTaskQuery(query, context) {
        const fromMatch = query.match(/from\s+(.+?)(?:\s+where|$)/s);
        const source = fromMatch ? fromMatch[1].trim() : '""';
        const tasks = this.dataviewApi
            .pages(source)
            .file.tasks.where((t) => !t.completed);
        return {
            type: "task",
            data: Array.from(tasks),
            metadata: { source },
        };
    }
    async executeCalendarQuery(query, context) {
        // Calendar query implementation would be more complex
        // This is a simplified version
        return {
            type: "calendar",
            data: [],
            metadata: { queryType: "calendar" },
        };
    }
    async executeRawQuery(query, context) {
        // Execute as JavaScript with dataview context
        const AsyncFunction = Object.getPrototypeOf(async function () { }).constructor;
        const fn = new AsyncFunction("dv", "context", query);
        const result = await fn(this.dataviewApi, context);
        return {
            type: "raw",
            data: Array.isArray(result) ? result : [result],
            metadata: { queryType: "raw" },
        };
    }
    async renderDataviewQuery(container, query, context) {
        const dvContainer = container.createDiv({
            cls: "exocortex-dataview-container",
        });
        const queryLines = query.trim().split("\n");
        const firstLine = queryLines[0].toLowerCase();
        if (firstLine.startsWith("table")) {
            await this.renderTableQuery(dvContainer, query);
        }
        else if (firstLine.startsWith("list")) {
            await this.renderListQuery(dvContainer, query);
        }
        else if (firstLine.startsWith("task")) {
            await this.renderTaskQuery(dvContainer, query);
        }
        else {
            // Execute as raw JavaScript with container access
            const AsyncFunction = Object.getPrototypeOf(async function () { }).constructor;
            const fn = new AsyncFunction("dv", "container", "context", query);
            await fn(this.dataviewApi, dvContainer, context);
        }
    }
    async renderTableQuery(container, query) {
        const result = await this.executeTableQuery(query);
        if (result.data.length === 0) {
            container.createEl("p", {
                text: "No results found",
                cls: "exocortex-empty",
            });
            return;
        }
        this.dataviewApi.table(result.columns, result.data.map((row) => result.columns.map((col) => row[col] || "")));
    }
    async renderListQuery(container, query) {
        const result = await this.executeListQuery(query);
        if (result.data.length === 0) {
            container.createEl("p", {
                text: "No results found",
                cls: "exocortex-empty",
            });
            return;
        }
        this.dataviewApi.list(result.data);
    }
    async renderTaskQuery(container, query) {
        const result = await this.executeTaskQuery(query);
        if (result.data.length === 0) {
            container.createEl("p", {
                text: "No tasks found",
                cls: "exocortex-empty",
            });
            return;
        }
        this.dataviewApi.taskList(result.data);
    }
    getFieldValue(page, field) {
        // Handle nested field access (e.g., "file.name", "metadata.title")
        const parts = field.split(".");
        let value = page;
        for (const part of parts) {
            value = value?.[part];
            if (value === undefined)
                break;
        }
        return value || "";
    }
    evaluateWhereClause(page, whereClause) {
        // Simplified where clause evaluation
        // In a real implementation, this would need proper expression parsing
        try {
            const AsyncFunction = Object.getPrototypeOf(async function () { }).constructor;
            const fn = new AsyncFunction("page", `return ${whereClause};`);
            return fn(page);
        }
        catch {
            return true; // Default to include if evaluation fails
        }
    }
}
exports.DataviewQueryEngine = DataviewQueryEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,