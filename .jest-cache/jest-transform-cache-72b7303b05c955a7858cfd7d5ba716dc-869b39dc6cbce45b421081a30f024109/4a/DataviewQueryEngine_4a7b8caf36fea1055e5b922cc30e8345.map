{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/DataviewQueryEngine.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/DataviewQueryEngine.ts"],"sourcesContent":["import {\n  IQueryEngine,\n  QueryEngineType,\n  QueryResult,\n  QueryContext,\n} from \"../../domain/ports/IQueryEngine\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Dataview Query Engine Implementation\n * Adapts the Dataview plugin API to our generic query engine interface\n */\nexport class DataviewQueryEngine implements IQueryEngine {\n  constructor(private dataviewApi?: any) {}\n\n  public getType(): QueryEngineType {\n    return \"dataview\";\n  }\n\n  public isAvailable(): boolean {\n    return !!this.dataviewApi && typeof this.dataviewApi.pages === \"function\";\n  }\n\n  public async executeQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<Result<QueryResult>> {\n    if (!this.isAvailable()) {\n      return Result.fail<QueryResult>(\"Dataview is not available\");\n    }\n\n    try {\n      const result = await this.parseAndExecuteQuery(query, context);\n      return Result.ok<QueryResult>(result);\n    } catch (error) {\n      return Result.fail<QueryResult>(`Dataview query error: ${error}`);\n    }\n  }\n\n  public async renderQuery(\n    container: HTMLElement,\n    query: string,\n    context?: QueryContext,\n  ): Promise<Result<void>> {\n    if (!this.isAvailable()) {\n      return Result.fail<void>(\"Dataview is not available\");\n    }\n\n    try {\n      await this.renderDataviewQuery(container, query, context);\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Dataview render error: ${error}`);\n    }\n  }\n\n  public async getPages(source: string): Promise<Result<any[]>> {\n    if (!this.isAvailable()) {\n      return Result.fail<any[]>(\"Dataview is not available\");\n    }\n\n    try {\n      const pages = this.dataviewApi.pages(source);\n      return Result.ok<any[]>(pages ? Array.from(pages) : []);\n    } catch (error) {\n      return Result.fail<any[]>(`Failed to get pages: ${error}`);\n    }\n  }\n\n  public async getPageMetadata(\n    path: string,\n  ): Promise<Result<Record<string, any>>> {\n    if (!this.isAvailable()) {\n      return Result.fail<Record<string, any>>(\"Dataview is not available\");\n    }\n\n    try {\n      const page = this.dataviewApi.page(path);\n      return Result.ok<Record<string, any>>(page || {});\n    } catch (error) {\n      return Result.fail<Record<string, any>>(\n        `Failed to get page metadata: ${error}`,\n      );\n    }\n  }\n\n  public validateQuery(query: string): Result<boolean> {\n    if (!query || query.trim().length === 0) {\n      return Result.fail<boolean>(\"Query cannot be empty\");\n    }\n\n    // Basic validation for Dataview query syntax\n    const trimmedQuery = query.trim().toLowerCase();\n\n    const validStartKeywords = [\"table\", \"list\", \"task\", \"calendar\"];\n    const hasValidStart = validStartKeywords.some((keyword) =>\n      trimmedQuery.startsWith(keyword),\n    );\n\n    if (!hasValidStart && !trimmedQuery.includes(\"dv.\")) {\n      return Result.fail<boolean>(\n        \"Query must start with table, list, task, calendar, or contain dv. calls\",\n      );\n    }\n\n    return Result.ok<boolean>(true);\n  }\n\n  private async parseAndExecuteQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    const queryLines = query.trim().split(\"\\n\");\n    const firstLine = queryLines[0].toLowerCase();\n\n    if (firstLine.startsWith(\"table\")) {\n      return await this.executeTableQuery(query, context);\n    } else if (firstLine.startsWith(\"list\")) {\n      return await this.executeListQuery(query, context);\n    } else if (firstLine.startsWith(\"task\")) {\n      return await this.executeTaskQuery(query, context);\n    } else if (firstLine.startsWith(\"calendar\")) {\n      return await this.executeCalendarQuery(query, context);\n    } else {\n      // Try to execute as raw JavaScript\n      return await this.executeRawQuery(query, context);\n    }\n  }\n\n  private async executeTableQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    const tableMatch = query.match(/table\\s+(.+?)\\s+from/s);\n    const fromMatch = query.match(/from\\s+(.+?)(?:\\s+where|$)/s);\n    const whereMatch = query.match(/where\\s+(.+?)$/s);\n\n    if (!fromMatch) {\n      throw new Error(\"Invalid table query: missing FROM clause\");\n    }\n\n    const source = fromMatch[1].trim();\n    const fields = tableMatch\n      ? tableMatch[1].split(\",\").map((f) => f.trim())\n      : [];\n\n    let pages = this.dataviewApi.pages(source);\n\n    if (whereMatch) {\n      // Apply where clause (simplified - in real implementation would need proper expression evaluation)\n      const whereClause = whereMatch[1];\n      pages = pages.where((p: any) => this.evaluateWhereClause(p, whereClause));\n    }\n\n    const data = pages.map((p: any) => {\n      const row: any = { file: p.file };\n      fields.forEach((field) => {\n        row[field] = this.getFieldValue(p, field);\n      });\n      return row;\n    });\n\n    return {\n      type: \"table\",\n      data: Array.from(data),\n      columns: [\"file\", ...fields],\n      metadata: { source, where: whereMatch?.[1] },\n    };\n  }\n\n  private async executeListQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    const fromMatch = query.match(/from\\s+(.+?)(?:\\s+where|$)/s);\n\n    if (!fromMatch) {\n      throw new Error(\"Invalid list query: missing FROM clause\");\n    }\n\n    const source = fromMatch[1].trim();\n    const pages = this.dataviewApi.pages(source);\n\n    return {\n      type: \"list\",\n      data: Array.from(pages).map((p: any) => p.file),\n      metadata: { source },\n    };\n  }\n\n  private async executeTaskQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    const fromMatch = query.match(/from\\s+(.+?)(?:\\s+where|$)/s);\n\n    const source = fromMatch ? fromMatch[1].trim() : '\"\"';\n    const tasks = this.dataviewApi\n      .pages(source)\n      .file.tasks.where((t: any) => !t.completed);\n\n    return {\n      type: \"task\",\n      data: Array.from(tasks),\n      metadata: { source },\n    };\n  }\n\n  private async executeCalendarQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Calendar query implementation would be more complex\n    // This is a simplified version\n    return {\n      type: \"calendar\",\n      data: [],\n      metadata: { queryType: \"calendar\" },\n    };\n  }\n\n  private async executeRawQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Execute as JavaScript with dataview context\n    const AsyncFunction = Object.getPrototypeOf(\n      async function () {},\n    ).constructor;\n    const fn = new AsyncFunction(\"dv\", \"context\", query);\n\n    const result = await fn(this.dataviewApi, context);\n\n    return {\n      type: \"raw\",\n      data: Array.isArray(result) ? result : [result],\n      metadata: { queryType: \"raw\" },\n    };\n  }\n\n  private async renderDataviewQuery(\n    container: HTMLElement,\n    query: string,\n    context?: QueryContext,\n  ): Promise<void> {\n    const dvContainer = container.createDiv({\n      cls: \"exocortex-dataview-container\",\n    });\n\n    const queryLines = query.trim().split(\"\\n\");\n    const firstLine = queryLines[0].toLowerCase();\n\n    if (firstLine.startsWith(\"table\")) {\n      await this.renderTableQuery(dvContainer, query);\n    } else if (firstLine.startsWith(\"list\")) {\n      await this.renderListQuery(dvContainer, query);\n    } else if (firstLine.startsWith(\"task\")) {\n      await this.renderTaskQuery(dvContainer, query);\n    } else {\n      // Execute as raw JavaScript with container access\n      const AsyncFunction = Object.getPrototypeOf(\n        async function () {},\n      ).constructor;\n      const fn = new AsyncFunction(\"dv\", \"container\", \"context\", query);\n      await fn(this.dataviewApi, dvContainer, context);\n    }\n  }\n\n  private async renderTableQuery(\n    container: HTMLElement,\n    query: string,\n  ): Promise<void> {\n    const result = await this.executeTableQuery(query);\n\n    if (result.data.length === 0) {\n      container.createEl(\"p\", {\n        text: \"No results found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    this.dataviewApi.table(\n      result.columns,\n      result.data.map((row: any) =>\n        result.columns!.map((col) => row[col] || \"\"),\n      ),\n    );\n  }\n\n  private async renderListQuery(\n    container: HTMLElement,\n    query: string,\n  ): Promise<void> {\n    const result = await this.executeListQuery(query);\n\n    if (result.data.length === 0) {\n      container.createEl(\"p\", {\n        text: \"No results found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    this.dataviewApi.list(result.data);\n  }\n\n  private async renderTaskQuery(\n    container: HTMLElement,\n    query: string,\n  ): Promise<void> {\n    const result = await this.executeTaskQuery(query);\n\n    if (result.data.length === 0) {\n      container.createEl(\"p\", {\n        text: \"No tasks found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    this.dataviewApi.taskList(result.data);\n  }\n\n  private getFieldValue(page: any, field: string): any {\n    // Handle nested field access (e.g., \"file.name\", \"metadata.title\")\n    const parts = field.split(\".\");\n    let value = page;\n\n    for (const part of parts) {\n      value = value?.[part];\n      if (value === undefined) break;\n    }\n\n    return value || \"\";\n  }\n\n  private evaluateWhereClause(page: any, whereClause: string): boolean {\n    // Simplified where clause evaluation\n    // In a real implementation, this would need proper expression parsing\n    try {\n      const AsyncFunction = Object.getPrototypeOf(\n        async function () {},\n      ).constructor;\n      const fn = new AsyncFunction(\"page\", `return ${whereClause};`);\n      return fn(page);\n    } catch {\n      return true; // Default to include if evaluation fails\n    }\n  }\n}\n"],"version":3}