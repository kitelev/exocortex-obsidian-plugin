3d71387d0a4d76073c1c5265b1bad0aa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Container = void 0;
/**
 * Simple Dependency Injection Container
 * Following Inversion of Control principle
 */
class Container {
    constructor() {
        this.services = new Map();
        this.factories = new Map();
    }
    static getInstance() {
        if (!Container.instance) {
            Container.instance = new Container();
        }
        return Container.instance;
    }
    /**
     * Register a service factory
     */
    register(token, factory) {
        this.factories.set(token, factory);
    }
    /**
     * Register a singleton service
     */
    registerSingleton(token, service) {
        this.services.set(token, service);
    }
    /**
     * Resolve a service
     */
    resolve(token) {
        // Check if we have a singleton
        if (this.services.has(token)) {
            return this.services.get(token);
        }
        // Check if we have a factory
        if (this.factories.has(token)) {
            const factory = this.factories.get(token);
            if (factory) {
                const service = factory();
                // Optionally cache as singleton
                // this.services.set(token, service);
                return service;
            }
        }
        throw new Error(`Service not found: ${token}`);
    }
    /**
     * Check if a service is registered
     */
    has(token) {
        return this.services.has(token) || this.factories.has(token);
    }
    /**
     * Clear all registrations
     */
    clear() {
        this.services.clear();
        this.factories.clear();
    }
    /**
     * Reset the container instance (for testing)
     */
    static reset() {
        if (Container.instance) {
            Container.instance.clear();
            Container.instance = null;
        }
    }
}
exports.Container = Container;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL2NvcmUvQ29udGFpbmVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBOzs7R0FHRztBQUNILE1BQWEsU0FBUztJQUtsQjtRQUhRLGFBQVEsR0FBcUIsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUN2QyxjQUFTLEdBQTJCLElBQUksR0FBRyxFQUFFLENBQUM7SUFFL0IsQ0FBQztJQUVqQixNQUFNLENBQUMsV0FBVztRQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtZQUNyQixTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7U0FDeEM7UUFDRCxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksUUFBUSxDQUFJLEtBQWEsRUFBRSxPQUFnQjtRQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUJBQWlCLENBQUksS0FBYSxFQUFFLE9BQVU7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU8sQ0FBSSxLQUFhO1FBQzNCLCtCQUErQjtRQUMvQixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7UUFFRCw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxJQUFJLE9BQU8sRUFBRTtnQkFDVCxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsQ0FBQztnQkFFMUIsZ0NBQWdDO2dCQUNoQyxxQ0FBcUM7Z0JBRXJDLE9BQU8sT0FBTyxDQUFDO2FBQ2xCO1NBQ0o7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7T0FFRztJQUNJLEdBQUcsQ0FBQyxLQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSztRQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNmLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRTtZQUNwQixTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzNCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBVyxDQUFDO1NBQ3BDO0lBQ0wsQ0FBQztDQUNKO0FBN0VELDhCQTZFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvYXBwbGljYXRpb24vY29yZS9Db250YWluZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTaW1wbGUgRGVwZW5kZW5jeSBJbmplY3Rpb24gQ29udGFpbmVyXG4gKiBGb2xsb3dpbmcgSW52ZXJzaW9uIG9mIENvbnRyb2wgcHJpbmNpcGxlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250YWluZXIge1xuICAgIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBDb250YWluZXI7XG4gICAgcHJpdmF0ZSBzZXJ2aWNlczogTWFwPHN0cmluZywgYW55PiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIGZhY3RvcmllczogTWFwPHN0cmluZywgKCkgPT4gYW55PiA9IG5ldyBNYXAoKTtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBDb250YWluZXIge1xuICAgICAgICBpZiAoIUNvbnRhaW5lci5pbnN0YW5jZSkge1xuICAgICAgICAgICAgQ29udGFpbmVyLmluc3RhbmNlID0gbmV3IENvbnRhaW5lcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDb250YWluZXIuaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBzZXJ2aWNlIGZhY3RvcnlcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXI8VD4odG9rZW46IHN0cmluZywgZmFjdG9yeTogKCkgPT4gVCk6IHZvaWQge1xuICAgICAgICB0aGlzLmZhY3Rvcmllcy5zZXQodG9rZW4sIGZhY3RvcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGEgc2luZ2xldG9uIHNlcnZpY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVnaXN0ZXJTaW5nbGV0b248VD4odG9rZW46IHN0cmluZywgc2VydmljZTogVCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlcnZpY2VzLnNldCh0b2tlbiwgc2VydmljZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSBhIHNlcnZpY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVzb2x2ZTxUPih0b2tlbjogc3RyaW5nKTogVCB7XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgYSBzaW5nbGV0b25cbiAgICAgICAgaWYgKHRoaXMuc2VydmljZXMuaGFzKHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXMuZ2V0KHRva2VuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgYSBmYWN0b3J5XG4gICAgICAgIGlmICh0aGlzLmZhY3Rvcmllcy5oYXModG9rZW4pKSB7XG4gICAgICAgICAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5mYWN0b3JpZXMuZ2V0KHRva2VuKTtcbiAgICAgICAgICAgIGlmIChmYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IGZhY3RvcnkoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBPcHRpb25hbGx5IGNhY2hlIGFzIHNpbmdsZXRvblxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc2VydmljZXMuc2V0KHRva2VuLCBzZXJ2aWNlKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmljZSBub3QgZm91bmQ6ICR7dG9rZW59YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBzZXJ2aWNlIGlzIHJlZ2lzdGVyZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgaGFzKHRva2VuOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VydmljZXMuaGFzKHRva2VuKSB8fCB0aGlzLmZhY3Rvcmllcy5oYXModG9rZW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFsbCByZWdpc3RyYXRpb25zXG4gICAgICovXG4gICAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNlcnZpY2VzLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuZmFjdG9yaWVzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIGNvbnRhaW5lciBpbnN0YW5jZSAoZm9yIHRlc3RpbmcpXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyByZXNldCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKENvbnRhaW5lci5pbnN0YW5jZSkge1xuICAgICAgICAgICAgQ29udGFpbmVyLmluc3RhbmNlLmNsZWFyKCk7XG4gICAgICAgICAgICBDb250YWluZXIuaW5zdGFuY2UgPSBudWxsIGFzIGFueTtcbiAgICAgICAgfVxuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=