635977edfd191826382bb70974f6e5a2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDFFileManager = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const Result_1 = require("../../domain/core/Result");
class RDFFileManager {
    constructor(app) {
        this.app = app;
    }
    saveToVault(content, filePath) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (file instanceof obsidian_1.TFile) {
                    yield this.app.vault.modify(file, content);
                }
                else {
                    const folderPath = filePath.substring(0, filePath.lastIndexOf('/'));
                    if (folderPath && !this.app.vault.getAbstractFileByPath(folderPath)) {
                        yield this.app.vault.createFolder(folderPath);
                    }
                    yield this.app.vault.create(filePath, content);
                }
                return Result_1.Result.ok({
                    filePath,
                    success: true,
                    message: `File saved successfully to ${filePath}`
                });
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to save file: ${error.message}`);
            }
        });
    }
    readFromVault(filePath) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (!(file instanceof obsidian_1.TFile)) {
                    return Result_1.Result.fail(`File not found: ${filePath}`);
                }
                const content = yield this.app.vault.read(file);
                return Result_1.Result.ok(content);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to read file: ${error.message}`);
            }
        });
    }
    deleteFromVault(filePath) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (!(file instanceof obsidian_1.TFile)) {
                    return Result_1.Result.fail(`File not found: ${filePath}`);
                }
                yield this.app.vault.delete(file);
                return Result_1.Result.ok();
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to delete file: ${error.message}`);
            }
        });
    }
    generateFileName(baseName, format) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const extension = this.getFileExtension(format);
        if (baseName) {
            const nameWithoutExt = baseName.replace(/\.[^/.]+$/, '');
            return `${nameWithoutExt}.${extension}`;
        }
        return `export_${timestamp}.${extension}`;
    }
    getFileExtension(format) {
        const extensions = {
            'turtle': 'ttl',
            'n-triples': 'nt',
            'json-ld': 'jsonld',
            'rdf-xml': 'rdf'
        };
        return extensions[format] || 'rdf';
    }
    detectFormatFromExtension(filePath) {
        var _a;
        const extension = (_a = filePath.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        const formatMap = {
            'ttl': 'turtle',
            'turtle': 'turtle',
            'nt': 'n-triples',
            'ntriples': 'n-triples',
            'jsonld': 'json-ld',
            'json': 'json-ld',
            'rdf': 'rdf-xml',
            'xml': 'rdf-xml'
        };
        return extension ? formatMap[extension] : undefined;
    }
    listRDFFiles(folder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const files = this.app.vault.getFiles();
                const rdfExtensions = ['ttl', 'nt', 'jsonld', 'rdf', 'xml'];
                const rdfFiles = files.filter(file => {
                    const extension = file.extension.toLowerCase();
                    const inCorrectFolder = !folder || file.path.startsWith(folder);
                    return rdfExtensions.includes(extension) && inCorrectFolder;
                });
                return Result_1.Result.ok(rdfFiles);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to list RDF files: ${error.message}`);
            }
        });
    }
    ensureFolderExists(folderPath) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.app.vault.getAbstractFileByPath(folderPath)) {
                    yield this.app.vault.createFolder(folderPath);
                }
                return Result_1.Result.ok();
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to create folder: ${error.message}`);
            }
        });
    }
    getFileInfo(file) {
        return {
            size: file.stat.size,
            modified: new Date(file.stat.mtime),
            created: new Date(file.stat.ctime)
        };
    }
}
exports.RDFFileManager = RDFFileManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,