3efdb4de4660563547b6891fa28d9427
"use strict";
/**
 * SPARQL Query Sanitizer
 * Implements security controls to prevent injection attacks
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPARQLSanitizer = void 0;
const Result_1 = require("../../domain/core/Result");
class SPARQLSanitizer {
    constructor() {
        // Dangerous patterns that could lead to security issues
        this.dangerousPatterns = [
            // File system access attempts
            /FILE:/gi,
            /LOAD\s+<file:/gi,
            // Command injection patterns
            /;\s*DELETE/gi,
            /;\s*DROP/gi,
            /;\s*INSERT/gi,
            /;\s*CLEAR/gi,
            // Path traversal
            /\.\.[\/\\]/g,
            // Null byte injection
            /\x00/g,
            // Script injection
            /<script/gi,
            /javascript:/gi,
            /on\w+\s*=/gi,
        ];
        // Allowed SPARQL keywords
        this.allowedKeywords = new Set([
            "SELECT",
            "CONSTRUCT",
            "WHERE",
            "FILTER",
            "OPTIONAL",
            "UNION",
            "PREFIX",
            "BASE",
            "DISTINCT",
            "REDUCED",
            "ORDER",
            "BY",
            "ASC",
            "DESC",
            "LIMIT",
            "OFFSET",
            "GRAPH",
            "BIND",
            "VALUES",
            "GROUP",
            "HAVING",
            "SERVICE",
            "MINUS",
            "EXISTS",
            "NOT",
            "IN",
            "AS",
        ]);
    }
    /**
     * Sanitize SPARQL query for safe execution
     */
    sanitize(query) {
        if (!query || query.trim().length === 0) {
            return Result_1.Result.fail("Empty query provided");
        }
        const warnings = [];
        let sanitized = query;
        let modified = false;
        // Check for dangerous patterns
        for (const pattern of this.dangerousPatterns) {
            if (pattern.test(sanitized)) {
                warnings.push(`Dangerous pattern detected and removed: ${pattern.source}`);
                sanitized = sanitized.replace(pattern, "");
                modified = true;
            }
        }
        // Validate query structure
        const validation = this.validateQueryStructure(sanitized);
        if (validation.warnings.length > 0) {
            warnings.push(...validation.warnings);
        }
        // Check for multiple statements
        if (this.hasMultipleStatements(sanitized)) {
            warnings.push("Multiple statements detected - only first will be executed");
            sanitized = this.extractFirstStatement(sanitized);
            modified = true;
        }
        // Validate IRI patterns
        const iriValidation = this.validateIRIs(sanitized);
        if (iriValidation.warnings.length > 0) {
            warnings.push(...iriValidation.warnings);
        }
        // Check query complexity
        const complexity = this.checkComplexity(sanitized);
        if (complexity.tooComplex) {
            return Result_1.Result.fail(`Query too complex: ${complexity.reason}`);
        }
        return Result_1.Result.ok({
            query: sanitized,
            modified,
            warnings,
        });
    }
    /**
     * Validate query structure
     */
    validateQueryStructure(query) {
        const warnings = [];
        const upperQuery = query.toUpperCase();
        // Check for required keywords
        if (!upperQuery.includes("SELECT") && !upperQuery.includes("CONSTRUCT")) {
            warnings.push("Query must be SELECT or CONSTRUCT");
        }
        // Check for balanced brackets
        const openBrackets = (query.match(/\{/g) || []).length;
        const closeBrackets = (query.match(/\}/g) || []).length;
        if (openBrackets !== closeBrackets) {
            warnings.push("Unbalanced brackets detected");
        }
        // Check for balanced parentheses
        const openParens = (query.match(/\(/g) || []).length;
        const closeParens = (query.match(/\)/g) || []).length;
        if (openParens !== closeParens) {
            warnings.push("Unbalanced parentheses detected");
        }
        return {
            valid: warnings.length === 0,
            warnings,
        };
    }
    /**
     * Check if query contains multiple statements
     */
    hasMultipleStatements(query) {
        // Look for multiple query keywords
        const queryKeywords = ["SELECT", "CONSTRUCT", "INSERT", "DELETE", "DROP"];
        let count = 0;
        for (const keyword of queryKeywords) {
            const regex = new RegExp(`\\b${keyword}\\b`, "gi");
            const matches = query.match(regex);
            if (matches) {
                count += matches.length;
            }
        }
        return count > 1;
    }
    /**
     * Extract first statement from query
     */
    extractFirstStatement(query) {
        // Find the end of the first complete statement
        let depth = 0;
        let inString = false;
        let stringChar = "";
        for (let i = 0; i < query.length; i++) {
            const char = query[i];
            // Handle string literals
            if ((char === '"' || char === "'") && query[i - 1] !== "\\") {
                if (!inString) {
                    inString = true;
                    stringChar = char;
                }
                else if (char === stringChar) {
                    inString = false;
                }
            }
            if (!inString) {
                if (char === "{")
                    depth++;
                if (char === "}")
                    depth--;
                // Check if we've completed a statement
                if (depth === 0 && i > 0) {
                    // Look for next query keyword
                    const remaining = query.substring(i + 1);
                    if (/^\s*(SELECT|CONSTRUCT|INSERT|DELETE)/i.test(remaining)) {
                        return query.substring(0, i + 1);
                    }
                }
            }
        }
        return query;
    }
    /**
     * Validate IRI patterns in query
     */
    validateIRIs(query) {
        const warnings = [];
        // Extract IRIs from query
        const iriPattern = /<([^>]+)>/g;
        let match;
        while ((match = iriPattern.exec(query)) !== null) {
            const iri = match[1];
            // Check for suspicious IRI patterns
            if (iri.includes("..") || iri.includes("\\")) {
                warnings.push(`Suspicious IRI detected: ${iri}`);
            }
            // Check for local file access
            if (iri.startsWith("file:")) {
                warnings.push(`File URI not allowed: ${iri}`);
            }
            // Check IRI length
            if (iri.length > 2048) {
                warnings.push(`IRI too long: ${iri.substring(0, 50)}...`);
            }
        }
        return {
            valid: warnings.length === 0,
            warnings,
        };
    }
    /**
     * Check query complexity to prevent DoS
     */
    checkComplexity(query) {
        // Check query length
        if (query.length > 10000) {
            return { tooComplex: true, reason: "Query exceeds maximum length" };
        }
        // Count triple patterns
        const triplePatterns = (query.match(/\.\s*\?/g) || []).length;
        if (triplePatterns > 100) {
            return { tooComplex: true, reason: "Too many triple patterns" };
        }
        // Count UNION operations
        const unions = (query.match(/\bUNION\b/gi) || []).length;
        if (unions > 10) {
            return { tooComplex: true, reason: "Too many UNION operations" };
        }
        // Count nested subqueries
        const subqueries = (query.match(/\{[^}]*SELECT/gi) || []).length;
        if (subqueries > 5) {
            return { tooComplex: true, reason: "Too many nested subqueries" };
        }
        // Count FILTER operations
        const filters = (query.match(/\bFILTER\b/gi) || []).length;
        if (filters > 20) {
            return { tooComplex: true, reason: "Too many FILTER operations" };
        }
        return { tooComplex: false };
    }
    /**
     * Escape special characters in literals
     */
    escapeStringLiteral(value) {
        return value
            .replace(/\\/g, "\\\\")
            .replace(/"/g, '\\"')
            .replace(/'/g, "\\'")
            .replace(/\n/g, "\\n")
            .replace(/\r/g, "\\r")
            .replace(/\t/g, "\\t");
    }
    /**
     * Create safe IRI from user input
     */
    createSafeIRI(input) {
        // Remove dangerous characters
        const safe = input
            .replace(/[<>'"`;]/g, "")
            .replace(/\s+/g, "_")
            .replace(/[^\w:/-]/g, "");
        // Ensure valid IRI format
        if (!safe.includes(":")) {
            return `ex:${safe}`;
        }
        return safe;
    }
}
exports.SPARQLSanitizer = SPARQLSanitizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3NlcnZpY2VzL1NQQVJRTFNhbml0aXplci50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxxREFBa0Q7QUFRbEQsTUFBYSxlQUFlO0lBQTVCO1FBQ0Usd0RBQXdEO1FBQ3ZDLHNCQUFpQixHQUFHO1lBQ25DLDhCQUE4QjtZQUM5QixTQUFTO1lBQ1QsaUJBQWlCO1lBRWpCLDZCQUE2QjtZQUM3QixjQUFjO1lBQ2QsWUFBWTtZQUNaLGNBQWM7WUFDZCxhQUFhO1lBRWIsaUJBQWlCO1lBQ2pCLGFBQWE7WUFFYixzQkFBc0I7WUFDdEIsT0FBTztZQUVQLG1CQUFtQjtZQUNuQixXQUFXO1lBQ1gsZUFBZTtZQUNmLGFBQWE7U0FDZCxDQUFDO1FBRUYsMEJBQTBCO1FBQ1Qsb0JBQWUsR0FBRyxJQUFJLEdBQUcsQ0FBQztZQUN6QyxRQUFRO1lBQ1IsV0FBVztZQUNYLE9BQU87WUFDUCxRQUFRO1lBQ1IsVUFBVTtZQUNWLE9BQU87WUFDUCxRQUFRO1lBQ1IsTUFBTTtZQUNOLFVBQVU7WUFDVixTQUFTO1lBQ1QsT0FBTztZQUNQLElBQUk7WUFDSixLQUFLO1lBQ0wsTUFBTTtZQUNOLE9BQU87WUFDUCxRQUFRO1lBQ1IsT0FBTztZQUNQLE1BQU07WUFDTixRQUFRO1lBQ1IsT0FBTztZQUNQLFFBQVE7WUFDUixTQUFTO1lBQ1QsT0FBTztZQUNQLFFBQVE7WUFDUixLQUFLO1lBQ0wsSUFBSTtZQUNKLElBQUk7U0FDTCxDQUFDLENBQUM7SUFpUUwsQ0FBQztJQS9QQzs7T0FFRztJQUNILFFBQVEsQ0FBQyxLQUFhO1FBQ3BCLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDdkMsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLENBQUM7U0FDNUM7UUFFRCxNQUFNLFFBQVEsR0FB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QUFDLEtBQUssRUFBRSxLQUFLLENBQUM7YUFDckIsT0FBTyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxhQUFhLENBQUMsS0FBYTtRQUN6Qiw4QkFBOEI7UUFDOUIsTUFBTSxJQUFJLEdBQUcsS0FBSzthQUNmLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO2FBQ3hCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO2FBQ3BCLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFNUIsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sTUFBTSxJQUFJLEVBQUUsQ0FBQztTQUNyQjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBdlRELDBDQXVUQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvYXBwbGljYXRpb24vc2VydmljZXMvU1BBUlFMU2FuaXRpemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU1BBUlFMIFF1ZXJ5IFNhbml0aXplclxuICogSW1wbGVtZW50cyBzZWN1cml0eSBjb250cm9scyB0byBwcmV2ZW50IGluamVjdGlvbiBhdHRhY2tzXG4gKi9cblxuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9jb3JlL1Jlc3VsdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNhbml0aXphdGlvblJlc3VsdCB7XG4gIHF1ZXJ5OiBzdHJpbmc7XG4gIG1vZGlmaWVkOiBib29sZWFuO1xuICB3YXJuaW5nczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBjbGFzcyBTUEFSUUxTYW5pdGl6ZXIge1xuICAvLyBEYW5nZXJvdXMgcGF0dGVybnMgdGhhdCBjb3VsZCBsZWFkIHRvIHNlY3VyaXR5IGlzc3Vlc1xuICBwcml2YXRlIHJlYWRvbmx5IGRhbmdlcm91c1BhdHRlcm5zID0gW1xuICAgIC8vIEZpbGUgc3lzdGVtIGFjY2VzcyBhdHRlbXB0c1xuICAgIC9GSUxFOi9naSxcbiAgICAvTE9BRFxccys8ZmlsZTovZ2ksXG5cbiAgICAvLyBDb21tYW5kIGluamVjdGlvbiBwYXR0ZXJuc1xuICAgIC87XFxzKkRFTEVURS9naSxcbiAgICAvO1xccypEUk9QL2dpLFxuICAgIC87XFxzKklOU0VSVC9naSxcbiAgICAvO1xccypDTEVBUi9naSxcblxuICAgIC8vIFBhdGggdHJhdmVyc2FsXG4gICAgL1xcLlxcLltcXC9cXFxcXS9nLFxuXG4gICAgLy8gTnVsbCBieXRlIGluamVjdGlvblxuICAgIC9cXHgwMC9nLFxuXG4gICAgLy8gU2NyaXB0IGluamVjdGlvblxuICAgIC88c2NyaXB0L2dpLFxuICAgIC9qYXZhc2NyaXB0Oi9naSxcbiAgICAvb25cXHcrXFxzKj0vZ2ksXG4gIF07XG5cbiAgLy8gQWxsb3dlZCBTUEFSUUwga2V5d29yZHNcbiAgcHJpdmF0ZSByZWFkb25seSBhbGxvd2VkS2V5d29yZHMgPSBuZXcgU2V0KFtcbiAgICBcIlNFTEVDVFwiLFxuICAgIFwiQ09OU1RSVUNUXCIsXG4gICAgXCJXSEVSRVwiLFxuICAgIFwiRklMVEVSXCIsXG4gICAgXCJPUFRJT05BTFwiLFxuICAgIFwiVU5JT05cIixcbiAgICBcIlBSRUZJWFwiLFxuICAgIFwiQkFTRVwiLFxuICAgIFwiRElTVElOQ1RcIixcbiAgICBcIlJFRFVDRURcIixcbiAgICBcIk9SREVSXCIsXG4gICAgXCJCWVwiLFxuICAgIFwiQVNDXCIsXG4gICAgXCJERVNDXCIsXG4gICAgXCJMSU1JVFwiLFxuICAgIFwiT0ZGU0VUXCIsXG4gICAgXCJHUkFQSFwiLFxuICAgIFwiQklORFwiLFxuICAgIFwiVkFMVUVTXCIsXG4gICAgXCJHUk9VUFwiLFxuICAgIFwiSEFWSU5HXCIsXG4gICAgXCJTRVJWSUNFXCIsXG4gICAgXCJNSU5VU1wiLFxuICAgIFwiRVhJU1RTXCIsXG4gICAgXCJOT1RcIixcbiAgICBcIklOXCIsXG4gICAgXCJBU1wiLFxuICBdKTtcblxuICAvKipcbiAgICogU2FuaXRpemUgU1BBUlFMIHF1ZXJ5IGZvciBzYWZlIGV4ZWN1dGlvblxuICAgKi9cbiAgc2FuaXRpemUocXVlcnk6IHN0cmluZyk6IFJlc3VsdDxTYW5pdGl6YXRpb25SZXN1bHQ+IHtcbiAgICBpZiAoIXF1ZXJ5IHx8IHF1ZXJ5LnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbChcIkVtcHR5IHF1ZXJ5IHByb3ZpZGVkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGxldCBzYW5pdGl6ZWQgPSBxdWVyeTtcbiAgICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcblxuICAgIC8vIENoZWNrIGZvciBkYW5nZXJvdXMgcGF0dGVybnNcbiAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgdGhpcy5kYW5nZXJvdXNQYXR0ZXJucykge1xuICAgICAgaWYgKHBhdHRlcm4udGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goXG4gICAgICAgICAgYERhbmdlcm91cyBwYXR0ZXJuIGRldGVjdGVkIGFuZCByZW1vdmVkOiAke3BhdHRlcm4uc291cmNlfWAsXG4gICAgICAgICk7XG4gICAgICAgIHNhbml0aXplZCA9IHNhbml0aXplZC5yZXBsYWNlKHBhdHRlcm4sIFwiXCIpO1xuICAgICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgcXVlcnkgc3RydWN0dXJlXG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVRdWVyeVN0cnVjdHVyZShzYW5pdGl6ZWQpO1xuICAgIGlmICh2YWxpZGF0aW9uLndhcm5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHdhcm5pbmdzLnB1c2goLi4udmFsaWRhdGlvbi53YXJuaW5ncyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlIHN0YXRlbWVudHNcbiAgICBpZiAodGhpcy5oYXNNdWx0aXBsZVN0YXRlbWVudHMoc2FuaXRpemVkKSkge1xuICAgICAgd2FybmluZ3MucHVzaChcbiAgICAgICAgXCJNdWx0aXBsZSBzdGF0ZW1lbnRzIGRldGVjdGVkIC0gb25seSBmaXJzdCB3aWxsIGJlIGV4ZWN1dGVkXCIsXG4gICAgICApO1xuICAgICAgc2FuaXRpemVkID0gdGhpcy5leHRyYWN0Rmlyc3RTdGF0ZW1lbnQoc2FuaXRpemVkKTtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBJUkkgcGF0dGVybnNcbiAgICBjb25zdCBpcmlWYWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUlSSXMoc2FuaXRpemVkKTtcbiAgICBpZiAoaXJpVmFsaWRhdGlvbi53YXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKC4uLmlyaVZhbGlkYXRpb24ud2FybmluZ3MpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHF1ZXJ5IGNvbXBsZXhpdHlcbiAgICBjb25zdCBjb21wbGV4aXR5ID0gdGhpcy5jaGVja0NvbXBsZXhpdHkoc2FuaXRpemVkKTtcbiAgICBpZiAoY29tcGxleGl0eS50b29Db21wbGV4KSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwoYFF1ZXJ5IHRvbyBjb21wbGV4OiAke2NvbXBsZXhpdHkucmVhc29ufWApO1xuICAgIH1cblxuICAgIHJldHVybiBSZXN1bHQub2soe1xuICAgICAgcXVlcnk6IHNhbml0aXplZCxcbiAgICAgIG1vZGlmaWVkLFxuICAgICAgd2FybmluZ3MsXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgcXVlcnkgc3RydWN0dXJlXG4gICAqL1xuICBwcml2YXRlIHZhbGlkYXRlUXVlcnlTdHJ1Y3R1cmUocXVlcnk6IHN0cmluZyk6IHtcbiAgICB2YWxpZDogYm9vbGVhbjtcbiAgICB3YXJuaW5nczogc3RyaW5nW107XG4gIH0ge1xuICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHVwcGVyUXVlcnkgPSBxdWVyeS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gQ2hlY2sgZm9yIHJlcXVpcmVkIGtleXdvcmRzXG4gICAgaWYgKCF1cHBlclF1ZXJ5LmluY2x1ZGVzKFwiU0VMRUNUXCIpICYmICF1cHBlclF1ZXJ5LmluY2x1ZGVzKFwiQ09OU1RSVUNUXCIpKSB7XG4gICAgICB3YXJuaW5ncy5wdXNoKFwiUXVlcnkgbXVzdCBiZSBTRUxFQ1Qgb3IgQ09OU1RSVUNUXCIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBiYWxhbmNlZCBicmFja2V0c1xuICAgIGNvbnN0IG9wZW5CcmFja2V0cyA9IChxdWVyeS5tYXRjaCgvXFx7L2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgY29uc3QgY2xvc2VCcmFja2V0cyA9IChxdWVyeS5tYXRjaCgvXFx9L2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgaWYgKG9wZW5CcmFja2V0cyAhPT0gY2xvc2VCcmFja2V0cykge1xuICAgICAgd2FybmluZ3MucHVzaChcIlVuYmFsYW5jZWQgYnJhY2tldHMgZGV0ZWN0ZWRcIik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGJhbGFuY2VkIHBhcmVudGhlc2VzXG4gICAgY29uc3Qgb3BlblBhcmVucyA9IChxdWVyeS5tYXRjaCgvXFwoL2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgY29uc3QgY2xvc2VQYXJlbnMgPSAocXVlcnkubWF0Y2goL1xcKS9nKSB8fCBbXSkubGVuZ3RoO1xuICAgIGlmIChvcGVuUGFyZW5zICE9PSBjbG9zZVBhcmVucykge1xuICAgICAgd2FybmluZ3MucHVzaChcIlVuYmFsYW5jZWQgcGFyZW50aGVzZXMgZGV0ZWN0ZWRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkOiB3YXJuaW5ncy5sZW5ndGggPT09IDAsXG4gICAgICB3YXJuaW5ncyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHF1ZXJ5IGNvbnRhaW5zIG11bHRpcGxlIHN0YXRlbWVudHNcbiAgICovXG4gIHByaXZhdGUgaGFzTXVsdGlwbGVTdGF0ZW1lbnRzKHF1ZXJ5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAvLyBMb29rIGZvciBtdWx0aXBsZSBxdWVyeSBrZXl3b3Jkc1xuICAgIGNvbnN0IHF1ZXJ5S2V5d29yZHMgPSBbXCJTRUxFQ1RcIiwgXCJDT05TVFJVQ1RcIiwgXCJJTlNFUlRcIiwgXCJERUxFVEVcIiwgXCJEUk9QXCJdO1xuICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICBmb3IgKGNvbnN0IGtleXdvcmQgb2YgcXVlcnlLZXl3b3Jkcykge1xuICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBcXFxcYiR7a2V5d29yZH1cXFxcYmAsIFwiZ2lcIik7XG4gICAgICBjb25zdCBtYXRjaGVzID0gcXVlcnkubWF0Y2gocmVnZXgpO1xuICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgY291bnQgKz0gbWF0Y2hlcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50ID4gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0IGZpcnN0IHN0YXRlbWVudCBmcm9tIHF1ZXJ5XG4gICAqL1xuICBwcml2YXRlIGV4dHJhY3RGaXJzdFN0YXRlbWVudChxdWVyeTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBGaW5kIHRoZSBlbmQgb2YgdGhlIGZpcnN0IGNvbXBsZXRlIHN0YXRlbWVudFxuICAgIGxldCBkZXB0aCA9IDA7XG4gICAgbGV0IGluU3RyaW5nID0gZmFsc2U7XG4gICAgbGV0IHN0cmluZ0NoYXIgPSBcIlwiO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWVyeS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY2hhciA9IHF1ZXJ5W2ldO1xuXG4gICAgICAvLyBIYW5kbGUgc3RyaW5nIGxpdGVyYWxzXG4gICAgICBpZiAoKGNoYXIgPT09ICdcIicgfHwgY2hhciA9PT0gXCInXCIpICYmIHF1ZXJ5W2kgLSAxXSAhPT0gXCJcXFxcXCIpIHtcbiAgICAgICAgaWYgKCFpblN0cmluZykge1xuICAgICAgICAgIGluU3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzdHJpbmdDaGFyID0gY2hhcjtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09PSBzdHJpbmdDaGFyKSB7XG4gICAgICAgICAgaW5TdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWluU3RyaW5nKSB7XG4gICAgICAgIGlmIChjaGFyID09PSBcIntcIikgZGVwdGgrKztcbiAgICAgICAgaWYgKGNoYXIgPT09IFwifVwiKSBkZXB0aC0tO1xuXG4gICAgICAgIC8vIENoZWNrIGlmIHdlJ3ZlIGNvbXBsZXRlZCBhIHN0YXRlbWVudFxuICAgICAgICBpZiAoZGVwdGggPT09IDAgJiYgaSA+IDApIHtcbiAgICAgICAgICAvLyBMb29rIGZvciBuZXh0IHF1ZXJ5IGtleXdvcmRcbiAgICAgICAgICBjb25zdCByZW1haW5pbmcgPSBxdWVyeS5zdWJzdHJpbmcoaSArIDEpO1xuICAgICAgICAgIGlmICgvXlxccyooU0VMRUNUfENPTlNUUlVDVHxJTlNFUlR8REVMRVRFKS9pLnRlc3QocmVtYWluaW5nKSkge1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5LnN1YnN0cmluZygwLCBpICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIElSSSBwYXR0ZXJucyBpbiBxdWVyeVxuICAgKi9cbiAgcHJpdmF0ZSB2YWxpZGF0ZUlSSXMocXVlcnk6IHN0cmluZyk6IHsgdmFsaWQ6IGJvb2xlYW47IHdhcm5pbmdzOiBzdHJpbmdbXSB9IHtcbiAgICBjb25zdCB3YXJuaW5nczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIEV4dHJhY3QgSVJJcyBmcm9tIHF1ZXJ5XG4gICAgY29uc3QgaXJpUGF0dGVybiA9IC88KFtePl0rKT4vZztcbiAgICBsZXQgbWF0Y2g7XG5cbiAgICB3aGlsZSAoKG1hdGNoID0gaXJpUGF0dGVybi5leGVjKHF1ZXJ5KSkgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGlyaSA9IG1hdGNoWzFdO1xuXG4gICAgICAvLyBDaGVjayBmb3Igc3VzcGljaW91cyBJUkkgcGF0dGVybnNcbiAgICAgIGlmIChpcmkuaW5jbHVkZXMoXCIuLlwiKSB8fCBpcmkuaW5jbHVkZXMoXCJcXFxcXCIpKSB7XG4gICAgICAgIHdhcm5pbmdzLnB1c2goYFN1c3BpY2lvdXMgSVJJIGRldGVjdGVkOiAke2lyaX1gKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2hlY2sgZm9yIGxvY2FsIGZpbGUgYWNjZXNzXG4gICAgICBpZiAoaXJpLnN0YXJ0c1dpdGgoXCJmaWxlOlwiKSkge1xuICAgICAgICB3YXJuaW5ncy5wdXNoKGBGaWxlIFVSSSBub3QgYWxsb3dlZDogJHtpcml9YCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIElSSSBsZW5ndGhcbiAgICAgIGlmIChpcmkubGVuZ3RoID4gMjA0OCkge1xuICAgICAgICB3YXJuaW5ncy5wdXNoKGBJUkkgdG9vIGxvbmc6ICR7aXJpLnN1YnN0cmluZygwLCA1MCl9Li4uYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkOiB3YXJuaW5ncy5sZW5ndGggPT09IDAsXG4gICAgICB3YXJuaW5ncyxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHF1ZXJ5IGNvbXBsZXhpdHkgdG8gcHJldmVudCBEb1NcbiAgICovXG4gIHByaXZhdGUgY2hlY2tDb21wbGV4aXR5KHF1ZXJ5OiBzdHJpbmcpOiB7XG4gICAgdG9vQ29tcGxleDogYm9vbGVhbjtcbiAgICByZWFzb24/OiBzdHJpbmc7XG4gIH0ge1xuICAgIC8vIENoZWNrIHF1ZXJ5IGxlbmd0aFxuICAgIGlmIChxdWVyeS5sZW5ndGggPiAxMDAwMCkge1xuICAgICAgcmV0dXJuIHsgdG9vQ29tcGxleDogdHJ1ZSwgcmVhc29uOiBcIlF1ZXJ5IGV4Y2VlZHMgbWF4aW11bSBsZW5ndGhcIiB9O1xuICAgIH1cblxuICAgIC8vIENvdW50IHRyaXBsZSBwYXR0ZXJuc1xuICAgIGNvbnN0IHRyaXBsZVBhdHRlcm5zID0gKHF1ZXJ5Lm1hdGNoKC9cXC5cXHMqXFw/L2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgaWYgKHRyaXBsZVBhdHRlcm5zID4gMTAwKSB7XG4gICAgICByZXR1cm4geyB0b29Db21wbGV4OiB0cnVlLCByZWFzb246IFwiVG9vIG1hbnkgdHJpcGxlIHBhdHRlcm5zXCIgfTtcbiAgICB9XG5cbiAgICAvLyBDb3VudCBVTklPTiBvcGVyYXRpb25zXG4gICAgY29uc3QgdW5pb25zID0gKHF1ZXJ5Lm1hdGNoKC9cXGJVTklPTlxcYi9naSkgfHwgW10pLmxlbmd0aDtcbiAgICBpZiAodW5pb25zID4gMTApIHtcbiAgICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IHRydWUsIHJlYXNvbjogXCJUb28gbWFueSBVTklPTiBvcGVyYXRpb25zXCIgfTtcbiAgICB9XG5cbiAgICAvLyBDb3VudCBuZXN0ZWQgc3VicXVlcmllc1xuICAgIGNvbnN0IHN1YnF1ZXJpZXMgPSAocXVlcnkubWF0Y2goL1xce1tefV0qU0VMRUNUL2dpKSB8fCBbXSkubGVuZ3RoO1xuICAgIGlmIChzdWJxdWVyaWVzID4gNSkge1xuICAgICAgcmV0dXJuIHsgdG9vQ29tcGxleDogdHJ1ZSwgcmVhc29uOiBcIlRvbyBtYW55IG5lc3RlZCBzdWJxdWVyaWVzXCIgfTtcbiAgICB9XG5cbiAgICAvLyBDb3VudCBGSUxURVIgb3BlcmF0aW9uc1xuICAgIGNvbnN0IGZpbHRlcnMgPSAocXVlcnkubWF0Y2goL1xcYkZJTFRFUlxcYi9naSkgfHwgW10pLmxlbmd0aDtcbiAgICBpZiAoZmlsdGVycyA+IDIwKSB7XG4gICAgICByZXR1cm4geyB0b29Db21wbGV4OiB0cnVlLCByZWFzb246IFwiVG9vIG1hbnkgRklMVEVSIG9wZXJhdGlvbnNcIiB9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IGZhbHNlIH07XG4gIH1cblxuICAvKipcbiAgICogRXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyBpbiBsaXRlcmFsc1xuICAgKi9cbiAgZXNjYXBlU3RyaW5nTGl0ZXJhbCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgIC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIilcbiAgICAgIC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJylcbiAgICAgIC5yZXBsYWNlKC8nL2csIFwiXFxcXCdcIilcbiAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgLnJlcGxhY2UoL1xcci9nLCBcIlxcXFxyXCIpXG4gICAgICAucmVwbGFjZSgvXFx0L2csIFwiXFxcXHRcIik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHNhZmUgSVJJIGZyb20gdXNlciBpbnB1dFxuICAgKi9cbiAgY3JlYXRlU2FmZUlSSShpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBSZW1vdmUgZGFuZ2Vyb3VzIGNoYXJhY3RlcnNcbiAgICBjb25zdCBzYWZlID0gaW5wdXRcbiAgICAgIC5yZXBsYWNlKC9bPD4nXCJgO10vZywgXCJcIilcbiAgICAgIC5yZXBsYWNlKC9cXHMrL2csIFwiX1wiKVxuICAgICAgLnJlcGxhY2UoL1teXFx3Oi8tXS9nLCBcIlwiKTtcblxuICAgIC8vIEVuc3VyZSB2YWxpZCBJUkkgZm9ybWF0XG4gICAgaWYgKCFzYWZlLmluY2x1ZGVzKFwiOlwiKSkge1xuICAgICAgcmV0dXJuIGBleDoke3NhZmV9YDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2FmZTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9