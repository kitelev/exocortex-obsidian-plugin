fd09cb2ace76a7fe5b397a30d202defc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const TaskId_1 = require("../value-objects/TaskId");
const Priority_1 = require("../value-objects/Priority");
const TaskStatus_1 = require("../value-objects/TaskStatus");
const AssetId_1 = require("../value-objects/AssetId");
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
/**
 * Domain entity representing a Task in the Exocortex system
 * Follows domain-driven design principles with business rules
 */
class Task extends Entity_1.Entity {
    constructor(props) {
        super(props);
    }
    static create(params) {
        var _a;
        // Validate required fields
        if (!params.title || params.title.trim().length === 0) {
            return Result_1.Result.fail('Task title cannot be empty');
        }
        if (params.title.length > 200) {
            return Result_1.Result.fail('Task title cannot exceed 200 characters');
        }
        if (params.estimatedHours !== undefined && params.estimatedHours < 0) {
            return Result_1.Result.fail('Estimated hours cannot be negative');
        }
        if (params.dueDate && params.dueDate < new Date()) {
            // Only warn for past due dates, don't fail creation
            console.warn('Task created with past due date:', params.dueDate);
        }
        const props = {
            id: TaskId_1.TaskId.generate(),
            title: params.title.trim(),
            description: (_a = params.description) === null || _a === void 0 ? void 0 : _a.trim(),
            priority: params.priority || Priority_1.Priority.medium(),
            status: params.status || TaskStatus_1.TaskStatus.todo(),
            projectId: params.projectId,
            dueDate: params.dueDate,
            estimatedHours: params.estimatedHours,
            tags: params.tags || [],
            createdAt: new Date(),
            updatedAt: new Date()
        };
        return Result_1.Result.ok(new Task(props));
    }
    // Getters
    getId() {
        return this.props.id;
    }
    getTitle() {
        return this.props.title;
    }
    getDescription() {
        return this.props.description;
    }
    getPriority() {
        return this.props.priority;
    }
    getStatus() {
        return this.props.status;
    }
    getProjectId() {
        return this.props.projectId;
    }
    getDueDate() {
        return this.props.dueDate;
    }
    getEstimatedHours() {
        return this.props.estimatedHours;
    }
    getTags() {
        return [...this.props.tags];
    }
    getCreatedAt() {
        return this.props.createdAt;
    }
    getUpdatedAt() {
        return this.props.updatedAt;
    }
    getCompletedAt() {
        return this.props.completedAt;
    }
    // Override equals to use TaskId comparison
    equals(object) {
        if (object === null || object === undefined) {
            return false;
        }
        if (this === object) {
            return true;
        }
        if (!(object instanceof Task)) {
            return false;
        }
        return this.props.id.equals(object.props.id);
    }
    // Business methods
    updateTitle(title) {
        if (!title || title.trim().length === 0) {
            return Result_1.Result.fail('Task title cannot be empty');
        }
        if (title.length > 200) {
            return Result_1.Result.fail('Task title cannot exceed 200 characters');
        }
        this.props.title = title.trim();
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    updateDescription(description) {
        this.props.description = description === null || description === void 0 ? void 0 : description.trim();
        this.props.updatedAt = new Date();
    }
    updatePriority(priority) {
        this.props.priority = priority;
        this.props.updatedAt = new Date();
    }
    updateStatus(status) {
        if (!this.props.status.canTransitionTo(status)) {
            return Result_1.Result.fail(`Cannot transition from ${this.props.status.toString()} to ${status.toString()}`);
        }
        this.props.status = status;
        this.props.updatedAt = new Date();
        // Set completion date when task is completed
        if (status.isCompleted()) {
            this.props.completedAt = new Date();
        }
        else if (this.props.completedAt) {
            // Clear completion date if task is reopened
            this.props.completedAt = undefined;
        }
        return Result_1.Result.ok();
    }
    assignToProject(projectId) {
        this.props.projectId = projectId;
        this.props.updatedAt = new Date();
    }
    removeFromProject() {
        this.props.projectId = undefined;
        this.props.updatedAt = new Date();
    }
    setDueDate(dueDate) {
        this.props.dueDate = dueDate;
        this.props.updatedAt = new Date();
    }
    removeDueDate() {
        this.props.dueDate = undefined;
        this.props.updatedAt = new Date();
    }
    setEstimatedHours(hours) {
        if (hours < 0) {
            return Result_1.Result.fail('Estimated hours cannot be negative');
        }
        this.props.estimatedHours = hours;
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    addTag(tag) {
        const normalizedTag = tag.trim().toLowerCase();
        if (normalizedTag && !this.props.tags.includes(normalizedTag)) {
            this.props.tags.push(normalizedTag);
            this.props.updatedAt = new Date();
        }
    }
    removeTag(tag) {
        const normalizedTag = tag.trim().toLowerCase();
        const index = this.props.tags.indexOf(normalizedTag);
        if (index > -1) {
            this.props.tags.splice(index, 1);
            this.props.updatedAt = new Date();
        }
    }
    hasTag(tag) {
        return this.props.tags.includes(tag.trim().toLowerCase());
    }
    // Query methods
    isOverdue() {
        return this.props.dueDate !== undefined &&
            this.props.dueDate < new Date() &&
            this.props.status.isActive();
    }
    isDueToday() {
        if (!this.props.dueDate)
            return false;
        const today = new Date();
        const due = this.props.dueDate;
        return today.getFullYear() === due.getFullYear() &&
            today.getMonth() === due.getMonth() &&
            today.getDate() === due.getDate();
    }
    isHighPriority() {
        return this.props.priority.isHigherThan(Priority_1.Priority.medium());
    }
    // Serialization methods
    toFrontmatter() {
        const frontmatter = {
            'exo__Task_uid': this.props.id.toString(),
            'exo__Task_title': this.props.title,
            'exo__Task_priority': this.props.priority.toString(),
            'exo__Task_status': this.props.status.toString(),
            'exo__Task_createdAt': this.props.createdAt.toISOString(),
            'exo__Task_updatedAt': this.props.updatedAt.toISOString()
        };
        if (this.props.description) {
            frontmatter['exo__Task_description'] = this.props.description;
        }
        if (this.props.projectId) {
            frontmatter['exo__Effort_parent'] = `[[${this.props.projectId.toString()}]]`;
        }
        if (this.props.dueDate) {
            frontmatter['exo__Task_dueDate'] = this.props.dueDate.toISOString().split('T')[0];
        }
        if (this.props.estimatedHours !== undefined) {
            frontmatter['exo__Task_estimatedHours'] = this.props.estimatedHours;
        }
        if (this.props.tags.length > 0) {
            frontmatter['exo__Task_tags'] = this.props.tags;
        }
        if (this.props.completedAt) {
            frontmatter['exo__Task_completedAt'] = this.props.completedAt.toISOString();
        }
        return frontmatter;
    }
    static fromFrontmatter(frontmatter, fileName) {
        try {
            const idResult = TaskId_1.TaskId.create(frontmatter['exo__Task_uid'] || TaskId_1.TaskId.generate().toString());
            const id = idResult.isSuccess ? idResult.getValue() : TaskId_1.TaskId.generate();
            const title = frontmatter['exo__Task_title'] || fileName.replace('.md', '');
            const description = frontmatter['exo__Task_description'];
            const priorityResult = Priority_1.Priority.create(frontmatter['exo__Task_priority'] || 'medium');
            const priority = priorityResult.isSuccess ? priorityResult.getValue() : Priority_1.Priority.medium();
            const statusResult = TaskStatus_1.TaskStatus.create(frontmatter['exo__Task_status'] || 'todo');
            const status = statusResult.isSuccess ? statusResult.getValue() : TaskStatus_1.TaskStatus.todo();
            let projectId;
            const parentValue = frontmatter['exo__Effort_parent'];
            if (parentValue) {
                const cleanParent = parentValue.toString().replace(/\[\[|\]\]/g, '');
                const projectIdResult = AssetId_1.AssetId.create(cleanParent);
                if (projectIdResult.isSuccess) {
                    projectId = projectIdResult.getValue();
                }
            }
            const dueDate = frontmatter['exo__Task_dueDate'] ? new Date(frontmatter['exo__Task_dueDate']) : undefined;
            const estimatedHours = frontmatter['exo__Task_estimatedHours'];
            const tags = Array.isArray(frontmatter['exo__Task_tags']) ? frontmatter['exo__Task_tags'] : [];
            const createdAt = frontmatter['exo__Task_createdAt']
                ? new Date(frontmatter['exo__Task_createdAt'])
                : new Date();
            const result = Task.create({
                title,
                description,
                priority,
                status,
                projectId,
                dueDate,
                estimatedHours,
                tags
            });
            if (result.isSuccess) {
                const task = result.getValue();
                // Update timestamps and completion date
                task.props.id = id;
                task.props.createdAt = createdAt;
                if (frontmatter['exo__Task_completedAt']) {
                    task.props.completedAt = new Date(frontmatter['exo__Task_completedAt']);
                }
                return task;
            }
            else {
                console.warn('Failed to create task from frontmatter:', result.error);
            }
            return null;
        }
        catch (error) {
            console.warn('Failed to create task from frontmatter:', error);
            return null;
        }
    }
    /**
     * Generates markdown content for the task
     */
    toMarkdown() {
        let content = `# ${this.props.title}\n\n`;
        if (this.props.description) {
            content += `${this.props.description}\n\n`;
        }
        content += `## Task Details\n\n`;
        content += `${this.props.status.toMarkdownCheckbox()} **Status**: ${this.props.status.toString()}\n`;
        content += `- **Priority**: ${this.props.priority.toString()}\n`;
        if (this.props.dueDate) {
            content += `- **Due Date**: ${this.props.dueDate.toISOString().split('T')[0]}\n`;
        }
        if (this.props.estimatedHours) {
            content += `- **Estimated Hours**: ${this.props.estimatedHours}\n`;
        }
        if (this.props.projectId) {
            content += `- **Project**: [[${this.props.projectId.toString()}]]\n`;
        }
        if (this.props.tags.length > 0) {
            content += `- **Tags**: ${this.props.tags.map(tag => `#${tag}`).join(' ')}\n`;
        }
        content += `\n---\n\n`;
        content += `*Created: ${this.props.createdAt.toISOString()}*\n`;
        content += `*Updated: ${this.props.updatedAt.toISOString()}*\n`;
        if (this.props.completedAt) {
            content += `*Completed: ${this.props.completedAt.toISOString()}*\n`;
        }
        return content;
    }
}
exports.Task = Task;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,