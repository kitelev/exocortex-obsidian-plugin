{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/adapters/ObsidianUIAdapter.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/adapters/ObsidianUIAdapter.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { IUIAdapter } from \"../../application/ports/IUIAdapter\";\n\n/**\n * Obsidian implementation of UI adapter\n */\nexport class ObsidianUIAdapter implements IUIAdapter {\n  constructor(private app: App) {}\n\n  getDisplayLabel(file: TFile): string {\n    const frontmatter = this.app.metadataCache.getFileCache(file)?.frontmatter;\n    return (\n      frontmatter?.[\"exo__Asset_title\"] ||\n      frontmatter?.[\"title\"] ||\n      file.basename\n    );\n  }\n\n  extractFrontmatterData(file: TFile, key: string): any {\n    const cache = this.app.metadataCache.getFileCache(file);\n    return cache?.frontmatter?.[key];\n  }\n\n  createInternalLink(container: HTMLElement, text: string, path: string): void {\n    const link = container.createEl(\"a\", {\n      text,\n      cls: \"internal-link\",\n      href: `#`,\n    });\n\n    link.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      this.app.workspace.openLinkText(path, \"\", false);\n    });\n  }\n\n  createElement(\n    parent: HTMLElement,\n    tag: string,\n    options?: {\n      cls?: string;\n      text?: string;\n      attrs?: Record<string, string>;\n    },\n  ): HTMLElement {\n    const element = parent.createEl(tag as keyof HTMLElementTagNameMap, {\n      cls: options?.cls,\n      text: options?.text,\n      attr: options?.attrs,\n    });\n    return element;\n  }\n\n  cleanClassName(className: any): string {\n    if (!className) return \"\";\n\n    let clean = String(className);\n\n    // Remove namespace prefixes\n    if (clean.includes(\"#\")) {\n      clean = clean.split(\"#\").pop() || clean;\n    }\n\n    // Replace underscores with spaces for display\n    clean = clean.replace(/_/g, \" \");\n\n    // Capitalize first letter of each word\n    clean = clean.replace(/\\b\\w/g, (l) => l.toUpperCase());\n\n    return clean;\n  }\n\n  groupFilesByClass(files: TFile[]): Map<string, TFile[]> {\n    const groups = new Map<string, TFile[]>();\n\n    files.forEach((file) => {\n      const className =\n        this.extractFrontmatterData(file, \"exo__Instance_class\") ||\n        \"Unclassified\";\n      const cleanName = this.cleanClassName(className);\n\n      if (!groups.has(cleanName)) {\n        groups.set(cleanName, []);\n      }\n      groups.get(cleanName)!.push(file);\n    });\n\n    return groups;\n  }\n\n  filterFilesByClass(files: TFile[], className?: string): TFile[] {\n    if (!className) return files;\n\n    return files.filter((file) => {\n      const fileClass = this.extractFrontmatterData(\n        file,\n        \"exo__Instance_class\",\n      );\n      return this.cleanClassName(fileClass) === className;\n    });\n  }\n\n  applyResultLimit(files: TFile[], limit?: number): TFile[] {\n    return limit ? files.slice(0, limit) : files;\n  }\n}\n"],"version":3}