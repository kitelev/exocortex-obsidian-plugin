21f181820c7d88ddf6826ec8463797b7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianVaultAdapter = void 0;
const obsidian_1 = require("obsidian");
/**
 * Adapter for Obsidian Vault API
 * Implements the IVaultAdapter interface using Obsidian's Vault
 */
class ObsidianVaultAdapter {
    constructor(vault, metadataCache) {
        this.vault = vault;
        this.metadataCache = metadataCache;
    }
    async create(path, content) {
        await this.vault.create(path, content);
    }
    async read(path) {
        const file = this.vault.getAbstractFileByPath(path);
        if (!file || !(file instanceof obsidian_1.TFile)) {
            throw new Error(`File not found: ${path}`);
        }
        return await this.vault.read(file);
    }
    async update(path, content) {
        const file = this.vault.getAbstractFileByPath(path);
        if (!file || !(file instanceof obsidian_1.TFile)) {
            throw new Error(`File not found: ${path}`);
        }
        await this.vault.modify(file, content);
    }
    async delete(path) {
        const file = this.vault.getAbstractFileByPath(path);
        if (!file) {
            throw new Error(`File not found: ${path}`);
        }
        await this.vault.delete(file);
    }
    async exists(path) {
        const file = this.vault.getAbstractFileByPath(path);
        return file !== null;
    }
    async list(pattern) {
        const files = this.vault.getFiles();
        if (!pattern) {
            return files.map((f) => f.path);
        }
        // Simple pattern matching (could be enhanced with glob)
        const regex = new RegExp(pattern);
        return files.filter((f) => regex.test(f.path)).map((f) => f.path);
    }
    async getMetadata(path) {
        const file = this.vault.getAbstractFileByPath(path);
        if (!file || !(file instanceof obsidian_1.TFile)) {
            return null;
        }
        const cache = this.metadataCache.getFileCache(file);
        return cache?.frontmatter || null;
    }
    async getFiles() {
        return this.vault.getFiles();
    }
    async getFileMetadata(file) {
        if (!(file instanceof obsidian_1.TFile)) {
            return null;
        }
        const cache = this.metadataCache.getFileCache(file);
        return cache || null;
    }
}
exports.ObsidianVaultAdapter = ObsidianVaultAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2luZnJhc3RydWN0dXJlL2FkYXB0ZXJzL09ic2lkaWFuVmF1bHRBZGFwdGVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF1RDtBQUd2RDs7O0dBR0c7QUFDSCxNQUFhLG9CQUFvQjtJQUMvQixZQUNtQixLQUFZLEVBQ1osYUFBNEI7UUFENUIsVUFBSyxHQUFMLEtBQUssQ0FBTztRQUNaLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQzVDLENBQUM7SUFFSixLQUFLLENBQUMsTUFBTSxDQUFDLElBQVksRUFBRSxPQUFlO1FBQ3hDLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQVk7UUFDckIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksZ0JBQUssQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFDLENBQUM7U0FDNUM7UUFDRCxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBWSxFQUFFLE9BQWU7UUFDeEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksZ0JBQUssQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFDLENBQUM7U0FDNUM7UUFDRCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFZO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFDLENBQUM7U0FDNUM7UUFDRCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQVk7UUFDdkIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxPQUFPLElBQUksS0FBSyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDekIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakM7UUFFRCx3REFBd0Q7UUFDeEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLElBQVk7UUFDNUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksZ0JBQUssQ0FBQyxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssRUFBRSxXQUFXLElBQUksSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxJQUFTO1FBQzdCLElBQUksQ0FBQyxDQUFDLElBQUksWUFBWSxnQkFBSyxDQUFDLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BELE9BQU8sS0FBSyxJQUFJLElBQUksQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUF4RUQsb0RBd0VDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9pbmZyYXN0cnVjdHVyZS9hZGFwdGVycy9PYnNpZGlhblZhdWx0QWRhcHRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYXVsdCwgTWV0YWRhdGFDYWNoZSwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IElWYXVsdEFkYXB0ZXIgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vcG9ydHMvSVZhdWx0QWRhcHRlclwiO1xuXG4vKipcbiAqIEFkYXB0ZXIgZm9yIE9ic2lkaWFuIFZhdWx0IEFQSVxuICogSW1wbGVtZW50cyB0aGUgSVZhdWx0QWRhcHRlciBpbnRlcmZhY2UgdXNpbmcgT2JzaWRpYW4ncyBWYXVsdFxuICovXG5leHBvcnQgY2xhc3MgT2JzaWRpYW5WYXVsdEFkYXB0ZXIgaW1wbGVtZW50cyBJVmF1bHRBZGFwdGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSB2YXVsdDogVmF1bHQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBtZXRhZGF0YUNhY2hlOiBNZXRhZGF0YUNhY2hlLFxuICApIHt9XG5cbiAgYXN5bmMgY3JlYXRlKHBhdGg6IHN0cmluZywgY29udGVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy52YXVsdC5jcmVhdGUocGF0aCwgY29udGVudCk7XG4gIH1cblxuICBhc3luYyByZWFkKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgZmlsZSA9IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xuICAgIGlmICghZmlsZSB8fCAhKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSBub3QgZm91bmQ6ICR7cGF0aH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMudmF1bHQucmVhZChmaWxlKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShwYXRoOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGZpbGUgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcbiAgICBpZiAoIWZpbGUgfHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGUgbm90IGZvdW5kOiAke3BhdGh9YCk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnQpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlKHBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGZpbGUgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmlsZSBub3QgZm91bmQ6ICR7cGF0aH1gKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy52YXVsdC5kZWxldGUoZmlsZSk7XG4gIH1cblxuICBhc3luYyBleGlzdHMocGF0aDogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgZmlsZSA9IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xuICAgIHJldHVybiBmaWxlICE9PSBudWxsO1xuICB9XG5cbiAgYXN5bmMgbGlzdChwYXR0ZXJuPzogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy52YXVsdC5nZXRGaWxlcygpO1xuICAgIGlmICghcGF0dGVybikge1xuICAgICAgcmV0dXJuIGZpbGVzLm1hcCgoZikgPT4gZi5wYXRoKTtcbiAgICB9XG5cbiAgICAvLyBTaW1wbGUgcGF0dGVybiBtYXRjaGluZyAoY291bGQgYmUgZW5oYW5jZWQgd2l0aCBnbG9iKVxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKChmKSA9PiByZWdleC50ZXN0KGYucGF0aCkpLm1hcCgoZikgPT4gZi5wYXRoKTtcbiAgfVxuXG4gIGFzeW5jIGdldE1ldGFkYXRhKHBhdGg6IHN0cmluZyk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgYW55PiB8IG51bGw+IHtcbiAgICBjb25zdCBmaWxlID0gdGhpcy52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG4gICAgaWYgKCFmaWxlIHx8ICEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgIHJldHVybiBjYWNoZT8uZnJvbnRtYXR0ZXIgfHwgbnVsbDtcbiAgfVxuXG4gIGFzeW5jIGdldEZpbGVzKCk6IFByb21pc2U8YW55W10+IHtcbiAgICByZXR1cm4gdGhpcy52YXVsdC5nZXRGaWxlcygpO1xuICB9XG5cbiAgYXN5bmMgZ2V0RmlsZU1ldGFkYXRhKGZpbGU6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgIHJldHVybiBjYWNoZSB8fCBudWxsO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=