097e4d09cea292aca7b9f4823556fc4b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicBacklinksService = void 0;
const Result_1 = require("../../domain/core/Result");
class DynamicBacklinksService {
    constructor(vaultAdapter, uiAdapter) {
        this.vaultAdapter = vaultAdapter;
        this.uiAdapter = uiAdapter;
    }
    async discoverPropertyBasedBacklinks(targetFile, options = {}) {
        try {
            const propertyBacklinks = new Map();
            // Scan all markdown files in the vault
            const allFiles = await this.vaultAdapter.getFiles();
            for (const file of allFiles) {
                if (file.path === targetFile.path)
                    continue; // Skip self-references
                const metadata = await this.vaultAdapter.getFileMetadata(file);
                if (!metadata)
                    continue;
                // Filter by class if specified
                if (options.filterByClass) {
                    const instanceClass = this.uiAdapter.cleanClassName(metadata["exo__Instance_class"]);
                    if (instanceClass !== options.filterByClass)
                        continue;
                }
                // Check each frontmatter property for references to target file
                for (const [propertyName, value] of Object.entries(metadata)) {
                    // Skip excluded properties
                    if (options.excludeProperties?.includes(propertyName))
                        continue;
                    if (await this.isReferencingTarget(value, targetFile)) {
                        if (!propertyBacklinks.has(propertyName)) {
                            propertyBacklinks.set(propertyName, []);
                        }
                        propertyBacklinks.get(propertyName).push(file);
                    }
                }
            }
            // Convert to result format and apply limits
            const results = [];
            for (const [propertyName, files] of propertyBacklinks.entries()) {
                const limitedFiles = options.maxResultsPerProperty
                    ? files.slice(0, options.maxResultsPerProperty)
                    : files;
                results.push({
                    propertyName,
                    referencingFiles: limitedFiles,
                });
            }
            // Sort by property name for consistent ordering
            results.sort((a, b) => a.propertyName.localeCompare(b.propertyName));
            return Result_1.Result.ok(results);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to discover backlinks: ${error}`);
        }
    }
    async isReferencingTarget(value, targetFile) {
        if (!value)
            return false;
        // Handle arrays
        if (Array.isArray(value)) {
            for (const item of value) {
                if (await this.isReferencingTarget(item, targetFile)) {
                    return true;
                }
            }
            return false;
        }
        // Convert to string and check various reference formats
        const strValue = value.toString();
        const targetFileName = targetFile.basename || targetFile.name?.replace(/\.[^/.]+$/, "") || "";
        const targetPath = targetFile.path || targetFile.name || "";
        // Get target file's UUID for UUID-based matching
        const targetMetadata = await this.vaultAdapter.getFileMetadata(targetFile);
        const targetUuid = targetMetadata?.["exo__Asset_uid"] || null;
        // Direct basename match
        if (strValue === targetFileName)
            return true;
        // Wiki-link format exact match
        if (strValue.includes(`[[${targetFileName}]]`))
            return true;
        // Wiki-link with display text
        if (strValue.includes(`[[${targetFileName}|`))
            return true;
        // Path-based matching for references like [[Area - My]]
        if (strValue.startsWith("[[") && strValue.endsWith("]]")) {
            const linkText = strValue.slice(2, -2).split("|")[0]; // Remove [[ ]] and display text
            // Try to resolve the link to see if it points to our target file
            if (this.vaultAdapter.resolveLinkToFile) {
                try {
                    const resolvedFile = await this.vaultAdapter.resolveLinkToFile(linkText);
                    if (resolvedFile && resolvedFile.path === targetFile.path) {
                        return true;
                    }
                }
                catch (error) {
                    // Ignore resolution errors and fall back to text matching
                }
            }
            if (linkText === targetFileName)
                return true;
            // Also check if the link text partially matches the target filename
            if (targetFileName.includes(linkText) ||
                linkText.includes(targetFileName))
                return true;
        }
        // UUID-based matching
        if (targetUuid && strValue.includes(targetUuid))
            return true;
        // Partial match within string (for composite references)
        if (strValue.includes(targetFileName))
            return true;
        return false;
    }
    cleanClassName(className) {
        if (!className)
            return "";
        const str = Array.isArray(className) ? className[0] : className;
        return str?.toString().replace(/\[\[|\]\]/g, "") || "";
    }
}
exports.DynamicBacklinksService = DynamicBacklinksService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,