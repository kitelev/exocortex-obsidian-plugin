0f6784392e94a7797f4c5d0a99f4e77d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorHandlingUtils = void 0;
const obsidian_1 = require("obsidian");
/**
 * Common error handling utilities to eliminate duplication
 * Implements DRY principle for error processing and user notifications
 */
class ErrorHandlingUtils {
    /**
     * Handle repository operation errors with consistent logging and user notification
     */
    static handleRepositoryError(operation, error, context) {
        const message = `${operation} failed: ${error.message}`;
        console.error(message, { error, context });
        new obsidian_1.Notice(`Error: ${message}`, 5000);
    }
    /**
     * Handle rendering errors with graceful degradation
     */
    static handleRenderingError(component, error, container, fallbackMessage) {
        const message = `${component} rendering failed: ${error.message}`;
        console.error(message, error);
        if (container) {
            container.empty();
            container.createEl("div", {
                text: fallbackMessage || "Content could not be displayed",
                cls: "exocortex-error-fallback",
            });
        }
        new obsidian_1.Notice(`Rendering error in ${component}`, 3000);
    }
    /**
     * Handle validation errors with user-friendly messages
     */
    static handleValidationError(field, value, expectedFormat) {
        const message = expectedFormat
            ? `Invalid ${field}: "${value}". Expected format: ${expectedFormat}`
            : `Invalid ${field}: "${value}"`;
        console.warn(message);
        new obsidian_1.Notice(message, 4000);
    }
    /**
     * Safe async operation wrapper with error handling
     */
    static async safeAsync(operation, errorContext, fallback) {
        try {
            return await operation();
        }
        catch (error) {
            console.error(`${errorContext} failed:`, error);
            if (fallback !== undefined) {
                return fallback;
            }
            return undefined;
        }
    }
    /**
     * Safe sync operation wrapper with error handling
     */
    static safeSync(operation, errorContext, fallback) {
        try {
            return operation();
        }
        catch (error) {
            console.error(`${errorContext} failed:`, error);
            if (fallback !== undefined) {
                return fallback;
            }
            return undefined;
        }
    }
    /**
     * Create standardized error objects
     */
    static createError(code, message, context) {
        const error = new Error(message);
        error.code = code;
        error.context = context;
        return error;
    }
    /**
     * Check if error is of specific type
     */
    static isErrorOfType(error, expectedCode) {
        return error?.code === expectedCode;
    }
    /**
     * Format error for logging with context
     */
    static formatErrorForLogging(error, context) {
        return {
            message: error.message,
            stack: error.stack,
            name: error.name,
            code: error.code,
            context,
            timestamp: new Date().toISOString(),
        };
    }
}
exports.ErrorHandlingUtils = ErrorHandlingUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3NoYXJlZC91dGlscy9FcnJvckhhbmRsaW5nVXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQWtDO0FBRWxDOzs7R0FHRztBQUNILE1BQWEsa0JBQWtCO0lBQzdCOztPQUVHO0lBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUMxQixTQUFpQixFQUNqQixLQUFZLEVBQ1osT0FBNkI7UUFFN0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxTQUFTLFlBQVksS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFM0MsSUFBSSxpQkFBTSxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUN6QixTQUFpQixFQUNqQixLQUFZLEVBQ1osU0FBdUIsRUFDdkIsZUFBd0I7UUFFeEIsTUFBTSxPQUFPLEdBQUcsR0FBRyxTQUFTLHNCQUFzQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFOUIsSUFBSSxTQUFTLEVBQUU7WUFDYixTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDbEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3hCLElBQUksRUFBRSxlQUFlLElBQUksZ0NBQWdDO2dCQUN6RCxHQUFHLEVBQUUsMEJBQTBCO2FBQ2hDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxpQkFBTSxDQUFDLHNCQUFzQixTQUFTLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMscUJBQXFCLENBQzFCLEtBQWEsRUFDYixLQUFVLEVBQ1YsY0FBdUI7UUFFdkIsTUFBTSxPQUFPLEdBQUcsY0FBYztZQUM1QixDQUFDLENBQUMsV0FBVyxLQUFLLE1BQU0sS0FBSyx1QkFBdUIsY0FBYyxFQUFFO1lBQ3BFLENBQUMsQ0FBQyxXQUFXLEtBQUssTUFBTSxLQUFLLEdBQUcsQ0FBQztRQUVuQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLElBQUksaUJBQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ3BCLFNBQTJCLEVBQzNCLFlBQW9CLEVBQ3BCLFFBQVk7UUFFWixJQUFJO1lBQ0YsT0FBTyxNQUFNLFNBQVMsRUFBRSxDQUFDO1NBQzFCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsWUFBWSxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFaEQsSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO2dCQUMxQixPQUFPLFFBQVEsQ0FBQzthQUNqQjtZQUVELE9BQU8sU0FBUyxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFFBQVEsQ0FDYixTQUFrQixFQUNsQixZQUFvQixFQUNwQixRQUFZO1FBRVosSUFBSTtZQUNGLE9BQU8sU0FBUyxFQUFFLENBQUM7U0FDcEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxZQUFZLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUVoRCxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQzFCLE9BQU8sUUFBUSxDQUFDO2FBQ2pCO1lBRUQsT0FBTyxTQUFTLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsV0FBVyxDQUNoQixJQUFZLEVBQ1osT0FBZSxFQUNmLE9BQTZCO1FBRTdCLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2hDLEtBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQzFCLEtBQWEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2pDLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFVLEVBQUUsWUFBb0I7UUFDbkQsT0FBTyxLQUFLLEVBQUUsSUFBSSxLQUFLLFlBQVksQ0FBQztJQUN0QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMscUJBQXFCLENBQzFCLEtBQVksRUFDWixPQUE2QjtRQUU3QixPQUFPO1lBQ0wsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1lBQ3RCLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7WUFDaEIsSUFBSSxFQUFHLEtBQWEsQ0FBQyxJQUFJO1lBQ3pCLE9BQU87WUFDUCxTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7U0FDcEMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXJJRCxnREFxSUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3NoYXJlZC91dGlscy9FcnJvckhhbmRsaW5nVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbi8qKlxuICogQ29tbW9uIGVycm9yIGhhbmRsaW5nIHV0aWxpdGllcyB0byBlbGltaW5hdGUgZHVwbGljYXRpb25cbiAqIEltcGxlbWVudHMgRFJZIHByaW5jaXBsZSBmb3IgZXJyb3IgcHJvY2Vzc2luZyBhbmQgdXNlciBub3RpZmljYXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvckhhbmRsaW5nVXRpbHMge1xuICAvKipcbiAgICogSGFuZGxlIHJlcG9zaXRvcnkgb3BlcmF0aW9uIGVycm9ycyB3aXRoIGNvbnNpc3RlbnQgbG9nZ2luZyBhbmQgdXNlciBub3RpZmljYXRpb25cbiAgICovXG4gIHN0YXRpYyBoYW5kbGVSZXBvc2l0b3J5RXJyb3IoXG4gICAgb3BlcmF0aW9uOiBzdHJpbmcsXG4gICAgZXJyb3I6IEVycm9yLFxuICAgIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYCR7b3BlcmF0aW9ufSBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gO1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgeyBlcnJvciwgY29udGV4dCB9KTtcblxuICAgIG5ldyBOb3RpY2UoYEVycm9yOiAke21lc3NhZ2V9YCwgNTAwMCk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHJlbmRlcmluZyBlcnJvcnMgd2l0aCBncmFjZWZ1bCBkZWdyYWRhdGlvblxuICAgKi9cbiAgc3RhdGljIGhhbmRsZVJlbmRlcmluZ0Vycm9yKFxuICAgIGNvbXBvbmVudDogc3RyaW5nLFxuICAgIGVycm9yOiBFcnJvcixcbiAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudCxcbiAgICBmYWxsYmFja01lc3NhZ2U/OiBzdHJpbmcsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBgJHtjb21wb25lbnR9IHJlbmRlcmluZyBmYWlsZWQ6ICR7ZXJyb3IubWVzc2FnZX1gO1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpO1xuXG4gICAgaWYgKGNvbnRhaW5lcikge1xuICAgICAgY29udGFpbmVyLmVtcHR5KCk7XG4gICAgICBjb250YWluZXIuY3JlYXRlRWwoXCJkaXZcIiwge1xuICAgICAgICB0ZXh0OiBmYWxsYmFja01lc3NhZ2UgfHwgXCJDb250ZW50IGNvdWxkIG5vdCBiZSBkaXNwbGF5ZWRcIixcbiAgICAgICAgY2xzOiBcImV4b2NvcnRleC1lcnJvci1mYWxsYmFja1wiLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmV3IE5vdGljZShgUmVuZGVyaW5nIGVycm9yIGluICR7Y29tcG9uZW50fWAsIDMwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSB2YWxpZGF0aW9uIGVycm9ycyB3aXRoIHVzZXItZnJpZW5kbHkgbWVzc2FnZXNcbiAgICovXG4gIHN0YXRpYyBoYW5kbGVWYWxpZGF0aW9uRXJyb3IoXG4gICAgZmllbGQ6IHN0cmluZyxcbiAgICB2YWx1ZTogYW55LFxuICAgIGV4cGVjdGVkRm9ybWF0Pzogc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBtZXNzYWdlID0gZXhwZWN0ZWRGb3JtYXRcbiAgICAgID8gYEludmFsaWQgJHtmaWVsZH06IFwiJHt2YWx1ZX1cIi4gRXhwZWN0ZWQgZm9ybWF0OiAke2V4cGVjdGVkRm9ybWF0fWBcbiAgICAgIDogYEludmFsaWQgJHtmaWVsZH06IFwiJHt2YWx1ZX1cImA7XG5cbiAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgbmV3IE5vdGljZShtZXNzYWdlLCA0MDAwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYWZlIGFzeW5jIG9wZXJhdGlvbiB3cmFwcGVyIHdpdGggZXJyb3IgaGFuZGxpbmdcbiAgICovXG4gIHN0YXRpYyBhc3luYyBzYWZlQXN5bmM8VD4oXG4gICAgb3BlcmF0aW9uOiAoKSA9PiBQcm9taXNlPFQ+LFxuICAgIGVycm9yQ29udGV4dDogc3RyaW5nLFxuICAgIGZhbGxiYWNrPzogVCxcbiAgKTogUHJvbWlzZTxUIHwgdW5kZWZpbmVkPiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBvcGVyYXRpb24oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgJHtlcnJvckNvbnRleHR9IGZhaWxlZDpgLCBlcnJvcik7XG5cbiAgICAgIGlmIChmYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2FmZSBzeW5jIG9wZXJhdGlvbiB3cmFwcGVyIHdpdGggZXJyb3IgaGFuZGxpbmdcbiAgICovXG4gIHN0YXRpYyBzYWZlU3luYzxUPihcbiAgICBvcGVyYXRpb246ICgpID0+IFQsXG4gICAgZXJyb3JDb250ZXh0OiBzdHJpbmcsXG4gICAgZmFsbGJhY2s/OiBULFxuICApOiBUIHwgdW5kZWZpbmVkIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG9wZXJhdGlvbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGAke2Vycm9yQ29udGV4dH0gZmFpbGVkOmAsIGVycm9yKTtcblxuICAgICAgaWYgKGZhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgc3RhbmRhcmRpemVkIGVycm9yIG9iamVjdHNcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVFcnJvcihcbiAgICBjb2RlOiBzdHJpbmcsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIGNvbnRleHQ/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICApOiBFcnJvciB7XG4gICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgKGVycm9yIGFzIGFueSkuY29kZSA9IGNvZGU7XG4gICAgKGVycm9yIGFzIGFueSkuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGVycm9yIGlzIG9mIHNwZWNpZmljIHR5cGVcbiAgICovXG4gIHN0YXRpYyBpc0Vycm9yT2ZUeXBlKGVycm9yOiBhbnksIGV4cGVjdGVkQ29kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVycm9yPy5jb2RlID09PSBleHBlY3RlZENvZGU7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IGVycm9yIGZvciBsb2dnaW5nIHdpdGggY29udGV4dFxuICAgKi9cbiAgc3RhdGljIGZvcm1hdEVycm9yRm9yTG9nZ2luZyhcbiAgICBlcnJvcjogRXJyb3IsXG4gICAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICk6IFJlY29yZDxzdHJpbmcsIGFueT4ge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgc3RhY2s6IGVycm9yLnN0YWNrLFxuICAgICAgbmFtZTogZXJyb3IubmFtZSxcbiAgICAgIGNvZGU6IChlcnJvciBhcyBhbnkpLmNvZGUsXG4gICAgICBjb250ZXh0LFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9