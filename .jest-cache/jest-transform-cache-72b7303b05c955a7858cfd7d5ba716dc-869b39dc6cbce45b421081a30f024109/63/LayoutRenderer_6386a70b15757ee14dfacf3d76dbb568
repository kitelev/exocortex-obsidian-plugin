fec62c8c868780e4a3d51da58459e936
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutRenderer = void 0;
const tslib_1 = require("tslib");
const QueryBlockRenderer_1 = require("./QueryBlockRenderer");
const PropertiesBlockRenderer_1 = require("./PropertiesBlockRenderer");
const BacklinksBlockRenderer_1 = require("./BacklinksBlockRenderer");
const CustomBlockRenderer_1 = require("./CustomBlockRenderer");
const GetLayoutForClassUseCase_1 = require("../../application/use-cases/GetLayoutForClassUseCase");
class LayoutRenderer {
    constructor(app, layoutRepository, propertyRenderer) {
        this.app = app;
        this.getLayoutUseCase = new GetLayoutForClassUseCase_1.GetLayoutForClassUseCase(layoutRepository);
        this.queryRenderer = new QueryBlockRenderer_1.QueryBlockRenderer(app);
        this.propertiesRenderer = new PropertiesBlockRenderer_1.PropertiesBlockRenderer(app, propertyRenderer);
        this.backlinksRenderer = new BacklinksBlockRenderer_1.BacklinksBlockRenderer(app);
        this.customRenderer = new CustomBlockRenderer_1.CustomBlockRenderer(app);
    }
    renderLayout(container, file, metadata, dv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const frontmatter = metadata.frontmatter;
            const instanceClass = frontmatter['exo__Instance_class'];
            if (!instanceClass) {
                this.renderError(container, 'No instance class defined');
                return;
            }
            const cleanClassName = this.cleanClassName(instanceClass);
            // Get layout for this class
            const layoutResult = yield this.getLayoutUseCase.execute({
                className: cleanClassName
            });
            if (layoutResult.isFailure) {
                this.renderError(container, layoutResult.error);
                return;
            }
            const { layout, fallbackUsed } = layoutResult.getValue();
            if (!layout) {
                // Use default layout
                yield this.renderDefaultLayout(container, file, metadata, dv);
                return;
            }
            // Render custom layout
            yield this.renderCustomLayout(container, file, metadata, layout, dv);
        });
    }
    renderCustomLayout(container, file, metadata, layout, dv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const frontmatter = metadata.frontmatter;
            // Add layout info
            const layoutInfo = container.createDiv({ cls: 'exocortex-layout-info' });
            layoutInfo.style.display = 'none'; // Hidden by default
            layoutInfo.setAttribute('data-layout-id', layout.id.toString());
            layoutInfo.setAttribute('data-layout-class', layout.targetClass.value);
            // Render each visible block
            const visibleBlocks = layout.getVisibleBlocks();
            for (const block of visibleBlocks) {
                const blockContainer = container.createDiv({
                    cls: `exocortex-block exocortex-block-${block.type}`
                });
                blockContainer.setAttribute('data-block-id', block.id);
                // Add block header if title exists
                if (block.title) {
                    const header = blockContainer.createEl('h3', {
                        text: block.title,
                        cls: 'exocortex-block-header'
                    });
                    // Add collapse toggle if collapsible
                    if (block.isCollapsible) {
                        header.addClass('is-collapsible');
                        header.addEventListener('click', () => {
                            blockContainer.toggleClass('is-collapsed', !blockContainer.hasClass('is-collapsed'));
                        });
                    }
                }
                // Render block content
                const contentContainer = blockContainer.createDiv({ cls: 'exocortex-block-content' });
                try {
                    switch (block.type) {
                        case 'query':
                            yield this.queryRenderer.render(contentContainer, block.config, file, frontmatter, dv);
                            break;
                        case 'properties':
                            yield this.propertiesRenderer.render(contentContainer, block.config, file, frontmatter, dv);
                            break;
                        case 'backlinks':
                            yield this.backlinksRenderer.render(contentContainer, block.config, file, dv);
                            break;
                        case 'custom':
                            yield this.customRenderer.render(contentContainer, block.config, file, frontmatter, dv);
                            break;
                        default:
                            contentContainer.createEl('p', {
                                text: `Unknown block type: ${block.type}`,
                                cls: 'exocortex-error'
                            });
                    }
                }
                catch (error) {
                    contentContainer.createEl('p', {
                        text: `Error rendering block: ${error}`,
                        cls: 'exocortex-error'
                    });
                    console.error(`Error rendering block ${block.id}:`, error);
                }
            }
        });
    }
    renderDefaultLayout(container, file, metadata, dv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const frontmatter = metadata.frontmatter;
            // Properties section
            const propsContainer = container.createDiv({ cls: 'exocortex-block exocortex-block-properties' });
            propsContainer.createEl('h3', { text: '📝 Properties' });
            const propsContent = propsContainer.createDiv({ cls: 'exocortex-block-content' });
            yield this.propertiesRenderer.render(propsContent, {
                type: 'properties',
                editableProperties: Object.keys(frontmatter).filter(k => !k.startsWith('exo__'))
            }, file, frontmatter, dv);
            // Relations section
            if (frontmatter['exo__Asset_relates']) {
                const relContainer = container.createDiv({ cls: 'exocortex-block exocortex-block-relations' });
                relContainer.createEl('h3', { text: '🔗 Related Assets' });
                const relContent = relContainer.createDiv({ cls: 'exocortex-block-content' });
                const relates = Array.isArray(frontmatter['exo__Asset_relates'])
                    ? frontmatter['exo__Asset_relates']
                    : [frontmatter['exo__Asset_relates']];
                const list = relContent.createEl('ul');
                relates.forEach((rel) => {
                    const item = list.createEl('li');
                    const link = this.cleanClassName(rel);
                    item.createEl('a', {
                        text: link,
                        href: link,
                        cls: 'internal-link'
                    });
                });
            }
            // Backlinks section
            const backlinksContainer = container.createDiv({ cls: 'exocortex-block exocortex-block-backlinks' });
            backlinksContainer.createEl('h3', { text: '📎 Referenced By' });
            const backlinksContent = backlinksContainer.createDiv({ cls: 'exocortex-block-content' });
            yield this.backlinksRenderer.render(backlinksContent, { type: 'backlinks' }, file, dv);
        });
    }
    renderError(container, error) {
        container.createEl('div', {
            text: `Layout Error: ${error}`,
            cls: 'exocortex-error notice-error'
        });
    }
    cleanClassName(className) {
        if (!className)
            return '';
        const str = Array.isArray(className) ? className[0] : className;
        return (str === null || str === void 0 ? void 0 : str.toString().replace(/\[\[|\]\]/g, '')) || '';
    }
}
exports.LayoutRenderer = LayoutRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,