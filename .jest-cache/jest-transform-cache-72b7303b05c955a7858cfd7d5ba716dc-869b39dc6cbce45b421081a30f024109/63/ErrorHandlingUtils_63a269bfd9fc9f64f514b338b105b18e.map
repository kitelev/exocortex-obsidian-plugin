{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/shared/utils/ErrorHandlingUtils.ts","mappings":";;;AAAA,uCAAkC;AAElC;;;GAGG;AACH,MAAa,kBAAkB;IAC7B;;OAEG;IACH,MAAM,CAAC,qBAAqB,CAC1B,SAAiB,EACjB,KAAY,EACZ,OAA6B;QAE7B,MAAM,OAAO,GAAG,GAAG,SAAS,YAAY,KAAK,CAAC,OAAO,EAAE,CAAC;QACxD,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;QAE3C,IAAI,iBAAM,CAAC,UAAU,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,oBAAoB,CACzB,SAAiB,EACjB,KAAY,EACZ,SAAuB,EACvB,eAAwB;QAExB,MAAM,OAAO,GAAG,GAAG,SAAS,sBAAsB,KAAK,CAAC,OAAO,EAAE,CAAC;QAClE,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAE9B,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,KAAK,EAAE,CAAC;YAClB,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE;gBACxB,IAAI,EAAE,eAAe,IAAI,gCAAgC;gBACzD,GAAG,EAAE,0BAA0B;aAChC,CAAC,CAAC;SACJ;QAED,IAAI,iBAAM,CAAC,sBAAsB,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,qBAAqB,CAC1B,KAAa,EACb,KAAU,EACV,cAAuB;QAEvB,MAAM,OAAO,GAAG,cAAc;YAC5B,CAAC,CAAC,WAAW,KAAK,MAAM,KAAK,uBAAuB,cAAc,EAAE;YACpE,CAAC,CAAC,WAAW,KAAK,MAAM,KAAK,GAAG,CAAC;QAEnC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtB,IAAI,iBAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,SAAS,CACpB,SAA2B,EAC3B,YAAoB,EACpB,QAAY;QAEZ,IAAI;YACF,OAAO,MAAM,SAAS,EAAE,CAAC;SAC1B;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,GAAG,YAAY,UAAU,EAAE,KAAK,CAAC,CAAC;YAEhD,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,OAAO,QAAQ,CAAC;aACjB;YAED,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,QAAQ,CACb,SAAkB,EAClB,YAAoB,EACpB,QAAY;QAEZ,IAAI;YACF,OAAO,SAAS,EAAE,CAAC;SACpB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,GAAG,YAAY,UAAU,EAAE,KAAK,CAAC,CAAC;YAEhD,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,OAAO,QAAQ,CAAC;aACjB;YAED,OAAO,SAAS,CAAC;SAClB;IACH,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,WAAW,CAChB,IAAY,EACZ,OAAe,EACf,OAA6B;QAE7B,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAChC,KAAa,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,KAAa,CAAC,OAAO,GAAG,OAAO,CAAC;QACjC,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,aAAa,CAAC,KAAU,EAAE,YAAoB;QACnD,OAAO,KAAK,EAAE,IAAI,KAAK,YAAY,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,qBAAqB,CAC1B,KAAY,EACZ,OAA6B;QAE7B,OAAO;YACL,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,IAAI,EAAG,KAAa,CAAC,IAAI;YACzB,OAAO;YACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;CACF;AArID,gDAqIC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/shared/utils/ErrorHandlingUtils.ts"],"sourcesContent":["import { Notice } from \"obsidian\";\n\n/**\n * Common error handling utilities to eliminate duplication\n * Implements DRY principle for error processing and user notifications\n */\nexport class ErrorHandlingUtils {\n  /**\n   * Handle repository operation errors with consistent logging and user notification\n   */\n  static handleRepositoryError(\n    operation: string,\n    error: Error,\n    context?: Record<string, any>,\n  ): void {\n    const message = `${operation} failed: ${error.message}`;\n    console.error(message, { error, context });\n\n    new Notice(`Error: ${message}`, 5000);\n  }\n\n  /**\n   * Handle rendering errors with graceful degradation\n   */\n  static handleRenderingError(\n    component: string,\n    error: Error,\n    container?: HTMLElement,\n    fallbackMessage?: string,\n  ): void {\n    const message = `${component} rendering failed: ${error.message}`;\n    console.error(message, error);\n\n    if (container) {\n      container.empty();\n      container.createEl(\"div\", {\n        text: fallbackMessage || \"Content could not be displayed\",\n        cls: \"exocortex-error-fallback\",\n      });\n    }\n\n    new Notice(`Rendering error in ${component}`, 3000);\n  }\n\n  /**\n   * Handle validation errors with user-friendly messages\n   */\n  static handleValidationError(\n    field: string,\n    value: any,\n    expectedFormat?: string,\n  ): void {\n    const message = expectedFormat\n      ? `Invalid ${field}: \"${value}\". Expected format: ${expectedFormat}`\n      : `Invalid ${field}: \"${value}\"`;\n\n    console.warn(message);\n    new Notice(message, 4000);\n  }\n\n  /**\n   * Safe async operation wrapper with error handling\n   */\n  static async safeAsync<T>(\n    operation: () => Promise<T>,\n    errorContext: string,\n    fallback?: T,\n  ): Promise<T | undefined> {\n    try {\n      return await operation();\n    } catch (error) {\n      console.error(`${errorContext} failed:`, error);\n\n      if (fallback !== undefined) {\n        return fallback;\n      }\n\n      return undefined;\n    }\n  }\n\n  /**\n   * Safe sync operation wrapper with error handling\n   */\n  static safeSync<T>(\n    operation: () => T,\n    errorContext: string,\n    fallback?: T,\n  ): T | undefined {\n    try {\n      return operation();\n    } catch (error) {\n      console.error(`${errorContext} failed:`, error);\n\n      if (fallback !== undefined) {\n        return fallback;\n      }\n\n      return undefined;\n    }\n  }\n\n  /**\n   * Create standardized error objects\n   */\n  static createError(\n    code: string,\n    message: string,\n    context?: Record<string, any>,\n  ): Error {\n    const error = new Error(message);\n    (error as any).code = code;\n    (error as any).context = context;\n    return error;\n  }\n\n  /**\n   * Check if error is of specific type\n   */\n  static isErrorOfType(error: any, expectedCode: string): boolean {\n    return error?.code === expectedCode;\n  }\n\n  /**\n   * Format error for logging with context\n   */\n  static formatErrorForLogging(\n    error: Error,\n    context?: Record<string, any>,\n  ): Record<string, any> {\n    return {\n      message: error.message,\n      stack: error.stack,\n      name: error.name,\n      code: (error as any).code,\n      context,\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n"],"version":3}