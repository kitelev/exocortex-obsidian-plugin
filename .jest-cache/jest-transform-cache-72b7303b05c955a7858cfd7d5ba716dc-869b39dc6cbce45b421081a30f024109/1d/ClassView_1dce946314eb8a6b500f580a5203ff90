080f47ec44f2e269c9b7aa4ac762a908
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassView = void 0;
const AggregateRoot_1 = require("../core/AggregateRoot");
const Result_1 = require("../core/Result");
class ClassView extends AggregateRoot_1.AggregateRoot {
    constructor(props) {
        super(props);
    }
    /**
     * Factory method with business rules validation
     */
    static create(props) {
        // Validate class name
        if (!props.className) {
            return Result_1.Result.fail('Class view must be associated with a class');
        }
        // Validate button count
        if (props.buttons.length > ClassView.MAX_BUTTONS_PER_VIEW) {
            return Result_1.Result.fail(`Class view cannot have more than ${ClassView.MAX_BUTTONS_PER_VIEW} buttons`);
        }
        // Check for duplicate button orders
        const orders = props.buttons.map(b => b.order);
        const uniqueOrders = new Set(orders);
        if (uniqueOrders.size !== orders.length) {
            return Result_1.Result.fail('Buttons cannot have duplicate order values');
        }
        // Set default display options
        const defaultDisplayOptions = {
            showProperties: true,
            showRelations: true,
            showBacklinks: true,
            showButtons: true,
            buttonPosition: 'top'
        };
        return Result_1.Result.ok(new ClassView(Object.assign(Object.assign({}, props), { displayOptions: props.displayOptions || defaultDisplayOptions })));
    }
    // Getters
    get id() {
        return this.props.id;
    }
    get className() {
        return this.props.className;
    }
    get buttons() {
        // Return sorted by order
        return [...this.props.buttons].sort((a, b) => a.order - b.order);
    }
    get displayOptions() {
        return this.props.displayOptions || {
            showProperties: true,
            showRelations: true,
            showBacklinks: true,
            showButtons: true,
            buttonPosition: 'top'
        };
    }
    /**
     * Add a button to the view
     */
    addButton(button) {
        // Check max buttons limit
        if (this.props.buttons.length >= ClassView.MAX_BUTTONS_PER_VIEW) {
            return Result_1.Result.fail(`Cannot add more buttons. Maximum of ${ClassView.MAX_BUTTONS_PER_VIEW} reached`);
        }
        // Check for duplicate button
        if (this.props.buttons.some(b => b.id.equals(button.id))) {
            return Result_1.Result.fail('Button already exists in this view');
        }
        // Check for order conflict
        if (this.props.buttons.some(b => b.order === button.order)) {
            return Result_1.Result.fail(`Button with order ${button.order} already exists`);
        }
        this.props.buttons.push(button);
        // Raise domain event
        this.addDomainEvent({
            aggregateId: this.id.toString(),
            eventType: 'ButtonAddedToClassView',
            eventData: {
                classViewId: this.id.toString(),
                className: this.className.value,
                buttonId: button.id.toString(),
                buttonLabel: button.label
            }
        });
        return Result_1.Result.ok();
    }
    /**
     * Remove a button from the view
     */
    removeButton(buttonId) {
        const buttonIndex = this.props.buttons.findIndex(b => b.id.equals(buttonId));
        if (buttonIndex === -1) {
            return Result_1.Result.fail('Button not found in this view');
        }
        const removedButton = this.props.buttons.splice(buttonIndex, 1)[0];
        // Raise domain event
        this.addDomainEvent({
            aggregateId: this.id.toString(),
            eventType: 'ButtonRemovedFromClassView',
            eventData: {
                classViewId: this.id.toString(),
                className: this.className.value,
                buttonId: removedButton.id.toString()
            }
        });
        return Result_1.Result.ok();
    }
    /**
     * Reorder buttons
     */
    reorderButtons(buttonOrders) {
        // Validate all buttons are present
        for (const button of this.props.buttons) {
            if (!buttonOrders.has(button.id.toString())) {
                return Result_1.Result.fail(`Missing order for button ${button.id.toString()}`);
            }
        }
        // Check for duplicate orders
        const orders = Array.from(buttonOrders.values());
        const uniqueOrders = new Set(orders);
        if (uniqueOrders.size !== orders.length) {
            return Result_1.Result.fail('Duplicate order values not allowed');
        }
        // Apply new orders
        for (const button of this.props.buttons) {
            const newOrder = buttonOrders.get(button.id.toString());
            if (newOrder !== undefined) {
                // This would normally update the button's order
                // but we need to maintain immutability
                Object.defineProperty(button, 'order', { value: newOrder });
            }
        }
        // Raise domain event
        this.addDomainEvent({
            aggregateId: this.id.toString(),
            eventType: 'ButtonsReordered',
            eventData: {
                classViewId: this.id.toString(),
                className: this.className.value,
                newOrder: Array.from(buttonOrders.entries())
            }
        });
        return Result_1.Result.ok();
    }
    /**
     * Update display options
     */
    updateDisplayOptions(options) {
        this.props.displayOptions = Object.assign(Object.assign({}, this.displayOptions), options);
        // Raise domain event
        this.addDomainEvent({
            aggregateId: this.id.toString(),
            eventType: 'DisplayOptionsUpdated',
            eventData: {
                classViewId: this.id.toString(),
                className: this.className.value,
                displayOptions: this.props.displayOptions
            }
        });
        return Result_1.Result.ok();
    }
    /**
     * Get enabled buttons only
     */
    getEnabledButtons() {
        return this.buttons.filter(b => b.isEnabled);
    }
    /**
     * Check if view has any executable buttons
     */
    hasExecutableButtons() {
        return this.getEnabledButtons().length > 0 && this.displayOptions.showButtons;
    }
    /**
     * Find button by ID
     */
    findButton(buttonId) {
        return this.props.buttons.find(b => b.id.equals(buttonId));
    }
}
exports.ClassView = ClassView;
ClassView.MAX_BUTTONS_PER_VIEW = 20;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,