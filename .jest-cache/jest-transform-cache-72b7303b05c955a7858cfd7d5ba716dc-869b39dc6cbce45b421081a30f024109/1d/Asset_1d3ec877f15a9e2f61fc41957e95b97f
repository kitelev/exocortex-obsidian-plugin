f2b75136ea474e1eb239d6d836b0a0b2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
const AssetId_1 = require("../value-objects/AssetId");
const ClassName_1 = require("../value-objects/ClassName");
const OntologyPrefix_1 = require("../value-objects/OntologyPrefix");
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
/**
 * Domain entity representing an Exocortex Asset
 * Core business logic and invariants
 */
class Asset extends Entity_1.Entity {
    constructor(props) {
        super(props);
    }
    static create(params) {
        if (!params.label || params.label.trim().length === 0) {
            return Result_1.Result.fail('Asset label cannot be empty');
        }
        const props = {
            id: params.id,
            title: params.label,
            className: params.className,
            ontology: params.ontology,
            label: params.label,
            description: params.description,
            properties: new Map(Object.entries(params.properties || {})),
            createdAt: new Date(),
            updatedAt: new Date()
        };
        return Result_1.Result.ok(new Asset(props));
    }
    // Getters
    getId() {
        return this.props.id;
    }
    getTitle() {
        return this.props.title;
    }
    getClassName() {
        return this.props.className;
    }
    getOntologyPrefix() {
        return this.props.ontology;
    }
    getProperties() {
        return new Map(this.props.properties);
    }
    getProperty(key) {
        return this.props.properties.get(key);
    }
    getCreatedAt() {
        return this.props.createdAt;
    }
    getUpdatedAt() {
        return this.props.updatedAt;
    }
    // Business methods
    updateTitle(title) {
        if (!title || title.trim().length === 0) {
            throw new Error('Asset title cannot be empty');
        }
        this.props.title = title;
        this.props.updatedAt = new Date();
    }
    setProperty(key, value) {
        this.props.properties.set(key, value);
        this.props.updatedAt = new Date();
    }
    removeProperty(key) {
        this.props.properties.delete(key);
        this.props.updatedAt = new Date();
    }
    changeClass(className) {
        this.props.className = className;
        this.props.updatedAt = new Date();
    }
    toFrontmatter() {
        const frontmatter = {
            'exo__Asset_uid': this.props.id.toString(),
            'exo__Asset_label': this.props.title,
            'exo__Asset_isDefinedBy': `[[!${this.props.ontology.toString()}]]`,
            'exo__Asset_createdAt': this.props.createdAt.toISOString(),
            'exo__Instance_class': [this.props.className.toWikiLink()]
        };
        // Add custom properties
        for (const [key, value] of this.props.properties) {
            if (!frontmatter[key]) {
                frontmatter[key] = value;
            }
        }
        return frontmatter;
    }
    static fromFrontmatter(frontmatter, fileName) {
        var _a;
        try {
            const idResult = AssetId_1.AssetId.create(frontmatter['exo__Asset_uid'] || AssetId_1.AssetId.generate().toString());
            const id = idResult.isSuccess ? idResult.getValue() : AssetId_1.AssetId.generate();
            const label = frontmatter['exo__Asset_label'] || fileName.replace('.md', '');
            const classValue = Array.isArray(frontmatter['exo__Instance_class'])
                ? frontmatter['exo__Instance_class'][0]
                : frontmatter['exo__Instance_class'];
            const classNameResult = ClassName_1.ClassName.create(classValue || 'exo__Asset');
            const className = classNameResult.isSuccess ? classNameResult.getValue() : ClassName_1.ClassName.create('exo__Asset').getValue();
            const ontologyValue = ((_a = frontmatter['exo__Asset_isDefinedBy']) === null || _a === void 0 ? void 0 : _a.replace(/\[\[!?|\]\]/g, '')) || 'exo';
            const ontologyResult = OntologyPrefix_1.OntologyPrefix.create(ontologyValue);
            const ontology = ontologyResult.isSuccess ? ontologyResult.getValue() : OntologyPrefix_1.OntologyPrefix.create('exo').getValue();
            const createdAt = frontmatter['exo__Asset_createdAt']
                ? new Date(frontmatter['exo__Asset_createdAt'])
                : new Date();
            const properties = {};
            for (const [key, value] of Object.entries(frontmatter)) {
                if (!key.startsWith('exo__Asset_') && !key.startsWith('exo__Instance_')) {
                    properties[key] = value;
                }
            }
            // Use the factory method instead of constructor
            const result = Asset.create({
                id,
                label,
                className,
                ontology,
                properties
            });
            if (result.isSuccess) {
                const asset = result.getValue();
                // Update timestamps
                asset.props.createdAt = createdAt;
                return asset;
            }
            else {
                console.warn('Failed to create asset from frontmatter:', result.error);
            }
            return null;
        }
        catch (error) {
            console.warn('Failed to create asset from frontmatter:', error);
            return null;
        }
    }
}
exports.Asset = Asset;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,