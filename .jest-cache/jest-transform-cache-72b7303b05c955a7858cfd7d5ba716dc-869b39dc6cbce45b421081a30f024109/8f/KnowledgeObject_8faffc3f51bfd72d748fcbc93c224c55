69a22ae7f4a3dde949c2e8664acbf3c7
"use strict";
/**
 * KnowledgeObject - The fundamental semantic entity in the Exocortex system
 * Represents any piece of knowledge with RDF-based properties and relationships
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KnowledgeObject = void 0;
const Entity_1 = require("../../core/Entity");
const Result_1 = require("../../core/Result");
const Graph_1 = require("../core/Graph");
const Triple_1 = require("../core/Triple");
/**
 * KnowledgeObject - Core domain entity for semantic knowledge management
 *
 * Design principles:
 * 1. Privacy-first: Only UUID is public, all other data is private
 * 2. Semantic: All properties are RDF triples with formal semantics
 * 3. Extensible: New properties can be added without code changes
 * 4. Validatable: SHACL shapes ensure data integrity
 */
class KnowledgeObject extends Entity_1.Entity {
    constructor(props) {
        super(props);
    }
    /**
     * Factory method for creating a new KnowledgeObject
     */
    static create(type, initialProperties, content) {
        const uuid = crypto.randomUUID ? crypto.randomUUID() : KnowledgeObject.generateUUID();
        const now = new Date();
        const graph = new Graph_1.Graph();
        // Create subject IRI from UUID
        const subject = new Triple_1.IRI(`urn:uuid:${uuid}`);
        // Add core triples
        graph.add(new Triple_1.Triple(subject, Triple_1.RDF.type, type));
        graph.add(new Triple_1.Triple(subject, Triple_1.EXO.uuid, Triple_1.Literal.string(uuid)));
        graph.add(new Triple_1.Triple(subject, Triple_1.EXO.createdAt, Triple_1.Literal.dateTime(now)));
        graph.add(new Triple_1.Triple(subject, Triple_1.EXO.updatedAt, Triple_1.Literal.dateTime(now)));
        // Add initial properties
        if (initialProperties) {
            for (const [predicate, value] of initialProperties) {
                const literal = KnowledgeObject.valueToLiteral(value);
                if (literal.isFailure) {
                    return Result_1.Result.fail(literal.error);
                }
                graph.add(new Triple_1.Triple(subject, predicate, literal.getValue()));
            }
        }
        const props = {
            uuid,
            type,
            graph,
            content,
            createdAt: now,
            updatedAt: now
        };
        return Result_1.Result.ok(new KnowledgeObject(props));
    }
    /**
     * Reconstruct a KnowledgeObject from stored data
     */
    static fromGraph(uuid, graph, content) {
        const subject = new Triple_1.IRI(`urn:uuid:${uuid}`);
        // Get type
        const typeTriples = graph.match(subject, Triple_1.RDF.type, null);
        if (typeTriples.length === 0) {
            return Result_1.Result.fail('Knowledge object has no type');
        }
        const type = typeTriples[0].getObject();
        // Get timestamps
        const createdTriples = graph.match(subject, Triple_1.EXO.createdAt, null);
        const updatedTriples = graph.match(subject, Triple_1.EXO.updatedAt, null);
        let createdAt = new Date();
        let updatedAt = new Date();
        if (createdTriples.length > 0) {
            const literal = createdTriples[0].getObject();
            createdAt = new Date(literal.getValue());
        }
        if (updatedTriples.length > 0) {
            const literal = updatedTriples[0].getObject();
            updatedAt = new Date(literal.getValue());
        }
        const props = {
            uuid,
            type,
            graph,
            content,
            createdAt,
            updatedAt
        };
        return Result_1.Result.ok(new KnowledgeObject(props));
    }
    /**
     * Get the UUID (public identifier)
     */
    get uuid() {
        return this.props.uuid;
    }
    /**
     * Get the semantic type
     */
    get type() {
        return this.props.type;
    }
    /**
     * Get the content (if any)
     */
    get content() {
        return this.props.content;
    }
    /**
     * Get creation timestamp
     */
    get createdAt() {
        return this.props.createdAt;
    }
    /**
     * Get last update timestamp
     */
    get updatedAt() {
        return this.props.updatedAt;
    }
    /**
     * Get the subject IRI for this object
     */
    get subject() {
        return new Triple_1.IRI(`urn:uuid:${this.uuid}`);
    }
    /**
     * Set a property value
     */
    setProperty(predicate, value) {
        const literal = KnowledgeObject.valueToLiteral(value);
        if (literal.isFailure) {
            return Result_1.Result.fail(literal.error);
        }
        // Remove existing values for this predicate
        const existing = this.props.graph.match(this.subject, predicate, null);
        for (const triple of existing) {
            this.props.graph.remove(triple);
        }
        // Add new value
        this.props.graph.add(new Triple_1.Triple(this.subject, predicate, literal.getValue()));
        // Update timestamp
        this.updateTimestamp();
        return Result_1.Result.ok();
    }
    /**
     * Get a property value
     */
    getProperty(predicate) {
        const triples = this.props.graph.match(this.subject, predicate, null);
        if (triples.length === 0)
            return undefined;
        const object = triples[0].getObject();
        if (object instanceof Triple_1.Literal) {
            return KnowledgeObject.literalToValue(object);
        }
        return object.toString();
    }
    /**
     * Get all property values for a predicate
     */
    getProperties(predicate) {
        const triples = this.props.graph.match(this.subject, predicate, null);
        return triples.map(t => {
            const object = t.getObject();
            if (object instanceof Triple_1.Literal) {
                return KnowledgeObject.literalToValue(object);
            }
            return object.toString();
        });
    }
    /**
     * Add a property value (for multi-valued properties)
     */
    addProperty(predicate, value) {
        const literal = KnowledgeObject.valueToLiteral(value);
        if (literal.isFailure) {
            return Result_1.Result.fail(literal.error);
        }
        this.props.graph.add(new Triple_1.Triple(this.subject, predicate, literal.getValue()));
        this.updateTimestamp();
        return Result_1.Result.ok();
    }
    /**
     * Remove a property value
     */
    removeProperty(predicate, value) {
        if (value === undefined) {
            // Remove all values for this predicate
            const triples = this.props.graph.match(this.subject, predicate, null);
            for (const triple of triples) {
                this.props.graph.remove(triple);
            }
        }
        else {
            // Remove specific value
            const literal = KnowledgeObject.valueToLiteral(value);
            if (literal.isFailure) {
                return Result_1.Result.fail(literal.error);
            }
            const triples = this.props.graph.match(this.subject, predicate, literal.getValue());
            for (const triple of triples) {
                this.props.graph.remove(triple);
            }
        }
        this.updateTimestamp();
        return Result_1.Result.ok();
    }
    /**
     * Add a relationship to another KnowledgeObject
     */
    addRelation(predicate, targetUuid) {
        const targetIri = new Triple_1.IRI(`urn:uuid:${targetUuid}`);
        this.props.graph.add(new Triple_1.Triple(this.subject, predicate, targetIri));
        this.updateTimestamp();
        return Result_1.Result.ok();
    }
    /**
     * Remove a relationship
     */
    removeRelation(predicate, targetUuid) {
        const targetIri = new Triple_1.IRI(`urn:uuid:${targetUuid}`);
        const triples = this.props.graph.match(this.subject, predicate, targetIri);
        for (const triple of triples) {
            this.props.graph.remove(triple);
        }
        this.updateTimestamp();
        return Result_1.Result.ok();
    }
    /**
     * Get all related objects for a predicate
     */
    getRelations(predicate) {
        const triples = this.props.graph.match(this.subject, predicate, null);
        const uuids = [];
        for (const triple of triples) {
            const object = triple.getObject();
            if (object instanceof Triple_1.IRI) {
                const iri = object.toString();
                if (iri.startsWith('urn:uuid:')) {
                    uuids.push(iri.substring(9));
                }
            }
        }
        return uuids;
    }
    /**
     * Update content
     */
    setContent(content) {
        this.props.content = content;
        this.updateTimestamp();
        return Result_1.Result.ok();
    }
    /**
     * Get all properties as a map
     */
    getAllProperties() {
        const properties = new Map();
        const triples = this.props.graph.match(this.subject, null, null);
        for (const triple of triples) {
            const predicate = triple.getPredicate();
            const object = triple.getObject();
            if (!properties.has(predicate)) {
                properties.set(predicate, []);
            }
            if (object instanceof Triple_1.Literal) {
                properties.get(predicate).push(KnowledgeObject.literalToValue(object));
            }
            else if (object instanceof Triple_1.IRI) {
                const iri = object.toString();
                if (iri.startsWith('urn:uuid:')) {
                    properties.get(predicate).push(iri.substring(9));
                }
                else {
                    properties.get(predicate).push(iri);
                }
            }
        }
        return properties;
    }
    /**
     * Get the RDF graph for this object
     */
    getGraph() {
        return this.props.graph.clone();
    }
    /**
     * Export to N-Triples format
     */
    toNTriples() {
        return this.props.graph.toString();
    }
    /**
     * Clone the knowledge object
     */
    clone() {
        const props = {
            uuid: this.props.uuid,
            type: this.props.type,
            graph: this.props.graph.clone(),
            content: this.props.content,
            createdAt: this.props.createdAt,
            updatedAt: this.props.updatedAt
        };
        return new KnowledgeObject(props);
    }
    /**
     * Update the timestamp
     */
    updateTimestamp() {
        const now = new Date();
        this.props.updatedAt = now;
        // Update in graph
        const existing = this.props.graph.match(this.subject, Triple_1.EXO.updatedAt, null);
        for (const triple of existing) {
            this.props.graph.remove(triple);
        }
        this.props.graph.add(new Triple_1.Triple(this.subject, Triple_1.EXO.updatedAt, Triple_1.Literal.dateTime(now)));
    }
    /**
     * Convert a JavaScript value to an RDF Literal
     */
    static valueToLiteral(value) {
        if (value === null || value === undefined) {
            return Result_1.Result.fail('Cannot convert null/undefined to literal');
        }
        if (typeof value === 'string') {
            // Check if it's a UUID reference
            if (value.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
                return Result_1.Result.ok(new Triple_1.IRI(`urn:uuid:${value}`));
            }
            // Check if it's an IRI
            if (value.startsWith('http://') || value.startsWith('https://') || value.includes(':')) {
                try {
                    return Result_1.Result.ok(new Triple_1.IRI(value));
                }
                catch (_a) {
                    // Fall back to string literal
                }
            }
            return Result_1.Result.ok(Triple_1.Literal.string(value));
        }
        if (typeof value === 'boolean') {
            return Result_1.Result.ok(Triple_1.Literal.boolean(value));
        }
        if (typeof value === 'number') {
            if (Number.isInteger(value)) {
                return Result_1.Result.ok(Triple_1.Literal.integer(value));
            }
            return Result_1.Result.ok(Triple_1.Literal.double(value));
        }
        if (value instanceof Date) {
            return Result_1.Result.ok(Triple_1.Literal.dateTime(value));
        }
        if (value instanceof Triple_1.IRI) {
            return Result_1.Result.ok(value);
        }
        if (value instanceof Triple_1.Literal) {
            return Result_1.Result.ok(value);
        }
        // Convert object to JSON string
        return Result_1.Result.ok(Triple_1.Literal.string(JSON.stringify(value)));
    }
    /**
     * Convert an RDF Literal to a JavaScript value
     */
    static literalToValue(literal) {
        const datatype = literal.getDatatype();
        const value = literal.getValue();
        if (!datatype) {
            return value;
        }
        const dt = datatype.toString();
        if (dt === 'http://www.w3.org/2001/XMLSchema#boolean') {
            return value === 'true';
        }
        if (dt === 'http://www.w3.org/2001/XMLSchema#integer') {
            return parseInt(value, 10);
        }
        if (dt === 'http://www.w3.org/2001/XMLSchema#double') {
            return parseFloat(value);
        }
        if (dt === 'http://www.w3.org/2001/XMLSchema#dateTime') {
            return new Date(value);
        }
        // Try to parse JSON
        if (value.startsWith('{') || value.startsWith('[')) {
            try {
                return JSON.parse(value);
            }
            catch (_a) {
                // Not JSON, return as string
            }
        }
        return value;
    }
    /**
     * Fallback UUID generator if crypto.randomUUID is not available
     */
    static generateUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
}
exports.KnowledgeObject = KnowledgeObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9zZW1hbnRpYy9lbnRpdGllcy9Lbm93bGVkZ2VPYmplY3QudHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgsOENBQTJDO0FBQzNDLDhDQUEyQztBQUMzQyx5Q0FBc0M7QUFDdEMsMkNBQWlGO0FBY2pGOzs7Ozs7OztHQVFHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLGVBQTRCO0lBQy9ELFlBQW9CLEtBQTJCO1FBQzdDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNmLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQ1gsSUFBUyxFQUNULGlCQUFpQyxFQUNqQyxPQUF5QjtRQUV6QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7UUFFMUIsK0JBQStCO1FBQy9CLE1BQU0sT0FBTyxHQUFHLElBQUksWUFBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUU1QyxtQkFBbUI7UUFDbkIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQU0sQ0FBQyxPQUFPLEVBQUUsWUFBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQy9DLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsT0FBTyxFQUFFLFlBQUcsQ0FBQyxJQUFJLEVBQUUsZ0JBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsT0FBTyxFQUFFLFlBQUcs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LENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxFQUFFLEtBQUsseUNBQXlDLEVBQUU7WUFDcEQsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7UUFFRCxJQUFJLEVBQUUsS0FBSywyQ0FBMkMsRUFBRTtZQUN0RCxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsb0JBQW9CO1FBQ3BCLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xELElBQUk7Z0JBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFCO1lBQUMsV0FBTTtnQkFDTiw2QkFBNkI7YUFDOUI7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOztPQUVHO0lBQ0ssTUFBTSxDQUFDLFlBQVk7UUFDekIsT0FBTyxzQ0FBc0MsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVMsQ0FBQztZQUN2RSxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUMxQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUE1Y0QsMENBNGNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9kb21haW4vc2VtYW50aWMvZW50aXRpZXMvS25vd2xlZGdlT2JqZWN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogS25vd2xlZGdlT2JqZWN0IC0gVGhlIGZ1bmRhbWVudGFsIHNlbWFudGljIGVudGl0eSBpbiB0aGUgRXhvY29ydGV4IHN5c3RlbVxuICogUmVwcmVzZW50cyBhbnkgcGllY2Ugb2Yga25vd2xlZGdlIHdpdGggUkRGLWJhc2VkIHByb3BlcnRpZXMgYW5kIHJlbGF0aW9uc2hpcHNcbiAqL1xuXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi8uLi9jb3JlL0VudGl0eSc7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICcuLi8uLi9jb3JlL1Jlc3VsdCc7XG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJy4uL2NvcmUvR3JhcGgnO1xuaW1wb3J0IHsgVHJpcGxlLCBJUkksIExpdGVyYWwsIEJsYW5rTm9kZSwgUkRGLCBSREZTLCBFWE8gfSBmcm9tICcuLi9jb3JlL1RyaXBsZSc7XG5cbmV4cG9ydCB0eXBlIFVVSUQgPSBzdHJpbmc7XG5leHBvcnQgdHlwZSBNYXJrZG93bkNvbnRlbnQgPSBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS25vd2xlZGdlT2JqZWN0UHJvcHMge1xuICB1dWlkOiBVVUlEO1xuICB0eXBlOiBJUkk7XG4gIGdyYXBoOiBHcmFwaDtcbiAgY29udGVudD86IE1hcmtkb3duQ29udGVudDtcbiAgY3JlYXRlZEF0OiBEYXRlO1xuICB1cGRhdGVkQXQ6IERhdGU7XG59XG5cbi8qKlxuICogS25vd2xlZGdlT2JqZWN0IC0gQ29yZSBkb21haW4gZW50aXR5IGZvciBzZW1hbnRpYyBrbm93bGVkZ2UgbWFuYWdlbWVudFxuICogXG4gKiBEZXNpZ24gcHJpbmNpcGxlczpcbiAqIDEuIFByaXZhY3ktZmlyc3Q6IE9ubHkgVVVJRCBpcyBwdWJsaWMsIGFsbCBvdGhlciBkYXRhIGlzIHByaXZhdGVcbiAqIDIuIFNlbWFudGljOiBBbGwgcHJvcGVydGllcyBhcmUgUkRGIHRyaXBsZXMgd2l0aCBmb3JtYWwgc2VtYW50aWNzXG4gKiAzLiBFeHRlbnNpYmxlOiBOZXcgcHJvcGVydGllcyBjYW4gYmUgYWRkZWQgd2l0aG91dCBjb2RlIGNoYW5nZXNcbiAqIDQuIFZhbGlkYXRhYmxlOiBTSEFDTCBzaGFwZXMgZW5zdXJlIGRhdGEgaW50ZWdyaXR5XG4gKi9cbmV4cG9ydCBjbGFzcyBLbm93bGVkZ2VPYmplY3QgZXh0ZW5kcyBFbnRpdHk8S25vd2xlZGdlT2JqZWN0UHJvcHM+IHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcm9wczogS25vd2xlZGdlT2JqZWN0UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogRmFjdG9yeSBtZXRob2QgZm9yIGNyZWF0aW5nIGEgbmV3IEtub3dsZWRnZU9iamVjdFxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZShcbiAgICB0eXBlOiBJUkksXG4gICAgaW5pdGlhbFByb3BlcnRpZXM/OiBNYXA8SVJJLCBhbnk+LFxuICAgIGNvbnRlbnQ/OiBNYXJrZG93bkNvbnRlbnRcbiAgKTogUmVzdWx0PEtub3dsZWRnZU9iamVjdD4ge1xuICAgIGNvbnN0IHV1aWQgPSBjcnlwdG8ucmFuZG9tVVVJRCA/IGNyeXB0by5yYW5kb21VVUlEKCkgOiBLbm93bGVkZ2VPYmplY3QuZ2VuZXJhdGVVVUlEKCk7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBncmFwaCA9IG5ldyBHcmFwaCgpO1xuICAgIFxuICAgIC8vIENyZWF0ZSBzdWJqZWN0IElSSSBmcm9tIFVVSURcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IElSSShgdXJuOnV1aWQ6JHt1dWlkfWApO1xuICAgIFxuICAgIC8vIEFkZCBjb3JlIHRyaXBsZXNcbiAgICBncmFwaC5hZGQobmV3IFRyaXBsZShzdWJqZWN0LCBSREYudHlwZSwgdHlwZSkpO1xuICAgIGdyYXBoLmFkZChuZXcgVHJpcGxlKHN1YmplY3QsIEVYTy51dWlkLCBMaXRlcmFsLnN0cmluZyh1dWlkKSkpO1xuICAgIGdyYXBoLmFkZChuZXcgVHJpcGxlKHN1YmplY3QsIEVYTy5jcmVhdGVkQXQsIExpdGVyYWwuZGF0ZVRpbWUobm93KSkpO1xuICAgIGdyYXBoLmFkZChuZXcgVHJpcGxlKHN1YmplY3QsIEVYTy51cGRhdGVkQXQsIExpdGVyYWwuZGF0ZVRpbWUobm93KSkpO1xuICAgIFxuICAgIC8vIEFkZCBpbml0aWFsIHByb3BlcnRpZXNcbiAgICBpZiAoaW5pdGlhbFByb3BlcnRpZXMpIHtcbiAgICAgIGZvciAoY29uc3QgW3ByZWRpY2F0ZSwgdmFsdWVdIG9mIGluaXRpYWxQcm9wZXJ0aWVzKSB7XG4gICAgICAgIGNvbnN0IGxpdGVyYWwgPSBLbm93bGVkZ2VPYmplY3QudmFsdWVUb0xpdGVyYWwodmFsdWUpO1xuICAgICAgICBpZiAobGl0ZXJhbC5pc0ZhaWx1cmUpIHtcbiAgICAgICAgICByZXR1cm4gUmVzdWx0LmZhaWwobGl0ZXJhbC5lcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGguYWRkKG5ldyBUcmlwbGUoc3ViamVjdCwgcHJlZGljYXRlLCBsaXRlcmFsLmdldFZhbHVlKCkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgY29uc3QgcHJvcHM6IEtub3dsZWRnZU9iamVjdFByb3BzID0ge1xuICAgICAgdXVpZCxcbiAgICAgIHR5cGUsXG4gICAgICBncmFwaCxcbiAgICAgIGNvbnRlbnQsXG4gICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgIHVwZGF0ZWRBdDogbm93XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gUmVzdWx0Lm9rKG5ldyBLbm93bGVkZ2VPYmplY3QocHJvcHMpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNvbnN0cnVjdCBhIEtub3dsZWRnZU9iamVjdCBmcm9tIHN0b3JlZCBkYXRhXG4gICAqL1xuICBzdGF0aWMgZnJvbUdyYXBoKFxuICAgIHV1aWQ6IFVVSUQsXG4gICAgZ3JhcGg6IEdyYXBoLFxuICAgIGNvbnRlbnQ/OiBNYXJrZG93bkNvbnRlbnRcbiAgKTogUmVzdWx0PEtub3dsZWRnZU9iamVjdD4ge1xuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgSVJJKGB1cm46dXVpZDoke3V1aWR9YCk7XG4gICAgXG4gICAgLy8gR2V0IHR5cGVcbiAgICBjb25zdCB0eXBlVHJpcGxlcyA9IGdyYXBoLm1hdGNoKHN1YmplY3QsIFJERi50eXBlLCBudWxsKTtcbiAgICBpZiAodHlwZVRyaXBsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwoJ0tub3dsZWRnZSBvYmplY3QgaGFzIG5vIHR5cGUnKTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IHR5cGVUcmlwbGVzWzBdLmdldE9iamVjdCgpIGFzIElSSTtcbiAgICBcbiAgICAvLyBHZXQgdGltZXN0YW1wc1xuICAgIGNvbnN0IGNyZWF0ZWRUcmlwbGVzID0gZ3JhcGgubWF0Y2goc3ViamVjdCwgRVhPLmNyZWF0ZWRBdCwgbnVsbCk7XG4gICAgY29uc3QgdXBkYXRlZFRyaXBsZXMgPSBncmFwaC5tYXRjaChzdWJqZWN0LCBFWE8udXBkYXRlZEF0LCBudWxsKTtcbiAgICBcbiAgICBsZXQgY3JlYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgdXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICBcbiAgICBpZiAoY3JlYXRlZFRyaXBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbGl0ZXJhbCA9IGNyZWF0ZWRUcmlwbGVzWzBdLmdldE9iamVjdCgpIGFzIExpdGVyYWw7XG4gICAgICBjcmVhdGVkQXQgPSBuZXcgRGF0ZShsaXRlcmFsLmdldFZhbHVlKCkpO1xuICAgIH1cbiAgICBcbiAgICBpZiAodXBkYXRlZFRyaXBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbGl0ZXJhbCA9IHVwZGF0ZWRUcmlwbGVzWzBdLmdldE9iamVjdCgpIGFzIExpdGVyYWw7XG4gICAgICB1cGRhdGVkQXQgPSBuZXcgRGF0ZShsaXRlcmFsLmdldFZhbHVlKCkpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBwcm9wczogS25vd2xlZGdlT2JqZWN0UHJvcHMgPSB7XG4gICAgICB1dWlkLFxuICAgICAgdHlwZSxcbiAgICAgIGdyYXBoLFxuICAgICAgY29udGVudCxcbiAgICAgIGNyZWF0ZWRBdCxcbiAgICAgIHVwZGF0ZWRBdFxuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIFJlc3VsdC5vayhuZXcgS25vd2xlZGdlT2JqZWN0KHByb3BzKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBVVUlEIChwdWJsaWMgaWRlbnRpZmllcilcbiAgICovXG4gIGdldCB1dWlkKCk6IFVVSUQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnV1aWQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzZW1hbnRpYyB0eXBlXG4gICAqL1xuICBnZXQgdHlwZSgpOiBJUkkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnR5cGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb250ZW50IChpZiBhbnkpXG4gICAqL1xuICBnZXQgY29udGVudCgpOiBNYXJrZG93bkNvbnRlbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNvbnRlbnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNyZWF0aW9uIHRpbWVzdGFtcFxuICAgKi9cbiAgZ2V0IGNyZWF0ZWRBdCgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jcmVhdGVkQXQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGxhc3QgdXBkYXRlIHRpbWVzdGFtcFxuICAgKi9cbiAgZ2V0IHVwZGF0ZWRBdCgpOiBEYXRlIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy51cGRhdGVkQXQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzdWJqZWN0IElSSSBmb3IgdGhpcyBvYmplY3RcbiAgICovXG4gIGdldCBzdWJqZWN0KCk6IElSSSB7XG4gICAgcmV0dXJuIG5ldyBJUkkoYHVybjp1dWlkOiR7dGhpcy51dWlkfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIHByb3BlcnR5IHZhbHVlXG4gICAqL1xuICBzZXRQcm9wZXJ0eShwcmVkaWNhdGU6IElSSSwgdmFsdWU6IGFueSk6IFJlc3VsdDx2b2lkPiB7XG4gICAgY29uc3QgbGl0ZXJhbCA9IEtub3dsZWRnZU9iamVjdC52YWx1ZVRvTGl0ZXJhbCh2YWx1ZSk7XG4gICAgaWYgKGxpdGVyYWwuaXNGYWlsdXJlKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwobGl0ZXJhbC5lcnJvcik7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlbW92ZSBleGlzdGluZyB2YWx1ZXMgZm9yIHRoaXMgcHJlZGljYXRlXG4gICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgcHJlZGljYXRlLCBudWxsKTtcbiAgICBmb3IgKGNvbnN0IHRyaXBsZSBvZiBleGlzdGluZykge1xuICAgICAgdGhpcy5wcm9wcy5ncmFwaC5yZW1vdmUodHJpcGxlKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQWRkIG5ldyB2YWx1ZVxuICAgIHRoaXMucHJvcHMuZ3JhcGguYWRkKG5ldyBUcmlwbGUodGhpcy5zdWJqZWN0LCBwcmVkaWNhdGUsIGxpdGVyYWwuZ2V0VmFsdWUoKSkpO1xuICAgIFxuICAgIC8vIFVwZGF0ZSB0aW1lc3RhbXBcbiAgICB0aGlzLnVwZGF0ZVRpbWVzdGFtcCgpO1xuICAgIFxuICAgIHJldHVybiBSZXN1bHQub2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBwcm9wZXJ0eSB2YWx1ZVxuICAgKi9cbiAgZ2V0UHJvcGVydHkocHJlZGljYXRlOiBJUkkpOiBhbnkgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHRyaXBsZXMgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgcHJlZGljYXRlLCBudWxsKTtcbiAgICBpZiAodHJpcGxlcy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgXG4gICAgY29uc3Qgb2JqZWN0ID0gdHJpcGxlc1swXS5nZXRPYmplY3QoKTtcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgcmV0dXJuIEtub3dsZWRnZU9iamVjdC5saXRlcmFsVG9WYWx1ZShvYmplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0LnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBwcm9wZXJ0eSB2YWx1ZXMgZm9yIGEgcHJlZGljYXRlXG4gICAqL1xuICBnZXRQcm9wZXJ0aWVzKHByZWRpY2F0ZTogSVJJKTogYW55W10ge1xuICAgIGNvbnN0IHRyaXBsZXMgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgcHJlZGljYXRlLCBudWxsKTtcbiAgICByZXR1cm4gdHJpcGxlcy5tYXAodCA9PiB7XG4gICAgICBjb25zdCBvYmplY3QgPSB0LmdldE9iamVjdCgpO1xuICAgICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgICAgcmV0dXJuIEtub3dsZWRnZU9iamVjdC5saXRlcmFsVG9WYWx1ZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdC50b1N0cmluZygpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHByb3BlcnR5IHZhbHVlIChmb3IgbXVsdGktdmFsdWVkIHByb3BlcnRpZXMpXG4gICAqL1xuICBhZGRQcm9wZXJ0eShwcmVkaWNhdGU6IElSSSwgdmFsdWU6IGFueSk6IFJlc3VsdDx2b2lkPiB7XG4gICAgY29uc3QgbGl0ZXJhbCA9IEtub3dsZWRnZU9iamVjdC52YWx1ZVRvTGl0ZXJhbCh2YWx1ZSk7XG4gICAgaWYgKGxpdGVyYWwuaXNGYWlsdXJlKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwobGl0ZXJhbC5lcnJvcik7XG4gICAgfVxuICAgIFxuICAgIHRoaXMucHJvcHMuZ3JhcGguYWRkKG5ldyBUcmlwbGUodGhpcy5zdWJqZWN0LCBwcmVkaWNhdGUsIGxpdGVyYWwuZ2V0VmFsdWUoKSkpO1xuICAgIHRoaXMudXBkYXRlVGltZXN0YW1wKCk7XG4gICAgXG4gICAgcmV0dXJuIFJlc3VsdC5vaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHByb3BlcnR5IHZhbHVlXG4gICAqL1xuICByZW1vdmVQcm9wZXJ0eShwcmVkaWNhdGU6IElSSSwgdmFsdWU/OiBhbnkpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBSZW1vdmUgYWxsIHZhbHVlcyBmb3IgdGhpcyBwcmVkaWNhdGVcbiAgICAgIGNvbnN0IHRyaXBsZXMgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgcHJlZGljYXRlLCBudWxsKTtcbiAgICAgIGZvciAoY29uc3QgdHJpcGxlIG9mIHRyaXBsZXMpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5ncmFwaC5yZW1vdmUodHJpcGxlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmVtb3ZlIHNwZWNpZmljIHZhbHVlXG4gICAgICBjb25zdCBsaXRlcmFsID0gS25vd2xlZGdlT2JqZWN0LnZhbHVlVG9MaXRlcmFsKHZhbHVlKTtcbiAgICAgIGlmIChsaXRlcmFsLmlzRmFpbHVyZSkge1xuICAgICAgICByZXR1cm4gUmVzdWx0LmZhaWwobGl0ZXJhbC5lcnJvcik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHRyaXBsZXMgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgcHJlZGljYXRlLCBsaXRlcmFsLmdldFZhbHVlKCkpO1xuICAgICAgZm9yIChjb25zdCB0cmlwbGUgb2YgdHJpcGxlcykge1xuICAgICAgICB0aGlzLnByb3BzLmdyYXBoLnJlbW92ZSh0cmlwbGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB0aGlzLnVwZGF0ZVRpbWVzdGFtcCgpO1xuICAgIHJldHVybiBSZXN1bHQub2soKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSByZWxhdGlvbnNoaXAgdG8gYW5vdGhlciBLbm93bGVkZ2VPYmplY3RcbiAgICovXG4gIGFkZFJlbGF0aW9uKHByZWRpY2F0ZTogSVJJLCB0YXJnZXRVdWlkOiBVVUlEKTogUmVzdWx0PHZvaWQ+IHtcbiAgICBjb25zdCB0YXJnZXRJcmkgPSBuZXcgSVJJKGB1cm46dXVpZDoke3RhcmdldFV1aWR9YCk7XG4gICAgdGhpcy5wcm9wcy5ncmFwaC5hZGQobmV3IFRyaXBsZSh0aGlzLnN1YmplY3QsIHByZWRpY2F0ZSwgdGFyZ2V0SXJpKSk7XG4gICAgdGhpcy51cGRhdGVUaW1lc3RhbXAoKTtcbiAgICByZXR1cm4gUmVzdWx0Lm9rKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgcmVsYXRpb25zaGlwXG4gICAqL1xuICByZW1vdmVSZWxhdGlvbihwcmVkaWNhdGU6IElSSSwgdGFyZ2V0VXVpZDogVVVJRCk6IFJlc3VsdDx2b2lkPiB7XG4gICAgY29uc3QgdGFyZ2V0SXJpID0gbmV3IElSSShgdXJuOnV1aWQ6JHt0YXJnZXRVdWlkfWApO1xuICAgIGNvbnN0IHRyaXBsZXMgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgcHJlZGljYXRlLCB0YXJnZXRJcmkpO1xuICAgIGZvciAoY29uc3QgdHJpcGxlIG9mIHRyaXBsZXMpIHtcbiAgICAgIHRoaXMucHJvcHMuZ3JhcGgucmVtb3ZlKHRyaXBsZSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlVGltZXN0YW1wKCk7XG4gICAgcmV0dXJuIFJlc3VsdC5vaygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgcmVsYXRlZCBvYmplY3RzIGZvciBhIHByZWRpY2F0ZVxuICAgKi9cbiAgZ2V0UmVsYXRpb25zKHByZWRpY2F0ZTogSVJJKTogVVVJRFtdIHtcbiAgICBjb25zdCB0cmlwbGVzID0gdGhpcy5wcm9wcy5ncmFwaC5tYXRjaCh0aGlzLnN1YmplY3QsIHByZWRpY2F0ZSwgbnVsbCk7XG4gICAgY29uc3QgdXVpZHM6IFVVSURbXSA9IFtdO1xuICAgIFxuICAgIGZvciAoY29uc3QgdHJpcGxlIG9mIHRyaXBsZXMpIHtcbiAgICAgIGNvbnN0IG9iamVjdCA9IHRyaXBsZS5nZXRPYmplY3QoKTtcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBJUkkpIHtcbiAgICAgICAgY29uc3QgaXJpID0gb2JqZWN0LnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChpcmkuc3RhcnRzV2l0aCgndXJuOnV1aWQ6JykpIHtcbiAgICAgICAgICB1dWlkcy5wdXNoKGlyaS5zdWJzdHJpbmcoOSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB1dWlkcztcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgY29udGVudFxuICAgKi9cbiAgc2V0Q29udGVudChjb250ZW50OiBNYXJrZG93bkNvbnRlbnQpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIHRoaXMucHJvcHMuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgdGhpcy51cGRhdGVUaW1lc3RhbXAoKTtcbiAgICByZXR1cm4gUmVzdWx0Lm9rKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBwcm9wZXJ0aWVzIGFzIGEgbWFwXG4gICAqL1xuICBnZXRBbGxQcm9wZXJ0aWVzKCk6IE1hcDxJUkksIGFueVtdPiB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IG5ldyBNYXA8SVJJLCBhbnlbXT4oKTtcbiAgICBjb25zdCB0cmlwbGVzID0gdGhpcy5wcm9wcy5ncmFwaC5tYXRjaCh0aGlzLnN1YmplY3QsIG51bGwsIG51bGwpO1xuICAgIFxuICAgIGZvciAoY29uc3QgdHJpcGxlIG9mIHRyaXBsZXMpIHtcbiAgICAgIGNvbnN0IHByZWRpY2F0ZSA9IHRyaXBsZS5nZXRQcmVkaWNhdGUoKTtcbiAgICAgIGNvbnN0IG9iamVjdCA9IHRyaXBsZS5nZXRPYmplY3QoKTtcbiAgICAgIFxuICAgICAgaWYgKCFwcm9wZXJ0aWVzLmhhcyhwcmVkaWNhdGUpKSB7XG4gICAgICAgIHByb3BlcnRpZXMuc2V0KHByZWRpY2F0ZSwgW10pO1xuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgICBwcm9wZXJ0aWVzLmdldChwcmVkaWNhdGUpIS5wdXNoKEtub3dsZWRnZU9iamVjdC5saXRlcmFsVG9WYWx1ZShvYmplY3QpKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgSVJJKSB7XG4gICAgICAgIGNvbnN0IGlyaSA9IG9iamVjdC50b1N0cmluZygpO1xuICAgICAgICBpZiAoaXJpLnN0YXJ0c1dpdGgoJ3Vybjp1dWlkOicpKSB7XG4gICAgICAgICAgcHJvcGVydGllcy5nZXQocHJlZGljYXRlKSEucHVzaChpcmkuc3Vic3RyaW5nKDkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wZXJ0aWVzLmdldChwcmVkaWNhdGUpIS5wdXNoKGlyaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBSREYgZ3JhcGggZm9yIHRoaXMgb2JqZWN0XG4gICAqL1xuICBnZXRHcmFwaCgpOiBHcmFwaCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZ3JhcGguY2xvbmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnQgdG8gTi1UcmlwbGVzIGZvcm1hdFxuICAgKi9cbiAgdG9OVHJpcGxlcygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmdyYXBoLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhlIGtub3dsZWRnZSBvYmplY3RcbiAgICovXG4gIGNsb25lKCk6IEtub3dsZWRnZU9iamVjdCB7XG4gICAgY29uc3QgcHJvcHM6IEtub3dsZWRnZU9iamVjdFByb3BzID0ge1xuICAgICAgdXVpZDogdGhpcy5wcm9wcy51dWlkLFxuICAgICAgdHlwZTogdGhpcy5wcm9wcy50eXBlLFxuICAgICAgZ3JhcGg6IHRoaXMucHJvcHMuZ3JhcGguY2xvbmUoKSxcbiAgICAgIGNvbnRlbnQ6IHRoaXMucHJvcHMuY29udGVudCxcbiAgICAgIGNyZWF0ZWRBdDogdGhpcy5wcm9wcy5jcmVhdGVkQXQsXG4gICAgICB1cGRhdGVkQXQ6IHRoaXMucHJvcHMudXBkYXRlZEF0XG4gICAgfTtcbiAgICBcbiAgICByZXR1cm4gbmV3IEtub3dsZWRnZU9iamVjdChwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB0aW1lc3RhbXBcbiAgICovXG4gIHByaXZhdGUgdXBkYXRlVGltZXN0YW1wKCk6IHZvaWQge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVkQXQgPSBub3c7XG4gICAgXG4gICAgLy8gVXBkYXRlIGluIGdyYXBoXG4gICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnByb3BzLmdyYXBoLm1hdGNoKHRoaXMuc3ViamVjdCwgRVhPLnVwZGF0ZWRBdCwgbnVsbCk7XG4gICAgZm9yIChjb25zdCB0cmlwbGUgb2YgZXhpc3RpbmcpIHtcbiAgICAgIHRoaXMucHJvcHMuZ3JhcGgucmVtb3ZlKHRyaXBsZSk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMuZ3JhcGguYWRkKG5ldyBUcmlwbGUodGhpcy5zdWJqZWN0LCBFWE8udXBkYXRlZEF0LCBMaXRlcmFsLmRhdGVUaW1lKG5vdykpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgSmF2YVNjcmlwdCB2YWx1ZSB0byBhbiBSREYgTGl0ZXJhbFxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgdmFsdWVUb0xpdGVyYWwodmFsdWU6IGFueSk6IFJlc3VsdDxMaXRlcmFsIHwgSVJJPiB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbCgnQ2Fubm90IGNvbnZlcnQgbnVsbC91bmRlZmluZWQgdG8gbGl0ZXJhbCcpO1xuICAgIH1cbiAgICBcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gQ2hlY2sgaWYgaXQncyBhIFVVSUQgcmVmZXJlbmNlXG4gICAgICBpZiAodmFsdWUubWF0Y2goL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXs0fS1bMC05YS1mXXsxMn0kL2kpKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQub2sobmV3IElSSShgdXJuOnV1aWQ6JHt2YWx1ZX1gKSk7XG4gICAgICB9XG4gICAgICAvLyBDaGVjayBpZiBpdCdzIGFuIElSSVxuICAgICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSB8fCB2YWx1ZS5zdGFydHNXaXRoKCdodHRwczovLycpIHx8IHZhbHVlLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gUmVzdWx0Lm9rKG5ldyBJUkkodmFsdWUpKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIHN0cmluZyBsaXRlcmFsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZXN1bHQub2soTGl0ZXJhbC5zdHJpbmcodmFsdWUpKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gUmVzdWx0Lm9rKExpdGVyYWwuYm9vbGVhbih2YWx1ZSkpO1xuICAgIH1cbiAgICBcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQub2soTGl0ZXJhbC5pbnRlZ2VyKHZhbHVlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVzdWx0Lm9rKExpdGVyYWwuZG91YmxlKHZhbHVlKSk7XG4gICAgfVxuICAgIFxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiBSZXN1bHQub2soTGl0ZXJhbC5kYXRlVGltZSh2YWx1ZSkpO1xuICAgIH1cbiAgICBcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJUkkpIHtcbiAgICAgIHJldHVybiBSZXN1bHQub2sodmFsdWUpO1xuICAgIH1cbiAgICBcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICByZXR1cm4gUmVzdWx0Lm9rKHZhbHVlKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ29udmVydCBvYmplY3QgdG8gSlNPTiBzdHJpbmdcbiAgICByZXR1cm4gUmVzdWx0Lm9rKExpdGVyYWwuc3RyaW5nKEpTT04uc3RyaW5naWZ5KHZhbHVlKSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYW4gUkRGIExpdGVyYWwgdG8gYSBKYXZhU2NyaXB0IHZhbHVlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBsaXRlcmFsVG9WYWx1ZShsaXRlcmFsOiBMaXRlcmFsKTogYW55IHtcbiAgICBjb25zdCBkYXRhdHlwZSA9IGxpdGVyYWwuZ2V0RGF0YXR5cGUoKTtcbiAgICBjb25zdCB2YWx1ZSA9IGxpdGVyYWwuZ2V0VmFsdWUoKTtcbiAgICBcbiAgICBpZiAoIWRhdGF0eXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGR0ID0gZGF0YXR5cGUudG9TdHJpbmcoKTtcbiAgICBcbiAgICBpZiAoZHQgPT09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNib29sZWFuJykge1xuICAgICAgcmV0dXJuIHZhbHVlID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIFxuICAgIGlmIChkdCA9PT0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2ludGVnZXInKSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGR0ID09PSAnaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjZG91YmxlJykge1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoZHQgPT09ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNkYXRlVGltZScpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgfVxuICAgIFxuICAgIC8vIFRyeSB0byBwYXJzZSBKU09OXG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ3snKSB8fCB2YWx1ZS5zdGFydHNXaXRoKCdbJykpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBOb3QgSlNPTiwgcmV0dXJuIGFzIHN0cmluZ1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRmFsbGJhY2sgVVVJRCBnZW5lcmF0b3IgaWYgY3J5cHRvLnJhbmRvbVVVSUQgaXMgbm90IGF2YWlsYWJsZVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgZ2VuZXJhdGVVVUlEKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XG4gICAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbiAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==