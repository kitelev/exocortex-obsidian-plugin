9cdd06df800552e59dfdf8eeb4291605
"use strict";
/**
 * Modal for RDF Import functionality
 * Allows users to import RDF data from files and merge with existing graph
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportRDFModal = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const RDFParser_1 = require("../../application/services/RDFParser");
const NamespaceManager_1 = require("../../application/services/NamespaceManager");
class ImportRDFModal extends obsidian_1.Modal {
    constructor(app, graph, namespaceManager, onImport) {
        super(app);
        this.options = {
            mergeMode: 'merge',
            validateInput: true,
            strictMode: false
        };
        this.selectedFile = null;
        this.fileContent = '';
        this.graph = graph;
        this.namespaceManager = namespaceManager || new NamespaceManager_1.NamespaceManager();
        this.parser = new RDFParser_1.RDFParser(this.namespaceManager);
        this.onImport = onImport;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        // Title
        contentEl.createEl('h2', { text: 'Import RDF Data' });
        // Current graph statistics
        const currentStatsEl = contentEl.createDiv('current-stats');
        currentStatsEl.innerHTML = `
            <h3>Current Graph</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <span class="stat-label">Triples:</span>
                    <span class="stat-value">${this.graph.size()}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Subjects:</span>
                    <span class="stat-value">${this.graph.subjects().size}</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Predicates:</span>
                    <span class="stat-value">${this.graph.predicates().size}</span>
                </div>
            </div>
        `;
        // File selection
        const fileSection = contentEl.createDiv('file-selection');
        fileSection.createEl('h3', { text: 'Select File' });
        // File input
        const fileInputContainer = fileSection.createDiv('file-input-container');
        // Option 1: Select from vault
        new obsidian_1.Setting(fileInputContainer)
            .setName('Import from vault')
            .setDesc('Select an RDF file from your vault')
            .addButton(button => {
            button
                .setButtonText('Select File')
                .onClick(() => this.openVaultFilePicker());
        });
        // Option 2: Upload file
        const uploadContainer = fileInputContainer.createDiv('upload-container');
        uploadContainer.createEl('span', { text: 'Or upload file: ' });
        const fileInput = uploadContainer.createEl('input', { type: 'file' });
        fileInput.accept = '.ttl,.nt,.jsonld,.rdf,.n3,.xml';
        fileInput.addEventListener('change', (e) => this.handleFileUpload(e));
        // Selected file display
        const selectedFileEl = fileSection.createDiv('selected-file');
        selectedFileEl.style.display = 'none';
        // Format selection
        new obsidian_1.Setting(contentEl)
            .setName('RDF format')
            .setDesc('Specify format (auto-detected if not set)')
            .addDropdown(dropdown => {
            dropdown
                .addOption('', 'Auto-detect')
                .addOption('turtle', 'Turtle (.ttl)')
                .addOption('ntriples', 'N-Triples (.nt)')
                .addOption('jsonld', 'JSON-LD (.jsonld)')
                .addOption('rdfxml', 'RDF/XML (.rdf)')
                .setValue(this.options.format || '')
                .onChange(value => {
                this.options.format = value ? value : undefined;
                this.updatePreview();
            });
        });
        // Merge mode
        new obsidian_1.Setting(contentEl)
            .setName('Import mode')
            .setDesc('How to handle existing data')
            .addDropdown(dropdown => {
            dropdown
                .addOption('merge', 'Merge with existing graph')
                .addOption('replace', 'Replace entire graph')
                .setValue(this.options.mergeMode)
                .onChange(value => {
                this.options.mergeMode = value;
            });
        });
        // Base IRI setting
        new obsidian_1.Setting(contentEl)
            .setName('Base IRI')
            .setDesc('Optional base IRI for relative URIs')
            .addText(text => {
            text
                .setPlaceholder('https://example.org/data/')
                .setValue(this.options.baseIRI || '')
                .onChange(value => {
                this.options.baseIRI = value || undefined;
                this.updatePreview();
            });
        });
        // Validation options
        new obsidian_1.Setting(contentEl)
            .setName('Validate input')
            .setDesc('Validate RDF data during import')
            .addToggle(toggle => {
            toggle
                .setValue(this.options.validateInput)
                .onChange(value => {
                this.options.validateInput = value;
            });
        });
        new obsidian_1.Setting(contentEl)
            .setName('Strict mode')
            .setDesc('Fail import on any parsing errors')
            .addToggle(toggle => {
            toggle
                .setValue(this.options.strictMode)
                .onChange(value => {
                this.options.strictMode = value;
            });
        });
        // Preview section
        const previewContainer = contentEl.createDiv('import-preview');
        previewContainer.createEl('h3', { text: 'Preview' });
        const previewEl = previewContainer.createEl('div', { cls: 'preview-content' });
        previewEl.innerHTML = '<em>Select a file to see preview</em>';
        // Buttons
        const buttonContainer = contentEl.createDiv('import-buttons');
        buttonContainer.addClass('modal-button-container');
        // Import button
        const importButton = buttonContainer.createEl('button', {
            text: 'Import',
            cls: 'mod-cta'
        });
        importButton.disabled = true;
        importButton.onclick = () => this.handleImport();
        // Cancel button
        const cancelButton = buttonContainer.createEl('button', { text: 'Cancel' });
        cancelButton.onclick = () => this.close();
        // Store references
        this.updateUI();
        // Add styles
        this.addStyles();
    }
    /**
     * Open vault file picker
     */
    openVaultFilePicker() {
        // Get all files that might be RDF
        const files = this.app.vault.getFiles().filter(file => /\.(ttl|nt|jsonld|rdf|n3|xml)$/i.test(file.extension));
        if (files.length === 0) {
            new obsidian_1.Notice('No RDF files found in vault');
            return;
        }
        // Create a simple file picker (in a real implementation, you might use a more sophisticated picker)
        const picker = document.createElement('select');
        picker.innerHTML = '<option value="">Select file...</option>';
        for (const file of files) {
            const option = document.createElement('option');
            option.value = file.path;
            option.textContent = file.path;
            picker.appendChild(option);
        }
        picker.addEventListener('change', (e) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const selectedPath = e.target.value;
            if (selectedPath) {
                const file = this.app.vault.getAbstractFileByPath(selectedPath);
                if (file instanceof obsidian_1.TFile) {
                    yield this.selectVaultFile(file);
                }
            }
        }));
        // Add to modal (in a real implementation, this would be better integrated)
        const container = this.contentEl.querySelector('.file-input-container');
        if (container) {
            container.appendChild(picker);
        }
    }
    /**
     * Handle file upload from computer
     */
    handleFileUpload(event) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const input = event.target;
            const file = (_a = input.files) === null || _a === void 0 ? void 0 : _a[0];
            if (file) {
                try {
                    const content = yield this.readFile(file);
                    this.selectedFile = file;
                    this.fileContent = content;
                    this.updateUI();
                    this.updatePreview();
                }
                catch (error) {
                    new obsidian_1.Notice(`Error reading file: ${error.message}`);
                }
            }
        });
    }
    /**
     * Select file from vault
     */
    selectVaultFile(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const content = yield this.app.vault.read(file);
                this.selectedFile = file;
                this.fileContent = content;
                this.updateUI();
                this.updatePreview();
            }
            catch (error) {
                new obsidian_1.Notice(`Error reading vault file: ${error.message}`);
            }
        });
    }
    /**
     * Read file content
     */
    readFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => { var _a; return resolve((_a = e.target) === null || _a === void 0 ? void 0 : _a.result); };
            reader.onerror = (e) => reject(new Error('Failed to read file'));
            reader.readAsText(file);
        });
    }
    /**
     * Update UI state
     */
    updateUI() {
        // Update selected file display
        const selectedFileEl = this.contentEl.querySelector('.selected-file');
        if (selectedFileEl) {
            if (this.selectedFile) {
                const fileName = this.selectedFile instanceof obsidian_1.TFile
                    ? this.selectedFile.name
                    : this.selectedFile.name;
                selectedFileEl.innerHTML = `
                    <div class="selected-file-info">
                        <strong>Selected:</strong> ${fileName}
                        <span class="file-size">(${this.formatFileSize(this.fileContent.length)})</span>
                    </div>
                `;
                selectedFileEl.style.display = 'block';
            }
            else {
                selectedFileEl.style.display = 'none';
            }
        }
        // Enable/disable import button
        const importButton = this.contentEl.querySelector('button.mod-cta');
        if (importButton) {
            importButton.disabled = !this.selectedFile;
        }
    }
    /**
     * Update preview content
     */
    updatePreview() {
        var _a;
        const previewEl = this.contentEl.querySelector('.preview-content');
        if (!previewEl || !this.fileContent)
            return;
        try {
            const parseOptions = {
                format: this.options.format,
                baseIRI: this.options.baseIRI,
                namespaceManager: this.namespaceManager,
                validateInput: false,
                strictMode: false
            };
            const result = this.parser.parse(this.fileContent, parseOptions);
            if (result.isSuccess) {
                const parseResult = result.getValue();
                previewEl.innerHTML = `
                    <div class="preview-stats">
                        <h4>Import Preview</h4>
                        <div class="stats-grid">
                            <div class="stat-item">
                                <span class="stat-label">Triples:</span>
                                <span class="stat-value">${parseResult.tripleCount}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Subjects:</span>
                                <span class="stat-value">${parseResult.graph.subjects().size}</span>
                            </div>
                            <div class="stat-item">
                                <span class="stat-label">Predicates:</span>
                                <span class="stat-value">${parseResult.graph.predicates().size}</span>
                            </div>
                        </div>
                        ${Object.keys(parseResult.namespaces).length > 0 ? `
                            <div class="namespaces">
                                <strong>Namespaces found:</strong>
                                <ul>
                                    ${Object.entries(parseResult.namespaces)
                    .slice(0, 5)
                    .map(([prefix, uri]) => `<li>${prefix}: ${uri}</li>`)
                    .join('')}
                                    ${Object.keys(parseResult.namespaces).length > 5 ? '<li>... and more</li>' : ''}
                                </ul>
                            </div>
                        ` : ''}
                        ${((_a = parseResult.warnings) === null || _a === void 0 ? void 0 : _a.length) ? `
                            <div class="warnings">
                                <strong>Warnings:</strong>
                                <ul>
                                    ${parseResult.warnings.slice(0, 3).map(w => `<li>${w}</li>`).join('')}
                                    ${parseResult.warnings.length > 3 ? '<li>... and more</li>' : ''}
                                </ul>
                            </div>
                        ` : ''}
                    </div>
                    <div class="sample-triples">
                        <h4>Sample Triples</h4>
                        <pre class="triple-sample">${this.formatSampleTriples(parseResult.graph)}</pre>
                    </div>
                `;
            }
            else {
                previewEl.innerHTML = `
                    <div class="preview-error">
                        <strong>Parse Error:</strong> ${result.errorValue()}
                    </div>
                `;
            }
        }
        catch (error) {
            previewEl.innerHTML = `
                <div class="preview-error">
                    <strong>Preview Error:</strong> ${error.message}
                </div>
            `;
        }
    }
    /**
     * Format sample triples for display
     */
    formatSampleTriples(graph) {
        const triples = graph.toArray().slice(0, 5);
        return triples.map(triple => triple.toString()).join('\n') +
            (graph.size() > 5 ? '\n... and more' : '');
    }
    /**
     * Format file size
     */
    formatFileSize(bytes) {
        if (bytes < 1024)
            return bytes + ' B';
        if (bytes < 1024 * 1024)
            return Math.round(bytes / 1024) + ' KB';
        return Math.round(bytes / (1024 * 1024)) + ' MB';
    }
    /**
     * Handle import action
     */
    handleImport() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.selectedFile || !this.fileContent) {
                new obsidian_1.Notice('No file selected');
                return;
            }
            try {
                const parseOptions = {
                    format: this.options.format,
                    baseIRI: this.options.baseIRI,
                    namespaceManager: this.namespaceManager,
                    validateInput: this.options.validateInput,
                    strictMode: this.options.strictMode
                };
                const result = this.parser.parse(this.fileContent, parseOptions);
                if (result.isFailure) {
                    new obsidian_1.Notice(`Import failed: ${result.errorValue()}`);
                    return;
                }
                const parseResult = result.getValue();
                // Handle merge mode
                let finalGraph;
                if (this.options.mergeMode === 'replace') {
                    finalGraph = parseResult.graph;
                }
                else {
                    // Merge with existing graph
                    finalGraph = this.graph.clone();
                    finalGraph.merge(parseResult.graph);
                }
                // Call onImport callback
                if (this.onImport) {
                    this.onImport(parseResult.graph, this.options);
                }
                const message = this.options.mergeMode === 'replace'
                    ? `Replaced graph with ${parseResult.tripleCount} triples`
                    : `Added ${parseResult.tripleCount} triples to graph`;
                new obsidian_1.Notice(message);
                if ((_a = parseResult.warnings) === null || _a === void 0 ? void 0 : _a.length) {
                    new obsidian_1.Notice(`Warnings: ${parseResult.warnings.length} warnings found`, 3000);
                }
                if ((_b = parseResult.errors) === null || _b === void 0 ? void 0 : _b.length) {
                    new obsidian_1.Notice(`Errors: ${parseResult.errors.length} errors found`, 3000);
                }
                this.close();
            }
            catch (error) {
                new obsidian_1.Notice(`Import error: ${error.message}`);
            }
        });
    }
    /**
     * Add custom styles
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .current-stats, .preview-stats {
                margin-bottom: 20px;
                padding: 15px;
                background: var(--background-secondary);
                border-radius: 6px;
            }
            
            .stats-grid {
                display: flex;
                gap: 20px;
                margin-top: 10px;
            }
            
            .stat-item {
                display: flex;
                flex-direction: column;
                align-items: center;
            }
            
            .stat-label {
                font-size: 12px;
                color: var(--text-muted);
                margin-bottom: 2px;
            }
            
            .stat-value {
                font-size: 16px;
                font-weight: 600;
                color: var(--text-normal);
            }
            
            .file-selection {
                margin: 20px 0;
                padding: 15px;
                border: 1px solid var(--background-modifier-border);
                border-radius: 6px;
            }
            
            .file-input-container {
                margin: 10px 0;
            }
            
            .upload-container {
                margin: 10px 0;
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .selected-file {
                margin: 10px 0;
                padding: 10px;
                background: var(--background-primary-alt);
                border-radius: 4px;
            }
            
            .selected-file-info {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .file-size {
                color: var(--text-muted);
                font-size: 12px;
            }
            
            .preview-content {
                max-height: 300px;
                overflow-y: auto;
                padding: 15px;
                background: var(--background-secondary);
                border-radius: 6px;
            }
            
            .preview-error {
                color: var(--text-error);
                padding: 10px;
                background: var(--background-modifier-error);
                border-radius: 4px;
            }
            
            .namespaces, .warnings {
                margin: 10px 0;
            }
            
            .namespaces ul, .warnings ul {
                margin: 5px 0 0 20px;
                font-size: 12px;
            }
            
            .warnings {
                color: var(--text-warning);
            }
            
            .sample-triples {
                margin-top: 15px;
            }
            
            .triple-sample {
                font-family: var(--font-monospace);
                font-size: 11px;
                background: var(--background-primary);
                padding: 10px;
                border-radius: 4px;
                overflow-x: auto;
                margin: 5px 0 0 0;
            }
            
            .import-buttons {
                display: flex;
                gap: 10px;
                justify-content: flex-end;
                margin-top: 20px;
                padding-top: 20px;
                border-top: 1px solid var(--background-modifier-border);
            }
            
            .modal-button-container button {
                padding: 8px 16px;
                border-radius: 4px;
                border: 1px solid var(--background-modifier-border);
                background: var(--background-primary);
                color: var(--text-normal);
                cursor: pointer;
            }
            
            .modal-button-container button:hover:not(:disabled) {
                background: var(--background-secondary);
            }
            
            .modal-button-container button:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }
            
            .modal-button-container button.mod-cta:not(:disabled) {
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border-color: var(--interactive-accent);
            }
            
            .modal-button-container button.mod-cta:hover:not(:disabled) {
                background: var(--interactive-accent-hover);
                border-color: var(--interactive-accent-hover);
            }
        `;
        document.head.appendChild(style);
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
exports.ImportRDFModal = ImportRDFModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,