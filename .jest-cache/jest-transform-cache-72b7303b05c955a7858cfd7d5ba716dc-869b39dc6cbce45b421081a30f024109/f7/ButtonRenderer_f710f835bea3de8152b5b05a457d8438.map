{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/components/ButtonRenderer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/components/ButtonRenderer.ts"],"sourcesContent":["import { ButtonComponent, Modal, App, Setting, Notice } from \"obsidian\";\nimport {\n  RenderClassButtonsUseCase,\n  ButtonRenderData,\n} from \"../../application/use-cases/RenderClassButtonsUseCase\";\nimport { ExecuteButtonCommandUseCase } from \"../../application/use-cases/ExecuteButtonCommandUseCase\";\nimport { CommandParameter } from \"../../domain/entities/ButtonCommand\";\n\n/**\n * Presentation layer component for rendering buttons in asset views\n * Following Clean Architecture - this is a framework-specific adapter\n */\nexport class ButtonRenderer {\n  constructor(\n    private app: App,\n    private renderButtonsUseCase: RenderClassButtonsUseCase,\n    private executeCommandUseCase: ExecuteButtonCommandUseCase,\n  ) {}\n\n  /**\n   * Render buttons for a class view\n   */\n  async render(\n    container: HTMLElement,\n    className: string,\n    assetId?: string,\n    context?: any,\n  ): Promise<void> {\n    // Get buttons from use case\n    const result = await this.renderButtonsUseCase.execute({\n      className,\n      assetId,\n      context,\n    });\n\n    if (result.isFailure) {\n      console.error(`Failed to render buttons: ${result.error}`);\n      return;\n    }\n\n    const response = result.getValue();\n\n    if (!response.displayOptions.showButtons || response.buttons.length === 0) {\n      return;\n    }\n\n    // Create button container\n    const buttonContainer = container.createDiv({\n      cls: `exocortex-button-container exocortex-buttons-${response.displayOptions.position}`,\n    });\n\n    // Render each button\n    for (const buttonData of response.buttons) {\n      this.renderButton(buttonContainer, buttonData, assetId, context);\n    }\n  }\n\n  /**\n   * Render individual button\n   */\n  private renderButton(\n    container: HTMLElement,\n    buttonData: ButtonRenderData,\n    assetId?: string,\n    context?: any,\n  ): void {\n    const button = new ButtonComponent(container)\n      .setButtonText(buttonData.label)\n      .onClick(async () => {\n        await this.handleButtonClick(buttonData, assetId, context);\n      });\n\n    if (buttonData.tooltip) {\n      button.setTooltip(buttonData.tooltip);\n    }\n\n    if (!buttonData.isEnabled) {\n      button.setDisabled(true);\n    }\n\n    // Add custom CSS class for styling\n    button.buttonEl.addClass(\"exocortex-ui-button\");\n    button.buttonEl.setAttribute(\"data-button-id\", buttonData.buttonId);\n    button.buttonEl.setAttribute(\"data-order\", buttonData.order.toString());\n  }\n\n  /**\n   * Handle button click\n   */\n  private async handleButtonClick(\n    buttonData: ButtonRenderData,\n    assetId?: string,\n    context?: any,\n  ): Promise<void> {\n    // First execution attempt without parameters\n    const result = await this.executeCommandUseCase.execute({\n      buttonId: buttonData.buttonId,\n      assetId,\n      context,\n    });\n\n    if (result.isFailure) {\n      console.error(`Button execution failed: ${result.error}`);\n      // Show error notification\n      this.showNotification(`Error: ${result.error}`, \"error\");\n      return;\n    }\n\n    const response = result.getValue();\n\n    // Check if input is required\n    if (response.requiresInput && response.inputSchema) {\n      // Open input modal\n      const modal = new CommandInputModal(\n        this.app,\n        response.inputSchema,\n        async (inputValues) => {\n          // Execute with parameters\n          const execResult = await this.executeCommandUseCase.execute({\n            buttonId: buttonData.buttonId,\n            assetId,\n            inputParameters: inputValues,\n            context,\n          });\n\n          if (execResult.isFailure) {\n            this.showNotification(`Error: ${execResult.error}`, \"error\");\n          } else {\n            const execResponse = execResult.getValue();\n            if (execResponse.success) {\n              this.showNotification(\n                execResponse.message || \"Command executed successfully\",\n                \"success\",\n              );\n            }\n          }\n        },\n      );\n      modal.open();\n    } else if (response.success) {\n      // Command executed successfully\n      this.showNotification(\n        response.message || \"Command executed successfully\",\n        \"success\",\n      );\n    }\n  }\n\n  /**\n   * Show notification to user\n   */\n  private showNotification(\n    message: string,\n    type: \"success\" | \"error\" | \"info\",\n  ): void {\n    // In Obsidian, we use Notice for notifications\n    new Notice(message, type === \"error\" ? 5000 : 3000);\n  }\n}\n\n/**\n * Modal for collecting command input parameters\n */\nclass CommandInputModal extends Modal {\n  private inputValues: Record<string, any> = {};\n\n  constructor(\n    app: App,\n    private schema: {\n      title: string;\n      description?: string;\n      parameters: CommandParameter[];\n    },\n    private onSubmit: (values: Record<string, any>) => void,\n  ) {\n    super(app);\n  }\n\n  onOpen(): void {\n    const { contentEl } = this;\n\n    // Add title\n    contentEl.createEl(\"h2\", { text: this.schema.title });\n\n    // Add description if present\n    if (this.schema.description) {\n      contentEl.createEl(\"p\", {\n        text: this.schema.description,\n        cls: \"exocortex-modal-description\",\n      });\n    }\n\n    // Create form\n    const formEl = contentEl.createDiv({ cls: \"exocortex-command-form\" });\n\n    // Add input for each parameter\n    for (const param of this.schema.parameters) {\n      this.createParameterInput(formEl, param);\n    }\n\n    // Add buttons\n    const buttonContainer = contentEl.createDiv({\n      cls: \"modal-button-container\",\n    });\n\n    new Setting(buttonContainer)\n      .addButton((btn) =>\n        btn.setButtonText(\"Cancel\").onClick(() => this.close()),\n      )\n      .addButton((btn) =>\n        btn\n          .setButtonText(\"Execute\")\n          .setCta()\n          .onClick(() => {\n            // Validate required fields\n            const errors = this.validateInputs();\n            if (errors.length > 0) {\n              this.showErrors(errors);\n              return;\n            }\n\n            this.onSubmit(this.inputValues);\n            this.close();\n          }),\n      );\n  }\n\n  private createParameterInput(\n    container: HTMLElement,\n    param: CommandParameter,\n  ): void {\n    const setting = new Setting(container)\n      .setName(param.label || param.name)\n      .setDesc(param.description || \"\");\n\n    // Mark required fields\n    if (param.required) {\n      setting.nameEl.createSpan({ text: \" *\", cls: \"required-indicator\" });\n    }\n\n    // Create appropriate input based on type\n    switch (param.type) {\n      case \"string\":\n        setting.addText((text) => {\n          text.setPlaceholder(param.label || param.name);\n          if (param.defaultValue) {\n            text.setValue(param.defaultValue);\n            this.inputValues[param.name] = param.defaultValue;\n          }\n          text.onChange((value) => {\n            this.inputValues[param.name] = value;\n          });\n        });\n        break;\n\n      case \"number\":\n        setting.addText((text) => {\n          text.inputEl.type = \"number\";\n          if (param.defaultValue !== undefined) {\n            text.setValue(String(param.defaultValue));\n            this.inputValues[param.name] = param.defaultValue;\n          }\n          text.onChange((value) => {\n            this.inputValues[param.name] = Number(value);\n          });\n        });\n        break;\n\n      case \"boolean\":\n        setting.addToggle((toggle) => {\n          if (param.defaultValue !== undefined) {\n            toggle.setValue(param.defaultValue);\n            this.inputValues[param.name] = param.defaultValue;\n          }\n          toggle.onChange((value) => {\n            this.inputValues[param.name] = value;\n          });\n        });\n        break;\n\n      case \"date\":\n        setting.addText((text) => {\n          text.inputEl.type = \"date\";\n          if (param.defaultValue) {\n            text.setValue(param.defaultValue);\n            this.inputValues[param.name] = param.defaultValue;\n          }\n          text.onChange((value) => {\n            this.inputValues[param.name] = value;\n          });\n        });\n        break;\n\n      case \"asset\":\n        setting.addText((text) => {\n          text.setPlaceholder(\"[[Asset Name]]\");\n          if (param.defaultValue) {\n            text.setValue(param.defaultValue);\n            this.inputValues[param.name] = param.defaultValue;\n          }\n          text.onChange((value) => {\n            // Ensure it's in wiki link format\n            if (value && !value.startsWith(\"[[\")) {\n              value = `[[${value}]]`;\n            }\n            this.inputValues[param.name] = value;\n          });\n        });\n        break;\n\n      case \"array\":\n        setting.addTextArea((textarea) => {\n          textarea.setPlaceholder(\"One item per line\");\n          if (param.defaultValue) {\n            const defaultText = Array.isArray(param.defaultValue)\n              ? param.defaultValue.join(\"\\n\")\n              : param.defaultValue;\n            textarea.setValue(defaultText);\n            this.inputValues[param.name] = param.defaultValue;\n          }\n          textarea.onChange((value) => {\n            this.inputValues[param.name] = value\n              .split(\"\\n\")\n              .filter((v) => v.trim());\n          });\n        });\n        break;\n\n      default:\n        // Default to text input\n        setting.addText((text) => {\n          text.onChange((value) => {\n            this.inputValues[param.name] = value;\n          });\n        });\n    }\n  }\n\n  private validateInputs(): string[] {\n    const errors: string[] = [];\n\n    for (const param of this.schema.parameters) {\n      if (param.required) {\n        const value = this.inputValues[param.name];\n        if (value === undefined || value === null || value === \"\") {\n          errors.push(`${param.label || param.name} is required`);\n        }\n      }\n\n      // Custom validation if provided\n      if (param.validation && this.inputValues[param.name]) {\n        try {\n          const regex = new RegExp(param.validation);\n          if (!regex.test(String(this.inputValues[param.name]))) {\n            errors.push(`${param.label || param.name} format is invalid`);\n          }\n        } catch (e) {\n          // Invalid regex, skip validation\n        }\n      }\n    }\n\n    return errors;\n  }\n\n  private showErrors(errors: string[]): void {\n    // Show errors in a notice\n    const errorMessage =\n      \"Please fix the following errors:\\n\" + errors.join(\"\\n\");\n    new Notice(errorMessage, 5000);\n  }\n\n  onClose(): void {\n    const { contentEl } = this;\n    contentEl.empty();\n  }\n}\n"],"version":3}