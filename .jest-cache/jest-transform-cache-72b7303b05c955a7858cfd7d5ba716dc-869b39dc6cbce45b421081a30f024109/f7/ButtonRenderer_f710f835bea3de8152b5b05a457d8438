976ef403aa6d35768baf4c3f54e3cabb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonRenderer = void 0;
const obsidian_1 = require("obsidian");
/**
 * Presentation layer component for rendering buttons in asset views
 * Following Clean Architecture - this is a framework-specific adapter
 */
class ButtonRenderer {
    constructor(app, renderButtonsUseCase, executeCommandUseCase) {
        this.app = app;
        this.renderButtonsUseCase = renderButtonsUseCase;
        this.executeCommandUseCase = executeCommandUseCase;
    }
    /**
     * Render buttons for a class view
     */
    async render(container, className, assetId, context) {
        // Get buttons from use case
        const result = await this.renderButtonsUseCase.execute({
            className,
            assetId,
            context,
        });
        if (result.isFailure) {
            console.error(`Failed to render buttons: ${result.error}`);
            return;
        }
        const response = result.getValue();
        if (!response.displayOptions.showButtons || response.buttons.length === 0) {
            return;
        }
        // Create button container
        const buttonContainer = container.createDiv({
            cls: `exocortex-button-container exocortex-buttons-${response.displayOptions.position}`,
        });
        // Render each button
        for (const buttonData of response.buttons) {
            this.renderButton(buttonContainer, buttonData, assetId, context);
        }
    }
    /**
     * Render individual button
     */
    renderButton(container, buttonData, assetId, context) {
        const button = new obsidian_1.ButtonComponent(container)
            .setButtonText(buttonData.label)
            .onClick(async () => {
            await this.handleButtonClick(buttonData, assetId, context);
        });
        if (buttonData.tooltip) {
            button.setTooltip(buttonData.tooltip);
        }
        if (!buttonData.isEnabled) {
            button.setDisabled(true);
        }
        // Add custom CSS class for styling
        button.buttonEl.addClass("exocortex-ui-button");
        button.buttonEl.setAttribute("data-button-id", buttonData.buttonId);
        button.buttonEl.setAttribute("data-order", buttonData.order.toString());
    }
    /**
     * Handle button click
     */
    async handleButtonClick(buttonData, assetId, context) {
        // First execution attempt without parameters
        const result = await this.executeCommandUseCase.execute({
            buttonId: buttonData.buttonId,
            assetId,
            context,
        });
        if (result.isFailure) {
            console.error(`Button execution failed: ${result.error}`);
            // Show error notification
            this.showNotification(`Error: ${result.error}`, "error");
            return;
        }
        const response = result.getValue();
        // Check if input is required
        if (response.requiresInput && response.inputSchema) {
            // Open input modal
            const modal = new CommandInputModal(this.app, response.inputSchema, async (inputValues) => {
                // Execute with parameters
                const execResult = await this.executeCommandUseCase.execute({
                    buttonId: buttonData.buttonId,
                    assetId,
                    inputParameters: inputValues,
                    context,
                });
                if (execResult.isFailure) {
                    this.showNotification(`Error: ${execResult.error}`, "error");
                }
                else {
                    const execResponse = execResult.getValue();
                    if (execResponse.success) {
                        this.showNotification(execResponse.message || "Command executed successfully", "success");
                    }
                }
            });
            modal.open();
        }
        else if (response.success) {
            // Command executed successfully
            this.showNotification(response.message || "Command executed successfully", "success");
        }
    }
    /**
     * Show notification to user
     */
    showNotification(message, type) {
        // In Obsidian, we use Notice for notifications
        new obsidian_1.Notice(message, type === "error" ? 5000 : 3000);
    }
}
exports.ButtonRenderer = ButtonRenderer;
/**
 * Modal for collecting command input parameters
 */
class CommandInputModal extends obsidian_1.Modal {
    constructor(app, schema, onSubmit) {
        super(app);
        this.schema = schema;
        this.onSubmit = onSubmit;
        this.inputValues = {};
    }
    onOpen() {
        const { contentEl } = this;
        // Add title
        contentEl.createEl("h2", { text: this.schema.title });
        // Add description if present
        if (this.schema.description) {
            contentEl.createEl("p", {
                text: this.schema.description,
                cls: "exocortex-modal-description",
            });
        }
        // Create form
        const formEl = contentEl.createDiv({ cls: "exocortex-command-form" });
        // Add input for each parameter
        for (const param of this.schema.parameters) {
            this.createParameterInput(formEl, param);
        }
        // Add buttons
        const buttonContainer = contentEl.createDiv({
            cls: "modal-button-container",
        });
        new obsidian_1.Setting(buttonContainer)
            .addButton((btn) => btn.setButtonText("Cancel").onClick(() => this.close()))
            .addButton((btn) => btn
            .setButtonText("Execute")
            .setCta()
            .onClick(() => {
            // Validate required fields
            const errors = this.validateInputs();
            if (errors.length > 0) {
                this.showErrors(errors);
                return;
            }
            this.onSubmit(this.inputValues);
            this.close();
        }));
    }
    createParameterInput(container, param) {
        const setting = new obsidian_1.Setting(container)
            .setName(param.label || param.name)
            .setDesc(param.description || "");
        // Mark required fields
        if (param.required) {
            setting.nameEl.createSpan({ text: " *", cls: "required-indicator" });
        }
        // Create appropriate input based on type
        switch (param.type) {
            case "string":
                setting.addText((text) => {
                    text.setPlaceholder(param.label || param.name);
                    if (param.defaultValue) {
                        text.setValue(param.defaultValue);
                        this.inputValues[param.name] = param.defaultValue;
                    }
                    text.onChange((value) => {
                        this.inputValues[param.name] = value;
                    });
                });
                break;
            case "number":
                setting.addText((text) => {
                    text.inputEl.type = "number";
                    if (param.defaultValue !== undefined) {
                        text.setValue(String(param.defaultValue));
                        this.inputValues[param.name] = param.defaultValue;
                    }
                    text.onChange((value) => {
                        this.inputValues[param.name] = Number(value);
                    });
                });
                break;
            case "boolean":
                setting.addToggle((toggle) => {
                    if (param.defaultValue !== undefined) {
                        toggle.setValue(param.defaultValue);
                        this.inputValues[param.name] = param.defaultValue;
                    }
                    toggle.onChange((value) => {
                        this.inputValues[param.name] = value;
                    });
                });
                break;
            case "date":
                setting.addText((text) => {
                    text.inputEl.type = "date";
                    if (param.defaultValue) {
                        text.setValue(param.defaultValue);
                        this.inputValues[param.name] = param.defaultValue;
                    }
                    text.onChange((value) => {
                        this.inputValues[param.name] = value;
                    });
                });
                break;
            case "asset":
                setting.addText((text) => {
                    text.setPlaceholder("[[Asset Name]]");
                    if (param.defaultValue) {
                        text.setValue(param.defaultValue);
                        this.inputValues[param.name] = param.defaultValue;
                    }
                    text.onChange((value) => {
                        // Ensure it's in wiki link format
                        if (value && !value.startsWith("[[")) {
                            value = `[[${value}]]`;
                        }
                        this.inputValues[param.name] = value;
                    });
                });
                break;
            case "array":
                setting.addTextArea((textarea) => {
                    textarea.setPlaceholder("One item per line");
                    if (param.defaultValue) {
                        const defaultText = Array.isArray(param.defaultValue)
                            ? param.defaultValue.join("\n")
                            : param.defaultValue;
                        textarea.setValue(defaultText);
                        this.inputValues[param.name] = param.defaultValue;
                    }
                    textarea.onChange((value) => {
                        this.inputValues[param.name] = value
                            .split("\n")
                            .filter((v) => v.trim());
                    });
                });
                break;
            default:
                // Default to text input
                setting.addText((text) => {
                    text.onChange((value) => {
                        this.inputValues[param.name] = value;
                    });
                });
        }
    }
    validateInputs() {
        const errors = [];
        for (const param of this.schema.parameters) {
            if (param.required) {
                const value = this.inputValues[param.name];
                if (value === undefined || value === null || value === "") {
                    errors.push(`${param.label || param.name} is required`);
                }
            }
            // Custom validation if provided
            if (param.validation && this.inputValues[param.name]) {
                try {
                    const regex = new RegExp(param.validation);
                    if (!regex.test(String(this.inputValues[param.name]))) {
                        errors.push(`${param.label || param.name} format is invalid`);
                    }
                }
                catch (e) {
                    // Invalid regex, skip validation
                }
            }
        }
        return errors;
    }
    showErrors(errors) {
        // Show errors in a notice
        const errorMessage = "Please fix the following errors:\n" + errors.join("\n");
        new obsidian_1.Notice(errorMessage, 5000);
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9jb21wb25lbnRzL0J1dHRvblJlbmRlcmVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUF3RTtBQVF4RTs7O0dBR0c7QUFDSCxNQUFhLGNBQWM7SUFDekIsWUFDVSxHQUFRLEVBQ1Isb0JBQStDLEVBQy9DLHFCQUFrRDtRQUZsRCxRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQ1IseUJBQW9CLEdBQXBCLG9CQUFvQixDQUEyQjtRQUMvQywwQkFBcUIsR0FBckIscUJBQXFCLENBQTZCO0lBQ3pELENBQUM7SUFFSjs7T0FFRztJQUNILEtBQUssQ0FBQyxNQUFNLENBQ1YsU0FBc0IsRUFDdEIsU0FBaUIsRUFDakIsT0FBZ0IsRUFDaEIsT0FBYTtRQUViLDRCQUE0QjtRQUM1QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7WUFDckQsU0FBUztZQUNULE9BQU87WUFDUCxPQUFPO1NBQ1IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQzNELE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVuQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pFLE9BQU87U0FDUjtRQUVELDBCQUEwQjtRQUMxQixNQUFNLGVBQWUsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDO1lBQzFDLEdBQUcsRUFBRSxnREFBZ0QsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7U0FDeEYsQ0FBQyxDQUFDO1FBRUgscUJBQXFCO1FBQ3JCLEtBQUssTUFBTSxVQUFVLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRTtZQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ2xFO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ssWUFBWSxDQUNsQixTQUFzQixFQUN0QixVQUE0QixFQUM1QixPQUFnQixFQUNoQixPQUFhO1FBRWIsTUFBTSxNQUFNLEdBQUcsSUFBSSwwQkFBZSxDQUFDLFNBQVMsQ0FBQzthQUMxQyxhQUFhLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQzthQUMvQixPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDbEIsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVMLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRTtZQUN0QixNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QztRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7UUFFRCxtQ0FBbUM7UUFDbkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQ7O09BRUc7SUFDSyxLQUFLLENBQUMsaUJBQWlCLENBQzdCLFVBQTRCLEVBQzVCLE9BQWdCLEVBQ2hCLE9BQWE7UUFFYiw2Q0FBNkM7UUFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDO1lBQ3RELFFBQVEsRUFBRSxVQUFVLENBQUMsUUFBUTtZQUM3QixPQUFPO1lBQ1AsT0FBTztTQUNSLENBQUMsQ0FBQztRQUVILElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUMxRCwwQkFBMEI7WUFDMUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3pELE9BQU87U0FDUjtRQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVuQyw2QkFBNkI7UUFDN0IsSUFBSSxRQUFRLENBQUMsYUFBYSxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUU7WUFDbEQsbUJBQW1CO1lBQ25CLE1BQU0sS0FBSyxHQUFHLElBQUksaUJBQWlCLENBQ2pDLElBQUksQ0FBQyxHQUFHLEVBQ1IsUUFBUSxDQUFDLFdBQVcsRUFDcEIsS0FBSyxFQUFFLFdBQVcsRUFBRSxFQUFFO2dCQUNwQiwwQkFBMEI7Z0JBQzFCLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQztvQkFDMUQsUUFBUSxFQUFFLFVBQVUsQ0FBQyxRQUFRO29CQUM3QixPQUFPO29CQUNQLGVBQWUsRUFBRSxXQUFXO29CQUM1QixPQUFPO2lCQUNSLENBQUMsQ0FBQztnQkFFSCxJQUFJLFVBQVUsQ0FBQyxTQUFTLEVBQUU7b0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDOUQ7cUJBQU07b0JBQ0wsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQUMzQyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7d0JBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FDbkIsWUFBWSxDQUFDLE9BQU8sSUFBSSwrQkFBK0IsRUFDdkQsU0FBUyxDQUNWLENBQUM7cUJBQ0g7aUJBQ0Y7WUFDSCxDQUFDLENBQ0YsQ0FBQztZQUNGLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNkO2FBQU0sSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFO1lBQzNCLGdDQUFnQztZQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQ25CLFFBQVEsQ0FBQyxPQUFPLElBQUksK0JBQStCLEVBQ25ELFNBQVMsQ0FDVixDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSyxnQkFBZ0IsQ0FDdEIsT0FBZSxFQUNmLElBQWtDO1FBRWxDLCtDQUErQztRQUMvQyxJQUFJLGlCQUFNLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUNGO0FBbEpELHdDQWtKQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxpQkFBa0IsU0FBUSxnQkFBSztJQUduQyxZQUNFLEdBQVEsRUFDQSxNQUlQLEVBQ08sUUFBK0M7UUFFdkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBUEgsV0FBTSxHQUFOLE1BQU0sQ0FJYjtRQUNPLGFBQVEsR0FBUixRQUFRLENBQXVDO1FBVGpELGdCQUFXLEdBQXdCLEVBQUUsQ0FBQztJQVk5QyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFFM0IsWUFBWTtRQUNaLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUV0RCw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUMzQixTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVztnQkFDN0IsR0FBRyxFQUFFLDZCQUE2QjthQUNuQyxDQUFDLENBQUM7U0FDSjtRQUVELGNBQWM7UUFDZCxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxFQUFFLHdCQUF3QixFQUFFLENBQUMsQ0FBQztRQUV0RSwrQkFBK0I7UUFDL0IsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUMxQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzFDO1FBRUQsY0FBYztRQUNkLE1BQU0sZUFBZSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDMUMsR0FBRyxFQUFFLHdCQUF3QjtTQUM5QixDQUFDLENBQUM7UUFFSCxJQUFJLGtCQUFPLENBQUMsZUFBZSxDQUFDO2FBQ3pCLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ2pCLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUN4RDthQUNBLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ2pCLEdBQUc7YUFDQSxhQUFhLENBQUMsU0FBUyxDQUFDO2FBQ3hCLE1BQU0sRUFBRTthQUNSLE9BQU8sQ0FBQyxHQUFHLEVBQUU7WUFDWiwyQkFBMkI7WUFDM0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3JDLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ3hCLE9BQU87YUFDUjtZQUVELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNmLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDO0lBRU8sb0JBQW9CLENBQzFCLFNBQXNCLEVBQ3RCLEtBQXVCO1FBRXZCLE1BQU0sT0FBTyxHQUFHLElBQUksa0JBQU8sQ0FBQyxTQUFTLENBQUM7YUFDbkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQzthQUNsQyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVwQyx1QkFBdUI7UUFDdkIsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQseUNBQXlDO1FBQ3pDLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNsQixLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO29CQUN2QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUMvQyxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7d0JBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO3FCQUNuRDtvQkFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7d0JBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDdkMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTTtZQUVSLEtBQUssUUFBUTtnQkFDWCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztvQkFDN0IsSUFBSSxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTt3QkFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7d0JBQzFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7cUJBQ25EO29CQUNELElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTt3QkFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUMvQyxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNO1lBRVIsS0FBSyxTQUFTO2dCQUNaLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDM0IsSUFBSSxLQUFLLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTt3QkFDcEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7d0JBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7cUJBQ25EO29CQUNELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTt3QkFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUN2QyxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNO1lBRVIsS0FBSyxNQUFNO2dCQUNULE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO29CQUMzQixJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUU7d0JBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO3dCQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO3FCQUNuRDtvQkFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7d0JBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDdkMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTTtZQUVSLEtBQUssT0FBTztnQkFDVixPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztvQkFDdEMsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO3dCQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzt3QkFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztxQkFDbkQ7b0JBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO3dCQUN0QixrQ0FBa0M7d0JBQ2xDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTs0QkFDcEMsS0FBSyxHQUFHLEtBQUssS0FBSyxJQUFJLENBQUM7eUJBQ3hCO3dCQUNELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDdkMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTTtZQUVSLEtBQUssT0FBTztnQkFDVixPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7b0JBQy9CLFFBQVEsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO3dCQUN0QixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUM7NEJBQ25ELENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7NEJBQy9CLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO3dCQUN2QixRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO3FCQUNuRDtvQkFDRCxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7d0JBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUs7NkJBQ2pDLEtBQUssQ0FBQyxJQUFJLENBQUM7NkJBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztvQkFDN0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsTUFBTTtZQUVSO2dCQUNFLHdCQUF3QjtnQkFDeEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO29CQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7d0JBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDdkMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNILENBQUM7SUFFTyxjQUFjO1FBQ3BCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztRQUU1QixLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzFDLElBQUksS0FBSyxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNDLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFLEVBQUU7b0JBQ3pELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDO2lCQUN6RDthQUNGO1lBRUQsZ0NBQWdDO1lBQ2hDLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDcEQsSUFBSTtvQkFDRixNQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLG9CQUFvQixDQUFDLENBQUM7cUJBQy9EO2lCQUNGO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNWLGlDQUFpQztpQkFDbEM7YUFDRjtTQUNGO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVPLFVBQVUsQ0FBQyxNQUFnQjtRQUNqQywwQkFBMEI7UUFDMUIsTUFBTSxZQUFZLEdBQ2hCLG9DQUFvQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsSUFBSSxpQkFBTSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDM0IsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BCLENBQUM7Q0FDRiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvcHJlc2VudGF0aW9uL2NvbXBvbmVudHMvQnV0dG9uUmVuZGVyZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnV0dG9uQ29tcG9uZW50LCBNb2RhbCwgQXBwLCBTZXR0aW5nLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7XG4gIFJlbmRlckNsYXNzQnV0dG9uc1VzZUNhc2UsXG4gIEJ1dHRvblJlbmRlckRhdGEsXG59IGZyb20gXCIuLi8uLi9hcHBsaWNhdGlvbi91c2UtY2FzZXMvUmVuZGVyQ2xhc3NCdXR0b25zVXNlQ2FzZVwiO1xuaW1wb3J0IHsgRXhlY3V0ZUJ1dHRvbkNvbW1hbmRVc2VDYXNlIH0gZnJvbSBcIi4uLy4uL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9FeGVjdXRlQnV0dG9uQ29tbWFuZFVzZUNhc2VcIjtcbmltcG9ydCB7IENvbW1hbmRQYXJhbWV0ZXIgfSBmcm9tIFwiLi4vLi4vZG9tYWluL2VudGl0aWVzL0J1dHRvbkNvbW1hbmRcIjtcblxuLyoqXG4gKiBQcmVzZW50YXRpb24gbGF5ZXIgY29tcG9uZW50IGZvciByZW5kZXJpbmcgYnV0dG9ucyBpbiBhc3NldCB2aWV3c1xuICogRm9sbG93aW5nIENsZWFuIEFyY2hpdGVjdHVyZSAtIHRoaXMgaXMgYSBmcmFtZXdvcmstc3BlY2lmaWMgYWRhcHRlclxuICovXG5leHBvcnQgY2xhc3MgQnV0dG9uUmVuZGVyZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFwcDogQXBwLFxuICAgIHByaXZhdGUgcmVuZGVyQnV0dG9uc1VzZUNhc2U6IFJlbmRlckNsYXNzQnV0dG9uc1VzZUNhc2UsXG4gICAgcHJpdmF0ZSBleGVjdXRlQ29tbWFuZFVzZUNhc2U6IEV4ZWN1dGVCdXR0b25Db21tYW5kVXNlQ2FzZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYnV0dG9ucyBmb3IgYSBjbGFzcyB2aWV3XG4gICAqL1xuICBhc3luYyByZW5kZXIoXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBhc3NldElkPzogc3RyaW5nLFxuICAgIGNvbnRleHQ/OiBhbnksXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIC8vIEdldCBidXR0b25zIGZyb20gdXNlIGNhc2VcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnJlbmRlckJ1dHRvbnNVc2VDYXNlLmV4ZWN1dGUoe1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgYXNzZXRJZCxcbiAgICAgIGNvbnRleHQsXG4gICAgfSk7XG5cbiAgICBpZiAocmVzdWx0LmlzRmFpbHVyZSkge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlbmRlciBidXR0b25zOiAke3Jlc3VsdC5lcnJvcn1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZXNwb25zZSA9IHJlc3VsdC5nZXRWYWx1ZSgpO1xuXG4gICAgaWYgKCFyZXNwb25zZS5kaXNwbGF5T3B0aW9ucy5zaG93QnV0dG9ucyB8fCByZXNwb25zZS5idXR0b25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBidXR0b24gY29udGFpbmVyXG4gICAgY29uc3QgYnV0dG9uQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdih7XG4gICAgICBjbHM6IGBleG9jb3J0ZXgtYnV0dG9uLWNvbnRhaW5lciBleG9jb3J0ZXgtYnV0dG9ucy0ke3Jlc3BvbnNlLmRpc3BsYXlPcHRpb25zLnBvc2l0aW9ufWAsXG4gICAgfSk7XG5cbiAgICAvLyBSZW5kZXIgZWFjaCBidXR0b25cbiAgICBmb3IgKGNvbnN0IGJ1dHRvbkRhdGEgb2YgcmVzcG9uc2UuYnV0dG9ucykge1xuICAgICAgdGhpcy5yZW5kZXJCdXR0b24oYnV0dG9uQ29udGFpbmVyLCBidXR0b25EYXRhLCBhc3NldElkLCBjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGluZGl2aWR1YWwgYnV0dG9uXG4gICAqL1xuICBwcml2YXRlIHJlbmRlckJ1dHRvbihcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIGJ1dHRvbkRhdGE6IEJ1dHRvblJlbmRlckRhdGEsXG4gICAgYXNzZXRJZD86IHN0cmluZyxcbiAgICBjb250ZXh0PzogYW55LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRhaW5lcilcbiAgICAgIC5zZXRCdXR0b25UZXh0KGJ1dHRvbkRhdGEubGFiZWwpXG4gICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuaGFuZGxlQnV0dG9uQ2xpY2soYnV0dG9uRGF0YSwgYXNzZXRJZCwgY29udGV4dCk7XG4gICAgICB9KTtcblxuICAgIGlmIChidXR0b25EYXRhLnRvb2x0aXApIHtcbiAgICAgIGJ1dHRvbi5zZXRUb29sdGlwKGJ1dHRvbkRhdGEudG9vbHRpcCk7XG4gICAgfVxuXG4gICAgaWYgKCFidXR0b25EYXRhLmlzRW5hYmxlZCkge1xuICAgICAgYnV0dG9uLnNldERpc2FibGVkKHRydWUpO1xuICAgIH1cblxuICAgIC8vIEFkZCBjdXN0b20gQ1NTIGNsYXNzIGZvciBzdHlsaW5nXG4gICAgYnV0dG9uLmJ1dHRvbkVsLmFkZENsYXNzKFwiZXhvY29ydGV4LXVpLWJ1dHRvblwiKTtcbiAgICBidXR0b24uYnV0dG9uRWwuc2V0QXR0cmlidXRlKFwiZGF0YS1idXR0b24taWRcIiwgYnV0dG9uRGF0YS5idXR0b25JZCk7XG4gICAgYnV0dG9uLmJ1dHRvbkVsLnNldEF0dHJpYnV0ZShcImRhdGEtb3JkZXJcIiwgYnV0dG9uRGF0YS5vcmRlci50b1N0cmluZygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYnV0dG9uIGNsaWNrXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIGhhbmRsZUJ1dHRvbkNsaWNrKFxuICAgIGJ1dHRvbkRhdGE6IEJ1dHRvblJlbmRlckRhdGEsXG4gICAgYXNzZXRJZD86IHN0cmluZyxcbiAgICBjb250ZXh0PzogYW55LFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBGaXJzdCBleGVjdXRpb24gYXR0ZW1wdCB3aXRob3V0IHBhcmFtZXRlcnNcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVDb21tYW5kVXNlQ2FzZS5leGVjdXRlKHtcbiAgICAgIGJ1dHRvbklkOiBidXR0b25EYXRhLmJ1dHRvbklkLFxuICAgICAgYXNzZXRJZCxcbiAgICAgIGNvbnRleHQsXG4gICAgfSk7XG5cbiAgICBpZiAocmVzdWx0LmlzRmFpbHVyZSkge1xuICAgICAgY29uc29sZS5lcnJvcihgQnV0dG9uIGV4ZWN1dGlvbiBmYWlsZWQ6ICR7cmVzdWx0LmVycm9yfWApO1xuICAgICAgLy8gU2hvdyBlcnJvciBub3RpZmljYXRpb25cbiAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbihgRXJyb3I6ICR7cmVzdWx0LmVycm9yfWAsIFwiZXJyb3JcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSByZXN1bHQuZ2V0VmFsdWUoKTtcblxuICAgIC8vIENoZWNrIGlmIGlucHV0IGlzIHJlcXVpcmVkXG4gICAgaWYgKHJlc3BvbnNlLnJlcXVpcmVzSW5wdXQgJiYgcmVzcG9uc2UuaW5wdXRTY2hlbWEpIHtcbiAgICAgIC8vIE9wZW4gaW5wdXQgbW9kYWxcbiAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENvbW1hbmRJbnB1dE1vZGFsKFxuICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgcmVzcG9uc2UuaW5wdXRTY2hlbWEsXG4gICAgICAgIGFzeW5jIChpbnB1dFZhbHVlcykgPT4ge1xuICAgICAgICAgIC8vIEV4ZWN1dGUgd2l0aCBwYXJhbWV0ZXJzXG4gICAgICAgICAgY29uc3QgZXhlY1Jlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZUNvbW1hbmRVc2VDYXNlLmV4ZWN1dGUoe1xuICAgICAgICAgICAgYnV0dG9uSWQ6IGJ1dHRvbkRhdGEuYnV0dG9uSWQsXG4gICAgICAgICAgICBhc3NldElkLFxuICAgICAgICAgICAgaW5wdXRQYXJhbWV0ZXJzOiBpbnB1dFZhbHVlcyxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoZXhlY1Jlc3VsdC5pc0ZhaWx1cmUpIHtcbiAgICAgICAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbihgRXJyb3I6ICR7ZXhlY1Jlc3VsdC5lcnJvcn1gLCBcImVycm9yXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBleGVjUmVzcG9uc2UgPSBleGVjUmVzdWx0LmdldFZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoZXhlY1Jlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93Tm90aWZpY2F0aW9uKFxuICAgICAgICAgICAgICAgIGV4ZWNSZXNwb25zZS5tZXNzYWdlIHx8IFwiQ29tbWFuZCBleGVjdXRlZCBzdWNjZXNzZnVsbHlcIixcbiAgICAgICAgICAgICAgICBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgICAgbW9kYWwub3BlbigpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgLy8gQ29tbWFuZCBleGVjdXRlZCBzdWNjZXNzZnVsbHlcbiAgICAgIHRoaXMuc2hvd05vdGlmaWNhdGlvbihcbiAgICAgICAgcmVzcG9uc2UubWVzc2FnZSB8fCBcIkNvbW1hbmQgZXhlY3V0ZWQgc3VjY2Vzc2Z1bGx5XCIsXG4gICAgICAgIFwic3VjY2Vzc1wiLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBub3RpZmljYXRpb24gdG8gdXNlclxuICAgKi9cbiAgcHJpdmF0ZSBzaG93Tm90aWZpY2F0aW9uKFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICB0eXBlOiBcInN1Y2Nlc3NcIiB8IFwiZXJyb3JcIiB8IFwiaW5mb1wiLFxuICApOiB2b2lkIHtcbiAgICAvLyBJbiBPYnNpZGlhbiwgd2UgdXNlIE5vdGljZSBmb3Igbm90aWZpY2F0aW9uc1xuICAgIG5ldyBOb3RpY2UobWVzc2FnZSwgdHlwZSA9PT0gXCJlcnJvclwiID8gNTAwMCA6IDMwMDApO1xuICB9XG59XG5cbi8qKlxuICogTW9kYWwgZm9yIGNvbGxlY3RpbmcgY29tbWFuZCBpbnB1dCBwYXJhbWV0ZXJzXG4gKi9cbmNsYXNzIENvbW1hbmRJbnB1dE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBwcml2YXRlIGlucHV0VmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgYXBwOiBBcHAsXG4gICAgcHJpdmF0ZSBzY2hlbWE6IHtcbiAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICAgIHBhcmFtZXRlcnM6IENvbW1hbmRQYXJhbWV0ZXJbXTtcbiAgICB9LFxuICAgIHByaXZhdGUgb25TdWJtaXQ6ICh2YWx1ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4pID0+IHZvaWQsXG4gICkge1xuICAgIHN1cGVyKGFwcCk7XG4gIH1cblxuICBvbk9wZW4oKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cbiAgICAvLyBBZGQgdGl0bGVcbiAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IHRoaXMuc2NoZW1hLnRpdGxlIH0pO1xuXG4gICAgLy8gQWRkIGRlc2NyaXB0aW9uIGlmIHByZXNlbnRcbiAgICBpZiAodGhpcy5zY2hlbWEuZGVzY3JpcHRpb24pIHtcbiAgICAgIGNvbnRlbnRFbC5jcmVhdGVFbChcInBcIiwge1xuICAgICAgICB0ZXh0OiB0aGlzLnNjaGVtYS5kZXNjcmlwdGlvbixcbiAgICAgICAgY2xzOiBcImV4b2NvcnRleC1tb2RhbC1kZXNjcmlwdGlvblwiLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGZvcm1cbiAgICBjb25zdCBmb3JtRWwgPSBjb250ZW50RWwuY3JlYXRlRGl2KHsgY2xzOiBcImV4b2NvcnRleC1jb21tYW5kLWZvcm1cIiB9KTtcblxuICAgIC8vIEFkZCBpbnB1dCBmb3IgZWFjaCBwYXJhbWV0ZXJcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIHRoaXMuc2NoZW1hLnBhcmFtZXRlcnMpIHtcbiAgICAgIHRoaXMuY3JlYXRlUGFyYW1ldGVySW5wdXQoZm9ybUVsLCBwYXJhbSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGJ1dHRvbnNcbiAgICBjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50RWwuY3JlYXRlRGl2KHtcbiAgICAgIGNsczogXCJtb2RhbC1idXR0b24tY29udGFpbmVyXCIsXG4gICAgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhidXR0b25Db250YWluZXIpXG4gICAgICAuYWRkQnV0dG9uKChidG4pID0+XG4gICAgICAgIGJ0bi5zZXRCdXR0b25UZXh0KFwiQ2FuY2VsXCIpLm9uQ2xpY2soKCkgPT4gdGhpcy5jbG9zZSgpKSxcbiAgICAgIClcbiAgICAgIC5hZGRCdXR0b24oKGJ0bikgPT5cbiAgICAgICAgYnRuXG4gICAgICAgICAgLnNldEJ1dHRvblRleHQoXCJFeGVjdXRlXCIpXG4gICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLnZhbGlkYXRlSW5wdXRzKCk7XG4gICAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JzKGVycm9ycyk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLmlucHV0VmFsdWVzKTtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICB9KSxcbiAgICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVBhcmFtZXRlcklucHV0KFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgcGFyYW06IENvbW1hbmRQYXJhbWV0ZXIsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXIpXG4gICAgICAuc2V0TmFtZShwYXJhbS5sYWJlbCB8fCBwYXJhbS5uYW1lKVxuICAgICAgLnNldERlc2MocGFyYW0uZGVzY3JpcHRpb24gfHwgXCJcIik7XG5cbiAgICAvLyBNYXJrIHJlcXVpcmVkIGZpZWxkc1xuICAgIGlmIChwYXJhbS5yZXF1aXJlZCkge1xuICAgICAgc2V0dGluZy5uYW1lRWwuY3JlYXRlU3Bhbih7IHRleHQ6IFwiICpcIiwgY2xzOiBcInJlcXVpcmVkLWluZGljYXRvclwiIH0pO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhcHByb3ByaWF0ZSBpbnB1dCBiYXNlZCBvbiB0eXBlXG4gICAgc3dpdGNoIChwYXJhbS50eXBlKSB7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHNldHRpbmcuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIocGFyYW0ubGFiZWwgfHwgcGFyYW0ubmFtZSk7XG4gICAgICAgICAgaWYgKHBhcmFtLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgdGV4dC5zZXRWYWx1ZShwYXJhbS5kZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHBhcmFtLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbcGFyYW0ubmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgIHNldHRpbmcuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgIHRleHQuaW5wdXRFbC50eXBlID0gXCJudW1iZXJcIjtcbiAgICAgICAgICBpZiAocGFyYW0uZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRleHQuc2V0VmFsdWUoU3RyaW5nKHBhcmFtLmRlZmF1bHRWYWx1ZSkpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHBhcmFtLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbcGFyYW0ubmFtZV0gPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIHNldHRpbmcuYWRkVG9nZ2xlKCh0b2dnbGUpID0+IHtcbiAgICAgICAgICBpZiAocGFyYW0uZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShwYXJhbS5kZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHBhcmFtLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9nZ2xlLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJkYXRlXCI6XG4gICAgICAgIHNldHRpbmcuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgIHRleHQuaW5wdXRFbC50eXBlID0gXCJkYXRlXCI7XG4gICAgICAgICAgaWYgKHBhcmFtLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgdGV4dC5zZXRWYWx1ZShwYXJhbS5kZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHBhcmFtLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGV4dC5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbcGFyYW0ubmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiYXNzZXRcIjpcbiAgICAgICAgc2V0dGluZy5hZGRUZXh0KCh0ZXh0KSA9PiB7XG4gICAgICAgICAgdGV4dC5zZXRQbGFjZWhvbGRlcihcIltbQXNzZXQgTmFtZV1dXCIpO1xuICAgICAgICAgIGlmIChwYXJhbS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICAgIHRleHQuc2V0VmFsdWUocGFyYW0uZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbcGFyYW0ubmFtZV0gPSBwYXJhbS5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgaXQncyBpbiB3aWtpIGxpbmsgZm9ybWF0XG4gICAgICAgICAgICBpZiAodmFsdWUgJiYgIXZhbHVlLnN0YXJ0c1dpdGgoXCJbW1wiKSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGBbWyR7dmFsdWV9XV1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICBzZXR0aW5nLmFkZFRleHRBcmVhKCh0ZXh0YXJlYSkgPT4ge1xuICAgICAgICAgIHRleHRhcmVhLnNldFBsYWNlaG9sZGVyKFwiT25lIGl0ZW0gcGVyIGxpbmVcIik7XG4gICAgICAgICAgaWYgKHBhcmFtLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdFRleHQgPSBBcnJheS5pc0FycmF5KHBhcmFtLmRlZmF1bHRWYWx1ZSlcbiAgICAgICAgICAgICAgPyBwYXJhbS5kZWZhdWx0VmFsdWUuam9pbihcIlxcblwiKVxuICAgICAgICAgICAgICA6IHBhcmFtLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIHRleHRhcmVhLnNldFZhbHVlKGRlZmF1bHRUZXh0KTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRWYWx1ZXNbcGFyYW0ubmFtZV0gPSBwYXJhbS5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHRhcmVhLm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSA9IHZhbHVlXG4gICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAuZmlsdGVyKCh2KSA9PiB2LnRyaW0oKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRGVmYXVsdCB0byB0ZXh0IGlucHV0XG4gICAgICAgIHNldHRpbmcuYWRkVGV4dCgodGV4dCkgPT4ge1xuICAgICAgICAgIHRleHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmlucHV0VmFsdWVzW3BhcmFtLm5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVJbnB1dHMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGVycm9yczogc3RyaW5nW10gPSBbXTtcblxuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgdGhpcy5zY2hlbWEucGFyYW1ldGVycykge1xuICAgICAgaWYgKHBhcmFtLnJlcXVpcmVkKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaChgJHtwYXJhbS5sYWJlbCB8fCBwYXJhbS5uYW1lfSBpcyByZXF1aXJlZGApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEN1c3RvbSB2YWxpZGF0aW9uIGlmIHByb3ZpZGVkXG4gICAgICBpZiAocGFyYW0udmFsaWRhdGlvbiAmJiB0aGlzLmlucHV0VmFsdWVzW3BhcmFtLm5hbWVdKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBhcmFtLnZhbGlkYXRpb24pO1xuICAgICAgICAgIGlmICghcmVnZXgudGVzdChTdHJpbmcodGhpcy5pbnB1dFZhbHVlc1twYXJhbS5uYW1lXSkpKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChgJHtwYXJhbS5sYWJlbCB8fCBwYXJhbS5uYW1lfSBmb3JtYXQgaXMgaW52YWxpZGApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIEludmFsaWQgcmVnZXgsIHNraXAgdmFsaWRhdGlvblxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIHByaXZhdGUgc2hvd0Vycm9ycyhlcnJvcnM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgLy8gU2hvdyBlcnJvcnMgaW4gYSBub3RpY2VcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPVxuICAgICAgXCJQbGVhc2UgZml4IHRoZSBmb2xsb3dpbmcgZXJyb3JzOlxcblwiICsgZXJyb3JzLmpvaW4oXCJcXG5cIik7XG4gICAgbmV3IE5vdGljZShlcnJvck1lc3NhZ2UsIDUwMDApO1xuICB9XG5cbiAgb25DbG9zZSgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9