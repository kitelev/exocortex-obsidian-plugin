{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/GraphSuggestionRepository.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/GraphSuggestionRepository.ts"],"sourcesContent":["import { ISuggestionRepository } from \"../../domain/repositories/ISuggestionRepository\";\nimport {\n  SPARQLSuggestion,\n  SuggestionType,\n} from \"../../domain/autocomplete/SPARQLSuggestion\";\nimport {\n  QueryContext,\n  ClauseType,\n} from \"../../domain/autocomplete/QueryContext\";\nimport { Result } from \"../../domain/core/Result\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { KeywordSuggestionProvider } from \"../autocomplete/KeywordSuggestionProvider\";\n\ninterface UsageStats {\n  [key: string]: {\n    count: number;\n    lastUsed: number;\n  };\n}\n\nexport class GraphSuggestionRepository implements ISuggestionRepository {\n  private keywordProvider = new KeywordSuggestionProvider();\n  private usageStats: UsageStats = {};\n  private propertyCache: Map<string, SPARQLSuggestion[]> = new Map();\n  private classCache: Map<string, SPARQLSuggestion[]> = new Map();\n  private cacheTimestamp = 0;\n  private readonly cacheTTL = 60000; // 1 minute\n\n  constructor(private readonly graph: Graph) {}\n\n  async findKeywordSuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      const suggestions = this.keywordProvider.getSuggestions(context);\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get keyword suggestions: ${error}`);\n    }\n  }\n\n  async findPropertySuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      if (this.shouldRefreshCache()) {\n        this.refreshPropertyCache();\n      }\n\n      const cachedSuggestions = this.propertyCache.get(\n        context.getCurrentToken(),\n      );\n      if (cachedSuggestions) {\n        return Result.ok(cachedSuggestions);\n      }\n\n      const properties = this.extractPropertiesFromGraph();\n      const suggestions = properties.map((prop) =>\n        this.createPropertySuggestion(prop, context),\n      );\n\n      this.propertyCache.set(context.getCurrentToken(), suggestions);\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get property suggestions: ${error}`);\n    }\n  }\n\n  async findClassSuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      if (this.shouldRefreshCache()) {\n        this.refreshClassCache();\n      }\n\n      const cachedSuggestions = this.classCache.get(context.getCurrentToken());\n      if (cachedSuggestions) {\n        return Result.ok(cachedSuggestions);\n      }\n\n      const classes = this.extractClassesFromGraph();\n      const suggestions = classes.map((cls) =>\n        this.createClassSuggestion(cls, context),\n      );\n\n      this.classCache.set(context.getCurrentToken(), suggestions);\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get class suggestions: ${error}`);\n    }\n  }\n\n  async findVariableSuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      const suggestions: SPARQLSuggestion[] = [];\n      const existingVariables = context.getVariablesInScope();\n      const currentToken = context.getCurrentToken();\n\n      // Suggest reuse of existing variables\n      for (const variable of existingVariables) {\n        const varName = `?${variable}`;\n        if (!currentToken || varName.startsWith(currentToken)) {\n          suggestions.push(\n            SPARQLSuggestion.create({\n              id: `var_existing_${variable}`,\n              text: varName,\n              insertText: varName,\n              type: SuggestionType.VARIABLE,\n              confidence: 0.9,\n              contextualScore: 0.95,\n              metadata: {\n                description: \"Existing variable in query\",\n                usage: \"Reuse this variable to join patterns\",\n              },\n            }),\n          );\n        }\n      }\n\n      // Suggest common variable names\n      const commonVariables = [\n        { name: \"subject\", desc: \"Subject of a triple\" },\n        { name: \"predicate\", desc: \"Predicate/property\" },\n        { name: \"object\", desc: \"Object value\" },\n        { name: \"type\", desc: \"RDF type/class\" },\n        { name: \"label\", desc: \"Human-readable label\" },\n        { name: \"value\", desc: \"Generic value\" },\n        { name: \"name\", desc: \"Name property\" },\n        { name: \"id\", desc: \"Identifier\" },\n        { name: \"date\", desc: \"Date/time value\" },\n        { name: \"count\", desc: \"Count aggregate\" },\n      ];\n\n      for (const { name, desc } of commonVariables) {\n        const varName = `?${name}`;\n        if (\n          !existingVariables.includes(name) &&\n          (!currentToken || varName.startsWith(currentToken))\n        ) {\n          suggestions.push(\n            SPARQLSuggestion.create({\n              id: `var_common_${name}`,\n              text: varName,\n              insertText: varName,\n              type: SuggestionType.VARIABLE,\n              confidence: 0.7,\n              contextualScore: 0.6,\n              metadata: {\n                description: desc,\n                usage: `Common variable name for ${desc.toLowerCase()}`,\n              },\n            }),\n          );\n        }\n      }\n\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get variable suggestions: ${error}`);\n    }\n  }\n\n  async findNamespaceSuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      const namespaces = [\n        { prefix: \"rdf:\", uri: \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" },\n        { prefix: \"rdfs:\", uri: \"http://www.w3.org/2000/01/rdf-schema#\" },\n        { prefix: \"owl:\", uri: \"http://www.w3.org/2002/07/owl#\" },\n        { prefix: \"xsd:\", uri: \"http://www.w3.org/2001/XMLSchema#\" },\n        { prefix: \"skos:\", uri: \"http://www.w3.org/2004/02/skos/core#\" },\n        { prefix: \"foaf:\", uri: \"http://xmlns.com/foaf/0.1/\" },\n        { prefix: \"dc:\", uri: \"http://purl.org/dc/elements/1.1/\" },\n        { prefix: \"exo:\", uri: \"http://example.org/exocortex#\" },\n      ];\n\n      const suggestions = namespaces\n        .filter(\n          (ns) =>\n            !context.getCurrentToken() ||\n            ns.prefix.startsWith(context.getCurrentToken()),\n        )\n        .map((ns) =>\n          SPARQLSuggestion.create({\n            id: `namespace_${ns.prefix}`,\n            text: ns.prefix,\n            insertText: `PREFIX ${ns.prefix} <${ns.uri}>`,\n            type: SuggestionType.NAMESPACE,\n            confidence: 0.85,\n            contextualScore: 0.8,\n            metadata: {\n              description: `Namespace: ${ns.uri}`,\n              namespace: ns.uri,\n            },\n          }),\n        );\n\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get namespace suggestions: ${error}`);\n    }\n  }\n\n  async findFunctionSuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      const functions = [\n        { name: \"STR\", desc: \"Convert to string\", example: \"STR(?value)\" },\n        { name: \"LANG\", desc: \"Get language tag\", example: \"LANG(?label)\" },\n        {\n          name: \"DATATYPE\",\n          desc: \"Get datatype IRI\",\n          example: \"DATATYPE(?literal)\",\n        },\n        {\n          name: \"BOUND\",\n          desc: \"Test if variable is bound\",\n          example: \"BOUND(?var)\",\n        },\n        {\n          name: \"REGEX\",\n          desc: \"Regular expression match\",\n          example: 'REGEX(?text, \"pattern\")',\n        },\n        {\n          name: \"CONTAINS\",\n          desc: \"String contains\",\n          example: 'CONTAINS(?str, \"substring\")',\n        },\n        {\n          name: \"STRSTARTS\",\n          desc: \"String starts with\",\n          example: 'STRSTARTS(?str, \"prefix\")',\n        },\n        {\n          name: \"STRENDS\",\n          desc: \"String ends with\",\n          example: 'STRENDS(?str, \"suffix\")',\n        },\n        { name: \"STRLEN\", desc: \"String length\", example: \"STRLEN(?str)\" },\n        { name: \"SUBSTR\", desc: \"Substring\", example: \"SUBSTR(?str, 1, 10)\" },\n        { name: \"UCASE\", desc: \"Convert to uppercase\", example: \"UCASE(?str)\" },\n        { name: \"LCASE\", desc: \"Convert to lowercase\", example: \"LCASE(?str)\" },\n        { name: \"COUNT\", desc: \"Count aggregate\", example: \"COUNT(?item)\" },\n        { name: \"SUM\", desc: \"Sum aggregate\", example: \"SUM(?value)\" },\n        { name: \"AVG\", desc: \"Average aggregate\", example: \"AVG(?value)\" },\n        { name: \"MIN\", desc: \"Minimum value\", example: \"MIN(?value)\" },\n        { name: \"MAX\", desc: \"Maximum value\", example: \"MAX(?value)\" },\n        { name: \"NOW\", desc: \"Current date/time\", example: \"NOW()\" },\n        { name: \"YEAR\", desc: \"Extract year\", example: \"YEAR(?date)\" },\n        { name: \"MONTH\", desc: \"Extract month\", example: \"MONTH(?date)\" },\n      ];\n\n      const currentToken = context.getCurrentToken().toUpperCase();\n      const suggestions = functions\n        .filter((fn) => !currentToken || fn.name.startsWith(currentToken))\n        .map((fn) =>\n          SPARQLSuggestion.create({\n            id: `function_${fn.name.toLowerCase()}`,\n            text: fn.name,\n            insertText: fn.name + \"(\",\n            type: SuggestionType.FUNCTION,\n            confidence: 0.8,\n            contextualScore: context.isInClause(ClauseType.FILTER) ? 0.9 : 0.6,\n            metadata: {\n              description: fn.desc,\n              examples: [fn.example],\n            },\n          }),\n        );\n\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get function suggestions: ${error}`);\n    }\n  }\n\n  async findTemplateSuggestions(\n    context: QueryContext,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      const templates = [\n        {\n          name: \"Basic SELECT Query\",\n          template:\n            \"SELECT ?subject ?predicate ?object\\nWHERE {\\n  ?subject ?predicate ?object .\\n}\\nLIMIT 100\",\n          description: \"Simple triple pattern query\",\n        },\n        {\n          name: \"Find All Classes\",\n          template:\n            \"SELECT DISTINCT ?class\\nWHERE {\\n  ?instance rdf:type ?class .\\n}\\nORDER BY ?class\",\n          description: \"List all classes in the graph\",\n        },\n        {\n          name: \"Find All Properties\",\n          template:\n            \"SELECT DISTINCT ?property\\nWHERE {\\n  ?subject ?property ?object .\\n}\\nORDER BY ?property\",\n          description: \"List all properties used in the graph\",\n        },\n        {\n          name: \"Get Class Instances\",\n          template:\n            \"SELECT ?instance ?label\\nWHERE {\\n  ?instance rdf:type <ClassURI> .\\n  OPTIONAL { ?instance rdfs:label ?label }\\n}\",\n          description: \"Find all instances of a specific class\",\n        },\n        {\n          name: \"Count by Type\",\n          template:\n            \"SELECT ?type (COUNT(?instance) AS ?count)\\nWHERE {\\n  ?instance rdf:type ?type .\\n}\\nGROUP BY ?type\\nORDER BY DESC(?count)\",\n          description: \"Count instances per class\",\n        },\n        {\n          name: \"Search by Label\",\n          template:\n            'SELECT ?resource ?label\\nWHERE {\\n  ?resource rdfs:label ?label .\\n  FILTER(CONTAINS(LCASE(?label), \"search term\"))\\n}',\n          description: \"Find resources by label text\",\n        },\n      ];\n\n      const suggestions = templates.map((template, index) =>\n        SPARQLSuggestion.create({\n          id: `template_${index}`,\n          text: template.name,\n          insertText: template.template,\n          type: SuggestionType.TEMPLATE,\n          confidence: 0.75,\n          contextualScore: context.isStartOfQuery() ? 0.9 : 0.3,\n          metadata: {\n            description: template.description,\n            documentation: \"Query template - customize as needed\",\n          },\n        }),\n      );\n\n      return Result.ok(suggestions);\n    } catch (error) {\n      return Result.fail(`Failed to get template suggestions: ${error}`);\n    }\n  }\n\n  async updateUsageStatistics(\n    suggestionId: string,\n    selected: boolean,\n  ): Promise<Result<void>> {\n    try {\n      if (!this.usageStats[suggestionId]) {\n        this.usageStats[suggestionId] = { count: 0, lastUsed: 0 };\n      }\n\n      if (selected) {\n        this.usageStats[suggestionId].count++;\n        this.usageStats[suggestionId].lastUsed = Date.now();\n      }\n\n      return Result.ok();\n    } catch (error) {\n      return Result.fail(`Failed to update usage statistics: ${error}`);\n    }\n  }\n\n  async getPopularSuggestions(\n    limit: number,\n  ): Promise<Result<SPARQLSuggestion[]>> {\n    try {\n      const sortedIds = Object.entries(this.usageStats)\n        .sort((a, b) => b[1].count - a[1].count)\n        .slice(0, limit)\n        .map(([id]) => id);\n\n      // This would need to reconstruct suggestions from IDs\n      // For now, return empty array\n      return Result.ok([]);\n    } catch (error) {\n      return Result.fail(`Failed to get popular suggestions: ${error}`);\n    }\n  }\n\n  private extractPropertiesFromGraph(): Array<{\n    uri: string;\n    frequency: number;\n  }> {\n    const properties = new Map<string, number>();\n\n    try {\n      // Use match with undefined to get all triples\n      const triples = this.graph.match(undefined, undefined, undefined);\n      for (const triple of triples) {\n        const predicate = triple.getPredicate().toString();\n        properties.set(predicate, (properties.get(predicate) || 0) + 1);\n      }\n    } catch (error) {\n      console.warn(\"Failed to extract properties from graph:\", error);\n    }\n\n    return Array.from(properties.entries())\n      .map(([uri, frequency]) => ({ uri, frequency }))\n      .sort((a, b) => b.frequency - a.frequency);\n  }\n\n  private extractClassesFromGraph(): Array<{\n    uri: string;\n    instanceCount: number;\n  }> {\n    const classes = new Map<string, number>();\n    const rdfType = \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\";\n\n    try {\n      // Use match with undefined to get all triples\n      const triples = this.graph.match(undefined, undefined, undefined);\n      for (const triple of triples) {\n        if (triple.getPredicate().toString() === rdfType) {\n          const classUri = triple.getObject().toString();\n          classes.set(classUri, (classes.get(classUri) || 0) + 1);\n        }\n      }\n    } catch (error) {\n      console.warn(\"Failed to extract classes from graph:\", error);\n    }\n\n    return Array.from(classes.entries())\n      .map(([uri, instanceCount]) => ({ uri, instanceCount }))\n      .sort((a, b) => b.instanceCount - a.instanceCount);\n  }\n\n  private createPropertySuggestion(\n    property: { uri: string; frequency: number },\n    context: QueryContext,\n  ): SPARQLSuggestion {\n    const shortName = this.getShortName(property.uri);\n    const confidence = Math.min(0.9, 0.5 + property.frequency / 100);\n\n    return SPARQLSuggestion.create({\n      id: `property_${property.uri}`,\n      text: shortName,\n      insertText: shortName,\n      type: SuggestionType.PROPERTY,\n      confidence,\n      contextualScore: context.isInClause(ClauseType.WHERE) ? 0.9 : 0.5,\n      metadata: {\n        description: `Property (used ${property.frequency} times)`,\n        namespace: property.uri,\n      },\n    });\n  }\n\n  private createClassSuggestion(\n    cls: { uri: string; instanceCount: number },\n    context: QueryContext,\n  ): SPARQLSuggestion {\n    const shortName = this.getShortName(cls.uri);\n    const confidence = Math.min(0.9, 0.5 + cls.instanceCount / 50);\n\n    return SPARQLSuggestion.create({\n      id: `class_${cls.uri}`,\n      text: shortName,\n      insertText: shortName,\n      type: SuggestionType.CLASS,\n      confidence,\n      contextualScore: this.isAfterRdfType(context) ? 0.95 : 0.6,\n      metadata: {\n        description: `Class (${cls.instanceCount} instances)`,\n        namespace: cls.uri,\n      },\n    });\n  }\n\n  private getShortName(uri: string): string {\n    const hashIndex = uri.lastIndexOf(\"#\");\n    const slashIndex = uri.lastIndexOf(\"/\");\n    const splitIndex = Math.max(hashIndex, slashIndex);\n\n    if (splitIndex > 0 && splitIndex < uri.length - 1) {\n      return uri.substring(splitIndex + 1);\n    }\n\n    return uri;\n  }\n\n  private isAfterRdfType(context: QueryContext): boolean {\n    const previousTokens = context.getPreviousTokens();\n    if (previousTokens.length < 2) return false;\n\n    const lastTwo = previousTokens.slice(-2).join(\" \").toLowerCase();\n    return lastTwo.includes(\"rdf:type\") || lastTwo.includes(\" a \");\n  }\n\n  private shouldRefreshCache(): boolean {\n    return Date.now() - this.cacheTimestamp > this.cacheTTL;\n  }\n\n  private refreshPropertyCache(): void {\n    this.propertyCache.clear();\n    this.cacheTimestamp = Date.now();\n  }\n\n  private refreshClassCache(): void {\n    this.classCache.clear();\n    this.cacheTimestamp = Date.now();\n  }\n}\n"],"version":3}