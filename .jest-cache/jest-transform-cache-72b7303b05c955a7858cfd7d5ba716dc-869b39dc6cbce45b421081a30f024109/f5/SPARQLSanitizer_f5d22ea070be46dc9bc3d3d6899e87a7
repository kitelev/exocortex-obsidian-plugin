a61ad60994b1ab5f4e30e22896585af2
"use strict";
/**
 * SPARQL Query Sanitizer
 * Implements security controls to prevent injection attacks
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPARQLSanitizer = void 0;
const Result_1 = require("../../domain/core/Result");
class SPARQLSanitizer {
    constructor() {
        // Dangerous patterns that could lead to security issues
        this.dangerousPatterns = [
            // File system access attempts
            /FILE:/gi,
            /LOAD\s+<file:/gi,
            // Command injection patterns
            /;\s*DELETE/gi,
            /;\s*DROP/gi,
            /;\s*INSERT/gi,
            /;\s*CLEAR/gi,
            // Path traversal
            /\.\.[\/\\]/g,
            // Null byte injection
            /\x00/g,
            // Script injection
            /<script/gi,
            /javascript:/gi,
            /on\w+\s*=/gi
        ];
        // Allowed SPARQL keywords
        this.allowedKeywords = new Set([
            'SELECT', 'CONSTRUCT', 'WHERE', 'FILTER', 'OPTIONAL', 'UNION',
            'PREFIX', 'BASE', 'DISTINCT', 'REDUCED', 'ORDER', 'BY', 'ASC', 'DESC',
            'LIMIT', 'OFFSET', 'GRAPH', 'BIND', 'VALUES', 'GROUP', 'HAVING',
            'SERVICE', 'MINUS', 'EXISTS', 'NOT', 'IN', 'AS'
        ]);
    }
    /**
     * Sanitize SPARQL query for safe execution
     */
    sanitize(query) {
        if (!query || query.trim().length === 0) {
            return Result_1.Result.fail('Empty query provided');
        }
        const warnings = [];
        let sanitized = query;
        let modified = false;
        // Check for dangerous patterns
        for (const pattern of this.dangerousPatterns) {
            if (pattern.test(sanitized)) {
                warnings.push(`Dangerous pattern detected and removed: ${pattern.source}`);
                sanitized = sanitized.replace(pattern, '');
                modified = true;
            }
        }
        // Validate query structure
        const validation = this.validateQueryStructure(sanitized);
        if (validation.warnings.length > 0) {
            warnings.push(...validation.warnings);
        }
        // Check for multiple statements
        if (this.hasMultipleStatements(sanitized)) {
            warnings.push('Multiple statements detected - only first will be executed');
            sanitized = this.extractFirstStatement(sanitized);
            modified = true;
        }
        // Validate IRI patterns
        const iriValidation = this.validateIRIs(sanitized);
        if (iriValidation.warnings.length > 0) {
            warnings.push(...iriValidation.warnings);
        }
        // Check query complexity
        const complexity = this.checkComplexity(sanitized);
        if (complexity.tooComplex) {
            return Result_1.Result.fail(`Query too complex: ${complexity.reason}`);
        }
        return Result_1.Result.ok({
            query: sanitized,
            modified,
            warnings
        });
    }
    /**
     * Validate query structure
     */
    validateQueryStructure(query) {
        const warnings = [];
        const upperQuery = query.toUpperCase();
        // Check for required keywords
        if (!upperQuery.includes('SELECT') && !upperQuery.includes('CONSTRUCT')) {
            warnings.push('Query must be SELECT or CONSTRUCT');
        }
        // Check for balanced brackets
        const openBrackets = (query.match(/\{/g) || []).length;
        const closeBrackets = (query.match(/\}/g) || []).length;
        if (openBrackets !== closeBrackets) {
            warnings.push('Unbalanced brackets detected');
        }
        // Check for balanced parentheses
        const openParens = (query.match(/\(/g) || []).length;
        const closeParens = (query.match(/\)/g) || []).length;
        if (openParens !== closeParens) {
            warnings.push('Unbalanced parentheses detected');
        }
        return {
            valid: warnings.length === 0,
            warnings
        };
    }
    /**
     * Check if query contains multiple statements
     */
    hasMultipleStatements(query) {
        // Look for multiple query keywords
        const queryKeywords = ['SELECT', 'CONSTRUCT', 'INSERT', 'DELETE', 'DROP'];
        let count = 0;
        for (const keyword of queryKeywords) {
            const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
            const matches = query.match(regex);
            if (matches) {
                count += matches.length;
            }
        }
        return count > 1;
    }
    /**
     * Extract first statement from query
     */
    extractFirstStatement(query) {
        // Find the end of the first complete statement
        let depth = 0;
        let inString = false;
        let stringChar = '';
        for (let i = 0; i < query.length; i++) {
            const char = query[i];
            // Handle string literals
            if ((char === '"' || char === "'") && query[i - 1] !== '\\') {
                if (!inString) {
                    inString = true;
                    stringChar = char;
                }
                else if (char === stringChar) {
                    inString = false;
                }
            }
            if (!inString) {
                if (char === '{')
                    depth++;
                if (char === '}')
                    depth--;
                // Check if we've completed a statement
                if (depth === 0 && i > 0) {
                    // Look for next query keyword
                    const remaining = query.substring(i + 1);
                    if (/^\s*(SELECT|CONSTRUCT|INSERT|DELETE)/i.test(remaining)) {
                        return query.substring(0, i + 1);
                    }
                }
            }
        }
        return query;
    }
    /**
     * Validate IRI patterns in query
     */
    validateIRIs(query) {
        const warnings = [];
        // Extract IRIs from query
        const iriPattern = /<([^>]+)>/g;
        let match;
        while ((match = iriPattern.exec(query)) !== null) {
            const iri = match[1];
            // Check for suspicious IRI patterns
            if (iri.includes('..') || iri.includes('\\')) {
                warnings.push(`Suspicious IRI detected: ${iri}`);
            }
            // Check for local file access
            if (iri.startsWith('file:')) {
                warnings.push(`File URI not allowed: ${iri}`);
            }
            // Check IRI length
            if (iri.length > 2048) {
                warnings.push(`IRI too long: ${iri.substring(0, 50)}...`);
            }
        }
        return {
            valid: warnings.length === 0,
            warnings
        };
    }
    /**
     * Check query complexity to prevent DoS
     */
    checkComplexity(query) {
        // Check query length
        if (query.length > 10000) {
            return { tooComplex: true, reason: 'Query exceeds maximum length' };
        }
        // Count triple patterns
        const triplePatterns = (query.match(/\.\s*\?/g) || []).length;
        if (triplePatterns > 100) {
            return { tooComplex: true, reason: 'Too many triple patterns' };
        }
        // Count UNION operations
        const unions = (query.match(/\bUNION\b/gi) || []).length;
        if (unions > 10) {
            return { tooComplex: true, reason: 'Too many UNION operations' };
        }
        // Count nested subqueries
        const subqueries = (query.match(/\{[^}]*SELECT/gi) || []).length;
        if (subqueries > 5) {
            return { tooComplex: true, reason: 'Too many nested subqueries' };
        }
        // Count FILTER operations
        const filters = (query.match(/\bFILTER\b/gi) || []).length;
        if (filters > 20) {
            return { tooComplex: true, reason: 'Too many FILTER operations' };
        }
        return { tooComplex: false };
    }
    /**
     * Escape special characters in literals
     */
    escapeStringLiteral(value) {
        return value
            .replace(/\\/g, '\\\\')
            .replace(/"/g, '\\"')
            .replace(/'/g, "\\'")
            .replace(/\n/g, '\\n')
            .replace(/\r/g, '\\r')
            .replace(/\t/g, '\\t');
    }
    /**
     * Create safe IRI from user input
     */
    createSafeIRI(input) {
        // Remove dangerous characters
        const safe = input
            .replace(/[<>'"`;]/g, '')
            .replace(/\s+/g, '_')
            .replace(/[^\w:/-]/g, '');
        // Ensure valid IRI format
        if (!safe.includes(':')) {
            return `ex:${safe}`;
        }
        return safe;
    }
}
exports.SPARQLSanitizer = SPARQLSanitizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3NlcnZpY2VzL1NQQVJRTFNhbml0aXplci50cyIsIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCxxREFBa0Q7QUFRbEQsTUFBYSxlQUFlO0lBQTVCO1FBQ0ksd0RBQXdEO1FBQ3ZDLHNCQUFpQixHQUFHO1lBQ2pDLDhCQUE4QjtZQUM5QixTQUFTO1lBQ1QsaUJBQWlCO1lBRWpCLDZCQUE2QjtZQUM3QixjQUFjO1lBQ2QsWUFBWTtZQUNaLGNBQWM7WUFDZCxhQUFhO1lBRWIsaUJBQWlCO1lBQ2pCLGFBQWE7WUFFYixzQkFBc0I7WUFDdEIsT0FBTztZQUVQLG1CQUFtQjtZQUNuQixXQUFXO1lBQ1gsZUFBZTtZQUNmLGFBQWE7U0FDaEIsQ0FBQztRQUVGLDBCQUEwQjtRQUNULG9CQUFlLEdBQUcsSUFBSSxHQUFHLENBQUM7WUFDdkMsUUFBUSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxPQUFPO1lBQzdELFFBQVEsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNO1lBQ3JFLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVE7WUFDL0QsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJO1NBQ2xELENBQUMsQ0FBQztJQXVQUCxDQUFDO0lBclBHOztPQUVHO0lBQ0gsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQyxPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztTQUM5QztRQUVELE1BQU0sUUFB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QUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQzthQUNyQixPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILGFBQWEsQ0FBQyxLQUFhO1FBQ3ZCLDhCQUE4QjtRQUM5QixNQUFNLElBQUksR0FBRyxLQUFLO2FBQ2IsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7YUFDeEIsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7YUFDcEIsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU5QiwwQkFBMEI7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckIsT0FBTyxNQUFNLElBQUksRUFBRSxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBdFJELDBDQXNSQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvYXBwbGljYXRpb24vc2VydmljZXMvU1BBUlFMU2FuaXRpemVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU1BBUlFMIFF1ZXJ5IFNhbml0aXplclxuICogSW1wbGVtZW50cyBzZWN1cml0eSBjb250cm9scyB0byBwcmV2ZW50IGluamVjdGlvbiBhdHRhY2tzXG4gKi9cblxuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvcmUvUmVzdWx0JztcblxuZXhwb3J0IGludGVyZmFjZSBTYW5pdGl6YXRpb25SZXN1bHQge1xuICAgIHF1ZXJ5OiBzdHJpbmc7XG4gICAgbW9kaWZpZWQ6IGJvb2xlYW47XG4gICAgd2FybmluZ3M6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY2xhc3MgU1BBUlFMU2FuaXRpemVyIHtcbiAgICAvLyBEYW5nZXJvdXMgcGF0dGVybnMgdGhhdCBjb3VsZCBsZWFkIHRvIHNlY3VyaXR5IGlzc3Vlc1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGFuZ2Vyb3VzUGF0dGVybnMgPSBbXG4gICAgICAgIC8vIEZpbGUgc3lzdGVtIGFjY2VzcyBhdHRlbXB0c1xuICAgICAgICAvRklMRTovZ2ksXG4gICAgICAgIC9MT0FEXFxzKzxmaWxlOi9naSxcbiAgICAgICAgXG4gICAgICAgIC8vIENvbW1hbmQgaW5qZWN0aW9uIHBhdHRlcm5zXG4gICAgICAgIC87XFxzKkRFTEVURS9naSxcbiAgICAgICAgLztcXHMqRFJPUC9naSxcbiAgICAgICAgLztcXHMqSU5TRVJUL2dpLFxuICAgICAgICAvO1xccypDTEVBUi9naSxcbiAgICAgICAgXG4gICAgICAgIC8vIFBhdGggdHJhdmVyc2FsXG4gICAgICAgIC9cXC5cXC5bXFwvXFxcXF0vZyxcbiAgICAgICAgXG4gICAgICAgIC8vIE51bGwgYnl0ZSBpbmplY3Rpb25cbiAgICAgICAgL1xceDAwL2csXG4gICAgICAgIFxuICAgICAgICAvLyBTY3JpcHQgaW5qZWN0aW9uXG4gICAgICAgIC88c2NyaXB0L2dpLFxuICAgICAgICAvamF2YXNjcmlwdDovZ2ksXG4gICAgICAgIC9vblxcdytcXHMqPS9naVxuICAgIF07XG4gICAgXG4gICAgLy8gQWxsb3dlZCBTUEFSUUwga2V5d29yZHNcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFsbG93ZWRLZXl3b3JkcyA9IG5ldyBTZXQoW1xuICAgICAgICAnU0VMRUNUJywgJ0NPTlNUUlVDVCcsICdXSEVSRScsICdGSUxURVInLCAnT1BUSU9OQUwnLCAnVU5JT04nLFxuICAgICAgICAnUFJFRklYJywgJ0JBU0UnLCAnRElTVElOQ1QnLCAnUkVEVUNFRCcsICdPUkRFUicsICdCWScsICdBU0MnLCAnREVTQycsXG4gICAgICAgICdMSU1JVCcsICdPRkZTRVQnLCAnR1JBUEgnLCAnQklORCcsICdWQUxVRVMnLCAnR1JPVVAnLCAnSEFWSU5HJyxcbiAgICAgICAgJ1NFUlZJQ0UnLCAnTUlOVVMnLCAnRVhJU1RTJywgJ05PVCcsICdJTicsICdBUydcbiAgICBdKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBTYW5pdGl6ZSBTUEFSUUwgcXVlcnkgZm9yIHNhZmUgZXhlY3V0aW9uXG4gICAgICovXG4gICAgc2FuaXRpemUocXVlcnk6IHN0cmluZyk6IFJlc3VsdDxTYW5pdGl6YXRpb25SZXN1bHQ+IHtcbiAgICAgICAgaWYgKCFxdWVyeSB8fCBxdWVyeS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0LmZhaWwoJ0VtcHR5IHF1ZXJ5IHByb3ZpZGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBsZXQgc2FuaXRpemVkID0gcXVlcnk7XG4gICAgICAgIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGRhbmdlcm91cyBwYXR0ZXJuc1xuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgdGhpcy5kYW5nZXJvdXNQYXR0ZXJucykge1xuICAgICAgICAgICAgaWYgKHBhdHRlcm4udGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZ3MucHVzaChgRGFuZ2Vyb3VzIHBhdHRlcm4gZGV0ZWN0ZWQgYW5kIHJlbW92ZWQ6ICR7cGF0dGVybi5zb3VyY2V9YCk7XG4gICAgICAgICAgICAgICAgc2FuaXRpemVkID0gc2FuaXRpemVkLnJlcGxhY2UocGF0dGVybiwgJycpO1xuICAgICAgICAgICAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVmFsaWRhdGUgcXVlcnkgc3RydWN0dXJlXG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlUXVlcnlTdHJ1Y3R1cmUoc2FuaXRpemVkKTtcbiAgICAgICAgaWYgKHZhbGlkYXRpb24ud2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCguLi52YWxpZGF0aW9uLndhcm5pbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlIHN0YXRlbWVudHNcbiAgICAgICAgaWYgKHRoaXMuaGFzTXVsdGlwbGVTdGF0ZW1lbnRzKHNhbml0aXplZCkpIHtcbiAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goJ011bHRpcGxlIHN0YXRlbWVudHMgZGV0ZWN0ZWQgLSBvbmx5IGZpcnN0IHdpbGwgYmUgZXhlY3V0ZWQnKTtcbiAgICAgICAgICAgIHNhbml0aXplZCA9IHRoaXMuZXh0cmFjdEZpcnN0U3RhdGVtZW50KHNhbml0aXplZCk7XG4gICAgICAgICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFZhbGlkYXRlIElSSSBwYXR0ZXJuc1xuICAgICAgICBjb25zdCBpcmlWYWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUlSSXMoc2FuaXRpemVkKTtcbiAgICAgICAgaWYgKGlyaVZhbGlkYXRpb24ud2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCguLi5pcmlWYWxpZGF0aW9uLndhcm5pbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgcXVlcnkgY29tcGxleGl0eVxuICAgICAgICBjb25zdCBjb21wbGV4aXR5ID0gdGhpcy5jaGVja0NvbXBsZXhpdHkoc2FuaXRpemVkKTtcbiAgICAgICAgaWYgKGNvbXBsZXhpdHkudG9vQ29tcGxleCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsKGBRdWVyeSB0b28gY29tcGxleDogJHtjb21wbGV4aXR5LnJlYXNvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vayh7XG4gICAgICAgICAgICBxdWVyeTogc2FuaXRpemVkLFxuICAgICAgICAgICAgbW9kaWZpZWQsXG4gICAgICAgICAgICB3YXJuaW5nc1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgcXVlcnkgc3RydWN0dXJlXG4gICAgICovXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZVF1ZXJ5U3RydWN0dXJlKHF1ZXJ5OiBzdHJpbmcpOiB7IHZhbGlkOiBib29sZWFuOyB3YXJuaW5nczogc3RyaW5nW10gfSB7XG4gICAgICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBjb25zdCB1cHBlclF1ZXJ5ID0gcXVlcnkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGZvciByZXF1aXJlZCBrZXl3b3Jkc1xuICAgICAgICBpZiAoIXVwcGVyUXVlcnkuaW5jbHVkZXMoJ1NFTEVDVCcpICYmICF1cHBlclF1ZXJ5LmluY2x1ZGVzKCdDT05TVFJVQ1QnKSkge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCgnUXVlcnkgbXVzdCBiZSBTRUxFQ1Qgb3IgQ09OU1RSVUNUJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGZvciBiYWxhbmNlZCBicmFja2V0c1xuICAgICAgICBjb25zdCBvcGVuQnJhY2tldHMgPSAocXVlcnkubWF0Y2goL1xcey9nKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBjbG9zZUJyYWNrZXRzID0gKHF1ZXJ5Lm1hdGNoKC9cXH0vZykgfHwgW10pLmxlbmd0aDtcbiAgICAgICAgaWYgKG9wZW5CcmFja2V0cyAhPT0gY2xvc2VCcmFja2V0cykge1xuICAgICAgICAgICAgd2FybmluZ3MucHVzaCgnVW5iYWxhbmNlZCBicmFja2V0cyBkZXRlY3RlZCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBmb3IgYmFsYW5jZWQgcGFyZW50aGVzZXNcbiAgICAgICAgY29uc3Qgb3BlblBhcmVucyA9IChxdWVyeS5tYXRjaCgvXFwoL2cpIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNsb3NlUGFyZW5zID0gKHF1ZXJ5Lm1hdGNoKC9cXCkvZykgfHwgW10pLmxlbmd0aDtcbiAgICAgICAgaWYgKG9wZW5QYXJlbnMgIT09IGNsb3NlUGFyZW5zKSB7XG4gICAgICAgICAgICB3YXJuaW5ncy5wdXNoKCdVbmJhbGFuY2VkIHBhcmVudGhlc2VzIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWxpZDogd2FybmluZ3MubGVuZ3RoID09PSAwLFxuICAgICAgICAgICAgd2FybmluZ3NcbiAgICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgcXVlcnkgY29udGFpbnMgbXVsdGlwbGUgc3RhdGVtZW50c1xuICAgICAqL1xuICAgIHByaXZhdGUgaGFzTXVsdGlwbGVTdGF0ZW1lbnRzKHF1ZXJ5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgLy8gTG9vayBmb3IgbXVsdGlwbGUgcXVlcnkga2V5d29yZHNcbiAgICAgICAgY29uc3QgcXVlcnlLZXl3b3JkcyA9IFsnU0VMRUNUJywgJ0NPTlNUUlVDVCcsICdJTlNFUlQnLCAnREVMRVRFJywgJ0RST1AnXTtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiBxdWVyeUtleXdvcmRzKSB7XG4gICAgICAgICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYFxcXFxiJHtrZXl3b3JkfVxcXFxiYCwgJ2dpJyk7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gcXVlcnkubWF0Y2gocmVnZXgpO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBjb3VudCArPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvdW50ID4gMTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBmaXJzdCBzdGF0ZW1lbnQgZnJvbSBxdWVyeVxuICAgICAqL1xuICAgIHByaXZhdGUgZXh0cmFjdEZpcnN0U3RhdGVtZW50KHF1ZXJ5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICAvLyBGaW5kIHRoZSBlbmQgb2YgdGhlIGZpcnN0IGNvbXBsZXRlIHN0YXRlbWVudFxuICAgICAgICBsZXQgZGVwdGggPSAwO1xuICAgICAgICBsZXQgaW5TdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN0cmluZ0NoYXIgPSAnJztcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVlcnkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXIgPSBxdWVyeVtpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSGFuZGxlIHN0cmluZyBsaXRlcmFsc1xuICAgICAgICAgICAgaWYgKChjaGFyID09PSAnXCInIHx8IGNoYXIgPT09IFwiJ1wiKSAmJiBxdWVyeVtpIC0gMV0gIT09ICdcXFxcJykge1xuICAgICAgICAgICAgICAgIGlmICghaW5TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5TdHJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdDaGFyID0gY2hhcjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXIgPT09IHN0cmluZ0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5TdHJpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghaW5TdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gJ3snKSBkZXB0aCsrO1xuICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnfScpIGRlcHRoLS07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UndmUgY29tcGxldGVkIGEgc3RhdGVtZW50XG4gICAgICAgICAgICAgICAgaWYgKGRlcHRoID09PSAwICYmIGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIExvb2sgZm9yIG5leHQgcXVlcnkga2V5d29yZFxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW1haW5pbmcgPSBxdWVyeS5zdWJzdHJpbmcoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXHMqKFNFTEVDVHxDT05TVFJVQ1R8SU5TRVJUfERFTEVURSkvaS50ZXN0KHJlbWFpbmluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeS5zdWJzdHJpbmcoMCwgaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIElSSSBwYXR0ZXJucyBpbiBxdWVyeVxuICAgICAqL1xuICAgIHByaXZhdGUgdmFsaWRhdGVJUklzKHF1ZXJ5OiBzdHJpbmcpOiB7IHZhbGlkOiBib29sZWFuOyB3YXJuaW5nczogc3RyaW5nW10gfSB7XG4gICAgICAgIGNvbnN0IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFjdCBJUklzIGZyb20gcXVlcnlcbiAgICAgICAgY29uc3QgaXJpUGF0dGVybiA9IC88KFtePl0rKT4vZztcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICBcbiAgICAgICAgd2hpbGUgKChtYXRjaCA9IGlyaVBhdHRlcm4uZXhlYyhxdWVyeSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBpcmkgPSBtYXRjaFsxXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHN1c3BpY2lvdXMgSVJJIHBhdHRlcm5zXG4gICAgICAgICAgICBpZiAoaXJpLmluY2x1ZGVzKCcuLicpIHx8IGlyaS5pbmNsdWRlcygnXFxcXCcpKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZ3MucHVzaChgU3VzcGljaW91cyBJUkkgZGV0ZWN0ZWQ6ICR7aXJpfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgbG9jYWwgZmlsZSBhY2Nlc3NcbiAgICAgICAgICAgIGlmIChpcmkuc3RhcnRzV2l0aCgnZmlsZTonKSkge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdzLnB1c2goYEZpbGUgVVJJIG5vdCBhbGxvd2VkOiAke2lyaX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgSVJJIGxlbmd0aFxuICAgICAgICAgICAgaWYgKGlyaS5sZW5ndGggPiAyMDQ4KSB7XG4gICAgICAgICAgICAgICAgd2FybmluZ3MucHVzaChgSVJJIHRvbyBsb25nOiAke2lyaS5zdWJzdHJpbmcoMCwgNTApfS4uLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsaWQ6IHdhcm5pbmdzLmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICAgIHdhcm5pbmdzXG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIENoZWNrIHF1ZXJ5IGNvbXBsZXhpdHkgdG8gcHJldmVudCBEb1NcbiAgICAgKi9cbiAgICBwcml2YXRlIGNoZWNrQ29tcGxleGl0eShxdWVyeTogc3RyaW5nKTogeyB0b29Db21wbGV4OiBib29sZWFuOyByZWFzb24/OiBzdHJpbmcgfSB7XG4gICAgICAgIC8vIENoZWNrIHF1ZXJ5IGxlbmd0aFxuICAgICAgICBpZiAocXVlcnkubGVuZ3RoID4gMTAwMDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IHRydWUsIHJlYXNvbjogJ1F1ZXJ5IGV4Y2VlZHMgbWF4aW11bSBsZW5ndGgnIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENvdW50IHRyaXBsZSBwYXR0ZXJuc1xuICAgICAgICBjb25zdCB0cmlwbGVQYXR0ZXJucyA9IChxdWVyeS5tYXRjaCgvXFwuXFxzKlxcPy9nKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBpZiAodHJpcGxlUGF0dGVybnMgPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IHRydWUsIHJlYXNvbjogJ1RvbyBtYW55IHRyaXBsZSBwYXR0ZXJucycgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ291bnQgVU5JT04gb3BlcmF0aW9uc1xuICAgICAgICBjb25zdCB1bmlvbnMgPSAocXVlcnkubWF0Y2goL1xcYlVOSU9OXFxiL2dpKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBpZiAodW5pb25zID4gMTApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IHRydWUsIHJlYXNvbjogJ1RvbyBtYW55IFVOSU9OIG9wZXJhdGlvbnMnIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENvdW50IG5lc3RlZCBzdWJxdWVyaWVzXG4gICAgICAgIGNvbnN0IHN1YnF1ZXJpZXMgPSAocXVlcnkubWF0Y2goL1xce1tefV0qU0VMRUNUL2dpKSB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBpZiAoc3VicXVlcmllcyA+IDUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IHRydWUsIHJlYXNvbjogJ1RvbyBtYW55IG5lc3RlZCBzdWJxdWVyaWVzJyB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDb3VudCBGSUxURVIgb3BlcmF0aW9uc1xuICAgICAgICBjb25zdCBmaWx0ZXJzID0gKHF1ZXJ5Lm1hdGNoKC9cXGJGSUxURVJcXGIvZ2kpIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgIGlmIChmaWx0ZXJzID4gMjApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHRvb0NvbXBsZXg6IHRydWUsIHJlYXNvbjogJ1RvbyBtYW55IEZJTFRFUiBvcGVyYXRpb25zJyB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4geyB0b29Db21wbGV4OiBmYWxzZSB9O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIGxpdGVyYWxzXG4gICAgICovXG4gICAgZXNjYXBlU3RyaW5nTGl0ZXJhbCh2YWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCAnXFxcXFxcXFwnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKVxuICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcci9nLCAnXFxcXHInKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCAnXFxcXHQnKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHNhZmUgSVJJIGZyb20gdXNlciBpbnB1dFxuICAgICAqL1xuICAgIGNyZWF0ZVNhZmVJUkkoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIC8vIFJlbW92ZSBkYW5nZXJvdXMgY2hhcmFjdGVyc1xuICAgICAgICBjb25zdCBzYWZlID0gaW5wdXRcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bPD4nXCJgO10vZywgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnXycpXG4gICAgICAgICAgICAucmVwbGFjZSgvW15cXHc6Ly1dL2csICcnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEVuc3VyZSB2YWxpZCBJUkkgZm9ybWF0XG4gICAgICAgIGlmICghc2FmZS5pbmNsdWRlcygnOicpKSB7XG4gICAgICAgICAgICByZXR1cm4gYGV4OiR7c2FmZX1gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc2FmZTtcbiAgICB9XG59Il0sInZlcnNpb24iOjN9