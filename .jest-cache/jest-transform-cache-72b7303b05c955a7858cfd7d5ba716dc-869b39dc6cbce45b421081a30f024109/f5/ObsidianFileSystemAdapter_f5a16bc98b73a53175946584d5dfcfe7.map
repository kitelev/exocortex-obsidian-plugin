{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/adapters/ObsidianFileSystemAdapter.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/adapters/ObsidianFileSystemAdapter.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { Result } from \"../../domain/core/Result\";\nimport { IFileSystemAdapter } from \"../../application/ports/IFileSystemAdapter\";\n\n/**\n * Obsidian implementation of file system adapter\n */\nexport class ObsidianFileSystemAdapter implements IFileSystemAdapter {\n  constructor(private app: App) {}\n\n  async readFile(path: string): Promise<Result<string>> {\n    try {\n      const file = this.app.vault.getAbstractFileByPath(path);\n      if (!file || !(file instanceof TFile)) {\n        return Result.fail(`File not found: ${path}`);\n      }\n\n      const content = await this.app.vault.read(file);\n      return Result.ok(content);\n    } catch (error) {\n      return Result.fail(`Failed to read file ${path}: ${error.message}`);\n    }\n  }\n\n  async writeFile(path: string, content: string): Promise<Result<void>> {\n    try {\n      const file = this.app.vault.getAbstractFileByPath(path);\n      if (file instanceof TFile) {\n        await this.app.vault.modify(file, content);\n      } else {\n        await this.app.vault.create(path, content);\n      }\n      return Result.ok(undefined);\n    } catch (error) {\n      return Result.fail(`Failed to write file ${path}: ${error.message}`);\n    }\n  }\n\n  async fileExists(path: string): Promise<boolean> {\n    const file = this.app.vault.getAbstractFileByPath(path);\n    return file instanceof TFile;\n  }\n\n  async listFiles(\n    directory?: string,\n    extension?: string,\n  ): Promise<Result<TFile[]>> {\n    try {\n      let files = this.app.vault.getFiles();\n\n      if (directory) {\n        files = files.filter((file) => file.path.startsWith(directory));\n      }\n\n      if (extension) {\n        files = files.filter((file) => file.extension === extension);\n      }\n\n      return Result.ok(files);\n    } catch (error) {\n      return Result.fail(`Failed to list files: ${error.message}`);\n    }\n  }\n\n  generateFileName(baseName?: string, extension?: string): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n    const name = baseName || `export-${timestamp}`;\n    return extension ? `${name}.${extension}` : name;\n  }\n\n  detectFormatFromExtension(fileName: string): string {\n    const extension = fileName.split(\".\").pop()?.toLowerCase();\n    const formatMap: Record<string, string> = {\n      ttl: \"turtle\",\n      nt: \"n-triples\",\n      jsonld: \"json-ld\",\n      rdf: \"rdf-xml\",\n      xml: \"rdf-xml\",\n    };\n    return formatMap[extension || \"\"] || \"turtle\";\n  }\n\n  async ensureDirectory(path: string): Promise<Result<void>> {\n    try {\n      const exists = await this.app.vault.adapter.exists(path);\n      if (!exists) {\n        await this.app.vault.adapter.mkdir(path);\n      }\n      return Result.ok(undefined);\n    } catch (error) {\n      return Result.fail(\n        `Failed to create directory ${path}: ${error.message}`,\n      );\n    }\n  }\n}\n"],"version":3}