0edf4a8649254fcf2b7081564b0653e0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MobilePerformanceOptimizer = void 0;
const obsidian_1 = require("obsidian");
class MobilePerformanceOptimizer {
    constructor(config) {
        // Performance thresholds
        this.MOBILE_BATCH_SIZE = 10;
        this.DESKTOP_BATCH_SIZE = 50;
        this.MOBILE_CACHE_SIZE = 50;
        this.DESKTOP_CACHE_SIZE = 200;
        this.MOBILE_DEBOUNCE_MS = 500;
        this.DESKTOP_DEBOUNCE_MS = 200;
        // Memory management
        this.memoryPressureCallbacks = new Set();
        this.lastMemoryCheck = 0;
        this.memoryCheckInterval = 5000; // 5 seconds
        // Lazy loading state
        this.loadingQueue = new Map();
        this.isProcessingQueue = false;
        // Performance tracking
        this.operations = new Map();
        this.caches = new Map();
        this.cacheStats = new Map();
        this.pendingCallbacks = new Set();
        this.config = {
            maxMemoryMB: 100,
            maxCacheEntries: 200,
            batchSize: 50,
            debounceMs: 300,
            enableGCHints: false,
            enableLazyLoading: true,
            virtualScrollThreshold: 100,
            ...config,
        };
        this.detectPlatform();
        this.setupMemoryMonitoring();
    }
    static getInstance(config) {
        if (!MobilePerformanceOptimizer.instance) {
            MobilePerformanceOptimizer.instance = new MobilePerformanceOptimizer(config);
        }
        return MobilePerformanceOptimizer.instance;
    }
    detectPlatform() {
        // Use Obsidian's Platform API if available
        if (typeof obsidian_1.Platform !== "undefined" && obsidian_1.Platform) {
            this._isMobile = obsidian_1.Platform.isMobile || obsidian_1.Platform.isMobileApp;
            this._isIOS = obsidian_1.Platform.isIosApp;
            this._isAndroid = obsidian_1.Platform.isAndroidApp;
            this._isTablet = obsidian_1.Platform.isTablet;
        }
        else {
            // Fallback values for test environment
            this._isMobile = false;
            this._isIOS = false;
            this._isAndroid = false;
            this._isTablet = false;
        }
        // Fallback detection using user agent if Platform API is unavailable or values are false
        if (!this._isMobile && typeof navigator !== "undefined") {
            const userAgent = navigator.userAgent.toLowerCase();
            this._isMobile = /mobile|android|iphone|ipad|ipod/.test(userAgent);
            this._isIOS = /iphone|ipad|ipod/.test(userAgent);
            this._isAndroid = /android/.test(userAgent);
            this._isTablet = /ipad|tablet/.test(userAgent);
        }
    }
    setupMemoryMonitoring() {
        if (!this.isMobile())
            return;
        // Monitor memory pressure on mobile
        if ("requestIdleCallback" in window) {
            const checkMemory = () => {
                window.requestIdleCallback(() => {
                    this.checkMemoryPressure();
                    setTimeout(checkMemory, this.memoryCheckInterval);
                });
            };
            checkMemory();
        }
    }
    checkMemoryPressure() {
        const now = Date.now();
        if (now - this.lastMemoryCheck < this.memoryCheckInterval)
            return;
        this.lastMemoryCheck = now;
        // Check if we're under memory pressure
        if (this.isUnderMemoryPressure()) {
            // Notify all registered callbacks
            this.memoryPressureCallbacks.forEach((callback) => {
                try {
                    callback();
                }
                catch (error) {
                    console.error("Memory pressure callback error:", error);
                }
            });
        }
    }
    isUnderMemoryPressure() {
        // Check performance.memory if available (Chrome/Edge)
        if ("memory" in performance) {
            const memory = performance.memory;
            const usageRatio = memory.usedJSHeapSize / memory.jsHeapSizeLimit;
            return usageRatio > 0.8; // 80% memory usage threshold
        }
        // Fallback: assume memory pressure on older devices
        if (this.isMobile()) {
            // Simple heuristic based on device age
            const deviceAge = this.estimateDeviceAge();
            return deviceAge > 3; // Assume pressure on devices older than 3 years
        }
        return false;
    }
    estimateDeviceAge() {
        // Estimate device age based on capabilities
        let age = 0;
        // Check for modern features
        if (!("IntersectionObserver" in window))
            age += 2;
        if (!("ResizeObserver" in window))
            age += 1;
        if (!("requestIdleCallback" in window))
            age += 1;
        if (!("AbortController" in window))
            age += 1;
        return age;
    }
    // Public API
    isMobile() {
        return this._isMobile;
    }
    isIOS() {
        return this._isIOS;
    }
    isAndroid() {
        return this._isAndroid;
    }
    isTablet() {
        return this._isTablet;
    }
    getBatchSize() {
        if (this.config.batchSize) {
            return this.config.batchSize;
        }
        return this.isMobile() ? this.MOBILE_BATCH_SIZE : this.DESKTOP_BATCH_SIZE;
    }
    getCacheSize() {
        if (this.config.maxCacheEntries) {
            return this.config.maxCacheEntries;
        }
        return this.isMobile() ? this.MOBILE_CACHE_SIZE : this.DESKTOP_CACHE_SIZE;
    }
    getDebounceMs() {
        if (this.config.debounceMs) {
            return this.config.debounceMs;
        }
        return this.isMobile() ? this.MOBILE_DEBOUNCE_MS : this.DESKTOP_DEBOUNCE_MS;
    }
    /**
     * Register a callback to be called when memory pressure is detected
     */
    onMemoryPressure(callback) {
        this.memoryPressureCallbacks.add(callback);
        // Return unsubscribe function
        return () => {
            this.memoryPressureCallbacks.delete(callback);
        };
    }
    /**
     * Process data in optimized batches
     */
    async processBatch(items, processor, options) {
        const batchSize = this.getBatchSize();
        const results = [];
        // Process priority items first if provided
        if (options?.priorityItems) {
            for (const item of options.priorityItems) {
                results.push(await processor(item));
            }
        }
        // Process remaining items in batches
        const regularItems = options?.priorityItems
            ? items.filter((item) => !options.priorityItems.includes(item))
            : items;
        for (let i = 0; i < regularItems.length; i += batchSize) {
            const batch = regularItems.slice(i, i + batchSize);
            // Process batch in parallel
            const batchResults = await Promise.all(batch.map((item) => processor(item)));
            results.push(...batchResults);
            // Report progress
            if (options?.onProgress) {
                options.onProgress(results.length, items.length);
            }
            // Yield to UI thread on mobile
            if (this.isMobile() && i + batchSize < regularItems.length) {
                await this.yieldToUI();
            }
        }
        return results;
    }
    /**
     * Lazy load data with queue management
     */
    async lazyLoad(key, loader, options) {
        // Check if already loading
        if (this.loadingQueue.has(key)) {
            return this.loadingQueue.get(key)();
        }
        // Create loading promise
        const loadPromise = async () => {
            try {
                const result = await loader();
                // Remove from queue when done
                this.loadingQueue.delete(key);
                return result;
            }
            catch (error) {
                this.loadingQueue.delete(key);
                throw error;
            }
        };
        // Add to queue
        this.loadingQueue.set(key, loadPromise);
        // Process queue if not already processing
        if (!this.isProcessingQueue) {
            this.processLoadingQueue();
        }
        return loadPromise();
    }
    async processLoadingQueue() {
        if (this.isProcessingQueue || this.loadingQueue.size === 0)
            return;
        this.isProcessingQueue = true;
        while (this.loadingQueue.size > 0) {
            // Get next item from queue
            const [key, loader] = this.loadingQueue.entries().next().value;
            try {
                await loader();
            }
            catch (error) {
                console.error(`Failed to lazy load ${key}:`, error);
            }
            // Yield to UI thread
            await this.yieldToUI();
        }
        this.isProcessingQueue = false;
    }
    /**
     * Yield control back to the UI thread
     */
    async yieldToUI() {
        return new Promise((resolve) => {
            if ("requestIdleCallback" in window) {
                window.requestIdleCallback(() => resolve());
            }
            else {
                setTimeout(resolve, 0);
            }
        });
    }
    /**
     * Debounce function optimized for platform
     */
    debounce(func, wait) {
        const delay = wait ?? this.getDebounceMs();
        let timeoutId;
        return (...args) => {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func(...args), delay);
        };
    }
    /**
     * Throttle function optimized for platform
     */
    throttle(func, wait) {
        const delay = wait ?? this.getDebounceMs();
        let lastCall = 0;
        let timeoutId = null;
        return (...args) => {
            const now = Date.now();
            const timeSinceLastCall = now - lastCall;
            if (timeSinceLastCall >= delay) {
                lastCall = now;
                func(...args);
            }
            else if (!timeoutId) {
                timeoutId = setTimeout(() => {
                    lastCall = Date.now();
                    timeoutId = null;
                    func(...args);
                }, delay - timeSinceLastCall);
            }
        };
    }
    /**
     * Create an LRU cache optimized for platform
     */
    createCache(options) {
        const maxSize = options?.maxSize ?? this.getCacheSize();
        // Use a simple Map with size limit for mobile
        const cache = new Map();
        // Override set method to enforce size limit
        const originalSet = cache.set.bind(cache);
        cache.set = (key, value) => {
            // Remove oldest entry if at capacity
            if (cache.size >= maxSize && !cache.has(key)) {
                const firstKey = cache.keys().next().value;
                cache.delete(firstKey);
            }
            return originalSet(key, value);
        };
        return cache;
    }
    /**
     * Optimize image loading for mobile
     */
    getOptimalImageSize() {
        if (this.isMobile()) {
            // Get device pixel ratio
            const dpr = window.devicePixelRatio || 1;
            // Get viewport size
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            // Calculate optimal size based on viewport and DPR
            return {
                width: Math.min(viewportWidth * dpr, 1024),
                height: Math.min(viewportHeight * dpr, 1024),
            };
        }
        // Desktop can handle larger images
        return {
            width: 2048,
            height: 2048,
        };
    }
    /**
     * Check if a feature should be enabled based on performance
     */
    shouldEnableFeature(feature) {
        if (!this.isMobile())
            return true;
        // Disable heavy features on mobile
        switch (feature) {
            case "animations":
                return !this.isUnderMemoryPressure();
            case "shadows":
                return false; // Always disable shadows on mobile
            case "3d":
                return this.isTablet(); // Only on tablets
            case "transitions":
                return !this.isUnderMemoryPressure();
            default:
                return true;
        }
    }
    /**
     * Clear all managed caches
     */
    clearAllCaches() {
        this.caches.forEach((cache) => cache.clear());
        this.cacheStats.forEach((stats) => {
            stats.hits = 0;
            stats.misses = 0;
        });
    }
    /**
     * Get cache statistics for all caches
     */
    getCacheStats() {
        const stats = {};
        this.cacheStats.forEach((stat, name) => {
            const cache = this.caches.get(name);
            stats[name] = {
                ...stat,
                size: cache?.size || 0,
            };
        });
        return stats;
    }
    /**
     * Track operation timing
     */
    trackOperation(name, operation) {
        const start = performance.now();
        const result = operation();
        const duration = performance.now() - start;
        const existing = this.operations.get(name) || { count: 0, totalTime: 0 };
        this.operations.set(name, {
            count: existing.count + 1,
            totalTime: existing.totalTime + duration,
        });
        return result;
    }
    /**
     * Create virtual scroll container
     */
    createVirtualScroll(container, items, renderItem, options) {
        const itemHeight = options?.itemHeight || 50;
        const containerHeight = options?.containerHeight || 400;
        const overscan = options?.overscan || 5;
        container.style.height = `${containerHeight}px`;
        container.style.overflow = "auto";
        let startIndex = 0;
        let endIndex = Math.min(items.length, Math.ceil(containerHeight / itemHeight) + overscan);
        const render = () => {
            container.innerHTML = "";
            for (let i = startIndex; i < endIndex; i++) {
                if (items[i]) {
                    const element = renderItem(items[i]);
                    container.appendChild(element);
                }
            }
        };
        const handleScroll = () => {
            const scrollTop = container.scrollTop;
            startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);
            endIndex = Math.min(items.length, startIndex + Math.ceil(containerHeight / itemHeight) + 2 * overscan);
            render();
        };
        container.addEventListener("scroll", handleScroll);
        render();
        return {
            destroy: () => {
                container.removeEventListener("scroll", handleScroll);
                container.innerHTML = "";
            },
        };
    }
    /**
     * Optimize image file
     */
    async optimizeImage(file, options) {
        return new Promise((resolve, reject) => {
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");
            const img = document.createElement("img");
            if (!ctx) {
                reject(new Error("Canvas not supported"));
                return;
            }
            img.onload = () => {
                const maxWidth = options?.maxWidth || 1024;
                const maxHeight = options?.maxHeight || 1024;
                const quality = options?.quality || this.config.imageQuality || 0.8;
                // Calculate new dimensions
                let { width, height } = img;
                if (width > maxWidth || height > maxHeight) {
                    const ratio = Math.min(maxWidth / width, maxHeight / height);
                    width *= ratio;
                    height *= ratio;
                }
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);
                const dataUrl = canvas.toDataURL("image/jpeg", quality);
                resolve(dataUrl);
            };
            img.onerror = () => reject(new Error("Failed to load image"));
            img.src = URL.createObjectURL(file);
        });
    }
    /**
     * Schedule memory cleanup during idle time
     */
    scheduleMemoryCleanup(callback) {
        const scheduleCallback = global.requestIdleCallback || setTimeout;
        const callbackId = scheduleCallback(callback, { timeout: 5000 });
        this.pendingCallbacks.add(callbackId);
    }
    /**
     * Force garbage collection if available
     */
    forceGarbageCollection() {
        if (global.gc) {
            global.gc();
        }
    }
    /**
     * Update configuration
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    /**
     * Get comprehensive performance metrics
     */
    getMetrics() {
        const operationMetrics = {};
        this.operations.forEach((data, name) => {
            operationMetrics[name] = {
                ...data,
                averageTime: data.totalTime / data.count,
            };
        });
        return {
            batchProcessingEnabled: true,
            effectiveBatchSize: this.getBatchSize(),
            cacheEnabled: true,
            effectiveCacheSize: this.getCacheSize(),
            virtualScrollingEnabled: this.config.enableLazyLoading || false,
            imageOptimizationEnabled: true,
            memoryManagementEnabled: this.isMobile(),
            operations: operationMetrics,
            cacheStats: this.getCacheStats(),
            memoryUsage: this.getMemoryUsage(),
        };
    }
    /**
     * Get current memory usage statistics
     */
    getMemoryUsage() {
        if ("memory" in performance) {
            const memory = performance.memory;
            return {
                used: memory.usedJSHeapSize || 0,
                total: memory.totalJSHeapSize || 0,
                percentage: memory.totalJSHeapSize
                    ? Math.round((memory.usedJSHeapSize / memory.totalJSHeapSize) * 100)
                    : 0,
            };
        }
        return { used: 0, total: 0, percentage: 0 };
    }
    /**
     * Clean up resources (alias for destroy for test compatibility)
     */
    cleanup() {
        this.destroy();
    }
    /**
     * Clean up resources and stop monitoring
     */
    destroy() {
        // Clear all callbacks
        this.memoryPressureCallbacks.clear();
        // Clear loading queue
        this.loadingQueue.clear();
        this.isProcessingQueue = false;
        // Cancel pending callbacks
        this.pendingCallbacks.forEach((id) => {
            const cancelCallback = global.cancelIdleCallback || clearTimeout;
            cancelCallback(id);
        });
        this.pendingCallbacks.clear();
        // Clear caches
        this.clearAllCaches();
        // Clear operation tracking
        this.operations.clear();
        // Clear static instance if this is the singleton
        if (MobilePerformanceOptimizer.instance === this) {
            MobilePerformanceOptimizer.instance = null;
        }
    }
    /**
     * Register out-of-memory handler
     */
    onOutOfMemory(handler) {
        this.oomHandler = handler;
    }
    /**
     * Get loading strategy based on connection and device capabilities
     */
    async getLoadingStrategy() {
        try {
            const strategy = {
                batchSize: obsidian_1.Platform.isMobile
                    ? this.MOBILE_BATCH_SIZE
                    : this.DESKTOP_BATCH_SIZE,
                useVirtualScrolling: obsidian_1.Platform.isMobile,
                enableImageOptimization: obsidian_1.Platform.isMobile,
                enableBackgroundLoading: !obsidian_1.Platform.isMobile,
                adaptiveLoading: obsidian_1.Platform.isMobile,
            };
            return {
                isSuccess: true,
                getValue: () => strategy,
            };
        }
        catch (error) {
            return {
                isSuccess: false,
                getValue: () => null,
            };
        }
    }
    /**
     * Handle offline mode scenarios
     */
    async handleOfflineMode() {
        try {
            const offlineStrategy = {
                enableCaching: true,
                cacheSize: obsidian_1.Platform.isMobile
                    ? this.MOBILE_CACHE_SIZE
                    : this.DESKTOP_CACHE_SIZE,
                enableOfflineStorage: true,
                enableQueuedOperations: true,
                enableDegradedMode: true,
            };
            return {
                isSuccess: true,
                getValue: () => offlineStrategy,
            };
        }
        catch (error) {
            return {
                isSuccess: false,
                getValue: () => null,
            };
        }
    }
}
exports.MobilePerformanceOptimizer = MobilePerformanceOptimizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,