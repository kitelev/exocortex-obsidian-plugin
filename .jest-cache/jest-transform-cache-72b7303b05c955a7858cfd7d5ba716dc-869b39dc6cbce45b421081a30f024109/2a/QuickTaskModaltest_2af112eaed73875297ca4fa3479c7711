aec834e55e162ced686e2219498122c9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock Notice to avoid constructor issues
jest.mock('obsidian', () => (Object.assign(Object.assign({}, jest.requireActual('obsidian')), { Notice: jest.fn().mockImplementation((message) => {
        return { message };
    }), Setting: jest.fn().mockImplementation((containerEl) => {
        return {
            setName: jest.fn().mockReturnThis(),
            setDesc: jest.fn().mockReturnThis(),
            addText: jest.fn().mockReturnThis(),
            addTextArea: jest.fn().mockReturnThis(),
            addDropdown: jest.fn().mockReturnThis(),
        };
    }) })));
const QuickTaskModal_1 = require("../../../../src/presentation/modals/QuickTaskModal");
const obsidian_1 = require("obsidian");
describe('QuickTaskModal', () => {
    let app;
    let modal;
    let mockCreateTaskUseCase;
    let mockGetCurrentProjectUseCase;
    let mockContentEl;
    // Mock responses
    const mockProjectResponse = {
        success: true,
        currentProject: {
            id: 'project-123',
            title: 'Test Project',
            status: 'active',
            priority: 'high',
            description: 'Test project description'
        },
        availableProjects: [
            {
                id: 'project-123',
                title: 'Test Project',
                status: 'active',
                priority: 'high',
                isActive: true,
                lastUpdated: '2024-01-01T00:00:00Z'
            },
            {
                id: 'project-456',
                title: 'Another Project',
                status: 'active',
                priority: 'medium',
                isActive: false,
                lastUpdated: '2024-01-02T00:00:00Z'
            }
        ],
        context: {
            strategy: 'context',
            confidence: 0.8,
            reasoning: 'Detected from active file'
        }
    };
    const mockTaskResponse = {
        success: true,
        taskId: 'task-789',
        message: 'Task created successfully',
        task: {
            id: 'task-789',
            title: 'Test Task',
            status: 'todo',
            priority: 'medium',
            projectId: 'project-123',
            tags: ['test']
        }
    };
    beforeEach(() => {
        jest.clearAllMocks();
        // Mock app
        app = new obsidian_1.App();
        // Mock use cases
        mockCreateTaskUseCase = {
            execute: jest.fn()
        };
        mockGetCurrentProjectUseCase = {
            execute: jest.fn()
        };
        // Create modal with mocks
        modal = new QuickTaskModal_1.QuickTaskModal(app, mockCreateTaskUseCase, mockGetCurrentProjectUseCase, 'test-file.md');
        // Setup mock content element with Obsidian methods
        mockContentEl = document.createElement('div');
        setupElementMethods(mockContentEl);
        // Mock the contentEl property
        Object.defineProperty(modal, 'contentEl', {
            get: () => mockContentEl,
            configurable: true
        });
        // Notice is already mocked at module level
    });
    function setupElementMethods(element) {
        element.empty = jest.fn(() => {
            while (element.firstChild) {
                element.removeChild(element.firstChild);
            }
        });
        element.createEl = jest.fn((tag, options) => {
            const el = document.createElement(tag);
            if (options === null || options === void 0 ? void 0 : options.text)
                el.textContent = options.text;
            if (options === null || options === void 0 ? void 0 : options.cls)
                el.className = options.cls;
            element.appendChild(el);
            setupElementMethods(el);
            return el;
        });
        element.createDiv = jest.fn((options) => {
            const el = document.createElement('div');
            if (options === null || options === void 0 ? void 0 : options.cls)
                el.className = options.cls;
            element.appendChild(el);
            setupElementMethods(el);
            return el;
        });
        element.addEventListener = jest.fn();
    }
    describe('Modal Initialization', () => {
        it('should initialize with default values', () => {
            expect(modal).toBeInstanceOf(obsidian_1.Modal);
            expect(modal.taskTitle).toBe('');
            expect(modal.taskDescription).toBe('');
            expect(modal.taskPriority).toBe('medium');
            expect(modal.taskStatus).toBe('todo');
            expect(modal.taskDueDate).toBe('');
            expect(modal.taskEstimatedHours).toBeUndefined();
            expect(modal.taskTags).toEqual([]);
            expect(modal.activeFile).toBe('test-file.md');
        });
        it('should initialize with custom active file', () => {
            const customModal = new QuickTaskModal_1.QuickTaskModal(app, mockCreateTaskUseCase, mockGetCurrentProjectUseCase, 'custom-file.md');
            expect(customModal.activeFile).toBe('custom-file.md');
        });
        it('should initialize without active file', () => {
            const customModal = new QuickTaskModal_1.QuickTaskModal(app, mockCreateTaskUseCase, mockGetCurrentProjectUseCase);
            expect(customModal.activeFile).toBeUndefined();
        });
    });
    describe('onOpen method', () => {
        it('should clear content element on open', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(mockContentEl.empty).toHaveBeenCalled();
        }));
        it('should create modal title', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(mockContentEl.createEl).toHaveBeenCalledWith('h2', { text: 'Create New Task' });
        }));
        it('should load project context', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(mockGetCurrentProjectUseCase.execute).toHaveBeenCalledWith({
                activeFile: 'test-file.md',
                preferences: {
                    includeCompleted: false,
                    maxResults: 10,
                    selectionStrategy: 'context'
                }
            });
        }));
        it('should display current project when detected', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(mockContentEl.createDiv).toHaveBeenCalledWith({ cls: 'quick-task-project' });
            expect(modal.selectedProjectId).toBe('project-123');
        }));
        it('should create project dropdown when multiple projects available', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            // Should create Setting for project dropdown
            expect(obsidian_1.Setting).toHaveBeenCalled();
        }));
        it('should setup form fields with proper settings', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            // Multiple Setting instances should be created for different fields
            expect(obsidian_1.Setting).toHaveBeenCalledTimes(8); // Project dropdown, Title, Description, Priority, Status, Due Date, Estimated Hours, Tags
        }));
        it('should initialize due date field', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            // Due date setting should be created (actual value setting tested in integration)
            expect(obsidian_1.Setting).toHaveBeenCalled();
        }));
        it('should create action buttons', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(mockContentEl.createDiv).toHaveBeenCalledWith({ cls: 'quick-task-buttons' });
        }));
        it('should add custom styles', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            const mockCreateElement = jest.spyOn(document, 'createElement');
            const mockAppendChild = jest.spyOn(document.head, 'appendChild');
            yield modal.onOpen();
            expect(mockCreateElement).toHaveBeenCalledWith('style');
            expect(mockAppendChild).toHaveBeenCalled();
        }));
        it('should setup keyboard event listener', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(mockContentEl.addEventListener).toHaveBeenCalledWith('keydown', expect.any(Function));
        }));
    });
    describe('onClose method', () => {
        it('should clear content element on close', () => {
            modal.onClose();
            expect(mockContentEl.empty).toHaveBeenCalled();
        });
    });
    describe('Project Context Loading', () => {
        it('should handle successful project context loading', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            expect(modal.currentProject).toEqual(mockProjectResponse.currentProject);
            expect(modal.availableProjects).toEqual(mockProjectResponse.availableProjects);
        }));
        it('should handle project context loading without current project', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const noProjectResponse = Object.assign(Object.assign({}, mockProjectResponse), { currentProject: undefined });
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(noProjectResponse);
            yield modal.onOpen();
            expect(modal.currentProject).toBeUndefined();
            expect(modal.selectedProjectId).toBeUndefined();
        }));
        it('should handle project context loading error', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockRejectedValue(new Error('Project loading failed'));
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            yield modal.onOpen();
            expect(consoleSpy).toHaveBeenCalledWith('Failed to load project context:', expect.any(Error));
            expect(modal.currentProject).toBeUndefined();
            consoleSpy.mockRestore();
        }));
        it('should handle empty available projects list', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const noProjectsResponse = Object.assign(Object.assign({}, mockProjectResponse), { availableProjects: [] });
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(noProjectsResponse);
            yield modal.onOpen();
            expect(modal.availableProjects).toEqual([]);
        }));
    });
    describe('Form Field Updates', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
        }));
        it('should update task title', () => {
            modal.taskTitle = 'Updated Title';
            expect(modal.taskTitle).toBe('Updated Title');
        });
        it('should update task description', () => {
            modal.taskDescription = 'Updated description';
            expect(modal.taskDescription).toBe('Updated description');
        });
        it('should update task priority', () => {
            modal.taskPriority = 'high';
            expect(modal.taskPriority).toBe('high');
        });
        it('should update task status', () => {
            modal.taskStatus = 'in-progress';
            expect(modal.taskStatus).toBe('in-progress');
        });
        it('should update due date', () => {
            modal.taskDueDate = '2024-12-25';
            expect(modal.taskDueDate).toBe('2024-12-25');
        });
        it('should update estimated hours with valid number', () => {
            modal.taskEstimatedHours = 5.5;
            expect(modal.taskEstimatedHours).toBe(5.5);
        });
        it('should handle invalid estimated hours', () => {
            modal.taskEstimatedHours = undefined;
            expect(modal.taskEstimatedHours).toBeUndefined();
        });
        it('should parse tags from comma-separated string', () => {
            modal.taskTags = ['tag1', 'tag2', 'tag3'];
            expect(modal.taskTags).toEqual(['tag1', 'tag2', 'tag3']);
        });
        it('should filter empty tags', () => {
            // Simulate the tag parsing logic
            const tagsInput = 'tag1, , tag2,  ,tag3';
            const parsedTags = tagsInput
                .split(',')
                .map(tag => tag.trim())
                .filter(tag => tag.length > 0);
            expect(parsedTags).toEqual(['tag1', 'tag2', 'tag3']);
        });
    });
    describe('Task Creation', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            // Setup form data
            modal.taskTitle = 'Test Task';
            modal.taskDescription = 'Test description';
            modal.taskPriority = 'high';
            modal.taskStatus = 'todo';
            modal.taskDueDate = '2024-12-25';
            modal.taskEstimatedHours = 2.5;
            modal.taskTags = ['test', 'urgent'];
            modal.selectedProjectId = 'project-123';
        }));
        it('should create task with valid data', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateTaskUseCase.execute.mockResolvedValue(mockTaskResponse);
            modal.close = jest.fn();
            const result = yield modal.createTask();
            expect(mockCreateTaskUseCase.execute).toHaveBeenCalledWith({
                title: 'Test Task',
                description: 'Test description',
                priority: 'high',
                status: 'todo',
                projectId: 'project-123',
                dueDate: '2024-12-25',
                estimatedHours: 2.5,
                tags: ['test', 'urgent'],
                context: {
                    activeFile: 'test-file.md'
                }
            });
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Task "Test Task" created successfully');
            expect(modal.close).toHaveBeenCalled();
            expect(result).toBe(true);
        }));
        it('should validate required title field', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            modal.taskTitle = '';
            const result = yield modal.createTask();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Task title is required');
            expect(mockCreateTaskUseCase.execute).not.toHaveBeenCalled();
            expect(result).toBe(false);
        }));
        it('should validate trimmed title field', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            modal.taskTitle = '   ';
            const result = yield modal.createTask();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Task title is required');
            expect(mockCreateTaskUseCase.execute).not.toHaveBeenCalled();
            expect(result).toBe(false);
        }));
        it('should handle task creation failure', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const failureResponse = {
                success: false,
                message: 'Creation failed',
                errors: { title: ['Title is invalid'] }
            };
            mockCreateTaskUseCase.execute.mockResolvedValue(failureResponse);
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const result = yield modal.createTask();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Failed to create task: Creation failed');
            expect(consoleSpy).toHaveBeenCalledWith('Task creation failed:', failureResponse.errors);
            expect(result).toBe(false);
            consoleSpy.mockRestore();
        }));
        it('should handle task creation exception', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateTaskUseCase.execute.mockRejectedValue(new Error('Network error'));
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            const result = yield modal.createTask();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Error creating task: Network error');
            expect(consoleSpy).toHaveBeenCalledWith('Task creation error:', expect.any(Error));
            expect(result).toBe(false);
            consoleSpy.mockRestore();
        }));
        it('should create task without optional fields', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            modal.taskDescription = '';
            modal.taskDueDate = '';
            modal.taskEstimatedHours = undefined;
            modal.taskTags = [];
            modal.selectedProjectId = undefined;
            mockCreateTaskUseCase.execute.mockResolvedValue(mockTaskResponse);
            yield modal.createTask();
            expect(mockCreateTaskUseCase.execute).toHaveBeenCalledWith({
                title: 'Test Task',
                description: undefined,
                priority: 'high',
                status: 'todo',
                projectId: undefined,
                dueDate: undefined,
                estimatedHours: undefined,
                tags: [],
                context: {
                    activeFile: 'test-file.md'
                }
            });
        }));
    });
    describe('Form Reset', () => {
        it('should reset form fields to defaults', () => {
            // Set some values
            modal.taskTitle = 'Test';
            modal.taskDescription = 'Description';
            modal.taskPriority = 'urgent';
            modal.taskStatus = 'done';
            modal.taskDueDate = '2024-12-25';
            modal.taskEstimatedHours = 5;
            modal.taskTags = ['tag1', 'tag2'];
            modal.resetForm();
            expect(modal.taskTitle).toBe('');
            expect(modal.taskDescription).toBe('');
            expect(modal.taskPriority).toBe('medium');
            expect(modal.taskStatus).toBe('todo');
            expect(modal.taskDueDate).toBe('');
            expect(modal.taskEstimatedHours).toBeUndefined();
            expect(modal.taskTags).toEqual([]);
        });
        it('should preserve project context after reset', () => {
            modal.currentProject = mockProjectResponse.currentProject;
            modal.availableProjects = mockProjectResponse.availableProjects;
            modal.selectedProjectId = 'project-123';
            modal.resetForm();
            expect(modal.currentProject).toEqual(mockProjectResponse.currentProject);
            expect(modal.availableProjects).toEqual(mockProjectResponse.availableProjects);
        });
    });
    describe('Button Event Handlers', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            modal.taskTitle = 'Test Task';
            mockCreateTaskUseCase.execute.mockResolvedValue(mockTaskResponse);
        }));
        it('should handle create button click', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            modal.close = jest.fn();
            const createButton = mockContentEl.querySelector('.mod-cta');
            // Simulate button click through event listener
            const clickHandler = (_a = mockContentEl.addEventListener.mock.calls
                .find(call => call[0] === 'keydown')) === null || _a === void 0 ? void 0 : _a[1];
            if (clickHandler) {
                // Simulate Ctrl+Enter keydown
                yield clickHandler({ key: 'Enter', ctrlKey: true });
                expect(modal.close).toHaveBeenCalled();
            }
        }));
        it('should handle create and continue button functionality', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            modal.close = jest.fn();
            modal.resetForm = jest.fn();
            modal.onOpen = jest.fn();
            const success = yield modal.createTask();
            if (success) {
                modal.resetForm();
                yield modal.onOpen();
                expect(modal.resetForm).toHaveBeenCalled();
                expect(modal.onOpen).toHaveBeenCalled();
            }
        }));
        it('should handle cancel button click', () => {
            modal.close = jest.fn();
            // The cancel button event would be handled by the onClick event
            modal.close();
            expect(modal.close).toHaveBeenCalled();
        });
    });
    describe('Keyboard Events', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            modal.taskTitle = 'Test Task';
            mockCreateTaskUseCase.execute.mockResolvedValue(mockTaskResponse);
        }));
        it('should handle Ctrl+Enter to create task', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            modal.close = jest.fn();
            const keydownHandler = (_a = mockContentEl.addEventListener.mock.calls
                .find(call => call[0] === 'keydown')) === null || _a === void 0 ? void 0 : _a[1];
            if (keydownHandler) {
                yield keydownHandler({ key: 'Enter', ctrlKey: true });
                expect(modal.close).toHaveBeenCalled();
            }
        }));
        it('should not trigger on Enter without Ctrl', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _b;
            const createTaskSpy = jest.spyOn(modal, 'createTask');
            const keydownHandler = (_b = mockContentEl.addEventListener.mock.calls
                .find(call => call[0] === 'keydown')) === null || _b === void 0 ? void 0 : _b[1];
            if (keydownHandler) {
                yield keydownHandler({ key: 'Enter', ctrlKey: false });
                expect(createTaskSpy).not.toHaveBeenCalled();
            }
        }));
        it('should not trigger on other key combinations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _c;
            const createTaskSpy = jest.spyOn(modal, 'createTask');
            const keydownHandler = (_c = mockContentEl.addEventListener.mock.calls
                .find(call => call[0] === 'keydown')) === null || _c === void 0 ? void 0 : _c[1];
            if (keydownHandler) {
                yield keydownHandler({ key: 'Space', ctrlKey: true });
                expect(createTaskSpy).not.toHaveBeenCalled();
            }
        }));
    });
    describe('Error Handling', () => {
        it('should handle use case execution errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockRejectedValue(new Error('Service unavailable'));
            const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
            yield modal.onOpen();
            expect(consoleSpy).toHaveBeenCalledWith('Failed to load project context:', expect.any(Error));
            expect(modal.currentProject).toBeUndefined();
            expect(modal.availableProjects).toEqual([]);
            consoleSpy.mockRestore();
        }));
        it('should handle malformed project response', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const malformedResponse = {
                success: true,
                // Missing required fields
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(malformedResponse);
            yield modal.onOpen();
            expect(modal.currentProject).toBeUndefined();
        }));
        it('should handle task creation with invalid response format', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            yield modal.onOpen();
            modal.taskTitle = 'Test Task';
            const invalidResponse = {
                success: true,
                // Missing task details
            };
            mockCreateTaskUseCase.execute.mockResolvedValue(invalidResponse);
            const result = yield modal.createTask();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Task "undefined" created successfully');
            expect(result).toBe(true);
        }));
    });
    describe('Style Management', () => {
        it('should call addStyles method', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockGetCurrentProjectUseCase.execute.mockResolvedValue(mockProjectResponse);
            const addStylesSpy = jest.spyOn(modal, 'addStyles').mockImplementation(() => { });
            yield modal.onOpen();
            expect(addStylesSpy).toHaveBeenCalled();
            addStylesSpy.mockRestore();
        }));
        it('should create style element with proper content', () => {
            const mockStyleElement = { textContent: '' };
            const createElementSpy = jest.spyOn(document, 'createElement').mockReturnValue(mockStyleElement);
            const appendChildSpy = jest.spyOn(document.head, 'appendChild').mockImplementation(() => { });
            modal.addStyles();
            expect(createElementSpy).toHaveBeenCalledWith('style');
            expect(mockStyleElement.textContent).toContain('.quick-task-project');
            expect(mockStyleElement.textContent).toContain('.quick-task-row');
            expect(mockStyleElement.textContent).toContain('.quick-task-buttons');
            expect(appendChildSpy).toHaveBeenCalledWith(mockStyleElement);
            createElementSpy.mockRestore();
            appendChildSpy.mockRestore();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9wcmVzZW50YXRpb24vbW9kYWxzL1F1aWNrVGFza01vZGFsLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7O0FBTUEsMENBQTBDO0FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLGlDQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxLQUNqQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLENBQUMsT0FBZSxFQUFFLEVBQUU7UUFDdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDO0lBQ3JCLENBQUMsQ0FBQyxFQUNGLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUF3QixFQUFFLEVBQUU7UUFDakUsT0FBTztZQUNMLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1lBQ25DLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1lBQ25DLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1lBQ25DLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1lBQ3ZDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsY0FBYyxFQUFFO1NBQ3hDLENBQUM7SUFDSixDQUFDLENBQUMsSUFDRixDQUFDLENBQUM7QUFyQkosdUZBQW9GO0FBSXBGLHVDQUF1RDtBQW1CdkQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLEdBQVEsQ0FBQztJQUNiLElBQUksS0FBcUIsQ0FBQztJQUMxQixJQUFJLHFCQUFnRSxDQUFDO0lBQ3JFLElBQUksNEJBQW1FLENBQUM7SUFDeEUsSUFBSSxhQUEwQixD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LGVBQWUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxnQkFBdUIsQ0FBQyxDQUFDO1lBQ3hHLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQztZQUU1RixLQUFhLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFM0IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3RFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUNsRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDdEUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFOUQsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDL0IsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi90ZXN0cy91bml0L3ByZXNlbnRhdGlvbi9tb2RhbHMvUXVpY2tUYXNrTW9kYWwudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWlja1Rhc2tNb2RhbCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9wcmVzZW50YXRpb24vbW9kYWxzL1F1aWNrVGFza01vZGFsJztcbmltcG9ydCB7IENyZWF0ZVRhc2tGcm9tUHJvamVjdFVzZUNhc2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvYXBwbGljYXRpb24vdXNlLWNhc2VzL0NyZWF0ZVRhc2tGcm9tUHJvamVjdFVzZUNhc2UnO1xuaW1wb3J0IHsgR2V0Q3VycmVudFByb2plY3RVc2VDYXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9HZXRDdXJyZW50UHJvamVjdFVzZUNhc2UnO1xuaW1wb3J0IHsgQ3JlYXRlVGFza1JlcXVlc3QsIENyZWF0ZVRhc2tSZXNwb25zZSwgR2V0Q3VycmVudFByb2plY3RSZXNwb25zZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9kdG9zL0NyZWF0ZVRhc2tSZXF1ZXN0JztcbmltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcblxuLy8gTW9jayBOb3RpY2UgdG8gYXZvaWQgY29uc3RydWN0b3IgaXNzdWVzXG5qZXN0Lm1vY2soJ29ic2lkaWFuJywgKCkgPT4gKHtcbiAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCdvYnNpZGlhbicpLFxuICBOb3RpY2U6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7IG1lc3NhZ2UgfTtcbiAgfSksXG4gIFNldHRpbmc6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzZXROYW1lOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICAgIHNldERlc2M6IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICAgICAgYWRkVGV4dDogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgICBhZGRUZXh0QXJlYTogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgICBhZGREcm9wZG93bjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgfTtcbiAgfSksXG59KSk7XG5cbmRlc2NyaWJlKCdRdWlja1Rhc2tNb2RhbCcsICgpID0+IHtcbiAgbGV0IGFwcDogQXBwO1xuICBsZXQgbW9kYWw6IFF1aWNrVGFza01vZGFsO1xuICBsZXQgbW9ja0NyZWF0ZVRhc2tVc2VDYXNlOiBqZXN0Lk1vY2tlZDxDcmVhdGVUYXNrRnJvbVByb2plY3RVc2VDYXNlPjtcbiAgbGV0IG1vY2tHZXRDdXJyZW50UHJvamVjdFVzZUNhc2U6IGplc3QuTW9ja2VkPEdldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZT47XG4gIGxldCBtb2NrQ29udGVudEVsOiBIVE1MRWxlbWVudDtcblxuICAvLyBNb2NrIHJlc3BvbnNlc1xuICBjb25zdCBtb2NrUHJvamVjdFJlc3BvbnNlOiBHZXRDdXJyZW50UHJvamVjdFJlc3BvbnNlID0ge1xuICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgY3VycmVudFByb2plY3Q6IHtcbiAgICAgIGlkOiAncHJvamVjdC0xMjMnLFxuICAgICAgdGl0bGU6ICdUZXN0IFByb2plY3QnLFxuICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgcHJvamVjdCBkZXNjcmlwdGlvbidcbiAgICB9LFxuICAgIGF2YWlsYWJsZVByb2plY3RzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAncHJvamVjdC0xMjMnLFxuICAgICAgICB0aXRsZTogJ1Rlc3QgUHJvamVjdCcsXG4gICAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICBsYXN0VXBkYXRlZDogJzIwMjQtMDEtMDFUMDA6MDA6MDBaJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdwcm9qZWN0LTQ1NicsXG4gICAgICAgIHRpdGxlOiAnQW5vdGhlciBQcm9qZWN0JyxcbiAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICAgIGxhc3RVcGRhdGVkOiAnMjAyNC0wMS0wMlQwMDowMDowMFonXG4gICAgICB9XG4gICAgXSxcbiAgICBjb250ZXh0OiB7XG4gICAgICBzdHJhdGVneTogJ2NvbnRleHQnLFxuICAgICAgY29uZmlkZW5jZTogMC44LFxuICAgICAgcmVhc29uaW5nOiAnRGV0ZWN0ZWQgZnJvbSBhY3RpdmUgZmlsZSdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgbW9ja1Rhc2tSZXNwb25zZTogQ3JlYXRlVGFza1Jlc3BvbnNlID0ge1xuICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgdGFza0lkOiAndGFzay03ODknLFxuICAgIG1lc3NhZ2U6ICdUYXNrIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgICB0YXNrOiB7XG4gICAgICBpZDogJ3Rhc2stNzg5JyxcbiAgICAgIHRpdGxlOiAnVGVzdCBUYXNrJyxcbiAgICAgIHN0YXR1czogJ3RvZG8nLFxuICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgcHJvamVjdElkOiAncHJvamVjdC0xMjMnLFxuICAgICAgdGFnczogWyd0ZXN0J11cbiAgICB9XG4gIH07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG5cbiAgICAvLyBNb2NrIGFwcFxuICAgIGFwcCA9IG5ldyBBcHAoKTtcblxuICAgIC8vIE1vY2sgdXNlIGNhc2VzXG4gICAgbW9ja0NyZWF0ZVRhc2tVc2VDYXNlID0ge1xuICAgICAgZXhlY3V0ZTogamVzdC5mbigpXG4gICAgfSBhcyBhbnk7XG5cbiAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlID0ge1xuICAgICAgZXhlY3V0ZTogamVzdC5mbigpXG4gICAgfSBhcyBhbnk7XG5cbiAgICAvLyBDcmVhdGUgbW9kYWwgd2l0aCBtb2Nrc1xuICAgIG1vZGFsID0gbmV3IFF1aWNrVGFza01vZGFsKGFwcCwgbW9ja0NyZWF0ZVRhc2tVc2VDYXNlLCBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLCAndGVzdC1maWxlLm1kJyk7XG5cbiAgICAvLyBTZXR1cCBtb2NrIGNvbnRlbnQgZWxlbWVudCB3aXRoIE9ic2lkaWFuIG1ldGhvZHNcbiAgICBtb2NrQ29udGVudEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgc2V0dXBFbGVtZW50TWV0aG9kcyhtb2NrQ29udGVudEVsKTtcbiAgICBcbiAgICAvLyBNb2NrIHRoZSBjb250ZW50RWwgcHJvcGVydHlcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kYWwsICdjb250ZW50RWwnLCB7XG4gICAgICBnZXQ6ICgpID0+IG1vY2tDb250ZW50RWwsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcblxuICAgIC8vIE5vdGljZSBpcyBhbHJlYWR5IG1vY2tlZCBhdCBtb2R1bGUgbGV2ZWxcbiAgfSk7XG5cbiAgZnVuY3Rpb24gc2V0dXBFbGVtZW50TWV0aG9kcyhlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIChlbGVtZW50IGFzIGFueSkuZW1wdHkgPSBqZXN0LmZuKCgpID0+IHtcbiAgICAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgKGVsZW1lbnQgYXMgYW55KS5jcmVhdGVFbCA9IGplc3QuZm4oKHRhZzogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICAgIGlmIChvcHRpb25zPy50ZXh0KSBlbC50ZXh0Q29udGVudCA9IG9wdGlvbnMudGV4dDtcbiAgICAgIGlmIChvcHRpb25zPy5jbHMpIGVsLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xzO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICBzZXR1cEVsZW1lbnRNZXRob2RzKGVsKTtcbiAgICAgIHJldHVybiBlbDtcbiAgICB9KTtcblxuICAgIChlbGVtZW50IGFzIGFueSkuY3JlYXRlRGl2ID0gamVzdC5mbigob3B0aW9ucz86IGFueSkgPT4ge1xuICAgICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGlmIChvcHRpb25zPy5jbHMpIGVsLmNsYXNzTmFtZSA9IG9wdGlvbnMuY2xzO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgICBzZXR1cEVsZW1lbnRNZXRob2RzKGVsKTtcbiAgICAgIHJldHVybiBlbDtcbiAgICB9KTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9IGplc3QuZm4oKTtcbiAgfVxuXG4gIGRlc2NyaWJlKCdNb2RhbCBJbml0aWFsaXphdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IHZhbHVlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChtb2RhbCkudG9CZUluc3RhbmNlT2YoTW9kYWwpO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tUaXRsZSkudG9CZSgnJyk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza0Rlc2NyaXB0aW9uKS50b0JlKCcnKTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS50YXNrUHJpb3JpdHkpLnRvQmUoJ21lZGl1bScpO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tTdGF0dXMpLnRvQmUoJ3RvZG8nKTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS50YXNrRHVlRGF0ZSkudG9CZSgnJyk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza0VzdGltYXRlZEhvdXJzKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza1RhZ3MpLnRvRXF1YWwoW10pO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLmFjdGl2ZUZpbGUpLnRvQmUoJ3Rlc3QtZmlsZS5tZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggY3VzdG9tIGFjdGl2ZSBmaWxlJywgKCkgPT4ge1xuICAgICAgY29uc3QgY3VzdG9tTW9kYWwgPSBuZXcgUXVpY2tUYXNrTW9kYWwoYXBwLCBtb2NrQ3JlYXRlVGFza1VzZUNhc2UsIG1vY2tHZXRDdXJyZW50UHJvamVjdFVzZUNhc2UsICdjdXN0b20tZmlsZS5tZCcpO1xuICAgICAgZXhwZWN0KChjdXN0b21Nb2RhbCBhcyBhbnkpLmFjdGl2ZUZpbGUpLnRvQmUoJ2N1c3RvbS1maWxlLm1kJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aG91dCBhY3RpdmUgZmlsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGN1c3RvbU1vZGFsID0gbmV3IFF1aWNrVGFza01vZGFsKGFwcCwgbW9ja0NyZWF0ZVRhc2tVc2VDYXNlLCBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlKTtcbiAgICAgIGV4cGVjdCgoY3VzdG9tTW9kYWwgYXMgYW55KS5hY3RpdmVGaWxlKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdvbk9wZW4gbWV0aG9kJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2xlYXIgY29udGVudCBlbGVtZW50IG9uIG9wZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IG1vZGFsLm9uT3BlbigpO1xuXG4gICAgICBleHBlY3QobW9ja0NvbnRlbnRFbC5lbXB0eSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgbW9kYWwgdGl0bGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IG1vZGFsLm9uT3BlbigpO1xuXG4gICAgICBleHBlY3QobW9ja0NvbnRlbnRFbC5jcmVhdGVFbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2gyJywgeyB0ZXh0OiAnQ3JlYXRlIE5ldyBUYXNrJyB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBwcm9qZWN0IGNvbnRleHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IG1vZGFsLm9uT3BlbigpO1xuXG4gICAgICBleHBlY3QobW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIGFjdGl2ZUZpbGU6ICd0ZXN0LWZpbGUubWQnLFxuICAgICAgICBwcmVmZXJlbmNlczoge1xuICAgICAgICAgIGluY2x1ZGVDb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgIG1heFJlc3VsdHM6IDEwLFxuICAgICAgICAgIHNlbGVjdGlvblN0cmF0ZWd5OiAnY29udGV4dCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRpc3BsYXkgY3VycmVudCBwcm9qZWN0IHdoZW4gZGV0ZWN0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IG1vZGFsLm9uT3BlbigpO1xuXG4gICAgICBleHBlY3QobW9ja0NvbnRlbnRFbC5jcmVhdGVEaXYpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgY2xzOiAncXVpY2stdGFzay1wcm9qZWN0JyB9KTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS5zZWxlY3RlZFByb2plY3RJZCkudG9CZSgncHJvamVjdC0xMjMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIHByb2plY3QgZHJvcGRvd24gd2hlbiBtdWx0aXBsZSBwcm9qZWN0cyBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IG1vZGFsLm9uT3BlbigpO1xuXG4gICAgICAvLyBTaG91bGQgY3JlYXRlIFNldHRpbmcgZm9yIHByb2plY3QgZHJvcGRvd25cbiAgICAgIGV4cGVjdChTZXR0aW5nKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNldHVwIGZvcm0gZmllbGRzIHdpdGggcHJvcGVyIHNldHRpbmdzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgXG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcblxuICAgICAgLy8gTXVsdGlwbGUgU2V0dGluZyBpbnN0YW5jZXMgc2hvdWxkIGJlIGNyZWF0ZWQgZm9yIGRpZmZlcmVudCBmaWVsZHNcbiAgICAgIGV4cGVjdChTZXR0aW5nKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoOCk7IC8vIFByb2plY3QgZHJvcGRvd24sIFRpdGxlLCBEZXNjcmlwdGlvbiwgUHJpb3JpdHksIFN0YXR1cywgRHVlIERhdGUsIEVzdGltYXRlZCBIb3VycywgVGFnc1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIGR1ZSBkYXRlIGZpZWxkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgXG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcblxuICAgICAgLy8gRHVlIGRhdGUgc2V0dGluZyBzaG91bGQgYmUgY3JlYXRlZCAoYWN0dWFsIHZhbHVlIHNldHRpbmcgdGVzdGVkIGluIGludGVncmF0aW9uKVxuICAgICAgZXhwZWN0KFNldHRpbmcpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIGFjdGlvbiBidXR0b25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgXG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcblxuICAgICAgZXhwZWN0KG1vY2tDb250ZW50RWwuY3JlYXRlRGl2KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7IGNsczogJ3F1aWNrLXRhc2stYnV0dG9ucycgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFkZCBjdXN0b20gc3R5bGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgXG4gICAgICBjb25zdCBtb2NrQ3JlYXRlRWxlbWVudCA9IGplc3Quc3B5T24oZG9jdW1lbnQsICdjcmVhdGVFbGVtZW50Jyk7XG4gICAgICBjb25zdCBtb2NrQXBwZW5kQ2hpbGQgPSBqZXN0LnNweU9uKGRvY3VtZW50LmhlYWQsICdhcHBlbmRDaGlsZCcpO1xuICAgICAgXG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcblxuICAgICAgZXhwZWN0KG1vY2tDcmVhdGVFbGVtZW50KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnc3R5bGUnKTtcbiAgICAgIGV4cGVjdChtb2NrQXBwZW5kQ2hpbGQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2V0dXAga2V5Ym9hcmQgZXZlbnQgbGlzdGVuZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGF3YWl0IG1vZGFsLm9uT3BlbigpO1xuXG4gICAgICBleHBlY3QobW9ja0NvbnRlbnRFbC5hZGRFdmVudExpc3RlbmVyKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgna2V5ZG93bicsIGV4cGVjdC5hbnkoRnVuY3Rpb24pKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ29uQ2xvc2UgbWV0aG9kJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY2xlYXIgY29udGVudCBlbGVtZW50IG9uIGNsb3NlJywgKCkgPT4ge1xuICAgICAgbW9kYWwub25DbG9zZSgpO1xuXG4gICAgICBleHBlY3QobW9ja0NvbnRlbnRFbC5lbXB0eSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUHJvamVjdCBDb250ZXh0IExvYWRpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgc3VjY2Vzc2Z1bCBwcm9qZWN0IGNvbnRleHQgbG9hZGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tHZXRDdXJyZW50UHJvamVjdFVzZUNhc2UuZXhlY3V0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUHJvamVjdFJlc3BvbnNlKTtcbiAgICAgIFxuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG5cbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS5jdXJyZW50UHJvamVjdCkudG9FcXVhbChtb2NrUHJvamVjdFJlc3BvbnNlLmN1cnJlbnRQcm9qZWN0KTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS5hdmFpbGFibGVQcm9qZWN0cykudG9FcXVhbChtb2NrUHJvamVjdFJlc3BvbnNlLmF2YWlsYWJsZVByb2plY3RzKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHByb2plY3QgY29udGV4dCBsb2FkaW5nIHdpdGhvdXQgY3VycmVudCBwcm9qZWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgbm9Qcm9qZWN0UmVzcG9uc2U6IEdldEN1cnJlbnRQcm9qZWN0UmVzcG9uc2UgPSB7XG4gICAgICAgIC4uLm1vY2tQcm9qZWN0UmVzcG9uc2UsXG4gICAgICAgIGN1cnJlbnRQcm9qZWN0OiB1bmRlZmluZWRcbiAgICAgIH07XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobm9Qcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgXG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcblxuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLmN1cnJlbnRQcm9qZWN0KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkuc2VsZWN0ZWRQcm9qZWN0SWQpLnRvQmVVbmRlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHByb2plY3QgY29udGV4dCBsb2FkaW5nIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignUHJvamVjdCBsb2FkaW5nIGZhaWxlZCcpKTtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuICAgICAgXG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcblxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdGYWlsZWQgdG8gbG9hZCBwcm9qZWN0IGNvbnRleHQ6JywgZXhwZWN0LmFueShFcnJvcikpO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLmN1cnJlbnRQcm9qZWN0KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGF2YWlsYWJsZSBwcm9qZWN0cyBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgbm9Qcm9qZWN0c1Jlc3BvbnNlOiBHZXRDdXJyZW50UHJvamVjdFJlc3BvbnNlID0ge1xuICAgICAgICAuLi5tb2NrUHJvamVjdFJlc3BvbnNlLFxuICAgICAgICBhdmFpbGFibGVQcm9qZWN0czogW11cbiAgICAgIH07XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobm9Qcm9qZWN0c1Jlc3BvbnNlKTtcbiAgICAgIFxuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG5cbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS5hdmFpbGFibGVQcm9qZWN0cykudG9FcXVhbChbXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGb3JtIEZpZWxkIFVwZGF0ZXMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHRhc2sgdGl0bGUnLCAoKSA9PiB7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrVGl0bGUgPSAnVXBkYXRlZCBUaXRsZSc7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza1RpdGxlKS50b0JlKCdVcGRhdGVkIFRpdGxlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVwZGF0ZSB0YXNrIGRlc2NyaXB0aW9uJywgKCkgPT4ge1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza0Rlc2NyaXB0aW9uID0gJ1VwZGF0ZWQgZGVzY3JpcHRpb24nO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tEZXNjcmlwdGlvbikudG9CZSgnVXBkYXRlZCBkZXNjcmlwdGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1cGRhdGUgdGFzayBwcmlvcml0eScsICgpID0+IHtcbiAgICAgIChtb2RhbCBhcyBhbnkpLnRhc2tQcmlvcml0eSA9ICdoaWdoJztcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS50YXNrUHJpb3JpdHkpLnRvQmUoJ2hpZ2gnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHRhc2sgc3RhdHVzJywgKCkgPT4ge1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1N0YXR1cyA9ICdpbi1wcm9ncmVzcyc7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza1N0YXR1cykudG9CZSgnaW4tcHJvZ3Jlc3MnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIGR1ZSBkYXRlJywgKCkgPT4ge1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza0R1ZURhdGUgPSAnMjAyNC0xMi0yNSc7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza0R1ZURhdGUpLnRvQmUoJzIwMjQtMTItMjUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIGVzdGltYXRlZCBob3VycyB3aXRoIHZhbGlkIG51bWJlcicsICgpID0+IHtcbiAgICAgIChtb2RhbCBhcyBhbnkpLnRhc2tFc3RpbWF0ZWRIb3VycyA9IDUuNTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS50YXNrRXN0aW1hdGVkSG91cnMpLnRvQmUoNS41KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgZXN0aW1hdGVkIGhvdXJzJywgKCkgPT4ge1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza0VzdGltYXRlZEhvdXJzID0gdW5kZWZpbmVkO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tFc3RpbWF0ZWRIb3VycykudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwYXJzZSB0YWdzIGZyb20gY29tbWEtc2VwYXJhdGVkIHN0cmluZycsICgpID0+IHtcbiAgICAgIChtb2RhbCBhcyBhbnkpLnRhc2tUYWdzID0gWyd0YWcxJywgJ3RhZzInLCAndGFnMyddO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tUYWdzKS50b0VxdWFsKFsndGFnMScsICd0YWcyJywgJ3RhZzMnXSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZpbHRlciBlbXB0eSB0YWdzJywgKCkgPT4ge1xuICAgICAgLy8gU2ltdWxhdGUgdGhlIHRhZyBwYXJzaW5nIGxvZ2ljXG4gICAgICBjb25zdCB0YWdzSW5wdXQgPSAndGFnMSwgLCB0YWcyLCAgLHRhZzMnO1xuICAgICAgY29uc3QgcGFyc2VkVGFncyA9IHRhZ3NJbnB1dFxuICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAubWFwKHRhZyA9PiB0YWcudHJpbSgpKVxuICAgICAgICAuZmlsdGVyKHRhZyA9PiB0YWcubGVuZ3RoID4gMCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChwYXJzZWRUYWdzKS50b0VxdWFsKFsndGFnMScsICd0YWcyJywgJ3RhZzMnXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUYXNrIENyZWF0aW9uJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG4gICAgICBcbiAgICAgIC8vIFNldHVwIGZvcm0gZGF0YVxuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1RpdGxlID0gJ1Rlc3QgVGFzayc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrRGVzY3JpcHRpb24gPSAnVGVzdCBkZXNjcmlwdGlvbic7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrUHJpb3JpdHkgPSAnaGlnaCc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrU3RhdHVzID0gJ3RvZG8nO1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza0R1ZURhdGUgPSAnMjAyNC0xMi0yNSc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrRXN0aW1hdGVkSG91cnMgPSAyLjU7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrVGFncyA9IFsndGVzdCcsICd1cmdlbnQnXTtcbiAgICAgIChtb2RhbCBhcyBhbnkpLnNlbGVjdGVkUHJvamVjdElkID0gJ3Byb2plY3QtMTIzJztcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIHRhc2sgd2l0aCB2YWxpZCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NyZWF0ZVRhc2tVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Rhc2tSZXNwb25zZSk7XG4gICAgICBtb2RhbC5jbG9zZSA9IGplc3QuZm4oKTtcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgKG1vZGFsIGFzIGFueSkuY3JlYXRlVGFzaygpO1xuXG4gICAgICBleHBlY3QobW9ja0NyZWF0ZVRhc2tVc2VDYXNlLmV4ZWN1dGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgdGl0bGU6ICdUZXN0IFRhc2snLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1Rlc3QgZGVzY3JpcHRpb24nLFxuICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICBzdGF0dXM6ICd0b2RvJyxcbiAgICAgICAgcHJvamVjdElkOiAncHJvamVjdC0xMjMnLFxuICAgICAgICBkdWVEYXRlOiAnMjAyNC0xMi0yNScsXG4gICAgICAgIGVzdGltYXRlZEhvdXJzOiAyLjUsXG4gICAgICAgIHRhZ3M6IFsndGVzdCcsICd1cmdlbnQnXSxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIGFjdGl2ZUZpbGU6ICd0ZXN0LWZpbGUubWQnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBleHBlY3QoTm90aWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVGFzayBcIlRlc3QgVGFza1wiIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICBleHBlY3QobW9kYWwuY2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHJlcXVpcmVkIHRpdGxlIGZpZWxkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1RpdGxlID0gJyc7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChtb2RhbCBhcyBhbnkpLmNyZWF0ZVRhc2soKTtcblxuICAgICAgZXhwZWN0KE5vdGljZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Rhc2sgdGl0bGUgaXMgcmVxdWlyZWQnKTtcbiAgICAgIGV4cGVjdChtb2NrQ3JlYXRlVGFza1VzZUNhc2UuZXhlY3V0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0cmltbWVkIHRpdGxlIGZpZWxkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1RpdGxlID0gJyAgICc7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChtb2RhbCBhcyBhbnkpLmNyZWF0ZVRhc2soKTtcblxuICAgICAgZXhwZWN0KE5vdGljZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Rhc2sgdGl0bGUgaXMgcmVxdWlyZWQnKTtcbiAgICAgIGV4cGVjdChtb2NrQ3JlYXRlVGFza1VzZUNhc2UuZXhlY3V0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdGFzayBjcmVhdGlvbiBmYWlsdXJlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZmFpbHVyZVJlc3BvbnNlOiBDcmVhdGVUYXNrUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlOiAnQ3JlYXRpb24gZmFpbGVkJyxcbiAgICAgICAgZXJyb3JzOiB7IHRpdGxlOiBbJ1RpdGxlIGlzIGludmFsaWQnXSB9XG4gICAgICB9O1xuICAgICAgbW9ja0NyZWF0ZVRhc2tVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUoZmFpbHVyZVJlc3BvbnNlKTtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAobW9kYWwgYXMgYW55KS5jcmVhdGVUYXNrKCk7XG5cbiAgICAgIGV4cGVjdChOb3RpY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdGYWlsZWQgdG8gY3JlYXRlIHRhc2s6IENyZWF0aW9uIGZhaWxlZCcpO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdUYXNrIGNyZWF0aW9uIGZhaWxlZDonLCBmYWlsdXJlUmVzcG9uc2UuZXJyb3JzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoZmFsc2UpO1xuICAgICAgXG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB0YXNrIGNyZWF0aW9uIGV4Y2VwdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDcmVhdGVUYXNrVXNlQ2FzZS5leGVjdXRlLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKTtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAobW9kYWwgYXMgYW55KS5jcmVhdGVUYXNrKCk7XG5cbiAgICAgIGV4cGVjdChOb3RpY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdFcnJvciBjcmVhdGluZyB0YXNrOiBOZXR3b3JrIGVycm9yJyk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Rhc2sgY3JlYXRpb24gZXJyb3I6JywgZXhwZWN0LmFueShFcnJvcikpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZShmYWxzZSk7XG4gICAgICBcbiAgICAgIGNvbnNvbGVTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIHRhc2sgd2l0aG91dCBvcHRpb25hbCBmaWVsZHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrRGVzY3JpcHRpb24gPSAnJztcbiAgICAgIChtb2RhbCBhcyBhbnkpLnRhc2tEdWVEYXRlID0gJyc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrRXN0aW1hdGVkSG91cnMgPSB1bmRlZmluZWQ7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrVGFncyA9IFtdO1xuICAgICAgKG1vZGFsIGFzIGFueSkuc2VsZWN0ZWRQcm9qZWN0SWQgPSB1bmRlZmluZWQ7XG4gICAgICBcbiAgICAgIG1vY2tDcmVhdGVUYXNrVXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tUYXNrUmVzcG9uc2UpO1xuXG4gICAgICBhd2FpdCAobW9kYWwgYXMgYW55KS5jcmVhdGVUYXNrKCk7XG5cbiAgICAgIGV4cGVjdChtb2NrQ3JlYXRlVGFza1VzZUNhc2UuZXhlY3V0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICB0aXRsZTogJ1Rlc3QgVGFzaycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB1bmRlZmluZWQsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIHN0YXR1czogJ3RvZG8nLFxuICAgICAgICBwcm9qZWN0SWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZHVlRGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICBlc3RpbWF0ZWRIb3VyczogdW5kZWZpbmVkLFxuICAgICAgICB0YWdzOiBbXSxcbiAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgIGFjdGl2ZUZpbGU6ICd0ZXN0LWZpbGUubWQnXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRm9ybSBSZXNldCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJlc2V0IGZvcm0gZmllbGRzIHRvIGRlZmF1bHRzJywgKCkgPT4ge1xuICAgICAgLy8gU2V0IHNvbWUgdmFsdWVzXG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrVGl0bGUgPSAnVGVzdCc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrRGVzY3JpcHRpb24gPSAnRGVzY3JpcHRpb24nO1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1ByaW9yaXR5ID0gJ3VyZ2VudCc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrU3RhdHVzID0gJ2RvbmUnO1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza0R1ZURhdGUgPSAnMjAyNC0xMi0yNSc7XG4gICAgICAobW9kYWwgYXMgYW55KS50YXNrRXN0aW1hdGVkSG91cnMgPSA1O1xuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1RhZ3MgPSBbJ3RhZzEnLCAndGFnMiddO1xuXG4gICAgICAobW9kYWwgYXMgYW55KS5yZXNldEZvcm0oKTtcblxuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tUaXRsZSkudG9CZSgnJyk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza0Rlc2NyaXB0aW9uKS50b0JlKCcnKTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS50YXNrUHJpb3JpdHkpLnRvQmUoJ21lZGl1bScpO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLnRhc2tTdGF0dXMpLnRvQmUoJ3RvZG8nKTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS50YXNrRHVlRGF0ZSkudG9CZSgnJyk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza0VzdGltYXRlZEhvdXJzKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkudGFza1RhZ3MpLnRvRXF1YWwoW10pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwcmVzZXJ2ZSBwcm9qZWN0IGNvbnRleHQgYWZ0ZXIgcmVzZXQnLCAoKSA9PiB7XG4gICAgICAobW9kYWwgYXMgYW55KS5jdXJyZW50UHJvamVjdCA9IG1vY2tQcm9qZWN0UmVzcG9uc2UuY3VycmVudFByb2plY3Q7XG4gICAgICAobW9kYWwgYXMgYW55KS5hdmFpbGFibGVQcm9qZWN0cyA9IG1vY2tQcm9qZWN0UmVzcG9uc2UuYXZhaWxhYmxlUHJvamVjdHM7XG4gICAgICAobW9kYWwgYXMgYW55KS5zZWxlY3RlZFByb2plY3RJZCA9ICdwcm9qZWN0LTEyMyc7XG5cbiAgICAgIChtb2RhbCBhcyBhbnkpLnJlc2V0Rm9ybSgpO1xuXG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkuY3VycmVudFByb2plY3QpLnRvRXF1YWwobW9ja1Byb2plY3RSZXNwb25zZS5jdXJyZW50UHJvamVjdCk7XG4gICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkuYXZhaWxhYmxlUHJvamVjdHMpLnRvRXF1YWwobW9ja1Byb2plY3RSZXNwb25zZS5hdmFpbGFibGVQcm9qZWN0cyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCdXR0b24gRXZlbnQgSGFuZGxlcnMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcbiAgICAgIFxuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1RpdGxlID0gJ1Rlc3QgVGFzayc7XG4gICAgICBtb2NrQ3JlYXRlVGFza1VzZUNhc2UuZXhlY3V0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVGFza1Jlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNyZWF0ZSBidXR0b24gY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2RhbC5jbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgIGNvbnN0IGNyZWF0ZUJ1dHRvbiA9IG1vY2tDb250ZW50RWwucXVlcnlTZWxlY3RvcignLm1vZC1jdGEnKTtcbiAgICAgIFxuICAgICAgLy8gU2ltdWxhdGUgYnV0dG9uIGNsaWNrIHRocm91Z2ggZXZlbnQgbGlzdGVuZXJcbiAgICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9IChtb2NrQ29udGVudEVsLmFkZEV2ZW50TGlzdGVuZXIgYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzXG4gICAgICAgIC5maW5kKGNhbGwgPT4gY2FsbFswXSA9PT0gJ2tleWRvd24nKT8uWzFdO1xuICAgICAgXG4gICAgICBpZiAoY2xpY2tIYW5kbGVyKSB7XG4gICAgICAgIC8vIFNpbXVsYXRlIEN0cmwrRW50ZXIga2V5ZG93blxuICAgICAgICBhd2FpdCBjbGlja0hhbmRsZXIoeyBrZXk6ICdFbnRlcicsIGN0cmxLZXk6IHRydWUgfSk7XG4gICAgICAgIGV4cGVjdChtb2RhbC5jbG9zZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY3JlYXRlIGFuZCBjb250aW51ZSBidXR0b24gZnVuY3Rpb25hbGl0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vZGFsLmNsb3NlID0gamVzdC5mbigpO1xuICAgICAgKG1vZGFsIGFzIGFueSkucmVzZXRGb3JtID0gamVzdC5mbigpO1xuICAgICAgbW9kYWwub25PcGVuID0gamVzdC5mbigpO1xuXG4gICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgKG1vZGFsIGFzIGFueSkuY3JlYXRlVGFzaygpO1xuICAgICAgXG4gICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAobW9kYWwgYXMgYW55KS5yZXNldEZvcm0oKTtcbiAgICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG4gICAgICAgIFxuICAgICAgICBleHBlY3QoKG1vZGFsIGFzIGFueSkucmVzZXRGb3JtKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICAgIGV4cGVjdChtb2RhbC5vbk9wZW4pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhbmNlbCBidXR0b24gY2xpY2snLCAoKSA9PiB7XG4gICAgICBtb2RhbC5jbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgLy8gVGhlIGNhbmNlbCBidXR0b24gZXZlbnQgd291bGQgYmUgaGFuZGxlZCBieSB0aGUgb25DbGljayBldmVudFxuICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vZGFsLmNsb3NlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdLZXlib2FyZCBFdmVudHMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBhd2FpdCBtb2RhbC5vbk9wZW4oKTtcbiAgICAgIFxuICAgICAgKG1vZGFsIGFzIGFueSkudGFza1RpdGxlID0gJ1Rlc3QgVGFzayc7XG4gICAgICBtb2NrQ3JlYXRlVGFza1VzZUNhc2UuZXhlY3V0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVGFza1Jlc3BvbnNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIEN0cmwrRW50ZXIgdG8gY3JlYXRlIHRhc2snLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2RhbC5jbG9zZSA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgY29uc3Qga2V5ZG93bkhhbmRsZXIgPSAobW9ja0NvbnRlbnRFbC5hZGRFdmVudExpc3RlbmVyIGFzIGplc3QuTW9jaykubW9jay5jYWxsc1xuICAgICAgICAuZmluZChjYWxsID0+IGNhbGxbMF0gPT09ICdrZXlkb3duJyk/LlsxXTtcblxuICAgICAgaWYgKGtleWRvd25IYW5kbGVyKSB7XG4gICAgICAgIGF3YWl0IGtleWRvd25IYW5kbGVyKHsga2V5OiAnRW50ZXInLCBjdHJsS2V5OiB0cnVlIH0pO1xuICAgICAgICBleHBlY3QobW9kYWwuY2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHRyaWdnZXIgb24gRW50ZXIgd2l0aG91dCBDdHJsJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY3JlYXRlVGFza1NweSA9IGplc3Quc3B5T24obW9kYWwgYXMgYW55LCAnY3JlYXRlVGFzaycpO1xuICAgICAgXG4gICAgICBjb25zdCBrZXlkb3duSGFuZGxlciA9IChtb2NrQ29udGVudEVsLmFkZEV2ZW50TGlzdGVuZXIgYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzXG4gICAgICAgIC5maW5kKGNhbGwgPT4gY2FsbFswXSA9PT0gJ2tleWRvd24nKT8uWzFdO1xuXG4gICAgICBpZiAoa2V5ZG93bkhhbmRsZXIpIHtcbiAgICAgICAgYXdhaXQga2V5ZG93bkhhbmRsZXIoeyBrZXk6ICdFbnRlcicsIGN0cmxLZXk6IGZhbHNlIH0pO1xuICAgICAgICBleHBlY3QoY3JlYXRlVGFza1NweSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHRyaWdnZXIgb24gb3RoZXIga2V5IGNvbWJpbmF0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNyZWF0ZVRhc2tTcHkgPSBqZXN0LnNweU9uKG1vZGFsIGFzIGFueSwgJ2NyZWF0ZVRhc2snKTtcbiAgICAgIFxuICAgICAgY29uc3Qga2V5ZG93bkhhbmRsZXIgPSAobW9ja0NvbnRlbnRFbC5hZGRFdmVudExpc3RlbmVyIGFzIGplc3QuTW9jaykubW9jay5jYWxsc1xuICAgICAgICAuZmluZChjYWxsID0+IGNhbGxbMF0gPT09ICdrZXlkb3duJyk/LlsxXTtcblxuICAgICAgaWYgKGtleWRvd25IYW5kbGVyKSB7XG4gICAgICAgIGF3YWl0IGtleWRvd25IYW5kbGVyKHsga2V5OiAnU3BhY2UnLCBjdHJsS2V5OiB0cnVlIH0pO1xuICAgICAgICBleHBlY3QoY3JlYXRlVGFza1NweSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaGFuZGxlIHVzZSBjYXNlIGV4ZWN1dGlvbiBlcnJvcnMgZ3JhY2VmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tHZXRDdXJyZW50UHJvamVjdFVzZUNhc2UuZXhlY3V0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1NlcnZpY2UgdW5hdmFpbGFibGUnKSk7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRmFpbGVkIHRvIGxvYWQgcHJvamVjdCBjb250ZXh0OicsIGV4cGVjdC5hbnkoRXJyb3IpKTtcbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS5jdXJyZW50UHJvamVjdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KChtb2RhbCBhcyBhbnkpLmF2YWlsYWJsZVByb2plY3RzKS50b0VxdWFsKFtdKTtcbiAgICAgIFxuICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbWFsZm9ybWVkIHByb2plY3QgcmVzcG9uc2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtYWxmb3JtZWRSZXNwb25zZSA9IHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgLy8gTWlzc2luZyByZXF1aXJlZCBmaWVsZHNcbiAgICAgIH0gYXMgYW55O1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1hbGZvcm1lZFJlc3BvbnNlKTtcblxuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG5cbiAgICAgIGV4cGVjdCgobW9kYWwgYXMgYW55KS5jdXJyZW50UHJvamVjdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdGFzayBjcmVhdGlvbiB3aXRoIGludmFsaWQgcmVzcG9uc2UgZm9ybWF0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0UmVzcG9uc2UpO1xuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG4gICAgICBcbiAgICAgIChtb2RhbCBhcyBhbnkpLnRhc2tUaXRsZSA9ICdUZXN0IFRhc2snO1xuICAgICAgXG4gICAgICBjb25zdCBpbnZhbGlkUmVzcG9uc2UgPSB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIC8vIE1pc3NpbmcgdGFzayBkZXRhaWxzXG4gICAgICB9IGFzIGFueTtcbiAgICAgIG1vY2tDcmVhdGVUYXNrVXNlQ2FzZS5leGVjdXRlLm1vY2tSZXNvbHZlZFZhbHVlKGludmFsaWRSZXNwb25zZSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChtb2RhbCBhcyBhbnkpLmNyZWF0ZVRhc2soKTtcblxuICAgICAgZXhwZWN0KE5vdGljZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ1Rhc2sgXCJ1bmRlZmluZWRcIiBjcmVhdGVkIHN1Y2Nlc3NmdWxseScpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1N0eWxlIE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjYWxsIGFkZFN0eWxlcyBtZXRob2QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLmV4ZWN1dGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RSZXNwb25zZSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGFkZFN0eWxlc1NweSA9IGplc3Quc3B5T24obW9kYWwgYXMgYW55LCAnYWRkU3R5bGVzJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAgICAgYXdhaXQgbW9kYWwub25PcGVuKCk7XG5cbiAgICAgIGV4cGVjdChhZGRTdHlsZXNTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIFxuICAgICAgYWRkU3R5bGVzU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBzdHlsZSBlbGVtZW50IHdpdGggcHJvcGVyIGNvbnRlbnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrU3R5bGVFbGVtZW50ID0geyB0ZXh0Q29udGVudDogJycgfTtcbiAgICAgIGNvbnN0IGNyZWF0ZUVsZW1lbnRTcHkgPSBqZXN0LnNweU9uKGRvY3VtZW50LCAnY3JlYXRlRWxlbWVudCcpLm1vY2tSZXR1cm5WYWx1ZShtb2NrU3R5bGVFbGVtZW50IGFzIGFueSk7XG4gICAgICBjb25zdCBhcHBlbmRDaGlsZFNweSA9IGplc3Quc3B5T24oZG9jdW1lbnQuaGVhZCwgJ2FwcGVuZENoaWxkJykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuICAgICAgKG1vZGFsIGFzIGFueSkuYWRkU3R5bGVzKCk7XG5cbiAgICAgIGV4cGVjdChjcmVhdGVFbGVtZW50U3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnc3R5bGUnKTtcbiAgICAgIGV4cGVjdChtb2NrU3R5bGVFbGVtZW50LnRleHRDb250ZW50KS50b0NvbnRhaW4oJy5xdWljay10YXNrLXByb2plY3QnKTtcbiAgICAgIGV4cGVjdChtb2NrU3R5bGVFbGVtZW50LnRleHRDb250ZW50KS50b0NvbnRhaW4oJy5xdWljay10YXNrLXJvdycpO1xuICAgICAgZXhwZWN0KG1vY2tTdHlsZUVsZW1lbnQudGV4dENvbnRlbnQpLnRvQ29udGFpbignLnF1aWNrLXRhc2stYnV0dG9ucycpO1xuICAgICAgZXhwZWN0KGFwcGVuZENoaWxkU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrU3R5bGVFbGVtZW50KTtcbiAgICAgIFxuICAgICAgY3JlYXRlRWxlbWVudFNweS5tb2NrUmVzdG9yZSgpO1xuICAgICAgYXBwZW5kQ2hpbGRTcHkubW9ja1Jlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=