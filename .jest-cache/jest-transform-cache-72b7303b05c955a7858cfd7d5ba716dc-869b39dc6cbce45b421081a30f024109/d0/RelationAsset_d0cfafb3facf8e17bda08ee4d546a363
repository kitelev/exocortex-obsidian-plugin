f299f5ce80e7a82c5f6dc94bbfd3db62
"use strict";

/* istanbul ignore next */
function cov_drdo92b6h() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/RelationAsset.ts";
  var hash = "2c00a81c6c82c2f3c3cfb536c9a1d20494539671";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/RelationAsset.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 65
        }
      },
      "2": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 30
        }
      },
      "3": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "4": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      "5": {
        start: {
          line: 42,
          column: 24
        },
        end: {
          line: 42,
          column: 43
        }
      },
      "6": {
        start: {
          line: 43,
          column: 33
        },
        end: {
          line: 43,
          column: 75
        }
      },
      "7": {
        start: {
          line: 44,
          column: 24
        },
        end: {
          line: 50,
          column: 10
        }
      },
      "8": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 40
        }
      },
      "9": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 40
        }
      },
      "10": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 34
        }
      },
      "11": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "12": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "13": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "14": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 67,
          column: 13
        }
      },
      "15": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 27
        }
      },
      "16": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "17": {
        start: {
          line: 71,
          column: 26
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "18": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "19": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 40
        }
      },
      "20": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "21": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "22": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "23": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 43
        }
      },
      "24": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "25": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 103,
          column: 10
        }
      },
      "26": {
        start: {
          line: 109,
          column: 28
        },
        end: {
          line: 109,
          column: 85
        }
      },
      "27": {
        start: {
          line: 110,
          column: 30
        },
        end: {
          line: 110,
          column: 72
        }
      },
      "28": {
        start: {
          line: 111,
          column: 27
        },
        end: {
          line: 111,
          column: 83
        }
      },
      "29": {
        start: {
          line: 112,
          column: 26
        },
        end: {
          line: 112,
          column: 54
        }
      },
      "30": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 88
        }
      },
      "31": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 26
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 39
          },
          end: {
            line: 54,
            column: 5
          }
        },
        line: 41
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 58,
            column: 5
          }
        },
        loc: {
          start: {
            line: 58,
            column: 42
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 38
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 79
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 35
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 91
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 38
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 108
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 33,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 25
          },
          end: {
            line: 33,
            column: 40
          }
        }, {
          start: {
            line: 33,
            column: 44
          },
          end: {
            line: 33,
            column: 82
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 24
          },
          end: {
            line: 35,
            column: 41
          }
        }, {
          start: {
            line: 35,
            column: 45
          },
          end: {
            line: 35,
            column: 53
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 67,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "4": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "5": {
        loc: {
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 100,
            column: 44
          },
          end: {
            line: 100,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 44
          },
          end: {
            line: 100,
            column: 63
          }
        }, {
          start: {
            line: 100,
            column: 67
          },
          end: {
            line: 100,
            column: 70
          }
        }],
        line: 100
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/RelationAsset.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/RelationAsset.ts"],
      sourcesContent: ["import { v4 as uuidv4 } from 'uuid';\n\n/**\n * Represents a relation between assets as a first-class entity\n * This enables Event Sourcing, versioning, and flexible access control\n */\nexport interface RelationAsset {\n    uid: string;\n    type: 'adapter__Relation';\n    subject: string; // Source Asset UID\n    predicate: string; // Relation type (e.g., 'exo__Asset_relates', 'ems__Task_project')\n    object: string; // Target Asset UID or value\n    createdAt: Date;\n    modifiedAt?: Date;\n    isDefinedBy: string; // Ontology namespace\n    confidence?: number; // 0.0 to 1.0\n    provenance?: string; // How this relation was created\n    inverseOf?: string; // UID of inverse relation\n    metadata?: Record<string, any>;\n}\n\n/**\n * Represents N-ary relations (connecting more than 2 assets)\n */\nexport interface NaryRelationAsset extends Omit<RelationAsset, 'type'> {\n    type: 'adapter__NaryRelation';\n    participants: Array<{\n        role: string;\n        assetUid: string;\n    }>;\n}\n\n/**\n * Relation types with their inverses\n */\nexport const RELATION_INVERSES: Record<string, string> = {\n    'exo__Asset_relates': 'exo__Asset_relatedBy',\n    'ems__Task_project': 'ems__Project_hasTasks',\n    'ems__Task_assignedTo': 'ems__Person_assignedTasks',\n    'ems__Area_parent': 'ems__Area_children',\n    'exo__subClassOf': 'exo__superClassOf',\n    'ems__partOf': 'ems__hasPart',\n    'ems__blocks': 'ems__blockedBy',\n    'ems__dependsOn': 'ems__requiredBy'\n};\n\n/**\n * Helper class for working with relations\n */\nexport class RelationAssetHelper {\n    /**\n     * Create a new relation asset\n     */\n    static create(params: {\n        subject: string;\n        predicate: string;\n        object: string;\n        ontology?: string;\n        confidence?: number;\n        provenance?: string;\n    }): RelationAsset {\n        return {\n            uid: uuidv4(),\n            type: 'adapter__Relation',\n            subject: params.subject,\n            predicate: params.predicate,\n            object: params.object,\n            createdAt: new Date(),\n            isDefinedBy: params.ontology || this.extractOntology(params.predicate),\n            confidence: params.confidence,\n            provenance: params.provenance || 'manual'\n        };\n    }\n    \n    /**\n     * Create bidirectional relation (returns both relation and its inverse)\n     */\n    static createBidirectional(params: {\n        subject: string;\n        predicate: string;\n        object: string;\n        ontology?: string;\n    }): [RelationAsset, RelationAsset] {\n        const forward = this.create(params);\n        \n        const inversePredicate = this.getInversePredicate(params.predicate);\n        const inverse = this.create({\n            subject: params.object,\n            predicate: inversePredicate,\n            object: params.subject,\n            ontology: params.ontology,\n            provenance: `inverse of ${forward.uid}`\n        });\n        \n        forward.inverseOf = inverse.uid;\n        inverse.inverseOf = forward.uid;\n        \n        return [forward, inverse];\n    }\n    \n    /**\n     * Get inverse predicate name\n     */\n    static getInversePredicate(predicate: string): string {\n        // Check known inverses\n        if (RELATION_INVERSES[predicate]) {\n            return RELATION_INVERSES[predicate];\n        }\n        \n        // Check reverse mapping\n        for (const [key, value] of Object.entries(RELATION_INVERSES)) {\n            if (value === predicate) {\n                return key;\n            }\n        }\n        \n        // Generate inverse name\n        if (predicate.includes('__')) {\n            const parts = predicate.split('__');\n            return `${parts[0]}__inverseOf_${parts[1]}`;\n        }\n        \n        return `inverseOf_${predicate}`;\n    }\n    \n    /**\n     * Extract ontology namespace from predicate\n     */\n    static extractOntology(predicate: string): string {\n        if (predicate.includes('__')) {\n            return predicate.split('__')[0];\n        }\n        if (predicate.includes(':')) {\n            return predicate.split(':')[0];\n        }\n        return 'exo';\n    }\n    \n    /**\n     * Convert relation to markdown frontmatter\n     */\n    static toFrontmatter(relation: RelationAsset): Record<string, any> {\n        return {\n            'exo__Instance_class': '[[adapter__Relation]]',\n            'exo__Asset_uid': relation.uid,\n            'adapter__Relation_subject': `[[${relation.subject}]]`,\n            'adapter__Relation_predicate': relation.predicate,\n            'adapter__Relation_object': `[[${relation.object}]]`,\n            'exo__Asset_createdAt': relation.createdAt.toISOString(),\n            'exo__Asset_isDefinedBy': `[[${relation.isDefinedBy}]]`,\n            'adapter__Relation_confidence': relation.confidence || 1.0,\n            'adapter__Relation_provenance': relation.provenance,\n            'adapter__Relation_inverseOf': relation.inverseOf\n        };\n    }\n    \n    /**\n     * Generate filename for relation asset\n     */\n    static generateFilename(relation: RelationAsset): string {\n        const subjectName = relation.subject.replace(/[^\\w-]/g, '_').substring(0, 20);\n        const predicateName = relation.predicate.replace(/[^\\w-]/g, '_');\n        const objectName = relation.object.replace(/[^\\w-]/g, '_').substring(0, 20);\n        const timestamp = relation.createdAt.getTime();\n        \n        return `Relation_${subjectName}_${predicateName}_${objectName}_${timestamp}.md`;\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2c00a81c6c82c2f3c3cfb536c9a1d20494539671"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_drdo92b6h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_drdo92b6h();
cov_drdo92b6h().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_drdo92b6h().s[1]++;
exports.RelationAssetHelper = exports.RELATION_INVERSES = void 0;
const uuid_1 =
/* istanbul ignore next */
(cov_drdo92b6h().s[2]++, require("uuid"));
/**
 * Relation types with their inverses
 */
/* istanbul ignore next */
cov_drdo92b6h().s[3]++;
exports.RELATION_INVERSES = {
  'exo__Asset_relates': 'exo__Asset_relatedBy',
  'ems__Task_project': 'ems__Project_hasTasks',
  'ems__Task_assignedTo': 'ems__Person_assignedTasks',
  'ems__Area_parent': 'ems__Area_children',
  'exo__subClassOf': 'exo__superClassOf',
  'ems__partOf': 'ems__hasPart',
  'ems__blocks': 'ems__blockedBy',
  'ems__dependsOn': 'ems__requiredBy'
};
/**
 * Helper class for working with relations
 */
class RelationAssetHelper {
  /**
   * Create a new relation asset
   */
  static create(params) {
    /* istanbul ignore next */
    cov_drdo92b6h().f[0]++;
    cov_drdo92b6h().s[4]++;
    return {
      uid: (0, uuid_1.v4)(),
      type: 'adapter__Relation',
      subject: params.subject,
      predicate: params.predicate,
      object: params.object,
      createdAt: new Date(),
      isDefinedBy:
      /* istanbul ignore next */
      (cov_drdo92b6h().b[0][0]++, params.ontology) ||
      /* istanbul ignore next */
      (cov_drdo92b6h().b[0][1]++, this.extractOntology(params.predicate)),
      confidence: params.confidence,
      provenance:
      /* istanbul ignore next */
      (cov_drdo92b6h().b[1][0]++, params.provenance) ||
      /* istanbul ignore next */
      (cov_drdo92b6h().b[1][1]++, 'manual')
    };
  }
  /**
   * Create bidirectional relation (returns both relation and its inverse)
   */
  static createBidirectional(params) {
    /* istanbul ignore next */
    cov_drdo92b6h().f[1]++;
    const forward =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[5]++, this.create(params));
    const inversePredicate =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[6]++, this.getInversePredicate(params.predicate));
    const inverse =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[7]++, this.create({
      subject: params.object,
      predicate: inversePredicate,
      object: params.subject,
      ontology: params.ontology,
      provenance: `inverse of ${forward.uid}`
    }));
    /* istanbul ignore next */
    cov_drdo92b6h().s[8]++;
    forward.inverseOf = inverse.uid;
    /* istanbul ignore next */
    cov_drdo92b6h().s[9]++;
    inverse.inverseOf = forward.uid;
    /* istanbul ignore next */
    cov_drdo92b6h().s[10]++;
    return [forward, inverse];
  }
  /**
   * Get inverse predicate name
   */
  static getInversePredicate(predicate) {
    /* istanbul ignore next */
    cov_drdo92b6h().f[2]++;
    cov_drdo92b6h().s[11]++;
    // Check known inverses
    if (exports.RELATION_INVERSES[predicate]) {
      /* istanbul ignore next */
      cov_drdo92b6h().b[2][0]++;
      cov_drdo92b6h().s[12]++;
      return exports.RELATION_INVERSES[predicate];
    } else
    /* istanbul ignore next */
    {
      cov_drdo92b6h().b[2][1]++;
    }
    // Check reverse mapping
    cov_drdo92b6h().s[13]++;
    for (const [key, value] of Object.entries(exports.RELATION_INVERSES)) {
      /* istanbul ignore next */
      cov_drdo92b6h().s[14]++;
      if (value === predicate) {
        /* istanbul ignore next */
        cov_drdo92b6h().b[3][0]++;
        cov_drdo92b6h().s[15]++;
        return key;
      } else
      /* istanbul ignore next */
      {
        cov_drdo92b6h().b[3][1]++;
      }
    }
    // Generate inverse name
    /* istanbul ignore next */
    cov_drdo92b6h().s[16]++;
    if (predicate.includes('__')) {
      /* istanbul ignore next */
      cov_drdo92b6h().b[4][0]++;
      const parts =
      /* istanbul ignore next */
      (cov_drdo92b6h().s[17]++, predicate.split('__'));
      /* istanbul ignore next */
      cov_drdo92b6h().s[18]++;
      return `${parts[0]}__inverseOf_${parts[1]}`;
    } else
    /* istanbul ignore next */
    {
      cov_drdo92b6h().b[4][1]++;
    }
    cov_drdo92b6h().s[19]++;
    return `inverseOf_${predicate}`;
  }
  /**
   * Extract ontology namespace from predicate
   */
  static extractOntology(predicate) {
    /* istanbul ignore next */
    cov_drdo92b6h().f[3]++;
    cov_drdo92b6h().s[20]++;
    if (predicate.includes('__')) {
      /* istanbul ignore next */
      cov_drdo92b6h().b[5][0]++;
      cov_drdo92b6h().s[21]++;
      return predicate.split('__')[0];
    } else
    /* istanbul ignore next */
    {
      cov_drdo92b6h().b[5][1]++;
    }
    cov_drdo92b6h().s[22]++;
    if (predicate.includes(':')) {
      /* istanbul ignore next */
      cov_drdo92b6h().b[6][0]++;
      cov_drdo92b6h().s[23]++;
      return predicate.split(':')[0];
    } else
    /* istanbul ignore next */
    {
      cov_drdo92b6h().b[6][1]++;
    }
    cov_drdo92b6h().s[24]++;
    return 'exo';
  }
  /**
   * Convert relation to markdown frontmatter
   */
  static toFrontmatter(relation) {
    /* istanbul ignore next */
    cov_drdo92b6h().f[4]++;
    cov_drdo92b6h().s[25]++;
    return {
      'exo__Instance_class': '[[adapter__Relation]]',
      'exo__Asset_uid': relation.uid,
      'adapter__Relation_subject': `[[${relation.subject}]]`,
      'adapter__Relation_predicate': relation.predicate,
      'adapter__Relation_object': `[[${relation.object}]]`,
      'exo__Asset_createdAt': relation.createdAt.toISOString(),
      'exo__Asset_isDefinedBy': `[[${relation.isDefinedBy}]]`,
      'adapter__Relation_confidence':
      /* istanbul ignore next */
      (cov_drdo92b6h().b[7][0]++, relation.confidence) ||
      /* istanbul ignore next */
      (cov_drdo92b6h().b[7][1]++, 1.0),
      'adapter__Relation_provenance': relation.provenance,
      'adapter__Relation_inverseOf': relation.inverseOf
    };
  }
  /**
   * Generate filename for relation asset
   */
  static generateFilename(relation) {
    /* istanbul ignore next */
    cov_drdo92b6h().f[5]++;
    const subjectName =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[26]++, relation.subject.replace(/[^\w-]/g, '_').substring(0, 20));
    const predicateName =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[27]++, relation.predicate.replace(/[^\w-]/g, '_'));
    const objectName =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[28]++, relation.object.replace(/[^\w-]/g, '_').substring(0, 20));
    const timestamp =
    /* istanbul ignore next */
    (cov_drdo92b6h().s[29]++, relation.createdAt.getTime());
    /* istanbul ignore next */
    cov_drdo92b6h().s[30]++;
    return `Relation_${subjectName}_${predicateName}_${objectName}_${timestamp}.md`;
  }
}
/* istanbul ignore next */
cov_drdo92b6h().s[31]++;
exports.RelationAssetHelper = RelationAssetHelper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,