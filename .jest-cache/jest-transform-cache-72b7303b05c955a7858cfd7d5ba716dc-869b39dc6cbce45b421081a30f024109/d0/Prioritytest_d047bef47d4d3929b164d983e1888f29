14b0de4816056f49898c7ac3259d5831
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Priority_1 = require("../../../../src/domain/value-objects/Priority");
describe('Priority', () => {
    describe('create', () => {
        it('should create priority with valid string', () => {
            const result = Priority_1.Priority.create('high');
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().toString()).toBe('high');
        });
        it('should create priority with enum value', () => {
            const result = Priority_1.Priority.create(Priority_1.PriorityLevel.URGENT);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().getLevel()).toBe(Priority_1.PriorityLevel.URGENT);
        });
        it('should handle case insensitive input', () => {
            const result = Priority_1.Priority.create('HIGH');
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().toString()).toBe('high');
        });
        it('should reject invalid priority', () => {
            const result = Priority_1.Priority.create('invalid');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Priority must be one of: low, medium, high, urgent');
        });
        it('should reject empty priority', () => {
            const result = Priority_1.Priority.create('');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Priority cannot be empty');
        });
    });
    describe('static factory methods', () => {
        it('should create low priority', () => {
            const priority = Priority_1.Priority.low();
            expect(priority.getLevel()).toBe(Priority_1.PriorityLevel.LOW);
        });
        it('should create medium priority', () => {
            const priority = Priority_1.Priority.medium();
            expect(priority.getLevel()).toBe(Priority_1.PriorityLevel.MEDIUM);
        });
        it('should create high priority', () => {
            const priority = Priority_1.Priority.high();
            expect(priority.getLevel()).toBe(Priority_1.PriorityLevel.HIGH);
        });
        it('should create urgent priority', () => {
            const priority = Priority_1.Priority.urgent();
            expect(priority.getLevel()).toBe(Priority_1.PriorityLevel.URGENT);
        });
    });
    describe('comparison methods', () => {
        it('should compare priorities correctly', () => {
            const low = Priority_1.Priority.low();
            const medium = Priority_1.Priority.medium();
            const high = Priority_1.Priority.high();
            const urgent = Priority_1.Priority.urgent();
            expect(low.compare(medium)).toBeLessThan(0);
            expect(medium.compare(high)).toBeLessThan(0);
            expect(high.compare(urgent)).toBeLessThan(0);
            expect(urgent.compare(low)).toBeGreaterThan(0);
            expect(medium.compare(medium)).toBe(0);
        });
        it('should check if priority is higher', () => {
            const low = Priority_1.Priority.low();
            const high = Priority_1.Priority.high();
            expect(high.isHigherThan(low)).toBe(true);
            expect(low.isHigherThan(high)).toBe(false);
        });
        it('should check if priority is lower', () => {
            const low = Priority_1.Priority.low();
            const high = Priority_1.Priority.high();
            expect(low.isLowerThan(high)).toBe(true);
            expect(high.isLowerThan(low)).toBe(false);
        });
    });
    describe('numeric value', () => {
        it('should return correct numeric values', () => {
            expect(Priority_1.Priority.low().getNumericValue()).toBe(1);
            expect(Priority_1.Priority.medium().getNumericValue()).toBe(2);
            expect(Priority_1.Priority.high().getNumericValue()).toBe(3);
            expect(Priority_1.Priority.urgent().getNumericValue()).toBe(4);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,