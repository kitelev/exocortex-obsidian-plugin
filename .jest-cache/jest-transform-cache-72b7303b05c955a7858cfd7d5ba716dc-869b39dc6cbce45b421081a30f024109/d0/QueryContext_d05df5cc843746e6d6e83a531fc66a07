b045d3722c5fec59b3c554d64099b4bf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryContext = exports.ClauseType = exports.QueryType = void 0;
var QueryType;
(function (QueryType) {
    QueryType["SELECT"] = "SELECT";
    QueryType["CONSTRUCT"] = "CONSTRUCT";
    QueryType["ASK"] = "ASK";
    QueryType["DESCRIBE"] = "DESCRIBE";
    QueryType["INSERT"] = "INSERT";
    QueryType["DELETE"] = "DELETE";
})(QueryType = exports.QueryType || (exports.QueryType = {}));
var ClauseType;
(function (ClauseType) {
    ClauseType["SELECT"] = "SELECT";
    ClauseType["WHERE"] = "WHERE";
    ClauseType["FILTER"] = "FILTER";
    ClauseType["OPTIONAL"] = "OPTIONAL";
    ClauseType["UNION"] = "UNION";
    ClauseType["ORDER_BY"] = "ORDER_BY";
    ClauseType["GROUP_BY"] = "GROUP_BY";
    ClauseType["LIMIT"] = "LIMIT";
    ClauseType["OFFSET"] = "OFFSET";
    ClauseType["PREFIX"] = "PREFIX";
})(ClauseType = exports.ClauseType || (exports.ClauseType = {}));
class QueryContext {
    constructor(query, cursorPosition, currentToken, previousTokens, queryType, currentClause, clauses) {
        this.query = query;
        this.cursorPosition = cursorPosition;
        this.currentToken = currentToken;
        this.previousTokens = previousTokens;
        this.queryType = queryType;
        this.currentClause = currentClause;
        this.clauses = clauses;
        Object.freeze(this);
    }
    getQuery() {
        return this.query;
    }
    getCursorPosition() {
        return this.cursorPosition;
    }
    getCurrentToken() {
        return this.currentToken;
    }
    getPreviousTokens() {
        return [...this.previousTokens];
    }
    getQueryType() {
        return this.queryType;
    }
    getCurrentClause() {
        return this.currentClause;
    }
    getClauses() {
        return [...this.clauses];
    }
    isInClause(clauseType) {
        return this.currentClause === clauseType;
    }
    isAfterClause(clauseType) {
        const clauseIndex = this.clauses.findIndex(c => c.type === clauseType);
        if (clauseIndex === -1)
            return false;
        const clause = this.clauses[clauseIndex];
        return this.cursorPosition > clause.endPosition;
    }
    getVariablesInScope() {
        const variables = new Set();
        for (const clause of this.clauses) {
            if (clause.endPosition < this.cursorPosition) {
                clause.variables.forEach(v => variables.add(v));
            }
        }
        return Array.from(variables);
    }
    isStartOfQuery() {
        const trimmedQuery = this.query.substring(0, this.cursorPosition).trim();
        return trimmedQuery.length === 0 || trimmedQuery.length === this.currentToken.length;
    }
    static create(params) {
        return new QueryContext(params.query, params.cursorPosition, params.currentToken || '', params.previousTokens || [], params.queryType || null, params.currentClause || null, params.clauses || []);
    }
}
exports.QueryContext = QueryContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9hdXRvY29tcGxldGUvUXVlcnlDb250ZXh0LnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLElBQVksU0FPWDtBQVBELFdBQVksU0FBUztJQUNqQiw4QkFBaUIsQ0FBQTtJQUNqQixvQ0FBdUIsQ0FBQTtJQUN2Qix3QkFBVyxDQUFBO0lBQ1gsa0NBQXFCLENBQUE7SUFDckIsOEJBQWlCLENBQUE7SUFDakIsOEJBQWlCLENBQUE7QUFDckIsQ0FBQyxFQVBXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBT3BCO0FBRUQsSUFBWSxVQVdYO0FBWEQsV0FBWSxVQUFVO0lBQ2xCLCtCQUFpQixDQUFBO0lBQ2pCLDZCQUFlLENBQUE7SUFDZiwrQkFBaUIsQ0FBQTtJQUNqQixtQ0FBcUIsQ0FBQTtJQUNyQiw2QkFBZSxDQUFBO0lBQ2YsbUNBQXFCLENBQUE7SUFDckIsbUNBQXFCLENBQUE7SUFDckIsNkJBQWUsQ0FBQTtJQUNmLCtCQUFpQixDQUFBO0lBQ2pCLCtCQUFpQixDQUFBO0FBQ3JCLENBQUMsRUFYVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQVdyQjtBQVVELE1BQWEsWUFBWTtJQUNyQixZQUNxQixLQUFhLEVBQ2IsY0FBc0IsRUFDdEIsWUFBb0IsRUFDcEIsY0FBd0IsRUFDeEIsU0FBMkIsRUFDM0IsYUFBZ0MsRUFDaEMsT0FBc0I7UUFOdEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBQ3RCLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQ3BCLG1CQUFjLEdBQWQsY0FBYyxDQUFVO1FBQ3hCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGtCQUFhLEdBQWIsYUFBYSxDQUFtQjtRQUNoQyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBRXZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELGlCQUFpQjtRQUNiLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBRUQsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsaUJBQWlCO1FBQ2IsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFzQjtRQUM3QixPQUFPLElBQUksQ0FBQyxhQUFhLEtBQUssVUFBVSxDQUFDO0lBQzdDLENBQUM7SUFFRCxhQUFhLENBQUMsVUFBc0I7UUFDaEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLElBQUksV0FBVyxLQUFLLENBQUMsQ0FBQztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRXJDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDcEQsQ0FBQztJQUVELG1CQUFtQjtRQUNmLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFFcEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQy9CLElBQUksTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUMxQyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNuRDtTQUNKO1FBRUQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxjQUFjO1FBQ1YsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6RSxPQUFPLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUM7SUFDekYsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFRYjtRQUNHLE9BQU8sSUFBSSxZQUFZLENBQ25CLE1BQU0sQ0FBQyxLQUFLLEVBQ1osTUFBTSxDQUFDLGNBQWMsRUFDckIsTUFBTSxDQUFDLFlBQVksSUFBSSxFQUFFLEVBQ3pCLE1BQU0sQ0FBQyxjQUFjLElBQUksRUFBRSxFQUMzQixNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksRUFDeEIsTUFBTSxDQUFDLGFBQWEsSUFBSSxJQUFJLEVBQzVCLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUN2QixDQUFDO0lBQ04sQ0FBQztDQUNKO0FBekZELG9DQXlGQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvZG9tYWluL2F1dG9jb21wbGV0ZS9RdWVyeUNvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gUXVlcnlUeXBlIHtcbiAgICBTRUxFQ1QgPSAnU0VMRUNUJyxcbiAgICBDT05TVFJVQ1QgPSAnQ09OU1RSVUNUJyxcbiAgICBBU0sgPSAnQVNLJyxcbiAgICBERVNDUklCRSA9ICdERVNDUklCRScsXG4gICAgSU5TRVJUID0gJ0lOU0VSVCcsXG4gICAgREVMRVRFID0gJ0RFTEVURSdcbn1cblxuZXhwb3J0IGVudW0gQ2xhdXNlVHlwZSB7XG4gICAgU0VMRUNUID0gJ1NFTEVDVCcsXG4gICAgV0hFUkUgPSAnV0hFUkUnLFxuICAgIEZJTFRFUiA9ICdGSUxURVInLFxuICAgIE9QVElPTkFMID0gJ09QVElPTkFMJyxcbiAgICBVTklPTiA9ICdVTklPTicsXG4gICAgT1JERVJfQlkgPSAnT1JERVJfQlknLFxuICAgIEdST1VQX0JZID0gJ0dST1VQX0JZJyxcbiAgICBMSU1JVCA9ICdMSU1JVCcsXG4gICAgT0ZGU0VUID0gJ09GRlNFVCcsXG4gICAgUFJFRklYID0gJ1BSRUZJWCdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBRdWVyeUNsYXVzZSB7XG4gICAgdHlwZTogQ2xhdXNlVHlwZTtcbiAgICBzdGFydFBvc2l0aW9uOiBudW1iZXI7XG4gICAgZW5kUG9zaXRpb246IG51bWJlcjtcbiAgICB2YXJpYWJsZXM6IHN0cmluZ1tdO1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFF1ZXJ5Q29udGV4dCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcXVlcnk6IHN0cmluZyxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjdXJzb3JQb3NpdGlvbjogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGN1cnJlbnRUb2tlbjogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHByZXZpb3VzVG9rZW5zOiBzdHJpbmdbXSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBxdWVyeVR5cGU6IFF1ZXJ5VHlwZSB8IG51bGwsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY3VycmVudENsYXVzZTogQ2xhdXNlVHlwZSB8IG51bGwsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY2xhdXNlczogUXVlcnlDbGF1c2VbXVxuICAgICkge1xuICAgICAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICAgIH1cblxuICAgIGdldFF1ZXJ5KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5O1xuICAgIH1cblxuICAgIGdldEN1cnNvclBvc2l0aW9uKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnNvclBvc2l0aW9uO1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRUb2tlbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgfVxuXG4gICAgZ2V0UHJldmlvdXNUb2tlbnMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMucHJldmlvdXNUb2tlbnNdO1xuICAgIH1cblxuICAgIGdldFF1ZXJ5VHlwZSgpOiBRdWVyeVR5cGUgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlUeXBlO1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRDbGF1c2UoKTogQ2xhdXNlVHlwZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2xhdXNlO1xuICAgIH1cblxuICAgIGdldENsYXVzZXMoKTogUXVlcnlDbGF1c2VbXSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5jbGF1c2VzXTtcbiAgICB9XG5cbiAgICBpc0luQ2xhdXNlKGNsYXVzZVR5cGU6IENsYXVzZVR5cGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudENsYXVzZSA9PT0gY2xhdXNlVHlwZTtcbiAgICB9XG5cbiAgICBpc0FmdGVyQ2xhdXNlKGNsYXVzZVR5cGU6IENsYXVzZVR5cGUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgY2xhdXNlSW5kZXggPSB0aGlzLmNsYXVzZXMuZmluZEluZGV4KGMgPT4gYy50eXBlID09PSBjbGF1c2VUeXBlKTtcbiAgICAgICAgaWYgKGNsYXVzZUluZGV4ID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgY2xhdXNlID0gdGhpcy5jbGF1c2VzW2NsYXVzZUluZGV4XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zaXRpb24gPiBjbGF1c2UuZW5kUG9zaXRpb247XG4gICAgfVxuXG4gICAgZ2V0VmFyaWFibGVzSW5TY29wZSgpOiBzdHJpbmdbXSB7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBjbGF1c2Ugb2YgdGhpcy5jbGF1c2VzKSB7XG4gICAgICAgICAgICBpZiAoY2xhdXNlLmVuZFBvc2l0aW9uIDwgdGhpcy5jdXJzb3JQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNsYXVzZS52YXJpYWJsZXMuZm9yRWFjaCh2ID0+IHZhcmlhYmxlcy5hZGQodikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh2YXJpYWJsZXMpO1xuICAgIH1cblxuICAgIGlzU3RhcnRPZlF1ZXJ5KCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB0cmltbWVkUXVlcnkgPSB0aGlzLnF1ZXJ5LnN1YnN0cmluZygwLCB0aGlzLmN1cnNvclBvc2l0aW9uKS50cmltKCk7XG4gICAgICAgIHJldHVybiB0cmltbWVkUXVlcnkubGVuZ3RoID09PSAwIHx8IHRyaW1tZWRRdWVyeS5sZW5ndGggPT09IHRoaXMuY3VycmVudFRva2VuLmxlbmd0aDtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKHBhcmFtczoge1xuICAgICAgICBxdWVyeTogc3RyaW5nO1xuICAgICAgICBjdXJzb3JQb3NpdGlvbjogbnVtYmVyO1xuICAgICAgICBjdXJyZW50VG9rZW4/OiBzdHJpbmc7XG4gICAgICAgIHByZXZpb3VzVG9rZW5zPzogc3RyaW5nW107XG4gICAgICAgIHF1ZXJ5VHlwZT86IFF1ZXJ5VHlwZSB8IG51bGw7XG4gICAgICAgIGN1cnJlbnRDbGF1c2U/OiBDbGF1c2VUeXBlIHwgbnVsbDtcbiAgICAgICAgY2xhdXNlcz86IFF1ZXJ5Q2xhdXNlW107XG4gICAgfSk6IFF1ZXJ5Q29udGV4dCB7XG4gICAgICAgIHJldHVybiBuZXcgUXVlcnlDb250ZXh0KFxuICAgICAgICAgICAgcGFyYW1zLnF1ZXJ5LFxuICAgICAgICAgICAgcGFyYW1zLmN1cnNvclBvc2l0aW9uLFxuICAgICAgICAgICAgcGFyYW1zLmN1cnJlbnRUb2tlbiB8fCAnJyxcbiAgICAgICAgICAgIHBhcmFtcy5wcmV2aW91c1Rva2VucyB8fCBbXSxcbiAgICAgICAgICAgIHBhcmFtcy5xdWVyeVR5cGUgfHwgbnVsbCxcbiAgICAgICAgICAgIHBhcmFtcy5jdXJyZW50Q2xhdXNlIHx8IG51bGwsXG4gICAgICAgICAgICBwYXJhbXMuY2xhdXNlcyB8fCBbXVxuICAgICAgICApO1xuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=