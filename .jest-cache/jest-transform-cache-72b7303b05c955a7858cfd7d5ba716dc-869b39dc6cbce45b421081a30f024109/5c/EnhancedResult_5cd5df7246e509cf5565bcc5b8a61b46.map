{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/EnhancedResult.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/EnhancedResult.ts"],"sourcesContent":["import { Result } from \"./Result\";\nimport {\n  ExocortexError,\n  ErrorBuilder,\n  ErrorSeverity,\n  ErrorCategory,\n} from \"../errors/ExocortexError\";\n\nexport class EnhancedResult<T> {\n  private _result: Result<T>;\n  private _errorDetails?: ExocortexError;\n\n  private constructor(result: Result<T>, errorDetails?: ExocortexError) {\n    this._result = result;\n    this._errorDetails = errorDetails;\n  }\n\n  get isSuccess(): boolean {\n    return this._result.isSuccess;\n  }\n\n  get isFailure(): boolean {\n    return this._result.isFailure;\n  }\n\n  get error(): string {\n    return this._result.error;\n  }\n\n  public getValue(): T {\n    return this._result.getValue();\n  }\n\n  public errorValue(): string {\n    return this._result.errorValue();\n  }\n\n  public getErrorDetails(): ExocortexError | undefined {\n    return this._errorDetails;\n  }\n\n  public static okEnhanced<U>(value?: U): EnhancedResult<U> {\n    const result = Result.ok<U>(value);\n    return new EnhancedResult(result);\n  }\n\n  public static failEnhanced<U>(\n    error: string | ExocortexError,\n  ): EnhancedResult<U> {\n    let errorMessage: string;\n    let errorDetails: ExocortexError | undefined;\n\n    if (typeof error === \"string\") {\n      errorMessage = error;\n      errorDetails = ErrorBuilder.create()\n        .withTitle(\"Operation Failed\")\n        .withMessage(error)\n        .withSeverity(ErrorSeverity.ERROR)\n        .withCategory(ErrorCategory.SYSTEM)\n        .withContext({\n          operation: \"Unknown\",\n          timestamp: new Date(),\n        })\n        .build();\n    } else {\n      errorMessage = error.message;\n      errorDetails = error;\n    }\n\n    const result = Result.fail<U>(errorMessage);\n    return new EnhancedResult(result, errorDetails);\n  }\n\n  public mapError(\n    fn: (error: ExocortexError) => ExocortexError,\n  ): EnhancedResult<T> {\n    if (this.isSuccess) {\n      return this;\n    }\n\n    const currentError =\n      this._errorDetails ||\n      ErrorBuilder.create()\n        .withMessage(this.error)\n        .withSeverity(ErrorSeverity.ERROR)\n        .withCategory(ErrorCategory.SYSTEM)\n        .withContext({\n          operation: \"Unknown\",\n          timestamp: new Date(),\n        })\n        .build();\n\n    const mappedError = fn(currentError);\n    return EnhancedResult.failEnhanced<T>(mappedError);\n  }\n\n  public chain<U>(fn: (value: T) => EnhancedResult<U>): EnhancedResult<U> {\n    if (this.isFailure) {\n      return EnhancedResult.failEnhanced<U>(this._errorDetails || this.error);\n    }\n    return fn(this.getValue());\n  }\n\n  public static combineEnhanced(\n    results: EnhancedResult<any>[],\n  ): EnhancedResult<any> {\n    const errors: ExocortexError[] = [];\n\n    for (const result of results) {\n      if (result.isFailure) {\n        const errorDetails = result.getErrorDetails();\n        if (errorDetails) {\n          errors.push(errorDetails);\n        }\n      }\n    }\n\n    if (errors.length > 0) {\n      const combinedError = ErrorBuilder.create()\n        .withTitle(\"Multiple Errors Occurred\")\n        .withMessage(`${errors.length} error(s) occurred during operation`)\n        .withSeverity(ErrorSeverity.ERROR)\n        .withCategory(ErrorCategory.SYSTEM)\n        .withContext({\n          operation: \"Combined Operation\",\n          timestamp: new Date(),\n          metadata: {\n            errorCount: errors.length,\n            errors: errors.map((e) => ({ id: e.id, title: e.title })),\n          },\n        })\n        .withInnerError(errors[0])\n        .build();\n\n      return EnhancedResult.failEnhanced(combinedError);\n    }\n\n    return EnhancedResult.okEnhanced();\n  }\n\n  public withContext(\n    context: Partial<ExocortexError[\"context\"]>,\n  ): EnhancedResult<T> {\n    if (this.isSuccess) {\n      return this;\n    }\n\n    const currentError = this._errorDetails;\n    if (!currentError) {\n      return this;\n    }\n\n    const updatedError = {\n      ...currentError,\n      context: {\n        ...currentError.context,\n        ...context,\n      },\n    };\n\n    return EnhancedResult.failEnhanced<T>(updatedError);\n  }\n}\n"],"version":3}