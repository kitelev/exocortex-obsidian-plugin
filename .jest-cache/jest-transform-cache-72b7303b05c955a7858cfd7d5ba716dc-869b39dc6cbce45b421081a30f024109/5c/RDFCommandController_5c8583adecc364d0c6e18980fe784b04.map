{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/command-controllers/RDFCommandController.ts","mappings":";;;AAAA,uCAA0C;AAK1C,6DAA0D;AAC1D,6DAA0D;AAE1D;;;GAGG;AACH,MAAa,oBAAoB;IAC/B,YACmB,MAAc,EACd,KAAY,EACZ,UAAsB,EACtB,eAAgC;QAHhC,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAO;QACZ,eAAU,GAAV,UAAU,CAAY;QACtB,oBAAe,GAAf,eAAe,CAAiB;IAChD,CAAC;IAEJ,KAAK,CAAC,gBAAgB;QACpB,2CAA2C;QAC3C,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACrB,EAAE,EAAE,wBAAwB;YAC5B,IAAI,EAAE,wBAAwB;YAC9B,QAAQ,EAAE,GAAG,EAAE;gBACb,MAAM,KAAK,GAAG,IAAI,+BAAc,CAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,EACf,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,EACrC,CAAC,MAAM,EAAE,EAAE;oBACT,yBAAyB;gBAC3B,CAAC,CACF,CAAC;gBACF,KAAK,CAAC,IAAI,EAAE,CAAC;YACf,CAAC;SACF,CAAC,CAAC;QAEH,oCAAoC;QACpC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACrB,EAAE,EAAE,iBAAiB;YACrB,IAAI,EAAE,iBAAiB;YACvB,QAAQ,EAAE,GAAG,EAAE;gBACb,MAAM,KAAK,GAAG,IAAI,+BAAc,CAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,EACf,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,UAAU,CAAC,mBAAmB,EAAE,EACrC,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE;oBAC/B,IAAI;wBACF,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE;4BACnC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;4BACnB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;yBACjC;6BAAM;4BACL,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;yBACjC;wBAED,8CAA8C;wBAC9C,IAAI,CAAC,eAAe,CAAC,eAAe,EAAE,CAAC;wBAEvC,uBAAuB;qBACxB;oBAAC,OAAO,KAAK,EAAE;wBACd,oBAAoB;wBACpB,IAAI,iBAAM,CAAC,kBAAkB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;qBAC/C;gBACH,CAAC,CACF,CAAC;gBACF,KAAK,CAAC,IAAI,EAAE,CAAC;YACf,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,OAAO;QACX,8CAA8C;IAChD,CAAC;IAED,eAAe;QACb,OAAO,sBAAsB,CAAC;IAChC,CAAC;CACF;AAlED,oDAkEC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/command-controllers/RDFCommandController.ts"],"sourcesContent":["import { Plugin, Notice } from \"obsidian\";\nimport { ICommandController } from \"../../application/ports/ICommandController\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { RDFService } from \"../../application/services/RDFService\";\nimport { SPARQLProcessor } from \"../processors/SPARQLProcessor\";\nimport { ExportRDFModal } from \"../modals/ExportRDFModal\";\nimport { ImportRDFModal } from \"../modals/ImportRDFModal\";\n\n/**\n * RDF Command Controller following Controller Pattern (GRASP)\n * Single Responsibility: Handle RDF import/export commands only\n */\nexport class RDFCommandController implements ICommandController {\n  constructor(\n    private readonly plugin: Plugin,\n    private readonly graph: Graph,\n    private readonly rdfService: RDFService,\n    private readonly sparqlProcessor: SPARQLProcessor,\n  ) {}\n\n  async registerCommands(): Promise<void> {\n    // Register command: Export knowledge graph\n    this.plugin.addCommand({\n      id: \"export-knowledge-graph\",\n      name: \"Export knowledge graph\",\n      callback: () => {\n        const modal = new ExportRDFModal(\n          this.plugin.app,\n          this.graph,\n          this.rdfService.getNamespaceManager(),\n          (result) => {\n            // Graph export completed\n          },\n        );\n        modal.open();\n      },\n    });\n\n    // Register command: Import RDF data\n    this.plugin.addCommand({\n      id: \"import-rdf-data\",\n      name: \"Import RDF data\",\n      callback: () => {\n        const modal = new ImportRDFModal(\n          this.plugin.app,\n          this.graph,\n          this.rdfService.getNamespaceManager(),\n          async (importedGraph, options) => {\n            try {\n              if (options.mergeMode === \"replace\") {\n                this.graph.clear();\n                this.graph.merge(importedGraph);\n              } else {\n                this.graph.merge(importedGraph);\n              }\n\n              // Invalidate SPARQL cache since graph changed\n              this.sparqlProcessor.invalidateCache();\n\n              // RDF import completed\n            } catch (error) {\n              // RDF import failed\n              new Notice(`Import failed: ${error.message}`);\n            }\n          },\n        );\n        modal.open();\n      },\n    });\n  }\n\n  async cleanup(): Promise<void> {\n    // No specific cleanup needed for RDF commands\n  }\n\n  getControllerId(): string {\n    return \"RDFCommandController\";\n  }\n}\n"],"version":3}