3eccd262a8aef51caffbdf9dfd95a638
"use strict";
/**
 * Modal for RDF Export functionality
 * Allows users to export knowledge graph or SPARQL results to various RDF formats
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportRDFModal = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const Graph_1 = require("../../domain/semantic/core/Graph");
const RDFSerializer_1 = require("../../application/services/RDFSerializer");
const NamespaceManager_1 = require("../../application/services/NamespaceManager");
class ExportRDFModal extends obsidian_1.Modal {
    constructor(app, graph, namespaceManager, onExport) {
        super(app);
        this.options = {
            format: 'turtle',
            includeComments: true,
            prettyPrint: true,
            saveToVault: true,
            fileName: 'knowledge-graph'
        };
        this.graph = graph;
        this.namespaceManager = namespaceManager || new NamespaceManager_1.NamespaceManager();
        this.serializer = new RDFSerializer_1.RDFSerializer(this.namespaceManager);
        this.onExport = onExport;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        // Title
        contentEl.createEl('h2', { text: 'Export Knowledge Graph' });
        // Statistics
        const statsEl = contentEl.createDiv('export-stats');
        statsEl.innerHTML = `
            <div class="stat-item">
                <span class="stat-label">Triples:</span>
                <span class="stat-value">${this.graph.size()}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Subjects:</span>
                <span class="stat-value">${this.graph.subjects().size}</span>
            </div>
            <div class="stat-item">
                <span class="stat-label">Predicates:</span>
                <span class="stat-value">${this.graph.predicates().size}</span>
            </div>
        `;
        // Format selection
        new obsidian_1.Setting(contentEl)
            .setName('Export format')
            .setDesc('Choose the RDF serialization format')
            .addDropdown(dropdown => {
            dropdown
                .addOption('turtle', 'Turtle (.ttl)')
                .addOption('ntriples', 'N-Triples (.nt)')
                .addOption('jsonld', 'JSON-LD (.jsonld)')
                .addOption('rdfxml', 'RDF/XML (.rdf)')
                .setValue(this.options.format)
                .onChange(value => {
                this.options.format = value;
                this.updateFileName();
                this.updatePreview();
            });
        });
        // File name setting
        new obsidian_1.Setting(contentEl)
            .setName('File name')
            .setDesc('Name for the exported file (without extension)')
            .addText(text => {
            text
                .setPlaceholder('knowledge-graph')
                .setValue(this.options.fileName || '')
                .onChange(value => {
                this.options.fileName = value || 'knowledge-graph';
            });
        });
        // Base IRI setting
        new obsidian_1.Setting(contentEl)
            .setName('Base IRI')
            .setDesc('Optional base IRI for relative URIs')
            .addText(text => {
            text
                .setPlaceholder('https://example.org/data/')
                .setValue(this.options.baseIRI || '')
                .onChange(value => {
                this.options.baseIRI = value || undefined;
                this.updatePreview();
            });
        });
        // Options
        new obsidian_1.Setting(contentEl)
            .setName('Include comments')
            .setDesc('Add comments with metadata and statistics')
            .addToggle(toggle => {
            toggle
                .setValue(this.options.includeComments)
                .onChange(value => {
                this.options.includeComments = value;
                this.updatePreview();
            });
        });
        new obsidian_1.Setting(contentEl)
            .setName('Pretty print')
            .setDesc('Format output for readability (larger file size)')
            .addToggle(toggle => {
            toggle
                .setValue(this.options.prettyPrint)
                .onChange(value => {
                this.options.prettyPrint = value;
                this.updatePreview();
            });
        });
        new obsidian_1.Setting(contentEl)
            .setName('Save to vault')
            .setDesc('Save file to vault, or download to computer')
            .addToggle(toggle => {
            toggle
                .setValue(this.options.saveToVault)
                .onChange(value => {
                this.options.saveToVault = value;
            });
        });
        // Preview section
        const previewContainer = contentEl.createDiv('export-preview');
        previewContainer.createEl('h3', { text: 'Preview' });
        const previewEl = previewContainer.createEl('pre');
        previewEl.addClass('export-preview-content');
        // Buttons
        const buttonContainer = contentEl.createDiv('export-buttons');
        buttonContainer.addClass('modal-button-container');
        // Export button
        const exportButton = buttonContainer.createEl('button', {
            text: 'Export',
            cls: 'mod-cta'
        });
        exportButton.onclick = () => this.handleExport();
        // Cancel button
        const cancelButton = buttonContainer.createEl('button', { text: 'Cancel' });
        cancelButton.onclick = () => this.close();
        // Initial preview
        this.updatePreview();
        // Add styles
        this.addStyles();
    }
    /**
     * Update file name based on format
     */
    updateFileName() {
        if (this.options.fileName && !this.options.fileName.includes('.')) {
            // File name will get extension added during export
        }
    }
    /**
     * Update preview content
     */
    updatePreview() {
        const previewEl = this.contentEl.querySelector('.export-preview-content');
        if (!previewEl)
            return;
        try {
            // Create a small sample for preview
            const sampleGraph = this.createSampleGraph();
            const serializationOptions = {
                format: this.options.format,
                includeComments: this.options.includeComments,
                prettyPrint: this.options.prettyPrint,
                baseIRI: this.options.baseIRI,
                namespaceManager: this.namespaceManager
            };
            const result = this.serializer.serialize(sampleGraph, serializationOptions);
            if (result.isSuccess) {
                const content = result.getValue().content;
                const lines = content.split('\n');
                const preview = lines.slice(0, 10).join('\n');
                previewEl.textContent = preview + (lines.length > 10 ? '\n... (truncated)' : '');
            }
            else {
                previewEl.textContent = `Preview error: ${result.errorValue()}`;
            }
        }
        catch (error) {
            previewEl.textContent = `Preview error: ${error.message}`;
        }
    }
    /**
     * Create a small sample graph for preview
     */
    createSampleGraph() {
        const sampleTriples = this.graph.toArray().slice(0, 5);
        return new Graph_1.Graph(sampleTriples);
    }
    /**
     * Handle export action
     */
    handleExport() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const serializationOptions = {
                    format: this.options.format,
                    includeComments: this.options.includeComments,
                    prettyPrint: this.options.prettyPrint,
                    baseIRI: this.options.baseIRI,
                    namespaceManager: this.namespaceManager
                };
                const result = this.serializer.serialize(this.graph, serializationOptions);
                if (result.isFailure) {
                    new obsidian_1.Notice(`Export failed: ${result.errorValue()}`);
                    return;
                }
                const serializedData = result.getValue();
                const extension = RDFSerializer_1.RDFSerializer.getFileExtension(this.options.format);
                const fileName = `${this.options.fileName || 'knowledge-graph'}${extension}`;
                if (this.options.saveToVault) {
                    // Save to vault
                    yield this.saveToVault(serializedData.content, fileName);
                }
                else {
                    // Download to computer
                    this.downloadFile(serializedData.content, fileName);
                }
                // Call onExport callback if provided
                if (this.onExport) {
                    this.onExport({
                        content: serializedData.content,
                        fileName,
                        format: this.options.format
                    });
                }
                const message = this.options.saveToVault
                    ? `Exported ${serializedData.tripleCount} triples to ${fileName}`
                    : `Downloaded ${serializedData.tripleCount} triples as ${fileName}`;
                new obsidian_1.Notice(message);
                if ((_b = (_a = serializedData.metadata) === null || _a === void 0 ? void 0 : _a.warnings) === null || _b === void 0 ? void 0 : _b.length) {
                    new obsidian_1.Notice(`Warnings: ${serializedData.metadata.warnings.join('; ')}`, 5000);
                }
                this.close();
            }
            catch (error) {
                new obsidian_1.Notice(`Export error: ${error.message}`);
            }
        });
    }
    /**
     * Save content to vault
     */
    saveToVault(content, fileName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const filePath = `exports/${fileName}`;
            try {
                // Ensure exports folder exists
                const folder = this.app.vault.getAbstractFileByPath('exports');
                if (!folder) {
                    yield this.app.vault.createFolder('exports');
                }
                // Create or update file
                const existingFile = this.app.vault.getAbstractFileByPath(filePath);
                if (existingFile instanceof obsidian_1.TFile) {
                    yield this.app.vault.modify(existingFile, content);
                }
                else {
                    yield this.app.vault.create(filePath, content);
                }
            }
            catch (error) {
                throw new Error(`Failed to save to vault: ${error.message}`);
            }
        });
    }
    /**
     * Download file to computer
     */
    downloadFile(content, fileName) {
        const blob = new Blob([content], {
            type: RDFSerializer_1.RDFSerializer.getMimeType(this.options.format)
        });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
    /**
     * Add custom styles
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .export-stats {
                display: flex;
                gap: 20px;
                margin-bottom: 20px;
                padding: 10px;
                background: var(--background-secondary);
                border-radius: 6px;
            }
            
            .stat-item {
                display: flex;
                flex-direction: column;
                align-items: center;
            }
            
            .stat-label {
                font-size: 12px;
                color: var(--text-muted);
                margin-bottom: 2px;
            }
            
            .stat-value {
                font-size: 18px;
                font-weight: 600;
                color: var(--text-normal);
            }
            
            .export-preview {
                margin: 20px 0;
            }
            
            .export-preview-content {
                max-height: 200px;
                overflow-y: auto;
                background: var(--background-secondary);
                padding: 10px;
                border-radius: 4px;
                font-family: var(--font-monospace);
                font-size: 12px;
                white-space: pre-wrap;
                margin: 0;
            }
            
            .export-buttons {
                display: flex;
                gap: 10px;
                justify-content: flex-end;
                margin-top: 20px;
                padding-top: 20px;
                border-top: 1px solid var(--background-modifier-border);
            }
            
            .modal-button-container button {
                padding: 8px 16px;
                border-radius: 4px;
                border: 1px solid var(--background-modifier-border);
                background: var(--background-primary);
                color: var(--text-normal);
                cursor: pointer;
            }
            
            .modal-button-container button:hover {
                background: var(--background-secondary);
            }
            
            .modal-button-container button.mod-cta {
                background: var(--interactive-accent);
                color: var(--text-on-accent);
                border-color: var(--interactive-accent);
            }
            
            .modal-button-container button.mod-cta:hover {
                background: var(--interactive-accent-hover);
                border-color: var(--interactive-accent-hover);
            }
        `;
        document.head.appendChild(style);
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
exports.ExportRDFModal = ExportRDFModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,