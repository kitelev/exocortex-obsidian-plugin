{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/application/use-cases/PropertyEditingUseCase.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/application/use-cases/PropertyEditingUseCase.test.ts"],"sourcesContent":["import {\n  PropertyEditingUseCase,\n  UpdatePropertyRequest,\n  UpdatePropertyResponse,\n} from \"../../../../src/application/use-cases/PropertyEditingUseCase\";\nimport { IAssetRepository } from \"../../../../src/domain/repositories/IAssetRepository\";\nimport { Asset } from \"../../../../src/domain/entities/Asset\";\nimport { AssetId } from \"../../../../src/domain/value-objects/AssetId\";\nimport { ClassName } from \"../../../../src/domain/value-objects/ClassName\";\nimport { OntologyPrefix } from \"../../../../src/domain/value-objects/OntologyPrefix\";\nimport { Result } from \"../../../../src/domain/core/Result\";\n\ndescribe(\"PropertyEditingUseCase\", () => {\n  let useCase: PropertyEditingUseCase;\n  let mockAssetRepository: jest.Mocked<IAssetRepository>;\n  let mockPlugin: any;\n\n  beforeEach(() => {\n    // Setup mock repository\n    mockAssetRepository = {\n      save: jest.fn(),\n      findById: jest.fn(),\n      findByFilename: jest.fn(),\n      findAll: jest.fn(),\n      delete: jest.fn(),\n      exists: jest.fn(),\n      updateFrontmatterByPath: jest.fn(),\n    };\n\n    // Setup mock plugin\n    mockPlugin = {\n      findPropertiesForClass: jest.fn(),\n      findAssetsByClass: jest.fn(),\n    };\n\n    useCase = new PropertyEditingUseCase(mockAssetRepository, mockPlugin);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n    // Clear references to prevent memory leaks\n    mockAssetRepository = null as any;\n    mockPlugin = null as any;\n    useCase = null as any;\n  });\n\n  describe(\"Basic Functionality\", () => {\n    test(\"should create useCase with repository and plugin\", () => {\n      expect(useCase).toBeDefined();\n      expect(useCase.execute).toBeDefined();\n    });\n\n    test(\"should implement UseCase interface\", () => {\n      expect(typeof useCase.execute).toBe(\"function\");\n      expect(typeof useCase.getPropertiesForClass).toBe(\"function\");\n      expect(typeof useCase.getAssetsForClass).toBe(\"function\");\n    });\n\n    test(\"should accept valid dependencies in constructor\", () => {\n      const newUseCase = new PropertyEditingUseCase(\n        mockAssetRepository,\n        mockPlugin,\n      );\n      expect(newUseCase).toBeInstanceOf(PropertyEditingUseCase);\n    });\n  });\n\n  describe(\"Request Validation\", () => {\n    test(\"should fail when assetId is missing\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"\",\n        propertyName: \"test\",\n        value: \"value\",\n        propertyDefinition: {\n          propertyName: \"test\",\n          label: \"Test\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Asset ID is required\");\n    });\n\n    test(\"should fail when propertyName is missing\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id\",\n        propertyName: \"\",\n        value: \"value\",\n        propertyDefinition: {\n          propertyName: \"test\",\n          label: \"Test\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Property name is required\");\n    });\n\n    test(\"should pass validation with valid request\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"valid-id.md\",\n        propertyName: \"test\",\n        value: \"value\",\n        propertyDefinition: {\n          propertyName: \"test\",\n          label: \"Test\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should handle null assetId\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: null as any,\n        propertyName: \"test\",\n        value: \"value\",\n        propertyDefinition: {\n          propertyName: \"test\",\n          label: \"Test\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Asset ID is required\");\n    });\n\n    test(\"should handle null propertyName\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id\",\n        propertyName: null as any,\n        value: \"value\",\n        propertyDefinition: {\n          propertyName: \"test\",\n          label: \"Test\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Property name is required\");\n    });\n  });\n\n  describe(\"Property Value Validation\", () => {\n    test(\"should validate required properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id\",\n        propertyName: \"requiredProp\",\n        value: \"\",\n        propertyDefinition: {\n          propertyName: \"requiredProp\",\n          label: \"Required Property\",\n          range: \"string\",\n          isRequired: true,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Required Property is required\");\n    });\n\n    test(\"should allow empty values for non-required properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"optionalProp\",\n        value: \"\",\n        propertyDefinition: {\n          propertyName: \"optionalProp\",\n          label: \"Optional Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should validate number properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"numberProp\",\n        value: \"not-a-number\",\n        propertyDefinition: {\n          propertyName: \"numberProp\",\n          label: \"Number Property\",\n          range: \"number\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Number Property must be a number\");\n    });\n\n    test(\"should validate valid numbers\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"numberProp\",\n        value: \"42\",\n        propertyDefinition: {\n          propertyName: \"numberProp\",\n          label: \"Number Property\",\n          range: \"number\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should validate date properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"dateProp\",\n        value: \"not-a-date\",\n        propertyDefinition: {\n          propertyName: \"dateProp\",\n          label: \"Date Property\",\n          range: \"date\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Date Property must be a valid date\");\n    });\n\n    test(\"should validate valid dates\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"dateProp\",\n        value: \"2024-12-31\",\n        propertyDefinition: {\n          propertyName: \"dateProp\",\n          label: \"Date Property\",\n          range: \"date\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should validate boolean properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"boolProp\",\n        value: \"not-a-boolean\",\n        propertyDefinition: {\n          propertyName: \"boolProp\",\n          label: \"Boolean Property\",\n          range: \"boolean\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Boolean Property must be true or false\");\n    });\n\n    test(\"should validate valid booleans\", async () => {\n      const trueRequest: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"boolProp\",\n        value: true,\n        propertyDefinition: {\n          propertyName: \"boolProp\",\n          label: \"Boolean Property\",\n          range: \"boolean\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const trueResult = await useCase.execute(trueRequest);\n      expect(trueResult.isSuccess).toBe(true);\n\n      const falseRequest: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"boolProp\",\n        value: false,\n        propertyDefinition: {\n          propertyName: \"boolProp\",\n          label: \"Boolean Property\",\n          range: \"boolean\",\n          isRequired: false,\n        },\n      };\n\n      const falseResult = await useCase.execute(falseRequest);\n      expect(falseResult.isSuccess).toBe(true);\n    });\n\n    test(\"should validate enum properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"enumProp\",\n        value: \"invalid\",\n        propertyDefinition: {\n          propertyName: \"enumProp\",\n          label: \"Enum Property\",\n          range: \"enum:low,medium,high\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\n        \"Enum Property must be one of: low, medium, high\",\n      );\n    });\n\n    test(\"should validate valid enum values\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"enumProp\",\n        value: \"medium\",\n        propertyDefinition: {\n          propertyName: \"enumProp\",\n          label: \"Enum Property\",\n          range: \"enum:low,medium,high\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should validate with custom regex\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"regexProp\",\n        value: \"invalid-format\",\n        propertyDefinition: {\n          propertyName: \"regexProp\",\n          label: \"Regex Property\",\n          range: \"string\",\n          isRequired: false,\n          validation: \"^[A-Z]{3}-\\\\d{3}$\",\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Regex Property format is invalid\");\n    });\n\n    test(\"should pass custom regex validation\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"regexProp\",\n        value: \"ABC-123\",\n        propertyDefinition: {\n          propertyName: \"regexProp\",\n          label: \"Regex Property\",\n          range: \"string\",\n          isRequired: false,\n          validation: \"^[A-Z]{3}-\\\\d{3}$\",\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should handle invalid regex gracefully\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-id.md\",\n        propertyName: \"regexProp\",\n        value: \"any-value\",\n        propertyDefinition: {\n          propertyName: \"regexProp\",\n          label: \"Regex Property\",\n          range: \"string\",\n          isRequired: false,\n          validation: \"[invalid-regex\",\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true); // Should skip invalid regex validation\n    });\n  });\n\n  describe(\"Direct File Path Updates\", () => {\n    test(\"should use direct path update for file paths\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"path/to/file.md\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockAssetRepository.updateFrontmatterByPath).toHaveBeenCalledWith(\n        \"path/to/file.md\",\n        { title: \"New Title\" },\n      );\n    });\n\n    test(\"should handle direct update errors\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"path/to/file.md\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      mockAssetRepository.updateFrontmatterByPath.mockRejectedValue(\n        new Error(\"File not found\"),\n      );\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\n        \"Failed to update property: Error: File not found\",\n      );\n    });\n\n    test(\"should detect file paths correctly\", async () => {\n      const filePaths = [\n        \"file.md\",\n        \"folder/file.md\",\n        \"deep/nested/path/file.md\",\n        \"../relative/path.md\",\n        \"./current/path.md\",\n      ];\n\n      for (const filePath of filePaths) {\n        const request: UpdatePropertyRequest = {\n          assetId: filePath,\n          propertyName: \"test\",\n          value: \"value\",\n          propertyDefinition: {\n            propertyName: \"test\",\n            label: \"Test\",\n            range: \"string\",\n            isRequired: false,\n          },\n        };\n\n        mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(\n          undefined,\n        );\n\n        const result = await useCase.execute(request);\n\n        expect(result.isSuccess).toBe(true);\n        expect(\n          mockAssetRepository.updateFrontmatterByPath,\n        ).toHaveBeenCalledWith(filePath, { test: \"value\" });\n      }\n    });\n\n    test(\"should fallback to Asset ID lookup when direct update not available\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"path/to/file.md\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      // Mock repository without updateFrontmatterByPath method\n      const repoWithoutDirectUpdate = { ...mockAssetRepository };\n      delete (repoWithoutDirectUpdate as any).updateFrontmatterByPath;\n\n      const useCaseWithoutDirectUpdate = new PropertyEditingUseCase(\n        repoWithoutDirectUpdate,\n        mockPlugin,\n      );\n\n      // Mock asset creation and retrieval\n      const validUUID = \"123e4567-e89b-12d3-a456-426614174000\";\n      const assetIdResult = AssetId.create(validUUID);\n      const mockAsset = {\n        setProperty: jest.fn().mockReturnValue(Result.ok()),\n        getId: jest.fn().mockReturnValue(assetIdResult.getValue()),\n      } as any;\n\n      repoWithoutDirectUpdate.findByFilename.mockResolvedValue(mockAsset);\n      repoWithoutDirectUpdate.save.mockResolvedValue(undefined);\n\n      const result = await useCaseWithoutDirectUpdate.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(repoWithoutDirectUpdate.findByFilename).toHaveBeenCalledWith(\n        \"path/to/file.md\",\n      );\n      expect(mockAsset.setProperty).toHaveBeenCalledWith(\"title\", \"New Title\");\n    });\n  });\n\n  describe(\"Asset ID Based Updates\", () => {\n    test(\"should update asset by UUID\", async () => {\n      const validUUID = \"123e4567-e89b-12d3-a456-426614174000\";\n      const assetIdResult = AssetId.create(validUUID);\n      const mockAsset = {\n        setProperty: jest.fn().mockReturnValue(Result.ok()),\n        getId: jest.fn().mockReturnValue(assetIdResult.getValue()),\n      } as any;\n\n      mockAssetRepository.findById.mockResolvedValue(mockAsset);\n      mockAssetRepository.save.mockResolvedValue(undefined);\n\n      const request: UpdatePropertyRequest = {\n        assetId: validUUID,\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockAssetRepository.findById).toHaveBeenCalled();\n      expect(mockAsset.setProperty).toHaveBeenCalledWith(\"title\", \"New Title\");\n      expect(mockAssetRepository.save).toHaveBeenCalledWith(mockAsset);\n    });\n\n    test(\"should fallback to filename lookup when UUID lookup fails\", async () => {\n      const validUUID = \"123e4567-e89b-12d3-a456-426614174000\";\n      const assetIdResult = AssetId.create(validUUID);\n      const mockAsset = {\n        setProperty: jest.fn().mockReturnValue(Result.ok()),\n        getId: jest.fn().mockReturnValue(assetIdResult.getValue()),\n      } as any;\n\n      mockAssetRepository.findById.mockResolvedValue(null);\n      mockAssetRepository.findByFilename.mockResolvedValue(mockAsset);\n      mockAssetRepository.save.mockResolvedValue(undefined);\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"invalid-uuid\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockAssetRepository.findByFilename).toHaveBeenCalledWith(\n        \"invalid-uuid\",\n      );\n      expect(mockAsset.setProperty).toHaveBeenCalledWith(\"title\", \"New Title\");\n    });\n\n    test(\"should fail when asset not found by ID or filename\", async () => {\n      mockAssetRepository.findById.mockResolvedValue(null);\n      mockAssetRepository.findByFilename.mockResolvedValue(null);\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"nonexistent\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Asset not found: nonexistent\");\n    });\n\n    test(\"should handle repository errors during asset lookup\", async () => {\n      mockAssetRepository.findById.mockRejectedValue(\n        new Error(\"Database error\"),\n      );\n\n      const validUUID = \"123e4567-e89b-12d3-a456-426614174000\";\n      const request: UpdatePropertyRequest = {\n        assetId: validUUID,\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\n        \"Failed to update property: Error: Database error\",\n      );\n    });\n\n    test(\"should handle save errors\", async () => {\n      const validUUID = \"123e4567-e89b-12d3-a456-426614174000\";\n      const assetIdResult = AssetId.create(validUUID);\n      const mockAsset = {\n        setProperty: jest.fn().mockReturnValue(Result.ok()),\n        getId: jest.fn().mockReturnValue(assetIdResult.getValue()),\n      } as any;\n\n      mockAssetRepository.findByFilename.mockResolvedValue(mockAsset);\n      mockAssetRepository.save.mockRejectedValue(new Error(\"Save failed\"));\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test-asset\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\n        \"Failed to update property: Error: Save failed\",\n      );\n    });\n  });\n\n  describe(\"Property Value Types\", () => {\n    beforeEach(() => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n    });\n\n    test(\"should handle string values\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"description\",\n        value: \"This is a description\",\n        propertyDefinition: {\n          propertyName: \"description\",\n          label: \"Description\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toBe(\"This is a description\");\n    });\n\n    test(\"should handle numeric values\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"count\",\n        value: 42,\n        propertyDefinition: {\n          propertyName: \"count\",\n          label: \"Count\",\n          range: \"number\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toBe(42);\n    });\n\n    test(\"should handle boolean values\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"active\",\n        value: true,\n        propertyDefinition: {\n          propertyName: \"active\",\n          label: \"Active\",\n          range: \"boolean\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toBe(true);\n    });\n\n    test(\"should handle array values\", async () => {\n      const arrayValue = [\"item1\", \"item2\", \"item3\"];\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"tags\",\n        value: arrayValue,\n        propertyDefinition: {\n          propertyName: \"tags\",\n          label: \"Tags\",\n          range: \"array\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toEqual(arrayValue);\n    });\n\n    test(\"should handle object values\", async () => {\n      const objectValue = { nested: \"value\", count: 5 };\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"metadata\",\n        value: objectValue,\n        propertyDefinition: {\n          propertyName: \"metadata\",\n          label: \"Metadata\",\n          range: \"object\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toEqual(objectValue);\n    });\n\n    test(\"should handle null values for non-required properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"optional\",\n        value: null,\n        propertyDefinition: {\n          propertyName: \"optional\",\n          label: \"Optional\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toBeNull();\n    });\n\n    test(\"should handle undefined values for non-required properties\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"optional\",\n        value: undefined,\n        propertyDefinition: {\n          propertyName: \"optional\",\n          label: \"Optional\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toBeUndefined();\n    });\n  });\n\n  describe(\"Plugin Integration\", () => {\n    test(\"should get properties for class through plugin\", async () => {\n      const mockProperties = [\n        {\n          name: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: true,\n        },\n        {\n          name: \"description\",\n          label: \"Description\",\n          range: \"text\",\n          isRequired: false,\n        },\n      ];\n\n      mockPlugin.findPropertiesForClass.mockResolvedValue(mockProperties);\n\n      const result = await useCase.getPropertiesForClass(\"exo__Task\");\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue()).toEqual(mockProperties);\n      expect(mockPlugin.findPropertiesForClass).toHaveBeenCalledWith(\n        \"exo__Task\",\n      );\n    });\n\n    test(\"should handle plugin errors when getting properties\", async () => {\n      mockPlugin.findPropertiesForClass.mockRejectedValue(\n        new Error(\"Plugin error\"),\n      );\n\n      const result = await useCase.getPropertiesForClass(\"exo__Task\");\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Failed to get properties: Plugin error\");\n    });\n\n    test(\"should get assets for class through plugin\", async () => {\n      const mockAssets = [\n        { id: \"1\", title: \"Asset 1\" },\n        { id: \"2\", title: \"Asset 2\" },\n      ];\n\n      mockPlugin.findAssetsByClass.mockResolvedValue(mockAssets);\n\n      const result = await useCase.getAssetsForClass(\"exo__Task\");\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue()).toEqual(mockAssets);\n      expect(mockPlugin.findAssetsByClass).toHaveBeenCalledWith(\n        \"exo__Task\",\n        true,\n      );\n    });\n\n    test(\"should handle plugin errors when getting assets\", async () => {\n      mockPlugin.findAssetsByClass.mockRejectedValue(new Error(\"Plugin error\"));\n\n      const result = await useCase.getAssetsForClass(\"exo__Task\");\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Failed to get assets: Plugin error\");\n    });\n\n    test(\"should pass correct parameters to plugin methods\", async () => {\n      mockPlugin.findPropertiesForClass.mockResolvedValue([]);\n      mockPlugin.findAssetsByClass.mockResolvedValue([]);\n\n      await useCase.getPropertiesForClass(\"custom__Class\");\n      await useCase.getAssetsForClass(\"custom__Class\");\n\n      expect(mockPlugin.findPropertiesForClass).toHaveBeenCalledWith(\n        \"custom__Class\",\n      );\n      expect(mockPlugin.findAssetsByClass).toHaveBeenCalledWith(\n        \"custom__Class\",\n        true,\n      );\n    });\n  });\n\n  describe(\"Response Structure\", () => {\n    test(\"should return correct success response structure\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue()).toEqual({\n        success: true,\n        updatedValue: \"New Title\",\n      });\n    });\n\n    test(\"should return correct failure response structure\", async () => {\n      const request: UpdatePropertyRequest = {\n        assetId: \"\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toBe(\"Asset ID is required\");\n    });\n\n    test(\"should preserve original value in success response\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const complexValue = {\n        nested: {\n          array: [1, 2, 3],\n          string: \"test\",\n        },\n      };\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"metadata\",\n        value: complexValue,\n        propertyDefinition: {\n          propertyName: \"metadata\",\n          label: \"Metadata\",\n          range: \"object\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toEqual(complexValue);\n    });\n  });\n\n  describe(\"Edge Cases and Error Handling\", () => {\n    test(\"should handle extremely large property values\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      // Reduce size for CI memory efficiency\n      const largeSize = process.env.CI ? 10000 : 50000;\n      const largeValue = \"A\".repeat(largeSize);\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"largeField\",\n        value: largeValue,\n        propertyDefinition: {\n          propertyName: \"largeField\",\n          label: \"Large Field\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      expect(result.getValue().updatedValue).toBe(largeValue);\n\n      // Clear large string reference\n      request.value = null;\n    });\n\n    test(\"should handle special characters in property names\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const specialPropName = \"prop-with-special_chars$123\";\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: specialPropName,\n        value: \"test value\",\n        propertyDefinition: {\n          propertyName: specialPropName,\n          label: \"Special Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should handle circular references in object values\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const obj1: any = { name: \"obj1\" };\n      const obj2: any = { name: \"obj2\", ref: obj1 };\n      obj1.ref = obj2; // Create circular reference\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"circular\",\n        value: obj1,\n        propertyDefinition: {\n          propertyName: \"circular\",\n          label: \"Circular\",\n          range: \"object\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    test(\"should handle concurrent updates gracefully\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const concurrentCount = process.env.CI ? 5 : 10; // Reduce for CI\n      const requests = Array(concurrentCount)\n        .fill(null)\n        .map((_, i) => ({\n          assetId: `test${i}.md`,\n          propertyName: \"title\",\n          value: `Title ${i}`,\n          propertyDefinition: {\n            propertyName: \"title\",\n            label: \"Title\",\n            range: \"string\",\n            isRequired: false,\n          },\n        }));\n\n      const promises = requests.map((req) => useCase.execute(req));\n      const results = await Promise.all(promises);\n\n      results.forEach((result, i) => {\n        expect(result.isSuccess).toBe(true);\n        expect(result.getValue().updatedValue).toBe(`Title ${i}`);\n      });\n\n      // Clear references\n      requests.length = 0;\n      promises.length = 0;\n      results.length = 0;\n    });\n\n    test(\"should handle timeout scenarios\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockImplementation(\n        () =>\n          new Promise((_, reject) =>\n            setTimeout(() => reject(new Error(\"Timeout\")), 100),\n          ),\n      );\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Timeout\");\n    });\n\n    test(\"should handle malformed property definitions\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"test\",\n        value: \"value\",\n        propertyDefinition: {\n          propertyName: \"test\",\n          label: null as any,\n          range: undefined as any,\n          isRequired: null as any,\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      // Should handle gracefully and succeed\n      expect(result.isSuccess).toBe(true);\n    });\n  });\n\n  describe(\"Performance Tests\", () => {\n    test(\"should complete property updates within reasonable time\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const startTime = Date.now();\n\n      const request: UpdatePropertyRequest = {\n        assetId: \"test.md\",\n        propertyName: \"title\",\n        value: \"New Title\",\n        propertyDefinition: {\n          propertyName: \"title\",\n          label: \"Title\",\n          range: \"string\",\n          isRequired: false,\n        },\n      };\n\n      await useCase.execute(request);\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      expect(duration).toBeLessThan(100); // Should complete within 100ms\n    });\n\n    test(\"should handle batch updates efficiently\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const startTime = Date.now();\n      const batchSize = process.env.CI ? 10 : 25; // Reduce batch size for CI\n\n      const requests = Array(batchSize)\n        .fill(null)\n        .map((_, i) => ({\n          assetId: `test${i}.md`,\n          propertyName: \"title\",\n          value: `Title ${i}`,\n          propertyDefinition: {\n            propertyName: \"title\",\n            label: \"Title\",\n            range: \"string\",\n            isRequired: false,\n          },\n        }));\n\n      const promises = requests.map((req) => useCase.execute(req));\n      await Promise.all(promises);\n\n      // Clear references\n      requests.length = 0;\n      promises.length = 0;\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      const timeoutLimit = process.env.CI ? 2000 : 1000; // More lenient for CI\n      expect(duration).toBeLessThan(timeoutLimit);\n    });\n\n    test(\"should not accumulate memory over multiple executions\", async () => {\n      mockAssetRepository.updateFrontmatterByPath.mockResolvedValue(undefined);\n\n      const initialMemory = process.memoryUsage().heapUsed;\n      const requests: UpdatePropertyRequest[] = [];\n\n      // Reduce iterations for CI memory efficiency\n      const iterations = process.env.CI ? 10 : 50;\n\n      for (let i = 0; i < iterations; i++) {\n        const request: UpdatePropertyRequest = {\n          assetId: `test${i}.md`,\n          propertyName: \"title\",\n          value: `Title ${i}`,\n          propertyDefinition: {\n            propertyName: \"title\",\n            label: \"Title\",\n            range: \"string\",\n            isRequired: false,\n          },\n        };\n        requests.push(request);\n      }\n\n      // Execute in smaller batches to prevent memory buildup\n      const batchSize = 5;\n      for (let i = 0; i < requests.length; i += batchSize) {\n        const batch = requests.slice(i, i + batchSize);\n        await Promise.all(batch.map((req) => useCase.execute(req)));\n\n        // Clear references after each batch\n        batch.length = 0;\n      }\n\n      // Clear the requests array\n      requests.length = 0;\n\n      // Force garbage collection if possible\n      if (global.gc) {\n        global.gc();\n      }\n\n      const finalMemory = process.memoryUsage().heapUsed;\n      const memoryIncrease = finalMemory - initialMemory;\n\n      // Memory increase should be reasonable (less than 3MB in CI, 8MB locally)\n      const memoryLimit = process.env.CI ? 3 * 1024 * 1024 : 8 * 1024 * 1024;\n      expect(memoryIncrease).toBeLessThan(memoryLimit);\n    });\n  });\n});\n"],"version":3}