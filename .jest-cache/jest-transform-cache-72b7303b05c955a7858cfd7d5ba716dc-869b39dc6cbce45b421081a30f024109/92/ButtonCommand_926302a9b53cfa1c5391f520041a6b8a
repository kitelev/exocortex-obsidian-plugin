6e029c3cfc8662087bc18d822346a38d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonCommand = exports.CommandType = void 0;
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
/**
 * Types of commands that can be executed
 */
var CommandType;
(function (CommandType) {
    CommandType["CREATE_ASSET"] = "CREATE_ASSET";
    CommandType["OPEN_ASSET"] = "OPEN_ASSET";
    CommandType["DELETE_ASSET"] = "DELETE_ASSET";
    CommandType["RUN_TEMPLATE"] = "RUN_TEMPLATE";
    CommandType["EXECUTE_SEARCH"] = "EXECUTE_SEARCH";
    CommandType["TRIGGER_WORKFLOW"] = "TRIGGER_WORKFLOW";
    CommandType["CUSTOM"] = "CUSTOM";
})(CommandType = exports.CommandType || (exports.CommandType = {}));
class ButtonCommand extends Entity_1.Entity {
    constructor(props) {
        super(props);
    }
    /**
     * Factory method with validation
     */
    static create(props) {
        // Validate command name
        if (!props.name || props.name.trim().length === 0) {
            return Result_1.Result.fail('Command name cannot be empty');
        }
        // Validate parameters if input is required
        if (props.requiresInput && (!props.parameters || props.parameters.length === 0)) {
            return Result_1.Result.fail('Commands requiring input must define parameters');
        }
        // Validate each parameter
        for (const param of props.parameters) {
            if (!param.name || param.name.trim().length === 0) {
                return Result_1.Result.fail('Parameter name cannot be empty');
            }
            if (param.validation) {
                try {
                    new RegExp(param.validation);
                }
                catch (e) {
                    return Result_1.Result.fail(`Invalid validation regex for parameter ${param.name}`);
                }
            }
        }
        // Validate command-specific requirements
        if (props.type === CommandType.RUN_TEMPLATE && !props.template) {
            return Result_1.Result.fail('Template commands must specify a template');
        }
        if (props.type === CommandType.CUSTOM && !props.script) {
            return Result_1.Result.fail('Custom commands must specify a script');
        }
        return Result_1.Result.ok(new ButtonCommand(props));
    }
    // Getters
    get id() {
        return this.props.id;
    }
    get type() {
        return this.props.type;
    }
    get name() {
        return this.props.name;
    }
    get description() {
        return this.props.description;
    }
    get requiresInput() {
        return this.props.requiresInput;
    }
    get parameters() {
        return this.props.parameters;
    }
    get targetClass() {
        return this.props.targetClass;
    }
    get template() {
        return this.props.template;
    }
    get script() {
        return this.props.script;
    }
    /**
     * Validate input parameters against command definition
     */
    validateInput(input) {
        const validated = {};
        const errors = [];
        for (const param of this.parameters) {
            const value = input[param.name];
            // Check required parameters
            if (param.required && (value === undefined || value === null || value === '')) {
                errors.push(`Required parameter '${param.name}' is missing`);
                continue;
            }
            // Skip optional parameters if not provided
            if (!param.required && (value === undefined || value === null)) {
                if (param.defaultValue !== undefined) {
                    validated[param.name] = param.defaultValue;
                }
                continue;
            }
            // Type validation
            if (!this.validateParameterType(value, param.type)) {
                errors.push(`Parameter '${param.name}' must be of type ${param.type}`);
                continue;
            }
            // Custom validation
            if (param.validation) {
                const regex = new RegExp(param.validation);
                if (!regex.test(String(value))) {
                    errors.push(`Parameter '${param.name}' does not match validation pattern`);
                    continue;
                }
            }
            validated[param.name] = value;
        }
        if (errors.length > 0) {
            return Result_1.Result.fail(errors.join('; '));
        }
        return Result_1.Result.ok(validated);
    }
    /**
     * Check if command can be executed in current context
     */
    canExecute(context) {
        // Check if command is applicable to current class
        if (this.targetClass && context.currentClass !== this.targetClass) {
            return false;
        }
        // Check if command requires selection
        if (this.type === CommandType.DELETE_ASSET && !context.hasSelection) {
            return false;
        }
        return true;
    }
    /**
     * Build execution context for the command
     */
    buildExecutionContext(input) {
        const validationResult = this.validateInput(input);
        if (validationResult.isFailure) {
            return Result_1.Result.fail(validationResult.error);
        }
        const context = {
            commandId: this.id.toString(),
            commandType: this.type,
            parameters: validationResult.getValue(),
            timestamp: new Date(),
            template: this.props.template,
            script: this.props.script,
            targetClass: this.props.targetClass
        };
        return Result_1.Result.ok(context);
    }
    validateParameterType(value, type) {
        switch (type) {
            case 'string':
                return typeof value === 'string';
            case 'number':
                return typeof value === 'number' || !isNaN(Number(value));
            case 'boolean':
                return typeof value === 'boolean' || value === 'true' || value === 'false';
            case 'date':
                return !isNaN(Date.parse(String(value)));
            case 'asset':
                return typeof value === 'string' && value.startsWith('[[') && value.endsWith(']]');
            case 'array':
                return Array.isArray(value) || typeof value === 'string';
            default:
                return true;
        }
    }
}
exports.ButtonCommand = ButtonCommand;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,