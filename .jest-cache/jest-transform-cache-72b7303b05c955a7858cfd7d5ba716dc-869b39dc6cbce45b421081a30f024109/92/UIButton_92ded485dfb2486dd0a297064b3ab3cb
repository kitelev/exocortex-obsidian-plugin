10b9f83fdfdd6133a7838c5a5016cfc8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIButton = void 0;
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
class UIButton extends Entity_1.Entity {
    constructor(props) {
        super(props, props.id.toString());
    }
    generateId() {
        return this.props.id.toString();
    }
    validate() {
        if (!this.props.id) {
            throw new Error("UIButton must have a valid ID");
        }
        if (!this.props.label || this.props.label.trim().length === 0) {
            throw new Error("UIButton must have a non-empty label");
        }
        if (!this.props.commandId) {
            throw new Error("UIButton must have a valid command ID");
        }
    }
    /**
     * Factory method following DDD pattern
     */
    static create(props) {
        // Business rules validation
        if (!props.label || props.label.trim().length === 0) {
            return Result_1.Result.fail("Button label cannot be empty");
        }
        if (props.label.length > 100) {
            return Result_1.Result.fail("Button label cannot exceed 100 characters");
        }
        if (!props.commandId) {
            return Result_1.Result.fail("Button must have an associated command");
        }
        return Result_1.Result.ok(new UIButton({
            ...props,
            isEnabled: props.isEnabled ?? true,
            order: props.order ?? 0,
        }));
    }
    // Getters following encapsulation principle
    get id() {
        return this.props.id;
    }
    get label() {
        return this.props.label;
    }
    get commandId() {
        return this.props.commandId;
    }
    get order() {
        return this.props.order ?? 0;
    }
    get isEnabled() {
        return this.props.isEnabled ?? true;
    }
    get tooltip() {
        return this.props.tooltip;
    }
    /**
     * Business logic - button can be clicked only if enabled
     */
    canExecute() {
        return this.isEnabled;
    }
    /**
     * Domain event when button is clicked
     */
    click() {
        if (!this.canExecute()) {
            return Result_1.Result.fail("Button is disabled and cannot be clicked");
        }
        // Domain event would be raised here
        this.addDomainEvent({
            aggregateId: this.id.toString(),
            eventType: "ButtonClicked",
            occurredOn: new Date(),
            eventData: {
                buttonId: this.id.toString(),
                commandId: this.commandId.toString(),
                label: this.label,
            },
        });
        return Result_1.Result.ok();
    }
    /**
     * Business logic to update button state
     */
    enable() {
        this.props.isEnabled = true;
    }
    disable() {
        this.props.isEnabled = false;
    }
    updateLabel(newLabel) {
        if (!newLabel || newLabel.trim().length === 0) {
            return Result_1.Result.fail("Button label cannot be empty");
        }
        if (newLabel.length > 100) {
            return Result_1.Result.fail("Button label cannot exceed 100 characters");
        }
        this.props.label = newLabel;
        return Result_1.Result.ok();
    }
}
exports.UIButton = UIButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,