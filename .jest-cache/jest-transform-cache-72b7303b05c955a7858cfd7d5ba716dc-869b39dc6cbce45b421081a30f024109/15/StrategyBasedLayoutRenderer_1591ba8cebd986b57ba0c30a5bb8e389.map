{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/StrategyBasedLayoutRenderer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/StrategyBasedLayoutRenderer.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { ClassLayout } from \"../../domain/entities/ClassLayout\";\nimport { Result } from \"../../domain/core/Result\";\nimport { GetLayoutForClassUseCase } from \"../../application/use-cases/GetLayoutForClassUseCase\";\nimport { IClassLayoutRepository } from \"../../domain/repositories/IClassLayoutRepository\";\nimport {\n  ILayoutRenderingStrategy,\n  LayoutRenderingContext,\n} from \"../strategies/ILayoutRenderingStrategy\";\nimport { CustomLayoutRenderingStrategy } from \"../strategies/CustomLayoutRenderingStrategy\";\nimport { DefaultLayoutRenderingStrategy } from \"../strategies/DefaultLayoutRenderingStrategy\";\nimport { BlockRendererFactory } from \"../factories/BlockRendererFactory\";\nimport { PropertyRenderer } from \"../components/PropertyRenderer\";\nimport { QueryEngineService } from \"../../application/services/QueryEngineService\";\n\n/**\n * Strategy-based LayoutRenderer implementing SOLID principles\n *\n * SOLID Compliance:\n * - SRP: Single responsibility - orchestrates layout rendering strategy selection\n * - OCP: Open for extension via strategy pattern\n * - LSP: Strategies are substitutable implementations\n * - ISP: Clean interfaces segregated by concern\n * - DIP: Depends on abstractions (strategies, use cases, factories)\n *\n * Design Patterns:\n * - Strategy Pattern: Different rendering strategies\n * - Factory Pattern: Block renderer creation\n * - Use Case Pattern: Business logic orchestration\n */\nexport class StrategyBasedLayoutRenderer {\n  private readonly strategies: ILayoutRenderingStrategy[];\n  private readonly getLayoutUseCase: GetLayoutForClassUseCase;\n  private readonly blockRendererFactory: BlockRendererFactory;\n\n  constructor(\n    private readonly app: App,\n    layoutRepository: IClassLayoutRepository,\n    propertyRenderer: PropertyRenderer,\n    queryEngineService?: QueryEngineService,\n  ) {\n    // Initialize dependencies using dependency injection\n    this.getLayoutUseCase = new GetLayoutForClassUseCase(layoutRepository);\n    this.blockRendererFactory = new BlockRendererFactory(app);\n\n    // Initialize strategies in priority order (first match wins)\n    this.strategies = [\n      new CustomLayoutRenderingStrategy(this.blockRendererFactory),\n      new DefaultLayoutRenderingStrategy(this.blockRendererFactory),\n    ];\n  }\n\n  /**\n   * Production API: Render based on file metadata\n   * This is the main entry point for production code\n   */\n  async renderLayout(\n    container: HTMLElement,\n    file: TFile,\n    metadata: any,\n    dataviewApi: any,\n  ): Promise<Result<void>> {\n    try {\n      // Input validation\n      if (!container) {\n        return Result.fail(\"Container is required for rendering\");\n      }\n\n      if (!metadata?.frontmatter) {\n        return this.renderError(\n          container,\n          \"No metadata available for this file\",\n        );\n      }\n\n      // Extract class information\n      const frontmatter = metadata.frontmatter;\n      const instanceClass = frontmatter[\"exo__Instance_class\"];\n\n      if (!instanceClass) {\n        return this.renderError(container, \"No instance class defined\");\n      }\n\n      const cleanClassName = this.cleanClassName(instanceClass);\n\n      // Get layout using use case (business logic)\n      const layoutResult = await this.getLayoutUseCase.execute({\n        className: cleanClassName,\n      });\n\n      if (layoutResult.isFailure) {\n        return this.renderError(container, layoutResult.error);\n      }\n\n      const { layout, fallbackUsed } = layoutResult.getValue();\n\n      // Create rendering context\n      const context: LayoutRenderingContext = {\n        container,\n        file,\n        metadata,\n        dataviewApi,\n      };\n\n      // Strategy pattern: Find and execute appropriate strategy\n      const strategy = this.selectStrategy(layout);\n      return await strategy.render(context, layout || undefined);\n    } catch (error) {\n      return Result.fail(`Layout rendering failed: ${error}`);\n    }\n  }\n\n  /**\n   * Test API: Render ClassLayout directly\n   * Provides backward compatibility for existing tests\n   */\n  renderLayoutDirect(\n    layout: ClassLayout | null,\n    container: HTMLElement,\n  ): Result<void> {\n    try {\n      // Input validation\n      if (!container) {\n        return Result.fail(\"Container is required for rendering\");\n      }\n\n      // Handle null/undefined layout (empty render)\n      if (!layout) {\n        return Result.ok();\n      }\n\n      // Handle malformed layout objects gracefully\n      if (\n        !layout.getVisibleBlocks ||\n        typeof layout.getVisibleBlocks !== \"function\"\n      ) {\n        return Result.ok();\n      }\n\n      // Apply custom CSS class if specified\n      if ((layout as any).config?.cssClass) {\n        container.classList.add((layout as any).config.cssClass);\n      }\n\n      // Render visible blocks synchronously for test compatibility\n      const visibleBlocks = layout.getVisibleBlocks();\n\n      for (const block of visibleBlocks) {\n        this.renderBlockStructureOnly(container, block);\n      }\n\n      return Result.ok();\n    } catch (error) {\n      return Result.fail(`Direct layout rendering failed: ${error}`);\n    }\n  }\n\n  /**\n   * Strategy Pattern Implementation: Select appropriate rendering strategy\n   * Uses Chain of Responsibility pattern to find first matching strategy\n   */\n  private selectStrategy(layout: ClassLayout | null): ILayoutRenderingStrategy {\n    for (const strategy of this.strategies) {\n      if (strategy.canHandle(layout)) {\n        return strategy;\n      }\n    }\n\n    // Fallback to default strategy (should never happen due to strategy ordering)\n    // This ensures the system always has a fallback and never fails\n    return this.strategies[this.strategies.length - 1];\n  }\n\n  /**\n   * Render block structure only (for test compatibility)\n   * This creates the DOM structure without actual content rendering\n   */\n  private renderBlockStructureOnly(container: HTMLElement, block: any): void {\n    // Create block container\n    const blockContainer = document.createElement(\"div\");\n    blockContainer.className = `exocortex-block exocortex-block-${block.type}`;\n    blockContainer.setAttribute(\"data-block-id\", block.id);\n    container.appendChild(blockContainer);\n\n    // Add block header if title exists\n    if (block.title) {\n      const header = document.createElement(\"h3\");\n      header.textContent = block.title;\n      header.className = \"exocortex-block-header\";\n      blockContainer.appendChild(header);\n\n      // Add collapse toggle if collapsible\n      if (block.isCollapsible) {\n        header.classList.add(\"is-collapsible\");\n        header.addEventListener(\"click\", () => {\n          blockContainer.classList.toggle(\"is-collapsed\");\n        });\n      }\n    }\n\n    // Create block content container (empty for tests)\n    const blockContent = document.createElement(\"div\");\n    blockContent.className = \"exocortex-block-content\";\n    blockContainer.appendChild(blockContent);\n  }\n\n  /**\n   * Error handling utility\n   */\n  private renderError(container: HTMLElement, error: string): Result<void> {\n    container.createEl(\"div\", {\n      text: `Layout Error: ${error}`,\n      cls: \"exocortex-error notice-error\",\n    });\n    return Result.fail(error);\n  }\n\n  /**\n   * Utility for cleaning class names from Obsidian wiki links\n   */\n  private cleanClassName(className: any): string {\n    if (!className) return \"\";\n    const str = Array.isArray(className) ? className[0] : className;\n    return str?.toString().replace(/\\[\\[|\\]\\]/g, \"\") || \"\";\n  }\n\n  // Extension points for Open-Closed Principle compliance\n\n  /**\n   * Add new rendering strategy (Open for extension)\n   */\n  addStrategy(\n    strategy: ILayoutRenderingStrategy,\n    priority: \"first\" | \"last\" = \"first\",\n  ): void {\n    if (priority === \"first\") {\n      this.strategies.unshift(strategy);\n    } else {\n      this.strategies.push(strategy);\n    }\n  }\n\n  /**\n   * Remove rendering strategy\n   */\n  removeStrategy(strategyClass: any): boolean {\n    const index = this.strategies.findIndex(\n      (s) => s.constructor === strategyClass,\n    );\n    if (index >= 0) {\n      this.strategies.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get active strategies (for debugging/monitoring)\n   */\n  getActiveStrategies(): string[] {\n    return this.strategies.map((s) => s.constructor.name);\n  }\n\n  /**\n   * Get block renderer factory (for testing)\n   */\n  getBlockRendererFactory(): BlockRendererFactory {\n    return this.blockRendererFactory;\n  }\n\n  /**\n   * Health check method\n   */\n  isHealthy(): boolean {\n    return this.strategies.length > 0 && this.blockRendererFactory !== null;\n  }\n}\n"],"version":3}