71b19b30441407e63c30b360d0b7e6e6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BacklinksBlockRenderer = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
class BacklinksBlockRenderer {
    constructor(app) {
        this.app = app;
    }
    render(container, config, file, dv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const backlinksConfig = config;
            // Get backlinks for current file
            const backlinks = this.app.metadataCache.getBacklinksForFile(file);
            if (!backlinks || !backlinks.data || backlinks.data.size === 0) {
                container.createEl('p', {
                    text: 'No backlinks found',
                    cls: 'exocortex-empty'
                });
                return;
            }
            // Convert backlinks to file array
            let backlinkFiles = [];
            for (const [path] of backlinks.data) {
                const backlinkFile = this.app.vault.getAbstractFileByPath(path);
                if (backlinkFile instanceof obsidian_1.TFile) {
                    backlinkFiles.push(backlinkFile);
                }
            }
            // Filter by class if specified
            if (backlinksConfig.filterByClass) {
                const targetClass = this.cleanClassName(backlinksConfig.filterByClass);
                backlinkFiles = backlinkFiles.filter(f => {
                    var _a;
                    const metadata = this.app.metadataCache.getFileCache(f);
                    const instanceClass = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter) === null || _a === void 0 ? void 0 : _a['exo__Instance_class'];
                    return this.cleanClassName(instanceClass) === targetClass;
                });
            }
            // Limit results if specified
            const totalCount = backlinkFiles.length;
            if (backlinksConfig.maxResults && backlinksConfig.maxResults > 0) {
                backlinkFiles = backlinkFiles.slice(0, backlinksConfig.maxResults);
            }
            // Show count
            const info = container.createDiv({ cls: 'exocortex-backlinks-info' });
            info.createEl('span', {
                text: `${totalCount} backlink${totalCount !== 1 ? 's' : ''}${backlinkFiles.length < totalCount ? `, showing ${backlinkFiles.length}` : ''}`,
                cls: 'exocortex-backlinks-count'
            });
            if (backlinkFiles.length === 0) {
                container.createEl('p', {
                    text: 'No matching backlinks found',
                    cls: 'exocortex-empty'
                });
                return;
            }
            // Group by class if specified
            if (backlinksConfig.groupByClass) {
                this.renderGroupedBacklinks(container, backlinkFiles);
            }
            else {
                this.renderFlatBacklinks(container, backlinkFiles);
            }
        });
    }
    renderFlatBacklinks(container, files) {
        const list = container.createEl('ul', { cls: 'exocortex-backlinks-list' });
        files.forEach(file => {
            const metadata = this.app.metadataCache.getFileCache(file);
            const frontmatter = (metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter) || {};
            const item = list.createEl('li');
            const link = item.createEl('a', {
                text: frontmatter['exo__Asset_label'] || file.basename,
                href: file.path,
                cls: 'internal-link'
            });
            // Add class info
            const instanceClass = frontmatter['exo__Instance_class'];
            if (instanceClass) {
                const classSpan = item.createEl('span', {
                    text: ` (${this.cleanClassName(instanceClass)})`,
                    cls: 'exocortex-class-info'
                });
            }
        });
    }
    renderGroupedBacklinks(container, files) {
        // Group files by class
        const groups = new Map();
        files.forEach(file => {
            var _a;
            const metadata = this.app.metadataCache.getFileCache(file);
            const instanceClass = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter) === null || _a === void 0 ? void 0 : _a['exo__Instance_class'];
            const className = this.cleanClassName(instanceClass) || 'Unclassified';
            if (!groups.has(className)) {
                groups.set(className, []);
            }
            groups.get(className).push(file);
        });
        // Sort groups by name
        const sortedGroups = Array.from(groups.entries())
            .sort(([a], [b]) => a.localeCompare(b));
        // Render each group
        sortedGroups.forEach(([className, groupFiles]) => {
            const groupContainer = container.createDiv({ cls: 'exocortex-backlinks-group' });
            // Group header
            groupContainer.createEl('h4', {
                text: `${className} (${groupFiles.length})`,
                cls: 'backlinks-group-header'
            });
            // Group content
            const list = groupContainer.createEl('ul', { cls: 'exocortex-backlinks-list' });
            groupFiles.forEach(file => {
                const metadata = this.app.metadataCache.getFileCache(file);
                const frontmatter = (metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter) || {};
                const item = list.createEl('li');
                item.createEl('a', {
                    text: frontmatter['exo__Asset_label'] || file.basename,
                    href: file.path,
                    cls: 'internal-link'
                });
            });
        });
    }
    cleanClassName(className) {
        if (!className)
            return '';
        const str = Array.isArray(className) ? className[0] : className;
        return (str === null || str === void 0 ? void 0 : str.toString().replace(/\[\[|\]\]/g, '')) || '';
    }
}
exports.BacklinksBlockRenderer = BacklinksBlockRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9yZW5kZXJlcnMvQmFja2xpbmtzQmxvY2tSZW5kZXJlci50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUNBQXNDO0FBR3RDLE1BQWEsc0JBQXNCO0lBQy9CLFlBQW9CLEdBQVE7UUFBUixRQUFHLEdBQUgsR0FBRyxDQUFLO0lBQUcsQ0FBQztJQUUxQixNQUFNLENBQ1IsU0FBc0IsRUFDdEIsTUFBVyxFQUNYLElBQVcsRUFDWCxFQUFPOztZQUVQLE1BQU0sZUFBZSxHQUFHLE1BQThCLENBQUM7WUFFdkQsaUNBQWlDO1lBQ2pDLE1BQU0sU0FBUyxHQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU1RSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7Z0JBQzVELFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO29CQUNwQixJQUFJLEVBQUUsb0JBQW9CO29CQUMxQixHQUFHLEVBQUUsaUJBQWlCO2lCQUN6QixDQUFDLENBQUM7Z0JBQ0gsT0FBTzthQUNWO1lBRUQsa0NBQWtDO1lBQ2xDLElBQUksYUFBYSxHQUFZLEVBQUUsQ0FBQztZQUNoQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxFQUFFO2dCQUNqQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDaEUsSUFBSSxZQUFZLFlBQVksZ0JBQUssRUFBRTtvQkFDL0IsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztpQkFDcEM7YUFDSjtZQUVELCtCQUErQjtZQUMvQixJQUFJLGVBQWUsQ0FBQyxhQUFh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QWU7aUJBQ3ZCLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU8sY0FBYyxDQUFDLFNBQWM7UUFDakMsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNoRSxPQUFPLENBQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxLQUFJLEVBQUUsQ0FBQztJQUMzRCxDQUFDO0NBQ0o7QUFsSkQsd0RBa0pDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9wcmVzZW50YXRpb24vcmVuZGVyZXJzL0JhY2tsaW5rc0Jsb2NrUmVuZGVyZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEJhY2tsaW5rc0Jsb2NrQ29uZmlnIH0gZnJvbSAnLi4vLi4vZG9tYWluL2VudGl0aWVzL0xheW91dEJsb2NrJztcblxuZXhwb3J0IGNsYXNzIEJhY2tsaW5rc0Jsb2NrUmVuZGVyZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwOiBBcHApIHt9XG5cbiAgICBhc3luYyByZW5kZXIoXG4gICAgICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgICAgIGNvbmZpZzogYW55LFxuICAgICAgICBmaWxlOiBURmlsZSxcbiAgICAgICAgZHY6IGFueVxuICAgICk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBiYWNrbGlua3NDb25maWcgPSBjb25maWcgYXMgQmFja2xpbmtzQmxvY2tDb25maWc7XG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgYmFja2xpbmtzIGZvciBjdXJyZW50IGZpbGVcbiAgICAgICAgY29uc3QgYmFja2xpbmtzID0gKHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUgYXMgYW55KS5nZXRCYWNrbGlua3NGb3JGaWxlKGZpbGUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFiYWNrbGlua3MgfHwgIWJhY2tsaW5rcy5kYXRhIHx8IGJhY2tsaW5rcy5kYXRhLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgXG4gICAgICAgICAgICAgICAgdGV4dDogJ05vIGJhY2tsaW5rcyBmb3VuZCcsXG4gICAgICAgICAgICAgICAgY2xzOiAnZXhvY29ydGV4LWVtcHR5J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGJhY2tsaW5rcyB0byBmaWxlIGFycmF5XG4gICAgICAgIGxldCBiYWNrbGlua0ZpbGVzOiBURmlsZVtdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgW3BhdGhdIG9mIGJhY2tsaW5rcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBiYWNrbGlua0ZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG4gICAgICAgICAgICBpZiAoYmFja2xpbmtGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgICAgICBiYWNrbGlua0ZpbGVzLnB1c2goYmFja2xpbmtGaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbHRlciBieSBjbGFzcyBpZiBzcGVjaWZpZWRcbiAgICAgICAgaWYgKGJhY2tsaW5rc0NvbmZpZy5maWx0ZXJCeUNsYXNzKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRDbGFzcyA9IHRoaXMuY2xlYW5DbGFzc05hbWUoYmFja2xpbmtzQ29uZmlnLmZpbHRlckJ5Q2xhc3MpO1xuICAgICAgICAgICAgYmFja2xpbmtGaWxlcyA9IGJhY2tsaW5rRmlsZXMuZmlsdGVyKGYgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZik7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VDbGFzcyA9IG1ldGFkYXRhPy5mcm9udG1hdHRlcj8uWydleG9fX0luc3RhbmNlX2NsYXNzJ107XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYW5DbGFzc05hbWUoaW5zdGFuY2VDbGFzcykgPT09IHRhcmdldENsYXNzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMaW1pdCByZXN1bHRzIGlmIHNwZWNpZmllZFxuICAgICAgICBjb25zdCB0b3RhbENvdW50ID0gYmFja2xpbmtGaWxlcy5sZW5ndGg7XG4gICAgICAgIGlmIChiYWNrbGlua3NDb25maWcubWF4UmVzdWx0cyAmJiBiYWNrbGlua3NDb25maWcubWF4UmVzdWx0cyA+IDApIHtcbiAgICAgICAgICAgIGJhY2tsaW5rRmlsZXMgPSBiYWNrbGlua0ZpbGVzLnNsaWNlKDAsIGJhY2tsaW5rc0NvbmZpZy5tYXhSZXN1bHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgY291bnRcbiAgICAgICAgY29uc3QgaW5mbyA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdleG9jb3J0ZXgtYmFja2xpbmtzLWluZm8nIH0pO1xuICAgICAgICBpbmZvLmNyZWF0ZUVsKCdzcGFuJywgeyBcbiAgICAgICAgICAgIHRleHQ6IGAke3RvdGFsQ291bnR9IGJhY2tsaW5rJHt0b3RhbENvdW50ICE9PSAxID8gJ3MnIDogJyd9JHtiYWNrbGlua0ZpbGVzLmxlbmd0aCA8IHRvdGFsQ291bnQgPyBgLCBzaG93aW5nICR7YmFja2xpbmtGaWxlcy5sZW5ndGh9YCA6ICcnfWAsXG4gICAgICAgICAgICBjbHM6ICdleG9jb3J0ZXgtYmFja2xpbmtzLWNvdW50J1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYmFja2xpbmtGaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5jcmVhdGVFbCgncCcsIHsgXG4gICAgICAgICAgICAgICAgdGV4dDogJ05vIG1hdGNoaW5nIGJhY2tsaW5rcyBmb3VuZCcsXG4gICAgICAgICAgICAgICAgY2xzOiAnZXhvY29ydGV4LWVtcHR5J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHcm91cCBieSBjbGFzcyBpZiBzcGVjaWZpZWRcbiAgICAgICAgaWYgKGJhY2tsaW5rc0NvbmZpZy5ncm91cEJ5Q2xhc3MpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyR3JvdXBlZEJhY2tsaW5rcyhjb250YWluZXIsIGJhY2tsaW5rRmlsZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJGbGF0QmFja2xpbmtzKGNvbnRhaW5lciwgYmFja2xpbmtGaWxlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckZsYXRCYWNrbGlua3MoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgZmlsZXM6IFRGaWxlW10pOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IGNvbnRhaW5lci5jcmVhdGVFbCgndWwnLCB7IGNsczogJ2V4b2NvcnRleC1iYWNrbGlua3MtbGlzdCcgfSk7XG4gICAgICAgIFxuICAgICAgICBmaWxlcy5mb3JFYWNoKGZpbGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gbWV0YWRhdGE/LmZyb250bWF0dGVyIHx8IHt9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdC5jcmVhdGVFbCgnbGknKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBpdGVtLmNyZWF0ZUVsKCdhJywge1xuICAgICAgICAgICAgICAgIHRleHQ6IGZyb250bWF0dGVyWydleG9fX0Fzc2V0X2xhYmVsJ10gfHwgZmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgICAgICBocmVmOiBmaWxlLnBhdGgsXG4gICAgICAgICAgICAgICAgY2xzOiAnaW50ZXJuYWwtbGluaydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgY2xhc3MgaW5mb1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VDbGFzcyA9IGZyb250bWF0dGVyWydleG9fX0luc3RhbmNlX2NsYXNzJ107XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2VDbGFzcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzU3BhbiA9IGl0ZW0uY3JlYXRlRWwoJ3NwYW4nLCB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGAgKCR7dGhpcy5jbGVhbkNsYXNzTmFtZShpbnN0YW5jZUNsYXNzKX0pYCxcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnZXhvY29ydGV4LWNsYXNzLWluZm8nXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyR3JvdXBlZEJhY2tsaW5rcyhjb250YWluZXI6IEhUTUxFbGVtZW50LCBmaWxlczogVEZpbGVbXSk6IHZvaWQge1xuICAgICAgICAvLyBHcm91cCBmaWxlcyBieSBjbGFzc1xuICAgICAgICBjb25zdCBncm91cHMgPSBuZXcgTWFwPHN0cmluZywgVEZpbGVbXT4oKTtcbiAgICAgICAgXG4gICAgICAgIGZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICAgICAgICAgICAgY29uc3QgaW5zdGFuY2VDbGFzcyA9IG1ldGFkYXRhPy5mcm9udG1hdHRlcj8uWydleG9fX0luc3RhbmNlX2NsYXNzJ107XG4gICAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSB0aGlzLmNsZWFuQ2xhc3NOYW1lKGluc3RhbmNlQ2xhc3MpIHx8ICdVbmNsYXNzaWZpZWQnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIWdyb3Vwcy5oYXMoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgICAgIGdyb3Vwcy5zZXQoY2xhc3NOYW1lLCBbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncm91cHMuZ2V0KGNsYXNzTmFtZSkhLnB1c2goZmlsZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNvcnQgZ3JvdXBzIGJ5IG5hbWVcbiAgICAgICAgY29uc3Qgc29ydGVkR3JvdXBzID0gQXJyYXkuZnJvbShncm91cHMuZW50cmllcygpKVxuICAgICAgICAgICAgLnNvcnQoKFthXSwgW2JdKSA9PiBhLmxvY2FsZUNvbXBhcmUoYikpO1xuXG4gICAgICAgIC8vIFJlbmRlciBlYWNoIGdyb3VwXG4gICAgICAgIHNvcnRlZEdyb3Vwcy5mb3JFYWNoKChbY2xhc3NOYW1lLCBncm91cEZpbGVzXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3JvdXBDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnZXhvY29ydGV4LWJhY2tsaW5rcy1ncm91cCcgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdyb3VwIGhlYWRlclxuICAgICAgICAgICAgZ3JvdXBDb250YWluZXIuY3JlYXRlRWwoJ2g0Jywge1xuICAgICAgICAgICAgICAgIHRleHQ6IGAke2NsYXNzTmFtZX0gKCR7Z3JvdXBGaWxlcy5sZW5ndGh9KWAsXG4gICAgICAgICAgICAgICAgY2xzOiAnYmFja2xpbmtzLWdyb3VwLWhlYWRlcidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHcm91cCBjb250ZW50XG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gZ3JvdXBDb250YWluZXIuY3JlYXRlRWwoJ3VsJywgeyBjbHM6ICdleG9jb3J0ZXgtYmFja2xpbmtzLWxpc3QnIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBncm91cEZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgICAgICBjb25zdCBmcm9udG1hdHRlciA9IG1ldGFkYXRhPy5mcm9udG1hdHRlciB8fCB7fTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdC5jcmVhdGVFbCgnbGknKTtcbiAgICAgICAgICAgICAgICBpdGVtLmNyZWF0ZUVsKCdhJywge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBmcm9udG1hdHRlclsnZXhvX19Bc3NldF9sYWJlbCddIHx8IGZpbGUuYmFzZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGhyZWY6IGZpbGUucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgY2xzOiAnaW50ZXJuYWwtbGluaydcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNsZWFuQ2xhc3NOYW1lKGNsYXNzTmFtZTogYW55KTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCFjbGFzc05hbWUpIHJldHVybiAnJztcbiAgICAgICAgY29uc3Qgc3RyID0gQXJyYXkuaXNBcnJheShjbGFzc05hbWUpID8gY2xhc3NOYW1lWzBdIDogY2xhc3NOYW1lO1xuICAgICAgICByZXR1cm4gc3RyPy50b1N0cmluZygpLnJlcGxhY2UoL1xcW1xcW3xcXF1cXF0vZywgJycpIHx8ICcnO1xuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=