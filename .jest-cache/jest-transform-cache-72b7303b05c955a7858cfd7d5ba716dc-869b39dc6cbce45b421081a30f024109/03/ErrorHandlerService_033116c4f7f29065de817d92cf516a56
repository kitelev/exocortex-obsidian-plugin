fefcd3b07aec779510827bf5c2c0ad68
"use strict";

/* istanbul ignore next */
function cov_1v56sid9m0() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/ErrorHandlerService.ts";
  var hash = "b9074ac2b3bce9fcfa28e98fd2dbcbb9333c8c92";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/ErrorHandlerService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 70
        }
      },
      "4": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "5": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 68
        }
      },
      "6": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 31
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 30,
          column: 10
        }
      },
      "10": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 34
        }
      },
      "11": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 34
        }
      },
      "12": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 41
        }
      },
      "13": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 138
        }
      },
      "14": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "15": {
        start: {
          line: 38,
          column: 30
        },
        end: {
          line: 38,
          column: 40
        }
      },
      "16": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "17": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "18": {
        start: {
          line: 42,
          column: 20
        },
        end: {
          line: 42,
          column: 76
        }
      },
      "19": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "20": {
        start: {
          line: 45,
          column: 20
        },
        end: {
          line: 45,
          column: 76
        }
      },
      "21": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "22": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 52,
          column: 17
        }
      },
      "23": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 148
        }
      },
      "24": {
        start: {
          line: 53,
          column: 16
        },
        end: {
          line: 53,
          column: 65
        }
      },
      "25": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "26": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "27": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 59,
          column: 17
        }
      },
      "28": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 58,
          column: 44
        }
      },
      "29": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 62,
          column: 17
        }
      },
      "30": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 56
        }
      },
      "31": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 63,
          column: 44
        }
      },
      "32": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 66,
          column: 17
        }
      },
      "33": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 57
        }
      },
      "34": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 68
        }
      },
      "35": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "36": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 81,
          column: 30
        }
      },
      "37": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 59
        }
      },
      "38": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "39": {
        start: {
          line: 88,
          column: 35
        },
        end: {
          line: 88,
          column: 57
        }
      },
      "40": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 54
        }
      },
      "41": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 92,
          column: 13
        }
      },
      "42": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 91,
          column: 45
        }
      },
      "43": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 94,
          column: 94
        }
      },
      "44": {
        start: {
          line: 94,
          column: 54
        },
        end: {
          line: 94,
          column: 59
        }
      },
      "45": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 49
        }
      },
      "46": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 40
        }
      },
      "47": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 61
        }
      },
      "48": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 61
        }
      },
      "49": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 44
        }
      },
      "50": {
        start: {
          line: 105,
          column: 25
        },
        end: {
          line: 105,
          column: 57
        }
      },
      "51": {
        start: {
          line: 106,
          column: 27
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "52": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "53": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 49
        }
      },
      "54": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 22
        }
      },
      "55": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 48
        }
      },
      "56": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 22
        }
      },
      "57": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 48
        }
      },
      "58": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 22
        }
      },
      "59": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 47
        }
      },
      "60": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "61": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 31
        }
      },
      "62": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 30
        }
      },
      "63": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 30
        }
      },
      "64": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 29
        }
      },
      "65": {
        start: {
          line: 135,
          column: 22
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "66": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 146,
          column: 9
        }
      },
      "67": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "68": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 101
        }
      },
      "69": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 31
        }
      },
      "70": {
        start: {
          line: 150,
          column: 25
        },
        end: {
          line: 150,
          column: 69
        }
      },
      "71": {
        start: {
          line: 151,
          column: 24
        },
        end: {
          line: 151,
          column: 54
        }
      },
      "72": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "73": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "74": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 29
        }
      },
      "75": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 28
        }
      },
      "76": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 28
        }
      },
      "77": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 28
        }
      },
      "78": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 28
        }
      },
      "79": {
        start: {
          line: 169,
          column: 22
        },
        end: {
          line: 169,
          column: 56
        }
      },
      "80": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "81": {
        start: {
          line: 171,
          column: 34
        },
        end: {
          line: 171,
          column: 54
        }
      },
      "82": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 55
        }
      },
      "83": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 23
        }
      },
      "84": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 41
        }
      },
      "85": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "86": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 36
        }
      },
      "87": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "88": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 186,
          column: 13
        }
      },
      "89": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 23
        }
      },
      "90": {
        start: {
          line: 187,
          column: 38
        },
        end: {
          line: 187,
          column: 113
        }
      },
      "91": {
        start: {
          line: 187,
          column: 66
        },
        end: {
          line: 187,
          column: 112
        }
      },
      "92": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "93": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 195,
          column: 17
        }
      },
      "94": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 61
        }
      },
      "95": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 93
        }
      },
      "96": {
        start: {
          line: 194,
          column: 20
        },
        end: {
          line: 194,
          column: 74
        }
      },
      "97": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 52
        }
      },
      "98": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 38
        }
      },
      "99": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 31
        }
      },
      "100": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 207,
          column: 37
        }
      },
      "101": {
        start: {
          line: 210,
          column: 25
        },
        end: {
          line: 210,
          column: 69
        }
      },
      "102": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 42
        }
      },
      "103": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 60
        }
      },
      "104": {
        start: {
          line: 217,
          column: 0
        },
        end: {
          line: 217,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 37,
            column: 55
          },
          end: {
            line: 37,
            column: 56
          }
        },
        loc: {
          start: {
            line: 37,
            column: 68
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 37
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 31
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 85
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 94,
            column: 44
          },
          end: {
            line: 94,
            column: 45
          }
        },
        loc: {
          start: {
            line: 94,
            column: 54
          },
          end: {
            line: 94,
            column: 59
          }
        },
        line: 94
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 103,
            column: 5
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        loc: {
          start: {
            line: 104,
            column: 20
          },
          end: {
            line: 120,
            column: 5
          }
        },
        line: 104
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        loc: {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 121
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 33
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 149,
            column: 4
          },
          end: {
            line: 149,
            column: 5
          }
        },
        loc: {
          start: {
            line: 149,
            column: 32
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 149
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 5
          }
        },
        loc: {
          start: {
            line: 154,
            column: 38
          },
          end: {
            line: 167,
            column: 5
          }
        },
        line: 154
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 30
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 168
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 24
          },
          end: {
            line: 181,
            column: 5
          }
        },
        line: 176
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 27
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 182
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 183,
            column: 55
          },
          end: {
            line: 183,
            column: 56
          }
        },
        loc: {
          start: {
            line: 183,
            column: 68
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 183
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 187,
            column: 61
          },
          end: {
            line: 187,
            column: 62
          }
        },
        loc: {
          start: {
            line: 187,
            column: 66
          },
          end: {
            line: 187,
            column: 112
          }
        },
        line: 187
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 17
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 199
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 22
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 202
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 205,
            column: 4
          },
          end: {
            line: 205,
            column: 5
          }
        },
        loc: {
          start: {
            line: 205,
            column: 19
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 205
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 26
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 209
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 24
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 213
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 16
          },
          end: {
            line: 10,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 10,
            column: 26
          },
          end: {
            line: 10,
            column: 28
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        }, {
          start: {
            line: 44,
            column: 21
          },
          end: {
            line: 49,
            column: 17
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 21
          },
          end: {
            line: 49,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 21
          },
          end: {
            line: 49,
            column: 17
          }
        }, {
          start: {
            line: 47,
            column: 21
          },
          end: {
            line: 49,
            column: 17
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 52,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 52,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 59,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 16
          },
          end: {
            line: 62,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 16
          },
          end: {
            line: 66,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 64,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 64,
            column: 44
          }
        }, {
          start: {
            line: 64,
            column: 48
          },
          end: {
            line: 64,
            column: 68
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 80,
            column: 42
          },
          end: {
            line: 80,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 75
          },
          end: {
            line: 80,
            column: 96
          }
        }, {
          start: {
            line: 80,
            column: 99
          },
          end: {
            line: 80,
            column: 120
          }
        }],
        line: 80
      },
      "10": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 96,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "11": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 92,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "12": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 110,
            column: 22
          }
        }, {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 22
          }
        }, {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 22
          }
        }, {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 118,
            column: 47
          }
        }],
        line: 107
      },
      "13": {
        loc: {
          start: {
            line: 122,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 57
          }
        }, {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 125,
            column: 31
          }
        }, {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 127,
            column: 30
          }
        }, {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 129,
            column: 30
          }
        }, {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 131,
            column: 29
          }
        }],
        line: 122
      },
      "14": {
        loc: {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 146,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 143,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 143,
            column: 58
          }
        }, {
          start: {
            line: 143,
            column: 62
          },
          end: {
            line: 143,
            column: 94
          }
        }],
        line: 143
      },
      "17": {
        loc: {
          start: {
            line: 155,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 156,
            column: 12
          },
          end: {
            line: 157,
            column: 29
          }
        }, {
          start: {
            line: 158,
            column: 12
          },
          end: {
            line: 159,
            column: 28
          }
        }, {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 161,
            column: 28
          }
        }, {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 163,
            column: 28
          }
        }, {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 165,
            column: 28
          }
        }],
        line: 155
      },
      "18": {
        loc: {
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 8
          },
          end: {
            line: 173,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "19": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 170,
            column: 29
          }
        }, {
          start: {
            line: 170,
            column: 33
          },
          end: {
            line: 170,
            column: 61
          }
        }],
        line: 170
      },
      "20": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "21": {
        loc: {
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 186,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "22": {
        loc: {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 184,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 184,
            column: 34
          }
        }, {
          start: {
            line: 184,
            column: 38
          },
          end: {
            line: 184,
            column: 68
          }
        }],
        line: 184
      },
      "23": {
        loc: {
          start: {
            line: 187,
            column: 66
          },
          end: {
            line: 187,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 66
          },
          end: {
            line: 187,
            column: 78
          }
        }, {
          start: {
            line: 187,
            column: 82
          },
          end: {
            line: 187,
            column: 100
          }
        }, {
          start: {
            line: 187,
            column: 104
          },
          end: {
            line: 187,
            column: 112
          }
        }],
        line: 187
      },
      "24": {
        loc: {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "25": {
        loc: {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 188,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 188,
            column: 33
          }
        }, {
          start: {
            line: 188,
            column: 37
          },
          end: {
            line: 188,
            column: 61
          }
        }],
        line: 188
      },
      "26": {
        loc: {
          start: {
            line: 211,
            column: 15
          },
          end: {
            line: 211,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 211,
            column: 15
          },
          end: {
            line: 211,
            column: 35
          }
        }, {
          start: {
            line: 211,
            column: 39
          },
          end: {
            line: 211,
            column: 41
          }
        }],
        line: 211
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0, 0, 0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/ErrorHandlerService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/ErrorHandlerService.ts"],
      sourcesContent: ["import { ExocortexError, ErrorSeverity, ErrorCategory, FixSuggestion, ErrorBuilder } from '../../domain/errors/ExocortexError';\nimport { ErrorAnalyzer } from '../../domain/errors/ErrorAnalyzer';\nimport { EnhancedResult } from '../../domain/core/EnhancedResult';\nimport { Notice } from 'obsidian';\n\nexport interface ErrorHandlerOptions {\n    showUserNotification?: boolean;\n    logToConsole?: boolean;\n    trackMetrics?: boolean;\n    autoRecover?: boolean;\n}\n\nexport interface ErrorMetrics {\n    totalErrors: number;\n    errorsBySeverity: Record<ErrorSeverity, number>;\n    errorsByCategory: Record<ErrorCategory, number>;\n    averageResolutionTime: number;\n    lastError?: ExocortexError;\n}\n\nexport class ErrorHandlerService {\n    private errorHistory: ExocortexError[] = [];\n    private errorMetrics: ErrorMetrics = {\n        totalErrors: 0,\n        errorsBySeverity: {\n            [ErrorSeverity.CRITICAL]: 0,\n            [ErrorSeverity.ERROR]: 0,\n            [ErrorSeverity.WARNING]: 0,\n            [ErrorSeverity.INFO]: 0\n        },\n        errorsByCategory: {\n            [ErrorCategory.SYNTAX]: 0,\n            [ErrorCategory.SEMANTIC]: 0,\n            [ErrorCategory.VALIDATION]: 0,\n            [ErrorCategory.SYSTEM]: 0,\n            [ErrorCategory.NETWORK]: 0,\n            [ErrorCategory.PERMISSION]: 0\n        },\n        averageResolutionTime: 0\n    };\n    private resolutionTimes: number[] = [];\n    private maxHistorySize = 100;\n    private errorStartTimes = new Map<string, number>();\n\n    constructor(private options: ErrorHandlerOptions = {}) {\n        this.options = {\n            showUserNotification: true,\n            logToConsole: true,\n            trackMetrics: true,\n            autoRecover: false,\n            ...options\n        };\n    }\n\n    async handleError(error: Error | ExocortexError | string, context?: Partial<ExocortexError['context']>): Promise<EnhancedResult<void>> {\n        const startTime = Date.now();\n        \n        try {\n            let exoError: ExocortexError;\n\n            if (typeof error === 'string') {\n                exoError = ErrorAnalyzer.analyze(error);\n            } else if (error instanceof Error) {\n                exoError = ErrorAnalyzer.analyze(error);\n            } else {\n                exoError = error;\n            }\n\n            if (context) {\n                exoError = {\n                    ...exoError,\n                    context: {\n                        ...exoError.context,\n                        ...context\n                    }\n                };\n            }\n\n            this.errorStartTimes.set(exoError.id, startTime);\n\n            if (this.options.trackMetrics) {\n                this.updateMetrics(exoError);\n            }\n\n            if (this.options.logToConsole) {\n                this.logError(exoError);\n            }\n\n            if (this.options.showUserNotification) {\n                this.showUserNotification(exoError);\n            }\n\n            this.addToHistory(exoError);\n\n            if (this.options.autoRecover && exoError.recoverable) {\n                await this.attemptRecovery(exoError);\n            }\n\n            return EnhancedResult.okEnhanced();\n        } catch (handlingError) {\n            console.error('Error in error handler:', handlingError);\n            return EnhancedResult.failEnhanced(\n                ErrorBuilder.create()\n                    .withTitle('Error Handler Failed')\n                    .withMessage('Failed to handle the error properly')\n                    .withSeverity(ErrorSeverity.CRITICAL)\n                    .withCategory(ErrorCategory.SYSTEM)\n                    .withContext({\n                        operation: 'Error Handling',\n                        timestamp: new Date()\n                    })\n                    .withTechnicalDetails(handlingError instanceof Error ? handlingError.message : String(handlingError))\n                    .build()\n            );\n        }\n    }\n\n    markErrorResolved(errorId: string): void {\n        const startTime = this.errorStartTimes.get(errorId);\n        if (startTime) {\n            const resolutionTime = Date.now() - startTime;\n            this.resolutionTimes.push(resolutionTime);\n            \n            if (this.resolutionTimes.length > 100) {\n                this.resolutionTimes.shift();\n            }\n            \n            this.errorMetrics.averageResolutionTime = \n                this.resolutionTimes.reduce((a, b) => a + b, 0) / this.resolutionTimes.length;\n            \n            this.errorStartTimes.delete(errorId);\n        }\n    }\n\n    private updateMetrics(error: ExocortexError): void {\n        this.errorMetrics.totalErrors++;\n        this.errorMetrics.errorsBySeverity[error.severity]++;\n        this.errorMetrics.errorsByCategory[error.category]++;\n        this.errorMetrics.lastError = error;\n    }\n\n    private logError(error: ExocortexError): void {\n        const logLevel = this.getLogLevel(error.severity);\n        const logMessage = this.formatErrorForConsole(error);\n\n        switch (logLevel) {\n            case 'error':\n                console.error(logMessage, error);\n                break;\n            case 'warn':\n                console.warn(logMessage, error);\n                break;\n            case 'info':\n                console.info(logMessage, error);\n                break;\n            default:\n                console.log(logMessage, error);\n        }\n    }\n\n    private getLogLevel(severity: ErrorSeverity): 'error' | 'warn' | 'info' | 'log' {\n        switch (severity) {\n            case ErrorSeverity.CRITICAL:\n            case ErrorSeverity.ERROR:\n                return 'error';\n            case ErrorSeverity.WARNING:\n                return 'warn';\n            case ErrorSeverity.INFO:\n                return 'info';\n            default:\n                return 'log';\n        }\n    }\n\n    private formatErrorForConsole(error: ExocortexError): string {\n        const parts = [\n            `[${error.severity.toUpperCase()}]`,\n            `[${error.category}]`,\n            error.title,\n            '-',\n            error.message\n        ];\n\n        if (error.context.location) {\n            if (typeof error.context.location === 'object' && 'line' in error.context.location) {\n                parts.push(`(Line ${error.context.location.line}:${error.context.location.column})`);\n            }\n        }\n\n        return parts.join(' ');\n    }\n\n    private showUserNotification(error: ExocortexError): void {\n        const duration = this.getNotificationDuration(error.severity);\n        const message = this.formatErrorForUser(error);\n        \n        new Notice(message, duration);\n    }\n\n    private getNotificationDuration(severity: ErrorSeverity): number {\n        switch (severity) {\n            case ErrorSeverity.CRITICAL:\n                return 10000;\n            case ErrorSeverity.ERROR:\n                return 7000;\n            case ErrorSeverity.WARNING:\n                return 5000;\n            case ErrorSeverity.INFO:\n                return 3000;\n            default:\n                return 5000;\n        }\n    }\n\n    private formatErrorForUser(error: ExocortexError): string {\n        let message = `${error.title}: ${error.message}`;\n        \n        if (error.suggestions && error.suggestions.length > 0) {\n            const topSuggestion = error.suggestions[0];\n            message += `\\n\\n\uD83D\uDCA1 ${topSuggestion.title}`;\n        }\n        \n        return message;\n    }\n\n    private addToHistory(error: ExocortexError): void {\n        this.errorHistory.unshift(error);\n        \n        if (this.errorHistory.length > this.maxHistorySize) {\n            this.errorHistory.pop();\n        }\n    }\n\n    private async attemptRecovery(error: ExocortexError): Promise<void> {\n        if (!error.suggestions || error.suggestions.length === 0) {\n            return;\n        }\n\n        const autoFixSuggestion = error.suggestions.find(s => \n            s.confidence && s.confidence > 0.9 && s.action\n        );\n\n        if (autoFixSuggestion && autoFixSuggestion.action) {\n            try {\n                await autoFixSuggestion.action.handler();\n                new Notice(`Auto-recovery: ${autoFixSuggestion.title}`, 3000);\n            } catch (recoveryError) {\n                console.error('Auto-recovery failed:', recoveryError);\n            }\n        }\n    }\n\n    getMetrics(): ErrorMetrics {\n        return { ...this.errorMetrics };\n    }\n\n    getErrorHistory(): ExocortexError[] {\n        return [...this.errorHistory];\n    }\n\n    clearHistory(): void {\n        this.errorHistory = [];\n        this.errorStartTimes.clear();\n    }\n\n    getSuggestions(error: Error | string): FixSuggestion[] {\n        const exoError = ErrorAnalyzer.analyze(error);\n        return exoError.suggestions || [];\n    }\n\n    analyzeError(error: Error | string): ExocortexError {\n        return ErrorAnalyzer.analyze(error);\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b9074ac2b3bce9fcfa28e98fd2dbcbb9333c8c92"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1v56sid9m0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1v56sid9m0();
cov_1v56sid9m0().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1v56sid9m0().s[1]++;
exports.ErrorHandlerService = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_1v56sid9m0().s[2]++, require("tslib"));
const ExocortexError_1 =
/* istanbul ignore next */
(cov_1v56sid9m0().s[3]++, require("../../domain/errors/ExocortexError"));
const ErrorAnalyzer_1 =
/* istanbul ignore next */
(cov_1v56sid9m0().s[4]++, require("../../domain/errors/ErrorAnalyzer"));
const EnhancedResult_1 =
/* istanbul ignore next */
(cov_1v56sid9m0().s[5]++, require("../../domain/core/EnhancedResult"));
const obsidian_1 =
/* istanbul ignore next */
(cov_1v56sid9m0().s[6]++, require("obsidian"));
class ErrorHandlerService {
  constructor(options =
  /* istanbul ignore next */
  (cov_1v56sid9m0().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[0]++;
    cov_1v56sid9m0().s[7]++;
    this.options = options;
    /* istanbul ignore next */
    cov_1v56sid9m0().s[8]++;
    this.errorHistory = [];
    /* istanbul ignore next */
    cov_1v56sid9m0().s[9]++;
    this.errorMetrics = {
      totalErrors: 0,
      errorsBySeverity: {
        [ExocortexError_1.ErrorSeverity.CRITICAL]: 0,
        [ExocortexError_1.ErrorSeverity.ERROR]: 0,
        [ExocortexError_1.ErrorSeverity.WARNING]: 0,
        [ExocortexError_1.ErrorSeverity.INFO]: 0
      },
      errorsByCategory: {
        [ExocortexError_1.ErrorCategory.SYNTAX]: 0,
        [ExocortexError_1.ErrorCategory.SEMANTIC]: 0,
        [ExocortexError_1.ErrorCategory.VALIDATION]: 0,
        [ExocortexError_1.ErrorCategory.SYSTEM]: 0,
        [ExocortexError_1.ErrorCategory.NETWORK]: 0,
        [ExocortexError_1.ErrorCategory.PERMISSION]: 0
      },
      averageResolutionTime: 0
    };
    /* istanbul ignore next */
    cov_1v56sid9m0().s[10]++;
    this.resolutionTimes = [];
    /* istanbul ignore next */
    cov_1v56sid9m0().s[11]++;
    this.maxHistorySize = 100;
    /* istanbul ignore next */
    cov_1v56sid9m0().s[12]++;
    this.errorStartTimes = new Map();
    /* istanbul ignore next */
    cov_1v56sid9m0().s[13]++;
    this.options = Object.assign({
      showUserNotification: true,
      logToConsole: true,
      trackMetrics: true,
      autoRecover: false
    }, options);
  }
  handleError(error, context) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[1]++;
    cov_1v56sid9m0().s[14]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1v56sid9m0().f[2]++;
      const startTime =
      /* istanbul ignore next */
      (cov_1v56sid9m0().s[15]++, Date.now());
      /* istanbul ignore next */
      cov_1v56sid9m0().s[16]++;
      try {
        let exoError;
        /* istanbul ignore next */
        cov_1v56sid9m0().s[17]++;
        if (typeof error === 'string') {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[1][0]++;
          cov_1v56sid9m0().s[18]++;
          exoError = ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
        } else {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[1][1]++;
          cov_1v56sid9m0().s[19]++;
          if (error instanceof Error) {
            /* istanbul ignore next */
            cov_1v56sid9m0().b[2][0]++;
            cov_1v56sid9m0().s[20]++;
            exoError = ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
          } else {
            /* istanbul ignore next */
            cov_1v56sid9m0().b[2][1]++;
            cov_1v56sid9m0().s[21]++;
            exoError = error;
          }
        }
        /* istanbul ignore next */
        cov_1v56sid9m0().s[22]++;
        if (context) {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[3][0]++;
          cov_1v56sid9m0().s[23]++;
          exoError = Object.assign(Object.assign({}, exoError), {
            context: Object.assign(Object.assign({}, exoError.context), context)
          });
        } else
        /* istanbul ignore next */
        {
          cov_1v56sid9m0().b[3][1]++;
        }
        cov_1v56sid9m0().s[24]++;
        this.errorStartTimes.set(exoError.id, startTime);
        /* istanbul ignore next */
        cov_1v56sid9m0().s[25]++;
        if (this.options.trackMetrics) {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[4][0]++;
          cov_1v56sid9m0().s[26]++;
          this.updateMetrics(exoError);
        } else
        /* istanbul ignore next */
        {
          cov_1v56sid9m0().b[4][1]++;
        }
        cov_1v56sid9m0().s[27]++;
        if (this.options.logToConsole) {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[5][0]++;
          cov_1v56sid9m0().s[28]++;
          this.logError(exoError);
        } else
        /* istanbul ignore next */
        {
          cov_1v56sid9m0().b[5][1]++;
        }
        cov_1v56sid9m0().s[29]++;
        if (this.options.showUserNotification) {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[6][0]++;
          cov_1v56sid9m0().s[30]++;
          this.showUserNotification(exoError);
        } else
        /* istanbul ignore next */
        {
          cov_1v56sid9m0().b[6][1]++;
        }
        cov_1v56sid9m0().s[31]++;
        this.addToHistory(exoError);
        /* istanbul ignore next */
        cov_1v56sid9m0().s[32]++;
        if (
        /* istanbul ignore next */
        (cov_1v56sid9m0().b[8][0]++, this.options.autoRecover) &&
        /* istanbul ignore next */
        (cov_1v56sid9m0().b[8][1]++, exoError.recoverable)) {
          /* istanbul ignore next */
          cov_1v56sid9m0().b[7][0]++;
          cov_1v56sid9m0().s[33]++;
          yield this.attemptRecovery(exoError);
        } else
        /* istanbul ignore next */
        {
          cov_1v56sid9m0().b[7][1]++;
        }
        cov_1v56sid9m0().s[34]++;
        return EnhancedResult_1.EnhancedResult.okEnhanced();
      } catch (handlingError) {
        /* istanbul ignore next */
        cov_1v56sid9m0().s[35]++;
        console.error('Error in error handler:', handlingError);
        /* istanbul ignore next */
        cov_1v56sid9m0().s[36]++;
        return EnhancedResult_1.EnhancedResult.failEnhanced(ExocortexError_1.ErrorBuilder.create().withTitle('Error Handler Failed').withMessage('Failed to handle the error properly').withSeverity(ExocortexError_1.ErrorSeverity.CRITICAL).withCategory(ExocortexError_1.ErrorCategory.SYSTEM).withContext({
          operation: 'Error Handling',
          timestamp: new Date()
        }).withTechnicalDetails(handlingError instanceof Error ?
        /* istanbul ignore next */
        (cov_1v56sid9m0().b[9][0]++, handlingError.message) :
        /* istanbul ignore next */
        (cov_1v56sid9m0().b[9][1]++, String(handlingError))).build());
      }
    });
  }
  markErrorResolved(errorId) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[3]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[37]++, this.errorStartTimes.get(errorId));
    /* istanbul ignore next */
    cov_1v56sid9m0().s[38]++;
    if (startTime) {
      /* istanbul ignore next */
      cov_1v56sid9m0().b[10][0]++;
      const resolutionTime =
      /* istanbul ignore next */
      (cov_1v56sid9m0().s[39]++, Date.now() - startTime);
      /* istanbul ignore next */
      cov_1v56sid9m0().s[40]++;
      this.resolutionTimes.push(resolutionTime);
      /* istanbul ignore next */
      cov_1v56sid9m0().s[41]++;
      if (this.resolutionTimes.length > 100) {
        /* istanbul ignore next */
        cov_1v56sid9m0().b[11][0]++;
        cov_1v56sid9m0().s[42]++;
        this.resolutionTimes.shift();
      } else
      /* istanbul ignore next */
      {
        cov_1v56sid9m0().b[11][1]++;
      }
      cov_1v56sid9m0().s[43]++;
      this.errorMetrics.averageResolutionTime = this.resolutionTimes.reduce((a, b) => {
        /* istanbul ignore next */
        cov_1v56sid9m0().f[4]++;
        cov_1v56sid9m0().s[44]++;
        return a + b;
      }, 0) / this.resolutionTimes.length;
      /* istanbul ignore next */
      cov_1v56sid9m0().s[45]++;
      this.errorStartTimes.delete(errorId);
    } else
    /* istanbul ignore next */
    {
      cov_1v56sid9m0().b[10][1]++;
    }
  }
  updateMetrics(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[5]++;
    cov_1v56sid9m0().s[46]++;
    this.errorMetrics.totalErrors++;
    /* istanbul ignore next */
    cov_1v56sid9m0().s[47]++;
    this.errorMetrics.errorsBySeverity[error.severity]++;
    /* istanbul ignore next */
    cov_1v56sid9m0().s[48]++;
    this.errorMetrics.errorsByCategory[error.category]++;
    /* istanbul ignore next */
    cov_1v56sid9m0().s[49]++;
    this.errorMetrics.lastError = error;
  }
  logError(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[6]++;
    const logLevel =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[50]++, this.getLogLevel(error.severity));
    const logMessage =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[51]++, this.formatErrorForConsole(error));
    /* istanbul ignore next */
    cov_1v56sid9m0().s[52]++;
    switch (logLevel) {
      case 'error':
        /* istanbul ignore next */
        cov_1v56sid9m0().b[12][0]++;
        cov_1v56sid9m0().s[53]++;
        console.error(logMessage, error);
        /* istanbul ignore next */
        cov_1v56sid9m0().s[54]++;
        break;
      case 'warn':
        /* istanbul ignore next */
        cov_1v56sid9m0().b[12][1]++;
        cov_1v56sid9m0().s[55]++;
        console.warn(logMessage, error);
        /* istanbul ignore next */
        cov_1v56sid9m0().s[56]++;
        break;
      case 'info':
        /* istanbul ignore next */
        cov_1v56sid9m0().b[12][2]++;
        cov_1v56sid9m0().s[57]++;
        console.info(logMessage, error);
        /* istanbul ignore next */
        cov_1v56sid9m0().s[58]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[12][3]++;
        cov_1v56sid9m0().s[59]++;
        console.log(logMessage, error);
    }
  }
  getLogLevel(severity) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[7]++;
    cov_1v56sid9m0().s[60]++;
    switch (severity) {
      case ExocortexError_1.ErrorSeverity.CRITICAL:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[13][0]++;
      case ExocortexError_1.ErrorSeverity.ERROR:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[13][1]++;
        cov_1v56sid9m0().s[61]++;
        return 'error';
      case ExocortexError_1.ErrorSeverity.WARNING:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[13][2]++;
        cov_1v56sid9m0().s[62]++;
        return 'warn';
      case ExocortexError_1.ErrorSeverity.INFO:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[13][3]++;
        cov_1v56sid9m0().s[63]++;
        return 'info';
      default:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[13][4]++;
        cov_1v56sid9m0().s[64]++;
        return 'log';
    }
  }
  formatErrorForConsole(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[8]++;
    const parts =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[65]++, [`[${error.severity.toUpperCase()}]`, `[${error.category}]`, error.title, '-', error.message]);
    /* istanbul ignore next */
    cov_1v56sid9m0().s[66]++;
    if (error.context.location) {
      /* istanbul ignore next */
      cov_1v56sid9m0().b[14][0]++;
      cov_1v56sid9m0().s[67]++;
      if (
      /* istanbul ignore next */
      (cov_1v56sid9m0().b[16][0]++, typeof error.context.location === 'object') &&
      /* istanbul ignore next */
      (cov_1v56sid9m0().b[16][1]++, 'line' in error.context.location)) {
        /* istanbul ignore next */
        cov_1v56sid9m0().b[15][0]++;
        cov_1v56sid9m0().s[68]++;
        parts.push(`(Line ${error.context.location.line}:${error.context.location.column})`);
      } else
      /* istanbul ignore next */
      {
        cov_1v56sid9m0().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1v56sid9m0().b[14][1]++;
    }
    cov_1v56sid9m0().s[69]++;
    return parts.join(' ');
  }
  showUserNotification(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[9]++;
    const duration =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[70]++, this.getNotificationDuration(error.severity));
    const message =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[71]++, this.formatErrorForUser(error));
    /* istanbul ignore next */
    cov_1v56sid9m0().s[72]++;
    new obsidian_1.Notice(message, duration);
  }
  getNotificationDuration(severity) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[10]++;
    cov_1v56sid9m0().s[73]++;
    switch (severity) {
      case ExocortexError_1.ErrorSeverity.CRITICAL:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[17][0]++;
        cov_1v56sid9m0().s[74]++;
        return 10000;
      case ExocortexError_1.ErrorSeverity.ERROR:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[17][1]++;
        cov_1v56sid9m0().s[75]++;
        return 7000;
      case ExocortexError_1.ErrorSeverity.WARNING:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[17][2]++;
        cov_1v56sid9m0().s[76]++;
        return 5000;
      case ExocortexError_1.ErrorSeverity.INFO:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[17][3]++;
        cov_1v56sid9m0().s[77]++;
        return 3000;
      default:
        /* istanbul ignore next */
        cov_1v56sid9m0().b[17][4]++;
        cov_1v56sid9m0().s[78]++;
        return 5000;
    }
  }
  formatErrorForUser(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[11]++;
    let message =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[79]++, `${error.title}: ${error.message}`);
    /* istanbul ignore next */
    cov_1v56sid9m0().s[80]++;
    if (
    /* istanbul ignore next */
    (cov_1v56sid9m0().b[19][0]++, error.suggestions) &&
    /* istanbul ignore next */
    (cov_1v56sid9m0().b[19][1]++, error.suggestions.length > 0)) {
      /* istanbul ignore next */
      cov_1v56sid9m0().b[18][0]++;
      const topSuggestion =
      /* istanbul ignore next */
      (cov_1v56sid9m0().s[81]++, error.suggestions[0]);
      /* istanbul ignore next */
      cov_1v56sid9m0().s[82]++;
      message += `\n\n💡 ${topSuggestion.title}`;
    } else
    /* istanbul ignore next */
    {
      cov_1v56sid9m0().b[18][1]++;
    }
    cov_1v56sid9m0().s[83]++;
    return message;
  }
  addToHistory(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[12]++;
    cov_1v56sid9m0().s[84]++;
    this.errorHistory.unshift(error);
    /* istanbul ignore next */
    cov_1v56sid9m0().s[85]++;
    if (this.errorHistory.length > this.maxHistorySize) {
      /* istanbul ignore next */
      cov_1v56sid9m0().b[20][0]++;
      cov_1v56sid9m0().s[86]++;
      this.errorHistory.pop();
    } else
    /* istanbul ignore next */
    {
      cov_1v56sid9m0().b[20][1]++;
    }
  }
  attemptRecovery(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[13]++;
    cov_1v56sid9m0().s[87]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1v56sid9m0().f[14]++;
      cov_1v56sid9m0().s[88]++;
      if (
      /* istanbul ignore next */
      (cov_1v56sid9m0().b[22][0]++, !error.suggestions) ||
      /* istanbul ignore next */
      (cov_1v56sid9m0().b[22][1]++, error.suggestions.length === 0)) {
        /* istanbul ignore next */
        cov_1v56sid9m0().b[21][0]++;
        cov_1v56sid9m0().s[89]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1v56sid9m0().b[21][1]++;
      }
      const autoFixSuggestion =
      /* istanbul ignore next */
      (cov_1v56sid9m0().s[90]++, error.suggestions.find(s => {
        /* istanbul ignore next */
        cov_1v56sid9m0().f[15]++;
        cov_1v56sid9m0().s[91]++;
        return /* istanbul ignore next */(cov_1v56sid9m0().b[23][0]++, s.confidence) &&
        /* istanbul ignore next */
        (cov_1v56sid9m0().b[23][1]++, s.confidence > 0.9) &&
        /* istanbul ignore next */
        (cov_1v56sid9m0().b[23][2]++, s.action);
      }));
      /* istanbul ignore next */
      cov_1v56sid9m0().s[92]++;
      if (
      /* istanbul ignore next */
      (cov_1v56sid9m0().b[25][0]++, autoFixSuggestion) &&
      /* istanbul ignore next */
      (cov_1v56sid9m0().b[25][1]++, autoFixSuggestion.action)) {
        /* istanbul ignore next */
        cov_1v56sid9m0().b[24][0]++;
        cov_1v56sid9m0().s[93]++;
        try {
          /* istanbul ignore next */
          cov_1v56sid9m0().s[94]++;
          yield autoFixSuggestion.action.handler();
          /* istanbul ignore next */
          cov_1v56sid9m0().s[95]++;
          new obsidian_1.Notice(`Auto-recovery: ${autoFixSuggestion.title}`, 3000);
        } catch (recoveryError) {
          /* istanbul ignore next */
          cov_1v56sid9m0().s[96]++;
          console.error('Auto-recovery failed:', recoveryError);
        }
      } else
      /* istanbul ignore next */
      {
        cov_1v56sid9m0().b[24][1]++;
      }
    });
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[16]++;
    cov_1v56sid9m0().s[97]++;
    return Object.assign({}, this.errorMetrics);
  }
  getErrorHistory() {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[17]++;
    cov_1v56sid9m0().s[98]++;
    return [...this.errorHistory];
  }
  clearHistory() {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[18]++;
    cov_1v56sid9m0().s[99]++;
    this.errorHistory = [];
    /* istanbul ignore next */
    cov_1v56sid9m0().s[100]++;
    this.errorStartTimes.clear();
  }
  getSuggestions(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[19]++;
    const exoError =
    /* istanbul ignore next */
    (cov_1v56sid9m0().s[101]++, ErrorAnalyzer_1.ErrorAnalyzer.analyze(error));
    /* istanbul ignore next */
    cov_1v56sid9m0().s[102]++;
    return /* istanbul ignore next */(cov_1v56sid9m0().b[26][0]++, exoError.suggestions) ||
    /* istanbul ignore next */
    (cov_1v56sid9m0().b[26][1]++, []);
  }
  analyzeError(error) {
    /* istanbul ignore next */
    cov_1v56sid9m0().f[20]++;
    cov_1v56sid9m0().s[103]++;
    return ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
  }
}
/* istanbul ignore next */
cov_1v56sid9m0().s[104]++;
exports.ErrorHandlerService = ErrorHandlerService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,