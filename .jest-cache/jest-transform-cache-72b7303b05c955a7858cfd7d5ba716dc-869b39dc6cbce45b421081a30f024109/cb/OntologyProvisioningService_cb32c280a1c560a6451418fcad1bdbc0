d52beffae3b8803b64624cefafc2b215
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OntologyProvisioningService = void 0;
const Result_1 = require("../core/Result");
const OntologyPrefix_1 = require("../value-objects/OntologyPrefix");
/**
 * Domain service for auto-provisioning missing ontologies
 * Follows Domain-Driven Design patterns
 */
class OntologyProvisioningService {
    constructor(ontologyRepository, vaultAdapter) {
        this.ontologyRepository = ontologyRepository;
        this.vaultAdapter = vaultAdapter;
    }
    /**
     * Ensures ontology exists, creating it if necessary
     * @param prefix The ontology prefix to provision
     * @returns Result indicating success or failure
     */
    async ensureOntologyExists(prefix) {
        // Validate prefix format
        const prefixResult = OntologyPrefix_1.OntologyPrefix.create(prefix);
        if (!prefixResult.isSuccess) {
            return Result_1.Result.fail(`Invalid ontology prefix: ${prefixResult.getError()}`);
        }
        const ontologyPrefix = prefixResult.getValue();
        // Check if ontology already exists
        const existingOntology = await this.ontologyRepository.findByPrefix(ontologyPrefix);
        if (existingOntology) {
            return Result_1.Result.ok(ontologyPrefix);
        }
        // Auto-provision the ontology
        const provisionResult = await this.provisionOntology(ontologyPrefix);
        if (!provisionResult.isSuccess) {
            return Result_1.Result.fail(`Failed to provision ontology: ${provisionResult.getError()}`);
        }
        return Result_1.Result.ok(ontologyPrefix);
    }
    /**
     * Creates a new ontology file with proper structure
     * @param prefix The ontology prefix
     * @returns Result indicating success or failure
     */
    async provisionOntology(prefix) {
        try {
            const fileName = `!${prefix.toString()}.md`;
            const frontmatter = this.createOntologyFrontmatter(prefix);
            const content = this.createOntologyContent(prefix);
            const fullContent = `---
${this.stringifyFrontmatter(frontmatter)}
---

${content}`;
            // Create the ontology file
            await this.vaultAdapter.create(fileName, fullContent);
            // Register with repository
            const ontology = await this.ontologyRepository.findByPrefix(prefix);
            if (!ontology) {
                return Result_1.Result.fail("Failed to register newly created ontology");
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Ontology provisioning failed: ${error instanceof Error ? error.message : String(error)}`);
        }
    }
    /**
     * Creates proper frontmatter for ontology files
     */
    createOntologyFrontmatter(prefix) {
        return {
            exo__Ontology_prefix: prefix.toString(),
            exo__Instance_class: "[[exo__Ontology]]",
            rdfs__label: this.generateDisplayName(prefix),
            rdfs__comment: `Auto-provisioned ontology for ${prefix.toString()} namespace`,
            exo__Ontology_createdAt: new Date().toISOString().replace(/\.\d{3}Z$/, ""),
            exo__Ontology_version: "1.0.0",
            exo__Ontology_status: "active",
        };
    }
    /**
     * Creates readable content for ontology files
     */
    createOntologyContent(prefix) {
        const displayName = this.generateDisplayName(prefix);
        return `# ${displayName}

This ontology was automatically created to support asset creation.

## Namespace

- **Prefix**: \`${prefix.toString()}\`
- **Status**: Active
- **Created**: ${new Date().toLocaleDateString()}

## Usage

This ontology provides a namespace for organizing related assets and classes within the Exocortex knowledge graph.

## Classes

Classes in this ontology will be automatically discovered from your vault.

## Properties

Properties in this ontology will be automatically discovered from your vault.
`;
    }
    /**
     * Generates human-readable display name from prefix
     */
    generateDisplayName(prefix) {
        const prefixStr = prefix.toString();
        // Handle common abbreviations
        const abbreviations = {
            'ui': 'User Interface',
            'api': 'Application Programming Interface',
            'db': 'Database',
            'auth': 'Authentication',
            'sys': 'System',
            'proc': 'Process',
            'mgmt': 'Management',
            'cfg': 'Configuration',
        };
        if (abbreviations[prefixStr.toLowerCase()]) {
            return abbreviations[prefixStr.toLowerCase()];
        }
        // Convert camelCase or snake_case to title case
        return prefixStr
            .replace(/([A-Z])/g, ' $1')
            .replace(/_/g, ' ')
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ')
            .trim();
    }
    /**
     * Converts frontmatter object to YAML string
     */
    stringifyFrontmatter(frontmatter) {
        return Object.entries(frontmatter)
            .map(([key, value]) => {
            if (typeof value === 'string') {
                return `${key}: "${value}"`;
            }
            else if (Array.isArray(value)) {
                return `${key}: [${value.map(v => `"${v}"`).join(', ')}]`;
            }
            else {
                return `${key}: ${value}`;
            }
        })
            .join('\n');
    }
    /**
     * Validates if ontology can be auto-provisioned
     * @param prefix The ontology prefix to check
     * @returns Validation result with details
     */
    async canProvisionOntology(prefix) {
        const reasons = [];
        // Check prefix validity
        const prefixResult = OntologyPrefix_1.OntologyPrefix.create(prefix);
        if (!prefixResult.isSuccess) {
            reasons.push(`Invalid prefix format: ${prefixResult.getError()}`);
        }
        // Check if file would conflict
        const fileName = `!${prefix}.md`;
        const exists = await this.vaultAdapter.exists(fileName);
        if (exists) {
            reasons.push(`Ontology file already exists: ${fileName}`);
        }
        // Check for reserved prefixes
        const reservedPrefixes = ['rdf', 'rdfs', 'owl', 'xsd', 'foaf'];
        if (reservedPrefixes.includes(prefix.toLowerCase())) {
            reasons.push(`Cannot provision reserved prefix: ${prefix}`);
        }
        return {
            canProvision: reasons.length === 0,
            reasons,
        };
    }
}
exports.OntologyProvisioningService = OntologyProvisioningService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9zZXJ2aWNlcy9PbnRvbG9neVByb3Zpc2lvbmluZ1NlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXdDO0FBQ3hDLG9FQUFpRTtBQUlqRTs7O0dBR0c7QUFDSCxNQUFhLDJCQUEyQjtJQUN0QyxZQUNtQixrQkFBdUMsRUFDdkMsWUFBMkI7UUFEM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFxQjtRQUN2QyxpQkFBWSxHQUFaLFlBQVksQ0FBZTtJQUMzQyxDQUFDO0lBRUo7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxNQUFjO1FBQ3ZDLHlCQUF5QjtRQUN6QixNQUFNLFlBQVksR0FBRywrQkFBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUMzQixPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQ2hCLDRCQUE0QixZQUFZLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FDdEQsQ0FBQztTQUNIO1FBRUQsTUFBTSxjQUFjLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRyxDQUFDO1FBRWhELG1DQUFtQztRQUNuQyxNQUFNLGdCQUFnQixHQUNwQixNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0QsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQixPQUFPLGVBQU0sQ0FBQyxFQUFFLENBQWlCLGNBQWMsQ0FBQyxDQUFDO1NBQ2xEO1FBRUQsOEJBQThCO1FBQzlCLE1BQU0sZUFBZSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFO1lBQzlCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FDaEIsaUNBQWlDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxD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Q0FBQztRQUU3Qix3QkFBd0I7UUFDeEIsTUFBTSxZQUFZLEdBQUcsK0JBQWMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQywwQkFBMEIsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNuRTtRQUVELCtCQUErQjtRQUMvQixNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sS0FBSyxDQUFDO1FBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDeEQsSUFBSSxNQUFNLEVBQUU7WUFDVixPQUFPLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsOEJBQThCO1FBQzlCLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0QsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUU7WUFDbkQsT0FBTyxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM3RDtRQUVELE9BQU87WUFDTCxZQUFZLEVBQUUsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ2xDLE9BQU87U0FDUixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBaE5ELGtFQWdOQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvZG9tYWluL3NlcnZpY2VzL09udG9sb2d5UHJvdmlzaW9uaW5nU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN1bHQgfSBmcm9tIFwiLi4vY29yZS9SZXN1bHRcIjtcbmltcG9ydCB7IE9udG9sb2d5UHJlZml4IH0gZnJvbSBcIi4uL3ZhbHVlLW9iamVjdHMvT250b2xvZ3lQcmVmaXhcIjtcbmltcG9ydCB7IElPbnRvbG9neVJlcG9zaXRvcnkgfSBmcm9tIFwiLi4vcmVwb3NpdG9yaWVzL0lPbnRvbG9neVJlcG9zaXRvcnlcIjtcbmltcG9ydCB7IElWYXVsdEFkYXB0ZXIgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vcG9ydHMvSVZhdWx0QWRhcHRlclwiO1xuXG4vKipcbiAqIERvbWFpbiBzZXJ2aWNlIGZvciBhdXRvLXByb3Zpc2lvbmluZyBtaXNzaW5nIG9udG9sb2dpZXNcbiAqIEZvbGxvd3MgRG9tYWluLURyaXZlbiBEZXNpZ24gcGF0dGVybnNcbiAqL1xuZXhwb3J0IGNsYXNzIE9udG9sb2d5UHJvdmlzaW9uaW5nU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb250b2xvZ3lSZXBvc2l0b3J5OiBJT250b2xvZ3lSZXBvc2l0b3J5LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgdmF1bHRBZGFwdGVyOiBJVmF1bHRBZGFwdGVyLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEVuc3VyZXMgb250b2xvZ3kgZXhpc3RzLCBjcmVhdGluZyBpdCBpZiBuZWNlc3NhcnlcbiAgICogQHBhcmFtIHByZWZpeCBUaGUgb250b2xvZ3kgcHJlZml4IHRvIHByb3Zpc2lvblxuICAgKiBAcmV0dXJucyBSZXN1bHQgaW5kaWNhdGluZyBzdWNjZXNzIG9yIGZhaWx1cmVcbiAgICovXG4gIGFzeW5jIGVuc3VyZU9udG9sb2d5RXhpc3RzKHByZWZpeDogc3RyaW5nKTogUHJvbWlzZTxSZXN1bHQ8T250b2xvZ3lQcmVmaXg+PiB7XG4gICAgLy8gVmFsaWRhdGUgcHJlZml4IGZvcm1hdFxuICAgIGNvbnN0IHByZWZpeFJlc3VsdCA9IE9udG9sb2d5UHJlZml4LmNyZWF0ZShwcmVmaXgpO1xuICAgIGlmICghcHJlZml4UmVzdWx0LmlzU3VjY2Vzcykge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPE9udG9sb2d5UHJlZml4PihcbiAgICAgICAgYEludmFsaWQgb250b2xvZ3kgcHJlZml4OiAke3ByZWZpeFJlc3VsdC5nZXRFcnJvcigpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IG9udG9sb2d5UHJlZml4ID0gcHJlZml4UmVzdWx0LmdldFZhbHVlKCkhO1xuXG4gICAgLy8gQ2hlY2sgaWYgb250b2xvZ3kgYWxyZWFkeSBleGlzdHNcbiAgICBjb25zdCBleGlzdGluZ09udG9sb2d5ID1cbiAgICAgIGF3YWl0IHRoaXMub250b2xvZ3lSZXBvc2l0b3J5LmZpbmRCeVByZWZpeChvbnRvbG9neVByZWZpeCk7XG4gICAgaWYgKGV4aXN0aW5nT250b2xvZ3kpIHtcbiAgICAgIHJldHVybiBSZXN1bHQub2s8T250b2xvZ3lQcmVmaXg+KG9udG9sb2d5UHJlZml4KTtcbiAgICB9XG5cbiAgICAvLyBBdXRvLXByb3Zpc2lvbiB0aGUgb250b2xvZ3lcbiAgICBjb25zdCBwcm92aXNpb25SZXN1bHQgPSBhd2FpdCB0aGlzLnByb3Zpc2lvbk9udG9sb2d5KG9udG9sb2d5UHJlZml4KTtcbiAgICBpZiAoIXByb3Zpc2lvblJlc3VsdC5pc1N1Y2Nlc3MpIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxPbnRvbG9neVByZWZpeD4oXG4gICAgICAgIGBGYWlsZWQgdG8gcHJvdmlzaW9uIG9udG9sb2d5OiAke3Byb3Zpc2lvblJlc3VsdC5nZXRFcnJvcigpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBSZXN1bHQub2s8T250b2xvZ3lQcmVmaXg+KG9udG9sb2d5UHJlZml4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG9udG9sb2d5IGZpbGUgd2l0aCBwcm9wZXIgc3RydWN0dXJlXG4gICAqIEBwYXJhbSBwcmVmaXggVGhlIG9udG9sb2d5IHByZWZpeFxuICAgKiBAcmV0dXJucyBSZXN1bHQgaW5kaWNhdGluZyBzdWNjZXNzIG9yIGZhaWx1cmVcbiAgICovXG4gIHByaXZhdGUgYXN5bmMgcHJvdmlzaW9uT250b2xvZ3koXG4gICAgcHJlZml4OiBPbnRvbG9neVByZWZpeCxcbiAgKTogUHJvbWlzZTxSZXN1bHQ8dm9pZD4+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZmlsZU5hbWUgPSBgISR7cHJlZml4LnRvU3RyaW5nKCl9Lm1kYDtcbiAgICAgIGNvbnN0IGZyb250bWF0dGVyID0gdGhpcy5jcmVhdGVPbnRvbG9neUZyb250bWF0dGVyKHByZWZpeCk7XG4gICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5jcmVhdGVPbnRvbG9neUNvbnRlbnQocHJlZml4KTtcblxuICAgICAgY29uc3QgZnVsbENvbnRlbnQgPSBgLS0tXG4ke3RoaXMuc3RyaW5naWZ5RnJvbnRtYXR0ZXIoZnJvbnRtYXR0ZXIpfVxuLS0tXG5cbiR7Y29udGVudH1gO1xuXG4gICAgICAvLyBDcmVhdGUgdGhlIG9udG9sb2d5IGZpbGVcbiAgICAgIGF3YWl0IHRoaXMudmF1bHRBZGFwdGVyLmNyZWF0ZShmaWxlTmFtZSwgZnVsbENvbnRlbnQpO1xuXG4gICAgICAvLyBSZWdpc3RlciB3aXRoIHJlcG9zaXRvcnlcbiAgICAgIGNvbnN0IG9udG9sb2d5ID0gYXdhaXQgdGhpcy5vbnRvbG9neVJlcG9zaXRvcnkuZmluZEJ5UHJlZml4KHByZWZpeCk7XG4gICAgICBpZiAoIW9udG9sb2d5KSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDx2b2lkPihcbiAgICAgICAgICBcIkZhaWxlZCB0byByZWdpc3RlciBuZXdseSBjcmVhdGVkIG9udG9sb2d5XCIsXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZXN1bHQub2s8dm9pZD4oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPHZvaWQ+KFxuICAgICAgICBgT250b2xvZ3kgcHJvdmlzaW9uaW5nIGZhaWxlZDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgcHJvcGVyIGZyb250bWF0dGVyIGZvciBvbnRvbG9neSBmaWxlc1xuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVPbnRvbG9neUZyb250bWF0dGVyKFxuICAgIHByZWZpeDogT250b2xvZ3lQcmVmaXgsXG4gICk6IFJlY29yZDxzdHJpbmcsIGFueT4ge1xuICAgIHJldHVybiB7XG4gICAgICBleG9fX09udG9sb2d5X3ByZWZpeDogcHJlZml4LnRvU3RyaW5nKCksXG4gICAgICBleG9fX0luc3RhbmNlX2NsYXNzOiBcIltbZXhvX19PbnRvbG9neV1dXCIsXG4gICAgICByZGZzX19sYWJlbDogdGhpcy5nZW5lcmF0ZURpc3BsYXlOYW1lKHByZWZpeCksXG4gICAgICByZGZzX19jb21tZW50OiBgQXV0by1wcm92aXNpb25lZCBvbnRvbG9neSBmb3IgJHtwcmVmaXgudG9TdHJpbmcoKX0gbmFtZXNwYWNlYCxcbiAgICAgIGV4b19fT250b2xvZ3lfY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvXFwuXFxkezN9WiQvLCBcIlwiKSxcbiAgICAgIGV4b19fT250b2xvZ3lfdmVyc2lvbjogXCIxLjAuMFwiLFxuICAgICAgZXhvX19PbnRvbG9neV9zdGF0dXM6IFwiYWN0aXZlXCIsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHJlYWRhYmxlIGNvbnRlbnQgZm9yIG9udG9sb2d5IGZpbGVzXG4gICAqL1xuICBwcml2YXRlIGNyZWF0ZU9udG9sb2d5Q29udGVudChwcmVmaXg6IE9udG9sb2d5UHJlZml4KTogc3RyaW5nIHtcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IHRoaXMuZ2VuZXJhdGVEaXNwbGF5TmFtZShwcmVmaXgpO1xuICAgIHJldHVybiBgIyAke2Rpc3BsYXlOYW1lfVxuXG5UaGlzIG9udG9sb2d5IHdhcyBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQgdG8gc3VwcG9ydCBhc3NldCBjcmVhdGlvbi5cblxuIyMgTmFtZXNwYWNlXG5cbi0gKipQcmVmaXgqKjogXFxgJHtwcmVmaXgudG9TdHJpbmcoKX1cXGBcbi0gKipTdGF0dXMqKjogQWN0aXZlXG4tICoqQ3JlYXRlZCoqOiAke25ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XG5cbiMjIFVzYWdlXG5cblRoaXMgb250b2xvZ3kgcHJvdmlkZXMgYSBuYW1lc3BhY2UgZm9yIG9yZ2FuaXppbmcgcmVsYXRlZCBhc3NldHMgYW5kIGNsYXNzZXMgd2l0aGluIHRoZSBFeG9jb3J0ZXgga25vd2xlZGdlIGdyYXBoLlxuXG4jIyBDbGFzc2VzXG5cbkNsYXNzZXMgaW4gdGhpcyBvbnRvbG9neSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGlzY292ZXJlZCBmcm9tIHlvdXIgdmF1bHQuXG5cbiMjIFByb3BlcnRpZXNcblxuUHJvcGVydGllcyBpbiB0aGlzIG9udG9sb2d5IHdpbGwgYmUgYXV0b21hdGljYWxseSBkaXNjb3ZlcmVkIGZyb20geW91ciB2YXVsdC5cbmA7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGh1bWFuLXJlYWRhYmxlIGRpc3BsYXkgbmFtZSBmcm9tIHByZWZpeFxuICAgKi9cbiAgcHJpdmF0ZSBnZW5lcmF0ZURpc3BsYXlOYW1lKHByZWZpeDogT250b2xvZ3lQcmVmaXgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHByZWZpeFN0ciA9IHByZWZpeC50b1N0cmluZygpO1xuICAgIFxuICAgIC8vIEhhbmRsZSBjb21tb24gYWJicmV2aWF0aW9uc1xuICAgIGNvbnN0IGFiYnJldmlhdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAndWknOiAnVXNlciBJbnRlcmZhY2UnLFxuICAgICAgJ2FwaSc6ICdBcHBsaWNhdGlvbiBQcm9ncmFtbWluZyBJbnRlcmZhY2UnLFxuICAgICAgJ2RiJzogJ0RhdGFiYXNlJyxcbiAgICAgICdhdXRoJzogJ0F1dGhlbnRpY2F0aW9uJyxcbiAgICAgICdzeXMnOiAnU3lzdGVtJyxcbiAgICAgICdwcm9jJzogJ1Byb2Nlc3MnLFxuICAgICAgJ21nbXQnOiAnTWFuYWdlbWVudCcsXG4gICAgICAnY2ZnJzogJ0NvbmZpZ3VyYXRpb24nLFxuICAgIH07XG5cbiAgICBpZiAoYWJicmV2aWF0aW9uc1twcmVmaXhTdHIudG9Mb3dlckNhc2UoKV0pIHtcbiAgICAgIHJldHVybiBhYmJyZXZpYXRpb25zW3ByZWZpeFN0ci50b0xvd2VyQ2FzZSgpXTtcbiAgICB9XG5cbiAgICAvLyBDb252ZXJ0IGNhbWVsQ2FzZSBvciBzbmFrZV9jYXNlIHRvIHRpdGxlIGNhc2VcbiAgICByZXR1cm4gcHJlZml4U3RyXG4gICAgICAucmVwbGFjZSgvKFtBLVpdKS9nLCAnICQxJylcbiAgICAgIC5yZXBsYWNlKC9fL2csICcgJylcbiAgICAgIC5zcGxpdCgnICcpXG4gICAgICAubWFwKHdvcmQgPT4gd29yZC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSlcbiAgICAgIC5qb2luKCcgJylcbiAgICAgIC50cmltKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgZnJvbnRtYXR0ZXIgb2JqZWN0IHRvIFlBTUwgc3RyaW5nXG4gICAqL1xuICBwcml2YXRlIHN0cmluZ2lmeUZyb250bWF0dGVyKGZyb250bWF0dGVyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoZnJvbnRtYXR0ZXIpXG4gICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gYCR7a2V5fTogXCIke3ZhbHVlfVwiYDtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBgJHtrZXl9OiBbJHt2YWx1ZS5tYXAodiA9PiBgXCIke3Z9XCJgKS5qb2luKCcsICcpfV1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBgJHtrZXl9OiAke3ZhbHVlfWA7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuam9pbignXFxuJyk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIGlmIG9udG9sb2d5IGNhbiBiZSBhdXRvLXByb3Zpc2lvbmVkXG4gICAqIEBwYXJhbSBwcmVmaXggVGhlIG9udG9sb2d5IHByZWZpeCB0byBjaGVja1xuICAgKiBAcmV0dXJucyBWYWxpZGF0aW9uIHJlc3VsdCB3aXRoIGRldGFpbHNcbiAgICovXG4gIGFzeW5jIGNhblByb3Zpc2lvbk9udG9sb2d5KHByZWZpeDogc3RyaW5nKTogUHJvbWlzZTx7XG4gICAgY2FuUHJvdmlzaW9uOiBib29sZWFuO1xuICAgIHJlYXNvbnM6IHN0cmluZ1tdO1xuICB9PiB7XG4gICAgY29uc3QgcmVhc29uczogc3RyaW5nW10gPSBbXTtcblxuICAgIC8vIENoZWNrIHByZWZpeCB2YWxpZGl0eVxuICAgIGNvbnN0IHByZWZpeFJlc3VsdCA9IE9udG9sb2d5UHJlZml4LmNyZWF0ZShwcmVmaXgpO1xuICAgIGlmICghcHJlZml4UmVzdWx0LmlzU3VjY2Vzcykge1xuICAgICAgcmVhc29ucy5wdXNoKGBJbnZhbGlkIHByZWZpeCBmb3JtYXQ6ICR7cHJlZml4UmVzdWx0LmdldEVycm9yKCl9YCk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgZmlsZSB3b3VsZCBjb25mbGljdFxuICAgIGNvbnN0IGZpbGVOYW1lID0gYCEke3ByZWZpeH0ubWRgO1xuICAgIGNvbnN0IGV4aXN0cyA9IGF3YWl0IHRoaXMudmF1bHRBZGFwdGVyLmV4aXN0cyhmaWxlTmFtZSk7XG4gICAgaWYgKGV4aXN0cykge1xuICAgICAgcmVhc29ucy5wdXNoKGBPbnRvbG9neSBmaWxlIGFscmVhZHkgZXhpc3RzOiAke2ZpbGVOYW1lfWApO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciByZXNlcnZlZCBwcmVmaXhlc1xuICAgIGNvbnN0IHJlc2VydmVkUHJlZml4ZXMgPSBbJ3JkZicsICdyZGZzJywgJ293bCcsICd4c2QnLCAnZm9hZiddO1xuICAgIGlmIChyZXNlcnZlZFByZWZpeGVzLmluY2x1ZGVzKHByZWZpeC50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgcmVhc29ucy5wdXNoKGBDYW5ub3QgcHJvdmlzaW9uIHJlc2VydmVkIHByZWZpeDogJHtwcmVmaXh9YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNhblByb3Zpc2lvbjogcmVhc29ucy5sZW5ndGggPT09IDAsXG4gICAgICByZWFzb25zLFxuICAgIH07XG4gIH1cbn0iXSwidmVyc2lvbiI6M30=