{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/services/OntologyProvisioningService.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/services/OntologyProvisioningService.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\nimport { OntologyPrefix } from \"../value-objects/OntologyPrefix\";\nimport { IOntologyRepository } from \"../repositories/IOntologyRepository\";\nimport { IVaultAdapter } from \"../../application/ports/IVaultAdapter\";\n\n/**\n * Domain service for auto-provisioning missing ontologies\n * Follows Domain-Driven Design patterns\n */\nexport class OntologyProvisioningService {\n  constructor(\n    private readonly ontologyRepository: IOntologyRepository,\n    private readonly vaultAdapter: IVaultAdapter,\n  ) {}\n\n  /**\n   * Ensures ontology exists, creating it if necessary\n   * @param prefix The ontology prefix to provision\n   * @returns Result indicating success or failure\n   */\n  async ensureOntologyExists(prefix: string): Promise<Result<OntologyPrefix>> {\n    // Validate prefix format\n    const prefixResult = OntologyPrefix.create(prefix);\n    if (!prefixResult.isSuccess) {\n      return Result.fail<OntologyPrefix>(\n        `Invalid ontology prefix: ${prefixResult.getError()}`,\n      );\n    }\n\n    const ontologyPrefix = prefixResult.getValue()!;\n\n    // Check if ontology already exists\n    const existingOntology =\n      await this.ontologyRepository.findByPrefix(ontologyPrefix);\n    if (existingOntology) {\n      return Result.ok<OntologyPrefix>(ontologyPrefix);\n    }\n\n    // Auto-provision the ontology\n    const provisionResult = await this.provisionOntology(ontologyPrefix);\n    if (!provisionResult.isSuccess) {\n      return Result.fail<OntologyPrefix>(\n        `Failed to provision ontology: ${provisionResult.getError()}`,\n      );\n    }\n\n    return Result.ok<OntologyPrefix>(ontologyPrefix);\n  }\n\n  /**\n   * Creates a new ontology file with proper structure\n   * @param prefix The ontology prefix\n   * @returns Result indicating success or failure\n   */\n  private async provisionOntology(\n    prefix: OntologyPrefix,\n  ): Promise<Result<void>> {\n    try {\n      const fileName = `!${prefix.toString()}.md`;\n      const frontmatter = this.createOntologyFrontmatter(prefix);\n      const content = this.createOntologyContent(prefix);\n\n      const fullContent = `---\n${this.stringifyFrontmatter(frontmatter)}\n---\n\n${content}`;\n\n      // Create the ontology file\n      await this.vaultAdapter.create(fileName, fullContent);\n\n      // Register with repository\n      const ontology = await this.ontologyRepository.findByPrefix(prefix);\n      if (!ontology) {\n        return Result.fail<void>(\n          \"Failed to register newly created ontology\",\n        );\n      }\n\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(\n        `Ontology provisioning failed: ${error instanceof Error ? error.message : String(error)}`,\n      );\n    }\n  }\n\n  /**\n   * Creates proper frontmatter for ontology files\n   */\n  private createOntologyFrontmatter(\n    prefix: OntologyPrefix,\n  ): Record<string, any> {\n    return {\n      exo__Ontology_prefix: prefix.toString(),\n      exo__Instance_class: \"[[exo__Ontology]]\",\n      rdfs__label: this.generateDisplayName(prefix),\n      rdfs__comment: `Auto-provisioned ontology for ${prefix.toString()} namespace`,\n      exo__Ontology_createdAt: new Date().toISOString().replace(/\\.\\d{3}Z$/, \"\"),\n      exo__Ontology_version: \"1.0.0\",\n      exo__Ontology_status: \"active\",\n    };\n  }\n\n  /**\n   * Creates readable content for ontology files\n   */\n  private createOntologyContent(prefix: OntologyPrefix): string {\n    const displayName = this.generateDisplayName(prefix);\n    return `# ${displayName}\n\nThis ontology was automatically created to support asset creation.\n\n## Namespace\n\n- **Prefix**: \\`${prefix.toString()}\\`\n- **Status**: Active\n- **Created**: ${new Date().toLocaleDateString()}\n\n## Usage\n\nThis ontology provides a namespace for organizing related assets and classes within the Exocortex knowledge graph.\n\n## Classes\n\nClasses in this ontology will be automatically discovered from your vault.\n\n## Properties\n\nProperties in this ontology will be automatically discovered from your vault.\n`;\n  }\n\n  /**\n   * Generates human-readable display name from prefix\n   */\n  private generateDisplayName(prefix: OntologyPrefix): string {\n    const prefixStr = prefix.toString();\n    \n    // Handle common abbreviations\n    const abbreviations: Record<string, string> = {\n      'ui': 'User Interface',\n      'api': 'Application Programming Interface',\n      'db': 'Database',\n      'auth': 'Authentication',\n      'sys': 'System',\n      'proc': 'Process',\n      'mgmt': 'Management',\n      'cfg': 'Configuration',\n    };\n\n    if (abbreviations[prefixStr.toLowerCase()]) {\n      return abbreviations[prefixStr.toLowerCase()];\n    }\n\n    // Convert camelCase or snake_case to title case\n    return prefixStr\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/_/g, ' ')\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n      .join(' ')\n      .trim();\n  }\n\n  /**\n   * Converts frontmatter object to YAML string\n   */\n  private stringifyFrontmatter(frontmatter: Record<string, any>): string {\n    return Object.entries(frontmatter)\n      .map(([key, value]) => {\n        if (typeof value === 'string') {\n          return `${key}: \"${value}\"`;\n        } else if (Array.isArray(value)) {\n          return `${key}: [${value.map(v => `\"${v}\"`).join(', ')}]`;\n        } else {\n          return `${key}: ${value}`;\n        }\n      })\n      .join('\\n');\n  }\n\n  /**\n   * Validates if ontology can be auto-provisioned\n   * @param prefix The ontology prefix to check\n   * @returns Validation result with details\n   */\n  async canProvisionOntology(prefix: string): Promise<{\n    canProvision: boolean;\n    reasons: string[];\n  }> {\n    const reasons: string[] = [];\n\n    // Check prefix validity\n    const prefixResult = OntologyPrefix.create(prefix);\n    if (!prefixResult.isSuccess) {\n      reasons.push(`Invalid prefix format: ${prefixResult.getError()}`);\n    }\n\n    // Check if file would conflict\n    const fileName = `!${prefix}.md`;\n    const exists = await this.vaultAdapter.exists(fileName);\n    if (exists) {\n      reasons.push(`Ontology file already exists: ${fileName}`);\n    }\n\n    // Check for reserved prefixes\n    const reservedPrefixes = ['rdf', 'rdfs', 'owl', 'xsd', 'foaf'];\n    if (reservedPrefixes.includes(prefix.toLowerCase())) {\n      reasons.push(`Cannot provision reserved prefix: ${prefix}`);\n    }\n\n    return {\n      canProvision: reasons.length === 0,\n      reasons,\n    };\n  }\n}"],"version":3}