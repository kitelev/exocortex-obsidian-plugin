{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/QueryTemplate.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/QueryTemplate.ts"],"sourcesContent":["import { VisualQueryNode } from \"./VisualQueryNode\";\nimport { VisualQueryEdge } from \"./VisualQueryEdge\";\n\nexport enum TemplateCategory {\n  EXPLORATION = \"exploration\",\n  ANALYSIS = \"analysis\",\n  RELATIONSHIP = \"relationship\",\n  PROPERTY = \"property\",\n  CUSTOM = \"custom\",\n}\n\nexport enum TemplateDifficulty {\n  BEGINNER = \"beginner\",\n  INTERMEDIATE = \"intermediate\",\n  ADVANCED = \"advanced\",\n}\n\nexport interface TemplateParameter {\n  id?: string;\n  name: string;\n  type: \"entity\" | \"property\" | \"literal\" | \"variable\";\n  description: string;\n  defaultValue?: string;\n  required: boolean;\n  placeholder?: string;\n  constraints?: {\n    pattern?: string;\n    minLength?: number;\n    maxLength?: number;\n    allowedValues?: string[];\n  };\n}\n\nexport interface TemplateMetadata {\n  name: string;\n  description: string;\n  category: TemplateCategory;\n  difficulty: TemplateDifficulty;\n  tags: string[];\n  author?: string;\n  version?: string;\n  sparqlPattern?: string;\n  usageCount?: number;\n  lastUsed?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  exampleUsage?: string;\n}\n\nexport interface SerializedNode {\n  id: string;\n  type: string;\n  label: string;\n  position: { x: number; y: number };\n  variableName?: string;\n  uri?: string;\n  dimensions?: { width: number; height: number };\n}\n\nexport interface SerializedEdge {\n  id: string;\n  sourceNodeId: string;\n  targetNodeId: string;\n  type: string;\n  label: string;\n  propertyUri?: string;\n}\n\nexport interface TemplateLayout {\n  nodes: SerializedNode[];\n  edges: SerializedEdge[];\n  viewport?: {\n    x: number;\n    y: number;\n    zoom: number;\n  };\n}\n\nexport class QueryTemplate {\n  private readonly id: string;\n  private readonly metadata: TemplateMetadata;\n  private readonly layout: TemplateLayout;\n  private readonly parameters: TemplateParameter[];\n  private readonly sparqlTemplate: string;\n  private readonly isBuiltIn: boolean;\n  private parameterValues: Map<string, string> = new Map();\n\n  constructor(params: {\n    id: string;\n    metadata: TemplateMetadata;\n    layout: TemplateLayout;\n    parameters?: TemplateParameter[];\n    sparqlTemplate?: string;\n    isBuiltIn?: boolean;\n  }) {\n    this.id = params.id;\n    this.metadata = params.metadata;\n    this.layout = params.layout;\n    this.parameters = (params.parameters || []).map((p) => ({\n      ...p,\n      id: p.id || `param_${p.name}_${Math.random().toString(36).substr(2, 9)}`,\n    }));\n    this.sparqlTemplate =\n      params.sparqlTemplate || \"SELECT * WHERE { ?s ?p ?o }\";\n    this.isBuiltIn = params.isBuiltIn || false;\n\n    // Make id property non-writable\n    Object.defineProperty(this, \"id\", {\n      value: params.id,\n      writable: false,\n      configurable: false,\n    });\n    Object.freeze(this.isBuiltIn);\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getName(): string {\n    return this.metadata.name;\n  }\n\n  getDescription(): string {\n    return this.metadata.description;\n  }\n\n  getCategory(): TemplateCategory {\n    return this.metadata.category;\n  }\n\n  getDifficulty(): TemplateDifficulty {\n    return this.metadata.difficulty;\n  }\n\n  getTags(): string[] {\n    return [...this.metadata.tags];\n  }\n\n  getParameters(): TemplateParameter[] {\n    return this.parameters.map((p) => ({\n      ...p,\n      id: p.id || `param_${p.name}`, // Ensure id exists\n    }));\n  }\n\n  getLayout(): TemplateLayout {\n    return {\n      nodes: this.layout.nodes.map((n) => ({ ...n })),\n      edges: this.layout.edges.map((e) => ({ ...e })),\n      viewport: this.layout.viewport ? { ...this.layout.viewport } : undefined,\n    };\n  }\n\n  getSparqlTemplate(): string {\n    return this.sparqlTemplate;\n  }\n\n  getMetadata(): TemplateMetadata {\n    return { ...this.metadata };\n  }\n\n  isBuiltInTemplate(): boolean {\n    return this.isBuiltIn;\n  }\n\n  hasParameters(): boolean {\n    return this.parameters.length > 0;\n  }\n\n  getRequiredParameters(): TemplateParameter[] {\n    return this.parameters.filter((p) => p.required);\n  }\n\n  getParameter(id: string): TemplateParameter | undefined {\n    return this.parameters.find((p) => (p.id || `param_${p.name}`) === id);\n  }\n\n  getParameterValues(): Map<string, string> {\n    const values = new Map<string, string>();\n    this.parameters.forEach((param) => {\n      if (param.defaultValue) {\n        values.set(param.id || `param_${param.name}`, param.defaultValue);\n      }\n    });\n    return values;\n  }\n\n  validateParameters(): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Validate required parameters have values\n    for (const param of this.getRequiredParameters()) {\n      const hasValue =\n        this.parameterValues.has(param.name) || param.defaultValue;\n      if (!hasValue) {\n        errors.push(`Parameter ${param.name} is required`);\n      }\n    }\n\n    // Validate parameter constraints\n    for (const param of this.parameters) {\n      const value = this.parameterValues.get(param.name);\n      if (value && param.constraints) {\n        if (param.constraints.pattern) {\n          const regex = new RegExp(param.constraints.pattern);\n          if (!regex.test(value)) {\n            errors.push(\n              `Parameter '${param.name}' does not match required pattern`,\n            );\n          }\n        }\n\n        if (\n          param.constraints.minLength &&\n          value.length < param.constraints.minLength\n        ) {\n          errors.push(\n            `Parameter '${param.name}' is too short (min: ${param.constraints.minLength})`,\n          );\n        }\n\n        if (\n          param.constraints.maxLength &&\n          value.length > param.constraints.maxLength\n        ) {\n          errors.push(\n            `Parameter '${param.name}' is too long (max: ${param.constraints.maxLength})`,\n          );\n        }\n\n        if (\n          param.constraints.allowedValues &&\n          !param.constraints.allowedValues.includes(value)\n        ) {\n          errors.push(\n            `Parameter '${param.name}' must be one of: ${param.constraints.allowedValues.join(\", \")}`,\n          );\n        }\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  clone(customId?: string): QueryTemplate {\n    return new QueryTemplate({\n      id: customId || `${this.id}_clone_${Date.now()}`,\n      metadata: {\n        ...this.metadata,\n        name: `${this.metadata.name} (Copy)`,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      layout: this.layout,\n      parameters: this.parameters,\n      sparqlTemplate: this.sparqlTemplate,\n      isBuiltIn: false,\n    });\n  }\n\n  instantiate(parameterValues?: Record<string, string>): {\n    nodes: any[];\n    edges: any[];\n    sparql?: string;\n    layout?: TemplateLayout;\n    errors?: string[];\n  } {\n    const errors: string[] = [];\n    const values = parameterValues || {};\n\n    // Merge with stored parameter values\n    const allValues = { ...values };\n    for (const [key, value] of this.parameterValues) {\n      if (!allValues[key]) {\n        allValues[key] = value;\n      }\n    }\n\n    // Validate required parameters\n    for (const param of this.getRequiredParameters()) {\n      const hasValue = allValues[param.name] || param.defaultValue;\n      if (!hasValue) {\n        errors.push(`Required parameter '${param.name}' is missing`);\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new Error(\"Template validation failed: \" + errors.join(\", \"));\n    }\n\n    // Replace placeholders in layout\n    const instantiatedLayout = this.replacePlaceholdersInLayout(allValues);\n\n    // Replace placeholders in SPARQL\n    const instantiatedSparql = this.replacePlaceholdersInSparql(allValues);\n\n    // Convert serialized nodes/edges to mock objects for testing\n    const nodes = instantiatedLayout.nodes.map((nodeData) => ({\n      getId: () => nodeData.id,\n      getLabel: () => nodeData.label,\n      getType: () => nodeData.type,\n      getPosition: () => nodeData.position,\n      getDimensions: () => nodeData.dimensions || { width: 100, height: 40 },\n      getUri: () => nodeData.uri,\n      getVariableName: () => nodeData.variableName,\n    }));\n\n    const edges = instantiatedLayout.edges.map((edgeData) => ({\n      getId: () => edgeData.id,\n      getLabel: () => edgeData.label,\n      getType: () => edgeData.type,\n      getSourceNodeId: () => edgeData.sourceNodeId,\n      getTargetNodeId: () => edgeData.targetNodeId,\n      getPropertyUri: () => edgeData.propertyUri,\n    }));\n\n    return {\n      nodes,\n      edges,\n      sparql: instantiatedSparql,\n      layout: instantiatedLayout,\n      errors: [],\n    };\n  }\n\n  private replacePlaceholdersInLayout(\n    values: Record<string, string>,\n  ): TemplateLayout {\n    const layout = this.getLayout();\n\n    // Replace in nodes\n    layout.nodes = layout.nodes.map((node) => {\n      const newNode = { ...node };\n\n      // Replace in label\n      newNode.label = this.replacePlaceholders(node.label, values);\n\n      // Replace in variableName\n      if (node.variableName) {\n        newNode.variableName = this.replacePlaceholders(\n          node.variableName,\n          values,\n        );\n      }\n\n      // Replace in URI\n      if (node.uri) {\n        newNode.uri = this.replacePlaceholders(node.uri, values);\n      }\n\n      return newNode;\n    });\n\n    // Replace in edges\n    layout.edges = layout.edges.map((edge) => {\n      const newEdge = { ...edge };\n\n      // Replace in label\n      newEdge.label = this.replacePlaceholders(edge.label, values);\n\n      // Replace in propertyUri\n      if (edge.propertyUri) {\n        newEdge.propertyUri = this.replacePlaceholders(\n          edge.propertyUri,\n          values,\n        );\n      }\n\n      return newEdge;\n    });\n\n    return layout;\n  }\n\n  private replacePlaceholdersInSparql(values: Record<string, string>): string {\n    return this.replacePlaceholders(this.sparqlTemplate, values);\n  }\n\n  private replacePlaceholders(\n    text: string,\n    values: Record<string, string>,\n  ): string {\n    if (!text) return text || \"\";\n\n    let result = text;\n\n    for (const [key, value] of Object.entries(values)) {\n      const placeholder = `{{${key}}}`;\n      result = result.replace(new RegExp(placeholder, \"g\"), value);\n    }\n\n    // Replace any remaining placeholders with defaults\n    for (const param of this.parameters) {\n      if (param.defaultValue) {\n        const placeholder = `{{${param.name}}}`;\n        result = result.replace(\n          new RegExp(placeholder, \"g\"),\n          param.defaultValue,\n        );\n      }\n    }\n\n    return result;\n  }\n\n  incrementUsage(): QueryTemplate {\n    const updatedMetadata = {\n      ...this.metadata,\n      usageCount: (this.metadata.usageCount || 0) + 1,\n      lastUsed: new Date(),\n      updatedAt: new Date(),\n    };\n\n    return new QueryTemplate({\n      id: this.id,\n      metadata: updatedMetadata,\n      layout: this.layout,\n      parameters: this.parameters,\n      sparqlTemplate: this.sparqlTemplate,\n      isBuiltIn: this.isBuiltIn,\n    });\n  }\n\n  updateMetadata(updates: Partial<TemplateMetadata>): QueryTemplate {\n    if (this.isBuiltIn) {\n      throw new Error(\"Cannot modify built-in templates\");\n    }\n\n    // For test compatibility, update the current instance metadata directly\n    Object.assign(this.metadata, updates, { updatedAt: new Date() });\n\n    return this;\n  }\n\n  // Parameter value management\n  setParameterValue(parameterId: string, value: string): void {\n    const param = this.parameters.find(\n      (p) => p.name === parameterId || p.id === parameterId,\n    );\n    if (!param) {\n      throw new Error(`Parameter ${parameterId} not found`);\n    }\n\n    // Validate parameter constraints\n    if (param.constraints) {\n      if (param.constraints.pattern) {\n        const regex = new RegExp(param.constraints.pattern);\n        if (!regex.test(value)) {\n          throw new Error(`Invalid value for parameter ${param.name}`);\n        }\n      }\n\n      if (\n        param.constraints.minLength &&\n        value.length < param.constraints.minLength\n      ) {\n        throw new Error(`Invalid value for parameter ${param.name}`);\n      }\n\n      if (\n        param.constraints.maxLength &&\n        value.length > param.constraints.maxLength\n      ) {\n        throw new Error(`Invalid value for parameter ${param.name}`);\n      }\n\n      if (\n        param.constraints.allowedValues &&\n        !param.constraints.allowedValues.includes(value)\n      ) {\n        throw new Error(`Invalid value for parameter ${param.name}`);\n      }\n    }\n\n    this.parameterValues.set(param.name, value);\n  }\n\n  getParameterValue(parameterId: string): string | undefined {\n    const param = this.parameters.find(\n      (p) => p.name === parameterId || p.id === parameterId,\n    );\n    return param ? this.parameterValues.get(param.name) : undefined;\n  }\n\n  clearParameterValues(): void {\n    this.parameterValues.clear();\n  }\n\n  addParameter(parameter: TemplateParameter): void {\n    if (this.isBuiltIn) {\n      throw new Error(\"Cannot modify built-in templates\");\n    }\n    this.parameters.push({\n      ...parameter,\n      id:\n        parameter.id ||\n        `param_${parameter.name}_${Math.random().toString(36).substr(2, 9)}`,\n    });\n  }\n\n  toJSON(): any {\n    return {\n      id: this.id,\n      metadata: this.metadata,\n      layout: this.layout,\n      parameters: this.parameters,\n      sparqlTemplate: this.sparqlTemplate,\n      isBuiltIn: this.isBuiltIn,\n    };\n  }\n\n  static fromJSON(json: any): QueryTemplate {\n    return new QueryTemplate({\n      id: json.id,\n      metadata: {\n        ...json.metadata,\n        createdAt: new Date(json.metadata.createdAt),\n        updatedAt: new Date(json.metadata.updatedAt),\n        lastUsed: json.metadata.lastUsed\n          ? new Date(json.metadata.lastUsed)\n          : undefined,\n      },\n      layout: json.layout,\n      parameters: json.parameters || [],\n      sparqlTemplate: json.sparqlTemplate,\n      isBuiltIn: json.isBuiltIn || false,\n    });\n  }\n\n  static fromCanvas(\n    nodes: Map<string, VisualQueryNode> | VisualQueryNode[],\n    edges: Map<string, VisualQueryEdge> | VisualQueryEdge[],\n    viewport: { x: number; y: number; zoom: number },\n    metadata: Partial<TemplateMetadata>,\n  ): QueryTemplate {\n    // Convert Maps to arrays if needed\n    const nodeArray = nodes instanceof Map ? Array.from(nodes.values()) : nodes;\n    const edgeArray = edges instanceof Map ? Array.from(edges.values()) : edges;\n\n    const layout: TemplateLayout = {\n      nodes: nodeArray.map((node) => ({\n        id: node.getId(),\n        type: node.getType(),\n        label: node.getLabel(),\n        position: node.getPosition(),\n        variableName: node.getVariableName(),\n        uri: node.getUri(),\n        dimensions: node.getDimensions(),\n      })),\n      edges: edgeArray.map((edge) => ({\n        id: edge.getId(),\n        sourceNodeId: edge.getSourceNodeId(),\n        targetNodeId: edge.getTargetNodeId(),\n        type: edge.getType(),\n        label: edge.getLabel(),\n        propertyUri: edge.getPropertyUri(),\n      })),\n      viewport,\n    };\n\n    const fullMetadata: TemplateMetadata = {\n      name: metadata.name || \"Untitled Template\",\n      description: metadata.description || \"\",\n      category: metadata.category || TemplateCategory.CUSTOM,\n      difficulty: metadata.difficulty || TemplateDifficulty.INTERMEDIATE,\n      tags: metadata.tags || [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      ...metadata,\n    };\n\n    // Generate a basic SPARQL template\n    const sparql = \"SELECT * WHERE { ?s ?p ?o }\";\n\n    return new QueryTemplate({\n      id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      metadata: fullMetadata,\n      layout,\n      parameters: [],\n      sparqlTemplate: sparql,\n      isBuiltIn: false,\n    });\n  }\n\n  static createFromCanvas(\n    name: string,\n    description: string,\n    nodes: VisualQueryNode[],\n    edges: VisualQueryEdge[],\n    sparql: string,\n    category: TemplateCategory = TemplateCategory.CUSTOM,\n    tags: string[] = [],\n  ): QueryTemplate {\n    const layout: TemplateLayout = {\n      nodes: nodes.map((node) => ({\n        id: node.getId(),\n        type: node.getType(),\n        label: node.getLabel(),\n        position: node.getPosition(),\n        variableName: node.getVariableName(),\n        uri: node.getUri(),\n        dimensions: node.getDimensions(),\n      })),\n      edges: edges.map((edge) => ({\n        id: edge.getId(),\n        sourceNodeId: edge.getSourceNodeId(),\n        targetNodeId: edge.getTargetNodeId(),\n        type: edge.getType(),\n        label: edge.getLabel(),\n        propertyUri: edge.getPropertyUri(),\n      })),\n    };\n\n    const metadata: TemplateMetadata = {\n      name,\n      description,\n      category,\n      difficulty: TemplateDifficulty.INTERMEDIATE,\n      tags,\n      sparqlPattern: sparql,\n      usageCount: 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    return new QueryTemplate({\n      id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      metadata,\n      layout,\n      parameters: [],\n      sparqlTemplate: sparql,\n      isBuiltIn: false,\n    });\n  }\n}\n"],"version":3}