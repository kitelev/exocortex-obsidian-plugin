277288ce3d9ae286646237fc727ae8c4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryTemplate = exports.TemplateDifficulty = exports.TemplateCategory = void 0;
var TemplateCategory;
(function (TemplateCategory) {
    TemplateCategory["EXPLORATION"] = "exploration";
    TemplateCategory["ANALYSIS"] = "analysis";
    TemplateCategory["RELATIONSHIP"] = "relationship";
    TemplateCategory["PROPERTY"] = "property";
    TemplateCategory["CUSTOM"] = "custom";
})(TemplateCategory = exports.TemplateCategory || (exports.TemplateCategory = {}));
var TemplateDifficulty;
(function (TemplateDifficulty) {
    TemplateDifficulty["BEGINNER"] = "beginner";
    TemplateDifficulty["INTERMEDIATE"] = "intermediate";
    TemplateDifficulty["ADVANCED"] = "advanced";
})(TemplateDifficulty = exports.TemplateDifficulty || (exports.TemplateDifficulty = {}));
class QueryTemplate {
    constructor(params) {
        this.parameterValues = new Map();
        this.id = params.id;
        this.metadata = params.metadata;
        this.layout = params.layout;
        this.parameters = (params.parameters || []).map((p) => ({
            ...p,
            id: p.id || `param_${p.name}_${Math.random().toString(36).substr(2, 9)}`,
        }));
        this.sparqlTemplate =
            params.sparqlTemplate || "SELECT * WHERE { ?s ?p ?o }";
        this.isBuiltIn = params.isBuiltIn || false;
        // Make id property non-writable
        Object.defineProperty(this, "id", {
            value: params.id,
            writable: false,
            configurable: false,
        });
        Object.freeze(this.isBuiltIn);
    }
    getId() {
        return this.id;
    }
    getName() {
        return this.metadata.name;
    }
    getDescription() {
        return this.metadata.description;
    }
    getCategory() {
        return this.metadata.category;
    }
    getDifficulty() {
        return this.metadata.difficulty;
    }
    getTags() {
        return [...this.metadata.tags];
    }
    getParameters() {
        return this.parameters.map((p) => ({
            ...p,
            id: p.id || `param_${p.name}`, // Ensure id exists
        }));
    }
    getLayout() {
        return {
            nodes: this.layout.nodes.map((n) => ({ ...n })),
            edges: this.layout.edges.map((e) => ({ ...e })),
            viewport: this.layout.viewport ? { ...this.layout.viewport } : undefined,
        };
    }
    getSparqlTemplate() {
        return this.sparqlTemplate;
    }
    getMetadata() {
        return { ...this.metadata };
    }
    isBuiltInTemplate() {
        return this.isBuiltIn;
    }
    hasParameters() {
        return this.parameters.length > 0;
    }
    getRequiredParameters() {
        return this.parameters.filter((p) => p.required);
    }
    getParameter(id) {
        return this.parameters.find((p) => (p.id || `param_${p.name}`) === id);
    }
    getParameterValues() {
        const values = new Map();
        this.parameters.forEach((param) => {
            if (param.defaultValue) {
                values.set(param.id || `param_${param.name}`, param.defaultValue);
            }
        });
        return values;
    }
    validateParameters() {
        const errors = [];
        // Validate required parameters have values
        for (const param of this.getRequiredParameters()) {
            const hasValue = this.parameterValues.has(param.name) || param.defaultValue;
            if (!hasValue) {
                errors.push(`Parameter ${param.name} is required`);
            }
        }
        // Validate parameter constraints
        for (const param of this.parameters) {
            const value = this.parameterValues.get(param.name);
            if (value && param.constraints) {
                if (param.constraints.pattern) {
                    const regex = new RegExp(param.constraints.pattern);
                    if (!regex.test(value)) {
                        errors.push(`Parameter '${param.name}' does not match required pattern`);
                    }
                }
                if (param.constraints.minLength &&
                    value.length < param.constraints.minLength) {
                    errors.push(`Parameter '${param.name}' is too short (min: ${param.constraints.minLength})`);
                }
                if (param.constraints.maxLength &&
                    value.length > param.constraints.maxLength) {
                    errors.push(`Parameter '${param.name}' is too long (max: ${param.constraints.maxLength})`);
                }
                if (param.constraints.allowedValues &&
                    !param.constraints.allowedValues.includes(value)) {
                    errors.push(`Parameter '${param.name}' must be one of: ${param.constraints.allowedValues.join(", ")}`);
                }
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
        };
    }
    clone(customId) {
        return new QueryTemplate({
            id: customId || `${this.id}_clone_${Date.now()}`,
            metadata: {
                ...this.metadata,
                name: `${this.metadata.name} (Copy)`,
                createdAt: new Date(),
                updatedAt: new Date(),
            },
            layout: this.layout,
            parameters: this.parameters,
            sparqlTemplate: this.sparqlTemplate,
            isBuiltIn: false,
        });
    }
    instantiate(parameterValues) {
        const errors = [];
        const values = parameterValues || {};
        // Merge with stored parameter values
        const allValues = { ...values };
        for (const [key, value] of this.parameterValues) {
            if (!allValues[key]) {
                allValues[key] = value;
            }
        }
        // Validate required parameters
        for (const param of this.getRequiredParameters()) {
            const hasValue = allValues[param.name] || param.defaultValue;
            if (!hasValue) {
                errors.push(`Required parameter '${param.name}' is missing`);
            }
        }
        if (errors.length > 0) {
            throw new Error("Template validation failed: " + errors.join(", "));
        }
        // Replace placeholders in layout
        const instantiatedLayout = this.replacePlaceholdersInLayout(allValues);
        // Replace placeholders in SPARQL
        const instantiatedSparql = this.replacePlaceholdersInSparql(allValues);
        // Convert serialized nodes/edges to mock objects for testing
        const nodes = instantiatedLayout.nodes.map((nodeData) => ({
            getId: () => nodeData.id,
            getLabel: () => nodeData.label,
            getType: () => nodeData.type,
            getPosition: () => nodeData.position,
            getDimensions: () => nodeData.dimensions || { width: 100, height: 40 },
            getUri: () => nodeData.uri,
            getVariableName: () => nodeData.variableName,
        }));
        const edges = instantiatedLayout.edges.map((edgeData) => ({
            getId: () => edgeData.id,
            getLabel: () => edgeData.label,
            getType: () => edgeData.type,
            getSourceNodeId: () => edgeData.sourceNodeId,
            getTargetNodeId: () => edgeData.targetNodeId,
            getPropertyUri: () => edgeData.propertyUri,
        }));
        return {
            nodes,
            edges,
            sparql: instantiatedSparql,
            layout: instantiatedLayout,
            errors: [],
        };
    }
    replacePlaceholdersInLayout(values) {
        const layout = this.getLayout();
        // Replace in nodes
        layout.nodes = layout.nodes.map((node) => {
            const newNode = { ...node };
            // Replace in label
            newNode.label = this.replacePlaceholders(node.label, values);
            // Replace in variableName
            if (node.variableName) {
                newNode.variableName = this.replacePlaceholders(node.variableName, values);
            }
            // Replace in URI
            if (node.uri) {
                newNode.uri = this.replacePlaceholders(node.uri, values);
            }
            return newNode;
        });
        // Replace in edges
        layout.edges = layout.edges.map((edge) => {
            const newEdge = { ...edge };
            // Replace in label
            newEdge.label = this.replacePlaceholders(edge.label, values);
            // Replace in propertyUri
            if (edge.propertyUri) {
                newEdge.propertyUri = this.replacePlaceholders(edge.propertyUri, values);
            }
            return newEdge;
        });
        return layout;
    }
    replacePlaceholdersInSparql(values) {
        return this.replacePlaceholders(this.sparqlTemplate, values);
    }
    replacePlaceholders(text, values) {
        if (!text)
            return text || "";
        let result = text;
        for (const [key, value] of Object.entries(values)) {
            const placeholder = `{{${key}}}`;
            result = result.replace(new RegExp(placeholder, "g"), value);
        }
        // Replace any remaining placeholders with defaults
        for (const param of this.parameters) {
            if (param.defaultValue) {
                const placeholder = `{{${param.name}}}`;
                result = result.replace(new RegExp(placeholder, "g"), param.defaultValue);
            }
        }
        return result;
    }
    incrementUsage() {
        const updatedMetadata = {
            ...this.metadata,
            usageCount: (this.metadata.usageCount || 0) + 1,
            lastUsed: new Date(),
            updatedAt: new Date(),
        };
        return new QueryTemplate({
            id: this.id,
            metadata: updatedMetadata,
            layout: this.layout,
            parameters: this.parameters,
            sparqlTemplate: this.sparqlTemplate,
            isBuiltIn: this.isBuiltIn,
        });
    }
    updateMetadata(updates) {
        if (this.isBuiltIn) {
            throw new Error("Cannot modify built-in templates");
        }
        // For test compatibility, update the current instance metadata directly
        Object.assign(this.metadata, updates, { updatedAt: new Date() });
        return this;
    }
    // Parameter value management
    setParameterValue(parameterId, value) {
        const param = this.parameters.find((p) => p.name === parameterId || p.id === parameterId);
        if (!param) {
            throw new Error(`Parameter ${parameterId} not found`);
        }
        // Validate parameter constraints
        if (param.constraints) {
            if (param.constraints.pattern) {
                const regex = new RegExp(param.constraints.pattern);
                if (!regex.test(value)) {
                    throw new Error(`Invalid value for parameter ${param.name}`);
                }
            }
            if (param.constraints.minLength &&
                value.length < param.constraints.minLength) {
                throw new Error(`Invalid value for parameter ${param.name}`);
            }
            if (param.constraints.maxLength &&
                value.length > param.constraints.maxLength) {
                throw new Error(`Invalid value for parameter ${param.name}`);
            }
            if (param.constraints.allowedValues &&
                !param.constraints.allowedValues.includes(value)) {
                throw new Error(`Invalid value for parameter ${param.name}`);
            }
        }
        this.parameterValues.set(param.name, value);
    }
    getParameterValue(parameterId) {
        const param = this.parameters.find((p) => p.name === parameterId || p.id === parameterId);
        return param ? this.parameterValues.get(param.name) : undefined;
    }
    clearParameterValues() {
        this.parameterValues.clear();
    }
    addParameter(parameter) {
        if (this.isBuiltIn) {
            throw new Error("Cannot modify built-in templates");
        }
        this.parameters.push({
            ...parameter,
            id: parameter.id ||
                `param_${parameter.name}_${Math.random().toString(36).substr(2, 9)}`,
        });
    }
    toJSON() {
        return {
            id: this.id,
            metadata: this.metadata,
            layout: this.layout,
            parameters: this.parameters,
            sparqlTemplate: this.sparqlTemplate,
            isBuiltIn: this.isBuiltIn,
        };
    }
    static fromJSON(json) {
        return new QueryTemplate({
            id: json.id,
            metadata: {
                ...json.metadata,
                createdAt: new Date(json.metadata.createdAt),
                updatedAt: new Date(json.metadata.updatedAt),
                lastUsed: json.metadata.lastUsed
                    ? new Date(json.metadata.lastUsed)
                    : undefined,
            },
            layout: json.layout,
            parameters: json.parameters || [],
            sparqlTemplate: json.sparqlTemplate,
            isBuiltIn: json.isBuiltIn || false,
        });
    }
    static fromCanvas(nodes, edges, viewport, metadata) {
        // Convert Maps to arrays if needed
        const nodeArray = nodes instanceof Map ? Array.from(nodes.values()) : nodes;
        const edgeArray = edges instanceof Map ? Array.from(edges.values()) : edges;
        const layout = {
            nodes: nodeArray.map((node) => ({
                id: node.getId(),
                type: node.getType(),
                label: node.getLabel(),
                position: node.getPosition(),
                variableName: node.getVariableName(),
                uri: node.getUri(),
                dimensions: node.getDimensions(),
            })),
            edges: edgeArray.map((edge) => ({
                id: edge.getId(),
                sourceNodeId: edge.getSourceNodeId(),
                targetNodeId: edge.getTargetNodeId(),
                type: edge.getType(),
                label: edge.getLabel(),
                propertyUri: edge.getPropertyUri(),
            })),
            viewport,
        };
        const fullMetadata = {
            name: metadata.name || "Untitled Template",
            description: metadata.description || "",
            category: metadata.category || TemplateCategory.CUSTOM,
            difficulty: metadata.difficulty || TemplateDifficulty.INTERMEDIATE,
            tags: metadata.tags || [],
            createdAt: new Date(),
            updatedAt: new Date(),
            ...metadata,
        };
        // Generate a basic SPARQL template
        const sparql = "SELECT * WHERE { ?s ?p ?o }";
        return new QueryTemplate({
            id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            metadata: fullMetadata,
            layout,
            parameters: [],
            sparqlTemplate: sparql,
            isBuiltIn: false,
        });
    }
    static createFromCanvas(name, description, nodes, edges, sparql, category = TemplateCategory.CUSTOM, tags = []) {
        const layout = {
            nodes: nodes.map((node) => ({
                id: node.getId(),
                type: node.getType(),
                label: node.getLabel(),
                position: node.getPosition(),
                variableName: node.getVariableName(),
                uri: node.getUri(),
                dimensions: node.getDimensions(),
            })),
            edges: edges.map((edge) => ({
                id: edge.getId(),
                sourceNodeId: edge.getSourceNodeId(),
                targetNodeId: edge.getTargetNodeId(),
                type: edge.getType(),
                label: edge.getLabel(),
                propertyUri: edge.getPropertyUri(),
            })),
        };
        const metadata = {
            name,
            description,
            category,
            difficulty: TemplateDifficulty.INTERMEDIATE,
            tags,
            sparqlPattern: sparql,
            usageCount: 0,
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        return new QueryTemplate({
            id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            metadata,
            layout,
            parameters: [],
            sparqlTemplate: sparql,
            isBuiltIn: false,
        });
    }
}
exports.QueryTemplate = QueryTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,