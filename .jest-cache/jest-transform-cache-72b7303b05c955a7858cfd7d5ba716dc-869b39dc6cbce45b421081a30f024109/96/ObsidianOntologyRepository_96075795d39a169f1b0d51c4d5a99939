1828126bc3b9ef89ef488d4d08a36a93
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianOntologyRepository = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const Ontology_1 = require("../../domain/entities/Ontology");
/**
 * Obsidian implementation of IOntologyRepository
 * Handles ontology persistence using Obsidian vault
 */
class ObsidianOntologyRepository {
    constructor(app) {
        this.app = app;
    }
    findByPrefix(prefix) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fileName = `!${prefix.toString()}.md`;
            const file = this.app.vault.getAbstractFileByPath(fileName);
            if (file instanceof obsidian_1.TFile) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    return Ontology_1.Ontology.fromFrontmatter(cache.frontmatter);
                }
            }
            return null;
        });
    }
    findAll() {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const files = this.app.vault.getMarkdownFiles();
            const ontologies = [];
            for (const file of files) {
                if (file.name.startsWith('!')) {
                    const cache = this.app.metadataCache.getFileCache(file);
                    if ((_a = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _a === void 0 ? void 0 : _a['exo__Ontology_prefix']) {
                        ontologies.push(Ontology_1.Ontology.fromFrontmatter(cache.frontmatter));
                    }
                }
            }
            return ontologies;
        });
    }
    save(ontology) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fileName = `!${ontology.getPrefix().toString()}.md`;
            const frontmatter = ontology.toFrontmatter();
            // Build YAML frontmatter
            const yamlLines = ['---'];
            for (const [key, value] of Object.entries(frontmatter)) {
                if (Array.isArray(value)) {
                    yamlLines.push(`${key}:`);
                    for (const item of value) {
                        yamlLines.push(`  - ${item}`);
                    }
                }
                else {
                    yamlLines.push(`${key}: ${value}`);
                }
            }
            yamlLines.push('---', '');
            const content = yamlLines.join('\n');
            // Check if file exists
            const existingFile = this.app.vault.getAbstractFileByPath(fileName);
            if (existingFile instanceof obsidian_1.TFile) {
                yield this.app.vault.modify(existingFile, content);
            }
            else {
                yield this.app.vault.create(fileName, content);
            }
        });
    }
    exists(prefix) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fileName = `!${prefix.toString()}.md`;
            const file = this.app.vault.getAbstractFileByPath(fileName);
            return file instanceof obsidian_1.TFile;
        });
    }
}
exports.ObsidianOntologyRepository = ObsidianOntologyRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2luZnJhc3RydWN0dXJlL3JlcG9zaXRvcmllcy9PYnNpZGlhbk9udG9sb2d5UmVwb3NpdG9yeS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsdUNBQXNDO0FBRXRDLDZEQUEwRDtBQUcxRDs7O0dBR0c7QUFDSCxNQUFhLDBCQUEwQjtJQUNuQyxZQUFvQixHQUFRO1FBQVIsUUFBRyxHQUFILEdBQUcsQ0FBSztJQUFHLENBQUM7SUFFMUIsWUFBWSxDQUFDLE1BQXNCOztZQUNyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO1lBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRTVELElBQUksSUFBSSxZQUFZLGdCQUFLLEVBQUU7Z0JBQ3ZCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVyxFQUFFO29CQUNwQixPQUFPLG1CQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDdEQ7YUFDSjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQUVLLE9BQU87OztZQUNULE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDaEQsTUFBTSxVQUFVLEdBQWUsRUFBRSxDQUFDO1lBRWxDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO2dCQUN0QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUMzQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3hELElBQUksTUFBQSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsV0FBVywwQ0FBRyxzQkFBc0IsQ0FBQyxFQUFFO3dCQUM5QyxVQUFVLENBQUMsSUFBSSxDQUFDLG1CQUFRLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO3FCQUNoRTtpQkFDSjthQUNKO1lBRUQsT0FBTyxVQUFVLENBQUM7O0tBQ3JCO0lBRUssSUFBSSxDQUFDLFFBQWtCOztZQUN6QixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO1lBQzFELE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUU3Qyx5QkFBeUI7WUFDekIsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRTtnQkFDcEQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUN0QixTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQztvQkFDMUIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7d0JBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO3FCQUNqQztpQkFDSjtxQkFBTTtvQkFDSCxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUM7aUJBQ3RDO2FBQ0o7WUFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUUxQixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXJDLHVCQUF1QjtZQUN2QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNwRSxJQUFJLFlBQVksWUFBWSxnQkFBSyxFQUFFO2dCQUMvQixNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDdEQ7aUJBQU07Z0JBQ0gsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQ2xEO1FBQ0wsQ0FBQztLQUFBO0lBRUssTUFBTSxDQUFDLE1BQXNCOztZQUMvQixNQUFNLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDO1lBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzVELE9BQU8sSUFBSSxZQUFZLGdCQUFLLENBQUM7UUFDakMsQ0FBQztLQUFBO0NBQ0o7QUFuRUQsZ0VBbUVDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9pbmZyYXN0cnVjdHVyZS9yZXBvc2l0b3JpZXMvT2JzaWRpYW5PbnRvbG9neVJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IElPbnRvbG9neVJlcG9zaXRvcnkgfSBmcm9tICcuLi8uLi9kb21haW4vcmVwb3NpdG9yaWVzL0lPbnRvbG9neVJlcG9zaXRvcnknO1xuaW1wb3J0IHsgT250b2xvZ3kgfSBmcm9tICcuLi8uLi9kb21haW4vZW50aXRpZXMvT250b2xvZ3knO1xuaW1wb3J0IHsgT250b2xvZ3lQcmVmaXggfSBmcm9tICcuLi8uLi9kb21haW4vdmFsdWUtb2JqZWN0cy9PbnRvbG9neVByZWZpeCc7XG5cbi8qKlxuICogT2JzaWRpYW4gaW1wbGVtZW50YXRpb24gb2YgSU9udG9sb2d5UmVwb3NpdG9yeVxuICogSGFuZGxlcyBvbnRvbG9neSBwZXJzaXN0ZW5jZSB1c2luZyBPYnNpZGlhbiB2YXVsdFxuICovXG5leHBvcnQgY2xhc3MgT2JzaWRpYW5PbnRvbG9neVJlcG9zaXRvcnkgaW1wbGVtZW50cyBJT250b2xvZ3lSZXBvc2l0b3J5IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcDogQXBwKSB7fVxuXG4gICAgYXN5bmMgZmluZEJ5UHJlZml4KHByZWZpeDogT250b2xvZ3lQcmVmaXgpOiBQcm9taXNlPE9udG9sb2d5IHwgbnVsbD4ge1xuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGAhJHtwcmVmaXgudG9TdHJpbmcoKX0ubWRgO1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVOYW1lKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICBpZiAoY2FjaGU/LmZyb250bWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE9udG9sb2d5LmZyb21Gcm9udG1hdHRlcihjYWNoZS5mcm9udG1hdHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGZpbmRBbGwoKTogUHJvbWlzZTxPbnRvbG9neVtdPiB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBjb25zdCBvbnRvbG9naWVzOiBPbnRvbG9neVtdID0gW107XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgICAgIGlmIChmaWxlLm5hbWUuc3RhcnRzV2l0aCgnIScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGU/LmZyb250bWF0dGVyPy5bJ2V4b19fT250b2xvZ3lfcHJlZml4J10pIHtcbiAgICAgICAgICAgICAgICAgICAgb250b2xvZ2llcy5wdXNoKE9udG9sb2d5LmZyb21Gcm9udG1hdHRlcihjYWNoZS5mcm9udG1hdHRlcikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG9udG9sb2dpZXM7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZShvbnRvbG9neTogT250b2xvZ3kpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBgISR7b250b2xvZ3kuZ2V0UHJlZml4KCkudG9TdHJpbmcoKX0ubWRgO1xuICAgICAgICBjb25zdCBmcm9udG1hdHRlciA9IG9udG9sb2d5LnRvRnJvbnRtYXR0ZXIoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJ1aWxkIFlBTUwgZnJvbnRtYXR0ZXJcbiAgICAgICAgY29uc3QgeWFtbExpbmVzID0gWyctLS0nXTtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZnJvbnRtYXR0ZXIpKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB5YW1sTGluZXMucHVzaChgJHtrZXl9OmApO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB5YW1sTGluZXMucHVzaChgICAtICR7aXRlbX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHlhbWxMaW5lcy5wdXNoKGAke2tleX06ICR7dmFsdWV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWFtbExpbmVzLnB1c2goJy0tLScsICcnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSB5YW1sTGluZXMuam9pbignXFxuJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0c1xuICAgICAgICBjb25zdCBleGlzdGluZ0ZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZU5hbWUpO1xuICAgICAgICBpZiAoZXhpc3RpbmdGaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShleGlzdGluZ0ZpbGUsIGNvbnRlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKGZpbGVOYW1lLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIGV4aXN0cyhwcmVmaXg6IE9udG9sb2d5UHJlZml4KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gYCEke3ByZWZpeC50b1N0cmluZygpfS5tZGA7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZU5hbWUpO1xuICAgICAgICByZXR1cm4gZmlsZSBpbnN0YW5jZW9mIFRGaWxlO1xuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=