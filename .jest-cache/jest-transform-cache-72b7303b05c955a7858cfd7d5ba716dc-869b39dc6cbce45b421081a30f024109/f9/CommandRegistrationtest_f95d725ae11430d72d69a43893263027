a5b9475a19ed83c0d8d120700ceccf9e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock CreateAssetModal
jest.mock('../../src/presentation/modals/CreateAssetModal');
// Mock DIContainer
jest.mock('../../src/infrastructure/container/DIContainer', () => {
    const mockContainer = {
        getCreateAssetUseCase: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue({
                success: true,
                message: 'Asset created'
            })
        }),
        getPropertyEditingUseCase: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue({
                success: true,
                message: 'Property edited'
            })
        }),
        resolve: jest.fn().mockImplementation(() => ({})),
        dispose: jest.fn()
    };
    return {
        DIContainer: {
            initialize: jest.fn((app, plugin) => mockContainer),
            getInstance: jest.fn(() => mockContainer),
            instance: mockContainer
        }
    };
});
const main_1 = tslib_1.__importDefault(require("../../src/main"));
describe('Command Registration Integration Tests', () => {
    let app;
    let plugin;
    let addCommandSpy;
    let addRibbonIconSpy;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Setup app mock
        app = {
            vault: {
                getMarkdownFiles: jest.fn().mockReturnValue([]),
                read: jest.fn().mockResolvedValue(''),
                on: jest.fn()
            },
            workspace: {
                openLinkText: jest.fn()
            }
        };
        // Create plugin instance
        plugin = new main_1.default(app, {
            id: 'exocortex',
            name: 'Exocortex',
            version: '2.16.0',
            minAppVersion: '1.0.0',
            description: 'SPARQL queries in Obsidian',
            author: 'Test Author',
            authorUrl: '',
            isDesktopOnly: false
        });
        // Setup spies for command registration
        addCommandSpy = jest.spyOn(plugin, 'addCommand');
        addRibbonIconSpy = jest.spyOn(plugin, 'addRibbonIcon');
        // DIContainer is already mocked at the module level
    }));
    afterEach(() => {
        jest.clearAllMocks();
        jest.resetModules();
    });
    describe('Create ExoAsset Command Registration', () => {
        test('should register create-exo-asset command on plugin load', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            expect(addCommandSpy).toHaveBeenCalledWith({
                id: 'create-exo-asset',
                name: 'Create new ExoAsset',
                hotkeys: [{ modifiers: ["Mod", "Shift"], key: "n" }],
                callback: expect.any(Function)
            });
        }));
        test('should register ribbon icon for create asset', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            expect(addRibbonIconSpy).toHaveBeenCalledWith('plus-circle', 'Create ExoAsset', expect.any(Function));
        }));
        test('should have valid command callback', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Get the callback function from the command registration
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            expect(commandCall).toBeDefined();
            const callback = commandCall[0].callback;
            // Verify callback is a function and doesn't throw when executed
            expect(typeof callback).toBe('function');
            expect(() => callback()).not.toThrow();
        }));
        test('should have valid ribbon callback', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Get the callback function from the ribbon icon registration
            const ribbonCall = addRibbonIconSpy.mock.calls.find(call => call[1] === 'Create ExoAsset');
            expect(ribbonCall).toBeDefined();
            const callback = ribbonCall[2];
            // Verify callback is a function and doesn't throw when executed
            expect(typeof callback).toBe('function');
            expect(() => callback()).not.toThrow();
        }));
    });
    describe('Command Properties', () => {
        test('should have correct command ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            expect(commandCall[0].id).toBe('create-exo-asset');
        }));
        test('should have correct command name', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            expect(commandCall[0].name).toBe('Create new ExoAsset');
        }));
        test('should have correct hotkey combination', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            expect(commandCall[0].hotkeys).toEqual([
                { modifiers: ["Mod", "Shift"], key: "n" }
            ]);
        }));
        test('should have valid callback function', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            expect(typeof commandCall[0].callback).toBe('function');
        }));
    });
    describe('Ribbon Icon Properties', () => {
        test('should use plus-circle icon', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const ribbonCall = addRibbonIconSpy.mock.calls.find(call => call[1] === 'Create ExoAsset');
            expect(ribbonCall[0]).toBe('plus-circle');
        }));
        test('should have correct tooltip text', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const ribbonCall = addRibbonIconSpy.mock.calls.find(call => call[0] === 'plus-circle');
            expect(ribbonCall[1]).toBe('Create ExoAsset');
        }));
        test('should have valid callback function', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const ribbonCall = addRibbonIconSpy.mock.calls.find(call => call[1] === 'Create ExoAsset');
            expect(typeof ribbonCall[2]).toBe('function');
        }));
    });
    describe('Command Integration with Other Components', () => {
        test('should register SPARQL processor alongside create asset command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const registerMarkdownCodeBlockProcessorSpy = jest.spyOn(plugin, 'registerMarkdownCodeBlockProcessor');
            yield plugin.onload();
            expect(registerMarkdownCodeBlockProcessorSpy).toHaveBeenCalledWith('sparql', expect.any(Function));
            expect(addCommandSpy).toHaveBeenCalled();
        }));
        test('should register file event handlers alongside commands', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const registerEventSpy = jest.spyOn(plugin, 'registerEvent');
            yield plugin.onload();
            expect(registerEventSpy).toHaveBeenCalledTimes(3); // modify, create, delete
            expect(addCommandSpy).toHaveBeenCalled();
        }));
    });
    describe('Command Error Handling', () => {
        test('command callback should be resilient', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            // Verify callback exists and is a function
            expect(commandCall).toBeDefined();
            expect(typeof commandCall[0].callback).toBe('function');
            // Should not throw when executed (CreateAssetModal creation is internal)
            expect(() => commandCall[0].callback()).not.toThrow();
        }));
        test('ribbon callback should be resilient', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const ribbonCall = addRibbonIconSpy.mock.calls.find(call => call[1] === 'Create ExoAsset');
            // Verify callback exists and is a function
            expect(ribbonCall).toBeDefined();
            expect(typeof ribbonCall[2]).toBe('function');
            // Should not throw when executed
            expect(() => ribbonCall[2]()).not.toThrow();
        }));
    });
    describe('Plugin Lifecycle', () => {
        test('should register commands only during onload', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Commands should not be registered before onload
            expect(addCommandSpy).not.toHaveBeenCalled();
            yield plugin.onload();
            // Commands should be registered after onload
            expect(addCommandSpy).toHaveBeenCalled();
        }));
        test('should not register commands twice if onload called multiple times', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const firstCallCount = addCommandSpy.mock.calls.length;
            yield plugin.onload();
            const secondCallCount = addCommandSpy.mock.calls.length;
            // Should only register commands once
            // Note: In practice, Obsidian ensures onload is called only once
            expect(secondCallCount).toBe(firstCallCount * 2); // Each onload call registers the command
        }));
        test('should clean up properly on unload', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Unload should not throw errors
            yield expect(plugin.onunload()).resolves.toBeUndefined();
        }));
    });
    describe('Command Accessibility', () => {
        test('should be accessible via command palette', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            // Command should have a name that appears in the command palette
            expect(commandCall[0].name).toBeTruthy();
            expect(commandCall[0].name).toBe('Create new ExoAsset');
        }));
        test('should be accessible via hotkey', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commandCall = addCommandSpy.mock.calls.find(call => call[0].id === 'create-exo-asset');
            // Command should have hotkeys defined
            expect(commandCall[0].hotkeys).toBeDefined();
            expect(Array.isArray(commandCall[0].hotkeys)).toBe(true);
            expect(commandCall[0].hotkeys.length).toBeGreaterThan(0);
        }));
        test('should be accessible via ribbon icon', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const ribbonCall = addRibbonIconSpy.mock.calls.find(call => call[1] === 'Create ExoAsset');
            // Ribbon icon should be registered
            expect(ribbonCall).toBeDefined();
            expect(ribbonCall[0]).toBe('plus-circle'); // Valid icon name
            expect(ribbonCall[1]).toBe('Create ExoAsset'); // Tooltip
            expect(typeof ribbonCall[2]).toBe('function'); // Click handler
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,