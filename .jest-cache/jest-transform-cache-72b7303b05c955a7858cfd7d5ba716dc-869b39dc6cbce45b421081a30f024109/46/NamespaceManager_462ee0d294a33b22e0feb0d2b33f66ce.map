{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/NamespaceManager.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/NamespaceManager.ts"],"sourcesContent":["/**\n * Namespace Manager for handling RDF namespace prefixes and URI expansion\n * Manages common RDF vocabularies and custom namespace prefixes\n */\n\nimport { IRI } from \"../../domain/semantic/core/Triple\";\nimport { Result } from \"../../domain/core/Result\";\n\nexport interface NamespaceBinding {\n  prefix: string;\n  namespace: IRI;\n}\n\nexport class NamespaceManager {\n  private bindings: Map<string, IRI> = new Map();\n  private reverseBindings: Map<string, string> = new Map();\n\n  constructor() {\n    this.initializeDefaultNamespaces();\n  }\n\n  /**\n   * Initialize common RDF namespace prefixes\n   */\n  private initializeDefaultNamespaces(): void {\n    this.addBinding(\"rdf\", \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\");\n    this.addBinding(\"rdfs\", \"http://www.w3.org/2000/01/rdf-schema#\");\n    this.addBinding(\"owl\", \"http://www.w3.org/2002/07/owl#\");\n    this.addBinding(\"xsd\", \"http://www.w3.org/2001/XMLSchema#\");\n    this.addBinding(\"dc\", \"http://purl.org/dc/elements/1.1/\");\n    this.addBinding(\"dcterms\", \"http://purl.org/dc/terms/\");\n    this.addBinding(\"foaf\", \"http://xmlns.com/foaf/0.1/\");\n    this.addBinding(\"skos\", \"http://www.w3.org/2004/02/skos/core#\");\n    this.addBinding(\"void\", \"http://rdfs.org/ns/void#\");\n\n    // Exocortex namespaces\n    this.addBinding(\"exo\", \"https://exocortex.io/ontology/core#\");\n    this.addBinding(\"ems\", \"https://exocortex.io/ontology/ems#\");\n    this.addBinding(\"vault\", \"obsidian://vault/\");\n  }\n\n  /**\n   * Add a namespace binding\n   */\n  addBinding(prefix: string, namespace: string): void {\n    try {\n      const iri = new IRI(namespace);\n      this.bindings.set(prefix, iri);\n      this.reverseBindings.set(namespace, prefix);\n    } catch (error) {\n      console.warn(`Invalid namespace URI for prefix ${prefix}: ${namespace}`);\n    }\n  }\n\n  /**\n   * Remove a namespace binding\n   */\n  removeBinding(prefix: string): void {\n    const namespace = this.bindings.get(prefix);\n    if (namespace) {\n      this.bindings.delete(prefix);\n      this.reverseBindings.delete(namespace.toString());\n    }\n  }\n\n  /**\n   * Get namespace URI for a prefix\n   */\n  getNamespace(prefix: string): IRI | undefined {\n    return this.bindings.get(prefix);\n  }\n\n  /**\n   * Get prefix for a namespace URI\n   */\n  getPrefix(namespace: string): string | undefined {\n    return this.reverseBindings.get(namespace);\n  }\n\n  /**\n   * Expand a CURIE (Compact URI) to full IRI\n   */\n  expandCURIE(curie: string): Result<IRI> {\n    const colonIndex = curie.indexOf(\":\");\n    if (colonIndex === -1) {\n      return Result.fail(`Invalid CURIE format: ${curie}`);\n    }\n\n    const prefix = curie.substring(0, colonIndex);\n    const localName = curie.substring(colonIndex + 1);\n\n    const namespace = this.bindings.get(prefix);\n    if (!namespace) {\n      return Result.fail(`Unknown prefix: ${prefix}`);\n    }\n\n    try {\n      const fullIRI = new IRI(namespace.toString() + localName);\n      return Result.ok(fullIRI);\n    } catch (error) {\n      return Result.fail(`Invalid expanded IRI: ${error.message}`);\n    }\n  }\n\n  /**\n   * Compress a full IRI to CURIE if possible\n   */\n  compressIRI(iri: IRI): string {\n    const iriString = iri.toString();\n\n    // Try to find a matching namespace\n    for (const [namespace, prefix] of this.reverseBindings) {\n      if (iriString.startsWith(namespace)) {\n        const localName = iriString.substring(namespace.length);\n        // Only compress if the local name is valid\n        if (this.isValidLocalName(localName)) {\n          return `${prefix}:${localName}`;\n        }\n      }\n    }\n\n    // Return full IRI if no compression possible\n    return `<${iriString}>`;\n  }\n\n  /**\n   * Check if a local name is valid for CURIE compression\n   */\n  private isValidLocalName(localName: string): boolean {\n    // Basic validation - should start with letter or underscore\n    // and contain only alphanumeric characters, hyphens, underscores\n    return /^[a-zA-Z_][a-zA-Z0-9_-]*$/.test(localName);\n  }\n\n  /**\n   * Parse and add namespace prefixes from RDF content\n   */\n  parseNamespaces(content: string, format: \"turtle\" | \"n3\"): void {\n    const lines = content.split(\"\\n\");\n\n    for (const line of lines) {\n      const trimmed = line.trim();\n\n      if (format === \"turtle\" || format === \"n3\") {\n        // Parse @prefix declarations\n        const prefixMatch = trimmed.match(\n          /^@prefix\\s+(\\w+):\\s+<([^>]+)>\\s*\\.\\s*$/,\n        );\n        if (prefixMatch) {\n          const [, prefix, namespace] = prefixMatch;\n          this.addBinding(prefix, namespace);\n          continue;\n        }\n\n        // Parse PREFIX declarations (SPARQL style)\n        const sparqlPrefixMatch = trimmed.match(\n          /^PREFIX\\s+(\\w+):\\s+<([^>]+)>\\s*$/,\n        );\n        if (sparqlPrefixMatch) {\n          const [, prefix, namespace] = sparqlPrefixMatch;\n          this.addBinding(prefix, namespace);\n        }\n      }\n    }\n  }\n\n  /**\n   * Generate namespace prefix declarations for a format\n   */\n  generatePrefixDeclarations(format: \"turtle\" | \"n3\" | \"sparql\"): string {\n    const declarations: string[] = [];\n\n    for (const [prefix, namespace] of this.bindings) {\n      switch (format) {\n        case \"turtle\":\n        case \"n3\":\n          declarations.push(`@prefix ${prefix}: <${namespace.toString()}> .`);\n          break;\n        case \"sparql\":\n          declarations.push(`PREFIX ${prefix}: <${namespace.toString()}>`);\n          break;\n      }\n    }\n\n    return declarations.join(\"\\n\");\n  }\n\n  /**\n   * Get all namespace bindings\n   */\n  getAllBindings(): NamespaceBinding[] {\n    return Array.from(this.bindings.entries()).map(([prefix, namespace]) => ({\n      prefix,\n      namespace,\n    }));\n  }\n\n  /**\n   * Clear all custom bindings (keeps default ones)\n   */\n  clearCustomBindings(): void {\n    this.bindings.clear();\n    this.reverseBindings.clear();\n    this.initializeDefaultNamespaces();\n  }\n\n  /**\n   * Check if a prefix exists\n   */\n  hasPrefix(prefix: string): boolean {\n    return this.bindings.has(prefix);\n  }\n\n  /**\n   * Check if a namespace exists\n   */\n  hasNamespace(namespace: string): boolean {\n    return this.reverseBindings.has(namespace);\n  }\n\n  /**\n   * Create a copy of the namespace manager\n   */\n  clone(): NamespaceManager {\n    const clone = new NamespaceManager();\n    clone.clearCustomBindings();\n\n    for (const [prefix, namespace] of this.bindings) {\n      clone.addBinding(prefix, namespace.toString());\n    }\n\n    return clone;\n  }\n}\n"],"version":3}