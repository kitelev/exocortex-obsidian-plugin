63dac04f87fb34b64680d2fb28e78a4e
"use strict";

/* istanbul ignore next */
function cov_1qinl1qndh() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/PropertyEditingUseCase.ts";
  var hash = "d5f00c357874164d1997fcc3a03ee12e5bd490de";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/PropertyEditingUseCase.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 40
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 17
        },
        end: {
          line: 5,
          column: 52
        }
      },
      "4": {
        start: {
          line: 6,
          column: 18
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "5": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 47
        }
      },
      "6": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 29
        }
      },
      "7": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 69,
          column: 11
        }
      },
      "8": {
        start: {
          line: 16,
          column: 12
        },
        end: {
          line: 18,
          column: 13
        }
      },
      "9": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 68
        }
      },
      "10": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "11": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 73
        }
      },
      "12": {
        start: {
          line: 23,
          column: 37
        },
        end: {
          line: 23,
          column: 106
        }
      },
      "13": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 26,
          column: 13
        }
      },
      "14": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 25,
          column: 68
        }
      },
      "15": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 68,
          column: 13
        }
      },
      "16": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 42,
          column: 17
        }
      },
      "17": {
        start: {
          line: 31,
          column: 33
        },
        end: {
          line: 31,
          column: 53
        }
      },
      "18": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 41,
          column: 21
        }
      },
      "19": {
        start: {
          line: 33,
          column: 24
        },
        end: {
          line: 33,
          column: 129
        }
      },
      "20": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 36,
          column: 27
        }
      },
      "21": {
        start: {
          line: 37,
          column: 24
        },
        end: {
          line: 40,
          column: 27
        }
      },
      "22": {
        start: {
          line: 44,
          column: 28
        },
        end: {
          line: 44,
          column: 32
        }
      },
      "23": {
        start: {
          line: 46,
          column: 38
        },
        end: {
          line: 46,
          column: 79
        }
      },
      "24": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 49,
          column: 17
        }
      },
      "25": {
        start: {
          line: 48,
          column: 20
        },
        end: {
          line: 48,
          column: 90
        }
      },
      "26": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "27": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 87
        }
      },
      "28": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "29": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 87
        }
      },
      "30": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 71
        }
      },
      "31": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 60,
          column: 55
        }
      },
      "32": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 64,
          column: 19
        }
      },
      "33": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 83
        }
      },
      "34": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "35": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 75
        }
      },
      "36": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "37": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 40
        }
      },
      "38": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "39": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "40": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 84
        }
      },
      "41": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "42": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "43": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 88
        }
      },
      "44": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "45": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "46": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 89
        }
      },
      "47": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "48": {
        start: {
          line: 101,
          column: 34
        },
        end: {
          line: 101,
          column: 93
        }
      },
      "49": {
        start: {
          line: 101,
          column: 84
        },
        end: {
          line: 101,
          column: 92
        }
      },
      "50": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "51": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 111
        }
      },
      "52": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "53": {
        start: {
          line: 108,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "54": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 109,
          column: 63
        }
      },
      "55": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "56": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 89
        }
      },
      "57": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 36
        }
      },
      "58": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 132,
          column: 11
        }
      },
      "59": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "60": {
        start: {
          line: 126,
          column: 35
        },
        end: {
          line: 126,
          column: 86
        }
      },
      "61": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 54
        }
      },
      "62": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 90
        }
      },
      "63": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 146,
          column: 11
        }
      },
      "64": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "65": {
        start: {
          line: 140,
          column: 31
        },
        end: {
          line: 140,
          column: 83
        }
      },
      "66": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 50
        }
      },
      "67": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 86
        }
      },
      "68": {
        start: {
          line: 149,
          column: 0
        },
        end: {
          line: 149,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        loc: {
          start: {
            line: 13,
            column: 21
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 55
          },
          end: {
            line: 14,
            column: 56
          }
        },
        loc: {
          start: {
            line: 14,
            column: 68
          },
          end: {
            line: 69,
            column: 9
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 45
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 74
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 79
          },
          end: {
            line: 101,
            column: 80
          }
        },
        loc: {
          start: {
            line: 101,
            column: 84
          },
          end: {
            line: 101,
            column: 92
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 123,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        loc: {
          start: {
            line: 123,
            column: 37
          },
          end: {
            line: 133,
            column: 5
          }
        },
        line: 123
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 124,
            column: 55
          },
          end: {
            line: 124,
            column: 56
          }
        },
        loc: {
          start: {
            line: 124,
            column: 68
          },
          end: {
            line: 132,
            column: 9
          }
        },
        line: 124
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        loc: {
          start: {
            line: 137,
            column: 33
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 137
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 138,
            column: 55
          },
          end: {
            line: 138,
            column: 56
          }
        },
        loc: {
          start: {
            line: 138,
            column: 68
          },
          end: {
            line: 146,
            column: 9
          }
        },
        line: 138
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 18,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 12
          },
          end: {
            line: 18,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 12
          },
          end: {
            line: 26,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 42,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 20
          },
          end: {
            line: 29,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 20
          },
          end: {
            line: 29,
            column: 49
          }
        }, {
          start: {
            line: 29,
            column: 53
          },
          end: {
            line: 29,
            column: 84
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 41,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 41,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "6": {
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 49,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "7": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "8": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "9": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "10": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 33
          }
        }, {
          start: {
            line: 77,
            column: 38
          },
          end: {
            line: 77,
            column: 52
          }
        }, {
          start: {
            line: 77,
            column: 56
          },
          end: {
            line: 77,
            column: 75
          }
        }, {
          start: {
            line: 77,
            column: 79
          },
          end: {
            line: 77,
            column: 91
          }
        }],
        line: 77
      },
      "11": {
        loc: {
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "12": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 81,
            column: 34
          }
        }, {
          start: {
            line: 81,
            column: 39
          },
          end: {
            line: 81,
            column: 53
          }
        }, {
          start: {
            line: 81,
            column: 57
          },
          end: {
            line: 81,
            column: 76
          }
        }, {
          start: {
            line: 81,
            column: 80
          },
          end: {
            line: 81,
            column: 92
          }
        }],
        line: 81
      },
      "13": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "14": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "15": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "16": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 93,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "17": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "18": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "19": {
        loc: {
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "20": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 64
          },
          end: {
            line: 100,
            column: 70
          }
        }, {
          start: {
            line: 100,
            column: 73
          },
          end: {
            line: 100,
            column: 95
          }
        }],
        line: 100
      },
      "21": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 100,
            column: 44
          }
        }, {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 100,
            column: 61
          }
        }],
        line: 100
      },
      "22": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "23": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 117,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "24": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/PropertyEditingUseCase.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/PropertyEditingUseCase.ts"],
      sourcesContent: ["import { UseCase } from '../core/UseCase';\nimport { Result } from '../../domain/core/Result';\nimport { IAssetRepository } from '../../domain/repositories/IAssetRepository';\nimport { AssetId } from '../../domain/value-objects/AssetId';\nimport { Asset } from '../../domain/entities/Asset';\n\n/**\n * Use case for editing asset properties inline\n */\nexport interface UpdatePropertyRequest {\n    assetId: string;\n    propertyName: string;\n    value: any;\n    propertyDefinition: {\n        propertyName: string;\n        label: string;\n        range: string;\n        isRequired: boolean;\n        isObjectProperty?: boolean;\n        validation?: string;\n    };\n}\n\nexport interface UpdatePropertyResponse {\n    success: boolean;\n    updatedValue: any;\n}\n\nexport class PropertyEditingUseCase implements UseCase<UpdatePropertyRequest, UpdatePropertyResponse> {\n    constructor(\n        private assetRepository: IAssetRepository,\n        private plugin: any // Reference to main plugin for property discovery\n    ) {}\n\n    async execute(request: UpdatePropertyRequest): Promise<Result<UpdatePropertyResponse>> {\n        // Validate request\n        if (!request.assetId) {\n            return Result.fail<UpdatePropertyResponse>('Asset ID is required');\n        }\n\n        if (!request.propertyName) {\n            return Result.fail<UpdatePropertyResponse>('Property name is required');\n        }\n\n        // Validate property value\n        const validationResult = this.validatePropertyValue(\n            request.value,\n            request.propertyDefinition\n        );\n\n        if (validationResult.isFailure) {\n            return Result.fail<UpdatePropertyResponse>(validationResult.error);\n        }\n\n        try {\n            // If assetId looks like a file path, use direct update method\n            if (request.assetId.includes('/') || request.assetId.endsWith('.md')) {\n                // Use the new direct update method\n                const repo = this.assetRepository as any;\n                if (repo.updateFrontmatterByPath) {\n                    console.log(`Updating property ${request.propertyName} to ${request.value} for file ${request.assetId}`);\n                    await repo.updateFrontmatterByPath(request.assetId, {\n                        [request.propertyName]: request.value\n                    });\n                    \n                    return Result.ok<UpdatePropertyResponse>({\n                        success: true,\n                        updatedValue: request.value\n                    });\n                }\n            }\n\n            // Fallback to original logic for asset IDs\n            let asset: Asset | null = null;\n            \n            // First try as UUID\n            const assetIdResult = AssetId.create(request.assetId);\n            if (assetIdResult.isSuccess) {\n                asset = await this.assetRepository.findById(assetIdResult.getValue());\n            }\n            \n            // If not found by ID, try by filename\n            if (!asset) {\n                asset = await this.assetRepository.findByFilename(request.assetId);\n            }\n            \n            if (!asset) {\n                return Result.fail<UpdatePropertyResponse>(`Asset not found: ${request.assetId}`);\n            }\n\n            // Update the property\n            asset.setProperty(request.propertyName, request.value);\n\n            // Save the asset\n            await this.assetRepository.save(asset);\n\n            return Result.ok<UpdatePropertyResponse>({\n                success: true,\n                updatedValue: request.value\n            });\n        } catch (error) {\n            return Result.fail<UpdatePropertyResponse>(`Failed to update property: ${error}`);\n        }\n    }\n\n    /**\n     * Validate property value based on its definition\n     */\n    private validatePropertyValue(\n        value: any,\n        definition: UpdatePropertyRequest['propertyDefinition']\n    ): Result<void> {\n        // Check required\n        if (definition.isRequired && (value === null || value === undefined || value === '')) {\n            return Result.fail<void>(`${definition.label} is required`);\n        }\n\n        // Skip further validation if value is empty and not required\n        if (!definition.isRequired && (value === null || value === undefined || value === '')) {\n            return Result.ok<void>();\n        }\n\n        // Validate based on range/type\n        if (definition.range === 'number') {\n            if (isNaN(Number(value))) {\n                return Result.fail<void>(`${definition.label} must be a number`);\n            }\n        }\n\n        if (definition.range === 'date') {\n            if (isNaN(Date.parse(value))) {\n                return Result.fail<void>(`${definition.label} must be a valid date`);\n            }\n        }\n\n        if (definition.range === 'boolean') {\n            if (typeof value !== 'boolean') {\n                return Result.fail<void>(`${definition.label} must be true or false`);\n            }\n        }\n\n        if (definition.range?.startsWith('enum:')) {\n            const allowedValues = definition.range.substring(5).split(',').map(v => v.trim());\n            if (!allowedValues.includes(value)) {\n                return Result.fail<void>(`${definition.label} must be one of: ${allowedValues.join(', ')}`);\n            }\n        }\n\n        // Custom validation regex\n        if (definition.validation) {\n            try {\n                const regex = new RegExp(definition.validation);\n                if (!regex.test(String(value))) {\n                    return Result.fail<void>(`${definition.label} format is invalid`);\n                }\n            } catch (e) {\n                // Invalid regex, skip validation\n            }\n        }\n\n        return Result.ok<void>();\n    }\n\n    /**\n     * Get properties for a class (delegating to plugin for now)\n     */\n    async getPropertiesForClass(className: string): Promise<Result<any[]>> {\n        try {\n            const properties = await this.plugin.findPropertiesForClass(className);\n            return Result.ok(properties);\n        } catch (error) {\n            return Result.fail(`Failed to get properties: ${error.message}`);\n        }\n    }\n\n    /**\n     * Get assets for a class (for dropdowns)\n     */\n    async getAssetsForClass(className: string): Promise<Result<any[]>> {\n        try {\n            const assets = await this.plugin.findAssetsByClass(className, true);\n            return Result.ok(assets);\n        } catch (error) {\n            return Result.fail(`Failed to get assets: ${error.message}`);\n        }\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d5f00c357874164d1997fcc3a03ee12e5bd490de"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1qinl1qndh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1qinl1qndh();
cov_1qinl1qndh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1qinl1qndh().s[1]++;
exports.PropertyEditingUseCase = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_1qinl1qndh().s[2]++, require("tslib"));
const Result_1 =
/* istanbul ignore next */
(cov_1qinl1qndh().s[3]++, require("../../domain/core/Result"));
const AssetId_1 =
/* istanbul ignore next */
(cov_1qinl1qndh().s[4]++, require("../../domain/value-objects/AssetId"));
class PropertyEditingUseCase {
  constructor(assetRepository, plugin // Reference to main plugin for property discovery
  ) {
    /* istanbul ignore next */
    cov_1qinl1qndh().f[0]++;
    cov_1qinl1qndh().s[5]++;
    this.assetRepository = assetRepository;
    /* istanbul ignore next */
    cov_1qinl1qndh().s[6]++;
    this.plugin = plugin;
  }
  execute(request) {
    /* istanbul ignore next */
    cov_1qinl1qndh().f[1]++;
    cov_1qinl1qndh().s[7]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1qinl1qndh().f[2]++;
      cov_1qinl1qndh().s[8]++;
      // Validate request
      if (!request.assetId) {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[0][0]++;
        cov_1qinl1qndh().s[9]++;
        return Result_1.Result.fail('Asset ID is required');
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[0][1]++;
      }
      cov_1qinl1qndh().s[10]++;
      if (!request.propertyName) {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[1][0]++;
        cov_1qinl1qndh().s[11]++;
        return Result_1.Result.fail('Property name is required');
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[1][1]++;
      }
      // Validate property value
      const validationResult =
      /* istanbul ignore next */
      (cov_1qinl1qndh().s[12]++, this.validatePropertyValue(request.value, request.propertyDefinition));
      /* istanbul ignore next */
      cov_1qinl1qndh().s[13]++;
      if (validationResult.isFailure) {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[2][0]++;
        cov_1qinl1qndh().s[14]++;
        return Result_1.Result.fail(validationResult.error);
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[2][1]++;
      }
      cov_1qinl1qndh().s[15]++;
      try {
        /* istanbul ignore next */
        cov_1qinl1qndh().s[16]++;
        // If assetId looks like a file path, use direct update method
        if (
        /* istanbul ignore next */
        (cov_1qinl1qndh().b[4][0]++, request.assetId.includes('/')) ||
        /* istanbul ignore next */
        (cov_1qinl1qndh().b[4][1]++, request.assetId.endsWith('.md'))) {
          /* istanbul ignore next */
          cov_1qinl1qndh().b[3][0]++;
          // Use the new direct update method
          const repo =
          /* istanbul ignore next */
          (cov_1qinl1qndh().s[17]++, this.assetRepository);
          /* istanbul ignore next */
          cov_1qinl1qndh().s[18]++;
          if (repo.updateFrontmatterByPath) {
            /* istanbul ignore next */
            cov_1qinl1qndh().b[5][0]++;
            cov_1qinl1qndh().s[19]++;
            console.log(`Updating property ${request.propertyName} to ${request.value} for file ${request.assetId}`);
            /* istanbul ignore next */
            cov_1qinl1qndh().s[20]++;
            yield repo.updateFrontmatterByPath(request.assetId, {
              [request.propertyName]: request.value
            });
            /* istanbul ignore next */
            cov_1qinl1qndh().s[21]++;
            return Result_1.Result.ok({
              success: true,
              updatedValue: request.value
            });
          } else
          /* istanbul ignore next */
          {
            cov_1qinl1qndh().b[5][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1qinl1qndh().b[3][1]++;
        }
        // Fallback to original logic for asset IDs
        let asset =
        /* istanbul ignore next */
        (cov_1qinl1qndh().s[22]++, null);
        // First try as UUID
        const assetIdResult =
        /* istanbul ignore next */
        (cov_1qinl1qndh().s[23]++, AssetId_1.AssetId.create(request.assetId));
        /* istanbul ignore next */
        cov_1qinl1qndh().s[24]++;
        if (assetIdResult.isSuccess) {
          /* istanbul ignore next */
          cov_1qinl1qndh().b[6][0]++;
          cov_1qinl1qndh().s[25]++;
          asset = yield this.assetRepository.findById(assetIdResult.getValue());
        } else
        /* istanbul ignore next */
        {
          cov_1qinl1qndh().b[6][1]++;
        }
        // If not found by ID, try by filename
        cov_1qinl1qndh().s[26]++;
        if (!asset) {
          /* istanbul ignore next */
          cov_1qinl1qndh().b[7][0]++;
          cov_1qinl1qndh().s[27]++;
          asset = yield this.assetRepository.findByFilename(request.assetId);
        } else
        /* istanbul ignore next */
        {
          cov_1qinl1qndh().b[7][1]++;
        }
        cov_1qinl1qndh().s[28]++;
        if (!asset) {
          /* istanbul ignore next */
          cov_1qinl1qndh().b[8][0]++;
          cov_1qinl1qndh().s[29]++;
          return Result_1.Result.fail(`Asset not found: ${request.assetId}`);
        } else
        /* istanbul ignore next */
        {
          cov_1qinl1qndh().b[8][1]++;
        }
        // Update the property
        cov_1qinl1qndh().s[30]++;
        asset.setProperty(request.propertyName, request.value);
        // Save the asset
        /* istanbul ignore next */
        cov_1qinl1qndh().s[31]++;
        yield this.assetRepository.save(asset);
        /* istanbul ignore next */
        cov_1qinl1qndh().s[32]++;
        return Result_1.Result.ok({
          success: true,
          updatedValue: request.value
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1qinl1qndh().s[33]++;
        return Result_1.Result.fail(`Failed to update property: ${error}`);
      }
    });
  }
  /**
   * Validate property value based on its definition
   */
  validatePropertyValue(value, definition) {
    /* istanbul ignore next */
    cov_1qinl1qndh().f[3]++;
    var _a;
    // Check required
    /* istanbul ignore next */
    cov_1qinl1qndh().s[34]++;
    if (
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[10][0]++, definition.isRequired) && (
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[10][1]++, value === null) ||
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[10][2]++, value === undefined) ||
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[10][3]++, value === ''))) {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[9][0]++;
      cov_1qinl1qndh().s[35]++;
      return Result_1.Result.fail(`${definition.label} is required`);
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[9][1]++;
    }
    // Skip further validation if value is empty and not required
    cov_1qinl1qndh().s[36]++;
    if (
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[12][0]++, !definition.isRequired) && (
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[12][1]++, value === null) ||
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[12][2]++, value === undefined) ||
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[12][3]++, value === ''))) {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[11][0]++;
      cov_1qinl1qndh().s[37]++;
      return Result_1.Result.ok();
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[11][1]++;
    }
    // Validate based on range/type
    cov_1qinl1qndh().s[38]++;
    if (definition.range === 'number') {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[13][0]++;
      cov_1qinl1qndh().s[39]++;
      if (isNaN(Number(value))) {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[14][0]++;
        cov_1qinl1qndh().s[40]++;
        return Result_1.Result.fail(`${definition.label} must be a number`);
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[13][1]++;
    }
    cov_1qinl1qndh().s[41]++;
    if (definition.range === 'date') {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[15][0]++;
      cov_1qinl1qndh().s[42]++;
      if (isNaN(Date.parse(value))) {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[16][0]++;
        cov_1qinl1qndh().s[43]++;
        return Result_1.Result.fail(`${definition.label} must be a valid date`);
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[16][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[15][1]++;
    }
    cov_1qinl1qndh().s[44]++;
    if (definition.range === 'boolean') {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[17][0]++;
      cov_1qinl1qndh().s[45]++;
      if (typeof value !== 'boolean') {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[18][0]++;
        cov_1qinl1qndh().s[46]++;
        return Result_1.Result.fail(`${definition.label} must be true or false`);
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[18][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[17][1]++;
    }
    cov_1qinl1qndh().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[21][0]++, (_a = definition.range) === null) ||
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[21][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[20][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1qinl1qndh().b[20][1]++, _a.startsWith('enum:'))) {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[19][0]++;
      const allowedValues =
      /* istanbul ignore next */
      (cov_1qinl1qndh().s[48]++, definition.range.substring(5).split(',').map(v => {
        /* istanbul ignore next */
        cov_1qinl1qndh().f[4]++;
        cov_1qinl1qndh().s[49]++;
        return v.trim();
      }));
      /* istanbul ignore next */
      cov_1qinl1qndh().s[50]++;
      if (!allowedValues.includes(value)) {
        /* istanbul ignore next */
        cov_1qinl1qndh().b[22][0]++;
        cov_1qinl1qndh().s[51]++;
        return Result_1.Result.fail(`${definition.label} must be one of: ${allowedValues.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1qinl1qndh().b[22][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[19][1]++;
    }
    // Custom validation regex
    cov_1qinl1qndh().s[52]++;
    if (definition.validation) {
      /* istanbul ignore next */
      cov_1qinl1qndh().b[23][0]++;
      cov_1qinl1qndh().s[53]++;
      try {
        const regex =
        /* istanbul ignore next */
        (cov_1qinl1qndh().s[54]++, new RegExp(definition.validation));
        /* istanbul ignore next */
        cov_1qinl1qndh().s[55]++;
        if (!regex.test(String(value))) {
          /* istanbul ignore next */
          cov_1qinl1qndh().b[24][0]++;
          cov_1qinl1qndh().s[56]++;
          return Result_1.Result.fail(`${definition.label} format is invalid`);
        } else
        /* istanbul ignore next */
        {
          cov_1qinl1qndh().b[24][1]++;
        }
      } catch (e) {
        // Invalid regex, skip validation
      }
    } else
    /* istanbul ignore next */
    {
      cov_1qinl1qndh().b[23][1]++;
    }
    cov_1qinl1qndh().s[57]++;
    return Result_1.Result.ok();
  }
  /**
   * Get properties for a class (delegating to plugin for now)
   */
  getPropertiesForClass(className) {
    /* istanbul ignore next */
    cov_1qinl1qndh().f[5]++;
    cov_1qinl1qndh().s[58]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1qinl1qndh().f[6]++;
      cov_1qinl1qndh().s[59]++;
      try {
        const properties =
        /* istanbul ignore next */
        (cov_1qinl1qndh().s[60]++, yield this.plugin.findPropertiesForClass(className));
        /* istanbul ignore next */
        cov_1qinl1qndh().s[61]++;
        return Result_1.Result.ok(properties);
      } catch (error) {
        /* istanbul ignore next */
        cov_1qinl1qndh().s[62]++;
        return Result_1.Result.fail(`Failed to get properties: ${error.message}`);
      }
    });
  }
  /**
   * Get assets for a class (for dropdowns)
   */
  getAssetsForClass(className) {
    /* istanbul ignore next */
    cov_1qinl1qndh().f[7]++;
    cov_1qinl1qndh().s[63]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1qinl1qndh().f[8]++;
      cov_1qinl1qndh().s[64]++;
      try {
        const assets =
        /* istanbul ignore next */
        (cov_1qinl1qndh().s[65]++, yield this.plugin.findAssetsByClass(className, true));
        /* istanbul ignore next */
        cov_1qinl1qndh().s[66]++;
        return Result_1.Result.ok(assets);
      } catch (error) {
        /* istanbul ignore next */
        cov_1qinl1qndh().s[67]++;
        return Result_1.Result.fail(`Failed to get assets: ${error.message}`);
      }
    });
  }
}
/* istanbul ignore next */
cov_1qinl1qndh().s[68]++;
exports.PropertyEditingUseCase = PropertyEditingUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,