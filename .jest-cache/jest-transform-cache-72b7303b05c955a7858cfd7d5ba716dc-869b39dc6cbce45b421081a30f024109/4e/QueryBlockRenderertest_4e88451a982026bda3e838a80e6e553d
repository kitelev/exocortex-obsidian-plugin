795a6ad0909b361b99ce4089f38e50c6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock the ExecuteQueryBlockUseCase
jest.mock('../../../../src/application/use-cases/ExecuteQueryBlockUseCase', () => {
    return {
        ExecuteQueryBlockUseCase: jest.fn().mockImplementation(() => ({
            execute: jest.fn().mockResolvedValue({
                isFailure: false,
                getValue: () => ({
                    results: [
                        { path: 'test1.md', basename: 'test1', metadata: { frontmatter: { 'exo__Asset_label': 'Test 1' } } },
                        { path: 'test2.md', basename: 'test2', metadata: { frontmatter: { 'exo__Asset_label': 'Test 2' } } }
                    ],
                    totalCount: 2,
                    executionTime: 10
                })
            })
        }))
    };
});
const QueryBlockRenderer_1 = require("../../../../src/presentation/renderers/QueryBlockRenderer");
const obsidian_1 = require("../../../__mocks__/obsidian");
describe('QueryBlockRenderer', () => {
    let renderer;
    let mockVault;
    let mockApp;
    let mockFile;
    beforeEach(() => {
        mockVault = new obsidian_1.Vault();
        mockApp = new obsidian_1.App();
        mockFile = new obsidian_1.TFile();
        mockFile.path = 'test.md';
        mockFile.basename = 'test';
        renderer = new QueryBlockRenderer_1.QueryBlockRenderer(mockApp);
    });
    describe('render', () => {
        it('should render query results as list', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                displayAs: 'list'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.children.length).toBeGreaterThan(0);
            expect(container.textContent).toContain('Found 2 items');
        }));
        it('should render query results as table', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                displayAs: 'table'
            };
            const mockDv = {
                pages: jest.fn(),
                table: jest.fn(),
                list: jest.fn()
            };
            yield renderer.render(container, config, mockFile, {}, mockDv);
            expect(container.children.length).toBeGreaterThan(0);
            expect(container.textContent).toContain('Found 2 items');
        }));
        it('should render query results as cards', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                displayAs: 'cards'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.children.length).toBeGreaterThan(0);
            expect(container.textContent).toContain('Found 2 items');
        }));
        it('should handle query failure', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'invalid:query'
            };
            // Mock failure scenario
            const mockUseCase = require('../../../../src/application/use-cases/ExecuteQueryBlockUseCase').ExecuteQueryBlockUseCase;
            mockUseCase.mockImplementationOnce(() => ({
                execute: jest.fn().mockResolvedValue({
                    isFailure: true,
                    error: 'Invalid query syntax'
                })
            }));
            const failingRenderer = new QueryBlockRenderer_1.QueryBlockRenderer(mockApp);
            yield failingRenderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('Query failed');
        }));
        it('should handle empty results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:NonexistentClass'
            };
            // Mock empty results
            const mockUseCase = require('../../../../src/application/use-cases/ExecuteQueryBlockUseCase').ExecuteQueryBlockUseCase;
            mockUseCase.mockImplementationOnce(() => ({
                execute: jest.fn().mockResolvedValue({
                    isFailure: false,
                    getValue: () => ({
                        results: [],
                        totalCount: 0,
                        executionTime: 5
                    })
                })
            }));
            const emptyRenderer = new QueryBlockRenderer_1.QueryBlockRenderer(mockApp);
            yield emptyRenderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('No items found');
        }));
        it('should handle property filters', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                propertyFilters: [{
                        property: 'status',
                        operator: 'equals',
                        value: 'active'
                    }],
                maxResults: 10,
                sortBy: 'title',
                sortOrder: 'asc'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.children.length).toBeGreaterThan(0);
        }));
    });
    describe('rendering modes', () => {
        it('should render list with proper structure', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                displayAs: 'list'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            const list = container.querySelector('ul');
            expect(list).toBeTruthy();
            expect(list === null || list === void 0 ? void 0 : list.className).toContain('exocortex-query-list');
        }));
        it('should render table with proper headers', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                displayAs: 'table'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            const table = container.querySelector('table');
            expect(table).toBeTruthy();
            expect(table === null || table === void 0 ? void 0 : table.className).toContain('exocortex-query-table');
        }));
        it('should render cards with proper styling', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: 'class:Asset',
                displayAs: 'cards'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            const cardsContainer = container.querySelector('.exocortex-query-cards');
            expect(cardsContainer).toBeTruthy();
        }));
    });
    describe('error handling', () => {
        it('should handle render errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = null;
            yield expect(renderer.render(container, config, mockFile, {}, null)).resolves.not.toThrow();
        }));
        it('should handle invalid query config', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'query',
                query: '',
                maxResults: -1
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container).toBeDefined();
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,