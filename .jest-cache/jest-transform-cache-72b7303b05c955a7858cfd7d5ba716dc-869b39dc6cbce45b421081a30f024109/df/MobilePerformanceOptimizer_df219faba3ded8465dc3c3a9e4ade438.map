{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/optimizers/MobilePerformanceOptimizer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/optimizers/MobilePerformanceOptimizer.ts"],"sourcesContent":["import { Platform } from \"obsidian\";\n\n/**\n * Performance optimizer for mobile devices (iOS/Android).\n * Manages memory, batching, and lazy loading for optimal mobile performance.\n */\nexport interface MobilePerformanceOptimizerConfig {\n  maxMemoryMB?: number;\n  maxCacheEntries?: number;\n  batchSize?: number;\n  debounceMs?: number;\n  enableGCHints?: boolean;\n  enableLazyLoading?: boolean;\n  virtualScrollThreshold?: number;\n}\n\nexport interface OptimizationConfig {\n  enableBatching?: boolean;\n  enableCaching?: boolean;\n  enableVirtualScrolling?: boolean;\n  enableImageOptimization?: boolean;\n  enableMemoryManagement?: boolean;\n  batchSize?: number;\n  cacheSize?: number;\n  imageQuality?: number;\n  memoryThreshold?: number;\n  debounceDelay?: number;\n}\n\nexport interface PerformanceMetrics {\n  batchProcessingEnabled: boolean;\n  effectiveBatchSize: number;\n  cacheEnabled: boolean;\n  effectiveCacheSize: number;\n  virtualScrollingEnabled: boolean;\n  imageOptimizationEnabled: boolean;\n  memoryManagementEnabled: boolean;\n  operations: Record<\n    string,\n    { count: number; totalTime: number; averageTime: number }\n  >;\n  cacheStats: Record<string, { hits: number; misses: number; size: number }>;\n  memoryUsage: { used: number; total: number; percentage: number };\n}\n\nexport class MobilePerformanceOptimizer {\n  private static instance: MobilePerformanceOptimizer;\n\n  // Performance thresholds\n  private readonly MOBILE_BATCH_SIZE = 10;\n  private readonly DESKTOP_BATCH_SIZE = 50;\n  private readonly MOBILE_CACHE_SIZE = 50;\n  private readonly DESKTOP_CACHE_SIZE = 200;\n  private readonly MOBILE_DEBOUNCE_MS = 500;\n  private readonly DESKTOP_DEBOUNCE_MS = 200;\n\n  // Memory management\n  private memoryPressureCallbacks: Set<() => void> = new Set();\n  private lastMemoryCheck: number = 0;\n  private memoryCheckInterval: number = 5000; // 5 seconds\n\n  // Lazy loading state\n  private loadingQueue: Map<string, () => Promise<any>> = new Map();\n  private isProcessingQueue: boolean = false;\n\n  // Platform detection\n  private _isMobile: boolean;\n  private _isIOS: boolean;\n  private _isAndroid: boolean;\n  private _isTablet: boolean;\n\n  private config: MobilePerformanceOptimizerConfig;\n\n  constructor(config?: MobilePerformanceOptimizerConfig) {\n    this.config = {\n      maxMemoryMB: 100,\n      maxCacheEntries: 200,\n      batchSize: 50,\n      debounceMs: 300,\n      enableGCHints: false,\n      enableLazyLoading: true,\n      virtualScrollThreshold: 100,\n      ...config,\n    };\n    this.detectPlatform();\n    this.setupMemoryMonitoring();\n  }\n\n  public static getInstance(\n    config?: MobilePerformanceOptimizerConfig,\n  ): MobilePerformanceOptimizer {\n    if (!MobilePerformanceOptimizer.instance) {\n      MobilePerformanceOptimizer.instance = new MobilePerformanceOptimizer(\n        config,\n      );\n    }\n    return MobilePerformanceOptimizer.instance;\n  }\n\n  private detectPlatform(): void {\n    // Use Obsidian's Platform API if available\n    if (typeof Platform !== \"undefined\" && Platform) {\n      this._isMobile = Platform.isMobile || Platform.isMobileApp;\n      this._isIOS = Platform.isIosApp;\n      this._isAndroid = Platform.isAndroidApp;\n      this._isTablet = Platform.isTablet;\n    } else {\n      // Fallback values for test environment\n      this._isMobile = false;\n      this._isIOS = false;\n      this._isAndroid = false;\n      this._isTablet = false;\n    }\n\n    // Fallback detection using user agent if Platform API is unavailable or values are false\n    if (!this._isMobile && typeof navigator !== \"undefined\") {\n      const userAgent = navigator.userAgent.toLowerCase();\n      this._isMobile = /mobile|android|iphone|ipad|ipod/.test(userAgent);\n      this._isIOS = /iphone|ipad|ipod/.test(userAgent);\n      this._isAndroid = /android/.test(userAgent);\n      this._isTablet = /ipad|tablet/.test(userAgent);\n    }\n  }\n\n  private setupMemoryMonitoring(): void {\n    if (!this.isMobile()) return;\n\n    // Monitor memory pressure on mobile\n    if (\"requestIdleCallback\" in window) {\n      const checkMemory = () => {\n        window.requestIdleCallback(() => {\n          this.checkMemoryPressure();\n          setTimeout(checkMemory, this.memoryCheckInterval);\n        });\n      };\n      checkMemory();\n    }\n  }\n\n  private checkMemoryPressure(): void {\n    const now = Date.now();\n    if (now - this.lastMemoryCheck < this.memoryCheckInterval) return;\n\n    this.lastMemoryCheck = now;\n\n    // Check if we're under memory pressure\n    if (this.isUnderMemoryPressure()) {\n      // Notify all registered callbacks\n      this.memoryPressureCallbacks.forEach((callback) => {\n        try {\n          callback();\n        } catch (error) {\n          console.error(\"Memory pressure callback error:\", error);\n        }\n      });\n    }\n  }\n\n  private isUnderMemoryPressure(): boolean {\n    // Check performance.memory if available (Chrome/Edge)\n    if (\"memory\" in performance) {\n      const memory = (performance as any).memory;\n      const usageRatio = memory.usedJSHeapSize / memory.jsHeapSizeLimit;\n      return usageRatio > 0.8; // 80% memory usage threshold\n    }\n\n    // Fallback: assume memory pressure on older devices\n    if (this.isMobile()) {\n      // Simple heuristic based on device age\n      const deviceAge = this.estimateDeviceAge();\n      return deviceAge > 3; // Assume pressure on devices older than 3 years\n    }\n\n    return false;\n  }\n\n  private estimateDeviceAge(): number {\n    // Estimate device age based on capabilities\n    let age = 0;\n\n    // Check for modern features\n    if (!(\"IntersectionObserver\" in window)) age += 2;\n    if (!(\"ResizeObserver\" in window)) age += 1;\n    if (!(\"requestIdleCallback\" in window)) age += 1;\n    if (!(\"AbortController\" in window)) age += 1;\n\n    return age;\n  }\n\n  // Public API\n\n  public isMobile(): boolean {\n    return this._isMobile;\n  }\n\n  public isIOS(): boolean {\n    return this._isIOS;\n  }\n\n  public isAndroid(): boolean {\n    return this._isAndroid;\n  }\n\n  public isTablet(): boolean {\n    return this._isTablet;\n  }\n\n  public getBatchSize(): number {\n    if (this.config.batchSize) {\n      return this.config.batchSize;\n    }\n    return this.isMobile() ? this.MOBILE_BATCH_SIZE : this.DESKTOP_BATCH_SIZE;\n  }\n\n  public getCacheSize(): number {\n    if (this.config.maxCacheEntries) {\n      return this.config.maxCacheEntries;\n    }\n    return this.isMobile() ? this.MOBILE_CACHE_SIZE : this.DESKTOP_CACHE_SIZE;\n  }\n\n  public getDebounceMs(): number {\n    if (this.config.debounceMs) {\n      return this.config.debounceMs;\n    }\n    return this.isMobile() ? this.MOBILE_DEBOUNCE_MS : this.DESKTOP_DEBOUNCE_MS;\n  }\n\n  /**\n   * Register a callback to be called when memory pressure is detected\n   */\n  public onMemoryPressure(callback: () => void): () => void {\n    this.memoryPressureCallbacks.add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      this.memoryPressureCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Process data in optimized batches\n   */\n  public async processBatch<T, R>(\n    items: T[],\n    processor: (item: T) => Promise<R>,\n    options?: {\n      onProgress?: (processed: number, total: number) => void;\n      priorityItems?: T[];\n    },\n  ): Promise<R[]> {\n    const batchSize = this.getBatchSize();\n    const results: R[] = [];\n\n    // Process priority items first if provided\n    if (options?.priorityItems) {\n      for (const item of options.priorityItems) {\n        results.push(await processor(item));\n      }\n    }\n\n    // Process remaining items in batches\n    const regularItems = options?.priorityItems\n      ? items.filter((item) => !options.priorityItems!.includes(item))\n      : items;\n\n    for (let i = 0; i < regularItems.length; i += batchSize) {\n      const batch = regularItems.slice(i, i + batchSize);\n\n      // Process batch in parallel\n      const batchResults = await Promise.all(\n        batch.map((item) => processor(item)),\n      );\n\n      results.push(...batchResults);\n\n      // Report progress\n      if (options?.onProgress) {\n        options.onProgress(results.length, items.length);\n      }\n\n      // Yield to UI thread on mobile\n      if (this.isMobile() && i + batchSize < regularItems.length) {\n        await this.yieldToUI();\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Lazy load data with queue management\n   */\n  public async lazyLoad<T>(\n    key: string,\n    loader: () => Promise<T>,\n    options?: {\n      priority?: \"high\" | \"normal\" | \"low\";\n      cache?: boolean;\n    },\n  ): Promise<T> {\n    // Check if already loading\n    if (this.loadingQueue.has(key)) {\n      return this.loadingQueue.get(key)!() as Promise<T>;\n    }\n\n    // Create loading promise\n    const loadPromise = async () => {\n      try {\n        const result = await loader();\n\n        // Remove from queue when done\n        this.loadingQueue.delete(key);\n\n        return result;\n      } catch (error) {\n        this.loadingQueue.delete(key);\n        throw error;\n      }\n    };\n\n    // Add to queue\n    this.loadingQueue.set(key, loadPromise);\n\n    // Process queue if not already processing\n    if (!this.isProcessingQueue) {\n      this.processLoadingQueue();\n    }\n\n    return loadPromise();\n  }\n\n  private async processLoadingQueue(): Promise<void> {\n    if (this.isProcessingQueue || this.loadingQueue.size === 0) return;\n\n    this.isProcessingQueue = true;\n\n    while (this.loadingQueue.size > 0) {\n      // Get next item from queue\n      const [key, loader] = this.loadingQueue.entries().next().value;\n\n      try {\n        await loader();\n      } catch (error) {\n        console.error(`Failed to lazy load ${key}:`, error);\n      }\n\n      // Yield to UI thread\n      await this.yieldToUI();\n    }\n\n    this.isProcessingQueue = false;\n  }\n\n  /**\n   * Yield control back to the UI thread\n   */\n  public async yieldToUI(): Promise<void> {\n    return new Promise((resolve) => {\n      if (\"requestIdleCallback\" in window) {\n        window.requestIdleCallback(() => resolve());\n      } else {\n        setTimeout(resolve, 0);\n      }\n    });\n  }\n\n  /**\n   * Debounce function optimized for platform\n   */\n  public debounce<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n  ): (...args: Parameters<T>) => void {\n    const delay = wait ?? this.getDebounceMs();\n    let timeoutId: NodeJS.Timeout;\n\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => func(...args), delay);\n    };\n  }\n\n  /**\n   * Throttle function optimized for platform\n   */\n  public throttle<T extends (...args: any[]) => any>(\n    func: T,\n    wait?: number,\n  ): (...args: Parameters<T>) => void {\n    const delay = wait ?? this.getDebounceMs();\n    let lastCall = 0;\n    let timeoutId: NodeJS.Timeout | null = null;\n\n    return (...args: Parameters<T>) => {\n      const now = Date.now();\n      const timeSinceLastCall = now - lastCall;\n\n      if (timeSinceLastCall >= delay) {\n        lastCall = now;\n        func(...args);\n      } else if (!timeoutId) {\n        timeoutId = setTimeout(() => {\n          lastCall = Date.now();\n          timeoutId = null;\n          func(...args);\n        }, delay - timeSinceLastCall);\n      }\n    };\n  }\n\n  /**\n   * Create an LRU cache optimized for platform\n   */\n  public createCache<K, V>(options?: {\n    maxSize?: number;\n    ttl?: number;\n  }): Map<K, V> {\n    const maxSize = options?.maxSize ?? this.getCacheSize();\n\n    // Use a simple Map with size limit for mobile\n    const cache = new Map<K, V>();\n\n    // Override set method to enforce size limit\n    const originalSet = cache.set.bind(cache);\n    cache.set = (key: K, value: V) => {\n      // Remove oldest entry if at capacity\n      if (cache.size >= maxSize && !cache.has(key)) {\n        const firstKey = cache.keys().next().value;\n        cache.delete(firstKey);\n      }\n\n      return originalSet(key, value);\n    };\n\n    return cache;\n  }\n\n  /**\n   * Optimize image loading for mobile\n   */\n  public getOptimalImageSize(): { width: number; height: number } {\n    if (this.isMobile()) {\n      // Get device pixel ratio\n      const dpr = window.devicePixelRatio || 1;\n\n      // Get viewport size\n      const viewportWidth = window.innerWidth;\n      const viewportHeight = window.innerHeight;\n\n      // Calculate optimal size based on viewport and DPR\n      return {\n        width: Math.min(viewportWidth * dpr, 1024),\n        height: Math.min(viewportHeight * dpr, 1024),\n      };\n    }\n\n    // Desktop can handle larger images\n    return {\n      width: 2048,\n      height: 2048,\n    };\n  }\n\n  /**\n   * Check if a feature should be enabled based on performance\n   */\n  public shouldEnableFeature(\n    feature: \"animations\" | \"shadows\" | \"3d\" | \"transitions\",\n  ): boolean {\n    if (!this.isMobile()) return true;\n\n    // Disable heavy features on mobile\n    switch (feature) {\n      case \"animations\":\n        return !this.isUnderMemoryPressure();\n      case \"shadows\":\n        return false; // Always disable shadows on mobile\n      case \"3d\":\n        return this.isTablet(); // Only on tablets\n      case \"transitions\":\n        return !this.isUnderMemoryPressure();\n      default:\n        return true;\n    }\n  }\n\n  // Performance tracking\n  private operations: Map<string, { count: number; totalTime: number }> =\n    new Map();\n  private caches: Map<string, Map<any, any>> = new Map();\n  private cacheStats: Map<string, { hits: number; misses: number }> = new Map();\n  private pendingCallbacks: Set<number> = new Set();\n\n  /**\n   * Clear all managed caches\n   */\n  public clearAllCaches(): void {\n    this.caches.forEach((cache) => cache.clear());\n    this.cacheStats.forEach((stats) => {\n      stats.hits = 0;\n      stats.misses = 0;\n    });\n  }\n\n  /**\n   * Get cache statistics for all caches\n   */\n  public getCacheStats(): Record<\n    string,\n    { hits: number; misses: number; size: number }\n  > {\n    const stats: Record<\n      string,\n      { hits: number; misses: number; size: number }\n    > = {};\n\n    this.cacheStats.forEach((stat, name) => {\n      const cache = this.caches.get(name);\n      stats[name] = {\n        ...stat,\n        size: cache?.size || 0,\n      };\n    });\n\n    return stats;\n  }\n\n  /**\n   * Track operation timing\n   */\n  public trackOperation<T>(name: string, operation: () => T): T {\n    const start = performance.now();\n    const result = operation();\n    const duration = performance.now() - start;\n\n    const existing = this.operations.get(name) || { count: 0, totalTime: 0 };\n    this.operations.set(name, {\n      count: existing.count + 1,\n      totalTime: existing.totalTime + duration,\n    });\n\n    return result;\n  }\n\n  /**\n   * Create virtual scroll container\n   */\n  public createVirtualScroll<T>(\n    container: HTMLElement,\n    items: T[],\n    renderItem: (item: T) => HTMLElement,\n    options?: {\n      itemHeight?: number;\n      containerHeight?: number;\n      overscan?: number;\n    },\n  ): { destroy: () => void } {\n    const itemHeight = options?.itemHeight || 50;\n    const containerHeight = options?.containerHeight || 400;\n    const overscan = options?.overscan || 5;\n\n    container.style.height = `${containerHeight}px`;\n    container.style.overflow = \"auto\";\n\n    let startIndex = 0;\n    let endIndex = Math.min(\n      items.length,\n      Math.ceil(containerHeight / itemHeight) + overscan,\n    );\n\n    const render = () => {\n      container.innerHTML = \"\";\n      for (let i = startIndex; i < endIndex; i++) {\n        if (items[i]) {\n          const element = renderItem(items[i]);\n          container.appendChild(element);\n        }\n      }\n    };\n\n    const handleScroll = () => {\n      const scrollTop = container.scrollTop;\n      startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n      endIndex = Math.min(\n        items.length,\n        startIndex + Math.ceil(containerHeight / itemHeight) + 2 * overscan,\n      );\n      render();\n    };\n\n    container.addEventListener(\"scroll\", handleScroll);\n    render();\n\n    return {\n      destroy: () => {\n        container.removeEventListener(\"scroll\", handleScroll);\n        container.innerHTML = \"\";\n      },\n    };\n  }\n\n  /**\n   * Optimize image file\n   */\n  public async optimizeImage(\n    file: File,\n    options?: { maxWidth?: number; maxHeight?: number; quality?: number },\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n      const img = document.createElement(\"img\");\n\n      if (!ctx) {\n        reject(new Error(\"Canvas not supported\"));\n        return;\n      }\n\n      img.onload = () => {\n        const maxWidth = options?.maxWidth || 1024;\n        const maxHeight = options?.maxHeight || 1024;\n        const quality =\n          options?.quality || (this.config as any).imageQuality || 0.8;\n\n        // Calculate new dimensions\n        let { width, height } = img;\n        if (width > maxWidth || height > maxHeight) {\n          const ratio = Math.min(maxWidth / width, maxHeight / height);\n          width *= ratio;\n          height *= ratio;\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n        ctx.drawImage(img, 0, 0, width, height);\n\n        const dataUrl = canvas.toDataURL(\"image/jpeg\", quality);\n        resolve(dataUrl);\n      };\n\n      img.onerror = () => reject(new Error(\"Failed to load image\"));\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  /**\n   * Schedule memory cleanup during idle time\n   */\n  public scheduleMemoryCleanup(callback: () => void): void {\n    const scheduleCallback = (global as any).requestIdleCallback || setTimeout;\n    const callbackId = scheduleCallback(callback, { timeout: 5000 });\n    this.pendingCallbacks.add(callbackId);\n  }\n\n  /**\n   * Force garbage collection if available\n   */\n  public forceGarbageCollection(): void {\n    if ((global as any).gc) {\n      (global as any).gc();\n    }\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(newConfig: Partial<OptimizationConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n\n  /**\n   * Get comprehensive performance metrics\n   */\n  public getMetrics(): PerformanceMetrics {\n    const operationMetrics: Record<\n      string,\n      { count: number; totalTime: number; averageTime: number }\n    > = {};\n\n    this.operations.forEach((data, name) => {\n      operationMetrics[name] = {\n        ...data,\n        averageTime: data.totalTime / data.count,\n      };\n    });\n\n    return {\n      batchProcessingEnabled: true,\n      effectiveBatchSize: this.getBatchSize(),\n      cacheEnabled: true,\n      effectiveCacheSize: this.getCacheSize(),\n      virtualScrollingEnabled: this.config.enableLazyLoading || false,\n      imageOptimizationEnabled: true,\n      memoryManagementEnabled: this.isMobile(),\n      operations: operationMetrics,\n      cacheStats: this.getCacheStats(),\n      memoryUsage: this.getMemoryUsage(),\n    };\n  }\n\n  /**\n   * Get current memory usage statistics\n   */\n  public getMemoryUsage(): { used: number; total: number; percentage: number } {\n    if (\"memory\" in performance) {\n      const memory = (performance as any).memory;\n      return {\n        used: memory.usedJSHeapSize || 0,\n        total: memory.totalJSHeapSize || 0,\n        percentage: memory.totalJSHeapSize\n          ? Math.round((memory.usedJSHeapSize / memory.totalJSHeapSize) * 100)\n          : 0,\n      };\n    }\n\n    return { used: 0, total: 0, percentage: 0 };\n  }\n\n  /**\n   * Clean up resources (alias for destroy for test compatibility)\n   */\n  public cleanup(): void {\n    this.destroy();\n  }\n\n  /**\n   * Clean up resources and stop monitoring\n   */\n  public destroy(): void {\n    // Clear all callbacks\n    this.memoryPressureCallbacks.clear();\n\n    // Clear loading queue\n    this.loadingQueue.clear();\n    this.isProcessingQueue = false;\n\n    // Cancel pending callbacks\n    this.pendingCallbacks.forEach((id) => {\n      const cancelCallback = (global as any).cancelIdleCallback || clearTimeout;\n      cancelCallback(id);\n    });\n    this.pendingCallbacks.clear();\n\n    // Clear caches\n    this.clearAllCaches();\n\n    // Clear operation tracking\n    this.operations.clear();\n\n    // Clear static instance if this is the singleton\n    if (MobilePerformanceOptimizer.instance === this) {\n      MobilePerformanceOptimizer.instance = null as any;\n    }\n  }\n\n  /**\n   * Register out-of-memory handler\n   */\n  onOutOfMemory(handler: () => void): void {\n    this.oomHandler = handler;\n  }\n\n  private oomHandler?: () => void;\n\n  /**\n   * Get loading strategy based on connection and device capabilities\n   */\n  async getLoadingStrategy(): Promise<{\n    isSuccess: boolean;\n    getValue: () => any;\n  }> {\n    try {\n      const strategy = {\n        batchSize: Platform.isMobile\n          ? this.MOBILE_BATCH_SIZE\n          : this.DESKTOP_BATCH_SIZE,\n        useVirtualScrolling: Platform.isMobile,\n        enableImageOptimization: Platform.isMobile,\n        enableBackgroundLoading: !Platform.isMobile,\n        adaptiveLoading: Platform.isMobile,\n      };\n\n      return {\n        isSuccess: true,\n        getValue: () => strategy,\n      };\n    } catch (error) {\n      return {\n        isSuccess: false,\n        getValue: () => null,\n      };\n    }\n  }\n\n  /**\n   * Handle offline mode scenarios\n   */\n  async handleOfflineMode(): Promise<{\n    isSuccess: boolean;\n    getValue: () => any;\n  }> {\n    try {\n      const offlineStrategy = {\n        enableCaching: true,\n        cacheSize: Platform.isMobile\n          ? this.MOBILE_CACHE_SIZE\n          : this.DESKTOP_CACHE_SIZE,\n        enableOfflineStorage: true,\n        enableQueuedOperations: true,\n        enableDegradedMode: true,\n      };\n\n      return {\n        isSuccess: true,\n        getValue: () => offlineStrategy,\n      };\n    } catch (error) {\n      return {\n        isSuccess: false,\n        getValue: () => null,\n      };\n    }\n  }\n}\n"],"version":3}