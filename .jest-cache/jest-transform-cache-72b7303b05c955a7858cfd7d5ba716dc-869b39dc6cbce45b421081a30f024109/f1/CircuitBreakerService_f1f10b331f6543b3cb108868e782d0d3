375814ddda334cb93486aa0a5c0aa157
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircuitBreakerState = exports.CircuitBreakerService = void 0;
const Result_1 = require("../../domain/core/Result");
/**
 * Circuit breaker implementation for resilient asset creation
 * Prevents cascade failures and provides graceful degradation
 */
class CircuitBreakerService {
    constructor() {
        this.circuits = new Map();
        this.defaultConfig = {
            failureThreshold: 5,
            resetTimeout: 60000,
            monitoringPeriod: 10000,
            halfOpenMaxCalls: 3,
        };
        this.setupCleanupTimer();
    }
    static getInstance() {
        if (!CircuitBreakerService.instance) {
            CircuitBreakerService.instance = new CircuitBreakerService();
        }
        return CircuitBreakerService.instance;
    }
    /**
     * Executes an operation with circuit breaker protection
     * @param circuitName Unique identifier for the circuit
     * @param operation The operation to execute
     * @param config Optional circuit configuration
     * @returns Result of the operation or circuit breaker response
     */
    async execute(circuitName, operation, config) {
        const circuit = this.getOrCreateCircuit(circuitName, config);
        // Check circuit state
        const stateCheck = this.checkCircuitState(circuit);
        if (!stateCheck.canExecute) {
            return Result_1.Result.fail(stateCheck.reason);
        }
        const startTime = Date.now();
        try {
            // Execute the operation
            const result = await operation();
            const duration = Date.now() - startTime;
            if (result.isSuccess) {
                this.recordSuccess(circuit, duration);
            }
            else {
                this.recordFailure(circuit, result.getError(), duration);
            }
            return result;
        }
        catch (error) {
            const duration = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : String(error);
            this.recordFailure(circuit, errorMessage, duration);
            return Result_1.Result.fail(`Circuit breaker caught error: ${errorMessage}`);
        }
    }
    /**
     * Gets current state of a circuit
     * @param circuitName The circuit to check
     * @returns Current circuit state
     */
    getCircuitState(circuitName) {
        const circuit = this.circuits.get(circuitName);
        if (!circuit) {
            return CircuitBreakerState.CLOSED;
        }
        return circuit.state;
    }
    /**
     * Gets circuit statistics for monitoring
     * @param circuitName The circuit to get stats for
     * @returns Circuit statistics or null if not found
     */
    getCircuitStats(circuitName) {
        const circuit = this.circuits.get(circuitName);
        if (!circuit) {
            return null;
        }
        return {
            circuitName,
            state: circuit.state,
            failureCount: circuit.failureCount,
            successCount: circuit.successCount,
            lastFailureTime: circuit.lastFailureTime,
            lastSuccessTime: circuit.lastSuccessTime,
            averageResponseTime: circuit.averageResponseTime,
            totalCalls: circuit.successCount + circuit.failureCount,
            uptime: this.calculateUptime(circuit),
        };
    }
    /**
     * Manually opens a circuit (for testing or emergency)
     * @param circuitName The circuit to open
     */
    openCircuit(circuitName) {
        const circuit = this.getOrCreateCircuit(circuitName);
        circuit.state = CircuitBreakerState.OPEN;
        circuit.lastStateChange = Date.now();
        console.warn(`Circuit ${circuitName} manually opened`);
    }
    /**
     * Manually closes a circuit (resets it)
     * @param circuitName The circuit to close
     */
    closeCircuit(circuitName) {
        const circuit = this.getOrCreateCircuit(circuitName);
        circuit.state = CircuitBreakerState.CLOSED;
        circuit.failureCount = 0;
        circuit.lastStateChange = Date.now();
        console.info(`Circuit ${circuitName} manually closed`);
    }
    /**
     * Gets all circuit names and their states
     * @returns Map of circuit names to states
     */
    getAllCircuitStates() {
        const states = new Map();
        for (const [name, circuit] of this.circuits) {
            states.set(name, circuit.state);
        }
        return states;
    }
    /**
     * Clears all circuit data (for testing)
     */
    clearAllCircuits() {
        this.circuits.clear();
        console.debug("All circuits cleared");
    }
    getOrCreateCircuit(circuitName, config) {
        let circuit = this.circuits.get(circuitName);
        if (!circuit) {
            circuit = {
                name: circuitName,
                state: CircuitBreakerState.CLOSED,
                config: { ...this.defaultConfig, ...config },
                failureCount: 0,
                successCount: 0,
                lastFailureTime: 0,
                lastSuccessTime: 0,
                lastStateChange: Date.now(),
                averageResponseTime: 0,
                responseTimes: [],
            };
            this.circuits.set(circuitName, circuit);
            console.debug(`Created new circuit: ${circuitName}`);
        }
        return circuit;
    }
    checkCircuitState(circuit) {
        const now = Date.now();
        switch (circuit.state) {
            case CircuitBreakerState.CLOSED:
                return { canExecute: true, reason: "" };
            case CircuitBreakerState.OPEN:
                if (now - circuit.lastStateChange >= circuit.config.resetTimeout) {
                    // Transition to half-open
                    circuit.state = CircuitBreakerState.HALF_OPEN;
                    circuit.lastStateChange = now;
                    console.info(`Circuit ${circuit.name} transitioned to HALF_OPEN`);
                    return { canExecute: true, reason: "" };
                }
                return {
                    canExecute: false,
                    reason: `Circuit ${circuit.name} is OPEN. Try again in ${Math.ceil((circuit.config.resetTimeout - (now - circuit.lastStateChange)) / 1000)} seconds`,
                };
            case CircuitBreakerState.HALF_OPEN:
                // Allow limited calls in half-open state
                const recentCalls = this.getRecentCalls(circuit);
                if (recentCalls < circuit.config.halfOpenMaxCalls) {
                    return { canExecute: true, reason: "" };
                }
                return {
                    canExecute: false,
                    reason: `Circuit ${circuit.name} is HALF_OPEN with max calls reached`,
                };
            default:
                return { canExecute: true, reason: "" };
        }
    }
    recordSuccess(circuit, duration) {
        circuit.successCount++;
        circuit.lastSuccessTime = Date.now();
        this.updateResponseTime(circuit, duration);
        if (circuit.state === CircuitBreakerState.HALF_OPEN) {
            // Success in half-open state - close the circuit
            circuit.state = CircuitBreakerState.CLOSED;
            circuit.failureCount = 0;
            circuit.lastStateChange = Date.now();
            console.info(`Circuit ${circuit.name} closed after successful half-open test`);
        }
    }
    recordFailure(circuit, error, duration) {
        circuit.failureCount++;
        circuit.lastFailureTime = Date.now();
        this.updateResponseTime(circuit, duration);
        console.warn(`Circuit ${circuit.name} failure ${circuit.failureCount}: ${error}`);
        // Check if we should open the circuit
        if (circuit.state === CircuitBreakerState.CLOSED &&
            circuit.failureCount >= circuit.config.failureThreshold) {
            circuit.state = CircuitBreakerState.OPEN;
            circuit.lastStateChange = Date.now();
            console.error(`Circuit ${circuit.name} opened due to ${circuit.failureCount} failures`);
        }
        else if (circuit.state === CircuitBreakerState.HALF_OPEN) {
            // Failure in half-open state - reopen the circuit
            circuit.state = CircuitBreakerState.OPEN;
            circuit.lastStateChange = Date.now();
            console.error(`Circuit ${circuit.name} reopened after half-open failure`);
        }
    }
    updateResponseTime(circuit, duration) {
        circuit.responseTimes.push(duration);
        // Keep only recent response times for average calculation
        const maxSamples = 100;
        if (circuit.responseTimes.length > maxSamples) {
            circuit.responseTimes = circuit.responseTimes.slice(-maxSamples);
        }
        // Calculate moving average
        circuit.averageResponseTime =
            circuit.responseTimes.reduce((sum, time) => sum + time, 0) /
                circuit.responseTimes.length;
    }
    getRecentCalls(circuit) {
        const now = Date.now();
        const period = circuit.config.monitoringPeriod;
        // This is simplified - in a real implementation, you'd track actual call times
        return Math.max(0, circuit.successCount + circuit.failureCount -
            Math.floor((now - circuit.lastStateChange) / period));
    }
    calculateUptime(circuit) {
        const totalTime = Date.now() - circuit.lastStateChange;
        if (totalTime === 0)
            return 100;
        // Simplified calculation - in reality you'd track open/closed periods
        const openTime = circuit.state === CircuitBreakerState.OPEN ? totalTime : 0;
        return Math.max(0, ((totalTime - openTime) / totalTime) * 100);
    }
    setupCleanupTimer() {
        // Clean up old circuits every hour
        if (typeof setInterval !== 'undefined') {
            setInterval(() => {
                const now = Date.now();
                const maxAge = 60 * 60 * 1000; // 1 hour
                for (const [name, circuit] of this.circuits) {
                    if (now - circuit.lastStateChange > maxAge &&
                        circuit.successCount === 0 &&
                        circuit.failureCount === 0) {
                        this.circuits.delete(name);
                        console.debug(`Cleaned up inactive circuit: ${name}`);
                    }
                }
            }, 60 * 60 * 1000);
        }
    }
}
exports.CircuitBreakerService = CircuitBreakerService;
CircuitBreakerService.instance = null;
var CircuitBreakerState;
(function (CircuitBreakerState) {
    CircuitBreakerState["CLOSED"] = "CLOSED";
    CircuitBreakerState["OPEN"] = "OPEN";
    CircuitBreakerState["HALF_OPEN"] = "HALF_OPEN";
})(CircuitBreakerState = exports.CircuitBreakerState || (exports.CircuitBreakerState = {}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,