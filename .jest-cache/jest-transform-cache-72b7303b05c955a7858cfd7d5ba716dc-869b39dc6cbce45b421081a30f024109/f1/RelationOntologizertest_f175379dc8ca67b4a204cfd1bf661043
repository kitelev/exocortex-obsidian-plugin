c660f5fe891f54927260e41690875520
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const RelationOntologizer_1 = require("../../src/application/services/RelationOntologizer");
const RelationAsset_1 = require("../../src/domain/entities/RelationAsset");
describe('RelationOntologizer', () => {
    let ontologizer;
    let mockApp;
    let mockFile;
    beforeEach(() => {
        // Setup mock app
        mockApp = {
            vault: {
                getMarkdownFiles: jest.fn().mockReturnValue([]),
                create: jest.fn(),
                modify: jest.fn(),
                read: jest.fn(),
                createFolder: jest.fn(),
                getAbstractFileByPath: jest.fn()
            },
            metadataCache: {
                getFileCache: jest.fn()
            }
        };
        ontologizer = new RelationOntologizer_1.RelationOntologizer(mockApp);
        // Setup mock file
        mockFile = {
            basename: 'TestAsset',
            path: 'test/TestAsset.md',
            name: 'TestAsset.md',
            extension: 'md'
        };
    });
    describe('Asset Ontologization', () => {
        test('should extract object properties as relations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockApp.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Asset_uid': 'asset-123',
                    'exo__Asset_relates': ['[[Project A]]', '[[Task B]]'],
                    'ems__Task_project': '[[Project C]]',
                    'ems__Task_assignedTo': '[[Person D]]',
                    'title': 'Test Asset',
                    'status': 'active' // Should be ignored
                }
            });
            const relations = yield ontologizer.ontologizeAsset(mockFile);
            expect(relations).toHaveLength(4);
            // Check first relation
            expect(relations[0].subject).toBe('asset-123');
            expect(relations[0].predicate).toBe('exo__Asset_relates');
            expect(relations[0].object).toBe('Project A');
            expect(relations[0].type).toBe('adapter__Relation');
            // Check that all relations have required fields
            relations.forEach(rel => {
                expect(rel.uid).toBeDefined();
                expect(rel.createdAt).toBeInstanceOf(Date);
                expect(rel.isDefinedBy).toBeDefined();
                expect(rel.provenance).toContain('ontologized from');
            });
        }));
        test('should handle assets without UID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockApp.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Asset_relates': '[[Other Asset]]'
                }
            });
            const relations = yield ontologizer.ontologizeAsset(mockFile);
            expect(relations).toHaveLength(1);
            expect(relations[0].subject).toBe('TestAsset'); // Uses basename as fallback
        }));
        test('should skip meta properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockApp.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Asset_uid': 'asset-123',
                    'exo__Asset_createdAt': '2025-01-01',
                    'exo__Instance_class': '[[ems__Task]]',
                    'tags': ['tag1', 'tag2']
                }
            });
            const relations = yield ontologizer.ontologizeAsset(mockFile);
            expect(relations).toHaveLength(0); // All are meta properties
        }));
        test('should handle empty frontmatter', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockApp.metadataCache.getFileCache.mockReturnValue({
                frontmatter: null
            });
            const relations = yield ontologizer.ontologizeAsset(mockFile);
            expect(relations).toHaveLength(0);
        }));
    });
    describe('RelationAssetHelper', () => {
        test('should create relation with all fields', () => {
            const relation = RelationAsset_1.RelationAssetHelper.create({
                subject: 'task-1',
                predicate: 'ems__Task_project',
                object: 'project-1',
                confidence: 0.9,
                provenance: 'test'
            });
            expect(relation.uid).toBeDefined();
            expect(relation.type).toBe('adapter__Relation');
            expect(relation.subject).toBe('task-1');
            expect(relation.predicate).toBe('ems__Task_project');
            expect(relation.object).toBe('project-1');
            expect(relation.confidence).toBe(0.9);
            expect(relation.provenance).toBe('test');
            expect(relation.isDefinedBy).toBe('ems');
        });
        test('should create bidirectional relations', () => {
            const [forward, inverse] = RelationAsset_1.RelationAssetHelper.createBidirectional({
                subject: 'task-1',
                predicate: 'ems__Task_project',
                object: 'project-1'
            });
            // Check forward relation
            expect(forward.subject).toBe('task-1');
            expect(forward.object).toBe('project-1');
            expect(forward.predicate).toBe('ems__Task_project');
            expect(forward.inverseOf).toBe(inverse.uid);
            // Check inverse relation
            expect(inverse.subject).toBe('project-1');
            expect(inverse.object).toBe('task-1');
            expect(inverse.predicate).toBe('ems__Project_hasTasks');
            expect(inverse.inverseOf).toBe(forward.uid);
        });
        test('should get correct inverse predicates', () => {
            expect(RelationAsset_1.RelationAssetHelper.getInversePredicate('ems__Task_project'))
                .toBe('ems__Project_hasTasks');
            expect(RelationAsset_1.RelationAssetHelper.getInversePredicate('ems__partOf'))
                .toBe('ems__hasPart');
            expect(RelationAsset_1.RelationAssetHelper.getInversePredicate('exo__subClassOf'))
                .toBe('exo__superClassOf');
            // Test unknown predicate
            expect(RelationAsset_1.RelationAssetHelper.getInversePredicate('custom__unknownProp'))
                .toBe('custom__inverseOf_unknownProp');
        });
        test('should extract ontology from predicate', () => {
            expect(RelationAsset_1.RelationAssetHelper.extractOntology('ems__Task_project')).toBe('ems');
            expect(RelationAsset_1.RelationAssetHelper.extractOntology('exo__Asset_relates')).toBe('exo');
            expect(RelationAsset_1.RelationAssetHelper.extractOntology('rdf:type')).toBe('rdf');
            expect(RelationAsset_1.RelationAssetHelper.extractOntology('unknownProp')).toBe('exo');
        });
        test('should convert to frontmatter', () => {
            const relation = {
                uid: 'rel-123',
                type: 'adapter__Relation',
                subject: 'task-1',
                predicate: 'ems__Task_project',
                object: 'project-1',
                createdAt: new Date('2025-01-01T10:00:00Z'),
                isDefinedBy: 'ems',
                confidence: 0.95,
                provenance: 'manual',
                inverseOf: 'rel-456'
            };
            const frontmatter = RelationAsset_1.RelationAssetHelper.toFrontmatter(relation);
            expect(frontmatter['exo__Instance_class']).toBe('[[adapter__Relation]]');
            expect(frontmatter['exo__Asset_uid']).toBe('rel-123');
            expect(frontmatter['adapter__Relation_subject']).toBe('[[task-1]]');
            expect(frontmatter['adapter__Relation_predicate']).toBe('ems__Task_project');
            expect(frontmatter['adapter__Relation_object']).toBe('[[project-1]]');
            expect(frontmatter['adapter__Relation_confidence']).toBe(0.95);
            expect(frontmatter['adapter__Relation_inverseOf']).toBe('rel-456');
        });
        test('should generate valid filename', () => {
            const relation = {
                uid: 'rel-123',
                type: 'adapter__Relation',
                subject: 'Very Long Task Name That Should Be Truncated',
                predicate: 'ems__Task_project',
                object: 'Project With Special!@#$%^&*() Characters',
                createdAt: new Date('2025-01-01T10:00:00Z'),
                isDefinedBy: 'ems'
            };
            const filename = RelationAsset_1.RelationAssetHelper.generateFilename(relation);
            expect(filename).toContain('Relation_');
            expect(filename).toContain('ems__Task_project');
            expect(filename).toContain('.md');
            expect(filename.length).toBeLessThan(255); // Max filename length
        });
    });
    describe('Vault Migration', () => {
        test('should migrate entire vault', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFiles = [
                { path: 'file1.md', basename: 'file1' },
                { path: 'file2.md', basename: 'file2' },
                { path: '99 Relations/existing.md', basename: 'existing' } // Should skip
            ];
            mockApp.vault.getMarkdownFiles.mockReturnValue(mockFiles);
            // Mock file1 with relations
            mockApp.metadataCache.getFileCache.mockImplementation((file) => {
                if (file.basename === 'file1') {
                    return {
                        frontmatter: {
                            'exo__Asset_relates': '[[file2]]'
                        }
                    };
                }
                return { frontmatter: {} };
            });
            // Mock file content for cleaning
            mockApp.vault.read.mockResolvedValue(`---
exo__Asset_relates: "[[file2]]"
title: "File 1"
---

# Content`);
            const progressCallback = jest.fn();
            const result = yield ontologizer.migrateVault(progressCallback);
            expect(result.assetsProcessed).toBe(3);
            expect(result.relationsCreated).toBe(1);
            expect(result.errors).toHaveLength(0);
            // Check progress callback was called
            expect(progressCallback).toHaveBeenCalledWith(1, 3);
            expect(progressCallback).toHaveBeenCalledWith(2, 3);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvYXBwbGljYXRpb24vUmVsYXRpb25PbnRvbG9naXplci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDRGQUF5RjtBQUN6RiwyRUFBNkY7QUFHN0YsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNqQyxJQUFJLFdBQWdDLENBQUM7SUFDckMsSUFBSSxPQUFZLENBQUM7SUFDakIsSUFBSSxRQUFlLENBQUM7SUFFcEIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLGlCQUFpQjtRQUNqQixPQUFPLEdBQUc7WUFDTixLQUFLLEVBQUU7Z0JBQ0gsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUM7Z0JBQy9DLE1BQU0sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtnQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ2YsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Z0JBQ3ZCLHFCQUFxQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7YUFDbkM7WUFDRCxhQUFhLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7YUFDMUI7U0FDSixDQUFDO1FBRUYsV0FBVyxHQUFHLElBQUkseUNBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFL0Msa0JBQWtCO1FBQ2xCLFFBQVEsR0FBRztZQUNQLFFBQVEsRUFBRSxXQUFXO1lBQ3JCLElBQUksRUFBRSxtQkFBbUI7WUFDekIsSUFBSSxFQUFFLGNBQWM7WUFDcEIsU0FBUyxFQUFFLElBQUk7U0FDVCxDQUFDO0lBQ2YsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLElBQUksQ0FBQywrQ0FBK0MsRUFBRSxHQUFT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QUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvYXBwbGljYXRpb24vUmVsYXRpb25PbnRvbG9naXplci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbGF0aW9uT250b2xvZ2l6ZXIgfSBmcm9tICcuLi8uLi9zcmMvYXBwbGljYXRpb24vc2VydmljZXMvUmVsYXRpb25PbnRvbG9naXplcic7XG5pbXBvcnQgeyBSZWxhdGlvbkFzc2V0LCBSZWxhdGlvbkFzc2V0SGVscGVyIH0gZnJvbSAnLi4vLi4vc3JjL2RvbWFpbi9lbnRpdGllcy9SZWxhdGlvbkFzc2V0JztcbmltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5cbmRlc2NyaWJlKCdSZWxhdGlvbk9udG9sb2dpemVyJywgKCkgPT4ge1xuICAgIGxldCBvbnRvbG9naXplcjogUmVsYXRpb25PbnRvbG9naXplcjtcbiAgICBsZXQgbW9ja0FwcDogYW55O1xuICAgIGxldCBtb2NrRmlsZTogVEZpbGU7XG4gICAgXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIC8vIFNldHVwIG1vY2sgYXBwXG4gICAgICAgIG1vY2tBcHAgPSB7XG4gICAgICAgICAgICB2YXVsdDoge1xuICAgICAgICAgICAgICAgIGdldE1hcmtkb3duRmlsZXM6IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoW10pLFxuICAgICAgICAgICAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgICAgICAgICAgICAgIG1vZGlmeTogamVzdC5mbigpLFxuICAgICAgICAgICAgICAgIHJlYWQ6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVGb2xkZXI6IGplc3QuZm4oKSxcbiAgICAgICAgICAgICAgICBnZXRBYnN0cmFjdEZpbGVCeVBhdGg6IGplc3QuZm4oKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1ldGFkYXRhQ2FjaGU6IHtcbiAgICAgICAgICAgICAgICBnZXRGaWxlQ2FjaGU6IGplc3QuZm4oKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgb250b2xvZ2l6ZXIgPSBuZXcgUmVsYXRpb25PbnRvbG9naXplcihtb2NrQXBwKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNldHVwIG1vY2sgZmlsZVxuICAgICAgICBtb2NrRmlsZSA9IHtcbiAgICAgICAgICAgIGJhc2VuYW1lOiAnVGVzdEFzc2V0JyxcbiAgICAgICAgICAgIHBhdGg6ICd0ZXN0L1Rlc3RBc3NldC5tZCcsXG4gICAgICAgICAgICBuYW1lOiAnVGVzdEFzc2V0Lm1kJyxcbiAgICAgICAgICAgIGV4dGVuc2lvbjogJ21kJ1xuICAgICAgICB9IGFzIFRGaWxlO1xuICAgIH0pO1xuICAgIFxuICAgIGRlc2NyaWJlKCdBc3NldCBPbnRvbG9naXphdGlvbicsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGV4dHJhY3Qgb2JqZWN0IHByb3BlcnRpZXMgYXMgcmVsYXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbW9ja0FwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICAgICAgICAgIGZyb250bWF0dGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICdleG9fX0Fzc2V0X3VpZCc6ICdhc3NldC0xMjMnLFxuICAgICAgICAgICAgICAgICAgICAnZXhvX19Bc3NldF9yZWxhdGVzJzogWydbW1Byb2plY3QgQV1dJywgJ1tbVGFzayBCXV0nXSxcbiAgICAgICAgICAgICAgICAgICAgJ2Vtc19fVGFza19wcm9qZWN0JzogJ1tbUHJvamVjdCBDXV0nLFxuICAgICAgICAgICAgICAgICAgICAnZW1zX19UYXNrX2Fzc2lnbmVkVG8nOiAnW1tQZXJzb24gRF1dJyxcbiAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJ1Rlc3QgQXNzZXQnLCAvLyBTaG91bGQgYmUgaWdub3JlZCAobm90IG9iamVjdCBwcm9wZXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgJ3N0YXR1cyc6ICdhY3RpdmUnIC8vIFNob3VsZCBiZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9ucyA9IGF3YWl0IG9udG9sb2dpemVyLm9udG9sb2dpemVBc3NldChtb2NrRmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbnMpLnRvSGF2ZUxlbmd0aCg0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgZmlyc3QgcmVsYXRpb25cbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbnNbMF0uc3ViamVjdCkudG9CZSgnYXNzZXQtMTIzJyk7XG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb25zWzBdLnByZWRpY2F0ZSkudG9CZSgnZXhvX19Bc3NldF9yZWxhdGVzJyk7XG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb25zWzBdLm9iamVjdCkudG9CZSgnUHJvamVjdCBBJyk7XG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb25zWzBdLnR5cGUpLnRvQmUoJ2FkYXB0ZXJfX1JlbGF0aW9uJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgYWxsIHJlbGF0aW9ucyBoYXZlIHJlcXVpcmVkIGZpZWxkc1xuICAgICAgICAgICAgcmVsYXRpb25zLmZvckVhY2gocmVsID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVsLnVpZCkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVsLmNyZWF0ZWRBdCkudG9CZUluc3RhbmNlT2YoRGF0ZSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KHJlbC5pc0RlZmluZWRCeSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgICAgICBleHBlY3QocmVsLnByb3ZlbmFuY2UpLnRvQ29udGFpbignb250b2xvZ2l6ZWQgZnJvbScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBhc3NldHMgd2l0aG91dCBVSUQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBtb2NrQXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2V4b19fQXNzZXRfcmVsYXRlcyc6ICdbW090aGVyIEFzc2V0XV0nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9ucyA9IGF3YWl0IG9udG9sb2dpemVyLm9udG9sb2dpemVBc3NldChtb2NrRmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbnMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbnNbMF0uc3ViamVjdCkudG9CZSgnVGVzdEFzc2V0Jyk7IC8vIFVzZXMgYmFzZW5hbWUgYXMgZmFsbGJhY2tcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0ZXN0KCdzaG91bGQgc2tpcCBtZXRhIHByb3BlcnRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBtb2NrQXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgICAgICAgICAgZnJvbnRtYXR0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2V4b19fQXNzZXRfdWlkJzogJ2Fzc2V0LTEyMycsXG4gICAgICAgICAgICAgICAgICAgICdleG9fX0Fzc2V0X2NyZWF0ZWRBdCc6ICcyMDI1LTAxLTAxJyxcbiAgICAgICAgICAgICAgICAgICAgJ2V4b19fSW5zdGFuY2VfY2xhc3MnOiAnW1tlbXNfX1Rhc2tdXScsXG4gICAgICAgICAgICAgICAgICAgICd0YWdzJzogWyd0YWcxJywgJ3RhZzInXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZWxhdGlvbnMgPSBhd2FpdCBvbnRvbG9naXplci5vbnRvbG9naXplQXNzZXQobW9ja0ZpbGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb25zKS50b0hhdmVMZW5ndGgoMCk7IC8vIEFsbCBhcmUgbWV0YSBwcm9wZXJ0aWVzXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBmcm9udG1hdHRlcicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG1vY2tBcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgICAgICAgICBmcm9udG1hdHRlcjogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9ucyA9IGF3YWl0IG9udG9sb2dpemVyLm9udG9sb2dpemVBc3NldChtb2NrRmlsZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgZGVzY3JpYmUoJ1JlbGF0aW9uQXNzZXRIZWxwZXInLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgcmVsYXRpb24gd2l0aCBhbGwgZmllbGRzJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpb24gPSBSZWxhdGlvbkFzc2V0SGVscGVyLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgc3ViamVjdDogJ3Rhc2stMScsXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlOiAnZW1zX19UYXNrX3Byb2plY3QnLFxuICAgICAgICAgICAgICAgIG9iamVjdDogJ3Byb2plY3QtMScsXG4gICAgICAgICAgICAgICAgY29uZmlkZW5jZTogMC45LFxuICAgICAgICAgICAgICAgIHByb3ZlbmFuY2U6ICd0ZXN0J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbi51aWQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb24udHlwZSkudG9CZSgnYWRhcHRlcl9fUmVsYXRpb24nKTtcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbi5zdWJqZWN0KS50b0JlKCd0YXNrLTEnKTtcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbi5wcmVkaWNhdGUpLnRvQmUoJ2Vtc19fVGFza19wcm9qZWN0Jyk7XG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb24ub2JqZWN0KS50b0JlKCdwcm9qZWN0LTEnKTtcbiAgICAgICAgICAgIGV4cGVjdChyZWxhdGlvbi5jb25maWRlbmNlKS50b0JlKDAuOSk7XG4gICAgICAgICAgICBleHBlY3QocmVsYXRpb24ucHJvdmVuYW5jZSkudG9CZSgndGVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHJlbGF0aW9uLmlzRGVmaW5lZEJ5KS50b0JlKCdlbXMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGJpZGlyZWN0aW9uYWwgcmVsYXRpb25zJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW2ZvcndhcmQsIGludmVyc2VdID0gUmVsYXRpb25Bc3NldEhlbHBlci5jcmVhdGVCaWRpcmVjdGlvbmFsKHtcbiAgICAgICAgICAgICAgICBzdWJqZWN0OiAndGFzay0xJyxcbiAgICAgICAgICAgICAgICBwcmVkaWNhdGU6ICdlbXNfX1Rhc2tfcHJvamVjdCcsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiAncHJvamVjdC0xJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIGZvcndhcmQgcmVsYXRpb25cbiAgICAgICAgICAgIGV4cGVjdChmb3J3YXJkLnN1YmplY3QpLnRvQmUoJ3Rhc2stMScpO1xuICAgICAgICAgICAgZXhwZWN0KGZvcndhcmQub2JqZWN0KS50b0JlKCdwcm9qZWN0LTEnKTtcbiAgICAgICAgICAgIGV4cGVjdChmb3J3YXJkLnByZWRpY2F0ZSkudG9CZSgnZW1zX19UYXNrX3Byb2plY3QnKTtcbiAgICAgICAgICAgIGV4cGVjdChmb3J3YXJkLmludmVyc2VPZikudG9CZShpbnZlcnNlLnVpZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENoZWNrIGludmVyc2UgcmVsYXRpb25cbiAgICAgICAgICAgIGV4cGVjdChpbnZlcnNlLnN1YmplY3QpLnRvQmUoJ3Byb2plY3QtMScpO1xuICAgICAgICAgICAgZXhwZWN0KGludmVyc2Uub2JqZWN0KS50b0JlKCd0YXNrLTEnKTtcbiAgICAgICAgICAgIGV4cGVjdChpbnZlcnNlLnByZWRpY2F0ZSkudG9CZSgnZW1zX19Qcm9qZWN0X2hhc1Rhc2tzJyk7XG4gICAgICAgICAgICBleHBlY3QoaW52ZXJzZS5pbnZlcnNlT2YpLnRvQmUoZm9yd2FyZC51aWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBnZXQgY29ycmVjdCBpbnZlcnNlIHByZWRpY2F0ZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoUmVsYXRpb25Bc3NldEhlbHBlci5nZXRJbnZlcnNlUHJlZGljYXRlKCdlbXNfX1Rhc2tfcHJvamVjdCcpKVxuICAgICAgICAgICAgICAgIC50b0JlKCdlbXNfX1Byb2plY3RfaGFzVGFza3MnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KFJlbGF0aW9uQXNzZXRIZWxwZXIuZ2V0SW52ZXJzZVByZWRpY2F0ZSgnZW1zX19wYXJ0T2YnKSlcbiAgICAgICAgICAgICAgICAudG9CZSgnZW1zX19oYXNQYXJ0Jyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdChSZWxhdGlvbkFzc2V0SGVscGVyLmdldEludmVyc2VQcmVkaWNhdGUoJ2V4b19fc3ViQ2xhc3NPZicpKVxuICAgICAgICAgICAgICAgIC50b0JlKCdleG9fX3N1cGVyQ2xhc3NPZicpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUZXN0IHVua25vd24gcHJlZGljYXRlXG4gICAgICAgICAgICBleHBlY3QoUmVsYXRpb25Bc3NldEhlbHBlci5nZXRJbnZlcnNlUHJlZGljYXRlKCdjdXN0b21fX3Vua25vd25Qcm9wJykpXG4gICAgICAgICAgICAgICAgLnRvQmUoJ2N1c3RvbV9faW52ZXJzZU9mX3Vua25vd25Qcm9wJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGVzdCgnc2hvdWxkIGV4dHJhY3Qgb250b2xvZ3kgZnJvbSBwcmVkaWNhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoUmVsYXRpb25Bc3NldEhlbHBlci5leHRyYWN0T250b2xvZ3koJ2Vtc19fVGFza19wcm9qZWN0JykpLnRvQmUoJ2VtcycpO1xuICAgICAgICAgICAgZXhwZWN0KFJlbGF0aW9uQXNzZXRIZWxwZXIuZXh0cmFjdE9udG9sb2d5KCdleG9fX0Fzc2V0X3JlbGF0ZXMnKSkudG9CZSgnZXhvJyk7XG4gICAgICAgICAgICBleHBlY3QoUmVsYXRpb25Bc3NldEhlbHBlci5leHRyYWN0T250b2xvZ3koJ3JkZjp0eXBlJykpLnRvQmUoJ3JkZicpO1xuICAgICAgICAgICAgZXhwZWN0KFJlbGF0aW9uQXNzZXRIZWxwZXIuZXh0cmFjdE9udG9sb2d5KCd1bmtub3duUHJvcCcpKS50b0JlKCdleG8nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICB0ZXN0KCdzaG91bGQgY29udmVydCB0byBmcm9udG1hdHRlcicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHJlbGF0aW9uOiBSZWxhdGlvbkFzc2V0ID0ge1xuICAgICAgICAgICAgICAgIHVpZDogJ3JlbC0xMjMnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdhZGFwdGVyX19SZWxhdGlvbicsXG4gICAgICAgICAgICAgICAgc3ViamVjdDogJ3Rhc2stMScsXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlOiAnZW1zX19UYXNrX3Byb2plY3QnLFxuICAgICAgICAgICAgICAgIG9iamVjdDogJ3Byb2plY3QtMScsXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgnMjAyNS0wMS0wMVQxMDowMDowMFonKSxcbiAgICAgICAgICAgICAgICBpc0RlZmluZWRCeTogJ2VtcycsXG4gICAgICAgICAgICAgICAgY29uZmlkZW5jZTogMC45NSxcbiAgICAgICAgICAgICAgICBwcm92ZW5hbmNlOiAnbWFudWFsJyxcbiAgICAgICAgICAgICAgICBpbnZlcnNlT2Y6ICdyZWwtNDU2J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXIgPSBSZWxhdGlvbkFzc2V0SGVscGVyLnRvRnJvbnRtYXR0ZXIocmVsYXRpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QoZnJvbnRtYXR0ZXJbJ2V4b19fSW5zdGFuY2VfY2xhc3MnXSkudG9CZSgnW1thZGFwdGVyX19SZWxhdGlvbl1dJyk7XG4gICAgICAgICAgICBleHBlY3QoZnJvbnRtYXR0ZXJbJ2V4b19fQXNzZXRfdWlkJ10pLnRvQmUoJ3JlbC0xMjMnKTtcbiAgICAgICAgICAgIGV4cGVjdChmcm9udG1hdHRlclsnYWRhcHRlcl9fUmVsYXRpb25fc3ViamVjdCddKS50b0JlKCdbW3Rhc2stMV1dJyk7XG4gICAgICAgICAgICBleHBlY3QoZnJvbnRtYXR0ZXJbJ2FkYXB0ZXJfX1JlbGF0aW9uX3ByZWRpY2F0ZSddKS50b0JlKCdlbXNfX1Rhc2tfcHJvamVjdCcpO1xuICAgICAgICAgICAgZXhwZWN0KGZyb250bWF0dGVyWydhZGFwdGVyX19SZWxhdGlvbl9vYmplY3QnXSkudG9CZSgnW1twcm9qZWN0LTFdXScpO1xuICAgICAgICAgICAgZXhwZWN0KGZyb250bWF0dGVyWydhZGFwdGVyX19SZWxhdGlvbl9jb25maWRlbmNlJ10pLnRvQmUoMC45NSk7XG4gICAgICAgICAgICBleHBlY3QoZnJvbnRtYXR0ZXJbJ2FkYXB0ZXJfX1JlbGF0aW9uX2ludmVyc2VPZiddKS50b0JlKCdyZWwtNDU2Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGVzdCgnc2hvdWxkIGdlbmVyYXRlIHZhbGlkIGZpbGVuYW1lJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpb246IFJlbGF0aW9uQXNzZXQgPSB7XG4gICAgICAgICAgICAgICAgdWlkOiAncmVsLTEyMycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2FkYXB0ZXJfX1JlbGF0aW9uJyxcbiAgICAgICAgICAgICAgICBzdWJqZWN0OiAnVmVyeSBMb25nIFRhc2sgTmFtZSBUaGF0IFNob3VsZCBCZSBUcnVuY2F0ZWQnLFxuICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogJ2Vtc19fVGFza19wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBvYmplY3Q6ICdQcm9qZWN0IFdpdGggU3BlY2lhbCFAIyQlXiYqKCkgQ2hhcmFjdGVycycsXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgnMjAyNS0wMS0wMVQxMDowMDowMFonKSxcbiAgICAgICAgICAgICAgICBpc0RlZmluZWRCeTogJ2VtcydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZpbGVuYW1lID0gUmVsYXRpb25Bc3NldEhlbHBlci5nZW5lcmF0ZUZpbGVuYW1lKHJlbGF0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KGZpbGVuYW1lKS50b0NvbnRhaW4oJ1JlbGF0aW9uXycpO1xuICAgICAgICAgICAgZXhwZWN0KGZpbGVuYW1lKS50b0NvbnRhaW4oJ2Vtc19fVGFza19wcm9qZWN0Jyk7XG4gICAgICAgICAgICBleHBlY3QoZmlsZW5hbWUpLnRvQ29udGFpbignLm1kJyk7XG4gICAgICAgICAgICBleHBlY3QoZmlsZW5hbWUubGVuZ3RoKS50b0JlTGVzc1RoYW4oMjU1KTsgLy8gTWF4IGZpbGVuYW1lIGxlbmd0aFxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBkZXNjcmliZSgnVmF1bHQgTWlncmF0aW9uJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgbWlncmF0ZSBlbnRpcmUgdmF1bHQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBtb2NrRmlsZXMgPSBbXG4gICAgICAgICAgICAgICAgeyBwYXRoOiAnZmlsZTEubWQnLCBiYXNlbmFtZTogJ2ZpbGUxJyB9IGFzIFRGaWxlLFxuICAgICAgICAgICAgICAgIHsgcGF0aDogJ2ZpbGUyLm1kJywgYmFzZW5hbWU6ICdmaWxlMicgfSBhcyBURmlsZSxcbiAgICAgICAgICAgICAgICB7IHBhdGg6ICc5OSBSZWxhdGlvbnMvZXhpc3RpbmcubWQnLCBiYXNlbmFtZTogJ2V4aXN0aW5nJyB9IGFzIFRGaWxlIC8vIFNob3VsZCBza2lwXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBtb2NrQXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMubW9ja1JldHVyblZhbHVlKG1vY2tGaWxlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE1vY2sgZmlsZTEgd2l0aCByZWxhdGlvbnNcbiAgICAgICAgICAgIG1vY2tBcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUubW9ja0ltcGxlbWVudGF0aW9uKChmaWxlOiBURmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChmaWxlLmJhc2VuYW1lID09PSAnZmlsZTEnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9udG1hdHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdleG9fX0Fzc2V0X3JlbGF0ZXMnOiAnW1tmaWxlMl1dJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyBmcm9udG1hdHRlcjoge30gfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBNb2NrIGZpbGUgY29udGVudCBmb3IgY2xlYW5pbmdcbiAgICAgICAgICAgIG1vY2tBcHAudmF1bHQucmVhZC5tb2NrUmVzb2x2ZWRWYWx1ZShgLS0tXG5leG9fX0Fzc2V0X3JlbGF0ZXM6IFwiW1tmaWxlMl1dXCJcbnRpdGxlOiBcIkZpbGUgMVwiXG4tLS1cblxuIyBDb250ZW50YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHByb2dyZXNzQ2FsbGJhY2sgPSBqZXN0LmZuKCk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvbnRvbG9naXplci5taWdyYXRlVmF1bHQocHJvZ3Jlc3NDYWxsYmFjayk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQuYXNzZXRzUHJvY2Vzc2VkKS50b0JlKDMpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5yZWxhdGlvbnNDcmVhdGVkKS50b0JlKDEpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcnMpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgcHJvZ3Jlc3MgY2FsbGJhY2sgd2FzIGNhbGxlZFxuICAgICAgICAgICAgZXhwZWN0KHByb2dyZXNzQ2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDEsIDMpO1xuICAgICAgICAgICAgZXhwZWN0KHByb2dyZXNzQ2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKDIsIDMpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==