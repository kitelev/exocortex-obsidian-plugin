{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/aggregates/ClassView.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/aggregates/ClassView.ts"],"sourcesContent":["import { AggregateRoot } from \"../core/AggregateRoot\";\nimport { AssetId } from \"../value-objects/AssetId\";\nimport { ClassName } from \"../value-objects/ClassName\";\nimport { Result } from \"../core/Result\";\nimport { UIButton } from \"../entities/UIButton\";\n\n/**\n * Aggregate Root for Class View Configuration\n * This aggregate manages the relationship between classes and their UI buttons\n */\nexport interface ClassViewProps {\n  id: AssetId;\n  className: ClassName;\n  buttons: UIButton[];\n  layoutTemplate?: string;\n  displayOptions?: DisplayOptions;\n}\n\nexport interface DisplayOptions {\n  showProperties: boolean;\n  showRelations: boolean;\n  showBacklinks: boolean;\n  showButtons: boolean;\n  buttonPosition: \"top\" | \"bottom\" | \"floating\";\n}\n\nexport class ClassView extends AggregateRoot<ClassViewProps> {\n  private static readonly MAX_BUTTONS_PER_VIEW = 20;\n\n  private constructor(props: ClassViewProps) {\n    super(props);\n  }\n\n  /**\n   * Factory method with business rules validation\n   */\n  public static create(props: ClassViewProps): Result<ClassView> {\n    // Validate class name\n    if (!props.className) {\n      return Result.fail<ClassView>(\n        \"Class view must be associated with a class\",\n      );\n    }\n\n    // Validate button count\n    if (props.buttons.length > ClassView.MAX_BUTTONS_PER_VIEW) {\n      return Result.fail<ClassView>(\n        `Class view cannot have more than ${ClassView.MAX_BUTTONS_PER_VIEW} buttons`,\n      );\n    }\n\n    // Check for duplicate button orders\n    const orders = props.buttons.map((b) => b.order);\n    const uniqueOrders = new Set(orders);\n    if (uniqueOrders.size !== orders.length) {\n      return Result.fail<ClassView>(\n        \"Buttons cannot have duplicate order values\",\n      );\n    }\n\n    // Set default display options\n    const defaultDisplayOptions: DisplayOptions = {\n      showProperties: true,\n      showRelations: true,\n      showBacklinks: true,\n      showButtons: true,\n      buttonPosition: \"top\",\n    };\n\n    return Result.ok<ClassView>(\n      new ClassView({\n        ...props,\n        displayOptions: props.displayOptions || defaultDisplayOptions,\n      }),\n    );\n  }\n\n  // Getters\n  get id(): AssetId {\n    return this.props.id;\n  }\n\n  get className(): ClassName {\n    return this.props.className;\n  }\n\n  get buttons(): UIButton[] {\n    // Return sorted by order\n    return [...this.props.buttons].sort((a, b) => a.order - b.order);\n  }\n\n  get displayOptions(): DisplayOptions {\n    return (\n      this.props.displayOptions || {\n        showProperties: true,\n        showRelations: true,\n        showBacklinks: true,\n        showButtons: true,\n        buttonPosition: \"top\",\n      }\n    );\n  }\n\n  /**\n   * Add a button to the view\n   */\n  public addButton(button: UIButton): Result<void> {\n    // Check max buttons limit\n    if (this.props.buttons.length >= ClassView.MAX_BUTTONS_PER_VIEW) {\n      return Result.fail<void>(\n        `Cannot add more buttons. Maximum of ${ClassView.MAX_BUTTONS_PER_VIEW} reached`,\n      );\n    }\n\n    // Check for duplicate button\n    if (this.props.buttons.some((b) => b.id.equals(button.id))) {\n      return Result.fail<void>(\"Button already exists in this view\");\n    }\n\n    // Check for order conflict\n    if (this.props.buttons.some((b) => b.order === button.order)) {\n      return Result.fail<void>(\n        `Button with order ${button.order} already exists`,\n      );\n    }\n\n    this.props.buttons.push(button);\n\n    // Raise domain event\n    this.addDomainEvent({\n      aggregateId: this.id.toString(),\n      eventType: \"ButtonAddedToClassView\",\n      occurredOn: new Date(),\n      eventData: {\n        classViewId: this.id.toString(),\n        className: this.className.value,\n        buttonId: button.id.toString(),\n        buttonLabel: button.label,\n      },\n    });\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Remove a button from the view\n   */\n  public removeButton(buttonId: AssetId): Result<void> {\n    const buttonIndex = this.props.buttons.findIndex((b) =>\n      b.id.equals(buttonId),\n    );\n\n    if (buttonIndex === -1) {\n      return Result.fail<void>(\"Button not found in this view\");\n    }\n\n    const removedButton = this.props.buttons.splice(buttonIndex, 1)[0];\n\n    // Raise domain event\n    this.addDomainEvent({\n      aggregateId: this.id.toString(),\n      eventType: \"ButtonRemovedFromClassView\",\n      occurredOn: new Date(),\n      eventData: {\n        classViewId: this.id.toString(),\n        className: this.className.value,\n        buttonId: removedButton.id.toString(),\n      },\n    });\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Reorder buttons\n   */\n  public reorderButtons(buttonOrders: Map<string, number>): Result<void> {\n    // Validate all buttons are present\n    for (const button of this.props.buttons) {\n      if (!buttonOrders.has(button.id.toString())) {\n        return Result.fail<void>(\n          `Missing order for button ${button.id.toString()}`,\n        );\n      }\n    }\n\n    // Check for duplicate orders\n    const orders = Array.from(buttonOrders.values());\n    const uniqueOrders = new Set(orders);\n    if (uniqueOrders.size !== orders.length) {\n      return Result.fail<void>(\"Duplicate order values not allowed\");\n    }\n\n    // Apply new orders\n    for (const button of this.props.buttons) {\n      const newOrder = buttonOrders.get(button.id.toString());\n      if (newOrder !== undefined) {\n        // This would normally update the button's order\n        // but we need to maintain immutability\n        Object.defineProperty(button, \"order\", { value: newOrder });\n      }\n    }\n\n    // Raise domain event\n    this.addDomainEvent({\n      aggregateId: this.id.toString(),\n      eventType: \"ButtonsReordered\",\n      occurredOn: new Date(),\n      eventData: {\n        classViewId: this.id.toString(),\n        className: this.className.value,\n        newOrder: Array.from(buttonOrders.entries()),\n      },\n    });\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Update display options\n   */\n  public updateDisplayOptions(options: Partial<DisplayOptions>): Result<void> {\n    this.props.displayOptions = {\n      ...this.displayOptions,\n      ...options,\n    };\n\n    // Raise domain event\n    this.addDomainEvent({\n      aggregateId: this.id.toString(),\n      eventType: \"DisplayOptionsUpdated\",\n      occurredOn: new Date(),\n      eventData: {\n        classViewId: this.id.toString(),\n        className: this.className.value,\n        displayOptions: this.props.displayOptions,\n      },\n    });\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Get enabled buttons only\n   */\n  public getEnabledButtons(): UIButton[] {\n    return this.buttons.filter((b) => b.isEnabled);\n  }\n\n  /**\n   * Check if view has any executable buttons\n   */\n  public hasExecutableButtons(): boolean {\n    return (\n      this.getEnabledButtons().length > 0 && this.displayOptions.showButtons\n    );\n  }\n\n  /**\n   * Find button by ID\n   */\n  public findButton(buttonId: AssetId): UIButton | undefined {\n    return this.props.buttons.find((b) => b.id.equals(buttonId));\n  }\n}\n"],"version":3}