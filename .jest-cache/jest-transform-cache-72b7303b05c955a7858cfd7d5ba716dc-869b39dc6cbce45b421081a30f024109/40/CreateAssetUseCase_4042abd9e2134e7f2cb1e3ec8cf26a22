03a18f33dc3788d31f479f421d25ea47
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAssetUseCase = void 0;
const Asset_1 = require("../../domain/entities/Asset");
const AssetId_1 = require("../../domain/value-objects/AssetId");
const ClassName_1 = require("../../domain/value-objects/ClassName");
const Result_1 = require("../../domain/core/Result");
/**
 * Use case for creating a new asset
 * Orchestrates the asset creation process
 */
class CreateAssetUseCase {
    constructor(assetRepository, ontologyRepository, ontologyProvisioningService) {
        this.assetRepository = assetRepository;
        this.ontologyRepository = ontologyRepository;
        this.ontologyProvisioningService = ontologyProvisioningService;
    }
    async execute(request) {
        try {
            // Validate the request
            const validationResult = this.validateRequest(request);
            if (!validationResult.isSuccess) {
                return {
                    success: false,
                    assetId: "",
                    message: validationResult.getError(),
                    error: validationResult.getError(),
                };
            }
            // Ensure ontology exists (auto-provision if needed)
            const ontologyResult = await this.ontologyProvisioningService.ensureOntologyExists(request.ontologyPrefix);
            if (!ontologyResult.isSuccess) {
                return {
                    success: false,
                    assetId: "",
                    message: `Failed to provision ontology: ${ontologyResult.getError()}`,
                    error: ontologyResult.getError(),
                };
            }
            const ontologyPrefix = ontologyResult.getValue();
            // Create class name
            const classNameResult = ClassName_1.ClassName.create(request.className);
            if (!classNameResult.isSuccess) {
                return {
                    success: false,
                    assetId: "",
                    message: `Invalid class name: ${classNameResult.getError()}`,
                    error: classNameResult.getError(),
                };
            }
            const className = classNameResult.getValue();
            // Create the asset
            const assetResult = Asset_1.Asset.create({
                id: AssetId_1.AssetId.generate(),
                label: request.title,
                className: className,
                ontology: ontologyPrefix,
                properties: request.properties || {},
            });
            if (!assetResult.isSuccess) {
                return {
                    success: false,
                    assetId: "",
                    message: `Asset creation failed: ${assetResult.getError()}`,
                    error: assetResult.getError(),
                };
            }
            const asset = assetResult.getValue();
            // Save the asset
            await this.assetRepository.save(asset);
            return {
                success: true,
                assetId: asset.getId().toString(),
                message: `Created asset: ${asset.getTitle()}`,
            };
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            return {
                success: false,
                assetId: "",
                message: `Unexpected error: ${errorMessage}`,
                error: errorMessage,
            };
        }
    }
    validateRequest(request) {
        if (!request.title || request.title.trim().length === 0) {
            return Result_1.Result.fail("Asset title is required");
        }
        if (request.title.length > 200) {
            return Result_1.Result.fail("Asset title cannot exceed 200 characters");
        }
        if (!request.className) {
            return Result_1.Result.fail("Asset class is required");
        }
        if (!request.ontologyPrefix) {
            return Result_1.Result.fail("Ontology prefix is required");
        }
        if (request.ontologyPrefix.trim().length === 0) {
            return Result_1.Result.fail("Ontology prefix cannot be empty");
        }
        return Result_1.Result.ok();
    }
}
exports.CreateAssetUseCase = CreateAssetUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,