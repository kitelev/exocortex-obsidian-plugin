{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/VisualQueryNode.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/VisualQueryNode.ts"],"sourcesContent":["export enum NodeType {\n  ENTITY = \"entity\",\n  VARIABLE = \"variable\",\n  LITERAL = \"literal\",\n  FILTER = \"filter\",\n}\n\nexport interface NodePosition {\n  x: number;\n  y: number;\n}\n\nexport interface NodeDimensions {\n  width: number;\n  height: number;\n}\n\nexport class VisualQueryNode {\n  private readonly id: string;\n  private readonly type: NodeType;\n  private label: string;\n  private variableName?: string;\n  private uri?: string;\n  private position: NodePosition;\n  private dimensions: NodeDimensions;\n  private selected: boolean = false;\n  private valid: boolean = true;\n  private errors: string[] = [];\n\n  constructor(params: {\n    id: string;\n    type: NodeType;\n    label: string;\n    position: NodePosition;\n    variableName?: string;\n    uri?: string;\n    dimensions?: NodeDimensions;\n  }) {\n    this.id = params.id;\n    this.type = params.type;\n    this.label = params.label;\n    this.position = params.position;\n    this.variableName = params.variableName;\n    this.uri = params.uri;\n    this.dimensions = params.dimensions || { width: 150, height: 60 };\n    Object.freeze(this.id);\n    Object.freeze(this.type);\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getType(): NodeType {\n    return this.type;\n  }\n\n  getLabel(): string {\n    return this.label;\n  }\n\n  setLabel(label: string): void {\n    this.label = label;\n  }\n\n  getVariableName(): string | undefined {\n    return this.variableName;\n  }\n\n  setVariableName(name: string): void {\n    this.variableName = name;\n  }\n\n  getUri(): string | undefined {\n    return this.uri;\n  }\n\n  setUri(uri: string): void {\n    this.uri = uri;\n  }\n\n  getPosition(): NodePosition {\n    return { ...this.position };\n  }\n\n  setPosition(position: NodePosition): void {\n    this.position = { ...position };\n  }\n\n  getDimensions(): NodeDimensions {\n    return { ...this.dimensions };\n  }\n\n  setDimensions(dimensions: NodeDimensions): void {\n    this.dimensions = { ...dimensions };\n  }\n\n  isSelected(): boolean {\n    return this.selected;\n  }\n\n  setSelected(selected: boolean): void {\n    this.selected = selected;\n  }\n\n  isValid(): boolean {\n    return this.valid;\n  }\n\n  setValid(valid: boolean, errors?: string[]): void {\n    this.valid = valid;\n    this.errors = errors || [];\n  }\n\n  getErrors(): string[] {\n    return [...this.errors];\n  }\n\n  containsPoint(x: number, y: number): boolean {\n    return (\n      x >= this.position.x &&\n      x <= this.position.x + this.dimensions.width &&\n      y >= this.position.y &&\n      y <= this.position.y + this.dimensions.height\n    );\n  }\n\n  getConnectionPoints(): {\n    top: NodePosition;\n    right: NodePosition;\n    bottom: NodePosition;\n    left: NodePosition;\n  } {\n    return {\n      top: {\n        x: this.position.x + this.dimensions.width / 2,\n        y: this.position.y,\n      },\n      right: {\n        x: this.position.x + this.dimensions.width,\n        y: this.position.y + this.dimensions.height / 2,\n      },\n      bottom: {\n        x: this.position.x + this.dimensions.width / 2,\n        y: this.position.y + this.dimensions.height,\n      },\n      left: {\n        x: this.position.x,\n        y: this.position.y + this.dimensions.height / 2,\n      },\n    };\n  }\n\n  toSPARQLElement(): string {\n    switch (this.type) {\n      case NodeType.ENTITY:\n        if (this.uri) {\n          return `<${this.uri}>`;\n        } else if (this.variableName) {\n          return `?${this.variableName}`;\n        } else {\n          return `?${this.label.toLowerCase().replace(/\\s+/g, \"_\")}`;\n        }\n      case NodeType.VARIABLE:\n        return `?${this.variableName || this.label.toLowerCase().replace(/\\s+/g, \"_\")}`;\n      case NodeType.LITERAL:\n        return `\"${this.label}\"`;\n      case NodeType.FILTER:\n        return this.label;\n      default:\n        return \"?unknown\";\n    }\n  }\n\n  clone(): VisualQueryNode {\n    return new VisualQueryNode({\n      id: `${this.id}_clone_${Date.now()}`,\n      type: this.type,\n      label: this.label,\n      position: { ...this.position },\n      variableName: this.variableName,\n      uri: this.uri,\n      dimensions: { ...this.dimensions },\n    });\n  }\n\n  static createEntity(\n    label: string,\n    uri?: string,\n    position?: NodePosition,\n  ): VisualQueryNode {\n    return new VisualQueryNode({\n      id: `entity_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: NodeType.ENTITY,\n      label,\n      uri,\n      position: position || { x: 0, y: 0 },\n    });\n  }\n\n  static createVariable(\n    name: string,\n    position?: NodePosition,\n  ): VisualQueryNode {\n    return new VisualQueryNode({\n      id: `var_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: NodeType.VARIABLE,\n      label: name,\n      variableName: name,\n      position: position || { x: 0, y: 0 },\n    });\n  }\n\n  static createLiteral(\n    value: string,\n    position?: NodePosition,\n  ): VisualQueryNode {\n    return new VisualQueryNode({\n      id: `literal_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: NodeType.LITERAL,\n      label: value,\n      position: position || { x: 0, y: 0 },\n    });\n  }\n\n  static createFilter(\n    expression: string,\n    position?: NodePosition,\n  ): VisualQueryNode {\n    return new VisualQueryNode({\n      id: `filter_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: NodeType.FILTER,\n      label: expression,\n      position: position || { x: 0, y: 0 },\n      dimensions: { width: 200, height: 80 },\n    });\n  }\n}\n"],"version":3}