{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/UIButton.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/UIButton.ts"],"sourcesContent":["import { Entity } from \"../core/Entity\";\nimport { AssetId } from \"../value-objects/AssetId\";\nimport { Result } from \"../core/Result\";\n\n/**\n * Domain Entity representing a UI Button\n * Following DDD principles - this is a domain entity with business logic\n */\nexport interface UIButtonProps {\n  id: AssetId;\n  label: string;\n  commandId: AssetId;\n  order?: number;\n  isEnabled?: boolean;\n  tooltip?: string;\n}\n\nexport class UIButton extends Entity<UIButtonProps> {\n  private constructor(props: UIButtonProps) {\n    super(props, props.id.toString());\n  }\n\n  protected generateId(): string {\n    return this.props.id.toString();\n  }\n\n  protected validate(): void {\n    if (!this.props.id) {\n      throw new Error(\"UIButton must have a valid ID\");\n    }\n\n    if (!this.props.label || this.props.label.trim().length === 0) {\n      throw new Error(\"UIButton must have a non-empty label\");\n    }\n\n    if (!this.props.commandId) {\n      throw new Error(\"UIButton must have a valid command ID\");\n    }\n  }\n\n  /**\n   * Factory method following DDD pattern\n   */\n  public static create(props: UIButtonProps): Result<UIButton> {\n    // Business rules validation\n    if (!props.label || props.label.trim().length === 0) {\n      return Result.fail<UIButton>(\"Button label cannot be empty\");\n    }\n\n    if (props.label.length > 100) {\n      return Result.fail<UIButton>(\"Button label cannot exceed 100 characters\");\n    }\n\n    if (!props.commandId) {\n      return Result.fail<UIButton>(\"Button must have an associated command\");\n    }\n\n    return Result.ok<UIButton>(\n      new UIButton({\n        ...props,\n        isEnabled: props.isEnabled ?? true,\n        order: props.order ?? 0,\n      }),\n    );\n  }\n\n  // Getters following encapsulation principle\n  get id(): AssetId {\n    return this.props.id;\n  }\n\n  get label(): string {\n    return this.props.label;\n  }\n\n  get commandId(): AssetId {\n    return this.props.commandId;\n  }\n\n  get order(): number {\n    return this.props.order ?? 0;\n  }\n\n  get isEnabled(): boolean {\n    return this.props.isEnabled ?? true;\n  }\n\n  get tooltip(): string | undefined {\n    return this.props.tooltip;\n  }\n\n  /**\n   * Business logic - button can be clicked only if enabled\n   */\n  public canExecute(): boolean {\n    return this.isEnabled;\n  }\n\n  /**\n   * Domain event when button is clicked\n   */\n  public click(): Result<void> {\n    if (!this.canExecute()) {\n      return Result.fail<void>(\"Button is disabled and cannot be clicked\");\n    }\n\n    // Domain event would be raised here\n    this.addDomainEvent({\n      aggregateId: this.id.toString(),\n      eventType: \"ButtonClicked\",\n      occurredOn: new Date(),\n      eventData: {\n        buttonId: this.id.toString(),\n        commandId: this.commandId.toString(),\n        label: this.label,\n      },\n    });\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Business logic to update button state\n   */\n  public enable(): void {\n    this.props.isEnabled = true;\n  }\n\n  public disable(): void {\n    this.props.isEnabled = false;\n  }\n\n  public updateLabel(newLabel: string): Result<void> {\n    if (!newLabel || newLabel.trim().length === 0) {\n      return Result.fail<void>(\"Button label cannot be empty\");\n    }\n\n    if (newLabel.length > 100) {\n      return Result.fail<void>(\"Button label cannot exceed 100 characters\");\n    }\n\n    this.props.label = newLabel;\n    return Result.ok<void>();\n  }\n}\n"],"version":3}