2a9892c1e4e708f0024ffbd120d4aeab
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianAssetRepository = void 0;
const obsidian_1 = require("obsidian");
const Asset_1 = require("../../domain/entities/Asset");
const AbstractFileRepository_1 = require("../../shared/AbstractFileRepository");
/**
 * Obsidian implementation of IAssetRepository
 * Handles asset persistence using Obsidian vault
 */
class ObsidianAssetRepository extends AbstractFileRepository_1.AbstractFileRepository {
    constructor(app) {
        super(app);
    }
    async findById(id) {
        const files = this.app.vault.getMarkdownFiles();
        for (const file of files) {
            const cache = this.app.metadataCache.getFileCache(file);
            if (cache?.frontmatter?.["exo__Asset_uid"] === id.toString()) {
                const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                // Only return valid assets - invalid ones are silently ignored
                if (asset) {
                    return asset;
                }
            }
        }
        return null;
    }
    async findByClass(className) {
        const files = this.app.vault.getMarkdownFiles();
        const assets = [];
        for (const file of files) {
            const cache = this.app.metadataCache.getFileCache(file);
            if (cache?.frontmatter) {
                const classes = cache.frontmatter["exo__Instance_class"];
                const classArray = Array.isArray(classes) ? classes : [classes];
                if (classArray.some((c) => c === className.toWikiLink() || c === className.toString())) {
                    const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                    // Only include valid assets - invalid ones are silently ignored
                    if (asset) {
                        assets.push(asset);
                    }
                }
            }
        }
        return assets;
    }
    async findByOntology(prefix) {
        const files = this.app.vault.getMarkdownFiles();
        const assets = [];
        for (const file of files) {
            const cache = this.app.metadataCache.getFileCache(file);
            if (cache?.frontmatter) {
                const ontology = cache.frontmatter["exo__Asset_isDefinedBy"];
                const ontologyValue = ontology?.replace(/\[\[!?|\]\]/g, "");
                if (ontologyValue === prefix.toString()) {
                    const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                    // Only include valid assets - invalid ones are silently ignored
                    if (asset) {
                        assets.push(asset);
                    }
                }
            }
        }
        return assets;
    }
    async save(asset) {
        await this.saveEntityWithFrontmatter(asset, (a) => a.getTitle(), (a) => a.toFrontmatter(), (a) => this.findExistingAssetFile(a), "Asset");
    }
    findExistingAssetFile(asset) {
        const frontmatter = asset.toFrontmatter();
        const storedPath = asset.props?.filePath;
        const assetId = frontmatter["exo__Asset_uid"];
        const filename = asset.getTitle();
        return this.findFileWithFallback({
            uid: assetId,
            storedPath,
            filename,
        });
    }
    async delete(id) {
        const asset = await this.findById(id);
        if (asset) {
            await this.deleteFileByEntity(asset, (a) => a.getTitle(), "Asset");
        }
    }
    async exists(id) {
        try {
            const found = await this.findById(id);
            return found !== null;
        }
        catch (error) {
            console.error("Error checking asset existence:", error);
            return false;
        }
    }
    async findAll() {
        const files = this.app.vault.getMarkdownFiles();
        const assets = [];
        for (const file of files) {
            const cache = this.app.metadataCache.getFileCache(file);
            if (cache?.frontmatter?.["exo__Asset_uid"]) {
                const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                // Only include valid assets - invalid ones are silently ignored
                if (asset) {
                    assets.push(asset);
                }
            }
        }
        return assets;
    }
    async findByFilename(filename) {
        // Handle different filename formats
        let searchPath = filename;
        // Add .md extension if not present
        if (!searchPath.endsWith(".md")) {
            searchPath = `${searchPath}.md`;
        }
        // Try to find by path first
        let file = this.app.vault.getAbstractFileByPath(searchPath);
        // If not found, search all files by basename
        if (!file) {
            const files = this.app.vault.getMarkdownFiles();
            file =
                files.find((f) => f.path === searchPath || f.name === searchPath) ||
                    null;
        }
        if (file instanceof obsidian_1.TFile) {
            const cache = this.app.metadataCache.getFileCache(file);
            if (cache?.frontmatter) {
                const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                // Only return valid assets - invalid ones are silently ignored
                if (asset) {
                    // Store the file path for later use in save
                    asset.props.filePath = file.path;
                    return asset;
                }
            }
        }
        return null;
    }
    /**
     * Update only the frontmatter of a file by path
     */
    async updateFrontmatterByPath(filePath, updates) {
        await super.updateFrontmatterByPath(filePath, updates);
    }
}
exports.ObsidianAssetRepository = ObsidianAssetRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,