894245b5f0b36b0e333d2eb47e2c9ad6
"use strict";

/* istanbul ignore next */
function cov_1mdgv6ou0i() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFFileManager.ts";
  var hash = "c8f819e098ad8b79e10ab9b764e910186808afdd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFFileManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 23
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 33,
          column: 13
        }
      },
      "8": {
        start: {
          line: 14,
          column: 29
        },
        end: {
          line: 14,
          column: 75
        }
      },
      "9": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 24,
          column: 17
        }
      },
      "10": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 16,
          column: 63
        }
      },
      "11": {
        start: {
          line: 19,
          column: 39
        },
        end: {
          line: 19,
          column: 87
        }
      },
      "12": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 22,
          column: 21
        }
      },
      "13": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 21,
          column: 70
        }
      },
      "14": {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 67
        }
      },
      "15": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 29,
          column: 19
        }
      },
      "16": {
        start: {
          line: 32,
          column: 16
        },
        end: {
          line: 32,
          column: 85
        }
      },
      "17": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 49,
          column: 11
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "19": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "20": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 42,
          column: 17
        }
      },
      "21": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 79
        }
      },
      "22": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "23": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "24": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 85
        }
      },
      "25": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 64,
          column: 11
        }
      },
      "26": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 63,
          column: 13
        }
      },
      "27": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 75
        }
      },
      "28": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 57,
          column: 17
        }
      },
      "29": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 79
        }
      },
      "30": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 50
        }
      },
      "31": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 59,
          column: 44
        }
      },
      "32": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 62,
          column: 87
        }
      },
      "33": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 72
        }
      },
      "34": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 55
        }
      },
      "35": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "36": {
        start: {
          line: 70,
          column: 35
        },
        end: {
          line: 70,
          column: 68
        }
      },
      "37": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 52
        }
      },
      "38": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 50
        }
      },
      "39": {
        start: {
          line: 76,
          column: 27
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "40": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "41": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 112
        }
      },
      "42": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "43": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 60
        }
      },
      "44": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 114,
          column: 11
        }
      },
      "45": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "46": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 102,
          column: 55
        }
      },
      "47": {
        start: {
          line: 103,
          column: 38
        },
        end: {
          line: 103,
          column: 75
        }
      },
      "48": {
        start: {
          line: 104,
          column: 33
        },
        end: {
          line: 108,
          column: 18
        }
      },
      "49": {
        start: {
          line: 105,
          column: 38
        },
        end: {
          line: 105,
          column: 66
        }
      },
      "50": {
        start: {
          line: 106,
          column: 44
        },
        end: {
          line: 106,
          column: 83
        }
      },
      "51": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 80
        }
      },
      "52": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 52
        }
      },
      "53": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 90
        }
      },
      "54": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "56": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "57": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 66
        }
      },
      "58": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 44
        }
      },
      "59": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 89
        }
      },
      "60": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "61": {
        start: {
          line: 137,
          column: 0
        },
        end: {
          line: 137,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 21
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 35
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 12,
            column: 55
          },
          end: {
            line: 12,
            column: 56
          }
        },
        loc: {
          start: {
            line: 12,
            column: 68
          },
          end: {
            line: 34,
            column: 9
          }
        },
        line: 12
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 28
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 36
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 37,
            column: 55
          },
          end: {
            line: 37,
            column: 56
          }
        },
        loc: {
          start: {
            line: 37,
            column: 68
          },
          end: {
            line: 49,
            column: 9
          }
        },
        line: 37
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 51,
            column: 4
          },
          end: {
            line: 51,
            column: 5
          }
        },
        loc: {
          start: {
            line: 51,
            column: 30
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 51
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 52,
            column: 55
          },
          end: {
            line: 52,
            column: 56
          }
        },
        loc: {
          start: {
            line: 52,
            column: 68
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 52
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 39
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 66
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 75
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 40
          },
          end: {
            line: 98,
            column: 5
          }
        },
        line: 84
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        loc: {
          start: {
            line: 99,
            column: 25
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 99
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 56
          }
        },
        loc: {
          start: {
            line: 100,
            column: 68
          },
          end: {
            line: 114,
            column: 9
          }
        },
        line: 100
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 104,
            column: 46
          },
          end: {
            line: 104,
            column: 47
          }
        },
        loc: {
          start: {
            line: 104,
            column: 54
          },
          end: {
            line: 108,
            column: 17
          }
        },
        line: 104
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 5
          }
        },
        loc: {
          start: {
            line: 116,
            column: 35
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 116
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 55
          },
          end: {
            line: 117,
            column: 56
          }
        },
        loc: {
          start: {
            line: 117,
            column: 68
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 129,
            column: 5
          }
        },
        loc: {
          start: {
            line: 129,
            column: 22
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 129
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 24,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 24,
            column: 17
          }
        }, {
          start: {
            line: 18,
            column: 21
          },
          end: {
            line: 24,
            column: 17
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 22,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 22,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 34
          }
        }, {
          start: {
            line: 20,
            column: 38
          },
          end: {
            line: 20,
            column: 87
          }
        }],
        line: 20
      },
      "3": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 42,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 42,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "4": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "5": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "6": {
        loc: {
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 15
          },
          end: {
            line: 82,
            column: 33
          }
        }, {
          start: {
            line: 82,
            column: 37
          },
          end: {
            line: 82,
            column: 42
          }
        }],
        line: 82
      },
      "7": {
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 87
          },
          end: {
            line: 86,
            column: 93
          }
        }, {
          start: {
            line: 86,
            column: 96
          },
          end: {
            line: 86,
            column: 112
          }
        }],
        line: 86
      },
      "8": {
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 67
          }
        }, {
          start: {
            line: 86,
            column: 71
          },
          end: {
            line: 86,
            column: 84
          }
        }],
        line: 86
      },
      "9": {
        loc: {
          start: {
            line: 97,
            column: 15
          },
          end: {
            line: 97,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 97,
            column: 27
          },
          end: {
            line: 97,
            column: 47
          }
        }, {
          start: {
            line: 97,
            column: 50
          },
          end: {
            line: 97,
            column: 59
          }
        }],
        line: 97
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 51
          }
        }, {
          start: {
            line: 106,
            column: 55
          },
          end: {
            line: 106,
            column: 83
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 60
          }
        }, {
          start: {
            line: 107,
            column: 64
          },
          end: {
            line: 107,
            column: 79
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFFileManager.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFFileManager.ts"],
      sourcesContent: ["import { App, TFile, Notice } from 'obsidian';\nimport { Result } from '../../domain/core/Result';\nimport { RDFFormat } from './RDFSerializer';\n\nexport interface FileOperationResult {\n    filePath: string;\n    success: boolean;\n    message?: string;\n}\n\nexport class RDFFileManager {\n    constructor(private app: App) {}\n\n    async saveToVault(content: string, filePath: string): Promise<Result<FileOperationResult>> {\n        try {\n            const file = this.app.vault.getAbstractFileByPath(filePath);\n            \n            if (file instanceof TFile) {\n                await this.app.vault.modify(file, content);\n            } else {\n                const folderPath = filePath.substring(0, filePath.lastIndexOf('/'));\n                if (folderPath && !this.app.vault.getAbstractFileByPath(folderPath)) {\n                    await this.app.vault.createFolder(folderPath);\n                }\n                await this.app.vault.create(filePath, content);\n            }\n\n            return Result.ok({\n                filePath,\n                success: true,\n                message: `File saved successfully to ${filePath}`\n            });\n        } catch (error) {\n            return Result.fail(`Failed to save file: ${error.message}`);\n        }\n    }\n\n    async readFromVault(filePath: string): Promise<Result<string>> {\n        try {\n            const file = this.app.vault.getAbstractFileByPath(filePath);\n            \n            if (!(file instanceof TFile)) {\n                return Result.fail(`File not found: ${filePath}`);\n            }\n\n            const content = await this.app.vault.read(file);\n            return Result.ok(content);\n        } catch (error) {\n            return Result.fail(`Failed to read file: ${error.message}`);\n        }\n    }\n\n    async deleteFromVault(filePath: string): Promise<Result<void>> {\n        try {\n            const file = this.app.vault.getAbstractFileByPath(filePath);\n            \n            if (!(file instanceof TFile)) {\n                return Result.fail(`File not found: ${filePath}`);\n            }\n\n            await this.app.vault.delete(file);\n            return Result.ok();\n        } catch (error) {\n            return Result.fail(`Failed to delete file: ${error.message}`);\n        }\n    }\n\n    generateFileName(baseName: string | undefined, format: RDFFormat): string {\n        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n        const extension = this.getFileExtension(format);\n        \n        if (baseName) {\n            const nameWithoutExt = baseName.replace(/\\.[^/.]+$/, '');\n            return `${nameWithoutExt}.${extension}`;\n        }\n        \n        return `export_${timestamp}.${extension}`;\n    }\n\n    getFileExtension(format: RDFFormat): string {\n        const extensions: Record<RDFFormat, string> = {\n            'turtle': 'ttl',\n            'n-triples': 'nt',\n            'json-ld': 'jsonld',\n            'rdf-xml': 'rdf'\n        };\n        \n        return extensions[format] || 'rdf';\n    }\n\n    detectFormatFromExtension(filePath: string): RDFFormat | undefined {\n        const extension = filePath.split('.').pop()?.toLowerCase();\n        \n        const formatMap: Record<string, RDFFormat> = {\n            'ttl': 'turtle',\n            'turtle': 'turtle',\n            'nt': 'n-triples',\n            'ntriples': 'n-triples',\n            'jsonld': 'json-ld',\n            'json': 'json-ld',\n            'rdf': 'rdf-xml',\n            'xml': 'rdf-xml'\n        };\n        \n        return extension ? formatMap[extension] : undefined;\n    }\n\n    async listRDFFiles(folder?: string): Promise<Result<TFile[]>> {\n        try {\n            const files = this.app.vault.getFiles();\n            const rdfExtensions = ['ttl', 'nt', 'jsonld', 'rdf', 'xml'];\n            \n            const rdfFiles = files.filter(file => {\n                const extension = file.extension.toLowerCase();\n                const inCorrectFolder = !folder || file.path.startsWith(folder);\n                return rdfExtensions.includes(extension) && inCorrectFolder;\n            });\n\n            return Result.ok(rdfFiles);\n        } catch (error) {\n            return Result.fail(`Failed to list RDF files: ${error.message}`);\n        }\n    }\n\n    async ensureFolderExists(folderPath: string): Promise<Result<void>> {\n        try {\n            if (!this.app.vault.getAbstractFileByPath(folderPath)) {\n                await this.app.vault.createFolder(folderPath);\n            }\n            return Result.ok();\n        } catch (error) {\n            return Result.fail(`Failed to create folder: ${error.message}`);\n        }\n    }\n\n    getFileInfo(file: TFile): { size: number; modified: Date; created: Date } {\n        return {\n            size: file.stat.size,\n            modified: new Date(file.stat.mtime),\n            created: new Date(file.stat.ctime)\n        };\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c8f819e098ad8b79e10ab9b764e910186808afdd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mdgv6ou0i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mdgv6ou0i();
cov_1mdgv6ou0i().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mdgv6ou0i().s[1]++;
exports.RDFFileManager = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_1mdgv6ou0i().s[2]++, require("tslib"));
const obsidian_1 =
/* istanbul ignore next */
(cov_1mdgv6ou0i().s[3]++, require("obsidian"));
const Result_1 =
/* istanbul ignore next */
(cov_1mdgv6ou0i().s[4]++, require("../../domain/core/Result"));
class RDFFileManager {
  constructor(app) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[0]++;
    cov_1mdgv6ou0i().s[5]++;
    this.app = app;
  }
  saveToVault(content, filePath) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[1]++;
    cov_1mdgv6ou0i().s[6]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1mdgv6ou0i().f[2]++;
      cov_1mdgv6ou0i().s[7]++;
      try {
        const file =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[8]++, this.app.vault.getAbstractFileByPath(filePath));
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[9]++;
        if (file instanceof obsidian_1.TFile) {
          /* istanbul ignore next */
          cov_1mdgv6ou0i().b[0][0]++;
          cov_1mdgv6ou0i().s[10]++;
          yield this.app.vault.modify(file, content);
        } else {
          /* istanbul ignore next */
          cov_1mdgv6ou0i().b[0][1]++;
          const folderPath =
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().s[11]++, filePath.substring(0, filePath.lastIndexOf('/')));
          /* istanbul ignore next */
          cov_1mdgv6ou0i().s[12]++;
          if (
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().b[2][0]++, folderPath) &&
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().b[2][1]++, !this.app.vault.getAbstractFileByPath(folderPath))) {
            /* istanbul ignore next */
            cov_1mdgv6ou0i().b[1][0]++;
            cov_1mdgv6ou0i().s[13]++;
            yield this.app.vault.createFolder(folderPath);
          } else
          /* istanbul ignore next */
          {
            cov_1mdgv6ou0i().b[1][1]++;
          }
          cov_1mdgv6ou0i().s[14]++;
          yield this.app.vault.create(filePath, content);
        }
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[15]++;
        return Result_1.Result.ok({
          filePath,
          success: true,
          message: `File saved successfully to ${filePath}`
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[16]++;
        return Result_1.Result.fail(`Failed to save file: ${error.message}`);
      }
    });
  }
  readFromVault(filePath) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[3]++;
    cov_1mdgv6ou0i().s[17]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1mdgv6ou0i().f[4]++;
      cov_1mdgv6ou0i().s[18]++;
      try {
        const file =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[19]++, this.app.vault.getAbstractFileByPath(filePath));
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[20]++;
        if (!(file instanceof obsidian_1.TFile)) {
          /* istanbul ignore next */
          cov_1mdgv6ou0i().b[3][0]++;
          cov_1mdgv6ou0i().s[21]++;
          return Result_1.Result.fail(`File not found: ${filePath}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdgv6ou0i().b[3][1]++;
        }
        const content =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[22]++, yield this.app.vault.read(file));
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[23]++;
        return Result_1.Result.ok(content);
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[24]++;
        return Result_1.Result.fail(`Failed to read file: ${error.message}`);
      }
    });
  }
  deleteFromVault(filePath) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[5]++;
    cov_1mdgv6ou0i().s[25]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1mdgv6ou0i().f[6]++;
      cov_1mdgv6ou0i().s[26]++;
      try {
        const file =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[27]++, this.app.vault.getAbstractFileByPath(filePath));
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[28]++;
        if (!(file instanceof obsidian_1.TFile)) {
          /* istanbul ignore next */
          cov_1mdgv6ou0i().b[4][0]++;
          cov_1mdgv6ou0i().s[29]++;
          return Result_1.Result.fail(`File not found: ${filePath}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdgv6ou0i().b[4][1]++;
        }
        cov_1mdgv6ou0i().s[30]++;
        yield this.app.vault.delete(file);
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[31]++;
        return Result_1.Result.ok();
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[32]++;
        return Result_1.Result.fail(`Failed to delete file: ${error.message}`);
      }
    });
  }
  generateFileName(baseName, format) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[7]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().s[33]++, new Date().toISOString().replace(/[:.]/g, '-'));
    const extension =
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().s[34]++, this.getFileExtension(format));
    /* istanbul ignore next */
    cov_1mdgv6ou0i().s[35]++;
    if (baseName) {
      /* istanbul ignore next */
      cov_1mdgv6ou0i().b[5][0]++;
      const nameWithoutExt =
      /* istanbul ignore next */
      (cov_1mdgv6ou0i().s[36]++, baseName.replace(/\.[^/.]+$/, ''));
      /* istanbul ignore next */
      cov_1mdgv6ou0i().s[37]++;
      return `${nameWithoutExt}.${extension}`;
    } else
    /* istanbul ignore next */
    {
      cov_1mdgv6ou0i().b[5][1]++;
    }
    cov_1mdgv6ou0i().s[38]++;
    return `export_${timestamp}.${extension}`;
  }
  getFileExtension(format) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[8]++;
    const extensions =
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().s[39]++, {
      'turtle': 'ttl',
      'n-triples': 'nt',
      'json-ld': 'jsonld',
      'rdf-xml': 'rdf'
    });
    /* istanbul ignore next */
    cov_1mdgv6ou0i().s[40]++;
    return /* istanbul ignore next */(cov_1mdgv6ou0i().b[6][0]++, extensions[format]) ||
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[6][1]++, 'rdf');
  }
  detectFormatFromExtension(filePath) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[9]++;
    var _a;
    const extension =
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().s[41]++,
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[8][0]++, (_a = filePath.split('.').pop()) === null) ||
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[8][1]++, _a === void 0) ?
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[7][0]++, void 0) :
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[7][1]++, _a.toLowerCase()));
    const formatMap =
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().s[42]++, {
      'ttl': 'turtle',
      'turtle': 'turtle',
      'nt': 'n-triples',
      'ntriples': 'n-triples',
      'jsonld': 'json-ld',
      'json': 'json-ld',
      'rdf': 'rdf-xml',
      'xml': 'rdf-xml'
    });
    /* istanbul ignore next */
    cov_1mdgv6ou0i().s[43]++;
    return extension ?
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[9][0]++, formatMap[extension]) :
    /* istanbul ignore next */
    (cov_1mdgv6ou0i().b[9][1]++, undefined);
  }
  listRDFFiles(folder) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[10]++;
    cov_1mdgv6ou0i().s[44]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1mdgv6ou0i().f[11]++;
      cov_1mdgv6ou0i().s[45]++;
      try {
        const files =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[46]++, this.app.vault.getFiles());
        const rdfExtensions =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[47]++, ['ttl', 'nt', 'jsonld', 'rdf', 'xml']);
        const rdfFiles =
        /* istanbul ignore next */
        (cov_1mdgv6ou0i().s[48]++, files.filter(file => {
          /* istanbul ignore next */
          cov_1mdgv6ou0i().f[12]++;
          const extension =
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().s[49]++, file.extension.toLowerCase());
          const inCorrectFolder =
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().s[50]++,
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().b[10][0]++, !folder) ||
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().b[10][1]++, file.path.startsWith(folder)));
          /* istanbul ignore next */
          cov_1mdgv6ou0i().s[51]++;
          return /* istanbul ignore next */(cov_1mdgv6ou0i().b[11][0]++, rdfExtensions.includes(extension)) &&
          /* istanbul ignore next */
          (cov_1mdgv6ou0i().b[11][1]++, inCorrectFolder);
        }));
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[52]++;
        return Result_1.Result.ok(rdfFiles);
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[53]++;
        return Result_1.Result.fail(`Failed to list RDF files: ${error.message}`);
      }
    });
  }
  ensureFolderExists(folderPath) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[13]++;
    cov_1mdgv6ou0i().s[54]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1mdgv6ou0i().f[14]++;
      cov_1mdgv6ou0i().s[55]++;
      try {
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[56]++;
        if (!this.app.vault.getAbstractFileByPath(folderPath)) {
          /* istanbul ignore next */
          cov_1mdgv6ou0i().b[12][0]++;
          cov_1mdgv6ou0i().s[57]++;
          yield this.app.vault.createFolder(folderPath);
        } else
        /* istanbul ignore next */
        {
          cov_1mdgv6ou0i().b[12][1]++;
        }
        cov_1mdgv6ou0i().s[58]++;
        return Result_1.Result.ok();
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdgv6ou0i().s[59]++;
        return Result_1.Result.fail(`Failed to create folder: ${error.message}`);
      }
    });
  }
  getFileInfo(file) {
    /* istanbul ignore next */
    cov_1mdgv6ou0i().f[15]++;
    cov_1mdgv6ou0i().s[60]++;
    return {
      size: file.stat.size,
      modified: new Date(file.stat.mtime),
      created: new Date(file.stat.ctime)
    };
  }
}
/* istanbul ignore next */
cov_1mdgv6ou0i().s[61]++;
exports.RDFFileManager = RDFFileManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,