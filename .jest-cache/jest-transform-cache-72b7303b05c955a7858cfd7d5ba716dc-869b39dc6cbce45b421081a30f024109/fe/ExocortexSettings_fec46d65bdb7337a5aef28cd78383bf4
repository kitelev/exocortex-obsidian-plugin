a5058955dce55b030e245b9c235ca5f8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExocortexSettings = exports.DEFAULT_SETTINGS = void 0;
const Result_1 = require("../core/Result");
/**
 * Default settings for the Exocortex plugin
 */
exports.DEFAULT_SETTINGS = {
    // Folder Paths
    layoutsFolderPath: "layouts",
    templatesFolderPath: ".exocortex/templates",
    templateUsageDataPath: ".exocortex/template-usage.json",
    // Query Engine Settings
    preferredQueryEngine: "dataview",
    fallbackQueryEngine: "datacore",
    enableQueryEngineAutoDetect: true,
    // Cache Settings
    enableSPARQLCache: true,
    sparqlCacheMaxSize: 500,
    sparqlCacheTTLMinutes: 5,
    enableQueryCache: true,
    queryCacheTimeout: 30,
    queryCacheMaxSize: 100,
    // RDF Export Settings
    defaultRDFFormat: "turtle",
    includeInferredTriples: false,
    exportNamespaces: true,
    // Performance Settings
    maxGraphSize: 10000,
    batchProcessingSize: 50,
    enableLazyLoading: true,
    // Mobile/Platform Settings
    enableMobileOptimizations: true,
    mobileBatchSize: 10,
    enableTouchControls: true,
    // Debug Settings
    enableDebugMode: false,
    enableVerboseLogging: false,
    logSPARQLQueries: false,
    enablePerformanceMetrics: false,
};
/**
 * Exocortex Settings Entity
 * Manages plugin configuration with validation
 */
class ExocortexSettings {
    constructor(data = {}) {
        this.data = { ...exports.DEFAULT_SETTINGS, ...data };
    }
    /**
     * Create settings from partial data with validation
     */
    static create(data = {}) {
        try {
            const settings = new ExocortexSettings(data);
            const validation = settings.validate();
            if (validation.isFailure) {
                return Result_1.Result.fail(validation.getError());
            }
            return Result_1.Result.ok(settings);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to create settings: ${error.message}`);
        }
    }
    /**
     * Validate all settings
     */
    validate() {
        // Validate folder paths
        if (!this.data.layoutsFolderPath ||
            this.data.layoutsFolderPath.trim().length === 0) {
            return Result_1.Result.fail("Layouts folder path cannot be empty");
        }
        if (!this.data.templatesFolderPath ||
            this.data.templatesFolderPath.trim().length === 0) {
            return Result_1.Result.fail("Templates folder path cannot be empty");
        }
        // Validate cache settings
        if (this.data.sparqlCacheMaxSize < 1) {
            return Result_1.Result.fail("SPARQL cache max size must be at least 1");
        }
        if (this.data.sparqlCacheTTLMinutes < 1) {
            return Result_1.Result.fail("SPARQL cache TTL must be at least 1 minute");
        }
        if (this.data.queryCacheMaxSize < 1) {
            return Result_1.Result.fail("Query cache max size must be at least 1");
        }
        if (this.data.queryCacheTimeout < 1) {
            return Result_1.Result.fail("Query cache timeout must be at least 1 minute");
        }
        // Validate performance settings
        if (this.data.maxGraphSize < 100) {
            return Result_1.Result.fail("Max graph size must be at least 100");
        }
        if (this.data.batchProcessingSize < 1) {
            return Result_1.Result.fail("Batch processing size must be at least 1");
        }
        if (this.data.mobileBatchSize < 1) {
            return Result_1.Result.fail("Mobile batch size must be at least 1");
        }
        return Result_1.Result.ok();
    }
    /**
     * Get all settings data
     */
    getData() {
        return { ...this.data };
    }
    /**
     * Update settings with partial data
     */
    update(updates) {
        const newData = { ...this.data, ...updates };
        const tempSettings = new ExocortexSettings(newData);
        const validation = tempSettings.validate();
        if (validation.isFailure) {
            return Result_1.Result.fail(validation.getError());
        }
        this.data = newData;
        return Result_1.Result.ok();
    }
    /**
     * Get specific setting value with type safety
     */
    get(key) {
        return this.data[key];
    }
    /**
     * Set specific setting value with validation
     */
    set(key, value) {
        const updates = { [key]: value };
        return this.update(updates);
    }
    /**
     * Reset all settings to defaults
     */
    resetToDefaults() {
        this.data = { ...exports.DEFAULT_SETTINGS };
    }
    /**
     * Convert to JSON for persistence
     */
    toJSON() {
        return this.getData();
    }
    /**
     * Create from JSON data
     */
    static fromJSON(json) {
        try {
            const data = JSON.parse(json);
            return ExocortexSettings.create(data);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to parse settings JSON: ${error.message}`);
        }
    }
}
exports.ExocortexSettings = ExocortexSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,