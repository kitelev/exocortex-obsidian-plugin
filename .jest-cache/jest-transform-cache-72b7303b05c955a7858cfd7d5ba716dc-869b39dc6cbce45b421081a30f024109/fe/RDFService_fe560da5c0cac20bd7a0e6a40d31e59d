b302e63dfc3393fc4d67dbf040cc632a
"use strict";
/**
 * RDF Service - Coordinates RDF operations using specialized services
 * Follows Single Responsibility Principle by delegating to specific services
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDFService = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const Graph_1 = require("../../domain/semantic/core/Graph");
const Triple_1 = require("../../domain/semantic/core/Triple");
const Result_1 = require("../../domain/core/Result");
const RDFSerializer_1 = require("./RDFSerializer");
const RDFParser_1 = require("./RDFParser");
const NamespaceManager_1 = require("./NamespaceManager");
const RDFValidator_1 = require("./RDFValidator");
const RDFFileManager_1 = require("./RDFFileManager");
class RDFService {
    constructor(app, namespaceManager) {
        this.app = app;
        this.namespaceManager = namespaceManager || new NamespaceManager_1.NamespaceManager();
        this.serializer = new RDFSerializer_1.RDFSerializer(this.namespaceManager);
        this.parser = new RDFParser_1.RDFParser(this.namespaceManager);
        this.validator = new RDFValidator_1.RDFValidator();
        this.fileManager = new RDFFileManager_1.RDFFileManager(app);
    }
    /**
     * Export graph to RDF format
     */
    exportGraph(graph, options) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const validationResult = this.validator.validateExportOptions(options);
                if (validationResult.isFailure) {
                    return Result_1.Result.fail(validationResult.errorValue());
                }
                const serializationOptions = {
                    format: options.format,
                    includeComments: (_a = options.includeComments) !== null && _a !== void 0 ? _a : true,
                    prettyPrint: (_b = options.prettyPrint) !== null && _b !== void 0 ? _b : true,
                    baseIRI: options.baseIRI,
                    namespaceManager: this.namespaceManager
                };
                const result = this.serializer.serialize(graph, serializationOptions);
                if (result.isFailure) {
                    return result;
                }
                const serializedData = result.getValue();
                if (options.saveToVault) {
                    const fileName = this.fileManager.generateFileName(options.fileName, options.format);
                    const filePath = options.targetFolder ? `${options.targetFolder}/${fileName}` : fileName;
                    const saveResult = yield this.fileManager.saveToVault(serializedData.content, filePath);
                    if (saveResult.isFailure) {
                        return Result_1.Result.fail(saveResult.errorValue());
                    }
                    new obsidian_1.Notice(`Exported ${serializedData.tripleCount} triples to ${filePath}`);
                }
                return result;
            }
            catch (error) {
                return Result_1.Result.fail(`Export failed: ${error.message}`);
            }
        });
    }
    /**
     * Import RDF data and merge with existing graph
     */
    importRDF(content, graph, options) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const validationResult = this.validator.validateImportOptions(options);
                if (validationResult.isFailure) {
                    return Result_1.Result.fail(validationResult.errorValue());
                }
                const parseOptions = {
                    format: options.format,
                    baseIRI: options.baseIRI,
                    namespaceManager: this.namespaceManager,
                    validateInput: (_a = options.validateInput) !== null && _a !== void 0 ? _a : true,
                    strictMode: (_b = options.strictMode) !== null && _b !== void 0 ? _b : false
                };
                const parseResult = this.parser.parse(content, parseOptions);
                if (parseResult.isFailure) {
                    return Result_1.Result.fail(`Import parsing failed: ${parseResult.errorValue()}`);
                }
                const imported = parseResult.getValue();
                if (options.validateInput) {
                    const validationOptions = {
                        strictMode: options.strictMode,
                        checkDuplicates: true,
                        checkNamespaces: true,
                        checkLiterals: true
                    };
                    const graphValidation = this.validator.validateGraph(imported.graph, validationOptions);
                    if (graphValidation.isFailure) {
                        return Result_1.Result.fail(graphValidation.errorValue());
                    }
                    const validation = graphValidation.getValue();
                    if (!validation.isValid && options.strictMode) {
                        const errorMessages = validation.errors.map(e => e.message).join('; ');
                        return Result_1.Result.fail(`Import validation failed: ${errorMessages}`);
                    }
                    if (validation.warnings.length > 0) {
                        new obsidian_1.Notice(`Import completed with ${validation.warnings.length} warnings`);
                    }
                }
                let finalGraph;
                if (options.mergeMode === 'replace') {
                    finalGraph = imported.graph;
                }
                else {
                    finalGraph = graph.clone();
                    finalGraph.merge(imported.graph);
                }
                for (const [prefix, namespace] of Object.entries(imported.namespaces)) {
                    if (!this.namespaceManager.hasPrefix(prefix)) {
                        this.namespaceManager.addBinding(prefix, namespace);
                    }
                }
                return Result_1.Result.ok({ graph: finalGraph, imported });
            }
            catch (error) {
                return Result_1.Result.fail(`Import failed: ${error.message}`);
            }
        });
    }
    /**
     * Import RDF from vault file
     */
    importFromVaultFile(file, graph, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const contentResult = yield this.fileManager.readFromVault(file.path);
                if (contentResult.isFailure) {
                    return Result_1.Result.fail(contentResult.errorValue());
                }
                if (!options.format) {
                    options.format = this.fileManager.detectFormatFromExtension(file.name);
                }
                return yield this.importRDF(contentResult.getValue(), graph, options);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to import from vault file: ${error.message}`);
            }
        });
    }
    /**
     * Export SPARQL query results
     */
    exportQueryResults(results, format, fileName, saveToVault = true) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const graph = this.convertQueryResultsToGraph(results);
                const options = {
                    format,
                    fileName: fileName || 'sparql-results',
                    saveToVault,
                    includeComments: true,
                    prettyPrint: true,
                    targetFolder: 'exports'
                };
                return yield this.exportGraph(graph, options);
            }
            catch (error) {
                return Result_1.Result.fail(`Query results export failed: ${error.message}`);
            }
        });
    }
    /**
     * Validate a graph
     */
    validateGraph(graph, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.validator.validateGraph(graph, options);
        });
    }
    /**
     * List RDF files in vault
     */
    listRDFFiles(folder) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.fileManager.listRDFFiles(folder);
        });
    }
    /**
     * Convert SPARQL query results to graph
     */
    convertQueryResultsToGraph(results) {
        const graph = new Graph_1.Graph();
        for (const result of results) {
            if (result.subject && result.predicate && result.object) {
                try {
                    const subject = this.createNodeFromValue(result.subject);
                    const predicate = this.createNodeFromValue(result.predicate);
                    const object = this.createNodeFromValue(result.object);
                    if (subject && predicate && object) {
                        const triple = new Triple_1.Triple(subject, predicate, object);
                        graph.add(triple);
                    }
                }
                catch (error) {
                    console.warn('Failed to convert query result to triple:', error);
                }
            }
        }
        return graph;
    }
    /**
     * Create RDF node from query result value
     */
    createNodeFromValue(value) {
        if (typeof value === 'string') {
            if (value.startsWith('_:')) {
                return new Triple_1.BlankNode(value);
            }
            else if (value.startsWith('http://') || value.startsWith('https://') || value.includes(':')) {
                try {
                    return new Triple_1.IRI(value);
                }
                catch (_a) {
                    return Triple_1.Literal.string(value);
                }
            }
            else {
                return Triple_1.Literal.string(value);
            }
        }
        else if (typeof value === 'number') {
            return Number.isInteger(value) ? Triple_1.Literal.integer(value) : Triple_1.Literal.double(value);
        }
        else if (typeof value === 'boolean') {
            return Triple_1.Literal.boolean(value);
        }
        else if (value && typeof value === 'object') {
            if (value.type === 'uri' || value.type === 'iri') {
                return new Triple_1.IRI(value.value);
            }
            else if (value.type === 'bnode') {
                return new Triple_1.BlankNode(value.value);
            }
            else if (value.type === 'literal') {
                if (value.datatype) {
                    return new Triple_1.Literal(value.value, new Triple_1.IRI(value.datatype));
                }
                else if (value.lang) {
                    return new Triple_1.Literal(value.value, undefined, value.lang);
                }
                else {
                    return new Triple_1.Literal(value.value);
                }
            }
        }
        return null;
    }
    /**
     * Get namespace manager instance
     */
    getNamespaceManager() {
        return this.namespaceManager;
    }
    /**
     * Get supported export formats
     */
    getSupportedFormats() {
        return ['turtle', 'n-triples', 'json-ld', 'rdf-xml'];
    }
    /**
     * Get format information
     */
    getFormatInfo(format) {
        const formatMap = {
            'turtle': { extension: '.ttl', mimeType: 'text/turtle', name: 'Turtle' },
            'n-triples': { extension: '.nt', mimeType: 'application/n-triples', name: 'N-Triples' },
            'json-ld': { extension: '.jsonld', mimeType: 'application/ld+json', name: 'JSON-LD' },
            'rdf-xml': { extension: '.rdf', mimeType: 'application/rdf+xml', name: 'RDF/XML' }
        };
        return formatMap[format];
    }
}
exports.RDFService = RDFService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,