{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/memory-optimization-setup.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/memory-optimization-setup.ts"],"sourcesContent":["/**\n * Memory Optimization Setup for Jest Tests\n * Critical fixes for JavaScript heap out of memory errors\n */\n\n// Global memory monitoring and optimization\ndeclare global {\n  var __MEMORY_OPTIMIZATION_ENABLED__: boolean;\n  var __MOCK_INSTANCES__: Map<string, any>;\n  var __PERFORMANCE_MONITORS__: Array<{ name: string; start: number }>;\n}\n\n// Initialize global memory tracking\nglobal.__MEMORY_OPTIMIZATION_ENABLED__ = true;\nglobal.__MOCK_INSTANCES__ = new Map();\nglobal.__PERFORMANCE_MONITORS__ = [];\n\n/**\n * Memory-efficient mock factory to prevent duplicate object creation\n */\nclass OptimizedMockFactory {\n  private static instances = new Map<string, any>();\n\n  static createOrReuse<T>(key: string, factory: () => T): T {\n    if (this.instances.has(key)) {\n      return this.instances.get(key);\n    }\n\n    const instance = factory();\n    this.instances.set(key, instance);\n    global.__MOCK_INSTANCES__.set(key, instance);\n    return instance;\n  }\n\n  static clear(): void {\n    this.instances.clear();\n    global.__MOCK_INSTANCES__.clear();\n  }\n\n  static clearInstance(key: string): void {\n    this.instances.delete(key);\n    global.__MOCK_INSTANCES__.delete(key);\n  }\n}\n\n/**\n * Optimize performance-heavy test patterns\n */\nclass PerformanceTestOptimizer {\n  private static originalPerformanceNow = performance.now;\n  private static callCount = 0;\n\n  static optimizePerformanceNow(): void {\n    // Replace performance.now with lighter alternative for most tests\n    performance.now = jest.fn(() => {\n      this.callCount++;\n      // Use simpler timing for most calls to reduce overhead\n      if (this.callCount % 100 === 0) {\n        return this.originalPerformanceNow.call(performance);\n      }\n      return Date.now() + Math.random(); // Fake but unique timing\n    }) as any;\n  }\n\n  static restorePerformanceNow(): void {\n    performance.now = this.originalPerformanceNow;\n    this.callCount = 0;\n  }\n}\n\n/**\n * Aggressive DOM cleanup to prevent memory leaks\n */\nclass DOMOptimizer {\n  private static createdElements = new WeakSet<Element>();\n  private static originalCreateElement = document.createElement;\n\n  static optimizeDOM(): void {\n    // Track element creation for cleanup\n    document.createElement = function <K extends keyof HTMLElementTagNameMap>(\n      tagName: K,\n      options?: ElementCreationOptions,\n    ): HTMLElementTagNameMap[K] {\n      const element = DOMOptimizer.originalCreateElement.call(\n        this,\n        tagName,\n        options,\n      );\n      DOMOptimizer.createdElements.add(element);\n      return element;\n    };\n  }\n\n  static cleanupDOM(): void {\n    // Aggressive DOM cleanup\n    if (document.body) {\n      document.body.innerHTML = \"\";\n    }\n\n    // Clear document head of any test-created elements\n    const head = document.head;\n    if (head) {\n      const testElements = head.querySelectorAll(\"[data-test]\");\n      testElements.forEach((el) => el.remove());\n    }\n\n    // Force cleanup of disconnected nodes\n    if (typeof global.gc === \"function\") {\n      try {\n        global.gc();\n      } catch (e) {\n        // Ignore GC errors\n      }\n    }\n  }\n\n  static restoreDOM(): void {\n    document.createElement = this.originalCreateElement;\n  }\n}\n\n/**\n * Memory usage monitor for early warning\n */\nclass MemoryMonitor {\n  private static lastMemoryCheck = 0;\n  private static memoryThreshold = process.env.CI\n    ? 100 * 1024 * 1024 // 100MB in CI\n    : 500 * 1024 * 1024; // 500MB locally\n\n  static checkMemoryUsage(testName: string): void {\n    if (typeof process.memoryUsage === \"function\") {\n      const usage = process.memoryUsage();\n      const heapUsed = usage.heapUsed;\n\n      if (heapUsed > this.memoryThreshold) {\n        console.warn(\n          `⚠️  Memory Warning: Test \"${testName}\" using ${Math.round(heapUsed / 1024 / 1024)}MB`,\n        );\n\n        // Force garbage collection if available\n        if (typeof global.gc === \"function\") {\n          global.gc();\n        }\n      }\n\n      this.lastMemoryCheck = heapUsed;\n    }\n  }\n\n  static startMonitoring(testName: string): void {\n    global.__PERFORMANCE_MONITORS__.push({\n      name: testName,\n      start: Date.now(),\n    });\n  }\n\n  static stopMonitoring(testName: string): void {\n    const monitor = global.__PERFORMANCE_MONITORS__.find(\n      (m) => m.name === testName,\n    );\n    if (monitor) {\n      const duration = Date.now() - monitor.start;\n      if (duration > 5000) {\n        // Warn about tests taking > 5 seconds\n        console.warn(`⏰ Slow Test Warning: \"${testName}\" took ${duration}ms`);\n      }\n\n      // Remove from monitors\n      const index = global.__PERFORMANCE_MONITORS__.indexOf(monitor);\n      if (index > -1) {\n        global.__PERFORMANCE_MONITORS__.splice(index, 1);\n      }\n    }\n  }\n}\n\n/**\n * Optimize IndexedGraph performance tests to use less memory\n */\nclass IndexedGraphOptimizer {\n  static optimizeTestData(): void {\n    // Patch any large data structure creation in IndexedGraph tests\n    const originalArray = Array;\n\n    (global as any).Array = function (...args: any[]) {\n      // Limit array sizes in tests to prevent memory explosion\n      if (args.length === 1 && typeof args[0] === \"number\" && args[0] > 1000) {\n        console.warn(\n          `Array size limited from ${args[0]} to 1000 for memory optimization`,\n        );\n        return new originalArray(1000);\n      }\n      return new originalArray(...args);\n    };\n\n    // Copy static methods\n    Object.setPrototypeOf((global as any).Array, originalArray);\n    Object.defineProperty((global as any).Array, \"from\", {\n      value: originalArray.from,\n    });\n    Object.defineProperty((global as any).Array, \"isArray\", {\n      value: originalArray.isArray,\n    });\n    Object.defineProperty((global as any).Array, \"of\", {\n      value: originalArray.of,\n    });\n  }\n\n  static restoreTestData(): void {\n    (global as any).Array = Array;\n  }\n}\n\n// Apply optimizations during setup\nbeforeAll(() => {\n  if (process.env.CI || process.env.MEMORY_OPTIMIZATION) {\n    console.log(\"🚀 Applying memory optimizations for CI/CD...\");\n\n    // Apply all optimizations\n    PerformanceTestOptimizer.optimizePerformanceNow();\n    DOMOptimizer.optimizeDOM();\n    IndexedGraphOptimizer.optimizeTestData();\n\n    // Set more aggressive timeouts for CI\n    jest.setTimeout(process.env.CI ? 30000 : 10000);\n  }\n});\n\n// Monitor memory before each test\nbeforeEach(() => {\n  const testName = expect.getState()?.currentTestName || \"unknown\";\n  MemoryMonitor.startMonitoring(testName);\n  MemoryMonitor.checkMemoryUsage(testName);\n\n  // Clear mock instances before each test\n  OptimizedMockFactory.clear();\n});\n\n// Aggressive cleanup after each test\nafterEach(() => {\n  const testName = expect.getState()?.currentTestName || \"unknown\";\n\n  // Stop monitoring\n  MemoryMonitor.stopMonitoring(testName);\n\n  // Aggressive cleanup\n  DOMOptimizer.cleanupDOM();\n  OptimizedMockFactory.clear();\n\n  // Clear Jest mocks aggressively\n  jest.clearAllMocks();\n  jest.clearAllTimers();\n  jest.restoreAllMocks();\n\n  // Force garbage collection in CI\n  if (process.env.CI && typeof global.gc === \"function\") {\n    global.gc();\n  }\n\n  // Final memory check\n  MemoryMonitor.checkMemoryUsage(`${testName}-cleanup`);\n});\n\n// Restore optimizations after all tests\nafterAll(() => {\n  if (process.env.CI || process.env.MEMORY_OPTIMIZATION) {\n    console.log(\"🧹 Restoring original implementations...\");\n\n    PerformanceTestOptimizer.restorePerformanceNow();\n    DOMOptimizer.restoreDOM();\n    IndexedGraphOptimizer.restoreTestData();\n\n    // Final cleanup\n    OptimizedMockFactory.clear();\n\n    if (typeof global.gc === \"function\") {\n      global.gc();\n    }\n  }\n});\n\n// Export utilities for use in tests\nexport {\n  OptimizedMockFactory,\n  PerformanceTestOptimizer,\n  DOMOptimizer,\n  MemoryMonitor,\n  IndexedGraphOptimizer,\n};\n"],"version":3}