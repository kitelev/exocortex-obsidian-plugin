{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/PropertyEditingUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/PropertyEditingUseCase.ts"],"sourcesContent":["import { UseCase } from \"../core/UseCase\";\nimport { Result } from \"../../domain/core/Result\";\nimport { IAssetRepository } from \"../../domain/repositories/IAssetRepository\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { Asset } from \"../../domain/entities/Asset\";\n\n/**\n * Use case for editing asset properties inline\n */\nexport interface UpdatePropertyRequest {\n  assetId: string;\n  propertyName: string;\n  value: any;\n  propertyDefinition: {\n    propertyName: string;\n    label: string;\n    range: string;\n    isRequired: boolean;\n    isObjectProperty?: boolean;\n    validation?: string;\n  };\n}\n\nexport interface UpdatePropertyResponse {\n  success: boolean;\n  updatedValue: any;\n}\n\nexport class PropertyEditingUseCase\n  implements UseCase<UpdatePropertyRequest, UpdatePropertyResponse>\n{\n  constructor(\n    private assetRepository: IAssetRepository,\n    private plugin: any, // Reference to main plugin for property discovery\n  ) {}\n\n  async execute(\n    request: UpdatePropertyRequest,\n  ): Promise<Result<UpdatePropertyResponse>> {\n    // Validate request\n    if (!request.assetId) {\n      return Result.fail<UpdatePropertyResponse>(\"Asset ID is required\");\n    }\n\n    if (!request.propertyName) {\n      return Result.fail<UpdatePropertyResponse>(\"Property name is required\");\n    }\n\n    // Validate property value\n    const validationResult = this.validatePropertyValue(\n      request.value,\n      request.propertyDefinition,\n    );\n\n    if (validationResult.isFailure) {\n      return Result.fail<UpdatePropertyResponse>(validationResult.error);\n    }\n\n    try {\n      // If assetId looks like a file path, use direct update method\n      if (request.assetId.includes(\"/\") || request.assetId.endsWith(\".md\")) {\n        // Use the new direct update method\n        const repo = this.assetRepository as any;\n        if (repo.updateFrontmatterByPath) {\n          // Log property update for debugging\n          // console.log(`Updating property ${request.propertyName} to ${request.value} for file ${request.assetId}`);\n          await repo.updateFrontmatterByPath(request.assetId, {\n            [request.propertyName]: request.value,\n          });\n\n          return Result.ok<UpdatePropertyResponse>({\n            success: true,\n            updatedValue: request.value,\n          });\n        }\n      }\n\n      // Fallback to original logic for asset IDs\n      let asset: Asset | null = null;\n\n      // First try as UUID\n      const assetIdResult = AssetId.create(request.assetId);\n      if (assetIdResult.isSuccess) {\n        asset = await this.assetRepository.findById(assetIdResult.getValue());\n      }\n\n      // If not found by ID, try by filename\n      if (!asset) {\n        asset = await this.assetRepository.findByFilename(request.assetId);\n      }\n\n      if (!asset) {\n        return Result.fail<UpdatePropertyResponse>(\n          `Asset not found: ${request.assetId}`,\n        );\n      }\n\n      // Update the property\n      asset.setProperty(request.propertyName, request.value);\n\n      // Save the asset\n      await this.assetRepository.save(asset);\n\n      return Result.ok<UpdatePropertyResponse>({\n        success: true,\n        updatedValue: request.value,\n      });\n    } catch (error) {\n      return Result.fail<UpdatePropertyResponse>(\n        `Failed to update property: ${error}`,\n      );\n    }\n  }\n\n  /**\n   * Validate property value based on its definition\n   */\n  private validatePropertyValue(\n    value: any,\n    definition: UpdatePropertyRequest[\"propertyDefinition\"],\n  ): Result<void> {\n    // Check required\n    if (\n      definition.isRequired &&\n      (value === null || value === undefined || value === \"\")\n    ) {\n      return Result.fail<void>(`${definition.label} is required`);\n    }\n\n    // Skip further validation if value is empty and not required\n    if (\n      !definition.isRequired &&\n      (value === null || value === undefined || value === \"\")\n    ) {\n      return Result.ok<void>();\n    }\n\n    // Validate based on range/type\n    if (definition.range === \"number\") {\n      if (isNaN(Number(value))) {\n        return Result.fail<void>(`${definition.label} must be a number`);\n      }\n    }\n\n    if (definition.range === \"date\") {\n      if (isNaN(Date.parse(value))) {\n        return Result.fail<void>(`${definition.label} must be a valid date`);\n      }\n    }\n\n    if (definition.range === \"boolean\") {\n      if (typeof value !== \"boolean\") {\n        return Result.fail<void>(`${definition.label} must be true or false`);\n      }\n    }\n\n    if (definition.range?.startsWith(\"enum:\")) {\n      const allowedValues = definition.range\n        .substring(5)\n        .split(\",\")\n        .map((v) => v.trim());\n      if (!allowedValues.includes(value)) {\n        return Result.fail<void>(\n          `${definition.label} must be one of: ${allowedValues.join(\", \")}`,\n        );\n      }\n    }\n\n    // Custom validation regex\n    if (definition.validation) {\n      try {\n        const regex = new RegExp(definition.validation);\n        if (!regex.test(String(value))) {\n          return Result.fail<void>(`${definition.label} format is invalid`);\n        }\n      } catch (e) {\n        // Invalid regex, skip validation\n      }\n    }\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Get properties for a class (delegating to plugin for now)\n   */\n  async getPropertiesForClass(className: string): Promise<Result<any[]>> {\n    try {\n      const properties = await this.plugin.findPropertiesForClass(className);\n      return Result.ok(properties);\n    } catch (error) {\n      return Result.fail(`Failed to get properties: ${error.message}`);\n    }\n  }\n\n  /**\n   * Get assets for a class (for dropdowns)\n   */\n  async getAssetsForClass(className: string): Promise<Result<any[]>> {\n    try {\n      const assets = await this.plugin.findAssetsByClass(className, true);\n      return Result.ok(assets);\n    } catch (error) {\n      return Result.fail(`Failed to get assets: ${error.message}`);\n    }\n  }\n}\n"],"version":3}