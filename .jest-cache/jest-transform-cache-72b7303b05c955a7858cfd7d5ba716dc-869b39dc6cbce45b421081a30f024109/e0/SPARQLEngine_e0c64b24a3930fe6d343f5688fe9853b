50485655c2fe749392b0cf0079fcd9c2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPARQLEngine = void 0;
const Triple_1 = require("../domain/semantic/core/Triple");
const QueryCache_1 = require("./services/QueryCache");
class SPARQLEngine {
    constructor(graph, cacheConfig) {
        this.graph = graph;
        this.queryCache = new QueryCache_1.QueryCache(cacheConfig);
    }
    /**
     * Execute CONSTRUCT query to generate new triples
     */
    construct(query) {
        // Check cache first
        const cacheKey = this.queryCache.createCacheKey(`CONSTRUCT:${query}`);
        const cachedResult = this.queryCache.get(cacheKey);
        if (cachedResult) {
            return Object.assign(Object.assign({}, cachedResult), { cached: true });
        }
        // Parse CONSTRUCT query
        const constructMatch = query.match(/CONSTRUCT\s*\{(.*?)\}\s*WHERE\s*\{(.*?)\}/is);
        if (!constructMatch) {
            throw new Error('Invalid CONSTRUCT query format');
        }
        const template = this.parseConstructTemplate(constructMatch[1]);
        const patterns = this.parsePatterns(constructMatch[2]);
        if (patterns.length === 0) {
            return { triples: [], provenance: `CONSTRUCT query at ${new Date().toISOString()}` };
        }
        const generatedTriples = [];
        // Handle multiple patterns by joining results
        if (patterns.length === 1) {
            // Single pattern - simple case
            const pattern = patterns[0];
            // Convert pattern strings to proper types, stripping angle brackets from IRIs
            const subject = pattern.subject.startsWith('?') ? null :
                new Triple_1.IRI(pattern.subject.replace(/^<|>$/g, ''));
            const predicate = pattern.predicate.startsWith('?') ? null :
                new Triple_1.IRI(pattern.predicate.replace(/^<|>$/g, ''));
            const object = pattern.object.startsWith('?') ? null : this.parseObjectForMatching(pattern.object);
            const matchedTriples = this.graph.match(subject, predicate, object);
            for (const triple of matchedTriples) {
                const binding = this.createBinding(pattern, triple);
                const newTriples = this.instantiateTemplate(template, binding);
                generatedTriples.push(...newTriples);
            }
        }
        else {
            // Multiple patterns - need to join bindings
            const bindings = this.executeWhereClause(patterns);
            for (const binding of bindings) {
                const newTriples = this.instantiateTemplate(template, binding);
                generatedTriples.push(...newTriples);
            }
        }
        // Apply LIMIT if present
        const limitMatch = query.match(/LIMIT\s+(\d+)/i);
        let result;
        if (limitMatch) {
            const limit = parseInt(limitMatch[1]);
            result = {
                triples: generatedTriples.slice(0, limit),
                provenance: `CONSTRUCT query at ${new Date().toISOString()}`,
                cached: false
            };
        }
        else {
            result = {
                triples: generatedTriples,
                provenance: `CONSTRUCT query at ${new Date().toISOString()}`,
                cached: false
            };
        }
        // Cache the result
        this.queryCache.set(cacheKey, result);
        return result;
    }
    parseConstructTemplate(templateClause) {
        const templates = [];
        // Split by period followed by whitespace or newline, not just any period
        const lines = templateClause.trim().split(/\.\s*(?:\n|\s|$)/);
        for (const line of lines) {
            const trimmed = line.trim();
            if (!trimmed)
                continue;
            const parts = trimmed.split(/\s+/);
            if (parts.length >= 3) {
                // Preserve quotes for literals
                let object = parts.slice(2).join(' ');
                templates.push({
                    subject: parts[0],
                    predicate: parts[1],
                    object: object
                });
            }
        }
        return templates;
    }
    createBinding(pattern, triple) {
        const binding = {};
        if (pattern.subject.startsWith('?')) {
            binding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());
        }
        if (pattern.predicate.startsWith('?')) {
            binding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());
        }
        if (pattern.object.startsWith('?')) {
            binding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());
        }
        return binding;
    }
    formatForBinding(node) {
        // For SELECT query results, return user-friendly string representation
        if (node.getValue) {
            // It's a Literal - return just the quoted value for user-friendly display
            return `"${node.getValue()}"`;
        }
        // For IRIs and BlankNodes, use standard toString
        return node.toString();
    }
    instantiateTemplate(template, binding) {
        const triples = [];
        for (const t of template) {
            const subjectStr = this.resolveValue(t.subject, binding);
            const predicateStr = this.resolveValue(t.predicate, binding);
            const objectStr = this.resolveValue(t.object, binding);
            if (subjectStr && predicateStr && objectStr) {
                // Create proper Triple objects
                const subject = subjectStr.startsWith('_:') ? new Triple_1.BlankNode(subjectStr) : new Triple_1.IRI(subjectStr.replace(/^<|>$/g, ''));
                const predicate = new Triple_1.IRI(predicateStr.replace(/^<|>$/g, ''));
                // Handle different object types
                let object;
                if (objectStr.startsWith('"')) {
                    // It's a literal - create plain literal without datatype
                    object = new Triple_1.Literal(objectStr.replace(/^"|"$/g, ''));
                }
                else if (objectStr === 'true' || objectStr === 'false') {
                    // Boolean literal
                    object = Triple_1.Literal.boolean(objectStr === 'true');
                }
                else if (objectStr.startsWith('_:')) {
                    // Blank node
                    object = new Triple_1.BlankNode(objectStr);
                }
                else if (/^\d+$/.test(objectStr)) {
                    // Integer literal
                    object = Triple_1.Literal.integer(parseInt(objectStr));
                }
                else if (/^\d+\.\d+$/.test(objectStr)) {
                    // Double literal
                    object = Triple_1.Literal.double(parseFloat(objectStr));
                }
                else {
                    // IRI
                    object = new Triple_1.IRI(objectStr.replace(/^<|>$/g, ''));
                }
                triples.push(new Triple_1.Triple(subject, predicate, object));
            }
        }
        return triples;
    }
    resolveValue(value, binding) {
        if (value.startsWith('?')) {
            const varName = value.substring(1);
            return binding[varName] || null;
        }
        return value;
    }
    executeWhereClause(patterns) {
        if (patterns.length === 0)
            return [];
        // Start with first pattern
        const firstPattern = patterns[0];
        const firstTriples = this.graph.match(firstPattern.subject.startsWith('?') ? null : new Triple_1.IRI(firstPattern.subject.replace(/^<|>$/g, '')), firstPattern.predicate.startsWith('?') ? null : new Triple_1.IRI(firstPattern.predicate.replace(/^<|>$/g, '')), firstPattern.object.startsWith('?') ? null :
            (firstPattern.object.startsWith('"') ?
                new Triple_1.Literal(firstPattern.object.replace(/^"|"$/g, '')) :
                new Triple_1.IRI(firstPattern.object.replace(/^<|>$/g, ''))));
        let bindings = [];
        for (const triple of firstTriples) {
            bindings.push(this.createBinding(firstPattern, triple));
        }
        // Join with subsequent patterns
        for (let i = 1; i < patterns.length; i++) {
            const pattern = patterns[i];
            const newBindings = [];
            for (const binding of bindings) {
                // Resolve pattern with current binding
                const subjectStr = pattern.subject.startsWith('?')
                    ? (binding[pattern.subject.substring(1)] || null)
                    : pattern.subject;
                const predicateStr = pattern.predicate.startsWith('?')
                    ? (binding[pattern.predicate.substring(1)] || null)
                    : pattern.predicate;
                const objectStr = pattern.object.startsWith('?')
                    ? (binding[pattern.object.substring(1)] || null)
                    : pattern.object;
                // Convert strings to proper types for match
                const subject = subjectStr ? new Triple_1.IRI(subjectStr.replace(/^<|>$/g, '')) : null;
                const predicate = predicateStr ? new Triple_1.IRI(predicateStr.replace(/^<|>$/g, '')) : null;
                const object = objectStr ? this.parseObjectForMatching(objectStr) : null;
                // Find matching triples
                const matches = this.graph.match(subject, predicate, object);
                for (const triple of matches) {
                    const extendedBinding = Object.assign({}, binding);
                    // Add new variable bindings
                    if (pattern.subject.startsWith('?') && !subjectStr) {
                        extendedBinding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());
                    }
                    if (pattern.predicate.startsWith('?') && !predicateStr) {
                        extendedBinding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());
                    }
                    if (pattern.object.startsWith('?') && !objectStr) {
                        extendedBinding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());
                    }
                    newBindings.push(extendedBinding);
                }
            }
            bindings = newBindings;
        }
        return bindings;
    }
    select(query) {
        // Check cache first
        const cacheKey = this.queryCache.createCacheKey(`SELECT:${query}`);
        const cachedResult = this.queryCache.get(cacheKey);
        if (cachedResult) {
            return Object.assign(Object.assign({}, cachedResult), { cached: true });
        }
        // Parse basic SELECT ?var WHERE { ?s ?p ?o } pattern
        const selectMatch = query.match(/SELECT\s+(.*?)\s+WHERE\s*\{(.*?)\}/is);
        if (!selectMatch) {
            throw new Error('Invalid SPARQL query format');
        }
        const variables = this.parseVariables(selectMatch[1]);
        const patterns = this.parsePatterns(selectMatch[2]);
        if (patterns.length === 0) {
            const emptyResult = { results: [], cached: false };
            this.queryCache.set(cacheKey, emptyResult);
            return emptyResult;
        }
        let results = [];
        if (patterns.length === 1) {
            // Single pattern - simple case
            const pattern = patterns[0];
            // Convert string patterns to proper types for match
            const subject = pattern.subject.startsWith('?') ? null : new Triple_1.IRI(pattern.subject.replace(/^<|>$/g, ''));
            const predicate = pattern.predicate.startsWith('?') ? null : new Triple_1.IRI(pattern.predicate.replace(/^<|>$/g, ''));
            const object = pattern.object.startsWith('?') ? null : this.parseObjectForMatching(pattern.object);
            const triples = this.graph.match(subject, predicate, object);
            // Bind variables
            for (const triple of triples) {
                const binding = {};
                if (pattern.subject.startsWith('?')) {
                    const varName = pattern.subject.substring(1);
                    if (variables.includes('*') || variables.includes(varName)) {
                        binding[varName] = this.formatForBinding(triple.getSubject());
                    }
                }
                if (pattern.predicate.startsWith('?')) {
                    const varName = pattern.predicate.substring(1);
                    if (variables.includes('*') || variables.includes(varName)) {
                        binding[varName] = this.formatForBinding(triple.getPredicate());
                    }
                }
                if (pattern.object.startsWith('?')) {
                    const varName = pattern.object.substring(1);
                    if (variables.includes('*') || variables.includes(varName)) {
                        binding[varName] = this.formatForBinding(triple.getObject());
                    }
                }
                if (Object.keys(binding).length > 0) {
                    results.push(binding);
                }
            }
        }
        else {
            // Multiple patterns - need to join bindings
            const bindings = this.executeWhereClauseForSelect(patterns);
            for (const binding of bindings) {
                const filteredBinding = {};
                // Only include requested variables
                for (const [key, value] of Object.entries(binding)) {
                    if (variables.includes('*') || variables.includes(key)) {
                        filteredBinding[key] = value;
                    }
                }
                if (Object.keys(filteredBinding).length > 0) {
                    results.push(filteredBinding);
                }
            }
        }
        // Apply LIMIT if present
        const limitMatch = query.match(/LIMIT\s+(\d+)/i);
        let result;
        if (limitMatch) {
            const limit = parseInt(limitMatch[1]);
            result = { results: results.slice(0, limit), cached: false };
        }
        else {
            result = { results, cached: false };
        }
        // Cache the result
        this.queryCache.set(cacheKey, result);
        return result;
    }
    parseVariables(selectClause) {
        const trimmed = selectClause.trim();
        if (trimmed === '*') {
            return ['*'];
        }
        const variables = [];
        const varPattern = /\?(\w+)/g;
        let match;
        while ((match = varPattern.exec(trimmed)) !== null) {
            variables.push(match[1]);
        }
        return variables;
    }
    parseObjectForMatching(objectStr) {
        if (objectStr.startsWith('"')) {
            // It's a string literal - create proper Literal for matching
            const content = objectStr.replace(/^"|"$/g, '');
            return Triple_1.Literal.string(content);
        }
        else {
            // It's an IRI
            return new Triple_1.IRI(objectStr.replace(/^<|>$/g, ''));
        }
    }
    executeWhereClauseForSelect(patterns) {
        if (patterns.length === 0)
            return [];
        // Start with first pattern
        const firstPattern = patterns[0];
        const firstTriples = this.graph.match(firstPattern.subject.startsWith('?') ? null : new Triple_1.IRI(firstPattern.subject.replace(/^<|>$/g, '')), firstPattern.predicate.startsWith('?') ? null : new Triple_1.IRI(firstPattern.predicate.replace(/^<|>$/g, '')), firstPattern.object.startsWith('?') ? null : this.parseObjectForMatching(firstPattern.object));
        let bindings = [];
        for (const triple of firstTriples) {
            bindings.push(this.createBinding(firstPattern, triple));
        }
        // Join with subsequent patterns
        for (let i = 1; i < patterns.length; i++) {
            const pattern = patterns[i];
            const newBindings = [];
            for (const binding of bindings) {
                // Resolve pattern with current binding
                const subjectStr = pattern.subject.startsWith('?')
                    ? (binding[pattern.subject.substring(1)] || null)
                    : pattern.subject;
                const predicateStr = pattern.predicate.startsWith('?')
                    ? (binding[pattern.predicate.substring(1)] || null)
                    : pattern.predicate;
                const objectStr = pattern.object.startsWith('?')
                    ? (binding[pattern.object.substring(1)] || null)
                    : pattern.object;
                // Convert strings to proper types for match
                const subject = subjectStr ? new Triple_1.IRI(subjectStr.replace(/^<|>$/g, '')) : null;
                const predicate = predicateStr ? new Triple_1.IRI(predicateStr.replace(/^<|>$/g, '')) : null;
                const object = objectStr ? this.parseObjectForMatching(objectStr) : null;
                // Find matching triples
                const matches = this.graph.match(subject, predicate, object);
                for (const triple of matches) {
                    const extendedBinding = Object.assign({}, binding);
                    // Add new variable bindings
                    if (pattern.subject.startsWith('?') && !subjectStr) {
                        extendedBinding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());
                    }
                    if (pattern.predicate.startsWith('?') && !predicateStr) {
                        extendedBinding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());
                    }
                    if (pattern.object.startsWith('?') && !objectStr) {
                        extendedBinding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());
                    }
                    newBindings.push(extendedBinding);
                }
            }
            bindings = newBindings;
        }
        return bindings;
    }
    parsePatterns(whereClause) {
        const patterns = [];
        // Simple triple pattern: ?s ?p ?o or with literals
        // Split by period followed by whitespace/newline, not dots inside quotes
        const lines = whereClause.trim().split(/\.\s*(?:\n|\s|$)/);
        for (const line of lines) {
            const trimmed = line.trim();
            if (!trimmed)
                continue;
            // Match triple pattern (very basic)
            const parts = trimmed.split(/\s+/);
            if (parts.length >= 3) {
                patterns.push({
                    subject: parts[0],
                    predicate: parts[1],
                    object: parts.slice(2).join(' ') // Keep quotes for proper matching
                });
            }
        }
        return patterns;
    }
    /**
     * Get cache statistics
     */
    getCacheStatistics() {
        return this.queryCache.getStatistics();
    }
    /**
     * Invalidate all cached queries
     */
    invalidateCache() {
        this.queryCache.invalidateAll();
    }
    /**
     * Update cache configuration
     */
    updateCacheConfig(config) {
        this.queryCache.updateConfig(config);
    }
    /**
     * Get current cache configuration
     */
    getCacheConfig() {
        return this.queryCache.getConfig();
    }
    /**
     * Cleanup expired cache entries
     */
    cleanupCache() {
        return this.queryCache.cleanup();
    }
    /**
     * Destroy cache and cleanup resources
     */
    destroy() {
        this.queryCache.destroy();
    }
}
exports.SPARQLEngine = SPARQLEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,