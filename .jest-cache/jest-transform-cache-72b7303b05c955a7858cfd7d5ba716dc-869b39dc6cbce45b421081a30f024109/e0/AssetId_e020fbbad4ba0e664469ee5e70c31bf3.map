{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/AssetId.ts","mappings":";;;AAAA,2CAAwC;AAExC;;;GAGG;AACH,MAAa,OAAO;IAGlB,YAAoB,KAAa;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,KAAa;QACzB,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC,OAAO,eAAM,CAAC,IAAI,CAAU,yBAAyB,CAAC,CAAC;SACxD;QAED,qCAAqC;QACrC,MAAM,SAAS,GACb,4EAA4E,CAAC;QAC/E,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE;YACjC,OAAO,eAAM,CAAC,IAAI,CAAU,qCAAqC,CAAC,CAAC;SACpE;QAED,OAAO,eAAM,CAAC,EAAE,CAAU,IAAI,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,QAAQ;QACb,MAAM,IAAI,GAAG,sCAAsC,CAAC,OAAO,CACzD,OAAO,EACP,CAAC,CAAC,EAAE,EAAE;YACJ,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;YAC1C,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACxB,CAAC,CACF,CAAC;QACF,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,MAAM,CAAC,KAAc;QACnB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,YAAY,OAAO,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;QACD,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,OAAO;QACL,MAAM,SAAS,GACb,4EAA4E,CAAC;QAC/E,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACF;AA5DD,0BA4DC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/AssetId.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\n\n/**\n * Value object representing a unique asset identifier\n * Immutable and self-validating\n */\nexport class AssetId {\n  private readonly value: string;\n\n  private constructor(value: string) {\n    this.value = value;\n  }\n\n  static create(value: string): Result<AssetId> {\n    if (!value || value.trim().length === 0) {\n      return Result.fail<AssetId>(\"AssetId cannot be empty\");\n    }\n\n    // Validate UUID format for asset IDs\n    const uuidRegex =\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(value.trim())) {\n      return Result.fail<AssetId>(\"AssetId must be a valid UUID format\");\n    }\n\n    return Result.ok<AssetId>(new AssetId(value.trim()));\n  }\n\n  static generate(): AssetId {\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(\n      /[xy]/g,\n      (c) => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n      },\n    );\n    return new AssetId(uuid);\n  }\n\n  toString(): string {\n    return this.value;\n  }\n\n  equals(other: AssetId): boolean {\n    if (!other || !(other instanceof AssetId)) {\n      return false;\n    }\n    return this.value === other.value;\n  }\n\n  /**\n   * Get the UUID value\n   */\n  getValue(): string {\n    return this.value;\n  }\n\n  /**\n   * Validate that this is a proper UUID\n   */\n  isValid(): boolean {\n    const uuidRegex =\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(this.value);\n  }\n}\n"],"version":3}