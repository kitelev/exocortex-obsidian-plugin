35b8b6938a7ca1dbab09413e83782d9f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StrategyBasedLayoutRenderer = void 0;
const Result_1 = require("../../domain/core/Result");
const GetLayoutForClassUseCase_1 = require("../../application/use-cases/GetLayoutForClassUseCase");
const CustomLayoutRenderingStrategy_1 = require("../strategies/CustomLayoutRenderingStrategy");
const DefaultLayoutRenderingStrategy_1 = require("../strategies/DefaultLayoutRenderingStrategy");
const BlockRendererFactory_1 = require("../factories/BlockRendererFactory");
/**
 * Strategy-based LayoutRenderer implementing SOLID principles
 *
 * SOLID Compliance:
 * - SRP: Single responsibility - orchestrates layout rendering strategy selection
 * - OCP: Open for extension via strategy pattern
 * - LSP: Strategies are substitutable implementations
 * - ISP: Clean interfaces segregated by concern
 * - DIP: Depends on abstractions (strategies, use cases, factories)
 *
 * Design Patterns:
 * - Strategy Pattern: Different rendering strategies
 * - Factory Pattern: Block renderer creation
 * - Use Case Pattern: Business logic orchestration
 */
class StrategyBasedLayoutRenderer {
    constructor(app, layoutRepository, propertyRenderer, queryEngineService) {
        this.app = app;
        // Initialize dependencies using dependency injection
        this.getLayoutUseCase = new GetLayoutForClassUseCase_1.GetLayoutForClassUseCase(layoutRepository);
        this.blockRendererFactory = new BlockRendererFactory_1.BlockRendererFactory(app);
        // Initialize strategies in priority order (first match wins)
        this.strategies = [
            new CustomLayoutRenderingStrategy_1.CustomLayoutRenderingStrategy(this.blockRendererFactory),
            new DefaultLayoutRenderingStrategy_1.DefaultLayoutRenderingStrategy(this.blockRendererFactory),
        ];
    }
    /**
     * Production API: Render based on file metadata
     * This is the main entry point for production code
     */
    async renderLayout(container, file, metadata, dataviewApi) {
        try {
            // Input validation
            if (!container) {
                return Result_1.Result.fail("Container is required for rendering");
            }
            if (!metadata?.frontmatter) {
                return this.renderError(container, "No metadata available for this file");
            }
            // Extract class information
            const frontmatter = metadata.frontmatter;
            const instanceClass = frontmatter["exo__Instance_class"];
            if (!instanceClass) {
                return this.renderError(container, "No instance class defined");
            }
            const cleanClassName = this.cleanClassName(instanceClass);
            // Get layout using use case (business logic)
            const layoutResult = await this.getLayoutUseCase.execute({
                className: cleanClassName,
            });
            if (layoutResult.isFailure) {
                return this.renderError(container, layoutResult.error);
            }
            const { layout, fallbackUsed } = layoutResult.getValue();
            // Create rendering context
            const context = {
                container,
                file,
                metadata,
                dataviewApi,
            };
            // Strategy pattern: Find and execute appropriate strategy
            const strategy = this.selectStrategy(layout);
            return await strategy.render(context, layout || undefined);
        }
        catch (error) {
            return Result_1.Result.fail(`Layout rendering failed: ${error}`);
        }
    }
    /**
     * Test API: Render ClassLayout directly
     * Provides backward compatibility for existing tests
     */
    renderLayoutDirect(layout, container) {
        try {
            // Input validation
            if (!container) {
                return Result_1.Result.fail("Container is required for rendering");
            }
            // Handle null/undefined layout (empty render)
            if (!layout) {
                return Result_1.Result.ok();
            }
            // Handle malformed layout objects gracefully
            if (!layout.getVisibleBlocks ||
                typeof layout.getVisibleBlocks !== "function") {
                return Result_1.Result.ok();
            }
            // Apply custom CSS class if specified
            if (layout.config?.cssClass) {
                container.classList.add(layout.config.cssClass);
            }
            // Render visible blocks synchronously for test compatibility
            const visibleBlocks = layout.getVisibleBlocks();
            for (const block of visibleBlocks) {
                this.renderBlockStructureOnly(container, block);
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Direct layout rendering failed: ${error}`);
        }
    }
    /**
     * Strategy Pattern Implementation: Select appropriate rendering strategy
     * Uses Chain of Responsibility pattern to find first matching strategy
     */
    selectStrategy(layout) {
        for (const strategy of this.strategies) {
            if (strategy.canHandle(layout)) {
                return strategy;
            }
        }
        // Fallback to default strategy (should never happen due to strategy ordering)
        // This ensures the system always has a fallback and never fails
        return this.strategies[this.strategies.length - 1];
    }
    /**
     * Render block structure only (for test compatibility)
     * This creates the DOM structure without actual content rendering
     */
    renderBlockStructureOnly(container, block) {
        // Create block container
        const blockContainer = document.createElement("div");
        blockContainer.className = `exocortex-block exocortex-block-${block.type}`;
        blockContainer.setAttribute("data-block-id", block.id);
        container.appendChild(blockContainer);
        // Add block header if title exists
        if (block.title) {
            const header = document.createElement("h3");
            header.textContent = block.title;
            header.className = "exocortex-block-header";
            blockContainer.appendChild(header);
            // Add collapse toggle if collapsible
            if (block.isCollapsible) {
                header.classList.add("is-collapsible");
                header.addEventListener("click", () => {
                    blockContainer.classList.toggle("is-collapsed");
                });
            }
        }
        // Create block content container (empty for tests)
        const blockContent = document.createElement("div");
        blockContent.className = "exocortex-block-content";
        blockContainer.appendChild(blockContent);
    }
    /**
     * Error handling utility
     */
    renderError(container, error) {
        container.createEl("div", {
            text: `Layout Error: ${error}`,
            cls: "exocortex-error notice-error",
        });
        return Result_1.Result.fail(error);
    }
    /**
     * Utility for cleaning class names from Obsidian wiki links
     */
    cleanClassName(className) {
        if (!className)
            return "";
        const str = Array.isArray(className) ? className[0] : className;
        return str?.toString().replace(/\[\[|\]\]/g, "") || "";
    }
    // Extension points for Open-Closed Principle compliance
    /**
     * Add new rendering strategy (Open for extension)
     */
    addStrategy(strategy, priority = "first") {
        if (priority === "first") {
            this.strategies.unshift(strategy);
        }
        else {
            this.strategies.push(strategy);
        }
    }
    /**
     * Remove rendering strategy
     */
    removeStrategy(strategyClass) {
        const index = this.strategies.findIndex((s) => s.constructor === strategyClass);
        if (index >= 0) {
            this.strategies.splice(index, 1);
            return true;
        }
        return false;
    }
    /**
     * Get active strategies (for debugging/monitoring)
     */
    getActiveStrategies() {
        return this.strategies.map((s) => s.constructor.name);
    }
    /**
     * Get block renderer factory (for testing)
     */
    getBlockRendererFactory() {
        return this.blockRendererFactory;
    }
    /**
     * Health check method
     */
    isHealthy() {
        return this.strategies.length > 0 && this.blockRendererFactory !== null;
    }
}
exports.StrategyBasedLayoutRenderer = StrategyBasedLayoutRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,