908382659fa6a9d29a55dd3ddd057fe8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskStatus = exports.TaskStatusType = void 0;
const Result_1 = require("../core/Result");
var TaskStatusType;
(function (TaskStatusType) {
    TaskStatusType["TODO"] = "todo";
    TaskStatusType["IN_PROGRESS"] = "in-progress";
    TaskStatusType["WAITING"] = "waiting";
    TaskStatusType["DONE"] = "done";
    TaskStatusType["CANCELLED"] = "cancelled";
})(TaskStatusType = exports.TaskStatusType || (exports.TaskStatusType = {}));
/**
 * Value object representing task status
 * Immutable and self-validating with state transition rules
 */
class TaskStatus {
    constructor(status) {
        this.status = status;
    }
    static create(value) {
        if (!value) {
            return Result_1.Result.fail("TaskStatus cannot be empty");
        }
        const normalizedValue = typeof value === "string" ? value.toLowerCase().replace("_", "-") : value;
        if (!Object.values(TaskStatusType).includes(normalizedValue)) {
            return Result_1.Result.fail("TaskStatus must be one of: todo, in-progress, waiting, done, cancelled");
        }
        return Result_1.Result.ok(new TaskStatus(normalizedValue));
    }
    static todo() {
        return new TaskStatus(TaskStatusType.TODO);
    }
    static inProgress() {
        return new TaskStatus(TaskStatusType.IN_PROGRESS);
    }
    static waiting() {
        return new TaskStatus(TaskStatusType.WAITING);
    }
    static done() {
        return new TaskStatus(TaskStatusType.DONE);
    }
    static cancelled() {
        return new TaskStatus(TaskStatusType.CANCELLED);
    }
    getStatus() {
        return this.status;
    }
    toString() {
        return this.status;
    }
    equals(other) {
        return this.status === other.status;
    }
    /**
     * Checks if transition to another status is valid
     */
    canTransitionTo(newStatus) {
        const validTransitions = {
            [TaskStatusType.TODO]: [
                TaskStatusType.IN_PROGRESS,
                TaskStatusType.WAITING,
                TaskStatusType.DONE,
                TaskStatusType.CANCELLED,
            ],
            [TaskStatusType.IN_PROGRESS]: [
                TaskStatusType.TODO,
                TaskStatusType.WAITING,
                TaskStatusType.DONE,
                TaskStatusType.CANCELLED,
            ],
            [TaskStatusType.WAITING]: [
                TaskStatusType.TODO,
                TaskStatusType.IN_PROGRESS,
                TaskStatusType.DONE,
                TaskStatusType.CANCELLED,
            ],
            [TaskStatusType.DONE]: [TaskStatusType.TODO],
            [TaskStatusType.CANCELLED]: [TaskStatusType.TODO], // Can reactivate cancelled tasks
        };
        return validTransitions[this.status].includes(newStatus.status);
    }
    /**
     * Returns if the task is in an active state (not done or cancelled)
     */
    isActive() {
        return (this.status === TaskStatusType.TODO ||
            this.status === TaskStatusType.IN_PROGRESS ||
            this.status === TaskStatusType.WAITING);
    }
    /**
     * Returns if the task is completed
     */
    isCompleted() {
        return this.status === TaskStatusType.DONE;
    }
    /**
     * Returns if the task is cancelled
     */
    isCancelled() {
        return this.status === TaskStatusType.CANCELLED;
    }
    /**
     * Returns if the task is in progress
     */
    isInProgress() {
        return this.status === TaskStatusType.IN_PROGRESS;
    }
    /**
     * Returns markdown checkbox representation
     */
    toMarkdownCheckbox() {
        switch (this.status) {
            case TaskStatusType.TODO:
                return "- [ ]";
            case TaskStatusType.IN_PROGRESS:
                return "- [/]";
            case TaskStatusType.WAITING:
                return "- [-]";
            case TaskStatusType.DONE:
                return "- [x]";
            case TaskStatusType.CANCELLED:
                return "- [~]";
        }
    }
    /**
     * Creates TaskStatus from markdown checkbox
     */
    static fromMarkdownCheckbox(checkbox) {
        const trimmed = checkbox.trim();
        if (trimmed === "- [ ]")
            return Result_1.Result.ok(TaskStatus.todo());
        if (trimmed === "- [/]")
            return Result_1.Result.ok(TaskStatus.inProgress());
        if (trimmed === "- [-]")
            return Result_1.Result.ok(TaskStatus.waiting());
        if (trimmed === "- [x]" || trimmed === "- [X]")
            return Result_1.Result.ok(TaskStatus.done());
        if (trimmed === "- [~]")
            return Result_1.Result.ok(TaskStatus.cancelled());
        return Result_1.Result.fail("Invalid markdown checkbox format");
    }
}
exports.TaskStatus = TaskStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,