{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/TaskStatus.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/TaskStatus.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\n\nexport enum TaskStatusType {\n  TODO = \"todo\",\n  IN_PROGRESS = \"in-progress\",\n  WAITING = \"waiting\",\n  DONE = \"done\",\n  CANCELLED = \"cancelled\",\n}\n\n/**\n * Value object representing task status\n * Immutable and self-validating with state transition rules\n */\nexport class TaskStatus {\n  private readonly status: TaskStatusType;\n\n  private constructor(status: TaskStatusType) {\n    this.status = status;\n  }\n\n  static create(value: string | TaskStatusType): Result<TaskStatus> {\n    if (!value) {\n      return Result.fail<TaskStatus>(\"TaskStatus cannot be empty\");\n    }\n\n    const normalizedValue =\n      typeof value === \"string\" ? value.toLowerCase().replace(\"_\", \"-\") : value;\n\n    if (\n      !Object.values(TaskStatusType).includes(normalizedValue as TaskStatusType)\n    ) {\n      return Result.fail<TaskStatus>(\n        \"TaskStatus must be one of: todo, in-progress, waiting, done, cancelled\",\n      );\n    }\n\n    return Result.ok<TaskStatus>(\n      new TaskStatus(normalizedValue as TaskStatusType),\n    );\n  }\n\n  static todo(): TaskStatus {\n    return new TaskStatus(TaskStatusType.TODO);\n  }\n\n  static inProgress(): TaskStatus {\n    return new TaskStatus(TaskStatusType.IN_PROGRESS);\n  }\n\n  static waiting(): TaskStatus {\n    return new TaskStatus(TaskStatusType.WAITING);\n  }\n\n  static done(): TaskStatus {\n    return new TaskStatus(TaskStatusType.DONE);\n  }\n\n  static cancelled(): TaskStatus {\n    return new TaskStatus(TaskStatusType.CANCELLED);\n  }\n\n  getStatus(): TaskStatusType {\n    return this.status;\n  }\n\n  toString(): string {\n    return this.status;\n  }\n\n  equals(other: TaskStatus): boolean {\n    return this.status === other.status;\n  }\n\n  /**\n   * Checks if transition to another status is valid\n   */\n  canTransitionTo(newStatus: TaskStatus): boolean {\n    const validTransitions: Record<TaskStatusType, TaskStatusType[]> = {\n      [TaskStatusType.TODO]: [\n        TaskStatusType.IN_PROGRESS,\n        TaskStatusType.WAITING,\n        TaskStatusType.DONE,\n        TaskStatusType.CANCELLED,\n      ],\n      [TaskStatusType.IN_PROGRESS]: [\n        TaskStatusType.TODO,\n        TaskStatusType.WAITING,\n        TaskStatusType.DONE,\n        TaskStatusType.CANCELLED,\n      ],\n      [TaskStatusType.WAITING]: [\n        TaskStatusType.TODO,\n        TaskStatusType.IN_PROGRESS,\n        TaskStatusType.DONE,\n        TaskStatusType.CANCELLED,\n      ],\n      [TaskStatusType.DONE]: [TaskStatusType.TODO], // Can reopen completed tasks\n      [TaskStatusType.CANCELLED]: [TaskStatusType.TODO], // Can reactivate cancelled tasks\n    };\n\n    return validTransitions[this.status].includes(newStatus.status);\n  }\n\n  /**\n   * Returns if the task is in an active state (not done or cancelled)\n   */\n  isActive(): boolean {\n    return (\n      this.status === TaskStatusType.TODO ||\n      this.status === TaskStatusType.IN_PROGRESS ||\n      this.status === TaskStatusType.WAITING\n    );\n  }\n\n  /**\n   * Returns if the task is completed\n   */\n  isCompleted(): boolean {\n    return this.status === TaskStatusType.DONE;\n  }\n\n  /**\n   * Returns if the task is cancelled\n   */\n  isCancelled(): boolean {\n    return this.status === TaskStatusType.CANCELLED;\n  }\n\n  /**\n   * Returns if the task is in progress\n   */\n  isInProgress(): boolean {\n    return this.status === TaskStatusType.IN_PROGRESS;\n  }\n\n  /**\n   * Returns markdown checkbox representation\n   */\n  toMarkdownCheckbox(): string {\n    switch (this.status) {\n      case TaskStatusType.TODO:\n        return \"- [ ]\";\n      case TaskStatusType.IN_PROGRESS:\n        return \"- [/]\";\n      case TaskStatusType.WAITING:\n        return \"- [-]\";\n      case TaskStatusType.DONE:\n        return \"- [x]\";\n      case TaskStatusType.CANCELLED:\n        return \"- [~]\";\n    }\n  }\n\n  /**\n   * Creates TaskStatus from markdown checkbox\n   */\n  static fromMarkdownCheckbox(checkbox: string): Result<TaskStatus> {\n    const trimmed = checkbox.trim();\n\n    if (trimmed === \"- [ ]\") return Result.ok(TaskStatus.todo());\n    if (trimmed === \"- [/]\") return Result.ok(TaskStatus.inProgress());\n    if (trimmed === \"- [-]\") return Result.ok(TaskStatus.waiting());\n    if (trimmed === \"- [x]\" || trimmed === \"- [X]\")\n      return Result.ok(TaskStatus.done());\n    if (trimmed === \"- [~]\") return Result.ok(TaskStatus.cancelled());\n\n    return Result.fail<TaskStatus>(\"Invalid markdown checkbox format\");\n  }\n}\n"],"version":3}