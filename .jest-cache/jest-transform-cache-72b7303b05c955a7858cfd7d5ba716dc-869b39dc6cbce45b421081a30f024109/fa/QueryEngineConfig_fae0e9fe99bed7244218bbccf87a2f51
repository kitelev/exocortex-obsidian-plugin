3a8d229f5b360192a31671baa8e9a517
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryEngineConfig = void 0;
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
/**
 * Query Engine Configuration Entity
 * Manages preferences and settings for query engine selection
 */
class QueryEngineConfig extends Entity_1.Entity {
    constructor(props) {
        super(props, props.id);
    }
    generateId() {
        return this.props.id;
    }
    validate() {
        if (!this.props.id || this.props.id.trim().length === 0) {
            throw new Error("QueryEngineConfig must have a valid ID");
        }
        if (!this.props.preferredEngine) {
            throw new Error("QueryEngineConfig must have a preferred engine");
        }
        if (this.props.cacheTimeout && this.props.cacheTimeout <= 0) {
            throw new Error("Cache timeout must be positive");
        }
        if (this.props.maxCacheSize && this.props.maxCacheSize <= 0) {
            throw new Error("Max cache size must be positive");
        }
    }
    static create(props) {
        if (!props.id || props.id.trim().length === 0) {
            return Result_1.Result.fail("Config ID is required");
        }
        if (!props.preferredEngine) {
            return Result_1.Result.fail("Preferred engine is required");
        }
        // Set reasonable defaults
        const configProps = {
            ...props,
            autoDetect: props.autoDetect ?? true,
            enableCache: props.enableCache ?? true,
            cacheTimeout: props.cacheTimeout ?? 30,
            maxCacheSize: props.maxCacheSize ?? 100,
        };
        return Result_1.Result.ok(new QueryEngineConfig(configProps));
    }
    static createDefault() {
        return QueryEngineConfig.create({
            id: "default",
            preferredEngine: "dataview",
            fallbackEngine: "datacore",
            autoDetect: true,
            enableCache: true,
            cacheTimeout: 30,
            maxCacheSize: 100,
        });
    }
    get id() {
        return this.props.id;
    }
    get preferredEngine() {
        return this.props.preferredEngine;
    }
    get fallbackEngine() {
        return this.props.fallbackEngine;
    }
    get autoDetect() {
        return this.props.autoDetect;
    }
    get enableCache() {
        return this.props.enableCache;
    }
    get cacheTimeout() {
        return this.props.cacheTimeout ?? 30;
    }
    get maxCacheSize() {
        return this.props.maxCacheSize ?? 100;
    }
    updatePreferredEngine(engine) {
        this.props.preferredEngine = engine;
        return Result_1.Result.ok();
    }
    updateFallbackEngine(engine) {
        this.props.fallbackEngine = engine;
        return Result_1.Result.ok();
    }
    toggleAutoDetect() {
        this.props.autoDetect = !this.props.autoDetect;
    }
    toggleCache() {
        this.props.enableCache = !this.props.enableCache;
    }
    updateCacheSettings(timeout, maxSize) {
        if (timeout < 1) {
            return Result_1.Result.fail("Cache timeout must be at least 1 minute");
        }
        if (maxSize < 1) {
            return Result_1.Result.fail("Max cache size must be at least 1");
        }
        this.props.cacheTimeout = timeout;
        this.props.maxCacheSize = maxSize;
        return Result_1.Result.ok();
    }
}
exports.QueryEngineConfig = QueryEngineConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,