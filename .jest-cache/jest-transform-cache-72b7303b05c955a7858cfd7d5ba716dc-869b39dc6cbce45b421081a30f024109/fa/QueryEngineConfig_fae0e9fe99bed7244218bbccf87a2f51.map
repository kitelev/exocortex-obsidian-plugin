{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/QueryEngineConfig.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/QueryEngineConfig.ts"],"sourcesContent":["import { Entity } from \"../core/Entity\";\nimport { Result } from \"../core/Result\";\nimport { QueryEngineType } from \"../ports/IQueryEngine\";\n\nexport interface QueryEngineConfigProps {\n  id: string;\n  preferredEngine: QueryEngineType;\n  fallbackEngine?: QueryEngineType;\n  autoDetect: boolean;\n  enableCache: boolean;\n  cacheTimeout?: number; // minutes\n  maxCacheSize?: number; // number of cached results\n}\n\n/**\n * Query Engine Configuration Entity\n * Manages preferences and settings for query engine selection\n */\nexport class QueryEngineConfig extends Entity<QueryEngineConfigProps> {\n  private constructor(props: QueryEngineConfigProps) {\n    super(props, props.id);\n  }\n\n  protected generateId(): string {\n    return this.props.id;\n  }\n\n  protected validate(): void {\n    if (!this.props.id || this.props.id.trim().length === 0) {\n      throw new Error(\"QueryEngineConfig must have a valid ID\");\n    }\n\n    if (!this.props.preferredEngine) {\n      throw new Error(\"QueryEngineConfig must have a preferred engine\");\n    }\n\n    if (this.props.cacheTimeout && this.props.cacheTimeout <= 0) {\n      throw new Error(\"Cache timeout must be positive\");\n    }\n\n    if (this.props.maxCacheSize && this.props.maxCacheSize <= 0) {\n      throw new Error(\"Max cache size must be positive\");\n    }\n  }\n\n  public static create(\n    props: QueryEngineConfigProps,\n  ): Result<QueryEngineConfig> {\n    if (!props.id || props.id.trim().length === 0) {\n      return Result.fail<QueryEngineConfig>(\"Config ID is required\");\n    }\n\n    if (!props.preferredEngine) {\n      return Result.fail<QueryEngineConfig>(\"Preferred engine is required\");\n    }\n\n    // Set reasonable defaults\n    const configProps: QueryEngineConfigProps = {\n      ...props,\n      autoDetect: props.autoDetect ?? true,\n      enableCache: props.enableCache ?? true,\n      cacheTimeout: props.cacheTimeout ?? 30,\n      maxCacheSize: props.maxCacheSize ?? 100,\n    };\n\n    return Result.ok<QueryEngineConfig>(new QueryEngineConfig(configProps));\n  }\n\n  public static createDefault(): Result<QueryEngineConfig> {\n    return QueryEngineConfig.create({\n      id: \"default\",\n      preferredEngine: \"dataview\",\n      fallbackEngine: \"datacore\",\n      autoDetect: true,\n      enableCache: true,\n      cacheTimeout: 30,\n      maxCacheSize: 100,\n    });\n  }\n\n  get id(): string {\n    return this.props.id;\n  }\n\n  get preferredEngine(): QueryEngineType {\n    return this.props.preferredEngine;\n  }\n\n  get fallbackEngine(): QueryEngineType | undefined {\n    return this.props.fallbackEngine;\n  }\n\n  get autoDetect(): boolean {\n    return this.props.autoDetect;\n  }\n\n  get enableCache(): boolean {\n    return this.props.enableCache;\n  }\n\n  get cacheTimeout(): number {\n    return this.props.cacheTimeout ?? 30;\n  }\n\n  get maxCacheSize(): number {\n    return this.props.maxCacheSize ?? 100;\n  }\n\n  public updatePreferredEngine(engine: QueryEngineType): Result<void> {\n    this.props.preferredEngine = engine;\n    return Result.ok<void>();\n  }\n\n  public updateFallbackEngine(engine?: QueryEngineType): Result<void> {\n    this.props.fallbackEngine = engine;\n    return Result.ok<void>();\n  }\n\n  public toggleAutoDetect(): void {\n    this.props.autoDetect = !this.props.autoDetect;\n  }\n\n  public toggleCache(): void {\n    this.props.enableCache = !this.props.enableCache;\n  }\n\n  public updateCacheSettings(timeout: number, maxSize: number): Result<void> {\n    if (timeout < 1) {\n      return Result.fail<void>(\"Cache timeout must be at least 1 minute\");\n    }\n\n    if (maxSize < 1) {\n      return Result.fail<void>(\"Max cache size must be at least 1\");\n    }\n\n    this.props.cacheTimeout = timeout;\n    this.props.maxCacheSize = maxSize;\n    return Result.ok<void>();\n  }\n}\n"],"version":3}