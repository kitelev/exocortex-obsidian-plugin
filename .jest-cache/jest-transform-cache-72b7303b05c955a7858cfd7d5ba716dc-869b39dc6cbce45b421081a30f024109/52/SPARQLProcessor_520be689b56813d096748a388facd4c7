89369a9745cf3b814d17f61e42d06e86
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPARQLProcessor = void 0;
const obsidian_1 = require("obsidian");
const SPARQLEngine_1 = require("../../application/SPARQLEngine");
const ExportRDFModal_1 = require("../modals/ExportRDFModal");
const SPARQLSanitizer_1 = require("../../application/services/SPARQLSanitizer");
const DIContainer_1 = require("../../infrastructure/container/DIContainer");
class SPARQLProcessor {
    constructor(plugin, graph, focusService, cacheConfig) {
        this.plugin = plugin;
        this.graph = graph;
        this.engine = new SPARQLEngine_1.SPARQLEngine(graph, cacheConfig);
        this.focusService = focusService;
        // Get RDFService from DI container
        const container = DIContainer_1.DIContainer.getInstance();
        this.rdfService = container.resolve("RDFService");
        this.sanitizer = new SPARQLSanitizer_1.SPARQLSanitizer();
    }
    /**
     * Main processor method called by Obsidian
     */
    async processCodeBlock(source, el, ctx) {
        el.empty();
        // Create main container for UI tests
        const container = document.createElement("div");
        container.className = "exocortex-sparql-container";
        container.style.cssText =
            "border: 1px solid #e0e0e0; padding: 1em; margin: 1em 0; border-radius: 4px; background: #fafafa;";
        el.appendChild(container);
        try {
            // Show loading indicator
            const loadingEl = this.createLoadingIndicator();
            container.appendChild(loadingEl);
            // Execute query
            const startTime = Date.now();
            const result = await this.executeQuery(source.trim());
            const executionTime = Date.now() - startTime;
            // Remove loading indicator
            loadingEl.remove();
            // Add query title
            const title = document.createElement("h3");
            title.textContent = "SPARQL Query Results";
            title.style.cssText = "margin-top: 0; color: #333;";
            container.appendChild(title);
            // Add query display
            const queryPre = document.createElement("pre");
            queryPre.textContent = source.trim();
            queryPre.style.cssText =
                "background: #f5f5f5; padding: 0.5em; border-radius: 3px; font-size: 0.9em; overflow-x: auto;";
            container.appendChild(queryPre);
            // Add cache status indicator
            if (result.cached) {
                const cacheIndicator = this.createCacheIndicator(result.cached);
                container.appendChild(cacheIndicator);
            }
            // Display results
            if (!result.results || result.results.length === 0) {
                const emptyMessage = document.createElement("div");
                emptyMessage.className = "sparql-empty-result";
                emptyMessage.textContent = "No results found";
                emptyMessage.style.cssText =
                    "padding: 1em; text-align: center; color: #666;";
                container.appendChild(emptyMessage);
            }
            else {
                const table = this.createResultTable(result.results);
                container.appendChild(table);
                // Add export controls
                const exportControls = this.createExportControls(result.results, source.trim());
                container.appendChild(exportControls);
                // Add stats with cache information
                const stats = this.createStatsElement(result.results.length, executionTime, result.cached);
                container.appendChild(stats);
            }
        }
        catch (error) {
            container.innerHTML = "";
            const errorEl = this.createErrorMessage(error);
            container.appendChild(errorEl);
            // SPARQL execution error
        }
    }
    async executeQuery(sparql) {
        // Basic query validation
        if (!sparql || sparql.trim().length === 0) {
            throw new Error("Empty query");
        }
        // Sanitize query for security
        const sanitizationResult = this.sanitizer.sanitize(sparql);
        if (sanitizationResult.isFailure) {
            throw new Error(`Query validation failed: ${sanitizationResult.errorValue()}`);
        }
        const sanitized = sanitizationResult.getValue();
        if (sanitized.warnings.length > 0) {
            // SPARQL query has warnings
            new obsidian_1.Notice(`Query executed with warnings: ${sanitized.warnings[0]}`);
        }
        const safeQuery = sanitized.query;
        const upperQuery = safeQuery.toUpperCase();
        // Check query type
        if (upperQuery.includes("CONSTRUCT")) {
            // Execute CONSTRUCT query
            const result = this.engine.construct(safeQuery);
            // Add generated triples to graph (only if not cached to avoid duplicates)
            if (!result.cached) {
                for (const triple of result.triples) {
                    this.graph.add(triple);
                }
            }
            // Show notification
            const cacheInfo = result.cached ? " (cached)" : "";
            new obsidian_1.Notice(`Generated ${result.triples.length} new triples${cacheInfo}`);
            // Return triples as results for display
            return {
                results: result.triples.map((t) => ({
                    subject: t.getSubject().toString(),
                    predicate: t.getPredicate().toString(),
                    object: t.getObject().toString(),
                    provenance: result.provenance,
                })),
                cached: result.cached,
            };
        }
        else if (upperQuery.includes("SELECT")) {
            // Execute SELECT query
            const selectResult = this.engine.select(safeQuery);
            let results = selectResult.results;
            // Apply ExoFocus filtering if available
            if (this.focusService) {
                results = this.focusService.filterSPARQLResults(results);
            }
            return {
                results,
                cached: selectResult.cached,
            };
        }
        else {
            throw new Error("Only SELECT and CONSTRUCT queries are currently supported");
        }
    }
    createResultTable(results) {
        const table = document.createElement("table");
        table.className = "sparql-results-table";
        if (results.length === 0) {
            return table;
        }
        // Get column names from first result
        const columns = Object.keys(results[0]);
        // Create header
        const thead = table.createTHead();
        const headerRow = thead.insertRow();
        for (const column of columns) {
            const th = document.createElement("th");
            th.textContent = column;
            headerRow.appendChild(th);
        }
        // Create body
        const tbody = table.createTBody();
        for (const row of results) {
            const tr = tbody.insertRow();
            for (const column of columns) {
                const td = tr.insertCell();
                const value = row[column];
                if (this.isNoteLink(value)) {
                    const link = this.createNoteLink(value);
                    td.appendChild(link);
                }
                else {
                    td.textContent = value || "";
                }
            }
        }
        return table;
    }
    isNoteLink(value) {
        if (typeof value !== "string")
            return false;
        return value.startsWith("file://") || value.includes("/");
    }
    createNoteLink(uri) {
        const link = document.createElement("a");
        link.className = "internal-link";
        // Extract note name from URI
        const noteName = uri.replace("file://", "").split("/").pop() || uri;
        link.textContent = noteName;
        link.addEventListener("click", (e) => {
            e.preventDefault();
            this.plugin.app.workspace.openLinkText(noteName, "");
        });
        return link;
    }
    createLoadingIndicator() {
        const loading = document.createElement("div");
        loading.className = "sparql-loading";
        loading.textContent = "Executing query...";
        return loading;
    }
    createErrorMessage(error) {
        const errorDiv = document.createElement("div");
        errorDiv.className = "sparql-error";
        errorDiv.style.cssText =
            "background: #ffebee; color: #c62828; padding: 1em; border-radius: 4px; border: 1px solid #ef5350;";
        const title = document.createElement("strong");
        title.textContent = "Query Error: ";
        errorDiv.appendChild(title);
        const message = document.createElement("span");
        message.textContent = error.message;
        errorDiv.appendChild(message);
        return errorDiv;
    }
    createStatsElement(count, time, cached) {
        const stats = document.createElement("div");
        stats.className = "sparql-stats";
        const cacheInfo = cached ? " (cached result)" : "";
        stats.textContent = `Executed in ${time}ms - ${count} results${cacheInfo}`;
        stats.style.cssText = "margin-top: 0.5em; color: #666; font-size: 0.9em;";
        return stats;
    }
    createCacheIndicator(cached) {
        const indicator = document.createElement("div");
        indicator.className = "sparql-cache-indicator";
        if (cached) {
            indicator.textContent = "ðŸ“‹ Cached Result";
            indicator.style.cssText =
                "background: #e8f5e8; color: #2e7d32; padding: 0.4em 0.8em; border-radius: 15px; font-size: 0.8em; display: inline-block; margin-bottom: 0.5em; border: 1px solid #c8e6c9;";
        }
        else {
            indicator.textContent = "ðŸ”„ Fresh Result";
            indicator.style.cssText =
                "background: #e3f2fd; color: #1565c0; padding: 0.4em 0.8em; border-radius: 15px; font-size: 0.8em; display: inline-block; margin-bottom: 0.5em; border: 1px solid #bbdefb;";
        }
        return indicator;
    }
    /**
     * Get cache statistics for display
     */
    getCacheStatistics() {
        return this.engine.getCacheStatistics();
    }
    /**
     * Invalidate all cached queries
     */
    invalidateCache() {
        this.engine.invalidateCache();
    }
    /**
     * Cleanup expired cache entries
     */
    cleanupCache() {
        return this.engine.cleanupCache();
    }
    /**
     * Update cache configuration
     */
    updateCacheConfig(config) {
        this.engine.updateCacheConfig(config);
    }
    /**
     * Destroy cache and cleanup resources
     */
    destroy() {
        this.engine.destroy();
    }
    /**
     * Create export controls for SPARQL results
     */
    createExportControls(results, query) {
        const exportContainer = document.createElement("div");
        exportContainer.className = "sparql-export-controls";
        exportContainer.style.cssText =
            "margin: 1em 0; padding: 0.8em; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px;";
        // Export label
        const label = document.createElement("span");
        label.textContent = "Export results: ";
        label.style.cssText = "margin-right: 0.5em; font-weight: 500;";
        exportContainer.appendChild(label);
        // Quick export buttons
        const formats = [
            { format: "turtle", label: "Turtle" },
            { format: "json-ld", label: "JSON-LD" },
            { format: "n-triples", label: "N-Triples" },
            { format: "rdf-xml", label: "RDF/XML" },
        ];
        for (const { format, label } of formats) {
            const button = document.createElement("button");
            button.textContent = label;
            button.className = "sparql-export-button";
            button.style.cssText =
                "margin: 0 0.3em; padding: 0.4em 0.8em; background: #007acc; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 0.85em;";
            button.addEventListener("mouseenter", () => {
                button.style.background = "#005a9e";
            });
            button.addEventListener("mouseleave", () => {
                button.style.background = "#007acc";
            });
            button.addEventListener("click", async (e) => {
                e.preventDefault();
                await this.exportQueryResults(results, format, query);
            });
            exportContainer.appendChild(button);
        }
        // Advanced export button
        const advancedButton = document.createElement("button");
        advancedButton.textContent = "Advanced...";
        advancedButton.className = "sparql-export-advanced";
        advancedButton.style.cssText =
            "margin-left: 1em; padding: 0.4em 0.8em; background: #6c757d; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 0.85em;";
        advancedButton.addEventListener("mouseenter", () => {
            advancedButton.style.background = "#545b62";
        });
        advancedButton.addEventListener("mouseleave", () => {
            advancedButton.style.background = "#6c757d";
        });
        advancedButton.addEventListener("click", (e) => {
            e.preventDefault();
            this.openAdvancedExportModal(results, query);
        });
        exportContainer.appendChild(advancedButton);
        return exportContainer;
    }
    /**
     * Export query results in specified format
     */
    async exportQueryResults(results, format, query) {
        try {
            const fileName = `sparql-results-${Date.now()}`;
            const result = await this.rdfService.exportQueryResults(results, format, fileName);
            if (result.isSuccess) {
                const exportData = result.getValue();
                new obsidian_1.Notice(`Exported ${exportData.tripleCount} triples as ${format.toUpperCase()}`);
            }
            else {
                new obsidian_1.Notice(`Export failed: ${result.errorValue()}`);
            }
        }
        catch (error) {
            new obsidian_1.Notice(`Export error: ${error.message}`);
            // SPARQL export error
        }
    }
    /**
     * Open advanced export modal for query results
     */
    openAdvancedExportModal(results, query) {
        try {
            // Convert query results to a graph for the export modal
            const resultsGraph = this.rdfService["convertQueryResultsToGraph"](results);
            const modal = new ExportRDFModal_1.ExportRDFModal(this.plugin.app, resultsGraph, this.rdfService.getNamespaceManager(), (result) => {
                // Add query metadata as comment
                const timestamp = new Date().toISOString();
                const metadata = `\n\n# Query executed at ${timestamp}\n# ${query.replace(/\n/g, "\n# ")}\n`;
                // You could save this enhanced content or provide additional processing
                new obsidian_1.Notice(`Advanced export completed: ${result.fileName}`);
            });
            modal.open();
        }
        catch (error) {
            new obsidian_1.Notice(`Failed to open export modal: ${error.message}`);
            // Export modal error
        }
    }
}
exports.SPARQLProcessor = SPARQLProcessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9wcm9jZXNzb3JzL1NQQVJRTFByb2Nlc3Nvci50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBNkU7QUFDN0UsaUVBSXdDO0FBS3hDLDZEQUEwRDtBQUUxRCxnRkFBNkU7QUFDN0UsNEVBQXlFO0FBRXpFLE1BQWEsZUFBZTtJQVExQixZQUNFLE1BQWMsRUFDZCxLQUFZLEVBQ1osWUFBOEIsRUFDOUIsV0FBdUM7UUFFdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLDJCQUFZLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLG1DQUFtQztRQUNuQyxNQUFNLFNBQVMsR0FBRyx5QkFBVyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBYSxZQUFZLENBQUMsQ0FBQztRQUM5RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksaUNBQWUsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxnQkFBZ0IsQ0FDcEIsTUFBYyxFQUNkLEVBQWUsRUFDZixHQUFpQztRQUVqQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFFWCxxQ0FBcUM7UUFDckMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxTQUFTLENBQUMsU0FBUyxHQUFHLDRCQUE0QixDQUFDO1FBQ25ELFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNyQixrR0FBa0csQ0FBQztRQUNyRyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FB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QUFDLENBQUM7WUFFekQsTUFBTSxLQUFLLEdBQUcsSUFBSSwrQkFBYyxDQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFDZixZQUFZLEVBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxFQUNyQyxDQUFDLE1BQU0sRUFBRSxFQUFFO2dCQUNULGdDQUFnQztnQkFDaEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDM0MsTUFBTSxRQUFRLEdBQUcsMkJBQTJCLFNBQVMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUU3Rix3RUFBd0U7Z0JBQ3hFLElBQUksaUJBQU0sQ0FBQyw4QkFBOEIsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDOUQsQ0FBQyxDQUNGLENBQUM7WUFFRixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDZDtRQUFDLE9BQU8sS0FBVSxFQUFFO1lBQ25CLElBQUksaUJBQU0sQ0FBQyxnQ0FBZ0MsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDNUQscUJBQXFCO1NBQ3RCO0lBQ0gsQ0FBQztDQUNGO0FBL2NELDBDQStjQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvcHJlc2VudGF0aW9uL3Byb2Nlc3NvcnMvU1BBUlFMUHJvY2Vzc29yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIFBsdWdpbiwgTm90aWNlLCBBcHAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7XG4gIFNQQVJRTEVuZ2luZSxcbiAgQ29uc3RydWN0UmVzdWx0LFxuICBTZWxlY3RSZXN1bHQsXG59IGZyb20gXCIuLi8uLi9hcHBsaWNhdGlvbi9TUEFSUUxFbmdpbmVcIjtcbmltcG9ydCB7IEdyYXBoIH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9zZW1hbnRpYy9jb3JlL0dyYXBoXCI7XG5pbXBvcnQgeyBFeG9Gb2N1c1NlcnZpY2UgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vc2VydmljZXMvRXhvRm9jdXNTZXJ2aWNlXCI7XG5pbXBvcnQgeyBRdWVyeUNhY2hlQ29uZmlnIH0gZnJvbSBcIi4uLy4uL2FwcGxpY2F0aW9uL3NlcnZpY2VzL1F1ZXJ5Q2FjaGVcIjtcbmltcG9ydCB7IFJERlNlcnZpY2UgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vc2VydmljZXMvUkRGU2VydmljZVwiO1xuaW1wb3J0IHsgRXhwb3J0UkRGTW9kYWwgfSBmcm9tIFwiLi4vbW9kYWxzL0V4cG9ydFJERk1vZGFsXCI7XG5pbXBvcnQgeyBSREZGb3JtYXQgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vc2VydmljZXMvUkRGU2VyaWFsaXplclwiO1xuaW1wb3J0IHsgU1BBUlFMU2FuaXRpemVyIH0gZnJvbSBcIi4uLy4uL2FwcGxpY2F0aW9uL3NlcnZpY2VzL1NQQVJRTFNhbml0aXplclwiO1xuaW1wb3J0IHsgRElDb250YWluZXIgfSBmcm9tIFwiLi4vLi4vaW5mcmFzdHJ1Y3R1cmUvY29udGFpbmVyL0RJQ29udGFpbmVyXCI7XG5cbmV4cG9ydCBjbGFzcyBTUEFSUUxQcm9jZXNzb3Ige1xuICBwcml2YXRlIHBsdWdpbjogUGx1Z2luO1xuICBwcml2YXRlIGVuZ2luZTogU1BBUlFMRW5naW5lO1xuICBwcml2YXRlIGdyYXBoOiBHcmFwaDtcbiAgcHJpdmF0ZSBmb2N1c1NlcnZpY2U/OiBFeG9Gb2N1c1NlcnZpY2U7XG4gIHByaXZhdGUgcmRmU2VydmljZTogUkRGU2VydmljZTtcbiAgcHJpdmF0ZSBzYW5pdGl6ZXI6IFNQQVJRTFNhbml0aXplcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwbHVnaW46IFBsdWdpbixcbiAgICBncmFwaDogR3JhcGgsXG4gICAgZm9jdXNTZXJ2aWNlPzogRXhvRm9jdXNTZXJ2aWNlLFxuICAgIGNhY2hlQ29uZmlnPzogUGFydGlhbDxRdWVyeUNhY2hlQ29uZmlnPixcbiAgKSB7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgdGhpcy5ncmFwaCA9IGdyYXBoO1xuICAgIHRoaXMuZW5naW5lID0gbmV3IFNQQVJRTEVuZ2luZShncmFwaCwgY2FjaGVDb25maWcpO1xuICAgIHRoaXMuZm9jdXNTZXJ2aWNlID0gZm9jdXNTZXJ2aWNlO1xuICAgIC8vIEdldCBSREZTZXJ2aWNlIGZyb20gREkgY29udGFpbmVyXG4gICAgY29uc3QgY29udGFpbmVyID0gRElDb250YWluZXIuZ2V0SW5zdGFuY2UoKTtcbiAgICB0aGlzLnJkZlNlcnZpY2UgPSBjb250YWluZXIucmVzb2x2ZTxSREZTZXJ2aWNlPihcIlJERlNlcnZpY2VcIik7XG4gICAgdGhpcy5zYW5pdGl6ZXIgPSBuZXcgU1BBUlFMU2FuaXRpemVyKCk7XG4gIH1cblxuICAvKipcbiAgICogTWFpbiBwcm9jZXNzb3IgbWV0aG9kIGNhbGxlZCBieSBPYnNpZGlhblxuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0NvZGVCbG9jayhcbiAgICBzb3VyY2U6IHN0cmluZyxcbiAgICBlbDogSFRNTEVsZW1lbnQsXG4gICAgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBlbC5lbXB0eSgpO1xuXG4gICAgLy8gQ3JlYXRlIG1haW4gY29udGFpbmVyIGZvciBVSSB0ZXN0c1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiZXhvY29ydGV4LXNwYXJxbC1jb250YWluZXJcIjtcbiAgICBjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9XG4gICAgICBcImJvcmRlcjogMXB4IHNvbGlkICNlMGUwZTA7IHBhZGRpbmc6IDFlbTsgbWFyZ2luOiAxZW0gMDsgYm9yZGVyLXJhZGl1czogNHB4OyBiYWNrZ3JvdW5kOiAjZmFmYWZhO1wiO1xuICAgIGVsLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG5cbiAgICB0cnkge1xuICAgICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRvclxuICAgICAgY29uc3QgbG9hZGluZ0VsID0gdGhpcy5jcmVhdGVMb2FkaW5nSW5kaWNhdG9yKCk7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQobG9hZGluZ0VsKTtcblxuICAgICAgLy8gRXhlY3V0ZSBxdWVyeVxuICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZVF1ZXJ5KHNvdXJjZS50cmltKCkpO1xuICAgICAgY29uc3QgZXhlY3V0aW9uVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIC8vIFJlbW92ZSBsb2FkaW5nIGluZGljYXRvclxuICAgICAgbG9hZGluZ0VsLnJlbW92ZSgpO1xuXG4gICAgICAvLyBBZGQgcXVlcnkgdGl0bGVcbiAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgICAgdGl0bGUudGV4dENvbnRlbnQgPSBcIlNQQVJRTCBRdWVyeSBSZXN1bHRzXCI7XG4gICAgICB0aXRsZS5zdHlsZS5jc3NUZXh0ID0gXCJtYXJnaW4tdG9wOiAwOyBjb2xvcjogIzMzMztcIjtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXRsZSk7XG5cbiAgICAgIC8vIEFkZCBxdWVyeSBkaXNwbGF5XG4gICAgICBjb25zdCBxdWVyeVByZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwcmVcIik7XG4gICAgICBxdWVyeVByZS50ZXh0Q29udGVudCA9IHNvdXJjZS50cmltKCk7XG4gICAgICBxdWVyeVByZS5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgXCJiYWNrZ3JvdW5kOiAjZjVmNWY1OyBwYWRkaW5nOiAwLjVlbTsgYm9yZGVyLXJhZGl1czogM3B4OyBmb250LXNpemU6IDAuOWVtOyBvdmVyZmxvdy14OiBhdXRvO1wiO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHF1ZXJ5UHJlKTtcblxuICAgICAgLy8gQWRkIGNhY2hlIHN0YXR1cyBpbmRpY2F0b3JcbiAgICAgIGlmIChyZXN1bHQuY2FjaGVkKSB7XG4gICAgICAgIGNvbnN0IGNhY2hlSW5kaWNhdG9yID0gdGhpcy5jcmVhdGVDYWNoZUluZGljYXRvcihyZXN1bHQuY2FjaGVkKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNhY2hlSW5kaWNhdG9yKTtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzcGxheSByZXN1bHRzXG4gICAgICBpZiAoIXJlc3VsdC5yZXN1bHRzIHx8IHJlc3VsdC5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBjb25zdCBlbXB0eU1lc3NhZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBlbXB0eU1lc3NhZ2UuY2xhc3NOYW1lID0gXCJzcGFycWwtZW1wdHktcmVzdWx0XCI7XG4gICAgICAgIGVtcHR5TWVzc2FnZS50ZXh0Q29udGVudCA9IFwiTm8gcmVzdWx0cyBmb3VuZFwiO1xuICAgICAgICBlbXB0eU1lc3NhZ2Uuc3R5bGUuY3NzVGV4dCA9XG4gICAgICAgICAgXCJwYWRkaW5nOiAxZW07IHRleHQtYWxpZ246IGNlbnRlcjsgY29sb3I6ICM2NjY7XCI7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbXB0eU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdGFibGUgPSB0aGlzLmNyZWF0ZVJlc3VsdFRhYmxlKHJlc3VsdC5yZXN1bHRzKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRhYmxlKTtcblxuICAgICAgICAvLyBBZGQgZXhwb3J0IGNvbnRyb2xzXG4gICAgICAgIGNvbnN0IGV4cG9ydENvbnRyb2xzID0gdGhpcy5jcmVhdGVFeHBvcnRDb250cm9scyhcbiAgICAgICAgICByZXN1bHQucmVzdWx0cyxcbiAgICAgICAgICBzb3VyY2UudHJpbSgpLFxuICAgICAgICApO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZXhwb3J0Q29udHJvbHMpO1xuXG4gICAgICAgIC8vIEFkZCBzdGF0cyB3aXRoIGNhY2hlIGluZm9ybWF0aW9uXG4gICAgICAgIGNvbnN0IHN0YXRzID0gdGhpcy5jcmVhdGVTdGF0c0VsZW1lbnQoXG4gICAgICAgICAgcmVzdWx0LnJlc3VsdHMubGVuZ3RoLFxuICAgICAgICAgIGV4ZWN1dGlvblRpbWUsXG4gICAgICAgICAgcmVzdWx0LmNhY2hlZCxcbiAgICAgICAgKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHN0YXRzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgIGNvbnN0IGVycm9yRWwgPSB0aGlzLmNyZWF0ZUVycm9yTWVzc2FnZShlcnJvcik7XG4gICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoZXJyb3JFbCk7XG4gICAgICAvLyBTUEFSUUwgZXhlY3V0aW9uIGVycm9yXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGV4ZWN1dGVRdWVyeShcbiAgICBzcGFycWw6IHN0cmluZyxcbiAgKTogUHJvbWlzZTx7IHJlc3VsdHM6IGFueVtdOyBjYWNoZWQ/OiBib29sZWFuIH0+IHtcbiAgICAvLyBCYXNpYyBxdWVyeSB2YWxpZGF0aW9uXG4gICAgaWYgKCFzcGFycWwgfHwgc3BhcnFsLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVtcHR5IHF1ZXJ5XCIpO1xuICAgIH1cblxuICAgIC8vIFNhbml0aXplIHF1ZXJ5IGZvciBzZWN1cml0eVxuICAgIGNvbnN0IHNhbml0aXphdGlvblJlc3VsdCA9IHRoaXMuc2FuaXRpemVyLnNhbml0aXplKHNwYXJxbCk7XG4gICAgaWYgKHNhbml0aXphdGlvblJlc3VsdC5pc0ZhaWx1cmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFF1ZXJ5IHZhbGlkYXRpb24gZmFpbGVkOiAke3Nhbml0aXphdGlvblJlc3VsdC5lcnJvclZhbHVlKCl9YCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2FuaXRpemVkID0gc2FuaXRpemF0aW9uUmVzdWx0LmdldFZhbHVlKCk7XG4gICAgaWYgKHNhbml0aXplZC53YXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBTUEFSUUwgcXVlcnkgaGFzIHdhcm5pbmdzXG4gICAgICBuZXcgTm90aWNlKGBRdWVyeSBleGVjdXRlZCB3aXRoIHdhcm5pbmdzOiAke3Nhbml0aXplZC53YXJuaW5nc1swXX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBzYWZlUXVlcnkgPSBzYW5pdGl6ZWQucXVlcnk7XG4gICAgY29uc3QgdXBwZXJRdWVyeSA9IHNhZmVRdWVyeS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gQ2hlY2sgcXVlcnkgdHlwZVxuICAgIGlmICh1cHBlclF1ZXJ5LmluY2x1ZGVzKFwiQ09OU1RSVUNUXCIpKSB7XG4gICAgICAvLyBFeGVjdXRlIENPTlNUUlVDVCBxdWVyeVxuICAgICAgY29uc3QgcmVzdWx0OiBDb25zdHJ1Y3RSZXN1bHQgPSB0aGlzLmVuZ2luZS5jb25zdHJ1Y3Qoc2FmZVF1ZXJ5KTtcblxuICAgICAgLy8gQWRkIGdlbmVyYXRlZCB0cmlwbGVzIHRvIGdyYXBoIChvbmx5IGlmIG5vdCBjYWNoZWQgdG8gYXZvaWQgZHVwbGljYXRlcylcbiAgICAgIGlmICghcmVzdWx0LmNhY2hlZCkge1xuICAgICAgICBmb3IgKGNvbnN0IHRyaXBsZSBvZiByZXN1bHQudHJpcGxlcykge1xuICAgICAgICAgIHRoaXMuZ3JhcGguYWRkKHRyaXBsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2hvdyBub3RpZmljYXRpb25cbiAgICAgIGNvbnN0IGNhY2hlSW5mbyA9IHJlc3VsdC5jYWNoZWQgPyBcIiAoY2FjaGVkKVwiIDogXCJcIjtcbiAgICAgIG5ldyBOb3RpY2UoYEdlbmVyYXRlZCAke3Jlc3VsdC50cmlwbGVzLmxlbmd0aH0gbmV3IHRyaXBsZXMke2NhY2hlSW5mb31gKTtcblxuICAgICAgLy8gUmV0dXJuIHRyaXBsZXMgYXMgcmVzdWx0cyBmb3IgZGlzcGxheVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0czogcmVzdWx0LnRyaXBsZXMubWFwKCh0KSA9PiAoe1xuICAgICAgICAgIHN1YmplY3Q6IHQuZ2V0U3ViamVjdCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgcHJlZGljYXRlOiB0LmdldFByZWRpY2F0ZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgb2JqZWN0OiB0LmdldE9iamVjdCgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgcHJvdmVuYW5jZTogcmVzdWx0LnByb3ZlbmFuY2UsXG4gICAgICAgIH0pKSxcbiAgICAgICAgY2FjaGVkOiByZXN1bHQuY2FjaGVkLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHVwcGVyUXVlcnkuaW5jbHVkZXMoXCJTRUxFQ1RcIikpIHtcbiAgICAgIC8vIEV4ZWN1dGUgU0VMRUNUIHF1ZXJ5XG4gICAgICBjb25zdCBzZWxlY3RSZXN1bHQ6IFNlbGVjdFJlc3VsdCA9IHRoaXMuZW5naW5lLnNlbGVjdChzYWZlUXVlcnkpO1xuICAgICAgbGV0IHJlc3VsdHMgPSBzZWxlY3RSZXN1bHQucmVzdWx0cztcblxuICAgICAgLy8gQXBwbHkgRXhvRm9jdXMgZmlsdGVyaW5nIGlmIGF2YWlsYWJsZVxuICAgICAgaWYgKHRoaXMuZm9jdXNTZXJ2aWNlKSB7XG4gICAgICAgIHJlc3VsdHMgPSB0aGlzLmZvY3VzU2VydmljZS5maWx0ZXJTUEFSUUxSZXN1bHRzKHJlc3VsdHMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHRzLFxuICAgICAgICBjYWNoZWQ6IHNlbGVjdFJlc3VsdC5jYWNoZWQsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiT25seSBTRUxFQ1QgYW5kIENPTlNUUlVDVCBxdWVyaWVzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkXCIsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVSZXN1bHRUYWJsZShyZXN1bHRzOiBhbnlbXSk6IEhUTUxUYWJsZUVsZW1lbnQge1xuICAgIGNvbnN0IHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xuICAgIHRhYmxlLmNsYXNzTmFtZSA9IFwic3BhcnFsLXJlc3VsdHMtdGFibGVcIjtcblxuICAgIGlmIChyZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cblxuICAgIC8vIEdldCBjb2x1bW4gbmFtZXMgZnJvbSBmaXJzdCByZXN1bHRcbiAgICBjb25zdCBjb2x1bW5zID0gT2JqZWN0LmtleXMocmVzdWx0c1swXSk7XG5cbiAgICAvLyBDcmVhdGUgaGVhZGVyXG4gICAgY29uc3QgdGhlYWQgPSB0YWJsZS5jcmVhdGVUSGVhZCgpO1xuICAgIGNvbnN0IGhlYWRlclJvdyA9IHRoZWFkLmluc2VydFJvdygpO1xuXG4gICAgZm9yIChjb25zdCBjb2x1bW4gb2YgY29sdW1ucykge1xuICAgICAgY29uc3QgdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XG4gICAgICB0aC50ZXh0Q29udGVudCA9IGNvbHVtbjtcbiAgICAgIGhlYWRlclJvdy5hcHBlbmRDaGlsZCh0aCk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGJvZHlcbiAgICBjb25zdCB0Ym9keSA9IHRhYmxlLmNyZWF0ZVRCb2R5KCk7XG5cbiAgICBmb3IgKGNvbnN0IHJvdyBvZiByZXN1bHRzKSB7XG4gICAgICBjb25zdCB0ciA9IHRib2R5Lmluc2VydFJvdygpO1xuXG4gICAgICBmb3IgKGNvbnN0IGNvbHVtbiBvZiBjb2x1bW5zKSB7XG4gICAgICAgIGNvbnN0IHRkID0gdHIuaW5zZXJ0Q2VsbCgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHJvd1tjb2x1bW5dO1xuXG4gICAgICAgIGlmICh0aGlzLmlzTm90ZUxpbmsodmFsdWUpKSB7XG4gICAgICAgICAgY29uc3QgbGluayA9IHRoaXMuY3JlYXRlTm90ZUxpbmsodmFsdWUpO1xuICAgICAgICAgIHRkLmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRkLnRleHRDb250ZW50ID0gdmFsdWUgfHwgXCJcIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YWJsZTtcbiAgfVxuXG4gIHByaXZhdGUgaXNOb3RlTGluayh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB2YWx1ZS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSB8fCB2YWx1ZS5pbmNsdWRlcyhcIi9cIik7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU5vdGVMaW5rKHVyaTogc3RyaW5nKTogSFRNTEFuY2hvckVsZW1lbnQge1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsaW5rLmNsYXNzTmFtZSA9IFwiaW50ZXJuYWwtbGlua1wiO1xuXG4gICAgLy8gRXh0cmFjdCBub3RlIG5hbWUgZnJvbSBVUklcbiAgICBjb25zdCBub3RlTmFtZSA9IHVyaS5yZXBsYWNlKFwiZmlsZTovL1wiLCBcIlwiKS5zcGxpdChcIi9cIikucG9wKCkgfHwgdXJpO1xuICAgIGxpbmsudGV4dENvbnRlbnQgPSBub3RlTmFtZTtcblxuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChub3RlTmFtZSwgXCJcIik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGluaztcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVMb2FkaW5nSW5kaWNhdG9yKCk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBsb2FkaW5nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBsb2FkaW5nLmNsYXNzTmFtZSA9IFwic3BhcnFsLWxvYWRpbmdcIjtcbiAgICBsb2FkaW5nLnRleHRDb250ZW50ID0gXCJFeGVjdXRpbmcgcXVlcnkuLi5cIjtcbiAgICByZXR1cm4gbG9hZGluZztcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRXJyb3JNZXNzYWdlKGVycm9yOiBFcnJvcik6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZXJyb3JEaXYuY2xhc3NOYW1lID0gXCJzcGFycWwtZXJyb3JcIjtcbiAgICBlcnJvckRpdi5zdHlsZS5jc3NUZXh0ID1cbiAgICAgIFwiYmFja2dyb3VuZDogI2ZmZWJlZTsgY29sb3I6ICNjNjI4Mjg7IHBhZGRpbmc6IDFlbTsgYm9yZGVyLXJhZGl1czogNHB4OyBib3JkZXI6IDFweCBzb2xpZCAjZWY1MzUwO1wiO1xuXG4gICAgY29uc3QgdGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3Ryb25nXCIpO1xuICAgIHRpdGxlLnRleHRDb250ZW50ID0gXCJRdWVyeSBFcnJvcjogXCI7XG4gICAgZXJyb3JEaXYuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIG1lc3NhZ2UudGV4dENvbnRlbnQgPSBlcnJvci5tZXNzYWdlO1xuICAgIGVycm9yRGl2LmFwcGVuZENoaWxkKG1lc3NhZ2UpO1xuXG4gICAgcmV0dXJuIGVycm9yRGl2O1xuICB9XG5cbiAgcHJvdGVjdGVkIGNyZWF0ZVN0YXRzRWxlbWVudChcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIHRpbWU6IG51bWJlcixcbiAgICBjYWNoZWQ/OiBib29sZWFuLFxuICApOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3Qgc3RhdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHN0YXRzLmNsYXNzTmFtZSA9IFwic3BhcnFsLXN0YXRzXCI7XG4gICAgY29uc3QgY2FjaGVJbmZvID0gY2FjaGVkID8gXCIgKGNhY2hlZCByZXN1bHQpXCIgOiBcIlwiO1xuICAgIHN0YXRzLnRleHRDb250ZW50ID0gYEV4ZWN1dGVkIGluICR7dGltZX1tcyAtICR7Y291bnR9IHJlc3VsdHMke2NhY2hlSW5mb31gO1xuICAgIHN0YXRzLnN0eWxlLmNzc1RleHQgPSBcIm1hcmdpbi10b3A6IDAuNWVtOyBjb2xvcjogIzY2NjsgZm9udC1zaXplOiAwLjllbTtcIjtcbiAgICByZXR1cm4gc3RhdHM7XG4gIH1cblxuICBwcm90ZWN0ZWQgY3JlYXRlQ2FjaGVJbmRpY2F0b3IoY2FjaGVkOiBib29sZWFuKTogSFRNTEVsZW1lbnQge1xuICAgIGNvbnN0IGluZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgaW5kaWNhdG9yLmNsYXNzTmFtZSA9IFwic3BhcnFsLWNhY2hlLWluZGljYXRvclwiO1xuXG4gICAgaWYgKGNhY2hlZCkge1xuICAgICAgaW5kaWNhdG9yLnRleHRDb250ZW50ID0gXCLwn5OLIENhY2hlZCBSZXN1bHRcIjtcbiAgICAgIGluZGljYXRvci5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgXCJiYWNrZ3JvdW5kOiAjZThmNWU4OyBjb2xvcjogIzJlN2QzMjsgcGFkZGluZzogMC40ZW0gMC44ZW07IGJvcmRlci1yYWRpdXM6IDE1cHg7IGZvbnQtc2l6ZTogMC44ZW07IGRpc3BsYXk6IGlubGluZS1ibG9jazsgbWFyZ2luLWJvdHRvbTogMC41ZW07IGJvcmRlcjogMXB4IHNvbGlkICNjOGU2Yzk7XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGljYXRvci50ZXh0Q29udGVudCA9IFwi8J+UhCBGcmVzaCBSZXN1bHRcIjtcbiAgICAgIGluZGljYXRvci5zdHlsZS5jc3NUZXh0ID1cbiAgICAgICAgXCJiYWNrZ3JvdW5kOiAjZTNmMmZkOyBjb2xvcjogIzE1NjVjMDsgcGFkZGluZzogMC40ZW0gMC44ZW07IGJvcmRlci1yYWRpdXM6IDE1cHg7IGZvbnQtc2l6ZTogMC44ZW07IGRpc3BsYXk6IGlubGluZS1ibG9jazsgbWFyZ2luLWJvdHRvbTogMC41ZW07IGJvcmRlcjogMXB4IHNvbGlkICNiYmRlZmI7XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGljYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY2FjaGUgc3RhdGlzdGljcyBmb3IgZGlzcGxheVxuICAgKi9cbiAgZ2V0Q2FjaGVTdGF0aXN0aWNzKCkge1xuICAgIHJldHVybiB0aGlzLmVuZ2luZS5nZXRDYWNoZVN0YXRpc3RpY3MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZhbGlkYXRlIGFsbCBjYWNoZWQgcXVlcmllc1xuICAgKi9cbiAgaW52YWxpZGF0ZUNhY2hlKCk6IHZvaWQge1xuICAgIHRoaXMuZW5naW5lLmludmFsaWRhdGVDYWNoZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFudXAgZXhwaXJlZCBjYWNoZSBlbnRyaWVzXG4gICAqL1xuICBjbGVhbnVwQ2FjaGUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5lbmdpbmUuY2xlYW51cENhY2hlKCk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGNhY2hlIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHVwZGF0ZUNhY2hlQ29uZmlnKGNvbmZpZzogUGFydGlhbDxRdWVyeUNhY2hlQ29uZmlnPik6IHZvaWQge1xuICAgIHRoaXMuZW5naW5lLnVwZGF0ZUNhY2hlQ29uZmlnKGNvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBjYWNoZSBhbmQgY2xlYW51cCByZXNvdXJjZXNcbiAgICovXG4gIGRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5lbmdpbmUuZGVzdHJveSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBleHBvcnQgY29udHJvbHMgZm9yIFNQQVJRTCByZXN1bHRzXG4gICAqL1xuICBwcm90ZWN0ZWQgY3JlYXRlRXhwb3J0Q29udHJvbHMocmVzdWx0czogYW55W10sIHF1ZXJ5OiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3QgZXhwb3J0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBleHBvcnRDb250YWluZXIuY2xhc3NOYW1lID0gXCJzcGFycWwtZXhwb3J0LWNvbnRyb2xzXCI7XG4gICAgZXhwb3J0Q29udGFpbmVyLnN0eWxlLmNzc1RleHQgPVxuICAgICAgXCJtYXJnaW46IDFlbSAwOyBwYWRkaW5nOiAwLjhlbTsgYmFja2dyb3VuZDogI2Y4ZjlmYTsgYm9yZGVyOiAxcHggc29saWQgI2RlZTJlNjsgYm9yZGVyLXJhZGl1czogNHB4O1wiO1xuXG4gICAgLy8gRXhwb3J0IGxhYmVsXG4gICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBsYWJlbC50ZXh0Q29udGVudCA9IFwiRXhwb3J0IHJlc3VsdHM6IFwiO1xuICAgIGxhYmVsLnN0eWxlLmNzc1RleHQgPSBcIm1hcmdpbi1yaWdodDogMC41ZW07IGZvbnQtd2VpZ2h0OiA1MDA7XCI7XG4gICAgZXhwb3J0Q29udGFpbmVyLmFwcGVuZENoaWxkKGxhYmVsKTtcblxuICAgIC8vIFF1aWNrIGV4cG9ydCBidXR0b25zXG4gICAgY29uc3QgZm9ybWF0czogQXJyYXk8eyBmb3JtYXQ6IFJERkZvcm1hdDsgbGFiZWw6IHN0cmluZyB9PiA9IFtcbiAgICAgIHsgZm9ybWF0OiBcInR1cnRsZVwiLCBsYWJlbDogXCJUdXJ0bGVcIiB9LFxuICAgICAgeyBmb3JtYXQ6IFwianNvbi1sZFwiLCBsYWJlbDogXCJKU09OLUxEXCIgfSxcbiAgICAgIHsgZm9ybWF0OiBcIm4tdHJpcGxlc1wiLCBsYWJlbDogXCJOLVRyaXBsZXNcIiB9LFxuICAgICAgeyBmb3JtYXQ6IFwicmRmLXhtbFwiLCBsYWJlbDogXCJSREYvWE1MXCIgfSxcbiAgICBdO1xuXG4gICAgZm9yIChjb25zdCB7IGZvcm1hdCwgbGFiZWwgfSBvZiBmb3JtYXRzKSB7XG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gbGFiZWw7XG4gICAgICBidXR0b24uY2xhc3NOYW1lID0gXCJzcGFycWwtZXhwb3J0LWJ1dHRvblwiO1xuICAgICAgYnV0dG9uLnN0eWxlLmNzc1RleHQgPVxuICAgICAgICBcIm1hcmdpbjogMCAwLjNlbTsgcGFkZGluZzogMC40ZW0gMC44ZW07IGJhY2tncm91bmQ6ICMwMDdhY2M7IGNvbG9yOiB3aGl0ZTsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiAzcHg7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAwLjg1ZW07XCI7XG5cbiAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoKSA9PiB7XG4gICAgICAgIGJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjMDA1YTllXCI7XG4gICAgICB9KTtcblxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsICgpID0+IHtcbiAgICAgICAgYnV0dG9uLnN0eWxlLmJhY2tncm91bmQgPSBcIiMwMDdhY2NcIjtcbiAgICAgIH0pO1xuXG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5leHBvcnRRdWVyeVJlc3VsdHMocmVzdWx0cywgZm9ybWF0LCBxdWVyeSk7XG4gICAgICB9KTtcblxuICAgICAgZXhwb3J0Q29udGFpbmVyLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgfVxuXG4gICAgLy8gQWR2YW5jZWQgZXhwb3J0IGJ1dHRvblxuICAgIGNvbnN0IGFkdmFuY2VkQnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBhZHZhbmNlZEJ1dHRvbi50ZXh0Q29udGVudCA9IFwiQWR2YW5jZWQuLi5cIjtcbiAgICBhZHZhbmNlZEJ1dHRvbi5jbGFzc05hbWUgPSBcInNwYXJxbC1leHBvcnQtYWR2YW5jZWRcIjtcbiAgICBhZHZhbmNlZEJ1dHRvbi5zdHlsZS5jc3NUZXh0ID1cbiAgICAgIFwibWFyZ2luLWxlZnQ6IDFlbTsgcGFkZGluZzogMC40ZW0gMC44ZW07IGJhY2tncm91bmQ6ICM2Yzc1N2Q7IGNvbG9yOiB3aGl0ZTsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiAzcHg7IGN1cnNvcjogcG9pbnRlcjsgZm9udC1zaXplOiAwLjg1ZW07XCI7XG5cbiAgICBhZHZhbmNlZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoKSA9PiB7XG4gICAgICBhZHZhbmNlZEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjNTQ1YjYyXCI7XG4gICAgfSk7XG5cbiAgICBhZHZhbmNlZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XG4gICAgICBhZHZhbmNlZEJ1dHRvbi5zdHlsZS5iYWNrZ3JvdW5kID0gXCIjNmM3NTdkXCI7XG4gICAgfSk7XG5cbiAgICBhZHZhbmNlZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMub3BlbkFkdmFuY2VkRXhwb3J0TW9kYWwocmVzdWx0cywgcXVlcnkpO1xuICAgIH0pO1xuXG4gICAgZXhwb3J0Q29udGFpbmVyLmFwcGVuZENoaWxkKGFkdmFuY2VkQnV0dG9uKTtcblxuICAgIHJldHVybiBleHBvcnRDb250YWluZXI7XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0IHF1ZXJ5IHJlc3VsdHMgaW4gc3BlY2lmaWVkIGZvcm1hdFxuICAgKi9cbiAgcHJpdmF0ZSBhc3luYyBleHBvcnRRdWVyeVJlc3VsdHMoXG4gICAgcmVzdWx0czogYW55W10sXG4gICAgZm9ybWF0OiBSREZGb3JtYXQsXG4gICAgcXVlcnk6IHN0cmluZyxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gYHNwYXJxbC1yZXN1bHRzLSR7RGF0ZS5ub3coKX1gO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5yZGZTZXJ2aWNlLmV4cG9ydFF1ZXJ5UmVzdWx0cyhcbiAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgZm9ybWF0LFxuICAgICAgICBmaWxlTmFtZSxcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQuaXNTdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IGV4cG9ydERhdGEgPSByZXN1bHQuZ2V0VmFsdWUoKTtcbiAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICBgRXhwb3J0ZWQgJHtleHBvcnREYXRhLnRyaXBsZUNvdW50fSB0cmlwbGVzIGFzICR7Zm9ybWF0LnRvVXBwZXJDYXNlKCl9YCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYEV4cG9ydCBmYWlsZWQ6ICR7cmVzdWx0LmVycm9yVmFsdWUoKX1gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICBuZXcgTm90aWNlKGBFeHBvcnQgZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIC8vIFNQQVJRTCBleHBvcnQgZXJyb3JcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogT3BlbiBhZHZhbmNlZCBleHBvcnQgbW9kYWwgZm9yIHF1ZXJ5IHJlc3VsdHNcbiAgICovXG4gIHByaXZhdGUgb3BlbkFkdmFuY2VkRXhwb3J0TW9kYWwocmVzdWx0czogYW55W10sIHF1ZXJ5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0cnkge1xuICAgICAgLy8gQ29udmVydCBxdWVyeSByZXN1bHRzIHRvIGEgZ3JhcGggZm9yIHRoZSBleHBvcnQgbW9kYWxcbiAgICAgIGNvbnN0IHJlc3VsdHNHcmFwaCA9XG4gICAgICAgIHRoaXMucmRmU2VydmljZVtcImNvbnZlcnRRdWVyeVJlc3VsdHNUb0dyYXBoXCJdKHJlc3VsdHMpO1xuXG4gICAgICBjb25zdCBtb2RhbCA9IG5ldyBFeHBvcnRSREZNb2RhbChcbiAgICAgICAgdGhpcy5wbHVnaW4uYXBwLFxuICAgICAgICByZXN1bHRzR3JhcGgsXG4gICAgICAgIHRoaXMucmRmU2VydmljZS5nZXROYW1lc3BhY2VNYW5hZ2VyKCksXG4gICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAvLyBBZGQgcXVlcnkgbWV0YWRhdGEgYXMgY29tbWVudFxuICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGBcXG5cXG4jIFF1ZXJ5IGV4ZWN1dGVkIGF0ICR7dGltZXN0YW1wfVxcbiMgJHtxdWVyeS5yZXBsYWNlKC9cXG4vZywgXCJcXG4jIFwiKX1cXG5gO1xuXG4gICAgICAgICAgLy8gWW91IGNvdWxkIHNhdmUgdGhpcyBlbmhhbmNlZCBjb250ZW50IG9yIHByb3ZpZGUgYWRkaXRpb25hbCBwcm9jZXNzaW5nXG4gICAgICAgICAgbmV3IE5vdGljZShgQWR2YW5jZWQgZXhwb3J0IGNvbXBsZXRlZDogJHtyZXN1bHQuZmlsZU5hbWV9YCk7XG4gICAgICAgIH0sXG4gICAgICApO1xuXG4gICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgbmV3IE5vdGljZShgRmFpbGVkIHRvIG9wZW4gZXhwb3J0IG1vZGFsOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAvLyBFeHBvcnQgbW9kYWwgZXJyb3JcbiAgICB9XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==