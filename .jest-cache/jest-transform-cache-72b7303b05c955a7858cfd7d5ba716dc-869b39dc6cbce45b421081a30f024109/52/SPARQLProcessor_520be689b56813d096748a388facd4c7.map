{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/processors/SPARQLProcessor.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/processors/SPARQLProcessor.ts"],"sourcesContent":["import { MarkdownPostProcessorContext, Plugin, Notice, App } from \"obsidian\";\nimport {\n  SPARQLEngine,\n  ConstructResult,\n  SelectResult,\n} from \"../../application/SPARQLEngine\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { ExoFocusService } from \"../../application/services/ExoFocusService\";\nimport { QueryCacheConfig } from \"../../application/services/QueryCache\";\nimport { RDFService } from \"../../application/services/RDFService\";\nimport { ExportRDFModal } from \"../modals/ExportRDFModal\";\nimport { RDFFormat } from \"../../application/services/RDFSerializer\";\nimport { SPARQLSanitizer } from \"../../application/services/SPARQLSanitizer\";\nimport { DIContainer } from \"../../infrastructure/container/DIContainer\";\n\nexport class SPARQLProcessor {\n  private plugin: Plugin;\n  private engine: SPARQLEngine;\n  private graph: Graph;\n  private focusService?: ExoFocusService;\n  private rdfService: RDFService;\n  private sanitizer: SPARQLSanitizer;\n\n  constructor(\n    plugin: Plugin,\n    graph: Graph,\n    focusService?: ExoFocusService,\n    cacheConfig?: Partial<QueryCacheConfig>,\n  ) {\n    this.plugin = plugin;\n    this.graph = graph;\n    this.engine = new SPARQLEngine(graph, cacheConfig);\n    this.focusService = focusService;\n    // Get RDFService from DI container\n    const container = DIContainer.getInstance();\n    this.rdfService = container.resolve<RDFService>(\"RDFService\");\n    this.sanitizer = new SPARQLSanitizer();\n  }\n\n  /**\n   * Main processor method called by Obsidian\n   */\n  async processCodeBlock(\n    source: string,\n    el: HTMLElement,\n    ctx: MarkdownPostProcessorContext,\n  ): Promise<void> {\n    el.empty();\n\n    // Create main container for UI tests\n    const container = document.createElement(\"div\");\n    container.className = \"exocortex-sparql-container\";\n    container.style.cssText =\n      \"border: 1px solid #e0e0e0; padding: 1em; margin: 1em 0; border-radius: 4px; background: #fafafa;\";\n    el.appendChild(container);\n\n    try {\n      // Show loading indicator\n      const loadingEl = this.createLoadingIndicator();\n      container.appendChild(loadingEl);\n\n      // Execute query\n      const startTime = Date.now();\n      const result = await this.executeQuery(source.trim());\n      const executionTime = Date.now() - startTime;\n\n      // Remove loading indicator\n      loadingEl.remove();\n\n      // Add query title\n      const title = document.createElement(\"h3\");\n      title.textContent = \"SPARQL Query Results\";\n      title.style.cssText = \"margin-top: 0; color: #333;\";\n      container.appendChild(title);\n\n      // Add query display\n      const queryPre = document.createElement(\"pre\");\n      queryPre.textContent = source.trim();\n      queryPre.style.cssText =\n        \"background: #f5f5f5; padding: 0.5em; border-radius: 3px; font-size: 0.9em; overflow-x: auto;\";\n      container.appendChild(queryPre);\n\n      // Add cache status indicator\n      if (result.cached) {\n        const cacheIndicator = this.createCacheIndicator(result.cached);\n        container.appendChild(cacheIndicator);\n      }\n\n      // Display results\n      if (!result.results || result.results.length === 0) {\n        const emptyMessage = document.createElement(\"div\");\n        emptyMessage.className = \"sparql-empty-result\";\n        emptyMessage.textContent = \"No results found\";\n        emptyMessage.style.cssText =\n          \"padding: 1em; text-align: center; color: #666;\";\n        container.appendChild(emptyMessage);\n      } else {\n        const table = this.createResultTable(result.results);\n        container.appendChild(table);\n\n        // Add export controls\n        const exportControls = this.createExportControls(\n          result.results,\n          source.trim(),\n        );\n        container.appendChild(exportControls);\n\n        // Add stats with cache information\n        const stats = this.createStatsElement(\n          result.results.length,\n          executionTime,\n          result.cached,\n        );\n        container.appendChild(stats);\n      }\n    } catch (error: any) {\n      container.innerHTML = \"\";\n      const errorEl = this.createErrorMessage(error);\n      container.appendChild(errorEl);\n      // SPARQL execution error\n    }\n  }\n\n  public async executeQuery(\n    sparql: string,\n  ): Promise<{ results: any[]; cached?: boolean }> {\n    // Basic query validation\n    if (!sparql || sparql.trim().length === 0) {\n      throw new Error(\"Empty query\");\n    }\n\n    // Sanitize query for security\n    const sanitizationResult = this.sanitizer.sanitize(sparql);\n    if (sanitizationResult.isFailure) {\n      throw new Error(\n        `Query validation failed: ${sanitizationResult.errorValue()}`,\n      );\n    }\n\n    const sanitized = sanitizationResult.getValue();\n    if (sanitized.warnings.length > 0) {\n      // SPARQL query has warnings\n      new Notice(`Query executed with warnings: ${sanitized.warnings[0]}`);\n    }\n\n    const safeQuery = sanitized.query;\n    const upperQuery = safeQuery.toUpperCase();\n\n    // Check query type\n    if (upperQuery.includes(\"CONSTRUCT\")) {\n      // Execute CONSTRUCT query\n      const result: ConstructResult = this.engine.construct(safeQuery);\n\n      // Add generated triples to graph (only if not cached to avoid duplicates)\n      if (!result.cached) {\n        for (const triple of result.triples) {\n          this.graph.add(triple);\n        }\n      }\n\n      // Show notification\n      const cacheInfo = result.cached ? \" (cached)\" : \"\";\n      new Notice(`Generated ${result.triples.length} new triples${cacheInfo}`);\n\n      // Return triples as results for display\n      return {\n        results: result.triples.map((t) => ({\n          subject: t.getSubject().toString(),\n          predicate: t.getPredicate().toString(),\n          object: t.getObject().toString(),\n          provenance: result.provenance,\n        })),\n        cached: result.cached,\n      };\n    } else if (upperQuery.includes(\"SELECT\")) {\n      // Execute SELECT query\n      const selectResult: SelectResult = this.engine.select(safeQuery);\n      let results = selectResult.results;\n\n      // Apply ExoFocus filtering if available\n      if (this.focusService) {\n        results = this.focusService.filterSPARQLResults(results);\n      }\n\n      return {\n        results,\n        cached: selectResult.cached,\n      };\n    } else {\n      throw new Error(\n        \"Only SELECT and CONSTRUCT queries are currently supported\",\n      );\n    }\n  }\n\n  protected createResultTable(results: any[]): HTMLTableElement {\n    const table = document.createElement(\"table\");\n    table.className = \"sparql-results-table\";\n\n    if (results.length === 0) {\n      return table;\n    }\n\n    // Get column names from first result\n    const columns = Object.keys(results[0]);\n\n    // Create header\n    const thead = table.createTHead();\n    const headerRow = thead.insertRow();\n\n    for (const column of columns) {\n      const th = document.createElement(\"th\");\n      th.textContent = column;\n      headerRow.appendChild(th);\n    }\n\n    // Create body\n    const tbody = table.createTBody();\n\n    for (const row of results) {\n      const tr = tbody.insertRow();\n\n      for (const column of columns) {\n        const td = tr.insertCell();\n        const value = row[column];\n\n        if (this.isNoteLink(value)) {\n          const link = this.createNoteLink(value);\n          td.appendChild(link);\n        } else {\n          td.textContent = value || \"\";\n        }\n      }\n    }\n\n    return table;\n  }\n\n  private isNoteLink(value: any): boolean {\n    if (typeof value !== \"string\") return false;\n    return value.startsWith(\"file://\") || value.includes(\"/\");\n  }\n\n  private createNoteLink(uri: string): HTMLAnchorElement {\n    const link = document.createElement(\"a\");\n    link.className = \"internal-link\";\n\n    // Extract note name from URI\n    const noteName = uri.replace(\"file://\", \"\").split(\"/\").pop() || uri;\n    link.textContent = noteName;\n\n    link.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      this.plugin.app.workspace.openLinkText(noteName, \"\");\n    });\n\n    return link;\n  }\n\n  protected createLoadingIndicator(): HTMLElement {\n    const loading = document.createElement(\"div\");\n    loading.className = \"sparql-loading\";\n    loading.textContent = \"Executing query...\";\n    return loading;\n  }\n\n  private createErrorMessage(error: Error): HTMLElement {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.className = \"sparql-error\";\n    errorDiv.style.cssText =\n      \"background: #ffebee; color: #c62828; padding: 1em; border-radius: 4px; border: 1px solid #ef5350;\";\n\n    const title = document.createElement(\"strong\");\n    title.textContent = \"Query Error: \";\n    errorDiv.appendChild(title);\n\n    const message = document.createElement(\"span\");\n    message.textContent = error.message;\n    errorDiv.appendChild(message);\n\n    return errorDiv;\n  }\n\n  protected createStatsElement(\n    count: number,\n    time: number,\n    cached?: boolean,\n  ): HTMLElement {\n    const stats = document.createElement(\"div\");\n    stats.className = \"sparql-stats\";\n    const cacheInfo = cached ? \" (cached result)\" : \"\";\n    stats.textContent = `Executed in ${time}ms - ${count} results${cacheInfo}`;\n    stats.style.cssText = \"margin-top: 0.5em; color: #666; font-size: 0.9em;\";\n    return stats;\n  }\n\n  protected createCacheIndicator(cached: boolean): HTMLElement {\n    const indicator = document.createElement(\"div\");\n    indicator.className = \"sparql-cache-indicator\";\n\n    if (cached) {\n      indicator.textContent = \"📋 Cached Result\";\n      indicator.style.cssText =\n        \"background: #e8f5e8; color: #2e7d32; padding: 0.4em 0.8em; border-radius: 15px; font-size: 0.8em; display: inline-block; margin-bottom: 0.5em; border: 1px solid #c8e6c9;\";\n    } else {\n      indicator.textContent = \"🔄 Fresh Result\";\n      indicator.style.cssText =\n        \"background: #e3f2fd; color: #1565c0; padding: 0.4em 0.8em; border-radius: 15px; font-size: 0.8em; display: inline-block; margin-bottom: 0.5em; border: 1px solid #bbdefb;\";\n    }\n\n    return indicator;\n  }\n\n  /**\n   * Get cache statistics for display\n   */\n  getCacheStatistics() {\n    return this.engine.getCacheStatistics();\n  }\n\n  /**\n   * Invalidate all cached queries\n   */\n  invalidateCache(): void {\n    this.engine.invalidateCache();\n  }\n\n  /**\n   * Cleanup expired cache entries\n   */\n  cleanupCache(): number {\n    return this.engine.cleanupCache();\n  }\n\n  /**\n   * Update cache configuration\n   */\n  updateCacheConfig(config: Partial<QueryCacheConfig>): void {\n    this.engine.updateCacheConfig(config);\n  }\n\n  /**\n   * Destroy cache and cleanup resources\n   */\n  destroy(): void {\n    this.engine.destroy();\n  }\n\n  /**\n   * Create export controls for SPARQL results\n   */\n  protected createExportControls(results: any[], query: string): HTMLElement {\n    const exportContainer = document.createElement(\"div\");\n    exportContainer.className = \"sparql-export-controls\";\n    exportContainer.style.cssText =\n      \"margin: 1em 0; padding: 0.8em; background: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px;\";\n\n    // Export label\n    const label = document.createElement(\"span\");\n    label.textContent = \"Export results: \";\n    label.style.cssText = \"margin-right: 0.5em; font-weight: 500;\";\n    exportContainer.appendChild(label);\n\n    // Quick export buttons\n    const formats: Array<{ format: RDFFormat; label: string }> = [\n      { format: \"turtle\", label: \"Turtle\" },\n      { format: \"json-ld\", label: \"JSON-LD\" },\n      { format: \"n-triples\", label: \"N-Triples\" },\n      { format: \"rdf-xml\", label: \"RDF/XML\" },\n    ];\n\n    for (const { format, label } of formats) {\n      const button = document.createElement(\"button\");\n      button.textContent = label;\n      button.className = \"sparql-export-button\";\n      button.style.cssText =\n        \"margin: 0 0.3em; padding: 0.4em 0.8em; background: #007acc; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 0.85em;\";\n\n      button.addEventListener(\"mouseenter\", () => {\n        button.style.background = \"#005a9e\";\n      });\n\n      button.addEventListener(\"mouseleave\", () => {\n        button.style.background = \"#007acc\";\n      });\n\n      button.addEventListener(\"click\", async (e) => {\n        e.preventDefault();\n        await this.exportQueryResults(results, format, query);\n      });\n\n      exportContainer.appendChild(button);\n    }\n\n    // Advanced export button\n    const advancedButton = document.createElement(\"button\");\n    advancedButton.textContent = \"Advanced...\";\n    advancedButton.className = \"sparql-export-advanced\";\n    advancedButton.style.cssText =\n      \"margin-left: 1em; padding: 0.4em 0.8em; background: #6c757d; color: white; border: none; border-radius: 3px; cursor: pointer; font-size: 0.85em;\";\n\n    advancedButton.addEventListener(\"mouseenter\", () => {\n      advancedButton.style.background = \"#545b62\";\n    });\n\n    advancedButton.addEventListener(\"mouseleave\", () => {\n      advancedButton.style.background = \"#6c757d\";\n    });\n\n    advancedButton.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n      this.openAdvancedExportModal(results, query);\n    });\n\n    exportContainer.appendChild(advancedButton);\n\n    return exportContainer;\n  }\n\n  /**\n   * Export query results in specified format\n   */\n  private async exportQueryResults(\n    results: any[],\n    format: RDFFormat,\n    query: string,\n  ): Promise<void> {\n    try {\n      const fileName = `sparql-results-${Date.now()}`;\n      const result = await this.rdfService.exportQueryResults(\n        results,\n        format,\n        fileName,\n      );\n\n      if (result.isSuccess) {\n        const exportData = result.getValue();\n        new Notice(\n          `Exported ${exportData.tripleCount} triples as ${format.toUpperCase()}`,\n        );\n      } else {\n        new Notice(`Export failed: ${result.errorValue()}`);\n      }\n    } catch (error: any) {\n      new Notice(`Export error: ${error.message}`);\n      // SPARQL export error\n    }\n  }\n\n  /**\n   * Open advanced export modal for query results\n   */\n  private openAdvancedExportModal(results: any[], query: string): void {\n    try {\n      // Convert query results to a graph for the export modal\n      const resultsGraph =\n        this.rdfService[\"convertQueryResultsToGraph\"](results);\n\n      const modal = new ExportRDFModal(\n        this.plugin.app,\n        resultsGraph,\n        this.rdfService.getNamespaceManager(),\n        (result) => {\n          // Add query metadata as comment\n          const timestamp = new Date().toISOString();\n          const metadata = `\\n\\n# Query executed at ${timestamp}\\n# ${query.replace(/\\n/g, \"\\n# \")}\\n`;\n\n          // You could save this enhanced content or provide additional processing\n          new Notice(`Advanced export completed: ${result.fileName}`);\n        },\n      );\n\n      modal.open();\n    } catch (error: any) {\n      new Notice(`Failed to open export modal: ${error.message}`);\n      // Export modal error\n    }\n  }\n}\n"],"version":3}