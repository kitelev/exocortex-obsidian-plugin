9aa8e755ccaa36028bb10bbd0d257861
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLayoutForClassUseCase = void 0;
const ClassName_1 = require("../../domain/value-objects/ClassName");
const Result_1 = require("../../domain/core/Result");
class GetLayoutForClassUseCase {
    constructor(layoutRepository) {
        this.layoutRepository = layoutRepository;
    }
    async execute(request) {
        try {
            // Validate class name
            const classNameResult = ClassName_1.ClassName.create(request.className);
            if (classNameResult.isFailure) {
                return Result_1.Result.fail(`Invalid class name: ${classNameResult.error}`);
            }
            const className = classNameResult.getValue();
            // Find layouts for this class
            const layouts = request.includeDisabled
                ? await this.layoutRepository.findByClass(className)
                : await this.layoutRepository.findEnabledByClass(className);
            // Return highest priority layout if found
            if (layouts.length > 0) {
                return Result_1.Result.ok({
                    layout: layouts[0],
                    fallbackUsed: false,
                });
            }
            // Try to find parent class layouts (inheritance chain)
            const parentLayout = await this.findParentClassLayout(className);
            if (parentLayout) {
                return Result_1.Result.ok({
                    layout: parentLayout,
                    fallbackUsed: true,
                });
            }
            // No layout found - will use default
            return Result_1.Result.ok({
                layout: null,
                fallbackUsed: true,
            });
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to get layout for class: ${error}`);
        }
    }
    async findParentClassLayout(className) {
        // Check common parent classes
        const parentClasses = this.getParentClasses(className.value);
        for (const parentClass of parentClasses) {
            const parentClassName = ClassName_1.ClassName.create(parentClass);
            if (parentClassName.isFailure)
                continue;
            const layouts = await this.layoutRepository.findEnabledByClass(parentClassName.getValue());
            if (layouts.length > 0) {
                return layouts[0];
            }
        }
        return null;
    }
    getParentClasses(className) {
        // Define inheritance hierarchy
        const hierarchy = {
            ems__Project: ["ems__Effort", "exo__Asset"],
            ems__Task: ["ems__Effort", "exo__Asset"],
            ems__Area: ["exo__Asset"],
            ems__Goal: ["exo__Asset"],
            ems__Effort: ["exo__Asset"],
        };
        return hierarchy[className] || ["exo__Asset"];
    }
}
exports.GetLayoutForClassUseCase = GetLayoutForClassUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9HZXRMYXlvdXRGb3JDbGFzc1VzZUNhc2UudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEsb0VBQWlFO0FBQ2pFLHFEQUFrRDtBQVlsRCxNQUFhLHdCQUF3QjtJQUNuQyxZQUFvQixnQkFBd0M7UUFBeEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF3QjtJQUFHLENBQUM7SUFFaEUsS0FBSyxDQUFDLE9BQU8sQ0FDWCxPQUFpQztRQUVqQyxJQUFJO1lBQ0Ysc0JBQXNCO1lBQ3RCLE1BQU0sZUFBZSxHQUFHLHFCQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM1RCxJQUFJLGVBQWUsQ0FBQyxTQUFTLEVBQUU7Z0JBQzdCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FDaEIsdUJBQXVCLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FDL0MsQ0FBQzthQUNIO1lBRUQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRTdDLDhCQUE4QjtZQUM5QixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZTtnQkFDckMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7Z0JBQ3BELENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUU5RCwwQ0FBMEM7WUFDMUMsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxlQUFNLENBQUMsRUFBRSxDQUE0QjtvQkFDMUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLFlBQVksRUFBRSxLQUFLO2lCQUNwQixDQUFDLENBQUM7YUFDSjtZQUVELHVEQUF1RDtZQUN2RCxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqRSxJQUFJLFlBQVksRUFBRTtnQkFDaEIsT0FBTyxlQUFNLENBQUMsRUFBRSxDQUE0QjtvQkFDMUMsTUFBTSxFQUFFLFlBQVk7b0JBQ3BCLFlBQVksRUFBRSxJQUFJO2lCQUNuQixDQUFDLENBQUM7YUFDSjtZQUVELHFDQUFxQztZQUNyQyxPQUFPLGVBQU0sQ0FBQyxFQUFFLENBQTRCO2dCQUMxQyxNQUFNLEVBQUUsSUFBSTtnQkFDWixZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFDLENBQUM7U0FDSjtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUNoQixtQ0FBbUMsS0FBSyxFQUFFLENBQzNDLENBQUM7U0FDSDtJQUNILENBQUM7SUFFTyxLQUFLLENBQUMscUJBQXFCLENBQ2pDLFNBQW9CO1FBRXBCLDhCQUE4QjtRQUM5QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTdELEtBQUssTUFBTSxXQUFXLElBQUksYUFBYSxFQUFFO1lBQ3ZDLE1BQU0sZUFBZSxHQUFHLHFCQUFTLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3RELElBQUksZUFBZSxDQUFDLFNBQVM7Z0JBQUUsU0FBUztZQUV4QyxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FDNUQsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUMzQixDQUFDO1lBRUYsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDdEIsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLGdCQUFnQixDQUFDLFNBQWlCO1FBQ3hDLCtCQUErQjtRQUMvQixNQUFNLFNBQVMsR0FBNkI7WUFDMUMsWUFBWSxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztZQUMzQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDO1lBQ3hDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQztZQUN6QixTQUFTLEVBQUUsQ0FBQyxZQUFZLENBQUM7WUFDekIsV0FBVyxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQzVCLENBQUM7UUFFRixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRjtBQXJGRCw0REFxRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9HZXRMYXlvdXRGb3JDbGFzc1VzZUNhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNsYXNzTGF5b3V0UmVwb3NpdG9yeSB9IGZyb20gXCIuLi8uLi9kb21haW4vcmVwb3NpdG9yaWVzL0lDbGFzc0xheW91dFJlcG9zaXRvcnlcIjtcbmltcG9ydCB7IENsYXNzTGF5b3V0IH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9lbnRpdGllcy9DbGFzc0xheW91dFwiO1xuaW1wb3J0IHsgQ2xhc3NOYW1lIH0gZnJvbSBcIi4uLy4uL2RvbWFpbi92YWx1ZS1vYmplY3RzL0NsYXNzTmFtZVwiO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9jb3JlL1Jlc3VsdFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdldExheW91dEZvckNsYXNzUmVxdWVzdCB7XG4gIGNsYXNzTmFtZTogc3RyaW5nO1xuICBpbmNsdWRlRGlzYWJsZWQ/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdldExheW91dEZvckNsYXNzUmVzcG9uc2Uge1xuICBsYXlvdXQ6IENsYXNzTGF5b3V0IHwgbnVsbDtcbiAgZmFsbGJhY2tVc2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgR2V0TGF5b3V0Rm9yQ2xhc3NVc2VDYXNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYXlvdXRSZXBvc2l0b3J5OiBJQ2xhc3NMYXlvdXRSZXBvc2l0b3J5KSB7fVxuXG4gIGFzeW5jIGV4ZWN1dGUoXG4gICAgcmVxdWVzdDogR2V0TGF5b3V0Rm9yQ2xhc3NSZXF1ZXN0LFxuICApOiBQcm9taXNlPFJlc3VsdDxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGF0ZSBjbGFzcyBuYW1lXG4gICAgICBjb25zdCBjbGFzc05hbWVSZXN1bHQgPSBDbGFzc05hbWUuY3JlYXRlKHJlcXVlc3QuY2xhc3NOYW1lKTtcbiAgICAgIGlmIChjbGFzc05hbWVSZXN1bHQuaXNGYWlsdXJlKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPihcbiAgICAgICAgICBgSW52YWxpZCBjbGFzcyBuYW1lOiAke2NsYXNzTmFtZVJlc3VsdC5lcnJvcn1gLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVSZXN1bHQuZ2V0VmFsdWUoKTtcblxuICAgICAgLy8gRmluZCBsYXlvdXRzIGZvciB0aGlzIGNsYXNzXG4gICAgICBjb25zdCBsYXlvdXRzID0gcmVxdWVzdC5pbmNsdWRlRGlzYWJsZWRcbiAgICAgICAgPyBhd2FpdCB0aGlzLmxheW91dFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MoY2xhc3NOYW1lKVxuICAgICAgICA6IGF3YWl0IHRoaXMubGF5b3V0UmVwb3NpdG9yeS5maW5kRW5hYmxlZEJ5Q2xhc3MoY2xhc3NOYW1lKTtcblxuICAgICAgLy8gUmV0dXJuIGhpZ2hlc3QgcHJpb3JpdHkgbGF5b3V0IGlmIGZvdW5kXG4gICAgICBpZiAobGF5b3V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBSZXN1bHQub2s8R2V0TGF5b3V0Rm9yQ2xhc3NSZXNwb25zZT4oe1xuICAgICAgICAgIGxheW91dDogbGF5b3V0c1swXSwgLy8gQWxyZWFkeSBzb3J0ZWQgYnkgcHJpb3JpdHlcbiAgICAgICAgICBmYWxsYmFja1VzZWQ6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJ5IHRvIGZpbmQgcGFyZW50IGNsYXNzIGxheW91dHMgKGluaGVyaXRhbmNlIGNoYWluKVxuICAgICAgY29uc3QgcGFyZW50TGF5b3V0ID0gYXdhaXQgdGhpcy5maW5kUGFyZW50Q2xhc3NMYXlvdXQoY2xhc3NOYW1lKTtcbiAgICAgIGlmIChwYXJlbnRMYXlvdXQpIHtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vazxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPih7XG4gICAgICAgICAgbGF5b3V0OiBwYXJlbnRMYXlvdXQsXG4gICAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gTm8gbGF5b3V0IGZvdW5kIC0gd2lsbCB1c2UgZGVmYXVsdFxuICAgICAgcmV0dXJuIFJlc3VsdC5vazxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPih7XG4gICAgICAgIGxheW91dDogbnVsbCxcbiAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPihcbiAgICAgICAgYEZhaWxlZCB0byBnZXQgbGF5b3V0IGZvciBjbGFzczogJHtlcnJvcn1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGZpbmRQYXJlbnRDbGFzc0xheW91dChcbiAgICBjbGFzc05hbWU6IENsYXNzTmFtZSxcbiAgKTogUHJvbWlzZTxDbGFzc0xheW91dCB8IG51bGw+IHtcbiAgICAvLyBDaGVjayBjb21tb24gcGFyZW50IGNsYXNzZXNcbiAgICBjb25zdCBwYXJlbnRDbGFzc2VzID0gdGhpcy5nZXRQYXJlbnRDbGFzc2VzKGNsYXNzTmFtZS52YWx1ZSk7XG5cbiAgICBmb3IgKGNvbnN0IHBhcmVudENsYXNzIG9mIHBhcmVudENsYXNzZXMpIHtcbiAgICAgIGNvbnN0IHBhcmVudENsYXNzTmFtZSA9IENsYXNzTmFtZS5jcmVhdGUocGFyZW50Q2xhc3MpO1xuICAgICAgaWYgKHBhcmVudENsYXNzTmFtZS5pc0ZhaWx1cmUpIGNvbnRpbnVlO1xuXG4gICAgICBjb25zdCBsYXlvdXRzID0gYXdhaXQgdGhpcy5sYXlvdXRSZXBvc2l0b3J5LmZpbmRFbmFibGVkQnlDbGFzcyhcbiAgICAgICAgcGFyZW50Q2xhc3NOYW1lLmdldFZhbHVlKCksXG4gICAgICApO1xuXG4gICAgICBpZiAobGF5b3V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiBsYXlvdXRzWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYXJlbnRDbGFzc2VzKGNsYXNzTmFtZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIC8vIERlZmluZSBpbmhlcml0YW5jZSBoaWVyYXJjaHlcbiAgICBjb25zdCBoaWVyYXJjaHk6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHtcbiAgICAgIGVtc19fUHJvamVjdDogW1wiZW1zX19FZmZvcnRcIiwgXCJleG9fX0Fzc2V0XCJdLFxuICAgICAgZW1zX19UYXNrOiBbXCJlbXNfX0VmZm9ydFwiLCBcImV4b19fQXNzZXRcIl0sXG4gICAgICBlbXNfX0FyZWE6IFtcImV4b19fQXNzZXRcIl0sXG4gICAgICBlbXNfX0dvYWw6IFtcImV4b19fQXNzZXRcIl0sXG4gICAgICBlbXNfX0VmZm9ydDogW1wiZXhvX19Bc3NldFwiXSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGhpZXJhcmNoeVtjbGFzc05hbWVdIHx8IFtcImV4b19fQXNzZXRcIl07XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==