{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/renderers/StrategyBasedLayoutRenderer.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/renderers/StrategyBasedLayoutRenderer.test.ts"],"sourcesContent":["import { StrategyBasedLayoutRenderer } from \"../../../../src/presentation/renderers/StrategyBasedLayoutRenderer\";\nimport { CustomLayoutRenderingStrategy } from \"../../../../src/presentation/strategies/CustomLayoutRenderingStrategy\";\nimport { DefaultLayoutRenderingStrategy } from \"../../../../src/presentation/strategies/DefaultLayoutRenderingStrategy\";\nimport { BlockRendererFactory } from \"../../../../src/presentation/factories/BlockRendererFactory\";\nimport { LayoutMother } from \"../../../__builders__/LayoutMother\";\nimport { Vault, App } from \"../../../__mocks__/obsidian\";\nimport { Result } from \"../../../../src/domain/core/Result\";\n\ndescribe(\"StrategyBasedLayoutRenderer\", () => {\n  let renderer: StrategyBasedLayoutRenderer;\n  let mockVault: Vault;\n  let mockApp: App;\n  let mockLayoutRepository: any;\n  let mockPropertyRenderer: any;\n\n  beforeEach(() => {\n    mockVault = new Vault();\n    mockApp = new App();\n\n    // Mock layout repository\n    mockLayoutRepository = {\n      findByClassName: jest\n        .fn()\n        .mockResolvedValue(Result.fail(\"No layout found\")),\n      save: jest.fn().mockResolvedValue(Result.ok(undefined)),\n      findAll: jest.fn().mockResolvedValue(Result.ok([])),\n    };\n\n    // Mock property renderer\n    mockPropertyRenderer = {\n      renderPropertiesBlock: jest.fn(),\n    };\n\n    // Create renderer instance\n    renderer = new StrategyBasedLayoutRenderer(\n      mockApp as any,\n      mockLayoutRepository as any,\n      mockPropertyRenderer as any,\n    );\n  });\n\n  describe(\"SOLID Principle Compliance\", () => {\n    describe(\"Single Responsibility Principle (SRP)\", () => {\n      it(\"should have single responsibility of orchestrating layout rendering\", () => {\n        // Verify renderer only orchestrates, doesn't implement specific rendering logic\n        expect(renderer.getActiveStrategies()).toContain(\n          \"CustomLayoutRenderingStrategy\",\n        );\n        expect(renderer.getActiveStrategies()).toContain(\n          \"DefaultLayoutRenderingStrategy\",\n        );\n        expect(renderer.getBlockRendererFactory()).toBeInstanceOf(\n          BlockRendererFactory,\n        );\n      });\n\n      it(\"should delegate actual rendering to strategies\", async () => {\n        const container = document.createElement(\"div\");\n        const layout = LayoutMother.simple();\n\n        // Mock file and metadata\n        const mockFile = { path: \"test.md\", basename: \"test\" } as any;\n        const mockMetadata = {\n          frontmatter: { exo__Instance_class: \"TestClass\" },\n        };\n\n        // Should not throw - delegates to strategy\n        await renderer.renderLayout(container, mockFile, mockMetadata, null);\n\n        // Verify no direct rendering logic in main class\n        expect(container.children.length).toBeGreaterThanOrEqual(0);\n      });\n    });\n\n    describe(\"Open-Closed Principle (OCP)\", () => {\n      it(\"should be open for extension via new strategies\", () => {\n        // Create custom strategy\n        const customStrategy = {\n          canHandle: jest.fn().mockReturnValue(true),\n          render: jest.fn().mockResolvedValue(Result.ok()),\n        };\n\n        const initialStrategies = renderer.getActiveStrategies();\n        renderer.addStrategy(customStrategy as any);\n        const newStrategies = renderer.getActiveStrategies();\n\n        expect(newStrategies.length).toBe(initialStrategies.length + 1);\n      });\n\n      it(\"should be closed for modification of core logic\", () => {\n        // Core rendering logic should not change when adding strategies\n        const container = document.createElement(\"div\");\n        const layout = LayoutMother.simple();\n\n        // Should work with existing strategies\n        const result = renderer.renderLayoutDirect(layout, container);\n        expect(result.isSuccess).toBe(true);\n      });\n    });\n\n    describe(\"Liskov Substitution Principle (LSP)\", () => {\n      it(\"should allow strategy substitution without changing behavior\", () => {\n        const strategies = renderer.getActiveStrategies();\n\n        // All strategies should be substitutable\n        strategies.forEach((strategyName) => {\n          expect(strategyName).toMatch(/.*Strategy$/);\n        });\n      });\n    });\n\n    describe(\"Interface Segregation Principle (ISP)\", () => {\n      it(\"should have segregated interfaces for different concerns\", () => {\n        const factory = renderer.getBlockRendererFactory();\n\n        // Block renderer factory should only handle block rendering\n        expect(factory.getSupportedBlockTypes()).toEqual(\n          expect.arrayContaining([\"dynamic-backlinks\"]),\n        );\n      });\n    });\n\n    describe(\"Dependency Inversion Principle (DIP)\", () => {\n      it(\"should depend on abstractions not concretions\", () => {\n        // Renderer should accept interfaces, not concrete classes\n        expect(renderer.isHealthy()).toBe(true);\n\n        // Should work with mocked dependencies\n        expect(() => renderer.getActiveStrategies()).not.toThrow();\n        expect(() => renderer.getBlockRendererFactory()).not.toThrow();\n      });\n    });\n  });\n\n  describe(\"Strategy Pattern Implementation\", () => {\n    it(\"should select custom strategy for valid layouts\", () => {\n      const layout = LayoutMother.simple();\n      const container = document.createElement(\"div\");\n\n      const result = renderer.renderLayoutDirect(layout, container);\n\n      expect(result.isSuccess).toBe(true);\n      expect(container.children.length).toBeGreaterThan(0);\n    });\n\n    it(\"should select default strategy for null layouts\", () => {\n      const container = document.createElement(\"div\");\n\n      const result = renderer.renderLayoutDirect(null, container);\n\n      // Should handle null gracefully\n      expect(result.isSuccess).toBe(true);\n      expect(container.children.length).toBe(0);\n    });\n\n    it(\"should handle strategy addition and removal\", () => {\n      const initialCount = renderer.getActiveStrategies().length;\n\n      // Add strategy\n      const mockStrategy = {\n        canHandle: jest.fn().mockReturnValue(false),\n        render: jest.fn().mockResolvedValue(Result.ok()),\n      };\n\n      renderer.addStrategy(mockStrategy as any);\n      expect(renderer.getActiveStrategies().length).toBe(initialCount + 1);\n\n      // Remove strategy by constructor (should work now since object was added)\n      const removed = renderer.removeStrategy(mockStrategy.constructor);\n      expect(removed).toBe(true); // Should successfully remove the added strategy\n      expect(renderer.getActiveStrategies().length).toBe(initialCount);\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle invalid container gracefully\", async () => {\n      const layout = LayoutMother.simple();\n\n      const result = renderer.renderLayoutDirect(layout, null as any);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Container is required\");\n    });\n\n    it(\"should handle malformed layouts gracefully\", () => {\n      const container = document.createElement(\"div\");\n      const malformedLayout = {} as any;\n\n      const result = renderer.renderLayoutDirect(malformedLayout, container);\n\n      expect(result.isSuccess).toBe(true); // Handles gracefully\n    });\n\n    it(\"should handle missing metadata gracefully\", async () => {\n      const container = document.createElement(\"div\");\n      const mockFile = { path: \"test.md\" } as any;\n\n      const result = await renderer.renderLayout(\n        container,\n        mockFile,\n        null,\n        null,\n      );\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"No metadata available\");\n    });\n  });\n\n  describe(\"Backward Compatibility\", () => {\n    it(\"should maintain compatibility with existing layout structures\", () => {\n      const container = document.createElement(\"div\");\n      const layout = LayoutMother.complex();\n\n      const result = renderer.renderLayoutDirect(layout, container);\n\n      expect(result.isSuccess).toBe(true);\n\n      // Should create expected block structure\n      const blocks = container.querySelectorAll(\"[data-block-id]\");\n      expect(blocks.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle collapsible blocks correctly\", () => {\n      const container = document.createElement(\"div\");\n      const layout = LayoutMother.withCollapsibleBlocks();\n\n      const result = renderer.renderLayoutDirect(layout, container);\n\n      expect(result.isSuccess).toBe(true);\n\n      // Should create collapsible headers\n      const headers = container.querySelectorAll(\".is-collapsible\");\n      expect(headers.length).toBeGreaterThan(0);\n    });\n\n    it(\"should apply custom CSS classes\", () => {\n      const container = document.createElement(\"div\");\n      const layout = LayoutMother.create().withPropertiesBlock().build();\n\n      // Add custom config\n      (layout as any).config = { cssClass: \"custom-layout-class\" };\n\n      const result = renderer.renderLayoutDirect(layout, container);\n\n      expect(result.isSuccess).toBe(true);\n      expect(container.classList.contains(\"custom-layout-class\")).toBe(true);\n    });\n  });\n\n  describe(\"Performance and Health Checks\", () => {\n    it(\"should report healthy status when properly initialized\", () => {\n      expect(renderer.isHealthy()).toBe(true);\n    });\n\n    it(\"should provide strategy introspection\", () => {\n      const strategies = renderer.getActiveStrategies();\n\n      expect(strategies).toBeInstanceOf(Array);\n      expect(strategies.length).toBeGreaterThan(0);\n      expect(strategies).toContain(\"CustomLayoutRenderingStrategy\");\n      expect(strategies).toContain(\"DefaultLayoutRenderingStrategy\");\n    });\n\n    it(\"should handle empty layouts efficiently\", () => {\n      const container = document.createElement(\"div\");\n      const layout = LayoutMother.empty();\n\n      const startTime = performance.now();\n      const result = renderer.renderLayoutDirect(layout, container);\n      const endTime = performance.now();\n\n      expect(result.isSuccess).toBe(true);\n      expect(endTime - startTime).toBeLessThan(10); // Should be fast\n    });\n  });\n});\n"],"version":3}