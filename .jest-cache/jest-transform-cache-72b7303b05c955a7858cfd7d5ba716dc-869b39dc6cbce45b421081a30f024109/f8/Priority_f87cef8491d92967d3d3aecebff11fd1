581607529f9a291cb234c4172ab111c0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Priority = exports.PriorityLevel = void 0;
const Result_1 = require("../core/Result");
var PriorityLevel;
(function (PriorityLevel) {
    PriorityLevel["LOW"] = "low";
    PriorityLevel["MEDIUM"] = "medium";
    PriorityLevel["HIGH"] = "high";
    PriorityLevel["URGENT"] = "urgent";
})(PriorityLevel = exports.PriorityLevel || (exports.PriorityLevel = {}));
/**
 * Value object representing task priority
 * Immutable and self-validating with business rules
 */
class Priority {
    constructor(level) {
        this.level = level;
    }
    static create(value) {
        if (!value) {
            return Result_1.Result.fail('Priority cannot be empty');
        }
        const normalizedValue = typeof value === 'string' ? value.toLowerCase() : value;
        if (!Object.values(PriorityLevel).includes(normalizedValue)) {
            return Result_1.Result.fail('Priority must be one of: low, medium, high, urgent');
        }
        return Result_1.Result.ok(new Priority(normalizedValue));
    }
    static low() {
        return new Priority(PriorityLevel.LOW);
    }
    static medium() {
        return new Priority(PriorityLevel.MEDIUM);
    }
    static high() {
        return new Priority(PriorityLevel.HIGH);
    }
    static urgent() {
        return new Priority(PriorityLevel.URGENT);
    }
    getLevel() {
        return this.level;
    }
    toString() {
        return this.level;
    }
    equals(other) {
        return this.level === other.level;
    }
    /**
     * Returns numeric value for sorting (higher number = higher priority)
     */
    getNumericValue() {
        switch (this.level) {
            case PriorityLevel.LOW: return 1;
            case PriorityLevel.MEDIUM: return 2;
            case PriorityLevel.HIGH: return 3;
            case PriorityLevel.URGENT: return 4;
        }
    }
    /**
     * Compares priorities for sorting
     * Returns negative if this < other, positive if this > other, 0 if equal
     */
    compare(other) {
        return this.getNumericValue() - other.getNumericValue();
    }
    isHigherThan(other) {
        return this.getNumericValue() > other.getNumericValue();
    }
    isLowerThan(other) {
        return this.getNumericValue() < other.getNumericValue();
    }
}
exports.Priority = Priority;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL1ByaW9yaXR5LnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUF3QztBQUV4QyxJQUFZLGFBS1g7QUFMRCxXQUFZLGFBQWE7SUFDdkIsNEJBQVcsQ0FBQTtJQUNYLGtDQUFpQixDQUFBO0lBQ2pCLDhCQUFhLENBQUE7SUFDYixrQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBTFcsYUFBYSxHQUFiLHFCQUFhLEtBQWIscUJBQWEsUUFLeEI7QUFFRDs7O0dBR0c7QUFDSCxNQUFhLFFBQVE7SUFHbkIsWUFBb0IsS0FBb0I7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBNkI7UUFDekMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNWLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBVywwQkFBMEIsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsTUFBTSxlQUFlLEdBQUcsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUVoRixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxRQUFRLENBQUMsZUFBZ0MsQ0FBQyxFQUFFO1lBQzVFLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBVyxvREFBb0QsQ0FBQyxDQUFDO1NBQ3BGO1FBRUQsT0FBTyxlQUFNLENBQUMsRUFBRSxDQUFXLElBQUksUUFBUSxDQUFDLGVBQWdDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxNQUFNLENBQUMsR0FBRztRQUNSLE9BQU8sSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTTtRQUNYLE9BQU8sSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNULE9BQU8sSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTTtRQUNYLE9BQU8sSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBZTtRQUNwQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlO1FBQ2IsUUFBUSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2xCLEtBQUssYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLEtBQUssYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLEtBQUssYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ2xDLEtBQUssYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILE9BQU8sQ0FBQyxLQUFlO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGVBQWUsRUFBRSxHQUFHLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUMxRCxDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWU7UUFDMUIsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxXQUFXLENBQUMsS0FBZTtRQUN6QixPQUFPLElBQUksQ0FBQyxlQUFlLEVBQUUsR0FBRyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDMUQsQ0FBQztDQUNGO0FBNUVELDRCQTRFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvZG9tYWluL3ZhbHVlLW9iamVjdHMvUHJpb3JpdHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi4vY29yZS9SZXN1bHQnO1xuXG5leHBvcnQgZW51bSBQcmlvcml0eUxldmVsIHtcbiAgTE9XID0gJ2xvdycsXG4gIE1FRElVTSA9ICdtZWRpdW0nLFxuICBISUdIID0gJ2hpZ2gnLFxuICBVUkdFTlQgPSAndXJnZW50J1xufVxuXG4vKipcbiAqIFZhbHVlIG9iamVjdCByZXByZXNlbnRpbmcgdGFzayBwcmlvcml0eVxuICogSW1tdXRhYmxlIGFuZCBzZWxmLXZhbGlkYXRpbmcgd2l0aCBidXNpbmVzcyBydWxlc1xuICovXG5leHBvcnQgY2xhc3MgUHJpb3JpdHkge1xuICBwcml2YXRlIHJlYWRvbmx5IGxldmVsOiBQcmlvcml0eUxldmVsO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IobGV2ZWw6IFByaW9yaXR5TGV2ZWwpIHtcbiAgICB0aGlzLmxldmVsID0gbGV2ZWw7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKHZhbHVlOiBzdHJpbmcgfCBQcmlvcml0eUxldmVsKTogUmVzdWx0PFByaW9yaXR5PiB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPFByaW9yaXR5PignUHJpb3JpdHkgY2Fubm90IGJlIGVtcHR5Jyk7XG4gICAgfVxuXG4gICAgY29uc3Qgbm9ybWFsaXplZFZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlLnRvTG93ZXJDYXNlKCkgOiB2YWx1ZTtcbiAgICBcbiAgICBpZiAoIU9iamVjdC52YWx1ZXMoUHJpb3JpdHlMZXZlbCkuaW5jbHVkZXMobm9ybWFsaXplZFZhbHVlIGFzIFByaW9yaXR5TGV2ZWwpKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWw8UHJpb3JpdHk+KCdQcmlvcml0eSBtdXN0IGJlIG9uZSBvZjogbG93LCBtZWRpdW0sIGhpZ2gsIHVyZ2VudCcpO1xuICAgIH1cblxuICAgIHJldHVybiBSZXN1bHQub2s8UHJpb3JpdHk+KG5ldyBQcmlvcml0eShub3JtYWxpemVkVmFsdWUgYXMgUHJpb3JpdHlMZXZlbCkpO1xuICB9XG5cbiAgc3RhdGljIGxvdygpOiBQcmlvcml0eSB7XG4gICAgcmV0dXJuIG5ldyBQcmlvcml0eShQcmlvcml0eUxldmVsLkxPVyk7XG4gIH1cblxuICBzdGF0aWMgbWVkaXVtKCk6IFByaW9yaXR5IHtcbiAgICByZXR1cm4gbmV3IFByaW9yaXR5KFByaW9yaXR5TGV2ZWwuTUVESVVNKTtcbiAgfVxuXG4gIHN0YXRpYyBoaWdoKCk6IFByaW9yaXR5IHtcbiAgICByZXR1cm4gbmV3IFByaW9yaXR5KFByaW9yaXR5TGV2ZWwuSElHSCk7XG4gIH1cblxuICBzdGF0aWMgdXJnZW50KCk6IFByaW9yaXR5IHtcbiAgICByZXR1cm4gbmV3IFByaW9yaXR5KFByaW9yaXR5TGV2ZWwuVVJHRU5UKTtcbiAgfVxuXG4gIGdldExldmVsKCk6IFByaW9yaXR5TGV2ZWwge1xuICAgIHJldHVybiB0aGlzLmxldmVsO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sZXZlbDtcbiAgfVxuXG4gIGVxdWFscyhvdGhlcjogUHJpb3JpdHkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sZXZlbCA9PT0gb3RoZXIubGV2ZWw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBudW1lcmljIHZhbHVlIGZvciBzb3J0aW5nIChoaWdoZXIgbnVtYmVyID0gaGlnaGVyIHByaW9yaXR5KVxuICAgKi9cbiAgZ2V0TnVtZXJpY1ZhbHVlKCk6IG51bWJlciB7XG4gICAgc3dpdGNoICh0aGlzLmxldmVsKSB7XG4gICAgICBjYXNlIFByaW9yaXR5TGV2ZWwuTE9XOiByZXR1cm4gMTtcbiAgICAgIGNhc2UgUHJpb3JpdHlMZXZlbC5NRURJVU06IHJldHVybiAyO1xuICAgICAgY2FzZSBQcmlvcml0eUxldmVsLkhJR0g6IHJldHVybiAzO1xuICAgICAgY2FzZSBQcmlvcml0eUxldmVsLlVSR0VOVDogcmV0dXJuIDQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXBhcmVzIHByaW9yaXRpZXMgZm9yIHNvcnRpbmdcbiAgICogUmV0dXJucyBuZWdhdGl2ZSBpZiB0aGlzIDwgb3RoZXIsIHBvc2l0aXZlIGlmIHRoaXMgPiBvdGhlciwgMCBpZiBlcXVhbFxuICAgKi9cbiAgY29tcGFyZShvdGhlcjogUHJpb3JpdHkpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldE51bWVyaWNWYWx1ZSgpIC0gb3RoZXIuZ2V0TnVtZXJpY1ZhbHVlKCk7XG4gIH1cblxuICBpc0hpZ2hlclRoYW4ob3RoZXI6IFByaW9yaXR5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TnVtZXJpY1ZhbHVlKCkgPiBvdGhlci5nZXROdW1lcmljVmFsdWUoKTtcbiAgfVxuXG4gIGlzTG93ZXJUaGFuKG90aGVyOiBQcmlvcml0eSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmdldE51bWVyaWNWYWx1ZSgpIDwgb3RoZXIuZ2V0TnVtZXJpY1ZhbHVlKCk7XG4gIH1cbn0iXSwidmVyc2lvbiI6M30=