61f47877cc84ec4b4c89ac151cf1b8d1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianClassLayoutRepository = void 0;
const tslib_1 = require("tslib");
const ClassLayout_1 = require("../../domain/entities/ClassLayout");
const ClassName_1 = require("../../domain/value-objects/ClassName");
const AssetId_1 = require("../../domain/value-objects/AssetId");
class ObsidianClassLayoutRepository {
    constructor(app, layoutsFolderPath = 'layouts') {
        this.app = app;
        this.layoutsFolderPath = layoutsFolderPath;
        this.cache = new Map();
        this.lastCacheUpdate = 0;
        this.CACHE_TTL = 30000; // 30 seconds
    }
    findByClass(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.refreshCacheIfNeeded();
            const allLayouts = Array.from(this.cache.values()).flat();
            const matchingLayouts = allLayouts.filter(layout => layout.targetClass.equals(className) && layout.isEnabled);
            // Sort by priority (higher first)
            return matchingLayouts.sort((a, b) => b.priority - a.priority);
        });
    }
    findById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.refreshCacheIfNeeded();
            const allLayouts = Array.from(this.cache.values()).flat();
            return allLayouts.find(layout => layout.id.equals(id)) || null;
        });
    }
    findAll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.refreshCacheIfNeeded();
            return Array.from(this.cache.values()).flat();
        });
    }
    findEnabledByClass(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const layouts = yield this.findByClass(className);
            return layouts.filter(l => l.isEnabled);
        });
    }
    save(layout) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // In Obsidian, we would save this as a file
            // For now, just update cache
            const className = layout.targetClass.value;
            const existing = this.cache.get(className) || [];
            const index = existing.findIndex(l => l.id.equals(layout.id));
            if (index >= 0) {
                existing[index] = layout;
            }
            else {
                existing.push(layout);
            }
            this.cache.set(className, existing);
        });
    }
    delete(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Remove from cache
            for (const [className, layouts] of this.cache.entries()) {
                const filtered = layouts.filter(l => !l.id.equals(id));
                if (filtered.length !== layouts.length) {
                    this.cache.set(className, filtered);
                }
            }
        });
    }
    refreshCacheIfNeeded() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const now = Date.now();
            if (now - this.lastCacheUpdate < this.CACHE_TTL) {
                return;
            }
            yield this.loadLayoutsFromFiles();
            this.lastCacheUpdate = now;
        });
    }
    loadLayoutsFromFiles() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.cache.clear();
            const files = this.app.vault.getFiles();
            const layoutFiles = files.filter(file => file.path.startsWith(this.layoutsFolderPath + '/') ||
                this.isLayoutFile(file));
            for (const file of layoutFiles) {
                const layout = yield this.parseLayoutFile(file);
                if (layout) {
                    const className = layout.targetClass.value;
                    const existing = this.cache.get(className) || [];
                    existing.push(layout);
                    this.cache.set(className, existing);
                }
            }
        });
    }
    isLayoutFile(file) {
        const metadata = this.app.metadataCache.getFileCache(file);
        if (!(metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter))
            return false;
        const instanceClass = metadata.frontmatter['exo__Instance_class'];
        const cleanClass = this.cleanClassName(instanceClass);
        return cleanClass === 'ui__ClassLayout';
    }
    parseLayoutFile(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!(metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter))
                return null;
            const frontmatter = metadata.frontmatter;
            const instanceClass = frontmatter['exo__Instance_class'];
            if (this.cleanClassName(instanceClass) !== 'ui__ClassLayout') {
                return null;
            }
            const targetClass = frontmatter['ui__ClassLayout_targetClass'];
            if (!targetClass)
                return null;
            const cleanTargetClass = this.cleanClassName(targetClass);
            const targetClassName = ClassName_1.ClassName.create(cleanTargetClass);
            if (targetClassName.isFailure)
                return null;
            const blocks = this.parseBlocks(frontmatter['ui__ClassLayout_blocks'] || []);
            const priority = frontmatter['ui__ClassLayout_priority'] || 0;
            const isEnabled = frontmatter['ui__ClassLayout_enabled'] !== false;
            const assetId = AssetId_1.AssetId.create(frontmatter['exo__Asset_uid'] || file.path);
            if (assetId.isFailure)
                return null;
            const layoutResult = ClassLayout_1.ClassLayout.create({
                id: assetId.getValue(),
                targetClass: targetClassName.getValue(),
                blocks,
                isEnabled,
                priority
            });
            return layoutResult.isSuccess ? layoutResult.getValue() : null;
        });
    }
    parseBlocks(blocksData) {
        if (!Array.isArray(blocksData))
            return [];
        return blocksData.map((blockData, index) => {
            var _a;
            const block = {
                id: blockData.id || `block-${index}`,
                type: blockData.type || 'properties',
                title: blockData.title || 'Untitled Block',
                order: (_a = blockData.order) !== null && _a !== void 0 ? _a : index,
                config: this.parseBlockConfig(blockData.type, blockData.config || {}),
                isVisible: blockData.isVisible !== false
            };
            return block;
        }).filter(b => b !== null);
    }
    parseBlockConfig(type, config) {
        const baseConfig = Object.assign({ type }, config);
        switch (type) {
            case 'query':
                return {
                    type: 'query',
                    query: config.query || '',
                    className: config.className,
                    propertyFilters: this.parsePropertyFilters(config.propertyFilters),
                    relationProperty: config.relationProperty,
                    maxResults: config.maxResults || 50,
                    sortBy: config.sortBy,
                    sortOrder: config.sortOrder || 'asc',
                    displayAs: config.displayAs || 'list'
                };
            case 'properties':
                return {
                    type: 'properties',
                    includedProperties: config.includedProperties || [],
                    excludedProperties: config.excludedProperties || [],
                    editableProperties: config.editableProperties || [],
                    groupBy: config.groupBy
                };
            case 'relations':
                return {
                    type: 'relations',
                    relationProperty: config.relationProperty || '',
                    showBacklinks: config.showBacklinks !== false,
                    showForwardLinks: config.showForwardLinks !== false,
                    maxDepth: config.maxDepth || 1
                };
            case 'backlinks':
                return {
                    type: 'backlinks',
                    filterByClass: config.filterByClass,
                    groupByClass: config.groupByClass || false,
                    maxResults: config.maxResults || 50
                };
            case 'custom':
                return {
                    type: 'custom',
                    templatePath: config.templatePath,
                    dataviewQuery: config.dataviewQuery,
                    customScript: config.customScript
                };
            default:
                return baseConfig;
        }
    }
    parsePropertyFilters(filters) {
        if (!Array.isArray(filters))
            return [];
        return filters.map(filter => ({
            property: filter.property || '',
            operator: filter.operator || 'equals',
            value: filter.value || ''
        }));
    }
    cleanClassName(className) {
        if (!className)
            return '';
        const str = Array.isArray(className) ? className[0] : className;
        return (str === null || str === void 0 ? void 0 : str.toString().replace(/\[\[|\]\]/g, '')) || '';
    }
}
exports.ObsidianClassLayoutRepository = ObsidianClassLayoutRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,