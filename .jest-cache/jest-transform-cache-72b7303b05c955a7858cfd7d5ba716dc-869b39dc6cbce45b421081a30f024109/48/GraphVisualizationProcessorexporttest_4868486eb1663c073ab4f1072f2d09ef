6c5c36709c22af5cdc7ffeb9e079f04e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock Obsidian classes
jest.mock('obsidian');
const GraphVisualizationProcessor_1 = require("../../../../src/presentation/processors/GraphVisualizationProcessor");
const Graph_1 = require("../../../../src/domain/semantic/core/Graph");
const Triple_1 = require("../../../../src/domain/semantic/core/Triple");
// Mock global functions used in export functionality
global.XMLSerializer = class {
    serializeToString(node) {
        return '<svg>mock-svg-content</svg>';
    }
};
// Mock URL constructor for IRI validation
class MockURL {
    constructor(url) {
        if (!url || !url.startsWith('http')) {
            throw new Error('Invalid URL');
        }
    }
}
MockURL.createObjectURL = jest.fn(() => 'mock-blob-url');
MockURL.revokeObjectURL = jest.fn();
global.URL = MockURL;
// Mock HTMLCanvasElement and CanvasRenderingContext2D
const mockCanvas = {
    _width: 0,
    _height: 0,
    getContext: jest.fn(),
    toBlob: jest.fn(),
    get width() { return this._width; },
    set width(value) { this._width = value; },
    get height() { return this._height; },
    set height(value) { this._height = value; }
};
const mockContext = {
    scale: jest.fn(),
    fillStyle: '',
    fillRect: jest.fn(),
    strokeStyle: '',
    lineWidth: 0,
    strokeRect: jest.fn(),
    beginPath: jest.fn(),
    moveTo: jest.fn(),
    lineTo: jest.fn(),
    stroke: jest.fn(),
    arc: jest.fn(),
    fill: jest.fn(),
    measureText: jest.fn(() => ({ width: 50 })),
    fillText: jest.fn(),
    font: '',
    textAlign: '',
    imageSmoothingEnabled: true,
    imageSmoothingQuality: 'high'
};
global.document.createElement = jest.fn((tagName) => {
    if (tagName === 'canvas') {
        mockCanvas.getContext.mockReturnValue(mockContext);
        return mockCanvas;
    }
    if (tagName === 'a') {
        return {
            href: '',
            download: '',
            click: jest.fn(),
            style: { display: '' }
        };
    }
    return {
        style: { cssText: '', display: '', background: '' },
        className: '',
        textContent: '',
        appendChild: jest.fn(),
        querySelector: jest.fn(),
        addEventListener: jest.fn(),
        setAttribute: jest.fn(),
        getBBox: jest.fn(() => ({ x: 0, y: 0, width: 100, height: 20 }))
    };
});
// Mock getComputedStyle
global.getComputedStyle = jest.fn(() => ({
    getPropertyValue: jest.fn((prop) => {
        const colorMap = {
            '--background-primary': '#ffffff',
            '--background-modifier-border': '#e5e5e5',
            '--text-muted': '#6b7280',
            '--text-normal': '#000000',
            '--color-accent': '#7c3aed',
            '--color-blue': '#2563eb',
            '--color-green': '#059669'
        };
        return colorMap[prop] || '#000000';
    })
}));
describe('GraphVisualizationProcessor - Export Functionality', () => {
    let processor;
    let mockPlugin;
    let graph;
    beforeEach(() => {
        mockPlugin = {
            app: {
                workspace: {
                    openLinkText: jest.fn()
                }
            }
        };
        graph = new Graph_1.Graph();
        // Add test triples with simple valid IRIs
        try {
            graph.add(new Triple_1.Triple(new Triple_1.IRI('https://example.org/subject'), new Triple_1.IRI('https://example.org/predicate'), Triple_1.Literal.string('Test Object')));
        }
        catch (error) {
            // If IRI construction fails, skip it - tests will work with empty graph
            console.warn('IRI construction failed:', error);
        }
        processor = new GraphVisualizationProcessor_1.GraphVisualizationProcessor(mockPlugin, graph);
        // Reset mocks
        jest.clearAllMocks();
    });
    describe('PNG Export', () => {
        it('should create PNG export dropdown with resolution options', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            container.appendChild(svg);
            const data = {
                nodes: [
                    { id: 'node1', label: 'Test Node', type: 'subject', group: 1, x: 100, y: 100 }
                ],
                links: [
                    { source: 'node1', target: 'node2', label: 'test-relation', id: 'link1' }
                ]
            };
            const config = {
                showLabels: true,
                nodeSize: 8,
                linkDistance: 80
            };
            // Call the private method through reflection
            const createDropdown = processor.createPNGExportDropdown.bind(processor);
            const dropdown = createDropdown(container, data, config);
            expect(dropdown).toBeDefined();
            expect(dropdown.style.cssText).toContain('position: relative');
        }));
        it('should export PNG with standard resolution', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '800');
            svg.setAttribute('height', '600');
            container.appendChild(svg);
            // Ensure querySelector finds the SVG
            container.querySelector = jest.fn(() => svg);
            const data = {
                nodes: [
                    { id: 'node1', label: 'Test Node', type: 'subject', group: 1, x: 100, y: 100 }
                ],
                links: []
            };
            const config = {
                showLabels: true,
                nodeSize: 8
            };
            // Reset canvas dimensions
            mockCanvas._width = 0;
            mockCanvas._height = 0;
            // Mock canvas.toBlob to simulate successful PNG creation
            mockCanvas.toBlob.mockImplementation((callback) => {
                const mockBlob = new Blob(['mock-png-data'], { type: 'image/png' });
                Object.defineProperty(mockBlob, 'size', { value: 1024 });
                callback(mockBlob);
            });
            // Call export method
            yield processor.exportAsPNG(container, data, config, 1, 'test.png');
            expect(mockCanvas.getContext).toHaveBeenCalledWith('2d');
            // Canvas dimensions should be set by the export method
            expect(mockCanvas.toBlob).toHaveBeenCalledWith(expect.any(Function), 'image/png', 0.9);
        }));
        it('should export PNG with high resolution (2x)', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '800');
            svg.setAttribute('height', '600');
            container.appendChild(svg);
            // Ensure querySelector finds the SVG
            container.querySelector = jest.fn(() => svg);
            const data = {
                nodes: [
                    { id: 'node1', label: 'Test Node', type: 'subject', group: 1, x: 100, y: 100 }
                ],
                links: []
            };
            const config = { showLabels: true, nodeSize: 8 };
            mockCanvas.toBlob.mockImplementation((callback) => {
                const mockBlob = new Blob(['mock-png-data'], { type: 'image/png' });
                Object.defineProperty(mockBlob, 'size', { value: 4096 });
                callback(mockBlob);
            });
            yield processor.exportAsPNG(container, data, config, 2, 'test-hd.png');
            expect(mockCanvas.width).toBe(1600); // 800 * 2
            expect(mockCanvas.height).toBe(1200); // 600 * 2
            expect(mockContext.scale).toHaveBeenCalledWith(2, 2);
        }));
        it('should export PNG with 4K resolution (4x)', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '800');
            svg.setAttribute('height', '600');
            container.appendChild(svg);
            // Ensure querySelector finds the SVG
            container.querySelector = jest.fn(() => svg);
            const data = {
                nodes: [
                    { id: 'node1', label: 'Test Node', type: 'subject', group: 1, x: 100, y: 100 }
                ],
                links: []
            };
            const config = { showLabels: true, nodeSize: 8 };
            mockCanvas.toBlob.mockImplementation((callback) => {
                const mockBlob = new Blob(['mock-png-data'], { type: 'image/png' });
                Object.defineProperty(mockBlob, 'size', { value: 16384 });
                callback(mockBlob);
            });
            yield processor.exportAsPNG(container, data, config, 4, 'test-4k.png');
            expect(mockCanvas.width).toBe(3200); // 800 * 4
            expect(mockCanvas.height).toBe(2400); // 600 * 4
            expect(mockContext.scale).toHaveBeenCalledWith(4, 4);
        }));
        it('should handle PNG export errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '800');
            svg.setAttribute('height', '600');
            container.appendChild(svg);
            // Ensure querySelector finds the SVG
            container.querySelector = jest.fn(() => svg);
            const data = { nodes: [], links: [] };
            const config = { showLabels: true, nodeSize: 8 };
            // Mock canvas.toBlob to return null (failure case)
            mockCanvas.toBlob.mockImplementation((callback) => {
                callback(null);
            });
            // Should not throw error, but handle gracefully
            yield expect(processor.exportAsPNG(container, data, config, 1, 'test.png'))
                .resolves.toBeUndefined();
            expect(mockCanvas.toBlob).toHaveBeenCalled();
        }));
    });
    describe('SVG Export', () => {
        it('should export SVG successfully', () => {
            const container = document.createElement('div');
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            container.appendChild(svg);
            container.querySelector = jest.fn(() => svg);
            // Mock console.log to capture test environment behavior
            const originalConsoleLog = console.log;
            console.log = jest.fn();
            processor.exportAsSVG(container);
            // In test environment (JSDOM), it should log instead of download
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Test environment: Would download knowledge-graph.svg'));
            // Restore original console.log
            console.log = originalConsoleLog;
        });
        it('should handle missing SVG gracefully', () => {
            const container = document.createElement('div');
            container.querySelector = jest.fn(() => null);
            // Should not throw error
            expect(() => processor.exportAsSVG(container)).not.toThrow();
        });
    });
    describe('Canvas Rendering', () => {
        it('should render graph data to canvas', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const data = {
                nodes: [
                    { id: 'node1', label: 'Node 1', type: 'subject', group: 1, x: 100, y: 100 },
                    { id: 'node2', label: 'Node 2', type: 'object', group: 2, x: 200, y: 200 }
                ],
                links: [
                    { source: 'node1', target: 'node2', label: 'connects', id: 'link1' }
                ]
            };
            const config = {
                showLabels: true,
                nodeSize: 10
            };
            yield processor.renderGraphToCanvas(mockContext, data, config, 800, 600);
            // Verify nodes were rendered (using actual circular layout positions)
            expect(mockContext.beginPath).toHaveBeenCalled();
            // With circular layout: center=(400,300), radius=200
            // Node 1: 400 + 200*cos(0) = 600, 300 + 200*sin(0) = 300
            // Node 2: 400 + 200*cos(π) = 200, 300 + 200*sin(π) = 300  
            expect(mockContext.arc).toHaveBeenCalledWith(600, 300, 10, 0, 2 * Math.PI);
            expect(mockContext.arc).toHaveBeenCalledWith(200, 300, 10, 0, 2 * Math.PI);
            // Verify links were rendered (using actual positions)
            expect(mockContext.moveTo).toHaveBeenCalledWith(600, 300);
            expect(mockContext.lineTo).toHaveBeenCalledWith(200, 300);
            // Verify labels were rendered (using actual positions)
            expect(mockContext.fillText).toHaveBeenCalledWith('Node 1', 600, 325); // y + radius + 15
            expect(mockContext.fillText).toHaveBeenCalledWith('Node 2', 200, 325);
        }));
        it('should render without labels when disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const data = {
                nodes: [
                    { id: 'node1', label: 'Node 1', type: 'subject', group: 1, x: 100, y: 100 }
                ],
                links: []
            };
            const config = {
                showLabels: false,
                nodeSize: 10
            };
            yield processor.renderGraphToCanvas(mockContext, data, config, 800, 600);
            // Should render node but not label (using actual circular layout)
            // With circular layout: center=(400,300), radius=200, single node at 0 radians
            // Position: 400 + 200*cos(0) = 600, 300 + 200*sin(0) = 300
            expect(mockContext.arc).toHaveBeenCalledWith(600, 300, 10, 0, 2 * Math.PI);
            // Should not render node labels
            const fillTextCalls = mockContext.fillText.mock.calls.filter(call => call[0] === 'Node 1');
            expect(fillTextCalls).toHaveLength(0);
        }));
    });
    describe('Theme Integration', () => {
        it('should get theme colors correctly', () => {
            const color = processor.getThemeColor('--background-primary');
            expect(color).toBe('#ffffff');
        });
        it('should get node colors based on type', () => {
            const subjectColor = processor.getNodeCanvasColor('subject');
            const objectColor = processor.getNodeCanvasColor('object');
            const predicateColor = processor.getNodeCanvasColor('predicate');
            expect(subjectColor).toBe('#7c3aed'); // --color-accent
            expect(objectColor).toBe('#2563eb'); // --color-blue  
            expect(predicateColor).toBe('#059669'); // --color-green
        });
        it('should convert RGB colors to hex', () => {
            const hexColor = processor.rgbToHex('rgb(123, 58, 237)');
            expect(hexColor).toBe('#7b3aed');
        });
        it('should handle invalid RGB colors', () => {
            const hexColor = processor.rgbToHex('invalid-color');
            expect(hexColor).toBe('#000000');
        });
    });
    describe('File Download', () => {
        it('should download blob with correct filename', () => {
            const mockBlob = new Blob(['test'], { type: 'text/plain' });
            // Mock console.log to capture test environment behavior
            const originalConsoleLog = console.log;
            console.log = jest.fn();
            processor.downloadBlob(mockBlob, 'test-file.txt');
            // In test environment (JSDOM), it should log instead of download
            expect(console.log).toHaveBeenCalledWith(expect.stringContaining('Test environment: Would download test-file.txt (4 bytes)'));
            // Restore original console.log
            console.log = originalConsoleLog;
        });
    });
    describe('Arrow Head Rendering', () => {
        it('should draw arrow head correctly', () => {
            processor.drawArrowHead(mockContext, 100, 100, 200, 200);
            expect(mockContext.beginPath).toHaveBeenCalled();
            expect(mockContext.moveTo).toHaveBeenCalled();
            expect(mockContext.lineTo).toHaveBeenCalled();
            expect(mockContext.stroke).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,