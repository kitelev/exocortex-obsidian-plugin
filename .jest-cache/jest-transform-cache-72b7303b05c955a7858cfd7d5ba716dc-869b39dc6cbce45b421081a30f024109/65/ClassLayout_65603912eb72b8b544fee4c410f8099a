64ca16a637225946402d81bbdd14ddd0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassLayout = void 0;
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
class ClassLayout extends Entity_1.Entity {
    constructor(props) {
        super(props, props.id.toString());
    }
    generateId() {
        return this.props.id.toString();
    }
    validate() {
        if (!this.props.id) {
            throw new Error("ClassLayout must have a valid ID");
        }
        if (!this.props.targetClass) {
            throw new Error("ClassLayout must have a valid target class");
        }
        if (this.props.blocks.length > ClassLayout.MAX_BLOCKS) {
            throw new Error(`ClassLayout cannot have more than ${ClassLayout.MAX_BLOCKS} blocks`);
        }
    }
    static create(props) {
        if (!props.targetClass) {
            return Result_1.Result.fail("Target class is required");
        }
        if (props.blocks.length > ClassLayout.MAX_BLOCKS) {
            return Result_1.Result.fail(`Cannot have more than ${ClassLayout.MAX_BLOCKS} blocks`);
        }
        const orders = props.blocks.map((b) => b.order);
        const uniqueOrders = new Set(orders);
        if (uniqueOrders.size !== orders.length) {
            return Result_1.Result.fail("Blocks cannot have duplicate order values");
        }
        return Result_1.Result.ok(new ClassLayout(props));
    }
    get id() {
        return this.props.id;
    }
    get targetClass() {
        return this.props.targetClass;
    }
    get blocks() {
        return [...this.props.blocks].sort((a, b) => a.order - b.order);
    }
    get isEnabled() {
        return this.props.isEnabled;
    }
    get priority() {
        return this.props.priority;
    }
    addBlock(block) {
        if (this.props.blocks.length >= ClassLayout.MAX_BLOCKS) {
            return Result_1.Result.fail(`Cannot add more blocks. Maximum of ${ClassLayout.MAX_BLOCKS} reached`);
        }
        if (this.props.blocks.some((b) => b.id === block.id)) {
            return Result_1.Result.fail("Block with this ID already exists");
        }
        if (this.props.blocks.some((b) => b.order === block.order)) {
            return Result_1.Result.fail(`Block with order ${block.order} already exists`);
        }
        this.props.blocks.push(block);
        return Result_1.Result.ok();
    }
    removeBlock(blockId) {
        const blockIndex = this.props.blocks.findIndex((b) => b.id === blockId);
        if (blockIndex === -1) {
            return Result_1.Result.fail("Block not found");
        }
        this.props.blocks.splice(blockIndex, 1);
        return Result_1.Result.ok();
    }
    updateBlock(blockId, updates) {
        const block = this.props.blocks.find((b) => b.id === blockId);
        if (!block) {
            return Result_1.Result.fail("Block not found");
        }
        if (updates.order !== undefined && updates.order !== block.order) {
            if (this.props.blocks.some((b) => b.id !== blockId && b.order === updates.order)) {
                return Result_1.Result.fail(`Block with order ${updates.order} already exists`);
            }
        }
        Object.assign(block, updates);
        return Result_1.Result.ok();
    }
    getVisibleBlocks() {
        return this.blocks.filter((b) => b.isVisible);
    }
    enable() {
        this.props.isEnabled = true;
    }
    disable() {
        this.props.isEnabled = false;
    }
}
exports.ClassLayout = ClassLayout;
ClassLayout.MAX_BLOCKS = 20;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,