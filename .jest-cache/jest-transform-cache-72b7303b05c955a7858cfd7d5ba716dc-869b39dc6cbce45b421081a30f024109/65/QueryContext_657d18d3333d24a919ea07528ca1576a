3b6b210b314f93514b74dbc692c6364c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryContext = exports.ClauseType = exports.QueryType = void 0;
var QueryType;
(function (QueryType) {
    QueryType["SELECT"] = "SELECT";
    QueryType["CONSTRUCT"] = "CONSTRUCT";
    QueryType["ASK"] = "ASK";
    QueryType["DESCRIBE"] = "DESCRIBE";
    QueryType["INSERT"] = "INSERT";
    QueryType["DELETE"] = "DELETE";
})(QueryType = exports.QueryType || (exports.QueryType = {}));
var ClauseType;
(function (ClauseType) {
    ClauseType["SELECT"] = "SELECT";
    ClauseType["WHERE"] = "WHERE";
    ClauseType["FILTER"] = "FILTER";
    ClauseType["OPTIONAL"] = "OPTIONAL";
    ClauseType["UNION"] = "UNION";
    ClauseType["ORDER_BY"] = "ORDER_BY";
    ClauseType["GROUP_BY"] = "GROUP_BY";
    ClauseType["LIMIT"] = "LIMIT";
    ClauseType["OFFSET"] = "OFFSET";
    ClauseType["PREFIX"] = "PREFIX";
})(ClauseType = exports.ClauseType || (exports.ClauseType = {}));
class QueryContext {
    constructor(query, cursorPosition, currentToken, previousTokens, queryType, currentClause, clauses) {
        this.query = query;
        this.cursorPosition = cursorPosition;
        this.currentToken = currentToken;
        this.previousTokens = previousTokens;
        this.queryType = queryType;
        this.currentClause = currentClause;
        this.clauses = clauses;
        Object.freeze(this);
    }
    getQuery() {
        return this.query;
    }
    getCursorPosition() {
        return this.cursorPosition;
    }
    getCurrentToken() {
        return this.currentToken;
    }
    getPreviousTokens() {
        return [...this.previousTokens];
    }
    getQueryType() {
        return this.queryType;
    }
    getCurrentClause() {
        return this.currentClause;
    }
    getClauses() {
        return [...this.clauses];
    }
    isInClause(clauseType) {
        return this.currentClause === clauseType;
    }
    isAfterClause(clauseType) {
        const clauseIndex = this.clauses.findIndex((c) => c.type === clauseType);
        if (clauseIndex === -1)
            return false;
        const clause = this.clauses[clauseIndex];
        return this.cursorPosition > clause.endPosition;
    }
    getVariablesInScope() {
        const variables = new Set();
        for (const clause of this.clauses) {
            if (clause.endPosition < this.cursorPosition) {
                clause.variables.forEach((v) => variables.add(v));
            }
        }
        return Array.from(variables);
    }
    isStartOfQuery() {
        const trimmedQuery = this.query.substring(0, this.cursorPosition).trim();
        return (trimmedQuery.length === 0 ||
            trimmedQuery.length === this.currentToken.length);
    }
    static create(params) {
        return new QueryContext(params.query, params.cursorPosition, params.currentToken || "", params.previousTokens || [], params.queryType || null, params.currentClause || null, params.clauses || []);
    }
}
exports.QueryContext = QueryContext;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9hdXRvY29tcGxldGUvUXVlcnlDb250ZXh0LnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLElBQVksU0FPWDtBQVBELFdBQVksU0FBUztJQUNuQiw4QkFBaUIsQ0FBQTtJQUNqQixvQ0FBdUIsQ0FBQTtJQUN2Qix3QkFBVyxDQUFBO0lBQ1gsa0NBQXFCLENBQUE7SUFDckIsOEJBQWlCLENBQUE7SUFDakIsOEJBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQVBXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBT3BCO0FBRUQsSUFBWSxVQVdYO0FBWEQsV0FBWSxVQUFVO0lBQ3BCLCtCQUFpQixDQUFBO0lBQ2pCLDZCQUFlLENBQUE7SUFDZiwrQkFBaUIsQ0FBQTtJQUNqQixtQ0FBcUIsQ0FBQTtJQUNyQiw2QkFBZSxDQUFBO0lBQ2YsbUNBQXFCLENBQUE7SUFDckIsbUNBQXFCLENBQUE7SUFDckIsNkJBQWUsQ0FBQTtJQUNmLCtCQUFpQixDQUFBO0lBQ2pCLCtCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFYVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQVdyQjtBQVVELE1BQWEsWUFBWTtJQUN2QixZQUNtQixLQUFhLEVBQ2IsY0FBc0IsRUFDdEIsWUFBb0IsRUFDcEIsY0FBd0IsRUFDeEIsU0FBMkIsRUFDM0IsYUFBZ0MsRUFDaEMsT0FBc0I7UUFOdEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBQ3RCLGlCQUFZLEdBQVosWUFBWSxDQUFRO1FBQ3BCLG1CQUFjLEdBQWQsY0FBYyxDQUFVO1FBQ3hCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGtCQUFhLEdBQWIsYUFBYSxDQUFtQjtRQUNoQyxZQUFPLEdBQVAsT0FBTyxDQUFlO1FBRXZDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELFVBQVUsQ0FBQyxVQUFzQjtRQUMvQixPQUFPLElBQUksQ0FBQyxhQUFhLEtBQUssVUFBVSxDQUFDO0lBQzNDLENBQUM7SUFFRCxhQUFhLENBQUMsVUFBc0I7UUFDbEMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUM7UUFDekUsSUFBSSxXQUFXLEtBQUssQ0FBQyxDQUFDO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFckMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QyxPQUFPLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUNsRCxDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFFcEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pDLElBQUksTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUM1QyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25EO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELGNBQWM7UUFDWixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pFLE9BQU8sQ0FDTCxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUM7WUFDekIsWUFBWSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FDakQsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BUWI7UUFDQyxPQUFPLElBQUksWUFBWSxDQUNyQixNQUFNLENBQUMsS0FBSyxFQUNaLE1BQU0sQ0FBQyxjQUFjLEVBQ3JCLE1BQU0sQ0FBQyxZQUFZLElBQUksRUFBRSxFQUN6QixNQUFNLENBQUMsY0FBYyxJQUFJLEVBQUUsRUFDM0IsTUFBTSxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQ3hCLE1BQU0sQ0FBQyxhQUFhLElBQUksSUFBSSxFQUM1QixNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FDckIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTVGRCxvQ0E0RkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9hdXRvY29tcGxldGUvUXVlcnlDb250ZXh0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIFF1ZXJ5VHlwZSB7XG4gIFNFTEVDVCA9IFwiU0VMRUNUXCIsXG4gIENPTlNUUlVDVCA9IFwiQ09OU1RSVUNUXCIsXG4gIEFTSyA9IFwiQVNLXCIsXG4gIERFU0NSSUJFID0gXCJERVNDUklCRVwiLFxuICBJTlNFUlQgPSBcIklOU0VSVFwiLFxuICBERUxFVEUgPSBcIkRFTEVURVwiLFxufVxuXG5leHBvcnQgZW51bSBDbGF1c2VUeXBlIHtcbiAgU0VMRUNUID0gXCJTRUxFQ1RcIixcbiAgV0hFUkUgPSBcIldIRVJFXCIsXG4gIEZJTFRFUiA9IFwiRklMVEVSXCIsXG4gIE9QVElPTkFMID0gXCJPUFRJT05BTFwiLFxuICBVTklPTiA9IFwiVU5JT05cIixcbiAgT1JERVJfQlkgPSBcIk9SREVSX0JZXCIsXG4gIEdST1VQX0JZID0gXCJHUk9VUF9CWVwiLFxuICBMSU1JVCA9IFwiTElNSVRcIixcbiAgT0ZGU0VUID0gXCJPRkZTRVRcIixcbiAgUFJFRklYID0gXCJQUkVGSVhcIixcbn1cblxuZXhwb3J0IGludGVyZmFjZSBRdWVyeUNsYXVzZSB7XG4gIHR5cGU6IENsYXVzZVR5cGU7XG4gIHN0YXJ0UG9zaXRpb246IG51bWJlcjtcbiAgZW5kUG9zaXRpb246IG51bWJlcjtcbiAgdmFyaWFibGVzOiBzdHJpbmdbXTtcbiAgY29udGVudDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgUXVlcnlDb250ZXh0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBxdWVyeTogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY3Vyc29yUG9zaXRpb246IG51bWJlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGN1cnJlbnRUb2tlbjogc3RyaW5nLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJldmlvdXNUb2tlbnM6IHN0cmluZ1tdLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcXVlcnlUeXBlOiBRdWVyeVR5cGUgfCBudWxsLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY3VycmVudENsYXVzZTogQ2xhdXNlVHlwZSB8IG51bGwsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjbGF1c2VzOiBRdWVyeUNsYXVzZVtdLFxuICApIHtcbiAgICBPYmplY3QuZnJlZXplKHRoaXMpO1xuICB9XG5cbiAgZ2V0UXVlcnkoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeTtcbiAgfVxuXG4gIGdldEN1cnNvclBvc2l0aW9uKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zaXRpb247XG4gIH1cblxuICBnZXRDdXJyZW50VG9rZW4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50VG9rZW47XG4gIH1cblxuICBnZXRQcmV2aW91c1Rva2VucygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnByZXZpb3VzVG9rZW5zXTtcbiAgfVxuXG4gIGdldFF1ZXJ5VHlwZSgpOiBRdWVyeVR5cGUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVR5cGU7XG4gIH1cblxuICBnZXRDdXJyZW50Q2xhdXNlKCk6IENsYXVzZVR5cGUgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2xhdXNlO1xuICB9XG5cbiAgZ2V0Q2xhdXNlcygpOiBRdWVyeUNsYXVzZVtdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuY2xhdXNlc107XG4gIH1cblxuICBpc0luQ2xhdXNlKGNsYXVzZVR5cGU6IENsYXVzZVR5cGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2xhdXNlID09PSBjbGF1c2VUeXBlO1xuICB9XG5cbiAgaXNBZnRlckNsYXVzZShjbGF1c2VUeXBlOiBDbGF1c2VUeXBlKTogYm9vbGVhbiB7XG4gICAgY29uc3QgY2xhdXNlSW5kZXggPSB0aGlzLmNsYXVzZXMuZmluZEluZGV4KChjKSA9PiBjLnR5cGUgPT09IGNsYXVzZVR5cGUpO1xuICAgIGlmIChjbGF1c2VJbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICAgIGNvbnN0IGNsYXVzZSA9IHRoaXMuY2xhdXNlc1tjbGF1c2VJbmRleF07XG4gICAgcmV0dXJuIHRoaXMuY3Vyc29yUG9zaXRpb24gPiBjbGF1c2UuZW5kUG9zaXRpb247XG4gIH1cblxuICBnZXRWYXJpYWJsZXNJblNjb3BlKCk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCB2YXJpYWJsZXMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAgIGZvciAoY29uc3QgY2xhdXNlIG9mIHRoaXMuY2xhdXNlcykge1xuICAgICAgaWYgKGNsYXVzZS5lbmRQb3NpdGlvbiA8IHRoaXMuY3Vyc29yUG9zaXRpb24pIHtcbiAgICAgICAgY2xhdXNlLnZhcmlhYmxlcy5mb3JFYWNoKCh2KSA9PiB2YXJpYWJsZXMuYWRkKHYpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YXJpYWJsZXMpO1xuICB9XG5cbiAgaXNTdGFydE9mUXVlcnkoKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdHJpbW1lZFF1ZXJ5ID0gdGhpcy5xdWVyeS5zdWJzdHJpbmcoMCwgdGhpcy5jdXJzb3JQb3NpdGlvbikudHJpbSgpO1xuICAgIHJldHVybiAoXG4gICAgICB0cmltbWVkUXVlcnkubGVuZ3RoID09PSAwIHx8XG4gICAgICB0cmltbWVkUXVlcnkubGVuZ3RoID09PSB0aGlzLmN1cnJlbnRUb2tlbi5sZW5ndGhcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXJhbXM6IHtcbiAgICBxdWVyeTogc3RyaW5nO1xuICAgIGN1cnNvclBvc2l0aW9uOiBudW1iZXI7XG4gICAgY3VycmVudFRva2VuPzogc3RyaW5nO1xuICAgIHByZXZpb3VzVG9rZW5zPzogc3RyaW5nW107XG4gICAgcXVlcnlUeXBlPzogUXVlcnlUeXBlIHwgbnVsbDtcbiAgICBjdXJyZW50Q2xhdXNlPzogQ2xhdXNlVHlwZSB8IG51bGw7XG4gICAgY2xhdXNlcz86IFF1ZXJ5Q2xhdXNlW107XG4gIH0pOiBRdWVyeUNvbnRleHQge1xuICAgIHJldHVybiBuZXcgUXVlcnlDb250ZXh0KFxuICAgICAgcGFyYW1zLnF1ZXJ5LFxuICAgICAgcGFyYW1zLmN1cnNvclBvc2l0aW9uLFxuICAgICAgcGFyYW1zLmN1cnJlbnRUb2tlbiB8fCBcIlwiLFxuICAgICAgcGFyYW1zLnByZXZpb3VzVG9rZW5zIHx8IFtdLFxuICAgICAgcGFyYW1zLnF1ZXJ5VHlwZSB8fCBudWxsLFxuICAgICAgcGFyYW1zLmN1cnJlbnRDbGF1c2UgfHwgbnVsbCxcbiAgICAgIHBhcmFtcy5jbGF1c2VzIHx8IFtdLFxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==