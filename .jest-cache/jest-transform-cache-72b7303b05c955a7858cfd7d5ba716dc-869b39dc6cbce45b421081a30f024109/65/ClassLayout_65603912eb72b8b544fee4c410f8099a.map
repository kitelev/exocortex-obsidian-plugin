{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/ClassLayout.ts","mappings":";;;AAAA,2CAAwC;AAGxC,2CAAwC;AAsBxC,MAAa,WAAY,SAAQ,eAAwB;IAGvD,YAAoB,KAAuB;QACzC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;IACpC,CAAC;IAES,UAAU;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAES,QAAQ;QAChB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;SAC/D;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE;YACrD,MAAM,IAAI,KAAK,CACb,qCAAqC,WAAW,CAAC,UAAU,SAAS,CACrE,CAAC;SACH;IACH,CAAC;IAEM,MAAM,CAAC,MAAM,CAAC,KAAuB;QAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACtB,OAAO,eAAM,CAAC,IAAI,CAAc,0BAA0B,CAAC,CAAC;SAC7D;QAED,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE;YAChD,OAAO,eAAM,CAAC,IAAI,CAChB,yBAAyB,WAAW,CAAC,UAAU,SAAS,CACzD,CAAC;SACH;QAED,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAChD,MAAM,YAAY,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;QACrC,IAAI,YAAY,CAAC,IAAI,KAAK,MAAM,CAAC,MAAM,EAAE;YACvC,OAAO,eAAM,CAAC,IAAI,CAChB,2CAA2C,CAC5C,CAAC;SACH;QAED,OAAO,eAAM,CAAC,EAAE,CAAc,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,EAAE;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;IACvB,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC;IAChC,CAAC;IAED,IAAI,MAAM;QACR,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IAClE,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAC9B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;IAC7B,CAAC;IAEM,QAAQ,CAAC,KAAwB;QACtC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,UAAU,EAAE;YACtD,OAAO,eAAM,CAAC,IAAI,CAChB,sCAAsC,WAAW,CAAC,UAAU,UAAU,CACvE,CAAC;SACH;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,EAAE;YACpD,OAAO,eAAM,CAAC,IAAI,CAAO,mCAAmC,CAAC,CAAC;SAC/D;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,EAAE;YAC1D,OAAO,eAAM,CAAC,IAAI,CAChB,oBAAoB,KAAK,CAAC,KAAK,iBAAiB,CACjD,CAAC;SACH;QAED,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,OAAO,eAAM,CAAC,EAAE,EAAQ,CAAC;IAC3B,CAAC;IAEM,WAAW,CAAC,OAAe;QAChC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QAExE,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACrB,OAAO,eAAM,CAAC,IAAI,CAAO,iBAAiB,CAAC,CAAC;SAC7C;QAED,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QACxC,OAAO,eAAM,CAAC,EAAE,EAAQ,CAAC;IAC3B,CAAC;IAEM,WAAW,CAChB,OAAe,EACf,OAAmC;QAEnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;QAE9D,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,eAAM,CAAC,IAAI,CAAO,iBAAiB,CAAC,CAAC;SAC7C;QAED,IAAI,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,OAAO,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,EAAE;YAChE,IACE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CACpB,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,IAAI,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CACrD,EACD;gBACA,OAAO,eAAM,CAAC,IAAI,CAChB,oBAAoB,OAAO,CAAC,KAAK,iBAAiB,CACnD,CAAC;aACH;SACF;QAED,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC9B,OAAO,eAAM,CAAC,EAAE,EAAQ,CAAC;IAC3B,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAChD,CAAC;IAEM,MAAM;QACX,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;IAC/B,CAAC;;AAzIH,kCA0IC;AAzIyB,sBAAU,GAAG,EAAE,CAAC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/ClassLayout.ts"],"sourcesContent":["import { Entity } from \"../core/Entity\";\nimport { AssetId } from \"../value-objects/AssetId\";\nimport { ClassName } from \"../value-objects/ClassName\";\nimport { Result } from \"../core/Result\";\nimport { BlockType } from \"./LayoutBlock\";\n\nexport interface LayoutBlockConfig {\n  id: string;\n  type: BlockType;\n  title: string;\n  order: number;\n  config: Record<string, any>;\n  isVisible: boolean;\n  isCollapsible?: boolean;\n  isCollapsed?: boolean;\n}\n\nexport interface ClassLayoutProps {\n  id: AssetId;\n  targetClass: ClassName;\n  blocks: LayoutBlockConfig[];\n  isEnabled: boolean;\n  priority: number;\n}\n\nexport class ClassLayout extends Entity<ClassLayoutProps> {\n  private static readonly MAX_BLOCKS = 20;\n\n  private constructor(props: ClassLayoutProps) {\n    super(props, props.id.toString());\n  }\n\n  protected generateId(): string {\n    return this.props.id.toString();\n  }\n\n  protected validate(): void {\n    if (!this.props.id) {\n      throw new Error(\"ClassLayout must have a valid ID\");\n    }\n\n    if (!this.props.targetClass) {\n      throw new Error(\"ClassLayout must have a valid target class\");\n    }\n\n    if (this.props.blocks.length > ClassLayout.MAX_BLOCKS) {\n      throw new Error(\n        `ClassLayout cannot have more than ${ClassLayout.MAX_BLOCKS} blocks`,\n      );\n    }\n  }\n\n  public static create(props: ClassLayoutProps): Result<ClassLayout> {\n    if (!props.targetClass) {\n      return Result.fail<ClassLayout>(\"Target class is required\");\n    }\n\n    if (props.blocks.length > ClassLayout.MAX_BLOCKS) {\n      return Result.fail<ClassLayout>(\n        `Cannot have more than ${ClassLayout.MAX_BLOCKS} blocks`,\n      );\n    }\n\n    const orders = props.blocks.map((b) => b.order);\n    const uniqueOrders = new Set(orders);\n    if (uniqueOrders.size !== orders.length) {\n      return Result.fail<ClassLayout>(\n        \"Blocks cannot have duplicate order values\",\n      );\n    }\n\n    return Result.ok<ClassLayout>(new ClassLayout(props));\n  }\n\n  get id(): AssetId {\n    return this.props.id;\n  }\n\n  get targetClass(): ClassName {\n    return this.props.targetClass;\n  }\n\n  get blocks(): LayoutBlockConfig[] {\n    return [...this.props.blocks].sort((a, b) => a.order - b.order);\n  }\n\n  get isEnabled(): boolean {\n    return this.props.isEnabled;\n  }\n\n  get priority(): number {\n    return this.props.priority;\n  }\n\n  public addBlock(block: LayoutBlockConfig): Result<void> {\n    if (this.props.blocks.length >= ClassLayout.MAX_BLOCKS) {\n      return Result.fail<void>(\n        `Cannot add more blocks. Maximum of ${ClassLayout.MAX_BLOCKS} reached`,\n      );\n    }\n\n    if (this.props.blocks.some((b) => b.id === block.id)) {\n      return Result.fail<void>(\"Block with this ID already exists\");\n    }\n\n    if (this.props.blocks.some((b) => b.order === block.order)) {\n      return Result.fail<void>(\n        `Block with order ${block.order} already exists`,\n      );\n    }\n\n    this.props.blocks.push(block);\n    return Result.ok<void>();\n  }\n\n  public removeBlock(blockId: string): Result<void> {\n    const blockIndex = this.props.blocks.findIndex((b) => b.id === blockId);\n\n    if (blockIndex === -1) {\n      return Result.fail<void>(\"Block not found\");\n    }\n\n    this.props.blocks.splice(blockIndex, 1);\n    return Result.ok<void>();\n  }\n\n  public updateBlock(\n    blockId: string,\n    updates: Partial<LayoutBlockConfig>,\n  ): Result<void> {\n    const block = this.props.blocks.find((b) => b.id === blockId);\n\n    if (!block) {\n      return Result.fail<void>(\"Block not found\");\n    }\n\n    if (updates.order !== undefined && updates.order !== block.order) {\n      if (\n        this.props.blocks.some(\n          (b) => b.id !== blockId && b.order === updates.order,\n        )\n      ) {\n        return Result.fail<void>(\n          `Block with order ${updates.order} already exists`,\n        );\n      }\n    }\n\n    Object.assign(block, updates);\n    return Result.ok<void>();\n  }\n\n  public getVisibleBlocks(): LayoutBlockConfig[] {\n    return this.blocks.filter((b) => b.isVisible);\n  }\n\n  public enable(): void {\n    this.props.isEnabled = true;\n  }\n\n  public disable(): void {\n    this.props.isEnabled = false;\n  }\n}\n"],"version":3}