264a10f781b3e263b20907084391ee85
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskId = void 0;
const Result_1 = require("../core/Result");
/**
 * Value object representing a unique task identifier
 * Immutable and self-validating UUID-based identifier
 */
class TaskId {
    constructor(value) {
        this.value = value;
    }
    static create(value) {
        if (!value || value.trim().length === 0) {
            return Result_1.Result.fail('TaskId cannot be empty');
        }
        // Validate UUID format
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(value)) {
            return Result_1.Result.fail('TaskId must be a valid UUID');
        }
        return Result_1.Result.ok(new TaskId(value));
    }
    static generate() {
        const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return new TaskId(uuid);
    }
    toString() {
        return this.value;
    }
    equals(other) {
        return this.value === other.value;
    }
}
exports.TaskId = TaskId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL1Rhc2tJZC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBd0M7QUFFeEM7OztHQUdHO0FBQ0gsTUFBYSxNQUFNO0lBR2pCLFlBQW9CLEtBQWE7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZDLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBUyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsdUJBQXVCO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLDRFQUE0RSxDQUFDO1FBQy9GLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBUyw2QkFBNkIsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsT0FBTyxlQUFNLENBQUMsRUFBRSxDQUFTLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRO1FBQ2IsTUFBTSxJQUFJLEdBQUcsc0NBQXNDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3pFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQzFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFhO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQXJDRCx3QkFxQ0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL1Rhc2tJZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXN1bHQgfSBmcm9tICcuLi9jb3JlL1Jlc3VsdCc7XG5cbi8qKlxuICogVmFsdWUgb2JqZWN0IHJlcHJlc2VudGluZyBhIHVuaXF1ZSB0YXNrIGlkZW50aWZpZXJcbiAqIEltbXV0YWJsZSBhbmQgc2VsZi12YWxpZGF0aW5nIFVVSUQtYmFzZWQgaWRlbnRpZmllclxuICovXG5leHBvcnQgY2xhc3MgVGFza0lkIHtcbiAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUodmFsdWU6IHN0cmluZyk6IFJlc3VsdDxUYXNrSWQ+IHtcbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxUYXNrSWQ+KCdUYXNrSWQgY2Fubm90IGJlIGVtcHR5Jyk7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgVVVJRCBmb3JtYXRcbiAgICBjb25zdCB1dWlkUmVnZXggPSAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pO1xuICAgIGlmICghdXVpZFJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWw8VGFza0lkPignVGFza0lkIG11c3QgYmUgYSB2YWxpZCBVVUlEJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlc3VsdC5vazxUYXNrSWQ+KG5ldyBUYXNrSWQodmFsdWUpKTtcbiAgfVxuXG4gIHN0YXRpYyBnZW5lcmF0ZSgpOiBUYXNrSWQge1xuICAgIGNvbnN0IHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgICBjb25zdCByID0gTWF0aC5yYW5kb20oKSAqIDE2IHwgMDtcbiAgICAgIGNvbnN0IHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgVGFza0lkKHV1aWQpO1xuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIGVxdWFscyhvdGhlcjogVGFza0lkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IG90aGVyLnZhbHVlO1xuICB9XG59Il0sInZlcnNpb24iOjN9