69862d44aca96620dd5e6c8ce3f57788
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Priority = exports.PriorityLevel = void 0;
const Result_1 = require("../core/Result");
var PriorityLevel;
(function (PriorityLevel) {
    PriorityLevel["LOW"] = "low";
    PriorityLevel["MEDIUM"] = "medium";
    PriorityLevel["HIGH"] = "high";
    PriorityLevel["URGENT"] = "urgent";
})(PriorityLevel = exports.PriorityLevel || (exports.PriorityLevel = {}));
/**
 * Value object representing task priority
 * Immutable and self-validating with business rules
 * Follows Clean Architecture principles with comprehensive validation
 */
class Priority {
    constructor(level) {
        this.level = level;
    }
    static create(value) {
        const validationResult = this.validateInput(value);
        if (!validationResult.isSuccess) {
            return Result_1.Result.fail(validationResult.getError());
        }
        const normalizedLevel = this.normalizeValue(value);
        if (!this.isValidLevel(normalizedLevel)) {
            return Result_1.Result.fail(`Priority must be one of: ${Array.from(this.VALID_LEVELS).join(", ")}`);
        }
        return Result_1.Result.ok(this.getOrCreateInstance(normalizedLevel));
    }
    static validateInput(value) {
        if (value === null || value === undefined || value === "") {
            return Result_1.Result.fail("Priority cannot be empty");
        }
        return Result_1.Result.ok(undefined);
    }
    static normalizeValue(value) {
        return typeof value === "string" ? value.toLowerCase().trim() : value;
    }
    static isValidLevel(value) {
        return this.VALID_LEVELS.has(value);
    }
    static getOrCreateInstance(level) {
        if (!this.LEVEL_CACHE.has(level)) {
            this.LEVEL_CACHE.set(level, new Priority(level));
        }
        return this.LEVEL_CACHE.get(level);
    }
    static low() {
        return this.getOrCreateInstance(PriorityLevel.LOW);
    }
    static medium() {
        return this.getOrCreateInstance(PriorityLevel.MEDIUM);
    }
    static high() {
        return this.getOrCreateInstance(PriorityLevel.HIGH);
    }
    static urgent() {
        return this.getOrCreateInstance(PriorityLevel.URGENT);
    }
    static getAllLevels() {
        return Object.values(PriorityLevel);
    }
    getLevel() {
        return this.level;
    }
    toString() {
        return this.level;
    }
    equals(other) {
        return other !== null && other !== undefined && this.level === other.level;
    }
    /**
     * Returns hash code for use in collections
     */
    hashCode() {
        return this.getNumericValue();
    }
    /**
     * Returns numeric value for sorting (higher number = higher priority)
     * Uses cached values for optimal performance
     */
    getNumericValue() {
        return Priority.NUMERIC_VALUES.get(this.level);
    }
    /**
     * Compares priorities for sorting
     * Returns negative if this < other, positive if this > other, 0 if equal
     */
    compare(other) {
        return this.getNumericValue() - other.getNumericValue();
    }
    isHigherThan(other) {
        return this.getNumericValue() > other.getNumericValue();
    }
    isLowerThan(other) {
        return this.getNumericValue() < other.getNumericValue();
    }
}
exports.Priority = Priority;
Priority.VALID_LEVELS = new Set(Object.values(PriorityLevel));
Priority.LEVEL_CACHE = new Map();
Priority.NUMERIC_VALUES = new Map([
    [PriorityLevel.LOW, 1],
    [PriorityLevel.MEDIUM, 2],
    [PriorityLevel.HIGH, 3],
    [PriorityLevel.URGENT, 4],
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,