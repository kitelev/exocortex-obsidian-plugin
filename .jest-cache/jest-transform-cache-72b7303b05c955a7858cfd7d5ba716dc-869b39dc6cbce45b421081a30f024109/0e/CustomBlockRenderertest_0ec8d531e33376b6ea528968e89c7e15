666442d7f47989ca6e5938659e6b0ca1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const CustomBlockRenderer_1 = require("../../../../src/presentation/renderers/CustomBlockRenderer");
const obsidian_1 = require("../../../__mocks__/obsidian");
describe('CustomBlockRenderer', () => {
    let renderer;
    let mockVault;
    let mockApp;
    let mockFile;
    beforeEach(() => {
        mockVault = new obsidian_1.Vault();
        mockApp = new obsidian_1.App();
        mockFile = new obsidian_1.TFile();
        mockFile.path = 'test.md';
        mockFile.basename = 'test';
        renderer = new CustomBlockRenderer_1.CustomBlockRenderer(mockApp);
    });
    describe('render', () => {
        it('should handle empty config', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('Custom block has no content configured');
        }));
        it('should handle custom script config', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                customScript: 'container.innerHTML = "<div>Script executed</div>";'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('Script executed');
        }));
        it('should handle template path config', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                templatePath: 'templates/test.md'
            };
            // Mock template file not found scenario
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('Template not found');
        }));
        it('should handle dataview query config', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                dataviewQuery: 'table file.name from ""'
            };
            const mockDv = {
                pages: jest.fn().mockReturnValue([]),
                table: jest.fn(),
                list: jest.fn()
            };
            yield renderer.render(container, config, mockFile, {}, mockDv);
            expect(mockDv.pages).toHaveBeenCalled();
        }));
        it('should handle script execution errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                customScript: 'throw new Error("Test error");'
            };
            yield expect(renderer.render(container, config, mockFile, {}, null)).resolves.not.toThrow();
            expect(container.textContent).toContain('Script execution error');
        }));
        it('should handle dataview not available', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                dataviewQuery: 'table file.name from ""'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('Dataview is not available');
        }));
        it('should process template variables', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                customScript: `
                    const processed = this.renderer.processTemplateVariables ? 
                        'Variables processed' : 'No template processing';
                    container.innerHTML = processed;
                `
            };
            yield renderer.render(container, config, mockFile, { title: 'Test' }, null);
            // Should complete without throwing
            expect(container).toBeDefined();
        }));
    });
    describe('error handling', () => {
        it('should handle render errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = null;
            yield expect(renderer.render(container, config, mockFile, {}, null)).resolves.not.toThrow();
            expect(container.textContent).toContain('Error rendering custom block');
        }));
        it('should handle invalid template path', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = document.createElement('div');
            const config = {
                type: 'custom',
                templatePath: 'nonexistent/template.md'
            };
            yield renderer.render(container, config, mockFile, {}, null);
            expect(container.textContent).toContain('Template not found');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,