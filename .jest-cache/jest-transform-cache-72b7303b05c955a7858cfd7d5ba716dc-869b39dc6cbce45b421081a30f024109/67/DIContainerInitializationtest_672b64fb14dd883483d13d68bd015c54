7060693b958ca28ee2c50be9f3554e6f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const DIContainer_1 = require("../../src/infrastructure/container/DIContainer");
describe('DIContainer Initialization', () => {
    let mockApp;
    beforeEach(() => {
        // Reset the singleton instance for clean tests
        DIContainer_1.DIContainer.reset();
        // Create mock app
        mockApp = {
            vault: {
                getMarkdownFiles: jest.fn().mockReturnValue([]),
                getFiles: jest.fn().mockReturnValue([]),
                getAbstractFileByPath: jest.fn(),
                read: jest.fn().mockResolvedValue(''),
                modify: jest.fn().mockResolvedValue(undefined),
                create: jest.fn().mockResolvedValue({}),
                delete: jest.fn().mockResolvedValue(undefined),
                rename: jest.fn().mockResolvedValue(undefined)
            },
            workspace: {
                getActiveFile: jest.fn(),
                openLinkText: jest.fn()
            },
            metadataCache: {
                getFileCache: jest.fn()
            }
        };
    });
    afterEach(() => {
        // Clean up singleton
        DIContainer_1.DIContainer.instance = undefined;
    });
    describe('Singleton Pattern', () => {
        it('should throw error when getInstance is called before initialize', () => {
            expect(() => {
                DIContainer_1.DIContainer.getInstance();
            }).toThrow('DIContainer not initialized. Call initialize(app) first.');
        });
        it('should initialize correctly with app parameter', () => {
            const container = DIContainer_1.DIContainer.initialize(mockApp);
            expect(container).toBeDefined();
            expect(container).toBeInstanceOf(DIContainer_1.DIContainer);
        });
        it('should return same instance on multiple initialize calls', () => {
            const container1 = DIContainer_1.DIContainer.initialize(mockApp);
            const container2 = DIContainer_1.DIContainer.initialize(mockApp);
            expect(container1).toBe(container2);
        });
        it('should return same instance via getInstance after initialization', () => {
            const container1 = DIContainer_1.DIContainer.initialize(mockApp);
            const container2 = DIContainer_1.DIContainer.getInstance();
            expect(container1).toBe(container2);
        });
        it('should accept plugin parameter in initialize', () => {
            const mockPlugin = { name: 'test-plugin' };
            const container = DIContainer_1.DIContainer.initialize(mockApp, mockPlugin);
            expect(container).toBeDefined();
            expect(container.plugin).toBe(mockPlugin);
        });
    });
    describe('Dependency Resolution', () => {
        it('should resolve CreateAssetUseCase after initialization', () => {
            const container = DIContainer_1.DIContainer.initialize(mockApp);
            const useCase = container.getCreateAssetUseCase();
            expect(useCase).toBeDefined();
            expect(useCase.constructor.name).toBe('CreateAssetUseCase');
        });
        it('should resolve PropertyEditingUseCase after initialization', () => {
            const container = DIContainer_1.DIContainer.initialize(mockApp);
            const useCase = container.getPropertyEditingUseCase();
            expect(useCase).toBeDefined();
            expect(useCase.constructor.name).toBe('PropertyEditingUseCase');
        });
        it('should resolve repositories after initialization', () => {
            const container = DIContainer_1.DIContainer.initialize(mockApp);
            const assetRepo = container.resolve('IAssetRepository');
            const ontologyRepo = container.resolve('IOntologyRepository');
            expect(assetRepo).toBeDefined();
            expect(ontologyRepo).toBeDefined();
        });
    });
    describe('Async Initialize Method', () => {
        it('should support async initialize for backward compatibility', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const container = DIContainer_1.DIContainer.initialize(mockApp);
            // Should not throw and should resolve
            yield expect(container.initialize(mockApp)).resolves.toBeUndefined();
        }));
    });
    describe('Plugin Integration', () => {
        it('should work correctly in plugin onload lifecycle', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Simulate plugin onload
            class TestPlugin {
                constructor() {
                    this.app = mockApp;
                }
                onload() {
                    return tslib_1.__awaiter(this, void 0, void 0, function* () {
                        // This is how it's used in main.ts
                        this.container = DIContainer_1.DIContainer.initialize(this.app, this);
                        // Should be able to get use cases
                        const createAsset = this.container.getCreateAssetUseCase();
                        expect(createAsset).toBeDefined();
                    });
                }
            }
            const plugin = new TestPlugin();
            yield plugin.onload();
            expect(plugin.container).toBeDefined();
        }));
        it('should prevent initialization errors in production usage', () => {
            // Test the exact sequence that happens in the plugin
            const mockPlugin = {
                app: mockApp,
                addCommand: jest.fn(),
                addRibbonIcon: jest.fn()
            };
            // Initialize container as in main.ts
            const container = DIContainer_1.DIContainer.initialize(mockPlugin.app, mockPlugin);
            // Should be able to use getInstance after initialize
            const sameContainer = DIContainer_1.DIContainer.getInstance();
            expect(sameContainer).toBe(container);
            // Should be able to get use cases for modal
            const createAssetUseCase = container.getCreateAssetUseCase();
            expect(createAssetUseCase).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,