{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/GetLayoutForClassUseCase.ts","mappings":";;;AAEA,oEAAiE;AACjE,qDAAkD;AAYlD,MAAa,wBAAwB;IACnC,YAAoB,gBAAwC;QAAxC,qBAAgB,GAAhB,gBAAgB,CAAwB;IAAG,CAAC;IAEhE,KAAK,CAAC,OAAO,CACX,OAAiC;QAEjC,IAAI;YACF,sBAAsB;YACtB,MAAM,eAAe,GAAG,qBAAS,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC5D,IAAI,eAAe,CAAC,SAAS,EAAE;gBAC7B,OAAO,eAAM,CAAC,IAAI,CAChB,uBAAuB,eAAe,CAAC,KAAK,EAAE,CAC/C,CAAC;aACH;YAED,MAAM,SAAS,GAAG,eAAe,CAAC,QAAQ,EAAE,CAAC;YAE7C,8BAA8B;YAC9B,MAAM,OAAO,GAAG,OAAO,CAAC,eAAe;gBACrC,CAAC,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,SAAS,CAAC;gBACpD,CAAC,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAE9D,0CAA0C;YAC1C,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtB,OAAO,eAAM,CAAC,EAAE,CAA4B;oBAC1C,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;oBAClB,YAAY,EAAE,KAAK;iBACpB,CAAC,CAAC;aACJ;YAED,uDAAuD;YACvD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;YACjE,IAAI,YAAY,EAAE;gBAChB,OAAO,eAAM,CAAC,EAAE,CAA4B;oBAC1C,MAAM,EAAE,YAAY;oBACpB,YAAY,EAAE,IAAI;iBACnB,CAAC,CAAC;aACJ;YAED,qCAAqC;YACrC,OAAO,eAAM,CAAC,EAAE,CAA4B;gBAC1C,MAAM,EAAE,IAAI;gBACZ,YAAY,EAAE,IAAI;aACnB,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,eAAM,CAAC,IAAI,CAChB,mCAAmC,KAAK,EAAE,CAC3C,CAAC;SACH;IACH,CAAC;IAEO,KAAK,CAAC,qBAAqB,CACjC,SAAoB;QAEpB,8BAA8B;QAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAE7D,KAAK,MAAM,WAAW,IAAI,aAAa,EAAE;YACvC,MAAM,eAAe,GAAG,qBAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACtD,IAAI,eAAe,CAAC,SAAS;gBAAE,SAAS;YAExC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAC5D,eAAe,CAAC,QAAQ,EAAE,CAC3B,CAAC;YAEF,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACtB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;aACnB;SACF;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,gBAAgB,CAAC,SAAiB;QACxC,+BAA+B;QAC/B,MAAM,SAAS,GAA6B;YAC1C,YAAY,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;YAC3C,SAAS,EAAE,CAAC,aAAa,EAAE,YAAY,CAAC;YACxC,SAAS,EAAE,CAAC,YAAY,CAAC;YACzB,SAAS,EAAE,CAAC,YAAY,CAAC;YACzB,WAAW,EAAE,CAAC,YAAY,CAAC;SAC5B,CAAC;QAEF,OAAO,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAChD,CAAC;CACF;AArFD,4DAqFC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/GetLayoutForClassUseCase.ts"],"sourcesContent":["import { IClassLayoutRepository } from \"../../domain/repositories/IClassLayoutRepository\";\nimport { ClassLayout } from \"../../domain/entities/ClassLayout\";\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { Result } from \"../../domain/core/Result\";\n\nexport interface GetLayoutForClassRequest {\n  className: string;\n  includeDisabled?: boolean;\n}\n\nexport interface GetLayoutForClassResponse {\n  layout: ClassLayout | null;\n  fallbackUsed: boolean;\n}\n\nexport class GetLayoutForClassUseCase {\n  constructor(private layoutRepository: IClassLayoutRepository) {}\n\n  async execute(\n    request: GetLayoutForClassRequest,\n  ): Promise<Result<GetLayoutForClassResponse>> {\n    try {\n      // Validate class name\n      const classNameResult = ClassName.create(request.className);\n      if (classNameResult.isFailure) {\n        return Result.fail<GetLayoutForClassResponse>(\n          `Invalid class name: ${classNameResult.error}`,\n        );\n      }\n\n      const className = classNameResult.getValue();\n\n      // Find layouts for this class\n      const layouts = request.includeDisabled\n        ? await this.layoutRepository.findByClass(className)\n        : await this.layoutRepository.findEnabledByClass(className);\n\n      // Return highest priority layout if found\n      if (layouts.length > 0) {\n        return Result.ok<GetLayoutForClassResponse>({\n          layout: layouts[0], // Already sorted by priority\n          fallbackUsed: false,\n        });\n      }\n\n      // Try to find parent class layouts (inheritance chain)\n      const parentLayout = await this.findParentClassLayout(className);\n      if (parentLayout) {\n        return Result.ok<GetLayoutForClassResponse>({\n          layout: parentLayout,\n          fallbackUsed: true,\n        });\n      }\n\n      // No layout found - will use default\n      return Result.ok<GetLayoutForClassResponse>({\n        layout: null,\n        fallbackUsed: true,\n      });\n    } catch (error) {\n      return Result.fail<GetLayoutForClassResponse>(\n        `Failed to get layout for class: ${error}`,\n      );\n    }\n  }\n\n  private async findParentClassLayout(\n    className: ClassName,\n  ): Promise<ClassLayout | null> {\n    // Check common parent classes\n    const parentClasses = this.getParentClasses(className.value);\n\n    for (const parentClass of parentClasses) {\n      const parentClassName = ClassName.create(parentClass);\n      if (parentClassName.isFailure) continue;\n\n      const layouts = await this.layoutRepository.findEnabledByClass(\n        parentClassName.getValue(),\n      );\n\n      if (layouts.length > 0) {\n        return layouts[0];\n      }\n    }\n\n    return null;\n  }\n\n  private getParentClasses(className: string): string[] {\n    // Define inheritance hierarchy\n    const hierarchy: Record<string, string[]> = {\n      ems__Project: [\"ems__Effort\", \"exo__Asset\"],\n      ems__Task: [\"ems__Effort\", \"exo__Asset\"],\n      ems__Area: [\"exo__Asset\"],\n      ems__Goal: [\"exo__Asset\"],\n      ems__Effort: [\"exo__Asset\"],\n    };\n\n    return hierarchy[className] || [\"exo__Asset\"];\n  }\n}\n"],"version":3}