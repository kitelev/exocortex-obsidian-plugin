da4732f4d1c8aacb2b543f99f4931bff
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const Graph_1 = require("./domain/semantic/core/Graph");
const Triple_1 = require("./domain/semantic/core/Triple");
const SPARQLProcessor_1 = require("./presentation/processors/SPARQLProcessor");
const GraphVisualizationProcessor_1 = require("./presentation/processors/GraphVisualizationProcessor");
const CreateAssetModal_1 = require("./presentation/modals/CreateAssetModal");
const ExportRDFModal_1 = require("./presentation/modals/ExportRDFModal");
const ImportRDFModal_1 = require("./presentation/modals/ImportRDFModal");
const QuickTaskModal_1 = require("./presentation/modals/QuickTaskModal");
const DIContainer_1 = require("./infrastructure/container/DIContainer");
const RDFService_1 = require("./application/services/RDFService");
const CreateTaskFromProjectUseCase_1 = require("./application/use-cases/CreateTaskFromProjectUseCase");
const GetCurrentProjectUseCase_1 = require("./application/use-cases/GetCurrentProjectUseCase");
const ObsidianTaskRepository_1 = require("./infrastructure/repositories/ObsidianTaskRepository");
const ObsidianAssetRepository_1 = require("./infrastructure/repositories/ObsidianAssetRepository");
const IndexedGraph_1 = require("./domain/semantic/core/IndexedGraph");
const ExoFocusService_1 = require("./application/services/ExoFocusService");
// @ts-ignore
const manifest_json_1 = tslib_1.__importDefault(require("../manifest.json"));
class ExocortexPlugin extends obsidian_1.Plugin {
    onload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.log(`🚀 Exocortex: Loading plugin v${manifest_json_1.default.version}...`);
            // Initialize DI container
            DIContainer_1.DIContainer.initialize(this.app, this);
            this.container = DIContainer_1.DIContainer.getInstance();
            // Initialize graph
            this.graph = new Graph_1.Graph();
            // Initialize RDF service
            this.rdfService = new RDFService_1.RDFService(this.app);
            // Load vault data into graph
            yield this.loadVaultIntoGraph();
            // Initialize SPARQL processor with cache configuration
            const cacheConfig = {
                maxSize: 500,
                defaultTTL: 5 * 60 * 1000,
                enabled: true
            };
            this.sparqlProcessor = new SPARQLProcessor_1.SPARQLProcessor(this, this.graph, undefined, cacheConfig);
            // Initialize Graph Visualization processor
            this.graphVisualizationProcessor = new GraphVisualizationProcessor_1.GraphVisualizationProcessor(this, this.graph);
            // Register SPARQL code block processor
            try {
                this.registerMarkdownCodeBlockProcessor('sparql', (source, el, ctx) => this.sparqlProcessor.processCodeBlock(source, el, ctx));
            }
            catch (error) {
                console.warn('SPARQL processor registration failed (may already be registered):', error.message);
            }
            // Register Graph Visualization code block processor
            try {
                this.registerMarkdownCodeBlockProcessor('graph', (source, el, ctx) => this.graphVisualizationProcessor.processCodeBlock(source, el, ctx));
            }
            catch (error) {
                console.warn('Graph processor registration failed (may already be registered):', error.message);
            }
            // Register command: Create new asset
            this.addCommand({
                id: 'create-exo-asset',
                name: 'Create new ExoAsset',
                hotkeys: [{ modifiers: ["Mod", "Shift"], key: "n" }],
                callback: () => {
                    new CreateAssetModal_1.CreateAssetModal(this.app).open();
                }
            });
            // Add ribbon icon for quick access
            this.addRibbonIcon('plus-circle', 'Create ExoAsset', () => {
                new CreateAssetModal_1.CreateAssetModal(this.app).open();
            });
            // Register command: View SPARQL cache statistics
            this.addCommand({
                id: 'view-sparql-cache-stats',
                name: 'View SPARQL cache statistics',
                callback: () => {
                    const stats = this.sparqlProcessor.getCacheStatistics();
                    const message = [
                        `SPARQL Query Cache Statistics:`,
                        `• Cache hits: ${stats.hits}`,
                        `• Cache misses: ${stats.misses}`,
                        `• Hit rate: ${stats.hitRate.toFixed(1)}%`,
                        `• Cached entries: ${stats.size}/${stats.maxSize}`,
                        `• Total queries: ${stats.totalQueries}`,
                        `• Evictions: ${stats.evictions}`
                    ].join('\n');
                    new obsidian_1.Notice(message, 8000);
                }
            });
            // Register command: Clear SPARQL cache
            this.addCommand({
                id: 'clear-sparql-cache',
                name: 'Clear SPARQL cache',
                callback: () => {
                    this.sparqlProcessor.invalidateCache();
                    new obsidian_1.Notice('SPARQL query cache cleared!');
                }
            });
            // Register command: Export knowledge graph
            this.addCommand({
                id: 'export-knowledge-graph',
                name: 'Export knowledge graph',
                callback: () => {
                    const modal = new ExportRDFModal_1.ExportRDFModal(this.app, this.graph, this.rdfService.getNamespaceManager(), (result) => {
                        console.log('Knowledge graph exported:', result);
                    });
                    modal.open();
                }
            });
            // Register command: Import RDF data
            this.addCommand({
                id: 'import-rdf-data',
                name: 'Import RDF data',
                callback: () => {
                    const modal = new ImportRDFModal_1.ImportRDFModal(this.app, this.graph, this.rdfService.getNamespaceManager(), (importedGraph, options) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                        try {
                            if (options.mergeMode === 'replace') {
                                this.graph.clear();
                                this.graph.merge(importedGraph);
                            }
                            else {
                                this.graph.merge(importedGraph);
                            }
                            // Invalidate SPARQL cache since graph changed
                            this.sparqlProcessor.invalidateCache();
                            console.log('RDF data imported successfully');
                        }
                        catch (error) {
                            console.error('Failed to import RDF data:', error);
                            new obsidian_1.Notice(`Import failed: ${error.message}`);
                        }
                    }));
                    modal.open();
                }
            });
            // Register command: Quick Task Creation
            this.addCommand({
                id: 'quick-create-task',
                name: 'Quick create task for current project',
                hotkeys: [{ modifiers: ["Mod", "Shift"], key: "t" }],
                callback: () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    try {
                        // Get current file context
                        const activeFile = this.app.workspace.getActiveFile();
                        const activeFilePath = activeFile === null || activeFile === void 0 ? void 0 : activeFile.path;
                        // Initialize repositories and services
                        const taskRepository = new ObsidianTaskRepository_1.ObsidianTaskRepository(this.app);
                        const assetRepository = new ObsidianAssetRepository_1.ObsidianAssetRepository(this.app);
                        const indexedGraph = new IndexedGraph_1.IndexedGraph();
                        const focusService = new ExoFocusService_1.ExoFocusService(this.app, this.graph);
                        // Create use cases
                        const getCurrentProjectUseCase = new GetCurrentProjectUseCase_1.GetCurrentProjectUseCase(assetRepository, focusService, indexedGraph);
                        const createTaskUseCase = new CreateTaskFromProjectUseCase_1.CreateTaskFromProjectUseCase(taskRepository, assetRepository, indexedGraph, getCurrentProjectUseCase);
                        // Open modal
                        const modal = new QuickTaskModal_1.QuickTaskModal(this.app, createTaskUseCase, getCurrentProjectUseCase, activeFilePath);
                        modal.open();
                    }
                    catch (error) {
                        console.error('Failed to open quick task modal:', error);
                        new obsidian_1.Notice(`Failed to open task creation: ${error.message}`);
                    }
                })
            });
            // Register file modification handler to update graph
            this.registerEvent(this.app.vault.on('modify', (file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian_1.TFile && file.extension === 'md') {
                    yield this.updateFileInGraph(file);
                    // Invalidate SPARQL query cache when data changes
                    this.sparqlProcessor.invalidateCache();
                }
            })));
            // Register file creation handler
            this.registerEvent(this.app.vault.on('create', (file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian_1.TFile && file.extension === 'md') {
                    yield this.updateFileInGraph(file);
                    // Invalidate SPARQL query cache when data changes
                    this.sparqlProcessor.invalidateCache();
                }
            })));
            // Register file deletion handler
            this.registerEvent(this.app.vault.on('delete', (file) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (file instanceof obsidian_1.TFile && file.extension === 'md') {
                    this.removeFileFromGraph(file);
                    // Invalidate SPARQL query cache when data changes
                    this.sparqlProcessor.invalidateCache();
                }
            })));
            new obsidian_1.Notice('🔍 Exocortex: SPARQL support and graph visualization enabled!');
            console.log('✅ Exocortex: SPARQL processor and graph visualization registered');
        });
    }
    loadVaultIntoGraph() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.log('📊 Loading vault into RDF graph...');
            const startTime = Date.now();
            const files = this.app.vault.getMarkdownFiles();
            let triplesCount = 0;
            for (const file of files) {
                try {
                    const content = yield this.app.vault.read(file);
                    const triples = this.extractTriplesFromFile(file, content);
                    for (const triple of triples) {
                        this.graph.add(triple);
                        triplesCount++;
                    }
                }
                catch (err) {
                    console.warn(`Failed to process ${file.path}:`, err);
                }
            }
            const loadTime = Date.now() - startTime;
            console.log(`✅ Loaded ${triplesCount} triples from ${files.length} files in ${loadTime}ms`);
        });
    }
    updateFileInGraph(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Remove old triples for this file
                this.removeFileFromGraph(file);
                // Add new triples
                const content = yield this.app.vault.read(file);
                const triples = this.extractTriplesFromFile(file, content);
                for (const triple of triples) {
                    this.graph.add(triple);
                }
            }
            catch (err) {
                console.warn(`Failed to update ${file.path} in graph:`, err);
            }
        });
    }
    removeFileFromGraph(file) {
        const subject = new Triple_1.IRI(`file://${file.basename}`);
        const triplesToRemove = this.graph.match(subject, null, null);
        for (const triple of triplesToRemove) {
            this.graph.remove(triple);
        }
    }
    extractTriplesFromFile(file, content) {
        const triples = [];
        const subject = new Triple_1.IRI(`file://${file.basename}`);
        // Extract frontmatter
        const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
        if (frontmatterMatch) {
            const frontmatter = this.parseFrontmatter(frontmatterMatch[1]);
            for (const [key, value] of Object.entries(frontmatter)) {
                if (Array.isArray(value)) {
                    for (const v of value) {
                        triples.push(new Triple_1.Triple(subject, new Triple_1.IRI(key), Triple_1.Literal.string(String(v))));
                    }
                }
                else if (value !== null && value !== undefined) {
                    triples.push(new Triple_1.Triple(subject, new Triple_1.IRI(key), Triple_1.Literal.string(String(value))));
                }
            }
        }
        // Add basic file metadata
        triples.push(new Triple_1.Triple(subject, new Triple_1.IRI('file_path'), Triple_1.Literal.string(file.path)));
        triples.push(new Triple_1.Triple(subject, new Triple_1.IRI('file_name'), Triple_1.Literal.string(file.name)));
        return triples;
    }
    parseFrontmatter(yaml) {
        const result = {};
        const lines = yaml.split('\n');
        let currentKey = null;
        let currentValue = null;
        let inArray = false;
        for (const line of lines) {
            const trimmed = line.trim();
            if (!trimmed)
                continue;
            // Check for array item
            if (line.startsWith('  - ') || line.startsWith('    - ')) {
                if (currentKey && inArray) {
                    const value = line.substring(line.indexOf('- ') + 2).trim();
                    const cleanValue = value.replace(/^["']|["']$/g, '').replace(/\[\[|\]\]/g, '');
                    if (!Array.isArray(currentValue)) {
                        currentValue = [];
                    }
                    currentValue.push(cleanValue);
                }
                continue;
            }
            // Check for key:value pair
            if (trimmed.includes(':')) {
                // Save previous key-value if exists
                if (currentKey !== null && currentValue !== null) {
                    result[currentKey] = currentValue;
                }
                const colonIndex = trimmed.indexOf(':');
                currentKey = trimmed.substring(0, colonIndex).trim();
                const valueStr = trimmed.substring(colonIndex + 1).trim();
                if (!valueStr) {
                    // Value will be on next lines (array)
                    inArray = true;
                    currentValue = [];
                }
                else {
                    // Single value
                    inArray = false;
                    currentValue = valueStr.replace(/^["']|["']$/g, '').replace(/\[\[|\]\]/g, '');
                }
            }
        }
        // Save last key-value
        if (currentKey !== null && currentValue !== null) {
            result[currentKey] = currentValue;
        }
        return result;
    }
    onunload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            console.log('👋 Exocortex: Plugin unloaded');
            if (this.graph) {
                this.graph.clear();
            }
            if (this.sparqlProcessor) {
                this.sparqlProcessor.destroy();
            }
        });
    }
}
exports.default = ExocortexPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,