{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/semantic/core/Graph.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/semantic/core/Graph.ts"],"sourcesContent":["/**\n * RDF Graph implementation for managing collections of triples\n * Provides efficient querying and manipulation of semantic data\n */\n\nimport { Triple, IRI, BlankNode, Literal } from \"./Triple\";\nimport { Result } from \"../../core/Result\";\n\nexport type Node = IRI | BlankNode | Literal;\nexport type Subject = IRI | BlankNode;\nexport type Predicate = IRI;\nexport type Object = Node;\n\n/**\n * RDF Graph - A collection of RDF triples\n */\nexport class Graph {\n  private triples: Set<Triple> = new Set();\n  private spo: Map<string, Map<string, Set<string>>> = new Map();\n  private pos: Map<string, Map<string, Set<string>>> = new Map();\n  private osp: Map<string, Map<string, Set<string>>> = new Map();\n\n  constructor(triples: Triple[] = []) {\n    for (const triple of triples) {\n      this.add(triple);\n    }\n  }\n\n  /**\n   * Add a triple to the graph\n   */\n  add(triple: Triple): void {\n    if (this.has(triple)) return;\n\n    this.triples.add(triple);\n\n    const s = triple.getSubject().toString();\n    const p = triple.getPredicate().toString();\n    const o = triple.getObject().toString();\n\n    // Update SPO index\n    if (!this.spo.has(s)) this.spo.set(s, new Map());\n    if (!this.spo.get(s)!.has(p)) this.spo.get(s)!.set(p, new Set());\n    this.spo.get(s)!.get(p)!.add(o);\n\n    // Update POS index\n    if (!this.pos.has(p)) this.pos.set(p, new Map());\n    if (!this.pos.get(p)!.has(o)) this.pos.get(p)!.set(o, new Set());\n    this.pos.get(p)!.get(o)!.add(s);\n\n    // Update OSP index\n    if (!this.osp.has(o)) this.osp.set(o, new Map());\n    if (!this.osp.get(o)!.has(s)) this.osp.get(o)!.set(s, new Set());\n    this.osp.get(o)!.get(s)!.add(p);\n  }\n\n  /**\n   * Remove a triple from the graph\n   */\n  remove(triple: Triple): void {\n    if (!this.has(triple)) return;\n\n    this.triples.delete(triple);\n\n    const s = triple.getSubject().toString();\n    const p = triple.getPredicate().toString();\n    const o = triple.getObject().toString();\n\n    // Update SPO index\n    this.spo.get(s)?.get(p)?.delete(o);\n    if (this.spo.get(s)?.get(p)?.size === 0) {\n      this.spo.get(s)?.delete(p);\n    }\n    if (this.spo.get(s)?.size === 0) {\n      this.spo.delete(s);\n    }\n\n    // Update POS index\n    this.pos.get(p)?.get(o)?.delete(s);\n    if (this.pos.get(p)?.get(o)?.size === 0) {\n      this.pos.get(p)?.delete(o);\n    }\n    if (this.pos.get(p)?.size === 0) {\n      this.pos.delete(p);\n    }\n\n    // Update OSP index\n    this.osp.get(o)?.get(s)?.delete(p);\n    if (this.osp.get(o)?.get(s)?.size === 0) {\n      this.osp.get(o)?.delete(s);\n    }\n    if (this.osp.get(o)?.size === 0) {\n      this.osp.delete(o);\n    }\n  }\n\n  /**\n   * Check if the graph contains a triple\n   */\n  has(triple: Triple): boolean {\n    const s = triple.getSubject().toString();\n    const p = triple.getPredicate().toString();\n    const o = triple.getObject().toString();\n\n    return this.spo.get(s)?.get(p)?.has(o) ?? false;\n  }\n\n  /**\n   * Get all triples matching a pattern\n   * null values act as wildcards\n   */\n  match(\n    subject: Subject | null = null,\n    predicate: Predicate | null = null,\n    object: Object | null = null,\n  ): Triple[] {\n    const results: Triple[] = [];\n\n    if (subject && predicate && object) {\n      // Exact match\n      for (const triple of this.triples) {\n        if (\n          triple.getSubject().toString() === subject.toString() &&\n          triple.getPredicate().toString() === predicate.toString() &&\n          triple.getObject().toString() === object.toString()\n        ) {\n          results.push(triple);\n        }\n      }\n    } else if (subject && predicate) {\n      // S P ?\n      const objects = this.spo\n        .get(subject.toString())\n        ?.get(predicate.toString());\n      if (objects) {\n        for (const triple of this.triples) {\n          if (\n            triple.getSubject().toString() === subject.toString() &&\n            triple.getPredicate().toString() === predicate.toString()\n          ) {\n            results.push(triple);\n          }\n        }\n      }\n    } else if (predicate && object) {\n      // ? P O\n      const subjects = this.pos\n        .get(predicate.toString())\n        ?.get(object.toString());\n      if (subjects) {\n        for (const triple of this.triples) {\n          if (\n            triple.getPredicate().toString() === predicate.toString() &&\n            triple.getObject().toString() === object.toString()\n          ) {\n            results.push(triple);\n          }\n        }\n      }\n    } else if (subject && object) {\n      // S ? O\n      const predicates = this.osp\n        .get(object.toString())\n        ?.get(subject.toString());\n      if (predicates) {\n        for (const triple of this.triples) {\n          if (\n            triple.getSubject().toString() === subject.toString() &&\n            triple.getObject().toString() === object.toString()\n          ) {\n            results.push(triple);\n          }\n        }\n      }\n    } else if (subject) {\n      // S ? ?\n      for (const triple of this.triples) {\n        if (triple.getSubject().toString() === subject.toString()) {\n          results.push(triple);\n        }\n      }\n    } else if (predicate) {\n      // ? P ?\n      for (const triple of this.triples) {\n        if (triple.getPredicate().toString() === predicate.toString()) {\n          results.push(triple);\n        }\n      }\n    } else if (object) {\n      // ? ? O\n      for (const triple of this.triples) {\n        if (triple.getObject().toString() === object.toString()) {\n          results.push(triple);\n        }\n      }\n    } else {\n      // ? ? ? - return all\n      return Array.from(this.triples);\n    }\n\n    return results;\n  }\n\n  /**\n   * Get all subjects in the graph\n   */\n  subjects(): Set<Subject> {\n    const subjects = new Set<Subject>();\n    for (const triple of this.triples) {\n      subjects.add(triple.getSubject());\n    }\n    return subjects;\n  }\n\n  /**\n   * Get all predicates in the graph\n   */\n  predicates(): Set<Predicate> {\n    const predicates = new Set<Predicate>();\n    for (const triple of this.triples) {\n      predicates.add(triple.getPredicate());\n    }\n    return predicates;\n  }\n\n  /**\n   * Get all objects in the graph\n   */\n  objects(): Set<Object> {\n    const objects = new Set<Object>();\n    for (const triple of this.triples) {\n      objects.add(triple.getObject());\n    }\n    return objects;\n  }\n\n  /**\n   * Get the size of the graph (number of triples)\n   */\n  size(): number {\n    return this.triples.size;\n  }\n\n  /**\n   * Check if the graph is empty\n   */\n  isEmpty(): boolean {\n    return this.triples.size === 0;\n  }\n\n  /**\n   * Clear all triples from the graph\n   */\n  clear(): void {\n    this.triples.clear();\n    this.spo.clear();\n    this.pos.clear();\n    this.osp.clear();\n  }\n\n  /**\n   * Merge another graph into this one\n   */\n  merge(other: Graph): void {\n    for (const triple of other.toArray()) {\n      this.add(triple);\n    }\n  }\n\n  /**\n   * Create a new graph with triples matching a pattern\n   */\n  filter(\n    subject: Subject | null = null,\n    predicate: Predicate | null = null,\n    object: Object | null = null,\n  ): Graph {\n    return new Graph(this.match(subject, predicate, object));\n  }\n\n  /**\n   * Convert the graph to an array of triples\n   */\n  toArray(): Triple[] {\n    return Array.from(this.triples);\n  }\n\n  /**\n   * Create a human-readable string representation\n   */\n  toString(): string {\n    return Array.from(this.triples)\n      .map((t) => t.toString())\n      .join(\"\\n\");\n  }\n\n  /**\n   * Create a copy of this graph\n   */\n  clone(): Graph {\n    return new Graph(this.toArray());\n  }\n\n  /**\n   * Check if two graphs are equal\n   */\n  equals(other: Graph): boolean {\n    if (this.size() !== other.size()) return false;\n\n    for (const triple of this.triples) {\n      if (!other.has(triple)) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Alias for add method - used by some services\n   */\n  addTriple(triple: Triple): void {\n    this.add(triple);\n  }\n\n  /**\n   * Get all triples (alias for toArray)\n   */\n  getTriples(): Triple[] {\n    return this.toArray();\n  }\n\n  /**\n   * Alias for has method - used by some services\n   */\n  hasTriple(triple: Triple): boolean {\n    return this.has(triple);\n  }\n}\n"],"version":3}