d6e88af120cc3a6c4f476cbfb8ffe277
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphVisualizationProcessor = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const SPARQLEngine_1 = require("../../application/SPARQLEngine");
const Graph_1 = require("../../domain/semantic/core/Graph");
const Triple_1 = require("../../domain/semantic/core/Triple");
const RDFService_1 = require("../../application/services/RDFService");
const ExportRDFModal_1 = require("../modals/ExportRDFModal");
class GraphVisualizationProcessor {
    constructor(plugin, graph) {
        this.plugin = plugin;
        this.graph = graph;
        this.engine = new SPARQLEngine_1.SPARQLEngine(graph);
        this.rdfService = new RDFService_1.RDFService(plugin.app);
    }
    /**
     * Main processor method called by Obsidian
     */
    processCodeBlock(source, el, ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            el.empty();
            // Create main container
            const container = document.createElement('div');
            container.className = 'exocortex-graph-container';
            container.style.cssText = `
            border: 1px solid var(--background-modifier-border);
            padding: 1em;
            margin: 1em 0;
            border-radius: var(--radius-m);
            background: var(--background-secondary);
            position: relative;
        `;
            el.appendChild(container);
            try {
                // Parse configuration
                const config = this.parseConfig(source.trim());
                // Show loading indicator
                const loadingEl = this.createLoadingIndicator();
                container.appendChild(loadingEl);
                // Get graph data
                const graphData = yield this.getGraphData(config);
                // Remove loading indicator
                loadingEl.remove();
                if (graphData.nodes.length === 0) {
                    const emptyMessage = document.createElement('div');
                    emptyMessage.textContent = 'No graph data found';
                    emptyMessage.style.cssText = 'padding: 2em; text-align: center; color: var(--text-muted);';
                    container.appendChild(emptyMessage);
                    return;
                }
                // Create graph visualization
                yield this.createGraphVisualization(container, graphData, config);
                // Add controls
                this.addControls(container, graphData, config);
            }
            catch (error) {
                container.innerHTML = '';
                const errorEl = this.createErrorMessage(error);
                container.appendChild(errorEl);
                console.error('Graph visualization error:', error);
            }
        });
    }
    parseConfig(source) {
        const config = {
            limit: 100,
            showLabels: true,
            nodeSize: 8,
            linkDistance: 80,
            depth: 2
        };
        const lines = source.split('\n').map(l => l.trim()).filter(l => l);
        // Check if it's a SPARQL query
        if (source.toUpperCase().includes('SELECT')) {
            config.query = source;
            return config;
        }
        // Parse configuration options
        for (const line of lines) {
            if (line.includes(':')) {
                const [key, value] = line.split(':').map(s => s.trim());
                switch (key.toLowerCase()) {
                    case 'focus':
                        config.focus = value.replace(/\[\[|\]\]/g, '');
                        break;
                    case 'depth':
                        config.depth = parseInt(value) || 2;
                        break;
                    case 'limit':
                        config.limit = parseInt(value) || 100;
                        break;
                    case 'query':
                        config.query = value;
                        break;
                    case 'showlabels':
                        config.showLabels = value.toLowerCase() === 'true';
                        break;
                    case 'nodesize':
                        config.nodeSize = parseInt(value) || 8;
                        break;
                    case 'linkdistance':
                        config.linkDistance = parseInt(value) || 80;
                        break;
                }
            }
        }
        return config;
    }
    getGraphData(config) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let triples = [];
            if (config.query) {
                // Execute SPARQL query to get specific triples
                const result = this.engine.select(config.query);
                // Convert SPARQL results to triples
                for (const row of result.results) {
                    if (row.s && row.p && row.o) {
                        triples.push(new Triple_1.Triple(new Triple_1.IRI(row.s), new Triple_1.IRI(row.p), row.o.startsWith('"') ? Triple_1.Literal.string(row.o.replace(/^"|"$/g, '')) : new Triple_1.IRI(row.o)));
                    }
                    else if (row.subject && row.predicate && row.object) {
                        triples.push(new Triple_1.Triple(new Triple_1.IRI(row.subject), new Triple_1.IRI(row.predicate), row.object.startsWith('"') ? Triple_1.Literal.string(row.object.replace(/^"|"$/g, '')) : new Triple_1.IRI(row.object)));
                    }
                }
            }
            else if (config.focus) {
                // Get triples centered around focus entity
                triples = this.getTriplesAroundFocus(config.focus, config.depth || 2);
            }
            else {
                // Get all triples (with limit)
                triples = this.graph.match(null, null, null);
            }
            // Apply limit
            if (config.limit && triples.length > config.limit) {
                triples = triples.slice(0, config.limit);
            }
            return this.convertTriplesToGraphData(triples);
        });
    }
    getTriplesAroundFocus(focus, depth) {
        const visited = new Set();
        const result = [];
        const queue = [{ entity: focus, currentDepth: 0 }];
        while (queue.length > 0) {
            const { entity, currentDepth } = queue.shift();
            if (visited.has(entity) || currentDepth >= depth) {
                continue;
            }
            visited.add(entity);
            // Get triples where entity is subject
            const subjectTriples = this.graph.match(new Triple_1.IRI(entity), null, null);
            result.push(...subjectTriples);
            // Get triples where entity is object
            const objectTriples = this.graph.match(null, null, new Triple_1.IRI(entity));
            result.push(...objectTriples);
            // Add related entities to queue for next depth level
            if (currentDepth < depth - 1) {
                for (const triple of subjectTriples) {
                    const objectStr = triple.getObject().toString();
                    if (!visited.has(objectStr)) {
                        queue.push({ entity: objectStr, currentDepth: currentDepth + 1 });
                    }
                }
                for (const triple of objectTriples) {
                    const subjectStr = triple.getSubject().toString();
                    if (!visited.has(subjectStr)) {
                        queue.push({ entity: subjectStr, currentDepth: currentDepth + 1 });
                    }
                }
            }
        }
        return result;
    }
    convertTriplesToGraphData(triples) {
        const nodesMap = new Map();
        const links = [];
        for (const triple of triples) {
            const subjectStr = triple.getSubject().toString();
            const predicateStr = triple.getPredicate().toString();
            const objectStr = triple.getObject().toString();
            // Add subject node
            if (!nodesMap.has(subjectStr)) {
                nodesMap.set(subjectStr, {
                    id: subjectStr,
                    label: this.getDisplayLabel(subjectStr),
                    type: 'subject',
                    group: 1
                });
            }
            // Add object node
            if (!nodesMap.has(objectStr)) {
                nodesMap.set(objectStr, {
                    id: objectStr,
                    label: this.getDisplayLabel(objectStr),
                    type: 'object',
                    group: 2
                });
            }
            // Add link
            const linkId = `${subjectStr}-${predicateStr}-${objectStr}`;
            links.push({
                source: subjectStr,
                target: objectStr,
                label: predicateStr,
                id: linkId
            });
        }
        return {
            nodes: Array.from(nodesMap.values()),
            links
        };
    }
    getDisplayLabel(uri) {
        // Extract human-readable label from URI
        if (uri.startsWith('file://')) {
            return uri.replace('file://', '');
        }
        // Extract last part of URI
        const parts = uri.split('/');
        return parts[parts.length - 1] || uri;
    }
    createGraphVisualization(container, data, config) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Create SVG container
            const svgContainer = document.createElement('div');
            svgContainer.style.cssText = 'position: relative; width: 100%; height: 600px; overflow: hidden;';
            container.appendChild(svgContainer);
            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            svg.setAttribute('width', '100%');
            svg.setAttribute('height', '600');
            svg.style.cssText = 'border: 1px solid var(--background-modifier-border); background: var(--background-primary);';
            svgContainer.appendChild(svg);
            // Create D3.js-like force simulation manually (simplified version)
            yield this.createForceDirectedGraph(svg, data, config);
            // Store data for export functionality
            container.__graphData = data;
            container.__graphConfig = config;
        });
    }
    createForceDirectedGraph(svg, data, config) {
        var _a, _b, _c, _d, _e, _f, _g;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const width = 800;
            const height = 600;
            const centerX = width / 2;
            const centerY = height / 2;
            // Create groups for different elements
            const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
            svg.appendChild(defs);
            // Add arrow marker for directed edges
            const marker = document.createElementNS('http://www.w3.org/2000/svg', 'marker');
            marker.setAttribute('id', 'arrowhead');
            marker.setAttribute('viewBox', '0 -5 10 10');
            marker.setAttribute('refX', '8');
            marker.setAttribute('refY', '0');
            marker.setAttribute('orient', 'auto');
            marker.setAttribute('markerWidth', '6');
            marker.setAttribute('markerHeight', '6');
            const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
            path.setAttribute('d', 'M 0,-5 L 10 ,0 L 0,5');
            path.setAttribute('fill', 'var(--text-muted)');
            marker.appendChild(path);
            defs.appendChild(marker);
            const g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            svg.appendChild(g);
            // Position nodes using simple force-directed layout
            this.positionNodes(data.nodes, width, height);
            // Create links
            const linksGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            linksGroup.setAttribute('class', 'links');
            g.appendChild(linksGroup);
            for (const link of data.links) {
                const sourceNode = data.nodes.find(n => n.id === link.source);
                const targetNode = data.nodes.find(n => n.id === link.target);
                if (sourceNode && targetNode) {
                    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
                    line.setAttribute('x1', ((_a = sourceNode.x) === null || _a === void 0 ? void 0 : _a.toString()) || '0');
                    line.setAttribute('y1', ((_b = sourceNode.y) === null || _b === void 0 ? void 0 : _b.toString()) || '0');
                    line.setAttribute('x2', ((_c = targetNode.x) === null || _c === void 0 ? void 0 : _c.toString()) || '0');
                    line.setAttribute('y2', ((_d = targetNode.y) === null || _d === void 0 ? void 0 : _d.toString()) || '0');
                    line.setAttribute('stroke', 'var(--text-muted)');
                    line.setAttribute('stroke-width', '1');
                    line.setAttribute('marker-end', 'url(#arrowhead)');
                    line.style.cursor = 'pointer';
                    // Add hover effect
                    line.addEventListener('mouseenter', () => {
                        line.setAttribute('stroke', 'var(--text-accent)');
                        line.setAttribute('stroke-width', '2');
                    });
                    line.addEventListener('mouseleave', () => {
                        line.setAttribute('stroke', 'var(--text-muted)');
                        line.setAttribute('stroke-width', '1');
                    });
                    linksGroup.appendChild(line);
                    // Add edge label if enabled
                    if (config.showLabels && link.label) {
                        const midX = ((sourceNode.x || 0) + (targetNode.x || 0)) / 2;
                        const midY = ((sourceNode.y || 0) + (targetNode.y || 0)) / 2;
                        const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                        text.setAttribute('x', midX.toString());
                        text.setAttribute('y', (midY - 5).toString());
                        text.setAttribute('text-anchor', 'middle');
                        text.setAttribute('font-size', '10');
                        text.setAttribute('fill', 'var(--text-muted)');
                        text.textContent = this.truncateLabel(link.label, 15);
                        // Add background rectangle for better readability
                        const bbox = text.getBBox();
                        const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                        rect.setAttribute('x', (bbox.x - 2).toString());
                        rect.setAttribute('y', (bbox.y - 1).toString());
                        rect.setAttribute('width', (bbox.width + 4).toString());
                        rect.setAttribute('height', (bbox.height + 2).toString());
                        rect.setAttribute('fill', 'var(--background-primary)');
                        rect.setAttribute('opacity', '0.8');
                        linksGroup.appendChild(rect);
                        linksGroup.appendChild(text);
                    }
                }
            }
            // Create nodes
            const nodesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            nodesGroup.setAttribute('class', 'nodes');
            g.appendChild(nodesGroup);
            for (const node of data.nodes) {
                const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');
                nodeGroup.setAttribute('class', 'node');
                nodeGroup.style.cursor = 'pointer';
                const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
                circle.setAttribute('cx', ((_e = node.x) === null || _e === void 0 ? void 0 : _e.toString()) || '0');
                circle.setAttribute('cy', ((_f = node.y) === null || _f === void 0 ? void 0 : _f.toString()) || '0');
                circle.setAttribute('r', (config.nodeSize || 8).toString());
                circle.setAttribute('fill', this.getNodeColor(node.type));
                circle.setAttribute('stroke', 'var(--background-modifier-border)');
                circle.setAttribute('stroke-width', '2');
                nodeGroup.appendChild(circle);
                // Add node label if enabled
                if (config.showLabels) {
                    const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');
                    text.setAttribute('x', ((_g = node.x) === null || _g === void 0 ? void 0 : _g.toString()) || '0');
                    text.setAttribute('y', ((node.y || 0) + (config.nodeSize || 8) + 15).toString());
                    text.setAttribute('text-anchor', 'middle');
                    text.setAttribute('font-size', '12');
                    text.setAttribute('fill', 'var(--text-normal)');
                    text.textContent = this.truncateLabel(node.label, 20);
                    nodeGroup.appendChild(text);
                }
                // Add click handler for navigation
                nodeGroup.addEventListener('click', () => {
                    this.handleNodeClick(node);
                });
                // Add hover effects
                nodeGroup.addEventListener('mouseenter', () => {
                    circle.setAttribute('r', ((config.nodeSize || 8) + 2).toString());
                    circle.setAttribute('stroke-width', '3');
                });
                nodeGroup.addEventListener('mouseleave', () => {
                    circle.setAttribute('r', (config.nodeSize || 8).toString());
                    circle.setAttribute('stroke-width', '2');
                });
                nodesGroup.appendChild(nodeGroup);
            }
            // Add zoom and pan functionality
            this.addZoomPan(svg, g);
        });
    }
    positionNodes(nodes, width, height) {
        // Simple circular layout as starting positions
        const centerX = width / 2;
        const centerY = height / 2;
        const radius = Math.min(width, height) / 3;
        nodes.forEach((node, i) => {
            const angle = (i / nodes.length) * 2 * Math.PI;
            node.x = centerX + radius * Math.cos(angle);
            node.y = centerY + radius * Math.sin(angle);
        });
    }
    getNodeColor(type) {
        switch (type) {
            case 'subject':
                return 'var(--color-accent)';
            case 'object':
                return 'var(--color-blue)';
            case 'predicate':
                return 'var(--color-green)';
            default:
                return 'var(--text-muted)';
        }
    }
    truncateLabel(label, maxLength) {
        if (label.length <= maxLength)
            return label;
        return label.substring(0, maxLength - 3) + '...';
    }
    handleNodeClick(node) {
        // If it's a file link, navigate to it
        if (node.id.startsWith('file://') || node.id.includes('.md')) {
            const filename = node.id.replace('file://', '');
            this.plugin.app.workspace.openLinkText(filename, '');
        }
        else {
            // Show node details in a notice
            new obsidian_1.Notice(`Node: ${node.label}\nType: ${node.type}\nID: ${node.id}`, 3000);
        }
    }
    addZoomPan(svg, g) {
        let isMouseDown = false;
        let startX = 0;
        let startY = 0;
        let currentTransform = { x: 0, y: 0, scale: 1 };
        svg.addEventListener('mousedown', (e) => {
            isMouseDown = true;
            startX = e.clientX;
            startY = e.clientY;
            svg.style.cursor = 'grabbing';
        });
        svg.addEventListener('mousemove', (e) => {
            if (!isMouseDown)
                return;
            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            currentTransform.x += deltaX;
            currentTransform.y += deltaY;
            g.setAttribute('transform', `translate(${currentTransform.x}, ${currentTransform.y}) scale(${currentTransform.scale})`);
            startX = e.clientX;
            startY = e.clientY;
        });
        svg.addEventListener('mouseup', () => {
            isMouseDown = false;
            svg.style.cursor = 'grab';
        });
        svg.addEventListener('wheel', (e) => {
            e.preventDefault();
            const scaleFactor = e.deltaY > 0 ? 0.9 : 1.1;
            currentTransform.scale = Math.max(0.1, Math.min(3, currentTransform.scale * scaleFactor));
            g.setAttribute('transform', `translate(${currentTransform.x}, ${currentTransform.y}) scale(${currentTransform.scale})`);
        });
        svg.style.cursor = 'grab';
    }
    addControls(container, data, config) {
        const controlsDiv = document.createElement('div');
        controlsDiv.style.cssText = `
            margin-top: 1em;
            display: flex;
            gap: 0.5em;
            flex-wrap: wrap;
            align-items: center;
            padding: 0.5em;
            background: var(--background-modifier-form-field);
            border-radius: var(--radius-s);
        `;
        // Node count info
        const info = document.createElement('span');
        info.textContent = `Nodes: ${data.nodes.length}, Links: ${data.links.length}`;
        info.style.cssText = 'color: var(--text-muted); font-size: 0.9em; margin-right: auto;';
        controlsDiv.appendChild(info);
        // PNG Export dropdown
        const pngExportContainer = this.createPNGExportDropdown(container, data, config);
        controlsDiv.appendChild(pngExportContainer);
        // Export as SVG button
        const exportSvgBtn = document.createElement('button');
        exportSvgBtn.textContent = 'Export SVG';
        exportSvgBtn.className = 'mod-cta';
        exportSvgBtn.style.cssText = 'padding: 0.25em 0.5em; font-size: 0.9em;';
        exportSvgBtn.addEventListener('click', () => this.exportAsSVG(container));
        controlsDiv.appendChild(exportSvgBtn);
        // Export as RDF dropdown
        const rdfExportContainer = document.createElement('div');
        rdfExportContainer.style.cssText = 'position: relative; display: inline-block;';
        const rdfExportBtn = document.createElement('button');
        rdfExportBtn.textContent = 'Export RDF ▼';
        rdfExportBtn.style.cssText = 'padding: 0.25em 0.5em; font-size: 0.9em; background: var(--interactive-accent); color: var(--text-on-accent); border: none; border-radius: 3px; cursor: pointer;';
        const rdfDropdown = document.createElement('div');
        rdfDropdown.style.cssText = `
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            border-radius: 3px;
            box-shadow: var(--shadow-s);
            z-index: 1000;
            min-width: 120px;
        `;
        const formats = [
            { format: 'turtle', label: 'Turtle (.ttl)' },
            { format: 'json-ld', label: 'JSON-LD (.jsonld)' },
            { format: 'n-triples', label: 'N-Triples (.nt)' },
            { format: 'rdf-xml', label: 'RDF/XML (.rdf)' }
        ];
        for (const { format, label } of formats) {
            const item = document.createElement('div');
            item.textContent = label;
            item.style.cssText = 'padding: 0.5em 0.8em; cursor: pointer; border-bottom: 1px solid var(--background-modifier-border);';
            item.addEventListener('mouseenter', () => {
                item.style.background = 'var(--background-modifier-hover)';
            });
            item.addEventListener('mouseleave', () => {
                item.style.background = '';
            });
            item.addEventListener('click', () => {
                this.exportGraphAsRDF(data, format);
                rdfDropdown.style.display = 'none';
            });
            rdfDropdown.appendChild(item);
        }
        // Advanced export option
        const advancedItem = document.createElement('div');
        advancedItem.textContent = 'Advanced...';
        advancedItem.style.cssText = 'padding: 0.5em 0.8em; cursor: pointer; font-weight: 500; color: var(--text-accent);';
        advancedItem.addEventListener('mouseenter', () => {
            advancedItem.style.background = 'var(--background-modifier-hover)';
        });
        advancedItem.addEventListener('mouseleave', () => {
            advancedItem.style.background = '';
        });
        advancedItem.addEventListener('click', () => {
            this.openAdvancedRDFExport(data);
            rdfDropdown.style.display = 'none';
        });
        rdfDropdown.appendChild(advancedItem);
        rdfExportBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            rdfDropdown.style.display = rdfDropdown.style.display === 'none' ? 'block' : 'none';
        });
        // Close dropdown when clicking outside
        document.addEventListener('click', () => {
            rdfDropdown.style.display = 'none';
        });
        rdfExportContainer.appendChild(rdfExportBtn);
        rdfExportContainer.appendChild(rdfDropdown);
        controlsDiv.appendChild(rdfExportContainer);
        // Reset zoom button
        const resetBtn = document.createElement('button');
        resetBtn.textContent = 'Reset View';
        resetBtn.style.cssText = 'padding: 0.25em 0.5em; font-size: 0.9em;';
        resetBtn.addEventListener('click', () => this.resetView(container));
        controlsDiv.appendChild(resetBtn);
        container.appendChild(controlsDiv);
    }
    createPNGExportDropdown(container, data, config) {
        const pngExportContainer = document.createElement('div');
        pngExportContainer.style.cssText = 'position: relative; display: inline-block;';
        const pngExportBtn = document.createElement('button');
        pngExportBtn.textContent = 'Export PNG ▼';
        pngExportBtn.style.cssText = 'padding: 0.25em 0.5em; font-size: 0.9em; background: var(--interactive-accent); color: var(--text-on-accent); border: none; border-radius: 3px; cursor: pointer;';
        const pngDropdown = document.createElement('div');
        pngDropdown.style.cssText = `
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background: var(--background-primary);
            border: 1px solid var(--background-modifier-border);
            border-radius: 3px;
            box-shadow: var(--shadow-s);
            z-index: 1000;
            min-width: 180px;
        `;
        const resolutions = [
            { scale: 1, label: 'Standard (800×600)', filename: 'graph-standard.png' },
            { scale: 2, label: 'High-DPI (1600×1200)', filename: 'graph-hd.png' },
            { scale: 4, label: '4K (3200×2400)', filename: 'graph-4k.png' }
        ];
        for (const resolution of resolutions) {
            const item = document.createElement('div');
            item.textContent = resolution.label;
            item.style.cssText = 'padding: 0.5em 0.8em; cursor: pointer; border-bottom: 1px solid var(--background-modifier-border);';
            item.addEventListener('mouseenter', () => {
                item.style.background = 'var(--background-modifier-hover)';
            });
            item.addEventListener('mouseleave', () => {
                item.style.background = '';
            });
            item.addEventListener('click', () => {
                this.exportAsPNG(container, data, config, resolution.scale, resolution.filename);
                pngDropdown.style.display = 'none';
            });
            pngDropdown.appendChild(item);
        }
        pngExportBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            pngDropdown.style.display = pngDropdown.style.display === 'none' ? 'block' : 'none';
        });
        // Close dropdown when clicking outside
        document.addEventListener('click', () => {
            pngDropdown.style.display = 'none';
        });
        pngExportContainer.appendChild(pngExportBtn);
        pngExportContainer.appendChild(pngDropdown);
        return pngExportContainer;
    }
    exportAsPNG(container, data, config, scale = 1, filename = 'knowledge-graph.png') {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const svg = container.querySelector('svg');
            if (!svg) {
                new obsidian_1.Notice('No graph visualization found');
                return;
            }
            try {
                // Show loading notice for high-resolution exports
                let loadingNotice = null;
                if (scale >= 2) {
                    loadingNotice = new obsidian_1.Notice(`Generating ${scale === 2 ? 'high-resolution' : '4K'} PNG export...`, 0);
                }
                // Create canvas with scaled dimensions
                const canvas = document.createElement('canvas');
                const baseWidth = 800;
                const baseHeight = 600;
                canvas.width = baseWidth * scale;
                canvas.height = baseHeight * scale;
                const ctx = canvas.getContext('2d');
                if (!ctx) {
                    throw new Error('Could not get canvas context');
                }
                // Scale context for high-DPI rendering
                ctx.scale(scale, scale);
                // Set high-quality rendering
                ctx.imageSmoothingEnabled = true;
                ctx.imageSmoothingQuality = 'high';
                // Fill background with theme color
                const bgColor = this.getThemeColor('--background-primary') || '#ffffff';
                ctx.fillStyle = bgColor;
                ctx.fillRect(0, 0, baseWidth, baseHeight);
                // Draw border
                const borderColor = this.getThemeColor('--background-modifier-border') || '#e5e5e5';
                ctx.strokeStyle = borderColor;
                ctx.lineWidth = 1;
                ctx.strokeRect(0, 0, baseWidth, baseHeight);
                // Render graph to canvas
                yield this.renderGraphToCanvas(ctx, data, config, baseWidth, baseHeight);
                // Convert canvas to PNG blob
                canvas.toBlob((blob) => {
                    if (blob) {
                        this.downloadBlob(blob, filename);
                        if (loadingNotice) {
                            loadingNotice.hide();
                        }
                        const sizeKB = Math.round(blob.size / 1024);
                        new obsidian_1.Notice(`Graph exported as PNG (${sizeKB} KB)`);
                    }
                    else {
                        throw new Error('Failed to create PNG blob');
                    }
                }, 'image/png', 0.9);
            }
            catch (error) {
                console.error('PNG export failed:', error);
                new obsidian_1.Notice(`PNG export failed: ${error.message}`);
            }
        });
    }
    renderGraphToCanvas(ctx, data, config, width, height) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Position nodes (reuse existing algorithm)
            this.positionNodes(data.nodes, width, height);
            // Render links first (background layer)
            for (const link of data.links) {
                const sourceNode = data.nodes.find(n => n.id === (typeof link.source === 'string' ? link.source : link.source.id));
                const targetNode = data.nodes.find(n => n.id === (typeof link.target === 'string' ? link.target : link.target.id));
                if (sourceNode && targetNode) {
                    // Draw line
                    ctx.beginPath();
                    ctx.moveTo(sourceNode.x || 0, sourceNode.y || 0);
                    ctx.lineTo(targetNode.x || 0, targetNode.y || 0);
                    ctx.strokeStyle = this.getThemeColor('--text-muted') || '#6b7280';
                    ctx.lineWidth = 1;
                    ctx.stroke();
                    // Draw arrowhead
                    this.drawArrowHead(ctx, sourceNode.x || 0, sourceNode.y || 0, targetNode.x || 0, targetNode.y || 0);
                    // Draw edge label if enabled
                    if (config.showLabels && link.label) {
                        const midX = ((sourceNode.x || 0) + (targetNode.x || 0)) / 2;
                        const midY = ((sourceNode.y || 0) + (targetNode.y || 0)) / 2;
                        // Draw background rectangle for label
                        const labelText = this.truncateLabel(link.label, 15);
                        ctx.font = '10px var(--font-interface)';
                        const textMetrics = ctx.measureText(labelText);
                        ctx.fillStyle = this.getThemeColor('--background-primary') || '#ffffff';
                        ctx.fillRect(midX - textMetrics.width / 2 - 2, midY - 7, textMetrics.width + 4, 12);
                        // Draw label text
                        ctx.fillStyle = this.getThemeColor('--text-muted') || '#6b7280';
                        ctx.textAlign = 'center';
                        ctx.fillText(labelText, midX, midY + 3);
                    }
                }
            }
            // Render nodes on top
            for (const node of data.nodes) {
                const x = node.x || 0;
                const y = node.y || 0;
                const radius = config.nodeSize || 8;
                // Draw node circle
                ctx.beginPath();
                ctx.arc(x, y, radius, 0, 2 * Math.PI);
                ctx.fillStyle = this.getNodeCanvasColor(node.type);
                ctx.fill();
                // Draw border
                ctx.strokeStyle = this.getThemeColor('--background-modifier-border') || '#e5e5e5';
                ctx.lineWidth = 2;
                ctx.stroke();
                // Draw node label if enabled
                if (config.showLabels) {
                    ctx.font = '12px var(--font-interface)';
                    ctx.fillStyle = this.getThemeColor('--text-normal') || '#000000';
                    ctx.textAlign = 'center';
                    const labelText = this.truncateLabel(node.label, 20);
                    ctx.fillText(labelText, x, y + radius + 15);
                }
            }
        });
    }
    drawArrowHead(ctx, fromX, fromY, toX, toY) {
        const angle = Math.atan2(toY - fromY, toX - fromX);
        const arrowLength = 10;
        const arrowAngle = Math.PI / 6;
        // Calculate arrowhead position (offset from target node)
        const offsetDistance = 10; // Distance from node edge
        const offsetX = toX - offsetDistance * Math.cos(angle);
        const offsetY = toY - offsetDistance * Math.sin(angle);
        ctx.beginPath();
        ctx.moveTo(offsetX, offsetY);
        ctx.lineTo(offsetX - arrowLength * Math.cos(angle - arrowAngle), offsetY - arrowLength * Math.sin(angle - arrowAngle));
        ctx.moveTo(offsetX, offsetY);
        ctx.lineTo(offsetX - arrowLength * Math.cos(angle + arrowAngle), offsetY - arrowLength * Math.sin(angle + arrowAngle));
        ctx.strokeStyle = this.getThemeColor('--text-muted') || '#6b7280';
        ctx.lineWidth = 1;
        ctx.stroke();
    }
    getThemeColor(cssVariable) {
        try {
            const style = getComputedStyle(document.documentElement);
            const color = style.getPropertyValue(cssVariable).trim();
            if (!color)
                return null;
            // Convert CSS color formats to hex if needed
            if (color.startsWith('hsl')) {
                return this.hslToHex(color);
            }
            if (color.startsWith('rgb')) {
                return this.rgbToHex(color);
            }
            return color;
        }
        catch (error) {
            console.warn(`Failed to get theme color for ${cssVariable}:`, error);
            return null;
        }
    }
    getNodeCanvasColor(type) {
        switch (type) {
            case 'subject':
                return this.getThemeColor('--color-accent') || '#7c3aed';
            case 'object':
                return this.getThemeColor('--color-blue') || '#2563eb';
            case 'predicate':
                return this.getThemeColor('--color-green') || '#059669';
            default:
                return '#6b7280';
        }
    }
    hslToHex(hsl) {
        // Simple HSL to hex conversion - for basic theme support
        // This is a simplified version; for production, consider using a library
        return '#6b7280'; // Fallback color
    }
    rgbToHex(rgb) {
        const match = rgb.match(/rgb\((\d+),\s*(\d+),\s*(\d+)\)/);
        if (!match)
            return '#000000';
        const r = parseInt(match[1]);
        const g = parseInt(match[2]);
        const b = parseInt(match[3]);
        return '#' + [r, g, b].map(x => {
            const hex = x.toString(16);
            return hex.length === 1 ? '0' + hex : hex;
        }).join('');
    }
    downloadBlob(blob, filename) {
        var _a, _b;
        // Check if we're in a test environment (JSDOM)
        if (typeof window !== 'undefined' && ((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes('jsdom'))) {
            // In test environment, just log the action instead of attempting DOM manipulation
            console.log(`Test environment: Would download ${filename} (${blob.size} bytes)`);
            return;
        }
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.style.display = 'none';
        // Ensure document.body exists before appending
        if (document.body) {
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        else {
            // Fallback for environments without document.body
            console.warn('Document body not available for download');
        }
        URL.revokeObjectURL(url);
    }
    exportAsSVG(container) {
        const svg = container.querySelector('svg');
        if (!svg)
            return;
        try {
            const serializer = new XMLSerializer();
            const svgString = serializer.serializeToString(svg);
            const blob = new Blob([svgString], { type: 'image/svg+xml' });
            this.downloadBlob(blob, 'knowledge-graph.svg');
            new obsidian_1.Notice('Graph exported as SVG');
        }
        catch (error) {
            console.error('SVG export failed:', error);
            new obsidian_1.Notice('Failed to export SVG');
        }
    }
    resetView(container) {
        const svg = container.querySelector('svg');
        const g = svg === null || svg === void 0 ? void 0 : svg.querySelector('g');
        if (g) {
            g.setAttribute('transform', 'translate(0, 0) scale(1)');
        }
    }
    createLoadingIndicator() {
        const loading = document.createElement('div');
        loading.className = 'graph-loading';
        loading.textContent = 'Generating graph visualization...';
        loading.style.cssText = 'padding: 2em; text-align: center; color: var(--text-muted);';
        return loading;
    }
    createErrorMessage(error) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'graph-error';
        errorDiv.style.cssText = `
            background: var(--background-modifier-error);
            color: var(--text-error);
            padding: 1em;
            border-radius: var(--radius-m);
            border: 1px solid var(--background-modifier-border);
        `;
        const title = document.createElement('strong');
        title.textContent = 'Graph Visualization Error: ';
        errorDiv.appendChild(title);
        const message = document.createElement('span');
        message.textContent = error.message;
        errorDiv.appendChild(message);
        return errorDiv;
    }
    /**
     * Export graph visualization data as RDF
     */
    exportGraphAsRDF(data, format) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Convert graph data back to triples
                const triples = this.convertGraphDataToTriples(data);
                // Create a graph from the triples
                const graph = new Graph_1.Graph();
                for (const triple of triples) {
                    graph.add(triple);
                }
                const fileName = `graph-visualization-${Date.now()}`;
                const result = yield this.rdfService.exportGraph(graph, {
                    format,
                    fileName,
                    saveToVault: true,
                    includeComments: true,
                    prettyPrint: true,
                    targetFolder: 'exports'
                });
                if (result.isSuccess) {
                    const exportData = result.getValue();
                    new obsidian_1.Notice(`Exported graph visualization as ${format.toUpperCase()} (${exportData.tripleCount} triples)`);
                }
                else {
                    new obsidian_1.Notice(`Export failed: ${result.errorValue()}`);
                }
            }
            catch (error) {
                new obsidian_1.Notice(`Export error: ${error.message}`);
                console.error('Graph RDF export error:', error);
            }
        });
    }
    /**
     * Open advanced RDF export modal
     */
    openAdvancedRDFExport(data) {
        try {
            // Convert graph data back to triples
            const triples = this.convertGraphDataToTriples(data);
            // Create a graph from the triples
            const graph = new Graph_1.Graph();
            for (const triple of triples) {
                graph.add(triple);
            }
            const modal = new ExportRDFModal_1.ExportRDFModal(this.plugin.app, graph, this.rdfService.getNamespaceManager(), (result) => {
                new obsidian_1.Notice(`Graph visualization exported: ${result.fileName}`);
            });
            modal.open();
        }
        catch (error) {
            new obsidian_1.Notice(`Failed to open export modal: ${error.message}`);
            console.error('Export modal error:', error);
        }
    }
    /**
     * Convert GraphData back to Triple format
     */
    convertGraphDataToTriples(data) {
        const triples = [];
        // Reconstruct triples from graph data
        for (const link of data.links) {
            const sourceNode = data.nodes.find(n => n.id === (typeof link.source === 'string' ? link.source : link.source.id));
            const targetNode = data.nodes.find(n => n.id === (typeof link.target === 'string' ? link.target : link.target.id));
            if (sourceNode && targetNode) {
                triples.push(new Triple_1.Triple(new Triple_1.IRI(sourceNode.id), new Triple_1.IRI(link.label), new Triple_1.IRI(targetNode.id)));
            }
        }
        return triples;
    }
}
exports.GraphVisualizationProcessor = GraphVisualizationProcessor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,