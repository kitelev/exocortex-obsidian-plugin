8b237b9e783dc9b331078cb5c9d95168
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExoFocus = void 0;
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
class ExoFocus extends Entity_1.Entity {
    constructor(props, id) {
        super(props);
        this._focusId = id || this.generateId();
    }
    generateId() {
        return 'focus-' + Date.now() + '-' + Math.random().toString(36).substring(2, 9);
    }
    get id() {
        return this._focusId;
    }
    static create(props, id) {
        if (!props.name || props.name.trim().length === 0) {
            return Result_1.Result.fail('Focus name is required');
        }
        if (props.priority < 0 || props.priority > 100) {
            return Result_1.Result.fail('Priority must be between 0 and 100');
        }
        return Result_1.Result.ok(new ExoFocus(props, id));
    }
    get name() {
        return this.props.name;
    }
    get description() {
        return this.props.description;
    }
    get filters() {
        return this.props.filters;
    }
    get priority() {
        return this.props.priority;
    }
    get active() {
        return this.props.active;
    }
    get createdAt() {
        return this.props.createdAt;
    }
    get updatedAt() {
        return this.props.updatedAt;
    }
    addFilter(filter) {
        if (!this.isValidFilter(filter)) {
            return Result_1.Result.fail('Invalid filter configuration');
        }
        this.props.filters.push(filter);
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    removeFilter(index) {
        if (index < 0 || index >= this.props.filters.length) {
            return Result_1.Result.fail('Invalid filter index');
        }
        this.props.filters.splice(index, 1);
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    activate() {
        this.props.active = true;
        this.props.updatedAt = new Date();
    }
    deactivate() {
        this.props.active = false;
        this.props.updatedAt = new Date();
    }
    updatePriority(priority) {
        if (priority < 0 || priority > 100) {
            return Result_1.Result.fail('Priority must be between 0 and 100');
        }
        this.props.priority = priority;
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    matchesAsset(asset) {
        if (!this.props.active) {
            return true;
        }
        for (const filter of this.props.filters) {
            if (!this.evaluateFilter(filter, asset)) {
                return false;
            }
        }
        return true;
    }
    matchesTriple(triple) {
        if (!this.props.active) {
            return true;
        }
        for (const filter of this.props.filters) {
            if (filter.type === 'property' && filter.property) {
                if (filter.property !== triple.predicate) {
                    continue;
                }
                if (!this.evaluateValue(filter.operator, triple.object, filter.value)) {
                    return false;
                }
            }
        }
        return true;
    }
    isValidFilter(filter) {
        const validTypes = ['class', 'tag', 'property', 'timeframe', 'relation'];
        const validOperators = ['includes', 'excludes', 'equals', 'contains', 'before', 'after', 'between'];
        return validTypes.includes(filter.type) && validOperators.includes(filter.operator);
    }
    evaluateFilter(filter, asset) {
        switch (filter.type) {
            case 'class':
                return this.evaluateClassFilter(filter, asset);
            case 'tag':
                return this.evaluateTagFilter(filter, asset);
            case 'property':
                return this.evaluatePropertyFilter(filter, asset);
            case 'timeframe':
                return this.evaluateTimeframeFilter(filter, asset);
            case 'relation':
                return this.evaluateRelationFilter(filter, asset);
            default:
                return true;
        }
    }
    evaluateClassFilter(filter, asset) {
        const assetClass = asset['exo__Instance_class'] || asset.class;
        if (!assetClass)
            return false;
        const className = assetClass.replace(/\[\[|\]\]/g, '');
        switch (filter.operator) {
            case 'equals':
                return className === filter.value;
            case 'includes':
                return Array.isArray(filter.value) ? filter.value.includes(className) : className === filter.value;
            case 'excludes':
                return Array.isArray(filter.value) ? !filter.value.includes(className) : className !== filter.value;
            case 'contains':
                return className.toLowerCase().includes(String(filter.value).toLowerCase());
            default:
                return true;
        }
    }
    evaluateTagFilter(filter, asset) {
        const tags = asset.tags || asset['exo__Asset_tags'] || [];
        const tagArray = Array.isArray(tags) ? tags : [tags];
        switch (filter.operator) {
            case 'includes':
                return tagArray.some(tag => tag === filter.value ||
                    (Array.isArray(filter.value) && filter.value.includes(tag)));
            case 'excludes':
                return !tagArray.some(tag => tag === filter.value ||
                    (Array.isArray(filter.value) && filter.value.includes(tag)));
            case 'contains':
                return tagArray.some(tag => tag.toLowerCase().includes(String(filter.value).toLowerCase()));
            default:
                return true;
        }
    }
    evaluatePropertyFilter(filter, asset) {
        if (!filter.property)
            return true;
        const value = asset[filter.property];
        if (value === undefined)
            return filter.operator === 'excludes';
        return this.evaluateValue(filter.operator, value, filter.value);
    }
    evaluateTimeframeFilter(filter, asset) {
        const dateProperties = [
            'exo__Asset_createdAt',
            'exo__Asset_updatedAt',
            'ems__Task_dueDate',
            'ems__Event_date'
        ];
        for (const prop of dateProperties) {
            const dateValue = asset[prop];
            if (dateValue) {
                const date = new Date(dateValue);
                if (!isNaN(date.getTime())) {
                    return this.evaluateDateValue(filter.operator, date, filter.value);
                }
            }
        }
        return filter.operator === 'excludes';
    }
    evaluateRelationFilter(filter, asset) {
        // This would need access to the graph to evaluate relations
        // For now, return true
        return true;
    }
    evaluateValue(operator, actualValue, filterValue) {
        switch (operator) {
            case 'equals':
                return actualValue === filterValue;
            case 'includes':
                if (Array.isArray(actualValue)) {
                    return actualValue.includes(filterValue);
                }
                return actualValue === filterValue;
            case 'excludes':
                if (Array.isArray(actualValue)) {
                    return !actualValue.includes(filterValue);
                }
                return actualValue !== filterValue;
            case 'contains':
                return String(actualValue).toLowerCase().includes(String(filterValue).toLowerCase());
            default:
                return true;
        }
    }
    evaluateDateValue(operator, date, filterValue) {
        switch (operator) {
            case 'before':
                return date < new Date(filterValue);
            case 'after':
                return date > new Date(filterValue);
            case 'between':
                if (Array.isArray(filterValue) && filterValue.length === 2) {
                    const start = new Date(filterValue[0]);
                    const end = new Date(filterValue[1]);
                    return date >= start && date <= end;
                }
                return false;
            case 'equals':
                const filterDate = new Date(filterValue);
                return date.toDateString() === filterDate.toDateString();
            default:
                return true;
        }
    }
    toJSON() {
        return {
            id: this.id,
            name: this.props.name,
            description: this.props.description,
            filters: this.props.filters,
            priority: this.props.priority,
            active: this.props.active,
            createdAt: this.props.createdAt.toISOString(),
            updatedAt: this.props.updatedAt.toISOString()
        };
    }
    static fromJSON(json) {
        return ExoFocus.create({
            name: json.name,
            description: json.description,
            filters: json.filters || [],
            priority: json.priority || 50,
            active: json.active !== false,
            createdAt: new Date(json.createdAt || Date.now()),
            updatedAt: new Date(json.updatedAt || Date.now())
        }, json.id);
    }
}
exports.ExoFocus = ExoFocus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,