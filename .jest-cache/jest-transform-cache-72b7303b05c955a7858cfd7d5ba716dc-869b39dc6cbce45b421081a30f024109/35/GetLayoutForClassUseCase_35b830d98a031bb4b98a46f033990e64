a0da4a7d1a0b46f372da8cd87bdd2c63
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetLayoutForClassUseCase = void 0;
const tslib_1 = require("tslib");
const ClassName_1 = require("../../domain/value-objects/ClassName");
const Result_1 = require("../../domain/core/Result");
class GetLayoutForClassUseCase {
    constructor(layoutRepository) {
        this.layoutRepository = layoutRepository;
    }
    execute(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Validate class name
                const classNameResult = ClassName_1.ClassName.create(request.className);
                if (classNameResult.isFailure) {
                    return Result_1.Result.fail(`Invalid class name: ${classNameResult.error}`);
                }
                const className = classNameResult.getValue();
                // Find layouts for this class
                const layouts = request.includeDisabled
                    ? yield this.layoutRepository.findByClass(className)
                    : yield this.layoutRepository.findEnabledByClass(className);
                // Return highest priority layout if found
                if (layouts.length > 0) {
                    return Result_1.Result.ok({
                        layout: layouts[0],
                        fallbackUsed: false
                    });
                }
                // Try to find parent class layouts (inheritance chain)
                const parentLayout = yield this.findParentClassLayout(className);
                if (parentLayout) {
                    return Result_1.Result.ok({
                        layout: parentLayout,
                        fallbackUsed: true
                    });
                }
                // No layout found - will use default
                return Result_1.Result.ok({
                    layout: null,
                    fallbackUsed: true
                });
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to get layout for class: ${error}`);
            }
        });
    }
    findParentClassLayout(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Check common parent classes
            const parentClasses = this.getParentClasses(className.value);
            for (const parentClass of parentClasses) {
                const parentClassName = ClassName_1.ClassName.create(parentClass);
                if (parentClassName.isFailure)
                    continue;
                const layouts = yield this.layoutRepository.findEnabledByClass(parentClassName.getValue());
                if (layouts.length > 0) {
                    return layouts[0];
                }
            }
            return null;
        });
    }
    getParentClasses(className) {
        // Define inheritance hierarchy
        const hierarchy = {
            'ems__Project': ['ems__Effort', 'exo__Asset'],
            'ems__Task': ['ems__Effort', 'exo__Asset'],
            'ems__Area': ['exo__Asset'],
            'ems__Goal': ['exo__Asset'],
            'ems__Effort': ['exo__Asset']
        };
        return hierarchy[className] || ['exo__Asset'];
    }
}
exports.GetLayoutForClassUseCase = GetLayoutForClassUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9HZXRMYXlvdXRGb3JDbGFzc1VzZUNhc2UudHMiLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG9FQUFpRTtBQUNqRSxxREFBa0Q7QUFZbEQsTUFBYSx3QkFBd0I7SUFDakMsWUFDWSxnQkFBd0M7UUFBeEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF3QjtJQUNqRCxDQUFDO0lBRUUsT0FBTyxDQUFDLE9BQWlDOztZQUMzQyxJQUFJO2dCQUNBLHNCQUFzQjtnQkFDdEIsTUFBTSxlQUFlLEdBQUcscUJBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLGVBQWUsQ0FBQyxTQUFTLEVBQUU7b0JBQzNCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FDZCx1QkFBdUIsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUNqRCxDQUFDO2lCQUNMO2dCQUVELE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFN0MsOEJBQThCO2dCQUM5QixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsZUFBZTtvQkFDbkMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7b0JBQ3BELENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFFaEUsMENBQTBDO2dCQUMxQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixPQUFPLGVBQU0sQ0FBQyxFQUFFLENBQTRCO3dCQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQzt3QkFDbEIsWUFBWSxFQUFFLEtBQUs7cUJBQ3RCLENBQUMsQ0FBQztpQkFDTjtnQkFFRCx1REFBdUQ7Z0JBQ3ZELE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNqRSxJQUFJLFlBQVksRUFBRTtvQkFDZCxPQUFPLGVBQU0sQ0FBQyxFQUFFLENBQTRCO3dCQUN4QyxNQUFNLEVBQUUsWUFBWTt3QkFDcEIsWUFBWSxFQUFFLElBQUk7cUJBQ3JCLENBQUMsQ0FBQztpQkFDTjtnQkFFRCxxQ0FBcUM7Z0JBQ3JDLE9BQU8sZUFBTSxDQUFDLEVBQUUsQ0FBNEI7b0JBQ3hDLE1BQU0sRUFBRSxJQUFJO29CQUNaLFlBQVksRUFBRSxJQUFJO2lCQUNyQixDQUFDLENBQUM7YUFFTjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNaLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FDZCxtQ0FBbUMsS0FBSyxFQUFFLENBQzdDLENBQUM7YUFDTDtRQUNMLENBQUM7S0FBQTtJQUVhLHFCQUFxQixDQUFDLFNBQW9COztZQUNwRCw4QkFBOEI7WUFDOUIsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUU3RCxLQUFLLE1BQU0sV0FBVyxJQUFJLGFBQWEsRUFBRTtnQkFDckMsTUFBTSxlQUFlLEdBQUcscUJBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3RELElBQUksZUFBZSxDQUFDLFNBQVM7b0JBQUUsU0FBUztnQkFFeEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQzFELGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FDN0IsQ0FBQztnQkFFRixJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNwQixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDckI7YUFDSjtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7S0FBQTtJQUVPLGdCQUFnQixDQUFDLFNBQWlCO1FBQ3RDLCtCQUErQjtRQUMvQixNQUFNLFNBQVMsR0FBNkI7WUFDeEMsY0FBYyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQztZQUM3QyxXQUFXLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDO1lBQzFDLFdBQVcsRUFBRSxDQUFDLFlBQVksQ0FBQztZQUMzQixXQUFXLEVBQUUsQ0FBQyxZQUFZLENBQUM7WUFDM0IsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDO1NBQ2hDLENBQUM7UUFFRixPQUFPLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDSjtBQXBGRCw0REFvRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9HZXRMYXlvdXRGb3JDbGFzc1VzZUNhc2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNsYXNzTGF5b3V0UmVwb3NpdG9yeSB9IGZyb20gJy4uLy4uL2RvbWFpbi9yZXBvc2l0b3JpZXMvSUNsYXNzTGF5b3V0UmVwb3NpdG9yeSc7XG5pbXBvcnQgeyBDbGFzc0xheW91dCB9IGZyb20gJy4uLy4uL2RvbWFpbi9lbnRpdGllcy9DbGFzc0xheW91dCc7XG5pbXBvcnQgeyBDbGFzc05hbWUgfSBmcm9tICcuLi8uLi9kb21haW4vdmFsdWUtb2JqZWN0cy9DbGFzc05hbWUnO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSAnLi4vLi4vZG9tYWluL2NvcmUvUmVzdWx0JztcblxuZXhwb3J0IGludGVyZmFjZSBHZXRMYXlvdXRGb3JDbGFzc1JlcXVlc3Qge1xuICAgIGNsYXNzTmFtZTogc3RyaW5nO1xuICAgIGluY2x1ZGVEaXNhYmxlZD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TGF5b3V0Rm9yQ2xhc3NSZXNwb25zZSB7XG4gICAgbGF5b3V0OiBDbGFzc0xheW91dCB8IG51bGw7XG4gICAgZmFsbGJhY2tVc2VkOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgR2V0TGF5b3V0Rm9yQ2xhc3NVc2VDYXNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBsYXlvdXRSZXBvc2l0b3J5OiBJQ2xhc3NMYXlvdXRSZXBvc2l0b3J5XG4gICAgKSB7fVxuXG4gICAgYXN5bmMgZXhlY3V0ZShyZXF1ZXN0OiBHZXRMYXlvdXRGb3JDbGFzc1JlcXVlc3QpOiBQcm9taXNlPFJlc3VsdDxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPj4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVmFsaWRhdGUgY2xhc3MgbmFtZVxuICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lUmVzdWx0ID0gQ2xhc3NOYW1lLmNyZWF0ZShyZXF1ZXN0LmNsYXNzTmFtZSk7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lUmVzdWx0LmlzRmFpbHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxHZXRMYXlvdXRGb3JDbGFzc1Jlc3BvbnNlPihcbiAgICAgICAgICAgICAgICAgICAgYEludmFsaWQgY2xhc3MgbmFtZTogJHtjbGFzc05hbWVSZXN1bHQuZXJyb3J9YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGNsYXNzTmFtZVJlc3VsdC5nZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgICAvLyBGaW5kIGxheW91dHMgZm9yIHRoaXMgY2xhc3NcbiAgICAgICAgICAgIGNvbnN0IGxheW91dHMgPSByZXF1ZXN0LmluY2x1ZGVEaXNhYmxlZCBcbiAgICAgICAgICAgICAgICA/IGF3YWl0IHRoaXMubGF5b3V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcyhjbGFzc05hbWUpXG4gICAgICAgICAgICAgICAgOiBhd2FpdCB0aGlzLmxheW91dFJlcG9zaXRvcnkuZmluZEVuYWJsZWRCeUNsYXNzKGNsYXNzTmFtZSk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybiBoaWdoZXN0IHByaW9yaXR5IGxheW91dCBpZiBmb3VuZFxuICAgICAgICAgICAgaWYgKGxheW91dHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSZXN1bHQub2s8R2V0TGF5b3V0Rm9yQ2xhc3NSZXNwb25zZT4oe1xuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IGxheW91dHNbMF0sIC8vIEFscmVhZHkgc29ydGVkIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrVXNlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVHJ5IHRvIGZpbmQgcGFyZW50IGNsYXNzIGxheW91dHMgKGluaGVyaXRhbmNlIGNoYWluKVxuICAgICAgICAgICAgY29uc3QgcGFyZW50TGF5b3V0ID0gYXdhaXQgdGhpcy5maW5kUGFyZW50Q2xhc3NMYXlvdXQoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRMYXlvdXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVzdWx0Lm9rPEdldExheW91dEZvckNsYXNzUmVzcG9uc2U+KHtcbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBwYXJlbnRMYXlvdXQsXG4gICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrVXNlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBObyBsYXlvdXQgZm91bmQgLSB3aWxsIHVzZSBkZWZhdWx0XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0Lm9rPEdldExheW91dEZvckNsYXNzUmVzcG9uc2U+KHtcbiAgICAgICAgICAgICAgICBsYXlvdXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgZmFsbGJhY2tVc2VkOiB0cnVlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPEdldExheW91dEZvckNsYXNzUmVzcG9uc2U+KFxuICAgICAgICAgICAgICAgIGBGYWlsZWQgdG8gZ2V0IGxheW91dCBmb3IgY2xhc3M6ICR7ZXJyb3J9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYXN5bmMgZmluZFBhcmVudENsYXNzTGF5b3V0KGNsYXNzTmFtZTogQ2xhc3NOYW1lKTogUHJvbWlzZTxDbGFzc0xheW91dCB8IG51bGw+IHtcbiAgICAgICAgLy8gQ2hlY2sgY29tbW9uIHBhcmVudCBjbGFzc2VzXG4gICAgICAgIGNvbnN0IHBhcmVudENsYXNzZXMgPSB0aGlzLmdldFBhcmVudENsYXNzZXMoY2xhc3NOYW1lLnZhbHVlKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgcGFyZW50Q2xhc3Mgb2YgcGFyZW50Q2xhc3Nlcykge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50Q2xhc3NOYW1lID0gQ2xhc3NOYW1lLmNyZWF0ZShwYXJlbnRDbGFzcyk7XG4gICAgICAgICAgICBpZiAocGFyZW50Q2xhc3NOYW1lLmlzRmFpbHVyZSkgY29udGludWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGxheW91dHMgPSBhd2FpdCB0aGlzLmxheW91dFJlcG9zaXRvcnkuZmluZEVuYWJsZWRCeUNsYXNzKFxuICAgICAgICAgICAgICAgIHBhcmVudENsYXNzTmFtZS5nZXRWYWx1ZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobGF5b3V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxheW91dHNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0UGFyZW50Q2xhc3NlcyhjbGFzc05hbWU6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICAgICAgLy8gRGVmaW5lIGluaGVyaXRhbmNlIGhpZXJhcmNoeVxuICAgICAgICBjb25zdCBoaWVyYXJjaHk6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHtcbiAgICAgICAgICAgICdlbXNfX1Byb2plY3QnOiBbJ2Vtc19fRWZmb3J0JywgJ2V4b19fQXNzZXQnXSxcbiAgICAgICAgICAgICdlbXNfX1Rhc2snOiBbJ2Vtc19fRWZmb3J0JywgJ2V4b19fQXNzZXQnXSxcbiAgICAgICAgICAgICdlbXNfX0FyZWEnOiBbJ2V4b19fQXNzZXQnXSxcbiAgICAgICAgICAgICdlbXNfX0dvYWwnOiBbJ2V4b19fQXNzZXQnXSxcbiAgICAgICAgICAgICdlbXNfX0VmZm9ydCc6IFsnZXhvX19Bc3NldCddXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGhpZXJhcmNoeVtjbGFzc05hbWVdIHx8IFsnZXhvX19Bc3NldCddO1xuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=