ac67cdf256b776366b46ca717759bde9
/**
 * Jest Test Setup
 * Configures the testing environment for CI and local development
 */
// Note: jest-dom is not available, using custom DOM extensions
// Setup DOM globals that might be missing in CI
Object.defineProperty(global, 'ResizeObserver', {
    writable: true,
    value: jest.fn().mockImplementation(() => ({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn(),
    })),
});
// Mock HTMLElement methods that might not exist in JSDOM
if (typeof HTMLElement !== 'undefined') {
    HTMLElement.prototype.scrollIntoView = jest.fn();
    HTMLElement.prototype.scrollTo = jest.fn();
    HTMLElement.prototype.focus = jest.fn();
    HTMLElement.prototype.blur = jest.fn();
    // Add addClass/removeClass methods for compatibility with Obsidian
    HTMLElement.prototype.addClass = function (className) {
        this.classList.add(className);
        return this;
    };
    HTMLElement.prototype.removeClass = function (className) {
        this.classList.remove(className);
        return this;
    };
    HTMLElement.prototype.toggleClass = function (className, force) {
        this.classList.toggle(className, force);
        return this;
    };
    HTMLElement.prototype.hasClass = function (className) {
        return this.classList.contains(className);
    };
}
// Mock window.matchMedia if it doesn't exist
Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
    })),
});
// Mock window.getComputedStyle
Object.defineProperty(window, 'getComputedStyle', {
    value: jest.fn().mockImplementation(() => ({
        getPropertyValue: jest.fn().mockReturnValue(''),
        setProperty: jest.fn(),
        removeProperty: jest.fn(),
    })),
});
// Suppress console logs during tests unless explicitly enabled
const originalConsoleLog = console.log;
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;
beforeEach(() => {
    if (process.env.CI && !process.env.JEST_VERBOSE) {
        // Suppress logs in CI unless verbose mode is enabled
        console.log = jest.fn();
        console.warn = jest.fn();
        console.error = jest.fn();
    }
});
afterEach(() => {
    // Restore console methods after each test
    console.log = originalConsoleLog;
    console.warn = originalConsoleWarn;
    console.error = originalConsoleError;
});
// Global CI environment detection
global.isCI = process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true';
// Note: Removed automatic fake timers as they can cause timeout issues in CI
// Individual tests should use jest.useFakeTimers() when needed
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvc2V0dXAudHMiLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsK0RBQStEO0FBRS9ELGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRTtJQUM5QyxRQUFRLEVBQUUsSUFBSTtJQUNkLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNwQixVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUN0QixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCx5REFBeUQ7QUFDekQsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7SUFDdEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ2pELFdBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMzQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDeEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBRXZDLG1FQUFtRTtJQUNuRSxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFTLFNBQWlCO1FBQ3pELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0lBRUYsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBUyxTQUFpQjtRQUM1RCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxHQUFHLFVBQVMsU0FBaUIsRUFBRSxLQUFlO1FBQzdFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztJQUVGLFdBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLFVBQVMsU0FBaUI7UUFDekQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7Q0FDSDtBQUVELDZDQUE2QztBQUM3QyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUU7SUFDMUMsUUFBUSxFQUFFLElBQUk7SUFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QyxPQUFPLEVBQUUsS0FBSztRQUNkLEtBQUssRUFBRSxLQUFLO1FBQ1osUUFBUSxFQUFFLElBQUk7UUFDZCxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN0QixjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN6QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQzNCLG1CQUFtQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDOUIsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7S0FDekIsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBRUgsK0JBQStCO0FBQy9CLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGtCQUFrQixFQUFFO0lBQ2hELEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN6QyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztRQUMvQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUN0QixjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUMxQixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCwrREFBK0Q7QUFDL0QsTUFBTSxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBQ3ZDLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN6QyxNQUFNLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFFM0MsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRTtRQUMvQyxxREFBcUQ7UUFDckQsT0FBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDekIsT0FBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7S0FDM0I7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYiwwQ0FBMEM7SUFDMUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztJQUNqQyxPQUFPLENBQUMsSUFBSSxHQUFHLG1CQUFtQixDQUFDO0lBQ25DLE9BQU8sQ0FBQyxLQUFLLEdBQUcsb0JBQW9CLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQ0FBa0M7QUFDakMsTUFBYyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxNQUFNLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEtBQUssTUFBTSxDQUFDO0FBRTFGLDZFQUE2RTtBQUM3RSwrREFBK0QiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvc2V0dXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBKZXN0IFRlc3QgU2V0dXBcbiAqIENvbmZpZ3VyZXMgdGhlIHRlc3RpbmcgZW52aXJvbm1lbnQgZm9yIENJIGFuZCBsb2NhbCBkZXZlbG9wbWVudFxuICovXG5cbi8vIE5vdGU6IGplc3QtZG9tIGlzIG5vdCBhdmFpbGFibGUsIHVzaW5nIGN1c3RvbSBET00gZXh0ZW5zaW9uc1xuXG4vLyBTZXR1cCBET00gZ2xvYmFscyB0aGF0IG1pZ2h0IGJlIG1pc3NpbmcgaW4gQ0lcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWwsICdSZXNpemVPYnNlcnZlcicsIHtcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgb2JzZXJ2ZTogamVzdC5mbigpLFxuICAgIHVub2JzZXJ2ZTogamVzdC5mbigpLFxuICAgIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcbiAgfSkpLFxufSk7XG5cbi8vIE1vY2sgSFRNTEVsZW1lbnQgbWV0aG9kcyB0aGF0IG1pZ2h0IG5vdCBleGlzdCBpbiBKU0RPTVxuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgSFRNTEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3ID0gamVzdC5mbigpO1xuICBIVE1MRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsVG8gPSBqZXN0LmZuKCk7XG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mb2N1cyA9IGplc3QuZm4oKTtcbiAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmJsdXIgPSBqZXN0LmZuKCk7XG4gIFxuICAvLyBBZGQgYWRkQ2xhc3MvcmVtb3ZlQ2xhc3MgbWV0aG9kcyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIE9ic2lkaWFuXG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS5hZGRDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIFxuICBIVE1MRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbihjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBcbiAgSFRNTEVsZW1lbnQucHJvdG90eXBlLnRvZ2dsZUNsYXNzID0gZnVuY3Rpb24oY2xhc3NOYW1lOiBzdHJpbmcsIGZvcmNlPzogYm9vbGVhbikge1xuICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUsIGZvcmNlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgXG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS5oYXNDbGFzcyA9IGZ1bmN0aW9uKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG4gIH07XG59XG5cbi8vIE1vY2sgd2luZG93Lm1hdGNoTWVkaWEgaWYgaXQgZG9lc24ndCBleGlzdFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICB9KSksXG59KTtcblxuLy8gTW9jayB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2dldENvbXB1dGVkU3R5bGUnLCB7XG4gIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgZ2V0UHJvcGVydHlWYWx1ZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnJyksXG4gICAgc2V0UHJvcGVydHk6IGplc3QuZm4oKSxcbiAgICByZW1vdmVQcm9wZXJ0eTogamVzdC5mbigpLFxuICB9KSksXG59KTtcblxuLy8gU3VwcHJlc3MgY29uc29sZSBsb2dzIGR1cmluZyB0ZXN0cyB1bmxlc3MgZXhwbGljaXRseSBlbmFibGVkXG5jb25zdCBvcmlnaW5hbENvbnNvbGVMb2cgPSBjb25zb2xlLmxvZztcbmNvbnN0IG9yaWdpbmFsQ29uc29sZVdhcm4gPSBjb25zb2xlLndhcm47XG5jb25zdCBvcmlnaW5hbENvbnNvbGVFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG5cbmJlZm9yZUVhY2goKCkgPT4ge1xuICBpZiAocHJvY2Vzcy5lbnYuQ0kgJiYgIXByb2Nlc3MuZW52LkpFU1RfVkVSQk9TRSkge1xuICAgIC8vIFN1cHByZXNzIGxvZ3MgaW4gQ0kgdW5sZXNzIHZlcmJvc2UgbW9kZSBpcyBlbmFibGVkXG4gICAgY29uc29sZS5sb2cgPSBqZXN0LmZuKCk7XG4gICAgY29uc29sZS53YXJuID0gamVzdC5mbigpO1xuICAgIGNvbnNvbGUuZXJyb3IgPSBqZXN0LmZuKCk7XG4gIH1cbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICAvLyBSZXN0b3JlIGNvbnNvbGUgbWV0aG9kcyBhZnRlciBlYWNoIHRlc3RcbiAgY29uc29sZS5sb2cgPSBvcmlnaW5hbENvbnNvbGVMb2c7XG4gIGNvbnNvbGUud2FybiA9IG9yaWdpbmFsQ29uc29sZVdhcm47XG4gIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbENvbnNvbGVFcnJvcjtcbn0pO1xuXG4vLyBHbG9iYWwgQ0kgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4oZ2xvYmFsIGFzIGFueSkuaXNDSSA9IHByb2Nlc3MuZW52LkNJID09PSAndHJ1ZScgfHwgcHJvY2Vzcy5lbnYuR0lUSFVCX0FDVElPTlMgPT09ICd0cnVlJztcblxuLy8gTm90ZTogUmVtb3ZlZCBhdXRvbWF0aWMgZmFrZSB0aW1lcnMgYXMgdGhleSBjYW4gY2F1c2UgdGltZW91dCBpc3N1ZXMgaW4gQ0lcbi8vIEluZGl2aWR1YWwgdGVzdHMgc2hvdWxkIHVzZSBqZXN0LnVzZUZha2VUaW1lcnMoKSB3aGVuIG5lZWRlZCJdLCJ2ZXJzaW9uIjozfQ==