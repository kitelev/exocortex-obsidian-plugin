ec2f1fd119b9e05fc9d51d21d2ea0759
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPARQLSuggestion = exports.SuggestionType = void 0;
var SuggestionType;
(function (SuggestionType) {
    SuggestionType["KEYWORD"] = "keyword";
    SuggestionType["FUNCTION"] = "function";
    SuggestionType["PREFIX"] = "prefix";
    SuggestionType["VARIABLE"] = "variable";
    SuggestionType["PROPERTY"] = "property";
    SuggestionType["CLASS"] = "class";
    SuggestionType["NAMESPACE"] = "namespace";
    SuggestionType["OPERATOR"] = "operator";
    SuggestionType["TEMPLATE"] = "template";
})(SuggestionType = exports.SuggestionType || (exports.SuggestionType = {}));
class SPARQLSuggestion {
    constructor(id, text, insertText, type, confidence, contextualScore, metadata) {
        this.id = id;
        this.text = text;
        this.insertText = insertText;
        this.type = type;
        this.confidence = confidence;
        this.contextualScore = contextualScore;
        this.metadata = metadata;
        Object.freeze(this);
    }
    getId() {
        return this.id;
    }
    getText() {
        return this.text;
    }
    getInsertText() {
        return this.insertText;
    }
    getType() {
        return this.type;
    }
    getConfidence() {
        return this.confidence;
    }
    getContextualScore() {
        return this.contextualScore;
    }
    getMetadata() {
        return this.metadata;
    }
    calculateFinalScore(boostFactor = 1.0) {
        return (this.confidence * 0.6 + this.contextualScore * 0.4) * boostFactor;
    }
    static create(params) {
        return new SPARQLSuggestion(params.id, params.text, params.insertText || params.text, params.type, params.confidence, params.contextualScore, params.metadata);
    }
}
exports.SPARQLSuggestion = SPARQLSuggestion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9hdXRvY29tcGxldGUvU1BBUlFMU3VnZ2VzdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLGNBVVg7QUFWRCxXQUFZLGNBQWM7SUFDdEIscUNBQW1CLENBQUE7SUFDbkIsdUNBQXFCLENBQUE7SUFDckIsbUNBQWlCLENBQUE7SUFDakIsdUNBQXFCLENBQUE7SUFDckIsdUNBQXFCLENBQUE7SUFDckIsaUNBQWUsQ0FBQTtJQUNmLHlDQUF1QixDQUFBO0lBQ3ZCLHVDQUFxQixDQUFBO0lBQ3JCLHVDQUFxQixDQUFBO0FBQ3pCLENBQUMsRUFWVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVV6QjtBQVdELE1BQWEsZ0JBQWdCO0lBQ3pCLFlBQ3FCLEVBQVUsRUFDVixJQUFZLEVBQ1osVUFBa0IsRUFDbEIsSUFBb0IsRUFDcEIsVUFBa0IsRUFDbEIsZUFBdUIsRUFDdkIsUUFBNkI7UUFON0IsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLFNBQUksR0FBSixJQUFJLENBQWdCO1FBQ3BCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFFOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsS0FBSztRQUNELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0lBRUQsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUMzQixDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxjQUFzQixHQUFHO1FBQ3pDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQztJQUM5RSxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQVFiO1FBQ0csT0FBTyxJQUFJLGdCQUFnQixDQUN2QixNQUFNLENBQUMsRUFBRSxFQUNULE1BQU0sQ0FBQyxJQUFJLEVBQ1gsTUFBTSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUNoQyxNQUFNLENBQUMsSUFBSSxFQUNYLE1BQU0sQ0FBQyxVQUFVLEVBQ2pCLE1BQU0sQ0FBQyxlQUFlLEVBQ3RCLE1BQU0sQ0FBQyxRQUFRLENBQ2xCLENBQUM7SUFDTixDQUFDO0NBQ0o7QUFoRUQsNENBZ0VDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9kb21haW4vYXV0b2NvbXBsZXRlL1NQQVJRTFN1Z2dlc3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGVudW0gU3VnZ2VzdGlvblR5cGUge1xuICAgIEtFWVdPUkQgPSAna2V5d29yZCcsXG4gICAgRlVOQ1RJT04gPSAnZnVuY3Rpb24nLFxuICAgIFBSRUZJWCA9ICdwcmVmaXgnLFxuICAgIFZBUklBQkxFID0gJ3ZhcmlhYmxlJyxcbiAgICBQUk9QRVJUWSA9ICdwcm9wZXJ0eScsXG4gICAgQ0xBU1MgPSAnY2xhc3MnLFxuICAgIE5BTUVTUEFDRSA9ICduYW1lc3BhY2UnLFxuICAgIE9QRVJBVE9SID0gJ29wZXJhdG9yJyxcbiAgICBURU1QTEFURSA9ICd0ZW1wbGF0ZSdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdWdnZXN0aW9uTWV0YWRhdGEge1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHVzYWdlPzogc3RyaW5nO1xuICAgIGV4YW1wbGVzPzogc3RyaW5nW107XG4gICAgbmFtZXNwYWNlPzogc3RyaW5nO1xuICAgIGRlcHJlY2F0ZWQ/OiBib29sZWFuO1xuICAgIGRvY3VtZW50YXRpb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTUEFSUUxTdWdnZXN0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpZDogc3RyaW5nLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHRleHQ6IHN0cmluZyxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpbnNlcnRUZXh0OiBzdHJpbmcsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdHlwZTogU3VnZ2VzdGlvblR5cGUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgY29uZmlkZW5jZTogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHR1YWxTY29yZTogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG1ldGFkYXRhPzogU3VnZ2VzdGlvbk1ldGFkYXRhXG4gICAgKSB7XG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgfVxuXG4gICAgZ2V0SWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaWQ7XG4gICAgfVxuXG4gICAgZ2V0VGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0O1xuICAgIH1cblxuICAgIGdldEluc2VydFRleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dDtcbiAgICB9XG5cbiAgICBnZXRUeXBlKCk6IFN1Z2dlc3Rpb25UeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9XG5cbiAgICBnZXRDb25maWRlbmNlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZGVuY2U7XG4gICAgfVxuXG4gICAgZ2V0Q29udGV4dHVhbFNjb3JlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHR1YWxTY29yZTtcbiAgICB9XG5cbiAgICBnZXRNZXRhZGF0YSgpOiBTdWdnZXN0aW9uTWV0YWRhdGEgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YTtcbiAgICB9XG5cbiAgICBjYWxjdWxhdGVGaW5hbFNjb3JlKGJvb3N0RmFjdG9yOiBudW1iZXIgPSAxLjApOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMuY29uZmlkZW5jZSAqIDAuNiArIHRoaXMuY29udGV4dHVhbFNjb3JlICogMC40KSAqIGJvb3N0RmFjdG9yO1xuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGUocGFyYW1zOiB7XG4gICAgICAgIGlkOiBzdHJpbmc7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgaW5zZXJ0VGV4dD86IHN0cmluZztcbiAgICAgICAgdHlwZTogU3VnZ2VzdGlvblR5cGU7XG4gICAgICAgIGNvbmZpZGVuY2U6IG51bWJlcjtcbiAgICAgICAgY29udGV4dHVhbFNjb3JlOiBudW1iZXI7XG4gICAgICAgIG1ldGFkYXRhPzogU3VnZ2VzdGlvbk1ldGFkYXRhO1xuICAgIH0pOiBTUEFSUUxTdWdnZXN0aW9uIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTUEFSUUxTdWdnZXN0aW9uKFxuICAgICAgICAgICAgcGFyYW1zLmlkLFxuICAgICAgICAgICAgcGFyYW1zLnRleHQsXG4gICAgICAgICAgICBwYXJhbXMuaW5zZXJ0VGV4dCB8fCBwYXJhbXMudGV4dCxcbiAgICAgICAgICAgIHBhcmFtcy50eXBlLFxuICAgICAgICAgICAgcGFyYW1zLmNvbmZpZGVuY2UsXG4gICAgICAgICAgICBwYXJhbXMuY29udGV4dHVhbFNjb3JlLFxuICAgICAgICAgICAgcGFyYW1zLm1ldGFkYXRhXG4gICAgICAgICk7XG4gICAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==