9f549b53b46b1a2edd38eb4ce2098bfd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Result will be mocked through the SPARQLSanitizer mock
// Mock dependencies
jest.mock('../../../../src/application/SPARQLEngine');
jest.mock('../../../../src/domain/semantic/core/Graph');
jest.mock('../../../../src/application/services/ExoFocusService');
jest.mock('../../../../src/application/services/RDFService');
jest.mock('../../../../src/application/services/SPARQLSanitizer');
jest.mock('../../../../src/presentation/modals/ExportRDFModal');
const SPARQLProcessor_1 = require("../../../../src/presentation/processors/SPARQLProcessor");
const Graph_1 = require("../../../../src/domain/semantic/core/Graph");
const SPARQLEngine_1 = require("../../../../src/application/SPARQLEngine");
const ExoFocusService_1 = require("../../../../src/application/services/ExoFocusService");
const RDFService_1 = require("../../../../src/application/services/RDFService");
const SPARQLSanitizer_1 = require("../../../../src/application/services/SPARQLSanitizer");
describe('SPARQLProcessor', () => {
    let processor;
    let mockPlugin;
    let mockGraph;
    let mockEngine;
    let mockFocusService;
    let mockRDFService;
    let mockSanitizer;
    let mockApp;
    let container;
    let context;
    beforeEach(() => {
        // Setup DOM environment
        document.body.innerHTML = '<div id="test-container"></div>';
        container = document.getElementById('test-container');
        // Mock app
        mockApp = {
            workspace: {
                openLinkText: jest.fn()
            }
        };
        // Mock plugin
        mockPlugin = {
            app: mockApp
        };
        // Mock graph
        mockGraph = new Graph_1.Graph();
        // Create default mock responses
        const defaultSelectResult = {
            results: [
                { s: 'subject1', p: 'predicate1', o: 'object1' },
                { s: 'subject2', p: 'predicate2', o: 'object2' }
            ],
            cached: false
        };
        const defaultConstructResult = {
            triples: [],
            cached: false,
            provenance: 'test'
        };
        // Create mock engine instance
        mockEngine = {
            select: jest.fn().mockReturnValue(defaultSelectResult),
            construct: jest.fn().mockReturnValue(defaultConstructResult),
            getCacheStatistics: jest.fn().mockReturnValue({
                hits: 0,
                misses: 0,
                hitRate: 0,
                size: 0,
                maxSize: 100,
                totalQueries: 0,
                evictions: 0
            }),
            invalidateCache: jest.fn(),
            cleanupCache: jest.fn().mockReturnValue(0),
            destroy: jest.fn()
        };
        // Mock the SPARQLEngine constructor to return our mock instance
        SPARQLEngine_1.SPARQLEngine.mockImplementation(() => {
            console.log('SPARQLEngine constructor called, returning mock engine');
            return mockEngine;
        });
        // Mock services
        mockFocusService = new ExoFocusService_1.ExoFocusService(mockApp, mockGraph);
        mockRDFService = new RDFService_1.RDFService(mockApp);
        mockSanitizer = new SPARQLSanitizer_1.SPARQLSanitizer();
        // Setup service mocks
        RDFService_1.RDFService.mockImplementation(() => mockRDFService);
        SPARQLSanitizer_1.SPARQLSanitizer.mockImplementation(() => mockSanitizer);
        mockRDFService.getNamespaceManager = jest.fn().mockReturnValue({
            getPrefix: jest.fn().mockReturnValue('exo'),
            expand: jest.fn().mockReturnValue('http://example.org/exo#')
        });
        // Mock sanitizer - should return the input query as sanitized
        mockSanitizer.sanitize = jest.fn().mockImplementation((input) => ({
            isSuccess: true,
            isFailure: false,
            getValue: () => ({
                query: input,
                warnings: []
            }),
            errorValue: () => null
        }));
        // Create processor
        processor = new SPARQLProcessor_1.SPARQLProcessor(mockPlugin, mockGraph, mockFocusService);
        // Mock context
        context = {
            sourcePath: 'test.md',
            frontmatter: {},
            addChild: jest.fn(),
            getSectionInfo: jest.fn()
        };
        // Mock Notice
        jest.spyOn(require('obsidian'), 'Notice').mockImplementation(() => ({}));
    });
    afterEach(() => {
        jest.clearAllMocks();
        document.body.innerHTML = '';
    });
    describe('Initialization', () => {
        test('should initialize with all required dependencies', () => {
            expect(processor).toBeDefined();
            expect(processor['plugin']).toBe(mockPlugin);
            expect(processor['graph']).toBe(mockGraph);
            expect(processor['engine']).toBe(mockEngine);
            expect(processor['focusService']).toBe(mockFocusService);
        });
        test('should initialize without focus service', () => {
            const processorNoFocus = new SPARQLProcessor_1.SPARQLProcessor(mockPlugin, mockGraph);
            expect(processorNoFocus).toBeDefined();
            expect(processorNoFocus['focusService']).toBeUndefined();
        });
        test('should initialize with cache configuration', () => {
            const cacheConfig = {
                maxSize: 100,
                defaultTTL: 60000,
                enabled: true
            };
            const processorWithCache = new SPARQLProcessor_1.SPARQLProcessor(mockPlugin, mockGraph, mockFocusService, cacheConfig);
            expect(processorWithCache).toBeDefined();
            expect(SPARQLEngine_1.SPARQLEngine).toHaveBeenCalledWith(mockGraph, cacheConfig);
        });
    });
    describe('processCodeBlock', () => {
        test('should process simple SELECT query successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c;
            const selectResults = [
                { s: 'subject1', p: 'predicate1', o: 'object1' },
                { s: 'subject2', p: 'predicate2', o: 'object2' }
            ];
            // Debug the default setup first  
            console.log('Before setting up specific test mock:');
            console.log('mockEngine.select mock calls:', ((_a = mockEngine.select.mock) === null || _a === void 0 ? void 0 : _a.calls) || 'no calls');
            console.log('Default mock return value test:');
            const defaultResult = mockEngine.select('test query');
            console.log('Default result:', defaultResult);
            // Reset and set up the mock engine for this specific test
            mockEngine.select.mockReset();
            mockEngine.select.mockReturnValue({
                results: selectResults,
                cached: false
            });
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10';
            // Test the mock directly first
            console.log('Direct mock test:');
            const directResult = mockEngine.select(source);
            console.log('Direct result:', directResult);
            yield processor.processCodeBlock(source, container, context);
            console.log('Container innerHTML:', container.innerHTML);
            expect(mockSanitizer.sanitize).toHaveBeenCalledWith(source);
            expect(mockEngine.select).toHaveBeenCalledWith(source);
            // Check DOM structure
            expect(container.querySelector('.exocortex-sparql-container')).toBeTruthy();
            expect((_b = container.querySelector('h3')) === null || _b === void 0 ? void 0 : _b.textContent).toBe('SPARQL Query Results');
            expect((_c = container.querySelector('pre')) === null || _c === void 0 ? void 0 : _c.textContent).toBe(source);
            expect(container.querySelector('table')).toBeTruthy();
        }));
        test('should process CONSTRUCT query successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _d;
            const mockTriples = [
                {
                    getSubject: () => ({ toString: () => 'http://example.org/s1' }),
                    getPredicate: () => ({ toString: () => 'http://example.org/p1' }),
                    getObject: () => ({ toString: () => 'http://example.org/o1' })
                },
                {
                    getSubject: () => ({ toString: () => 'http://example.org/s2' }),
                    getPredicate: () => ({ toString: () => 'http://example.org/p2' }),
                    getObject: () => ({ toString: () => 'http://example.org/o2' })
                }
            ];
            mockEngine.construct = jest.fn().mockReturnValue({
                triples: mockTriples,
                cached: false,
                provenance: 'test-query'
            });
            mockGraph.add = jest.fn();
            const source = 'CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(mockSanitizer.sanitize).toHaveBeenCalledWith(source);
            expect(mockEngine.construct).toHaveBeenCalledWith(source);
            expect(mockGraph.add).toHaveBeenCalledTimes(2);
            // Check results formatting
            expect(container.querySelector('table')).toBeTruthy();
            expect((_d = container.querySelector('td')) === null || _d === void 0 ? void 0 : _d.textContent).toContain('http://example.org/');
        }));
        test('should handle empty results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _e;
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(container.querySelector('.sparql-empty-result')).toBeTruthy();
            expect((_e = container.querySelector('.sparql-empty-result')) === null || _e === void 0 ? void 0 : _e.textContent).toBe('No results found');
        }));
        test('should handle cached results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _f;
            const selectResults = [
                { s: 'cached1', p: 'cached2', o: 'cached3' }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: selectResults,
                cached: true
            });
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(container.querySelector('.sparql-cache-indicator')).toBeTruthy();
            expect((_f = container.querySelector('.sparql-cache-indicator')) === null || _f === void 0 ? void 0 : _f.textContent).toContain('Cached Result');
        }));
        test('should display loading indicator', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _g;
            let resolvePromise;
            const slowPromise = new Promise(resolve => {
                resolvePromise = resolve;
            });
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            // Mock processCodeBlock to be slow
            const originalExecuteQuery = processor.executeQuery;
            processor.executeQuery = jest.fn().mockImplementation(() => slowPromise);
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const processPromise = processor.processCodeBlock(source, container, context);
            // Check loading indicator appears
            yield new Promise(resolve => setTimeout(resolve, 10));
            expect(container.querySelector('.sparql-loading')).toBeTruthy();
            expect((_g = container.querySelector('.sparql-loading')) === null || _g === void 0 ? void 0 : _g.textContent).toBe('Executing query...');
            // Complete the promise
            resolvePromise({ results: [], cached: false });
            yield processPromise;
            // Loading indicator should be removed
            expect(container.querySelector('.sparql-loading')).toBeFalsy();
            processor.executeQuery = originalExecuteQuery;
        }));
        test('should handle query execution errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _h;
            const source = 'INVALID SPARQL QUERY';
            // Mock sanitizer to return error
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: false,
                isFailure: true,
                getValue: () => null,
                errorValue: () => 'Invalid SPARQL syntax'
            });
            yield processor.processCodeBlock(source, container, context);
            expect(container.querySelector('.sparql-error')).toBeTruthy();
            expect((_h = container.querySelector('.sparql-error')) === null || _h === void 0 ? void 0 : _h.textContent).toContain('Query validation failed');
        }));
        test('should apply ExoFocus filtering when available', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const originalResults = [
                { s: 'subject1', p: 'predicate1', o: 'object1' },
                { s: 'subject2', p: 'predicate2', o: 'object2' },
                { s: 'subject3', p: 'predicate3', o: 'object3' }
            ];
            const filteredResults = [
                { s: 'subject1', p: 'predicate1', o: 'object1' }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: originalResults,
                cached: false
            });
            mockFocusService.filterSPARQLResults = jest.fn().mockReturnValue(filteredResults);
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(mockFocusService.filterSPARQLResults).toHaveBeenCalledWith(originalResults);
            // Check that filtered results are displayed
            const rows = container.querySelectorAll('tbody tr');
            expect(rows).toHaveLength(1);
        }));
    });
    describe('executeQuery', () => {
        test('should reject empty queries', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield expect(processor.executeQuery('')).rejects.toThrow('Empty query');
            yield expect(processor.executeQuery('   ')).rejects.toThrow('Empty query');
        }));
        test('should handle query sanitization failures', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: false,
                isFailure: true,
                getValue: () => null,
                errorValue: () => 'Malicious query detected'
            });
            yield expect(processor.executeQuery('DROP TABLE users;')).rejects.toThrow('Query validation failed');
        }));
        test('should show warnings from sanitizer', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockNotice = jest.spyOn(require('obsidian'), 'Notice');
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: true,
                isFailure: false,
                getValue: () => ({
                    query: 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }',
                    warnings: ['Query contains deprecated syntax']
                }),
                errorValue: () => null
            });
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            yield processor.executeQuery('SELECT ?s ?p ?o WHERE { ?s ?p ?o }');
            expect(mockNotice).toHaveBeenCalledWith('Query executed with warnings: Query contains deprecated syntax');
        }));
        test('should reject unsupported query types', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: true,
                isFailure: false,
                getValue: () => ({
                    query: 'DELETE WHERE { ?s ?p ?o }',
                    warnings: []
                }),
                errorValue: () => null
            });
            yield expect(processor.executeQuery('DELETE WHERE { ?s ?p ?o }')).rejects.toThrow('Only SELECT and CONSTRUCT queries are currently supported');
        }));
        test('should handle CONSTRUCT query with duplicate prevention', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTriples = [
                {
                    getSubject: () => ({ toString: () => 'http://example.org/s1' }),
                    getPredicate: () => ({ toString: () => 'http://example.org/p1' }),
                    getObject: () => ({ toString: () => 'http://example.org/o1' })
                }
            ];
            // Test cached result - should not add to graph
            mockEngine.construct = jest.fn().mockReturnValue({
                triples: mockTriples,
                cached: true,
                provenance: 'test-query'
            });
            const result = yield processor.executeQuery('CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }');
            expect(mockGraph.add).not.toHaveBeenCalled();
            expect(result.cached).toBe(true);
            expect(result.results).toHaveLength(1);
        }));
    });
    describe('Table Creation', () => {
        test('should create table with headers', () => {
            const results = [
                { name: 'John', age: '25', city: 'New York' },
                { name: 'Jane', age: '30', city: 'Boston' }
            ];
            const table = processor['createResultTable'](results);
            expect(table.tagName).toBe('TABLE');
            expect(table.className).toBe('sparql-results-table');
            // Check headers
            const headers = table.querySelectorAll('th');
            expect(headers).toHaveLength(3);
            expect(headers[0].textContent).toBe('name');
            expect(headers[1].textContent).toBe('age');
            expect(headers[2].textContent).toBe('city');
            // Check data rows
            const dataRows = table.querySelectorAll('tbody tr');
            expect(dataRows).toHaveLength(2);
            expect(dataRows[0].cells[0].textContent).toBe('John');
            expect(dataRows[1].cells[0].textContent).toBe('Jane');
        });
        test('should create empty table for no results', () => {
            const table = processor['createResultTable']([]);
            expect(table.tagName).toBe('TABLE');
            expect(table.querySelectorAll('tr')).toHaveLength(0);
        });
        test('should handle file links in results', () => {
            const results = [
                { file: 'file://test-note.md', content: 'some content' },
                { file: '/path/to/note.md', content: 'more content' }
            ];
            const table = processor['createResultTable'](results);
            const links = table.querySelectorAll('a.internal-link');
            expect(links).toHaveLength(2);
            expect(links[0].textContent).toBe('test-note.md');
            expect(links[1].textContent).toBe('note.md');
        });
        test('should handle click events on note links', () => {
            const results = [{ file: 'file://test-note.md' }];
            const table = processor['createResultTable'](results);
            const link = table.querySelector('a.internal-link');
            expect(link).toBeTruthy();
            // Mock click event
            const clickEvent = new Event('click');
            jest.spyOn(clickEvent, 'preventDefault');
            link.dispatchEvent(clickEvent);
            expect(clickEvent.preventDefault).toHaveBeenCalled();
            expect(mockApp.workspace.openLinkText).toHaveBeenCalledWith('test-note.md', '');
        });
    });
    describe('Cache Management', () => {
        test('should return cache statistics', () => {
            const mockStats = {
                hits: 15,
                misses: 8,
                hitRate: 65.2,
                size: 12,
                maxSize: 100,
                totalQueries: 23,
                evictions: 2
            };
            mockEngine.getCacheStatistics = jest.fn().mockReturnValue(mockStats);
            const stats = processor.getCacheStatistics();
            expect(stats).toEqual(mockStats);
            expect(mockEngine.getCacheStatistics).toHaveBeenCalled();
        });
        test('should invalidate cache', () => {
            mockEngine.invalidateCache = jest.fn();
            processor.invalidateCache();
            expect(mockEngine.invalidateCache).toHaveBeenCalled();
        });
        test('should cleanup cache', () => {
            mockEngine.cleanupCache = jest.fn().mockReturnValue(5);
            const result = processor.cleanupCache();
            expect(result).toBe(5);
            expect(mockEngine.cleanupCache).toHaveBeenCalled();
        });
        test('should destroy resources', () => {
            mockEngine.destroy = jest.fn();
            processor.destroy();
            expect(mockEngine.destroy).toHaveBeenCalled();
        });
    });
    describe('UI Elements', () => {
        test('should create loading indicator', () => {
            const loading = processor['createLoadingIndicator']();
            expect(loading.className).toBe('sparql-loading');
            expect(loading.textContent).toBe('Executing query...');
        });
        test('should create error message', () => {
            const error = new Error('Test error message');
            const errorEl = processor['createErrorMessage'](error);
            expect(errorEl.className).toBe('sparql-error');
            expect(errorEl.textContent).toContain('Query Error:');
            expect(errorEl.textContent).toContain('Test error message');
        });
        test('should create stats element without cache info', () => {
            const stats = processor['createStatsElement'](5, 150);
            expect(stats.className).toBe('sparql-stats');
            expect(stats.textContent).toBe('Executed in 150ms - 5 results');
        });
        test('should create stats element with cache info', () => {
            const stats = processor['createStatsElement'](5, 150, true);
            expect(stats.textContent).toBe('Executed in 150ms - 5 results (cached result)');
        });
        test('should create cache indicator for cached results', () => {
            const indicator = processor['createCacheIndicator'](true);
            expect(indicator.className).toBe('sparql-cache-indicator');
            expect(indicator.textContent).toBe('📋 Cached Result');
            expect(indicator.style.background).toContain('rgb(232, 245, 232)');
        });
        test('should create cache indicator for fresh results', () => {
            const indicator = processor['createCacheIndicator'](false);
            expect(indicator.textContent).toBe('🔄 Fresh Result');
            expect(indicator.style.background).toContain('rgb(227, 242, 253)');
        });
    });
    describe('Export Controls', () => {
        test('should create export controls with format buttons', () => {
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            expect(controls.className).toBe('sparql-export-controls');
            expect(controls.textContent).toContain('Export results:');
            // Check format buttons
            const buttons = controls.querySelectorAll('.sparql-export-button');
            expect(buttons).toHaveLength(4); // Turtle, JSON-LD, N-Triples, RDF/XML
            expect(buttons[0].textContent).toBe('Turtle');
            expect(buttons[1].textContent).toBe('JSON-LD');
            expect(buttons[2].textContent).toBe('N-Triples');
            expect(buttons[3].textContent).toBe('RDF/XML');
        });
        test('should create advanced export button', () => {
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            const advancedButton = controls.querySelector('.sparql-export-advanced');
            expect(advancedButton).toBeTruthy();
            expect(advancedButton.textContent).toBe('Advanced...');
        });
        test('should handle export button clicks', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRDFService.exportQueryResults = jest.fn().mockResolvedValue({
                isSuccess: true,
                isFailure: false,
                getValue: () => ({
                    tripleCount: 10,
                    fileName: 'test-export.ttl',
                    content: 'mock turtle content'
                }),
                errorValue: () => null
            });
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            const turtleButton = controls.querySelector('.sparql-export-button');
            // Simulate click
            turtleButton.click();
            // Wait for async operation
            yield new Promise(resolve => setTimeout(resolve, 10));
            expect(mockRDFService.exportQueryResults).toHaveBeenCalledWith(results, 'turtle', expect.any(String));
        }));
        test('should handle export errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRDFService.exportQueryResults = jest.fn().mockResolvedValue({
                isSuccess: false,
                isFailure: true,
                getValue: () => null,
                errorValue: () => 'Export failed'
            });
            const mockNotice = jest.spyOn(require('obsidian'), 'Notice');
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            const turtleButton = controls.querySelector('.sparql-export-button');
            // Simulate click
            turtleButton.click();
            // Wait for async operation
            yield new Promise(resolve => setTimeout(resolve, 10));
            expect(mockNotice).toHaveBeenCalledWith('Export failed: Export failed');
        }));
    });
    describe('Performance Tests', () => {
        test('should handle large result sets efficiently', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const largeResults = Array.from({ length: 1000 }, (_, i) => ({
                id: `item-${i}`,
                name: `Name ${i}`,
                value: `Value ${i}`
            }));
            mockEngine.select = jest.fn().mockReturnValue({
                results: largeResults,
                cached: false
            });
            const source = 'SELECT ?id ?name ?value WHERE { ?id ?name ?value }';
            const startTime = Date.now();
            yield processor.processCodeBlock(source, container, context);
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second
            // Verify table was created
            const table = container.querySelector('table');
            expect(table).toBeTruthy();
            const rows = table.querySelectorAll('tbody tr');
            expect(rows).toHaveLength(1000);
        }));
        test('should handle complex queries with multiple variables', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const complexResults = [
                {
                    subject: 'http://example.org/person1',
                    name: 'John Doe',
                    age: '30',
                    email: 'john@example.org',
                    department: 'Engineering',
                    manager: 'http://example.org/person2',
                    projects: 'Project A, Project B',
                    skills: 'JavaScript, TypeScript, React'
                }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: complexResults,
                cached: false
            });
            const source = `
        SELECT ?subject ?name ?age ?email ?department ?manager ?projects ?skills
        WHERE {
          ?subject foaf:name ?name ;
                   foaf:age ?age ;
                   foaf:mbox ?email ;
                   org:department ?department ;
                   org:manager ?manager ;
                   proj:projects ?projects ;
                   skill:has ?skills .
        }
      `;
            yield processor.processCodeBlock(source, container, context);
            const table = container.querySelector('table');
            expect(table).toBeTruthy();
            const headers = table.querySelectorAll('th');
            expect(headers).toHaveLength(8);
            const dataRow = table.querySelector('tbody tr');
            expect(dataRow).toBeTruthy();
            expect(dataRow.cells).toHaveLength(8);
        }));
    });
    describe('Edge Cases', () => {
        test('should handle null and undefined values in results', () => {
            const results = [
                { name: 'John', age: null, city: undefined },
                { name: null, age: '25', city: '' },
                { name: undefined, age: undefined, city: 'Boston' }
            ];
            const table = processor['createResultTable'](results);
            const cells = table.querySelectorAll('td');
            // Should display empty string for null/undefined
            expect(cells[1].textContent).toBe(''); // null age
            expect(cells[2].textContent).toBe(''); // undefined city
            expect(cells[3].textContent).toBe(''); // null name
            expect(cells[5].textContent).toBe(''); // empty city
        });
        test('should handle results with inconsistent column structure', () => {
            const results = [
                { name: 'John', age: '30' },
                { name: 'Jane', city: 'Boston' },
                { age: '25', city: 'New York', country: 'USA' }
            ];
            // Should use columns from first result
            const table = processor['createResultTable'](results);
            const headers = table.querySelectorAll('th');
            expect(headers).toHaveLength(2);
            expect(headers[0].textContent).toBe('name');
            expect(headers[1].textContent).toBe('age');
        });
        test('should handle very long query strings', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const longQuery = `
        SELECT ?s ?p ?o WHERE {
          ?s ?p ?o .
          ${Array.from({ length: 100 }, (_, i) => `OPTIONAL { ?s ex:prop${i} ?val${i} }`).join(' ')}
        }
      `.trim();
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            yield processor.processCodeBlock(longQuery, container, context);
            expect((_a = container.querySelector('pre')) === null || _a === void 0 ? void 0 : _a.textContent).toBe(longQuery);
            expect(mockEngine.select).toHaveBeenCalledWith(longQuery);
        }));
        test('should handle special characters in query and results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const results = [
                { name: 'Jöhn Döe', description: 'Special chars: àáâãäå' },
                { name: 'Смит', description: 'Cyrillic: русский текст' },
                { name: '田中太郎', description: 'Japanese: こんにちは' }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: results,
                cached: false
            });
            const query = 'SELECT ?name ?description WHERE { ?person rdfs:label ?name ; dc:description ?description }';
            yield processor.processCodeBlock(query, container, context);
            const table = container.querySelector('table');
            const cells = table.querySelectorAll('td');
            expect(cells[0].textContent).toBe('Jöhn Döe');
            expect(cells[1].textContent).toBe('Special chars: àáâãäå');
            expect(cells[2].textContent).toBe('Смит');
            expect(cells[4].textContent).toBe('田中太郎');
        }));
    });
});
// Test utilities
function createMockTriple(s, p, o) {
    return {
        getSubject: () => ({ toString: () => s }),
        getPredicate: () => ({ toString: () => p }),
        getObject: () => ({ toString: () => o })
    };
}
function createMockContext(sourcePath = 'test.md') {
    return {
        sourcePath,
        frontmatter: {},
        addChild: jest.fn(),
        getSectionInfo: jest.fn()
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9wcmVzZW50YXRpb24vcHJvY2Vzc29ycy9TUEFSUUxQcm9jZXNzb3IudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7QUFRQSx5REFBeUQ7QUFFekQsb0JBQW9CO0FBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7QUFDeEQsSUFBSSxDQUFDLElBQUksQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQyxJQUFJLENBQUMsaURBQWlELENBQUMsQ0FBQztBQUM3RCxJQUFJLENBQUMsSUFBSSxDQUFDLHNEQUFzRCxDQUFDLENBQUM7QUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxvREFBb0QsQ0FBQyxDQUFDO0FBZmhFLDZGQUEwRjtBQUMxRixzRUFBbUU7QUFFbkUsMkVBQXVHO0FBQ3ZHLDBGQUF1RjtBQUN2RixnRkFBNkU7QUFDN0UsMEZBQXVGO0FBV3ZGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsSUFBSSxTQUEwQixDQUFDO0lBQy9CLElBQUksVUFBK0IsQ0FBQztJQUNwQyxJQUFJLFNBQTZCLENBQUM7SUFDbEMsSUFBSSxVQUFxQyxDQUFDO0lBQzFDLElBQUksZ0JBQThDLENBQUM7SUFDbkQsSUFBSSxjQUF1QyxDQUFDO0lBQzVDLElBQUksYUFBMkMsQ0FBQztJQUNoRCxJQUFJLE9BQXlCLENBQUM7SUFDOUIsSUFBSSxTQUFzQixDQUFDO0lBQzNCLElBQUksT0FBcUMsQ0FBQztJQUUxQyxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2Qsd0JBQXdCO1FBQ3hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLGlDQUFpQyxDQUFDO1FBQzVELFNBQVMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFFLENBQUM7UUFFdkQs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QUMsQ0FBQyxFQUFFLENBQUM7UUFDM0MsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7S0FDekMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFDLGFBQXFCLFNBQVM7SUFDdkQsT0FBTztRQUNMLFVBQVU7UUFDVixXQUFXLEVBQUUsRUFBRTtRQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ25CLGNBQWMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQzFCLENBQUM7QUFDSixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3Rlc3RzL3VuaXQvcHJlc2VudGF0aW9uL3Byb2Nlc3NvcnMvU1BBUlFMUHJvY2Vzc29yLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCwgUGx1Z2luLCBBcHAsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFNQQVJRTFByb2Nlc3NvciB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9wcmVzZW50YXRpb24vcHJvY2Vzc29ycy9TUEFSUUxQcm9jZXNzb3InO1xuaW1wb3J0IHsgR3JhcGggfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL3NlbWFudGljL2NvcmUvR3JhcGgnO1xuaW1wb3J0IHsgVHJpcGxlLCBJUkksIExpdGVyYWwgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL3NlbWFudGljL2NvcmUvVHJpcGxlJztcbmltcG9ydCB7IFNQQVJRTEVuZ2luZSwgU2VsZWN0UmVzdWx0LCBDb25zdHJ1Y3RSZXN1bHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvYXBwbGljYXRpb24vU1BBUlFMRW5naW5lJztcbmltcG9ydCB7IEV4b0ZvY3VzU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9zZXJ2aWNlcy9FeG9Gb2N1c1NlcnZpY2UnO1xuaW1wb3J0IHsgUkRGU2VydmljZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9zZXJ2aWNlcy9SREZTZXJ2aWNlJztcbmltcG9ydCB7IFNQQVJRTFNhbml0aXplciB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9zZXJ2aWNlcy9TUEFSUUxTYW5pdGl6ZXInO1xuLy8gUmVzdWx0IHdpbGwgYmUgbW9ja2VkIHRocm91Z2ggdGhlIFNQQVJRTFNhbml0aXplciBtb2NrXG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9TUEFSUUxFbmdpbmUnKTtcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi9zZW1hbnRpYy9jb3JlL0dyYXBoJyk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9zZXJ2aWNlcy9FeG9Gb2N1c1NlcnZpY2UnKTtcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL2FwcGxpY2F0aW9uL3NlcnZpY2VzL1JERlNlcnZpY2UnKTtcbmplc3QubW9jaygnLi4vLi4vLi4vLi4vc3JjL2FwcGxpY2F0aW9uL3NlcnZpY2VzL1NQQVJRTFNhbml0aXplcicpO1xuamVzdC5tb2NrKCcuLi8uLi8uLi8uLi9zcmMvcHJlc2VudGF0aW9uL21vZGFscy9FeHBvcnRSREZNb2RhbCcpO1xuXG5kZXNjcmliZSgnU1BBUlFMUHJvY2Vzc29yJywgKCkgPT4ge1xuICBsZXQgcHJvY2Vzc29yOiBTUEFSUUxQcm9jZXNzb3I7XG4gIGxldCBtb2NrUGx1Z2luOiBqZXN0Lk1vY2tlZDxQbHVnaW4+O1xuICBsZXQgbW9ja0dyYXBoOiBqZXN0Lk1vY2tlZDxHcmFwaD47XG4gIGxldCBtb2NrRW5naW5lOiBqZXN0Lk1vY2tlZDxTUEFSUUxFbmdpbmU+O1xuICBsZXQgbW9ja0ZvY3VzU2VydmljZTogamVzdC5Nb2NrZWQ8RXhvRm9jdXNTZXJ2aWNlPjtcbiAgbGV0IG1vY2tSREZTZXJ2aWNlOiBqZXN0Lk1vY2tlZDxSREZTZXJ2aWNlPjtcbiAgbGV0IG1vY2tTYW5pdGl6ZXI6IGplc3QuTW9ja2VkPFNQQVJRTFNhbml0aXplcj47XG4gIGxldCBtb2NrQXBwOiBqZXN0Lk1vY2tlZDxBcHA+O1xuICBsZXQgY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgbGV0IGNvbnRleHQ6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQ7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gU2V0dXAgRE9NIGVudmlyb25tZW50XG4gICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnPGRpdiBpZD1cInRlc3QtY29udGFpbmVyXCI+PC9kaXY+JztcbiAgICBjb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdC1jb250YWluZXInKSE7XG5cbiAgICAvLyBNb2NrIGFwcFxuICAgIG1vY2tBcHAgPSB7XG4gICAgICB3b3Jrc3BhY2U6IHtcbiAgICAgICAgb3BlbkxpbmtUZXh0OiBqZXN0LmZuKClcbiAgICAgIH1cbiAgICB9IGFzIGFueTtcblxuICAgIC8vIE1vY2sgcGx1Z2luXG4gICAgbW9ja1BsdWdpbiA9IHtcbiAgICAgIGFwcDogbW9ja0FwcFxuICAgIH0gYXMgYW55O1xuXG4gICAgLy8gTW9jayBncmFwaFxuICAgIG1vY2tHcmFwaCA9IG5ldyBHcmFwaCgpIGFzIGplc3QuTW9ja2VkPEdyYXBoPjtcblxuICAgIC8vIENyZWF0ZSBkZWZhdWx0IG1vY2sgcmVzcG9uc2VzXG4gICAgY29uc3QgZGVmYXVsdFNlbGVjdFJlc3VsdCA9IHtcbiAgICAgIHJlc3VsdHM6IFtcbiAgICAgICAgeyBzOiAnc3ViamVjdDEnLCBwOiAncHJlZGljYXRlMScsIG86ICdvYmplY3QxJyB9LFxuICAgICAgICB7IHM6ICdzdWJqZWN0MicsIHA6ICdwcmVkaWNhdGUyJywgbzogJ29iamVjdDInIH1cbiAgICAgIF0sXG4gICAgICBjYWNoZWQ6IGZhbHNlXG4gICAgfTtcbiAgICBcbiAgICBjb25zdCBkZWZhdWx0Q29uc3RydWN0UmVzdWx0ID0ge1xuICAgICAgdHJpcGxlczogW10sXG4gICAgICBjYWNoZWQ6IGZhbHNlLFxuICAgICAgcHJvdmVuYW5jZTogJ3Rlc3QnXG4gICAgfTtcbiAgICBcbiAgICAvLyBDcmVhdGUgbW9jayBlbmdpbmUgaW5zdGFuY2VcbiAgICBtb2NrRW5naW5lID0ge1xuICAgICAgc2VsZWN0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKGRlZmF1bHRTZWxlY3RSZXN1bHQpLFxuICAgICAgY29uc3RydWN0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKGRlZmF1bHRDb25zdHJ1Y3RSZXN1bHQpLFxuICAgICAgZ2V0Q2FjaGVTdGF0aXN0aWNzOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaGl0czogMCxcbiAgICAgICAgbWlzc2VzOiAwLFxuICAgICAgICBoaXRSYXRlOiAwLFxuICAgICAgICBzaXplOiAwLFxuICAgICAgICBtYXhTaXplOiAxMDAsXG4gICAgICAgIHRvdGFsUXVlcmllczogMCxcbiAgICAgICAgZXZpY3Rpb25zOiAwXG4gICAgICB9KSxcbiAgICAgIGludmFsaWRhdGVDYWNoZTogamVzdC5mbigpLFxuICAgICAgY2xlYW51cENhY2hlOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKDApLFxuICAgICAgZGVzdHJveTogamVzdC5mbigpXG4gICAgfSBhcyBqZXN0Lk1vY2tlZDxTUEFSUUxFbmdpbmU+O1xuICAgIFxuICAgIC8vIE1vY2sgdGhlIFNQQVJRTEVuZ2luZSBjb25zdHJ1Y3RvciB0byByZXR1cm4gb3VyIG1vY2sgaW5zdGFuY2VcbiAgICAoU1BBUlFMRW5naW5lIGFzIGplc3QuTW9ja2VkQ2xhc3M8dHlwZW9mIFNQQVJRTEVuZ2luZT4pLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnU1BBUlFMRW5naW5lIGNvbnN0cnVjdG9yIGNhbGxlZCwgcmV0dXJuaW5nIG1vY2sgZW5naW5lJyk7XG4gICAgICByZXR1cm4gbW9ja0VuZ2luZTtcbiAgICB9KTtcblxuICAgIC8vIE1vY2sgc2VydmljZXNcbiAgICBtb2NrRm9jdXNTZXJ2aWNlID0gbmV3IEV4b0ZvY3VzU2VydmljZShtb2NrQXBwLCBtb2NrR3JhcGgpIGFzIGplc3QuTW9ja2VkPEV4b0ZvY3VzU2VydmljZT47XG4gICAgbW9ja1JERlNlcnZpY2UgPSBuZXcgUkRGU2VydmljZShtb2NrQXBwKSBhcyBqZXN0Lk1vY2tlZDxSREZTZXJ2aWNlPjtcbiAgICBtb2NrU2FuaXRpemVyID0gbmV3IFNQQVJRTFNhbml0aXplcigpIGFzIGplc3QuTW9ja2VkPFNQQVJRTFNhbml0aXplcj47XG5cbiAgICAvLyBTZXR1cCBzZXJ2aWNlIG1vY2tzXG4gICAgKFJERlNlcnZpY2UgYXMgamVzdC5Nb2NrZWRDbGFzczx0eXBlb2YgUkRGU2VydmljZT4pLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrUkRGU2VydmljZSk7XG4gICAgKFNQQVJRTFNhbml0aXplciBhcyBqZXN0Lk1vY2tlZENsYXNzPHR5cGVvZiBTUEFSUUxTYW5pdGl6ZXI+KS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja1Nhbml0aXplcik7XG4gICAgXG4gICAgbW9ja1JERlNlcnZpY2UuZ2V0TmFtZXNwYWNlTWFuYWdlciA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgZ2V0UHJlZml4OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKCdleG8nKSxcbiAgICAgIGV4cGFuZDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgnaHR0cDovL2V4YW1wbGUub3JnL2V4byMnKVxuICAgIH0pO1xuXG4gICAgLy8gTW9jayBzYW5pdGl6ZXIgLSBzaG91bGQgcmV0dXJuIHRoZSBpbnB1dCBxdWVyeSBhcyBzYW5pdGl6ZWRcbiAgICBtb2NrU2FuaXRpemVyLnNhbml0aXplID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoaW5wdXQ6IHN0cmluZykgPT4gKHtcbiAgICAgIGlzU3VjY2VzczogdHJ1ZSxcbiAgICAgIGlzRmFpbHVyZTogZmFsc2UsXG4gICAgICBnZXRWYWx1ZTogKCkgPT4gKHtcbiAgICAgICAgcXVlcnk6IGlucHV0LCAvLyBSZXR1cm4gdGhlIHNhbWUgcXVlcnkgdGhhdCB3YXMgcGFzc2VkIGluXG4gICAgICAgIHdhcm5pbmdzOiBbXVxuICAgICAgfSksXG4gICAgICBlcnJvclZhbHVlOiAoKSA9PiBudWxsXG4gICAgfSkpO1xuXG4gICAgLy8gQ3JlYXRlIHByb2Nlc3NvclxuICAgIHByb2Nlc3NvciA9IG5ldyBTUEFSUUxQcm9jZXNzb3IobW9ja1BsdWdpbiwgbW9ja0dyYXBoLCBtb2NrRm9jdXNTZXJ2aWNlKTtcblxuICAgIC8vIE1vY2sgY29udGV4dFxuICAgIGNvbnRleHQgPSB7XG4gICAgICBzb3VyY2VQYXRoOiAndGVzdC5tZCcsXG4gICAgICBmcm9udG1hdHRlcjoge30sXG4gICAgICBhZGRDaGlsZDogamVzdC5mbigpLFxuICAgICAgZ2V0U2VjdGlvbkluZm86IGplc3QuZm4oKVxuICAgIH07XG5cbiAgICAvLyBNb2NrIE5vdGljZVxuICAgIGplc3Quc3B5T24ocmVxdWlyZSgnb2JzaWRpYW4nKSwgJ05vdGljZScpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe30pKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW5pdGlhbGl6YXRpb24nLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBhbGwgcmVxdWlyZWQgZGVwZW5kZW5jaWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHByb2Nlc3NvcikudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChwcm9jZXNzb3JbJ3BsdWdpbiddKS50b0JlKG1vY2tQbHVnaW4pO1xuICAgICAgZXhwZWN0KHByb2Nlc3NvclsnZ3JhcGgnXSkudG9CZShtb2NrR3JhcGgpO1xuICAgICAgZXhwZWN0KHByb2Nlc3NvclsnZW5naW5lJ10pLnRvQmUobW9ja0VuZ2luZSk7XG4gICAgICBleHBlY3QocHJvY2Vzc29yWydmb2N1c1NlcnZpY2UnXSkudG9CZShtb2NrRm9jdXNTZXJ2aWNlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGhvdXQgZm9jdXMgc2VydmljZScsICgpID0+IHtcbiAgICAgIGNvbnN0IHByb2Nlc3Nvck5vRm9jdXMgPSBuZXcgU1BBUlFMUHJvY2Vzc29yKG1vY2tQbHVnaW4sIG1vY2tHcmFwaCk7XG4gICAgICBleHBlY3QocHJvY2Vzc29yTm9Gb2N1cykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdChwcm9jZXNzb3JOb0ZvY3VzWydmb2N1c1NlcnZpY2UnXSkudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBjYWNoZSBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgY2FjaGVDb25maWcgPSB7XG4gICAgICAgIG1heFNpemU6IDEwMCxcbiAgICAgICAgZGVmYXVsdFRUTDogNjAwMDAsXG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgICBcbiAgICAgIGNvbnN0IHByb2Nlc3NvcldpdGhDYWNoZSA9IG5ldyBTUEFSUUxQcm9jZXNzb3IobW9ja1BsdWdpbiwgbW9ja0dyYXBoLCBtb2NrRm9jdXNTZXJ2aWNlLCBjYWNoZUNvbmZpZyk7XG4gICAgICBleHBlY3QocHJvY2Vzc29yV2l0aENhY2hlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KFNQQVJRTEVuZ2luZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgobW9ja0dyYXBoLCBjYWNoZUNvbmZpZyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwcm9jZXNzQ29kZUJsb2NrJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBwcm9jZXNzIHNpbXBsZSBTRUxFQ1QgcXVlcnkgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc2VsZWN0UmVzdWx0cyA9IFtcbiAgICAgICAgeyBzOiAnc3ViamVjdDEnLCBwOiAncHJlZGljYXRlMScsIG86ICdvYmplY3QxJyB9LFxuICAgICAgICB7IHM6ICdzdWJqZWN0MicsIHA6ICdwcmVkaWNhdGUyJywgbzogJ29iamVjdDInIH1cbiAgICAgIF07XG5cbiAgICAgIC8vIERlYnVnIHRoZSBkZWZhdWx0IHNldHVwIGZpcnN0ICBcbiAgICAgIGNvbnNvbGUubG9nKCdCZWZvcmUgc2V0dGluZyB1cCBzcGVjaWZpYyB0ZXN0IG1vY2s6Jyk7XG4gICAgICBjb25zb2xlLmxvZygnbW9ja0VuZ2luZS5zZWxlY3QgbW9jayBjYWxsczonLCBtb2NrRW5naW5lLnNlbGVjdC5tb2NrPy5jYWxscyB8fCAnbm8gY2FsbHMnKTtcbiAgICAgIGNvbnNvbGUubG9nKCdEZWZhdWx0IG1vY2sgcmV0dXJuIHZhbHVlIHRlc3Q6Jyk7XG4gICAgICBjb25zdCBkZWZhdWx0UmVzdWx0ID0gbW9ja0VuZ2luZS5zZWxlY3QoJ3Rlc3QgcXVlcnknKTtcbiAgICAgIGNvbnNvbGUubG9nKCdEZWZhdWx0IHJlc3VsdDonLCBkZWZhdWx0UmVzdWx0KTtcbiAgICAgIFxuICAgICAgLy8gUmVzZXQgYW5kIHNldCB1cCB0aGUgbW9jayBlbmdpbmUgZm9yIHRoaXMgc3BlY2lmaWMgdGVzdFxuICAgICAgbW9ja0VuZ2luZS5zZWxlY3QubW9ja1Jlc2V0KCk7XG4gICAgICBtb2NrRW5naW5lLnNlbGVjdC5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICByZXN1bHRzOiBzZWxlY3RSZXN1bHRzLFxuICAgICAgICBjYWNoZWQ6IGZhbHNlXG4gICAgICB9IGFzIFNlbGVjdFJlc3VsdCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9ICdTRUxFQ1QgP3MgP3AgP28gV0hFUkUgeyA/cyA/cCA/byB9IExJTUlUIDEwJztcbiAgICAgIFxuICAgICAgLy8gVGVzdCB0aGUgbW9jayBkaXJlY3RseSBmaXJzdFxuICAgICAgY29uc29sZS5sb2coJ0RpcmVjdCBtb2NrIHRlc3Q6Jyk7XG4gICAgICBjb25zdCBkaXJlY3RSZXN1bHQgPSBtb2NrRW5naW5lLnNlbGVjdChzb3VyY2UpO1xuICAgICAgY29uc29sZS5sb2coJ0RpcmVjdCByZXN1bHQ6JywgZGlyZWN0UmVzdWx0KTtcbiAgICAgIFxuICAgICAgYXdhaXQgcHJvY2Vzc29yLnByb2Nlc3NDb2RlQmxvY2soc291cmNlLCBjb250YWluZXIsIGNvbnRleHQpO1xuICAgICAgY29uc29sZS5sb2coJ0NvbnRhaW5lciBpbm5lckhUTUw6JywgY29udGFpbmVyLmlubmVySFRNTCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrU2FuaXRpemVyLnNhbml0aXplKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChzb3VyY2UpO1xuICAgICAgZXhwZWN0KG1vY2tFbmdpbmUuc2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChzb3VyY2UpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBET00gc3RydWN0dXJlXG4gICAgICBleHBlY3QoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5leG9jb3J0ZXgtc3BhcnFsLWNvbnRhaW5lcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2gzJyk/LnRleHRDb250ZW50KS50b0JlKCdTUEFSUUwgUXVlcnkgUmVzdWx0cycpO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdwcmUnKT8udGV4dENvbnRlbnQpLnRvQmUoc291cmNlKTtcbiAgICAgIGV4cGVjdChjb250YWluZXIucXVlcnlTZWxlY3RvcigndGFibGUnKSkudG9CZVRydXRoeSgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHByb2Nlc3MgQ09OU1RSVUNUIHF1ZXJ5IHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tUcmlwbGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgZ2V0U3ViamVjdDogKCkgPT4gKHsgdG9TdHJpbmc6ICgpID0+ICdodHRwOi8vZXhhbXBsZS5vcmcvczEnIH0pLFxuICAgICAgICAgIGdldFByZWRpY2F0ZTogKCkgPT4gKHsgdG9TdHJpbmc6ICgpID0+ICdodHRwOi8vZXhhbXBsZS5vcmcvcDEnIH0pLFxuICAgICAgICAgIGdldE9iamVjdDogKCkgPT4gKHsgdG9TdHJpbmc6ICgpID0+ICdodHRwOi8vZXhhbXBsZS5vcmcvbzEnIH0pXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBnZXRTdWJqZWN0OiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gJ2h0dHA6Ly9leGFtcGxlLm9yZy9zMicgfSksXG4gICAgICAgICAgZ2V0UHJlZGljYXRlOiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gJ2h0dHA6Ly9leGFtcGxlLm9yZy9wMicgfSksXG4gICAgICAgICAgZ2V0T2JqZWN0OiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gJ2h0dHA6Ly9leGFtcGxlLm9yZy9vMicgfSlcbiAgICAgICAgfVxuICAgICAgXTtcblxuICAgICAgbW9ja0VuZ2luZS5jb25zdHJ1Y3QgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgdHJpcGxlczogbW9ja1RyaXBsZXMsXG4gICAgICAgIGNhY2hlZDogZmFsc2UsXG4gICAgICAgIHByb3ZlbmFuY2U6ICd0ZXN0LXF1ZXJ5J1xuICAgICAgfSBhcyBDb25zdHJ1Y3RSZXN1bHQpO1xuXG4gICAgICBtb2NrR3JhcGguYWRkID0gamVzdC5mbigpO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSAnQ09OU1RSVUNUIHsgP3MgP3AgP28gfSBXSEVSRSB7ID9zID9wID9vIH0nO1xuICAgICAgXG4gICAgICBhd2FpdCBwcm9jZXNzb3IucHJvY2Vzc0NvZGVCbG9jayhzb3VyY2UsIGNvbnRhaW5lciwgY29udGV4dCk7XG5cbiAgICAgIGV4cGVjdChtb2NrU2FuaXRpemVyLnNhbml0aXplKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChzb3VyY2UpO1xuICAgICAgZXhwZWN0KG1vY2tFbmdpbmUuY29uc3RydWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChzb3VyY2UpO1xuICAgICAgZXhwZWN0KG1vY2tHcmFwaC5hZGQpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgcmVzdWx0cyBmb3JtYXR0aW5nXG4gICAgICBleHBlY3QoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgIGV4cGVjdChjb250YWluZXIucXVlcnlTZWxlY3RvcigndGQnKT8udGV4dENvbnRlbnQpLnRvQ29udGFpbignaHR0cDovL2V4YW1wbGUub3JnLycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSByZXN1bHRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0VuZ2luZS5zZWxlY3QgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgcmVzdWx0czogW10sXG4gICAgICAgIGNhY2hlZDogZmFsc2VcbiAgICAgIH0gYXMgU2VsZWN0UmVzdWx0KTtcblxuICAgICAgY29uc3Qgc291cmNlID0gJ1NFTEVDVCA/cyA/cCA/byBXSEVSRSB7ID9zID9wID9vIH0nO1xuICAgICAgXG4gICAgICBhd2FpdCBwcm9jZXNzb3IucHJvY2Vzc0NvZGVCbG9jayhzb3VyY2UsIGNvbnRhaW5lciwgY29udGV4dCk7XG5cbiAgICAgIGV4cGVjdChjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNwYXJxbC1lbXB0eS1yZXN1bHQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc3BhcnFsLWVtcHR5LXJlc3VsdCcpPy50ZXh0Q29udGVudCkudG9CZSgnTm8gcmVzdWx0cyBmb3VuZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjYWNoZWQgcmVzdWx0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdFJlc3VsdHMgPSBbXG4gICAgICAgIHsgczogJ2NhY2hlZDEnLCBwOiAnY2FjaGVkMicsIG86ICdjYWNoZWQzJyB9XG4gICAgICBdO1xuXG4gICAgICBtb2NrRW5naW5lLnNlbGVjdCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICByZXN1bHRzOiBzZWxlY3RSZXN1bHRzLFxuICAgICAgICBjYWNoZWQ6IHRydWVcbiAgICAgIH0gYXMgU2VsZWN0UmVzdWx0KTtcblxuICAgICAgY29uc3Qgc291cmNlID0gJ1NFTEVDVCA/cyA/cCA/byBXSEVSRSB7ID9zID9wID9vIH0nO1xuICAgICAgXG4gICAgICBhd2FpdCBwcm9jZXNzb3IucHJvY2Vzc0NvZGVCbG9jayhzb3VyY2UsIGNvbnRhaW5lciwgY29udGV4dCk7XG5cbiAgICAgIGV4cGVjdChjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNwYXJxbC1jYWNoZS1pbmRpY2F0b3InKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc3BhcnFsLWNhY2hlLWluZGljYXRvcicpPy50ZXh0Q29udGVudCkudG9Db250YWluKCdDYWNoZWQgUmVzdWx0Jyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZGlzcGxheSBsb2FkaW5nIGluZGljYXRvcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCByZXNvbHZlUHJvbWlzZTogRnVuY3Rpb247XG4gICAgICBjb25zdCBzbG93UHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICB9KTtcblxuICAgICAgbW9ja0VuZ2luZS5zZWxlY3QgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgcmVzdWx0czogW10sXG4gICAgICAgIGNhY2hlZDogZmFsc2VcbiAgICAgIH0gYXMgU2VsZWN0UmVzdWx0KTtcblxuICAgICAgLy8gTW9jayBwcm9jZXNzQ29kZUJsb2NrIHRvIGJlIHNsb3dcbiAgICAgIGNvbnN0IG9yaWdpbmFsRXhlY3V0ZVF1ZXJ5ID0gcHJvY2Vzc29yLmV4ZWN1dGVRdWVyeTtcbiAgICAgIHByb2Nlc3Nvci5leGVjdXRlUXVlcnkgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHNsb3dQcm9taXNlKTtcblxuICAgICAgY29uc3Qgc291cmNlID0gJ1NFTEVDVCA/cyA/cCA/byBXSEVSRSB7ID9zID9wID9vIH0nO1xuICAgICAgY29uc3QgcHJvY2Vzc1Byb21pc2UgPSBwcm9jZXNzb3IucHJvY2Vzc0NvZGVCbG9jayhzb3VyY2UsIGNvbnRhaW5lciwgY29udGV4dCk7XG5cbiAgICAgIC8vIENoZWNrIGxvYWRpbmcgaW5kaWNhdG9yIGFwcGVhcnNcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMCkpO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc3BhcnFsLWxvYWRpbmcnKSkudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcuc3BhcnFsLWxvYWRpbmcnKT8udGV4dENvbnRlbnQpLnRvQmUoJ0V4ZWN1dGluZyBxdWVyeS4uLicpO1xuXG4gICAgICAvLyBDb21wbGV0ZSB0aGUgcHJvbWlzZVxuICAgICAgcmVzb2x2ZVByb21pc2UhKHsgcmVzdWx0czogW10sIGNhY2hlZDogZmFsc2UgfSk7XG4gICAgICBhd2FpdCBwcm9jZXNzUHJvbWlzZTtcblxuICAgICAgLy8gTG9hZGluZyBpbmRpY2F0b3Igc2hvdWxkIGJlIHJlbW92ZWRcbiAgICAgIGV4cGVjdChjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNwYXJxbC1sb2FkaW5nJykpLnRvQmVGYWxzeSgpO1xuXG4gICAgICBwcm9jZXNzb3IuZXhlY3V0ZVF1ZXJ5ID0gb3JpZ2luYWxFeGVjdXRlUXVlcnk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHF1ZXJ5IGV4ZWN1dGlvbiBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2UgPSAnSU5WQUxJRCBTUEFSUUwgUVVFUlknO1xuICAgICAgXG4gICAgICAvLyBNb2NrIHNhbml0aXplciB0byByZXR1cm4gZXJyb3JcbiAgICAgIG1vY2tTYW5pdGl6ZXIuc2FuaXRpemUgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaXNTdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgaXNGYWlsdXJlOiB0cnVlLFxuICAgICAgICBnZXRWYWx1ZTogKCkgPT4gbnVsbCxcbiAgICAgICAgZXJyb3JWYWx1ZTogKCkgPT4gJ0ludmFsaWQgU1BBUlFMIHN5bnRheCdcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBwcm9jZXNzb3IucHJvY2Vzc0NvZGVCbG9jayhzb3VyY2UsIGNvbnRhaW5lciwgY29udGV4dCk7XG5cbiAgICAgIGV4cGVjdChjb250YWluZXIucXVlcnlTZWxlY3RvcignLnNwYXJxbC1lcnJvcicpKS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zcGFycWwtZXJyb3InKT8udGV4dENvbnRlbnQpLnRvQ29udGFpbignUXVlcnkgdmFsaWRhdGlvbiBmYWlsZWQnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBhcHBseSBFeG9Gb2N1cyBmaWx0ZXJpbmcgd2hlbiBhdmFpbGFibGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbFJlc3VsdHMgPSBbXG4gICAgICAgIHsgczogJ3N1YmplY3QxJywgcDogJ3ByZWRpY2F0ZTEnLCBvOiAnb2JqZWN0MScgfSxcbiAgICAgICAgeyBzOiAnc3ViamVjdDInLCBwOiAncHJlZGljYXRlMicsIG86ICdvYmplY3QyJyB9LFxuICAgICAgICB7IHM6ICdzdWJqZWN0MycsIHA6ICdwcmVkaWNhdGUzJywgbzogJ29iamVjdDMnIH1cbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IGZpbHRlcmVkUmVzdWx0cyA9IFtcbiAgICAgICAgeyBzOiAnc3ViamVjdDEnLCBwOiAncHJlZGljYXRlMScsIG86ICdvYmplY3QxJyB9XG4gICAgICBdO1xuXG4gICAgICBtb2NrRW5naW5lLnNlbGVjdCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICByZXN1bHRzOiBvcmlnaW5hbFJlc3VsdHMsXG4gICAgICAgIGNhY2hlZDogZmFsc2VcbiAgICAgIH0gYXMgU2VsZWN0UmVzdWx0KTtcblxuICAgICAgbW9ja0ZvY3VzU2VydmljZS5maWx0ZXJTUEFSUUxSZXN1bHRzID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShmaWx0ZXJlZFJlc3VsdHMpO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSAnU0VMRUNUID9zID9wID9vIFdIRVJFIHsgP3MgP3AgP28gfSc7XG4gICAgICBcbiAgICAgIGF3YWl0IHByb2Nlc3Nvci5wcm9jZXNzQ29kZUJsb2NrKHNvdXJjZSwgY29udGFpbmVyLCBjb250ZXh0KTtcblxuICAgICAgZXhwZWN0KG1vY2tGb2N1c1NlcnZpY2UuZmlsdGVyU1BBUlFMUmVzdWx0cykudG9IYXZlQmVlbkNhbGxlZFdpdGgob3JpZ2luYWxSZXN1bHRzKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgdGhhdCBmaWx0ZXJlZCByZXN1bHRzIGFyZSBkaXNwbGF5ZWRcbiAgICAgIGNvbnN0IHJvd3MgPSBjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgndGJvZHkgdHInKTtcbiAgICAgIGV4cGVjdChyb3dzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdleGVjdXRlUXVlcnknLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlamVjdCBlbXB0eSBxdWVyaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZXhwZWN0KHByb2Nlc3Nvci5leGVjdXRlUXVlcnkoJycpKS5yZWplY3RzLnRvVGhyb3coJ0VtcHR5IHF1ZXJ5Jyk7XG4gICAgICBhd2FpdCBleHBlY3QocHJvY2Vzc29yLmV4ZWN1dGVRdWVyeSgnICAgJykpLnJlamVjdHMudG9UaHJvdygnRW1wdHkgcXVlcnknKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgcXVlcnkgc2FuaXRpemF0aW9uIGZhaWx1cmVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja1Nhbml0aXplci5zYW5pdGl6ZSA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBpc0ZhaWx1cmU6IHRydWUsXG4gICAgICAgIGdldFZhbHVlOiAoKSA9PiBudWxsLFxuICAgICAgICBlcnJvclZhbHVlOiAoKSA9PiAnTWFsaWNpb3VzIHF1ZXJ5IGRldGVjdGVkJ1xuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChwcm9jZXNzb3IuZXhlY3V0ZVF1ZXJ5KCdEUk9QIFRBQkxFIHVzZXJzOycpKS5yZWplY3RzLnRvVGhyb3coJ1F1ZXJ5IHZhbGlkYXRpb24gZmFpbGVkJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgc2hvdyB3YXJuaW5ncyBmcm9tIHNhbml0aXplcicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tOb3RpY2UgPSBqZXN0LnNweU9uKHJlcXVpcmUoJ29ic2lkaWFuJyksICdOb3RpY2UnKTtcbiAgICAgIFxuICAgICAgbW9ja1Nhbml0aXplci5zYW5pdGl6ZSA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICBpc1N1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGlzRmFpbHVyZTogZmFsc2UsXG4gICAgICAgIGdldFZhbHVlOiAoKSA9PiAoe1xuICAgICAgICAgIHF1ZXJ5OiAnU0VMRUNUID9zID9wID9vIFdIRVJFIHsgP3MgP3AgP28gfScsXG4gICAgICAgICAgd2FybmluZ3M6IFsnUXVlcnkgY29udGFpbnMgZGVwcmVjYXRlZCBzeW50YXgnXVxuICAgICAgICB9KSxcbiAgICAgICAgZXJyb3JWYWx1ZTogKCkgPT4gbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIG1vY2tFbmdpbmUuc2VsZWN0ID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHJlc3VsdHM6IFtdLFxuICAgICAgICBjYWNoZWQ6IGZhbHNlXG4gICAgICB9IGFzIFNlbGVjdFJlc3VsdCk7XG5cbiAgICAgIGF3YWl0IHByb2Nlc3Nvci5leGVjdXRlUXVlcnkoJ1NFTEVDVCA/cyA/cCA/byBXSEVSRSB7ID9zID9wID9vIH0nKTtcblxuICAgICAgZXhwZWN0KG1vY2tOb3RpY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdRdWVyeSBleGVjdXRlZCB3aXRoIHdhcm5pbmdzOiBRdWVyeSBjb250YWlucyBkZXByZWNhdGVkIHN5bnRheCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHJlamVjdCB1bnN1cHBvcnRlZCBxdWVyeSB0eXBlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tTYW5pdGl6ZXIuc2FuaXRpemUgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaXNTdWNjZXNzOiB0cnVlLFxuICAgICAgICBpc0ZhaWx1cmU6IGZhbHNlLFxuICAgICAgICBnZXRWYWx1ZTogKCkgPT4gKHtcbiAgICAgICAgICBxdWVyeTogJ0RFTEVURSBXSEVSRSB7ID9zID9wID9vIH0nLFxuICAgICAgICAgIHdhcm5pbmdzOiBbXVxuICAgICAgICB9KSxcbiAgICAgICAgZXJyb3JWYWx1ZTogKCkgPT4gbnVsbFxuICAgICAgfSk7XG5cbiAgICAgIGF3YWl0IGV4cGVjdChwcm9jZXNzb3IuZXhlY3V0ZVF1ZXJ5KCdERUxFVEUgV0hFUkUgeyA/cyA/cCA/byB9JykpLnJlamVjdHMudG9UaHJvdygnT25seSBTRUxFQ1QgYW5kIENPTlNUUlVDVCBxdWVyaWVzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIENPTlNUUlVDVCBxdWVyeSB3aXRoIGR1cGxpY2F0ZSBwcmV2ZW50aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1RyaXBsZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBnZXRTdWJqZWN0OiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gJ2h0dHA6Ly9leGFtcGxlLm9yZy9zMScgfSksXG4gICAgICAgICAgZ2V0UHJlZGljYXRlOiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gJ2h0dHA6Ly9leGFtcGxlLm9yZy9wMScgfSksXG4gICAgICAgICAgZ2V0T2JqZWN0OiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gJ2h0dHA6Ly9leGFtcGxlLm9yZy9vMScgfSlcbiAgICAgICAgfVxuICAgICAgXTtcblxuICAgICAgLy8gVGVzdCBjYWNoZWQgcmVzdWx0IC0gc2hvdWxkIG5vdCBhZGQgdG8gZ3JhcGhcbiAgICAgIG1vY2tFbmdpbmUuY29uc3RydWN0ID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHRyaXBsZXM6IG1vY2tUcmlwbGVzLFxuICAgICAgICBjYWNoZWQ6IHRydWUsXG4gICAgICAgIHByb3ZlbmFuY2U6ICd0ZXN0LXF1ZXJ5J1xuICAgICAgfSBhcyBDb25zdHJ1Y3RSZXN1bHQpO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9jZXNzb3IuZXhlY3V0ZVF1ZXJ5KCdDT05TVFJVQ1QgeyA/cyA/cCA/byB9IFdIRVJFIHsgP3MgP3AgP28gfScpO1xuXG4gICAgICBleHBlY3QobW9ja0dyYXBoLmFkZCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY2FjaGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5yZXN1bHRzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUYWJsZSBDcmVhdGlvbicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIHRhYmxlIHdpdGggaGVhZGVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXG4gICAgICAgIHsgbmFtZTogJ0pvaG4nLCBhZ2U6ICcyNScsIGNpdHk6ICdOZXcgWW9yaycgfSxcbiAgICAgICAgeyBuYW1lOiAnSmFuZScsIGFnZTogJzMwJywgY2l0eTogJ0Jvc3RvbicgfVxuICAgICAgXTtcblxuICAgICAgY29uc3QgdGFibGUgPSBwcm9jZXNzb3JbJ2NyZWF0ZVJlc3VsdFRhYmxlJ10ocmVzdWx0cyk7XG5cbiAgICAgIGV4cGVjdCh0YWJsZS50YWdOYW1lKS50b0JlKCdUQUJMRScpO1xuICAgICAgZXhwZWN0KHRhYmxlLmNsYXNzTmFtZSkudG9CZSgnc3BhcnFsLXJlc3VsdHMtdGFibGUnKTtcbiAgICAgIFxuICAgICAgLy8gQ2hlY2sgaGVhZGVyc1xuICAgICAgY29uc3QgaGVhZGVycyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJyk7XG4gICAgICBleHBlY3QoaGVhZGVycykudG9IYXZlTGVuZ3RoKDMpO1xuICAgICAgZXhwZWN0KGhlYWRlcnNbMF0udGV4dENvbnRlbnQpLnRvQmUoJ25hbWUnKTtcbiAgICAgIGV4cGVjdChoZWFkZXJzWzFdLnRleHRDb250ZW50KS50b0JlKCdhZ2UnKTtcbiAgICAgIGV4cGVjdChoZWFkZXJzWzJdLnRleHRDb250ZW50KS50b0JlKCdjaXR5Jyk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGRhdGEgcm93c1xuICAgICAgY29uc3QgZGF0YVJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpO1xuICAgICAgZXhwZWN0KGRhdGFSb3dzKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICBleHBlY3QoZGF0YVJvd3NbMF0uY2VsbHNbMF0udGV4dENvbnRlbnQpLnRvQmUoJ0pvaG4nKTtcbiAgICAgIGV4cGVjdChkYXRhUm93c1sxXS5jZWxsc1swXS50ZXh0Q29udGVudCkudG9CZSgnSmFuZScpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBlbXB0eSB0YWJsZSBmb3Igbm8gcmVzdWx0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IHRhYmxlID0gcHJvY2Vzc29yWydjcmVhdGVSZXN1bHRUYWJsZSddKFtdKTtcbiAgICAgIGV4cGVjdCh0YWJsZS50YWdOYW1lKS50b0JlKCdUQUJMRScpO1xuICAgICAgZXhwZWN0KHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RyJykpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZmlsZSBsaW5rcyBpbiByZXN1bHRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IFtcbiAgICAgICAgeyBmaWxlOiAnZmlsZTovL3Rlc3Qtbm90ZS5tZCcsIGNvbnRlbnQ6ICdzb21lIGNvbnRlbnQnIH0sXG4gICAgICAgIHsgZmlsZTogJy9wYXRoL3RvL25vdGUubWQnLCBjb250ZW50OiAnbW9yZSBjb250ZW50JyB9XG4gICAgICBdO1xuXG4gICAgICBjb25zdCB0YWJsZSA9IHByb2Nlc3NvclsnY3JlYXRlUmVzdWx0VGFibGUnXShyZXN1bHRzKTtcbiAgICAgIFxuICAgICAgY29uc3QgbGlua3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdhLmludGVybmFsLWxpbmsnKTtcbiAgICAgIGV4cGVjdChsaW5rcykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KGxpbmtzWzBdLnRleHRDb250ZW50KS50b0JlKCd0ZXN0LW5vdGUubWQnKTtcbiAgICAgIGV4cGVjdChsaW5rc1sxXS50ZXh0Q29udGVudCkudG9CZSgnbm90ZS5tZCcpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjbGljayBldmVudHMgb24gbm90ZSBsaW5rcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbeyBmaWxlOiAnZmlsZTovL3Rlc3Qtbm90ZS5tZCcgfV07XG4gICAgICBjb25zdCB0YWJsZSA9IHByb2Nlc3NvclsnY3JlYXRlUmVzdWx0VGFibGUnXShyZXN1bHRzKTtcbiAgICAgIGNvbnN0IGxpbmsgPSB0YWJsZS5xdWVyeVNlbGVjdG9yKCdhLmludGVybmFsLWxpbmsnKSBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICAgIFxuICAgICAgZXhwZWN0KGxpbmspLnRvQmVUcnV0aHkoKTtcbiAgICAgIFxuICAgICAgLy8gTW9jayBjbGljayBldmVudFxuICAgICAgY29uc3QgY2xpY2tFdmVudCA9IG5ldyBFdmVudCgnY2xpY2snKTtcbiAgICAgIGplc3Quc3B5T24oY2xpY2tFdmVudCwgJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgICBcbiAgICAgIGxpbmsuZGlzcGF0Y2hFdmVudChjbGlja0V2ZW50KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNsaWNrRXZlbnQucHJldmVudERlZmF1bHQpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrQXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0LW5vdGUubWQnLCAnJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYWNoZSBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gY2FjaGUgc3RhdGlzdGljcycsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tTdGF0cyA9IHtcbiAgICAgICAgaGl0czogMTUsXG4gICAgICAgIG1pc3NlczogOCxcbiAgICAgICAgaGl0UmF0ZTogNjUuMixcbiAgICAgICAgc2l6ZTogMTIsXG4gICAgICAgIG1heFNpemU6IDEwMCxcbiAgICAgICAgdG90YWxRdWVyaWVzOiAyMyxcbiAgICAgICAgZXZpY3Rpb25zOiAyXG4gICAgICB9O1xuXG4gICAgICBtb2NrRW5naW5lLmdldENhY2hlU3RhdGlzdGljcyA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobW9ja1N0YXRzKTtcblxuICAgICAgY29uc3Qgc3RhdHMgPSBwcm9jZXNzb3IuZ2V0Q2FjaGVTdGF0aXN0aWNzKCk7XG4gICAgICBleHBlY3Qoc3RhdHMpLnRvRXF1YWwobW9ja1N0YXRzKTtcbiAgICAgIGV4cGVjdChtb2NrRW5naW5lLmdldENhY2hlU3RhdGlzdGljcykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGludmFsaWRhdGUgY2FjaGUnLCAoKSA9PiB7XG4gICAgICBtb2NrRW5naW5lLmludmFsaWRhdGVDYWNoZSA9IGplc3QuZm4oKTtcbiAgICAgIHByb2Nlc3Nvci5pbnZhbGlkYXRlQ2FjaGUoKTtcbiAgICAgIGV4cGVjdChtb2NrRW5naW5lLmludmFsaWRhdGVDYWNoZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNsZWFudXAgY2FjaGUnLCAoKSA9PiB7XG4gICAgICBtb2NrRW5naW5lLmNsZWFudXBDYWNoZSA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoNSk7XG4gICAgICBjb25zdCByZXN1bHQgPSBwcm9jZXNzb3IuY2xlYW51cENhY2hlKCk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKDUpO1xuICAgICAgZXhwZWN0KG1vY2tFbmdpbmUuY2xlYW51cENhY2hlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgZGVzdHJveSByZXNvdXJjZXMnLCAoKSA9PiB7XG4gICAgICBtb2NrRW5naW5lLmRlc3Ryb3kgPSBqZXN0LmZuKCk7XG4gICAgICBwcm9jZXNzb3IuZGVzdHJveSgpO1xuICAgICAgZXhwZWN0KG1vY2tFbmdpbmUuZGVzdHJveSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnVUkgRWxlbWVudHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBsb2FkaW5nIGluZGljYXRvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGxvYWRpbmcgPSBwcm9jZXNzb3JbJ2NyZWF0ZUxvYWRpbmdJbmRpY2F0b3InXSgpO1xuICAgICAgZXhwZWN0KGxvYWRpbmcuY2xhc3NOYW1lKS50b0JlKCdzcGFycWwtbG9hZGluZycpO1xuICAgICAgZXhwZWN0KGxvYWRpbmcudGV4dENvbnRlbnQpLnRvQmUoJ0V4ZWN1dGluZyBxdWVyeS4uLicpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBlcnJvciBtZXNzYWdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1Rlc3QgZXJyb3IgbWVzc2FnZScpO1xuICAgICAgY29uc3QgZXJyb3JFbCA9IHByb2Nlc3NvclsnY3JlYXRlRXJyb3JNZXNzYWdlJ10oZXJyb3IpO1xuICAgICAgXG4gICAgICBleHBlY3QoZXJyb3JFbC5jbGFzc05hbWUpLnRvQmUoJ3NwYXJxbC1lcnJvcicpO1xuICAgICAgZXhwZWN0KGVycm9yRWwudGV4dENvbnRlbnQpLnRvQ29udGFpbignUXVlcnkgRXJyb3I6Jyk7XG4gICAgICBleHBlY3QoZXJyb3JFbC50ZXh0Q29udGVudCkudG9Db250YWluKCdUZXN0IGVycm9yIG1lc3NhZ2UnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgc3RhdHMgZWxlbWVudCB3aXRob3V0IGNhY2hlIGluZm8nLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0cyA9IHByb2Nlc3NvclsnY3JlYXRlU3RhdHNFbGVtZW50J10oNSwgMTUwKTtcbiAgICAgIGV4cGVjdChzdGF0cy5jbGFzc05hbWUpLnRvQmUoJ3NwYXJxbC1zdGF0cycpO1xuICAgICAgZXhwZWN0KHN0YXRzLnRleHRDb250ZW50KS50b0JlKCdFeGVjdXRlZCBpbiAxNTBtcyAtIDUgcmVzdWx0cycpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBzdGF0cyBlbGVtZW50IHdpdGggY2FjaGUgaW5mbycsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRzID0gcHJvY2Vzc29yWydjcmVhdGVTdGF0c0VsZW1lbnQnXSg1LCAxNTAsIHRydWUpO1xuICAgICAgZXhwZWN0KHN0YXRzLnRleHRDb250ZW50KS50b0JlKCdFeGVjdXRlZCBpbiAxNTBtcyAtIDUgcmVzdWx0cyAoY2FjaGVkIHJlc3VsdCknKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgY2FjaGUgaW5kaWNhdG9yIGZvciBjYWNoZWQgcmVzdWx0cycsICgpID0+IHtcbiAgICAgIGNvbnN0IGluZGljYXRvciA9IHByb2Nlc3NvclsnY3JlYXRlQ2FjaGVJbmRpY2F0b3InXSh0cnVlKTtcbiAgICAgIGV4cGVjdChpbmRpY2F0b3IuY2xhc3NOYW1lKS50b0JlKCdzcGFycWwtY2FjaGUtaW5kaWNhdG9yJyk7XG4gICAgICBleHBlY3QoaW5kaWNhdG9yLnRleHRDb250ZW50KS50b0JlKCfwn5OLIENhY2hlZCBSZXN1bHQnKTtcbiAgICAgIGV4cGVjdChpbmRpY2F0b3Iuc3R5bGUuYmFja2dyb3VuZCkudG9Db250YWluKCdyZ2IoMjMyLCAyNDUsIDIzMiknKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgY2FjaGUgaW5kaWNhdG9yIGZvciBmcmVzaCByZXN1bHRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgaW5kaWNhdG9yID0gcHJvY2Vzc29yWydjcmVhdGVDYWNoZUluZGljYXRvciddKGZhbHNlKTtcbiAgICAgIGV4cGVjdChpbmRpY2F0b3IudGV4dENvbnRlbnQpLnRvQmUoJ/CflIQgRnJlc2ggUmVzdWx0Jyk7XG4gICAgICBleHBlY3QoaW5kaWNhdG9yLnN0eWxlLmJhY2tncm91bmQpLnRvQ29udGFpbigncmdiKDIyNywgMjQyLCAyNTMpJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFeHBvcnQgQ29udHJvbHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBleHBvcnQgY29udHJvbHMgd2l0aCBmb3JtYXQgYnV0dG9ucycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbeyBzOiAndGVzdCcsIHA6ICd0ZXN0JywgbzogJ3Rlc3QnIH1dO1xuICAgICAgY29uc3QgcXVlcnkgPSAnU0VMRUNUID9zID9wID9vIFdIRVJFIHsgP3MgP3AgP28gfSc7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbnRyb2xzID0gcHJvY2Vzc29yWydjcmVhdGVFeHBvcnRDb250cm9scyddKHJlc3VsdHMsIHF1ZXJ5KTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNvbnRyb2xzLmNsYXNzTmFtZSkudG9CZSgnc3BhcnFsLWV4cG9ydC1jb250cm9scycpO1xuICAgICAgZXhwZWN0KGNvbnRyb2xzLnRleHRDb250ZW50KS50b0NvbnRhaW4oJ0V4cG9ydCByZXN1bHRzOicpO1xuICAgICAgXG4gICAgICAvLyBDaGVjayBmb3JtYXQgYnV0dG9uc1xuICAgICAgY29uc3QgYnV0dG9ucyA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zcGFycWwtZXhwb3J0LWJ1dHRvbicpO1xuICAgICAgZXhwZWN0KGJ1dHRvbnMpLnRvSGF2ZUxlbmd0aCg0KTsgLy8gVHVydGxlLCBKU09OLUxELCBOLVRyaXBsZXMsIFJERi9YTUxcbiAgICAgIFxuICAgICAgZXhwZWN0KGJ1dHRvbnNbMF0udGV4dENvbnRlbnQpLnRvQmUoJ1R1cnRsZScpO1xuICAgICAgZXhwZWN0KGJ1dHRvbnNbMV0udGV4dENvbnRlbnQpLnRvQmUoJ0pTT04tTEQnKTtcbiAgICAgIGV4cGVjdChidXR0b25zWzJdLnRleHRDb250ZW50KS50b0JlKCdOLVRyaXBsZXMnKTtcbiAgICAgIGV4cGVjdChidXR0b25zWzNdLnRleHRDb250ZW50KS50b0JlKCdSREYvWE1MJyk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGFkdmFuY2VkIGV4cG9ydCBidXR0b24nLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRzID0gW3sgczogJ3Rlc3QnLCBwOiAndGVzdCcsIG86ICd0ZXN0JyB9XTtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gJ1NFTEVDVCA/cyA/cCA/byBXSEVSRSB7ID9zID9wID9vIH0nO1xuICAgICAgXG4gICAgICBjb25zdCBjb250cm9scyA9IHByb2Nlc3NvclsnY3JlYXRlRXhwb3J0Q29udHJvbHMnXShyZXN1bHRzLCBxdWVyeSk7XG4gICAgICBjb25zdCBhZHZhbmNlZEJ1dHRvbiA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy5zcGFycWwtZXhwb3J0LWFkdmFuY2VkJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChhZHZhbmNlZEJ1dHRvbikudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGFkdmFuY2VkQnV0dG9uIS50ZXh0Q29udGVudCkudG9CZSgnQWR2YW5jZWQuLi4nKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZXhwb3J0IGJ1dHRvbiBjbGlja3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUkRGU2VydmljZS5leHBvcnRRdWVyeVJlc3VsdHMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBpc1N1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGlzRmFpbHVyZTogZmFsc2UsXG4gICAgICAgIGdldFZhbHVlOiAoKSA9PiAoe1xuICAgICAgICAgIHRyaXBsZUNvdW50OiAxMCxcbiAgICAgICAgICBmaWxlTmFtZTogJ3Rlc3QtZXhwb3J0LnR0bCcsXG4gICAgICAgICAgY29udGVudDogJ21vY2sgdHVydGxlIGNvbnRlbnQnXG4gICAgICAgIH0pLFxuICAgICAgICBlcnJvclZhbHVlOiAoKSA9PiBudWxsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzdWx0cyA9IFt7IHM6ICd0ZXN0JywgcDogJ3Rlc3QnLCBvOiAndGVzdCcgfV07XG4gICAgICBjb25zdCBxdWVyeSA9ICdTRUxFQ1QgP3MgP3AgP28gV0hFUkUgeyA/cyA/cCA/byB9JztcbiAgICAgIFxuICAgICAgY29uc3QgY29udHJvbHMgPSBwcm9jZXNzb3JbJ2NyZWF0ZUV4cG9ydENvbnRyb2xzJ10ocmVzdWx0cywgcXVlcnkpO1xuICAgICAgY29uc3QgdHVydGxlQnV0dG9uID0gY29udHJvbHMucXVlcnlTZWxlY3RvcignLnNwYXJxbC1leHBvcnQtYnV0dG9uJykgYXMgSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgICBcbiAgICAgIC8vIFNpbXVsYXRlIGNsaWNrXG4gICAgICB0dXJ0bGVCdXR0b24uY2xpY2soKTtcblxuICAgICAgLy8gV2FpdCBmb3IgYXN5bmMgb3BlcmF0aW9uXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcblxuICAgICAgZXhwZWN0KG1vY2tSREZTZXJ2aWNlLmV4cG9ydFF1ZXJ5UmVzdWx0cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIHJlc3VsdHMsXG4gICAgICAgICd0dXJ0bGUnLFxuICAgICAgICBleHBlY3QuYW55KFN0cmluZylcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGV4cG9ydCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrUkRGU2VydmljZS5leHBvcnRRdWVyeVJlc3VsdHMgPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBpc0ZhaWx1cmU6IHRydWUsXG4gICAgICAgIGdldFZhbHVlOiAoKSA9PiBudWxsLFxuICAgICAgICBlcnJvclZhbHVlOiAoKSA9PiAnRXhwb3J0IGZhaWxlZCdcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtb2NrTm90aWNlID0gamVzdC5zcHlPbihyZXF1aXJlKCdvYnNpZGlhbicpLCAnTm90aWNlJyk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBbeyBzOiAndGVzdCcsIHA6ICd0ZXN0JywgbzogJ3Rlc3QnIH1dO1xuICAgICAgY29uc3QgcXVlcnkgPSAnU0VMRUNUID9zID9wID9vIFdIRVJFIHsgP3MgP3AgP28gfSc7XG4gICAgICBcbiAgICAgIGNvbnN0IGNvbnRyb2xzID0gcHJvY2Vzc29yWydjcmVhdGVFeHBvcnRDb250cm9scyddKHJlc3VsdHMsIHF1ZXJ5KTtcbiAgICAgIGNvbnN0IHR1cnRsZUJ1dHRvbiA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy5zcGFycWwtZXhwb3J0LWJ1dHRvbicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuICAgICAgXG4gICAgICAvLyBTaW11bGF0ZSBjbGlja1xuICAgICAgdHVydGxlQnV0dG9uLmNsaWNrKCk7XG5cbiAgICAgIC8vIFdhaXQgZm9yIGFzeW5jIG9wZXJhdGlvblxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrTm90aWNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXhwb3J0IGZhaWxlZDogRXhwb3J0IGZhaWxlZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUGVyZm9ybWFuY2UgVGVzdHMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBsYXJnZSByZXN1bHQgc2V0cyBlZmZpY2llbnRseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGxhcmdlUmVzdWx0cyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDEwMDAgfSwgKF8sIGkpID0+ICh7XG4gICAgICAgIGlkOiBgaXRlbS0ke2l9YCxcbiAgICAgICAgbmFtZTogYE5hbWUgJHtpfWAsXG4gICAgICAgIHZhbHVlOiBgVmFsdWUgJHtpfWBcbiAgICAgIH0pKTtcblxuICAgICAgbW9ja0VuZ2luZS5zZWxlY3QgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgcmVzdWx0czogbGFyZ2VSZXN1bHRzLFxuICAgICAgICBjYWNoZWQ6IGZhbHNlXG4gICAgICB9IGFzIFNlbGVjdFJlc3VsdCk7XG5cbiAgICAgIGNvbnN0IHNvdXJjZSA9ICdTRUxFQ1QgP2lkID9uYW1lID92YWx1ZSBXSEVSRSB7ID9pZCA/bmFtZSA/dmFsdWUgfSc7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgXG4gICAgICBhd2FpdCBwcm9jZXNzb3IucHJvY2Vzc0NvZGVCbG9jayhzb3VyY2UsIGNvbnRhaW5lciwgY29udGV4dCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgZXhwZWN0KGVuZFRpbWUgLSBzdGFydFRpbWUpLnRvQmVMZXNzVGhhbigxMDAwKTsgLy8gU2hvdWxkIGNvbXBsZXRlIHdpdGhpbiAxIHNlY29uZFxuXG4gICAgICAvLyBWZXJpZnkgdGFibGUgd2FzIGNyZWF0ZWRcbiAgICAgIGNvbnN0IHRhYmxlID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJyk7XG4gICAgICBleHBlY3QodGFibGUpLnRvQmVUcnV0aHkoKTtcbiAgICAgIFxuICAgICAgY29uc3Qgcm93cyA9IHRhYmxlIS5xdWVyeVNlbGVjdG9yQWxsKCd0Ym9keSB0cicpO1xuICAgICAgZXhwZWN0KHJvd3MpLnRvSGF2ZUxlbmd0aCgxMDAwKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgY29tcGxleCBxdWVyaWVzIHdpdGggbXVsdGlwbGUgdmFyaWFibGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxleFJlc3VsdHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBzdWJqZWN0OiAnaHR0cDovL2V4YW1wbGUub3JnL3BlcnNvbjEnLFxuICAgICAgICAgIG5hbWU6ICdKb2huIERvZScsXG4gICAgICAgICAgYWdlOiAnMzAnLFxuICAgICAgICAgIGVtYWlsOiAnam9obkBleGFtcGxlLm9yZycsXG4gICAgICAgICAgZGVwYXJ0bWVudDogJ0VuZ2luZWVyaW5nJyxcbiAgICAgICAgICBtYW5hZ2VyOiAnaHR0cDovL2V4YW1wbGUub3JnL3BlcnNvbjInLFxuICAgICAgICAgIHByb2plY3RzOiAnUHJvamVjdCBBLCBQcm9qZWN0IEInLFxuICAgICAgICAgIHNraWxsczogJ0phdmFTY3JpcHQsIFR5cGVTY3JpcHQsIFJlYWN0J1xuICAgICAgICB9XG4gICAgICBdO1xuXG4gICAgICBtb2NrRW5naW5lLnNlbGVjdCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICByZXN1bHRzOiBjb21wbGV4UmVzdWx0cyxcbiAgICAgICAgY2FjaGVkOiBmYWxzZVxuICAgICAgfSBhcyBTZWxlY3RSZXN1bHQpO1xuXG4gICAgICBjb25zdCBzb3VyY2UgPSBgXG4gICAgICAgIFNFTEVDVCA/c3ViamVjdCA/bmFtZSA/YWdlID9lbWFpbCA/ZGVwYXJ0bWVudCA/bWFuYWdlciA/cHJvamVjdHMgP3NraWxsc1xuICAgICAgICBXSEVSRSB7XG4gICAgICAgICAgP3N1YmplY3QgZm9hZjpuYW1lID9uYW1lIDtcbiAgICAgICAgICAgICAgICAgICBmb2FmOmFnZSA/YWdlIDtcbiAgICAgICAgICAgICAgICAgICBmb2FmOm1ib3ggP2VtYWlsIDtcbiAgICAgICAgICAgICAgICAgICBvcmc6ZGVwYXJ0bWVudCA/ZGVwYXJ0bWVudCA7XG4gICAgICAgICAgICAgICAgICAgb3JnOm1hbmFnZXIgP21hbmFnZXIgO1xuICAgICAgICAgICAgICAgICAgIHByb2o6cHJvamVjdHMgP3Byb2plY3RzIDtcbiAgICAgICAgICAgICAgICAgICBza2lsbDpoYXMgP3NraWxscyAuXG4gICAgICAgIH1cbiAgICAgIGA7XG4gICAgICBcbiAgICAgIGF3YWl0IHByb2Nlc3Nvci5wcm9jZXNzQ29kZUJsb2NrKHNvdXJjZSwgY29udGFpbmVyLCBjb250ZXh0KTtcblxuICAgICAgY29uc3QgdGFibGUgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcigndGFibGUnKTtcbiAgICAgIGV4cGVjdCh0YWJsZSkudG9CZVRydXRoeSgpO1xuICAgICAgXG4gICAgICBjb25zdCBoZWFkZXJzID0gdGFibGUhLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RoJyk7XG4gICAgICBleHBlY3QoaGVhZGVycykudG9IYXZlTGVuZ3RoKDgpO1xuICAgICAgXG4gICAgICBjb25zdCBkYXRhUm93ID0gdGFibGUhLnF1ZXJ5U2VsZWN0b3IoJ3Rib2R5IHRyJyk7XG4gICAgICBleHBlY3QoZGF0YVJvdykudG9CZVRydXRoeSgpO1xuICAgICAgZXhwZWN0KGRhdGFSb3chLmNlbGxzKS50b0hhdmVMZW5ndGgoOCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIENhc2VzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbnVsbCBhbmQgdW5kZWZpbmVkIHZhbHVlcyBpbiByZXN1bHRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0cyA9IFtcbiAgICAgICAgeyBuYW1lOiAnSm9obicsIGFnZTogbnVsbCwgY2l0eTogdW5kZWZpbmVkIH0sXG4gICAgICAgIHsgbmFtZTogbnVsbCwgYWdlOiAnMjUnLCBjaXR5OiAnJyB9LFxuICAgICAgICB7IG5hbWU6IHVuZGVmaW5lZCwgYWdlOiB1bmRlZmluZWQsIGNpdHk6ICdCb3N0b24nIH1cbiAgICAgIF07XG5cbiAgICAgIGNvbnN0IHRhYmxlID0gcHJvY2Vzc29yWydjcmVhdGVSZXN1bHRUYWJsZSddKHJlc3VsdHMpO1xuICAgICAgY29uc3QgY2VsbHMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpO1xuICAgICAgXG4gICAgICAvLyBTaG91bGQgZGlzcGxheSBlbXB0eSBzdHJpbmcgZm9yIG51bGwvdW5kZWZpbmVkXG4gICAgICBleHBlY3QoY2VsbHNbMV0udGV4dENvbnRlbnQpLnRvQmUoJycpOyAvLyBudWxsIGFnZVxuICAgICAgZXhwZWN0KGNlbGxzWzJdLnRleHRDb250ZW50KS50b0JlKCcnKTsgLy8gdW5kZWZpbmVkIGNpdHlcbiAgICAgIGV4cGVjdChjZWxsc1szXS50ZXh0Q29udGVudCkudG9CZSgnJyk7IC8vIG51bGwgbmFtZVxuICAgICAgZXhwZWN0KGNlbGxzWzVdLnRleHRDb250ZW50KS50b0JlKCcnKTsgLy8gZW1wdHkgY2l0eVxuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSByZXN1bHRzIHdpdGggaW5jb25zaXN0ZW50IGNvbHVtbiBzdHJ1Y3R1cmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRzID0gW1xuICAgICAgICB7IG5hbWU6ICdKb2huJywgYWdlOiAnMzAnIH0sXG4gICAgICAgIHsgbmFtZTogJ0phbmUnLCBjaXR5OiAnQm9zdG9uJyB9LFxuICAgICAgICB7IGFnZTogJzI1JywgY2l0eTogJ05ldyBZb3JrJywgY291bnRyeTogJ1VTQScgfVxuICAgICAgXTtcblxuICAgICAgLy8gU2hvdWxkIHVzZSBjb2x1bW5zIGZyb20gZmlyc3QgcmVzdWx0XG4gICAgICBjb25zdCB0YWJsZSA9IHByb2Nlc3NvclsnY3JlYXRlUmVzdWx0VGFibGUnXShyZXN1bHRzKTtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpO1xuICAgICAgXG4gICAgICBleHBlY3QoaGVhZGVycykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KGhlYWRlcnNbMF0udGV4dENvbnRlbnQpLnRvQmUoJ25hbWUnKTtcbiAgICAgIGV4cGVjdChoZWFkZXJzWzFdLnRleHRDb250ZW50KS50b0JlKCdhZ2UnKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdmVyeSBsb25nIHF1ZXJ5IHN0cmluZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBsb25nUXVlcnkgPSBgXG4gICAgICAgIFNFTEVDVCA/cyA/cCA/byBXSEVSRSB7XG4gICAgICAgICAgP3MgP3AgP28gLlxuICAgICAgICAgICR7QXJyYXkuZnJvbSh7IGxlbmd0aDogMTAwIH0sIChfLCBpKSA9PiBgT1BUSU9OQUwgeyA/cyBleDpwcm9wJHtpfSA/dmFsJHtpfSB9YCkuam9pbignICcpfVxuICAgICAgICB9XG4gICAgICBgLnRyaW0oKTtcblxuICAgICAgbW9ja0VuZ2luZS5zZWxlY3QgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgcmVzdWx0czogW10sXG4gICAgICAgIGNhY2hlZDogZmFsc2VcbiAgICAgIH0gYXMgU2VsZWN0UmVzdWx0KTtcblxuICAgICAgYXdhaXQgcHJvY2Vzc29yLnByb2Nlc3NDb2RlQmxvY2sobG9uZ1F1ZXJ5LCBjb250YWluZXIsIGNvbnRleHQpO1xuXG4gICAgICBleHBlY3QoY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ3ByZScpPy50ZXh0Q29udGVudCkudG9CZShsb25nUXVlcnkpO1xuICAgICAgZXhwZWN0KG1vY2tFbmdpbmUuc2VsZWN0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChsb25nUXVlcnkpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gcXVlcnkgYW5kIHJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRzID0gW1xuICAgICAgICB7IG5hbWU6ICdKw7ZobiBEw7ZlJywgZGVzY3JpcHRpb246ICdTcGVjaWFsIGNoYXJzOiDDoMOhw6LDo8Okw6UnIH0sXG4gICAgICAgIHsgbmFtZTogJ9Ch0LzQuNGCJywgZGVzY3JpcHRpb246ICdDeXJpbGxpYzog0YDRg9GB0YHQutC40Lkg0YLQtdC60YHRgicgfSxcbiAgICAgICAgeyBuYW1lOiAn55Sw5Lit5aSq6YOOJywgZGVzY3JpcHRpb246ICdKYXBhbmVzZTog44GT44KT44Gr44Gh44GvJyB9XG4gICAgICBdO1xuXG4gICAgICBtb2NrRW5naW5lLnNlbGVjdCA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xuICAgICAgICByZXN1bHRzOiByZXN1bHRzLFxuICAgICAgICBjYWNoZWQ6IGZhbHNlXG4gICAgICB9IGFzIFNlbGVjdFJlc3VsdCk7XG5cbiAgICAgIGNvbnN0IHF1ZXJ5ID0gJ1NFTEVDVCA/bmFtZSA/ZGVzY3JpcHRpb24gV0hFUkUgeyA/cGVyc29uIHJkZnM6bGFiZWwgP25hbWUgOyBkYzpkZXNjcmlwdGlvbiA/ZGVzY3JpcHRpb24gfSc7XG4gICAgICBcbiAgICAgIGF3YWl0IHByb2Nlc3Nvci5wcm9jZXNzQ29kZUJsb2NrKHF1ZXJ5LCBjb250YWluZXIsIGNvbnRleHQpO1xuXG4gICAgICBjb25zdCB0YWJsZSA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCd0YWJsZScpO1xuICAgICAgY29uc3QgY2VsbHMgPSB0YWJsZSEucXVlcnlTZWxlY3RvckFsbCgndGQnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGNlbGxzWzBdLnRleHRDb250ZW50KS50b0JlKCdKw7ZobiBEw7ZlJyk7XG4gICAgICBleHBlY3QoY2VsbHNbMV0udGV4dENvbnRlbnQpLnRvQmUoJ1NwZWNpYWwgY2hhcnM6IMOgw6HDosOjw6TDpScpO1xuICAgICAgZXhwZWN0KGNlbGxzWzJdLnRleHRDb250ZW50KS50b0JlKCfQodC80LjRgicpO1xuICAgICAgZXhwZWN0KGNlbGxzWzRdLnRleHRDb250ZW50KS50b0JlKCfnlLDkuK3lpKrpg44nKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuLy8gVGVzdCB1dGlsaXRpZXNcbmZ1bmN0aW9uIGNyZWF0ZU1vY2tUcmlwbGUoczogc3RyaW5nLCBwOiBzdHJpbmcsIG86IHN0cmluZyk6IGFueSB7XG4gIHJldHVybiB7XG4gICAgZ2V0U3ViamVjdDogKCkgPT4gKHsgdG9TdHJpbmc6ICgpID0+IHMgfSksXG4gICAgZ2V0UHJlZGljYXRlOiAoKSA9PiAoeyB0b1N0cmluZzogKCkgPT4gcCB9KSxcbiAgICBnZXRPYmplY3Q6ICgpID0+ICh7IHRvU3RyaW5nOiAoKSA9PiBvIH0pXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vY2tDb250ZXh0KHNvdXJjZVBhdGg6IHN0cmluZyA9ICd0ZXN0Lm1kJyk6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQge1xuICByZXR1cm4ge1xuICAgIHNvdXJjZVBhdGgsXG4gICAgZnJvbnRtYXR0ZXI6IHt9LFxuICAgIGFkZENoaWxkOiBqZXN0LmZuKCksXG4gICAgZ2V0U2VjdGlvbkluZm86IGplc3QuZm4oKVxuICB9O1xufSJdLCJ2ZXJzaW9uIjozfQ==