34567d537f3f2194ba7faed738ec8686
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UIButton = void 0;
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
class UIButton extends Entity_1.Entity {
    constructor(props) {
        super(props);
    }
    /**
     * Factory method following DDD pattern
     */
    static create(props) {
        var _a, _b;
        // Business rules validation
        if (!props.label || props.label.trim().length === 0) {
            return Result_1.Result.fail('Button label cannot be empty');
        }
        if (props.label.length > 100) {
            return Result_1.Result.fail('Button label cannot exceed 100 characters');
        }
        if (!props.commandId) {
            return Result_1.Result.fail('Button must have an associated command');
        }
        return Result_1.Result.ok(new UIButton(Object.assign(Object.assign({}, props), { isEnabled: (_a = props.isEnabled) !== null && _a !== void 0 ? _a : true, order: (_b = props.order) !== null && _b !== void 0 ? _b : 0 })));
    }
    // Getters following encapsulation principle
    get id() {
        return this.props.id;
    }
    get label() {
        return this.props.label;
    }
    get commandId() {
        return this.props.commandId;
    }
    get order() {
        var _a;
        return (_a = this.props.order) !== null && _a !== void 0 ? _a : 0;
    }
    get isEnabled() {
        var _a;
        return (_a = this.props.isEnabled) !== null && _a !== void 0 ? _a : true;
    }
    get tooltip() {
        return this.props.tooltip;
    }
    /**
     * Business logic - button can be clicked only if enabled
     */
    canExecute() {
        return this.isEnabled;
    }
    /**
     * Domain event when button is clicked
     */
    click() {
        if (!this.canExecute()) {
            return Result_1.Result.fail('Button is disabled and cannot be clicked');
        }
        // Domain event would be raised here
        this.addDomainEvent({
            aggregateId: this.id.toString(),
            eventType: 'ButtonClicked',
            eventData: {
                buttonId: this.id.toString(),
                commandId: this.commandId.toString(),
                label: this.label
            }
        });
        return Result_1.Result.ok();
    }
    /**
     * Business logic to update button state
     */
    enable() {
        this.props.isEnabled = true;
    }
    disable() {
        this.props.isEnabled = false;
    }
    updateLabel(newLabel) {
        if (!newLabel || newLabel.trim().length === 0) {
            return Result_1.Result.fail('Button label cannot be empty');
        }
        if (newLabel.length > 100) {
            return Result_1.Result.fail('Button label cannot exceed 100 characters');
        }
        this.props.label = newLabel;
        return Result_1.Result.ok();
    }
}
exports.UIButton = UIButton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9lbnRpdGllcy9VSUJ1dHRvbi50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBd0M7QUFFeEMsMkNBQXdDO0FBZXhDLE1BQWEsUUFBUyxTQUFRLGVBQXFCO0lBQy9DLFlBQW9CLEtBQW9CO1FBQ3BDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQW9COztRQUNyQyw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2pELE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBVyw4QkFBOEIsQ0FBQyxDQUFDO1NBQ2hFO1FBRUQsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7WUFDMUIsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUFXLDJDQUEyQyxDQUFDLENBQUM7U0FDN0U7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQVcsd0NBQXdDLENBQUMsQ0FBQztTQUMxRTtRQUVELE9BQU8sZUFBTSxDQUFDLEVBQUUsQ0FBVyxJQUFJLFFBQVEsaUNBQ2hDLEtBQUssS0FDUixTQUFTLEVBQUUsTUFBQSxLQUFLLENBQUMsU0FBUyxtQ0FBSSxJQUFJLEVBQ2xDLEtBQUssRUFBRSxNQUFBLEtBQUssQ0FBQyxLQUFLLG1DQUFJLENBQUMsSUFDekIsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUVELDRDQUE0QztJQUM1QyxJQUFJLEVBQUU7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLEtBQUs7O1FBQ0wsT0FBTyxNQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxtQ0FBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksU0FBUzs7UUFDVCxPQUFPLE1BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLG1DQUFJLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxVQUFVO1FBQ2IsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUs7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBTywwQ0FBMEMsQ0FBQyxDQUFDO1NBQ3hFO1FBRUQsb0NBQW9DO1FBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDaEIsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFO1lBQy9CLFNBQVMsRUFBRSxlQUFlO1lBQzFCLFNBQVMsRUFBRTtnQkFDUCxRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Z0JBQzVCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRTtnQkFDcEMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2FBQ3BCO1NBQ0osQ0FBQyxDQUFDO1FBRUgsT0FBTyxlQUFNLENBQUMsRUFBRSxFQUFRLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTTtRQUNULElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUNoQyxDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRU0sV0FBVyxDQUFDLFFBQWdCO1FBQy9CLElBQUksQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxlQUFNLENBQUMsSUFBSSxDQUFPLDhCQUE4QixDQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO1lBQ3ZCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBTywyQ0FBMkMsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQzVCLE9BQU8sZUFBTSxDQUFDLEVBQUUsRUFBUSxDQUFDO0lBQzdCLENBQUM7Q0FDSjtBQTFHRCw0QkEwR0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9lbnRpdGllcy9VSUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9jb3JlL0VudGl0eSc7XG5pbXBvcnQgeyBBc3NldElkIH0gZnJvbSAnLi4vdmFsdWUtb2JqZWN0cy9Bc3NldElkJztcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gJy4uL2NvcmUvUmVzdWx0JztcblxuLyoqXG4gKiBEb21haW4gRW50aXR5IHJlcHJlc2VudGluZyBhIFVJIEJ1dHRvblxuICogRm9sbG93aW5nIERERCBwcmluY2lwbGVzIC0gdGhpcyBpcyBhIGRvbWFpbiBlbnRpdHkgd2l0aCBidXNpbmVzcyBsb2dpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFVJQnV0dG9uUHJvcHMge1xuICAgIGlkOiBBc3NldElkO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgY29tbWFuZElkOiBBc3NldElkO1xuICAgIG9yZGVyPzogbnVtYmVyO1xuICAgIGlzRW5hYmxlZD86IGJvb2xlYW47XG4gICAgdG9vbHRpcD86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFVJQnV0dG9uIGV4dGVuZHMgRW50aXR5PFVJQnV0dG9uUHJvcHM+IHtcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKHByb3BzOiBVSUJ1dHRvblByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGYWN0b3J5IG1ldGhvZCBmb2xsb3dpbmcgREREIHBhdHRlcm5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShwcm9wczogVUlCdXR0b25Qcm9wcyk6IFJlc3VsdDxVSUJ1dHRvbj4ge1xuICAgICAgICAvLyBCdXNpbmVzcyBydWxlcyB2YWxpZGF0aW9uXG4gICAgICAgIGlmICghcHJvcHMubGFiZWwgfHwgcHJvcHMubGFiZWwudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPFVJQnV0dG9uPignQnV0dG9uIGxhYmVsIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BzLmxhYmVsLmxlbmd0aCA+IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPFVJQnV0dG9uPignQnV0dG9uIGxhYmVsIGNhbm5vdCBleGNlZWQgMTAwIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJvcHMuY29tbWFuZElkKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0LmZhaWw8VUlCdXR0b24+KCdCdXR0b24gbXVzdCBoYXZlIGFuIGFzc29jaWF0ZWQgY29tbWFuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vazxVSUJ1dHRvbj4obmV3IFVJQnV0dG9uKHtcbiAgICAgICAgICAgIC4uLnByb3BzLFxuICAgICAgICAgICAgaXNFbmFibGVkOiBwcm9wcy5pc0VuYWJsZWQgPz8gdHJ1ZSxcbiAgICAgICAgICAgIG9yZGVyOiBwcm9wcy5vcmRlciA/PyAwXG4gICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICAvLyBHZXR0ZXJzIGZvbGxvd2luZyBlbmNhcHN1bGF0aW9uIHByaW5jaXBsZVxuICAgIGdldCBpZCgpOiBBc3NldElkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuaWQ7XG4gICAgfVxuXG4gICAgZ2V0IGxhYmVsKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmxhYmVsO1xuICAgIH1cblxuICAgIGdldCBjb21tYW5kSWQoKTogQXNzZXRJZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNvbW1hbmRJZDtcbiAgICB9XG5cbiAgICBnZXQgb3JkZXIoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMub3JkZXIgPz8gMDtcbiAgICB9XG5cbiAgICBnZXQgaXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5pc0VuYWJsZWQgPz8gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXQgdG9vbHRpcCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy50b29sdGlwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1c2luZXNzIGxvZ2ljIC0gYnV0dG9uIGNhbiBiZSBjbGlja2VkIG9ubHkgaWYgZW5hYmxlZFxuICAgICAqL1xuICAgIHB1YmxpYyBjYW5FeGVjdXRlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0VuYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRG9tYWluIGV2ZW50IHdoZW4gYnV0dG9uIGlzIGNsaWNrZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xpY2soKTogUmVzdWx0PHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbkV4ZWN1dGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPHZvaWQ+KCdCdXR0b24gaXMgZGlzYWJsZWQgYW5kIGNhbm5vdCBiZSBjbGlja2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIERvbWFpbiBldmVudCB3b3VsZCBiZSByYWlzZWQgaGVyZVxuICAgICAgICB0aGlzLmFkZERvbWFpbkV2ZW50KHtcbiAgICAgICAgICAgIGFnZ3JlZ2F0ZUlkOiB0aGlzLmlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICBldmVudFR5cGU6ICdCdXR0b25DbGlja2VkJyxcbiAgICAgICAgICAgIGV2ZW50RGF0YToge1xuICAgICAgICAgICAgICAgIGJ1dHRvbklkOiB0aGlzLmlkLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgY29tbWFuZElkOiB0aGlzLmNvbW1hbmRJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLmxhYmVsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBSZXN1bHQub2s8dm9pZD4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdXNpbmVzcyBsb2dpYyB0byB1cGRhdGUgYnV0dG9uIHN0YXRlXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5wcm9wcy5pc0VuYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNhYmxlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnByb3BzLmlzRW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVMYWJlbChuZXdMYWJlbDogc3RyaW5nKTogUmVzdWx0PHZvaWQ+IHtcbiAgICAgICAgaWYgKCFuZXdMYWJlbCB8fCBuZXdMYWJlbC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0LmZhaWw8dm9pZD4oJ0J1dHRvbiBsYWJlbCBjYW5ub3QgYmUgZW1wdHknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdMYWJlbC5sZW5ndGggPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDx2b2lkPignQnV0dG9uIGxhYmVsIGNhbm5vdCBleGNlZWQgMTAwIGNoYXJhY3RlcnMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJvcHMubGFiZWwgPSBuZXdMYWJlbDtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vazx2b2lkPigpO1xuICAgIH1cbn0iXSwidmVyc2lvbiI6M30=