{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/semantic/core/Triple.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/semantic/core/Triple.ts"],"sourcesContent":["/**\n * Core RDF Triple implementation for semantic knowledge representation\n * Based on RDF 1.1 specification: https://www.w3.org/TR/rdf11-concepts/\n */\n\nimport { Result } from \"../../core/Result\";\n\n/**\n * Internationalized Resource Identifier\n * Used to uniquely identify resources in the semantic web\n */\nexport class IRI {\n  constructor(private readonly value: string) {\n    if (!this.isValid(value)) {\n      throw new Error(`Invalid IRI: ${value}`);\n    }\n  }\n\n  private isValid(value: string): boolean {\n    try {\n      new URL(value);\n      return true;\n    } catch {\n      // Check if it's a valid CURIE (prefix:localName) or property path (prefix__Class_property)\n      // Allows double underscore for Exocortex naming convention\n      return (\n        /^[a-zA-Z][a-zA-Z0-9_]*(__[a-zA-Z][a-zA-Z0-9_]*(_[a-zA-Z][a-zA-Z0-9_]*)?)?$/.test(\n          value,\n        ) || /^[a-zA-Z][a-zA-Z0-9]*:[a-zA-Z_][a-zA-Z0-9_-]*$/.test(value)\n      );\n    }\n  }\n\n  toString(): string {\n    return this.value;\n  }\n\n  equals(other: IRI): boolean {\n    return this.value === other.value;\n  }\n\n  static from(value: string): Result<IRI> {\n    try {\n      return Result.ok(new IRI(value));\n    } catch (error) {\n      return Result.fail(`Invalid IRI: ${error.message}`);\n    }\n  }\n}\n\n/**\n * Blank node for representing anonymous resources\n */\nexport class BlankNode {\n  constructor(private readonly id: string = BlankNode.generateId()) {}\n\n  private static counter = 0;\n\n  private static generateId(): string {\n    return `_:b${++BlankNode.counter}`;\n  }\n\n  toString(): string {\n    return this.id;\n  }\n\n  equals(other: BlankNode): boolean {\n    return this.id === other.id;\n  }\n}\n\n/**\n * RDF Literal with optional datatype and language tag\n */\nexport class Literal {\n  constructor(\n    private readonly value: string,\n    private readonly datatype?: IRI,\n    private readonly language?: string,\n  ) {\n    if (language && datatype) {\n      throw new Error(\"Literal cannot have both language and datatype\");\n    }\n  }\n\n  toString(): string {\n    if (this.language) {\n      return `\"${this.value}\"@${this.language}`;\n    }\n    if (this.datatype) {\n      return `\"${this.value}\"^^${this.datatype.toString()}`;\n    }\n    return `\"${this.value}\"`;\n  }\n\n  getValue(): string {\n    return this.value;\n  }\n\n  getDatatype(): IRI | undefined {\n    return this.datatype;\n  }\n\n  getLanguage(): string | undefined {\n    return this.language;\n  }\n\n  equals(other: Literal): boolean {\n    const datatypeEquals =\n      this.datatype && other.datatype\n        ? this.datatype.equals(other.datatype)\n        : this.datatype === other.datatype;\n\n    return (\n      this.value === other.value &&\n      datatypeEquals &&\n      this.language === other.language\n    );\n  }\n\n  static string(value: string): Literal {\n    return new Literal(value, XSD.string);\n  }\n\n  static boolean(value: boolean): Literal {\n    return new Literal(value.toString(), XSD.boolean);\n  }\n\n  static integer(value: number): Literal {\n    return new Literal(Math.floor(value).toString(), XSD.integer);\n  }\n\n  static double(value: number): Literal {\n    return new Literal(value.toString(), XSD.double);\n  }\n\n  static dateTime(value: Date): Literal {\n    return new Literal(value.toISOString(), XSD.dateTime);\n  }\n\n  static langString(value: string, language: string): Literal {\n    return new Literal(value, undefined, language);\n  }\n}\n\n/**\n * RDF Triple: Subject-Predicate-Object statement\n */\nexport class Triple {\n  constructor(\n    private readonly subject: IRI | BlankNode,\n    private readonly predicate: IRI,\n    private readonly object: IRI | BlankNode | Literal,\n  ) {}\n\n  getSubject(): IRI | BlankNode {\n    return this.subject;\n  }\n\n  getPredicate(): IRI {\n    return this.predicate;\n  }\n\n  getObject(): IRI | BlankNode | Literal {\n    return this.object;\n  }\n\n  toString(): string {\n    return `${this.subject.toString()} ${this.predicate.toString()} ${this.object.toString()} .`;\n  }\n\n  equals(other: Triple): boolean {\n    return (\n      this.subjectEquals(other.subject) &&\n      this.predicate.equals(other.predicate) &&\n      this.objectEquals(other.object)\n    );\n  }\n\n  private subjectEquals(other: IRI | BlankNode): boolean {\n    if (this.subject instanceof IRI && other instanceof IRI) {\n      return this.subject.equals(other);\n    }\n    if (this.subject instanceof BlankNode && other instanceof BlankNode) {\n      return this.subject.equals(other);\n    }\n    return false;\n  }\n\n  private objectEquals(other: IRI | BlankNode | Literal): boolean {\n    if (this.object instanceof IRI && other instanceof IRI) {\n      return this.object.equals(other);\n    }\n    if (this.object instanceof BlankNode && other instanceof BlankNode) {\n      return this.object.equals(other);\n    }\n    if (this.object instanceof Literal && other instanceof Literal) {\n      return this.object.equals(other);\n    }\n    return false;\n  }\n}\n\n/**\n * Common RDF vocabularies\n */\nexport class RDF {\n  static readonly namespace = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n  );\n  static readonly type = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n  );\n  static readonly Property = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#Property\",\n  );\n  static readonly Statement = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement\",\n  );\n  static readonly subject = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#subject\",\n  );\n  static readonly predicate = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate\",\n  );\n  static readonly object = new IRI(\n    \"http://www.w3.org/1999/02/22-rdf-syntax-ns#object\",\n  );\n}\n\nexport class RDFS {\n  static readonly namespace = new IRI(\"http://www.w3.org/2000/01/rdf-schema#\");\n  static readonly Class = new IRI(\"http://www.w3.org/2000/01/rdf-schema#Class\");\n  static readonly subClassOf = new IRI(\n    \"http://www.w3.org/2000/01/rdf-schema#subClassOf\",\n  );\n  static readonly subPropertyOf = new IRI(\n    \"http://www.w3.org/2000/01/rdf-schema#subPropertyOf\",\n  );\n  static readonly domain = new IRI(\n    \"http://www.w3.org/2000/01/rdf-schema#domain\",\n  );\n  static readonly range = new IRI(\"http://www.w3.org/2000/01/rdf-schema#range\");\n  static readonly label = new IRI(\"http://www.w3.org/2000/01/rdf-schema#label\");\n  static readonly comment = new IRI(\n    \"http://www.w3.org/2000/01/rdf-schema#comment\",\n  );\n}\n\nexport class OWL {\n  static readonly namespace = new IRI(\"http://www.w3.org/2002/07/owl#\");\n  static readonly Class = new IRI(\"http://www.w3.org/2002/07/owl#Class\");\n  static readonly ObjectProperty = new IRI(\n    \"http://www.w3.org/2002/07/owl#ObjectProperty\",\n  );\n  static readonly DatatypeProperty = new IRI(\n    \"http://www.w3.org/2002/07/owl#DatatypeProperty\",\n  );\n  static readonly sameAs = new IRI(\"http://www.w3.org/2002/07/owl#sameAs\");\n  static readonly differentFrom = new IRI(\n    \"http://www.w3.org/2002/07/owl#differentFrom\",\n  );\n  static readonly equivalentClass = new IRI(\n    \"http://www.w3.org/2002/07/owl#equivalentClass\",\n  );\n}\n\nexport class XSD {\n  static readonly namespace = new IRI(\"http://www.w3.org/2001/XMLSchema#\");\n  static readonly string = new IRI(\"http://www.w3.org/2001/XMLSchema#string\");\n  static readonly boolean = new IRI(\"http://www.w3.org/2001/XMLSchema#boolean\");\n  static readonly integer = new IRI(\"http://www.w3.org/2001/XMLSchema#integer\");\n  static readonly double = new IRI(\"http://www.w3.org/2001/XMLSchema#double\");\n  static readonly dateTime = new IRI(\n    \"http://www.w3.org/2001/XMLSchema#dateTime\",\n  );\n  static readonly date = new IRI(\"http://www.w3.org/2001/XMLSchema#date\");\n}\n\n/**\n * Exocortex-specific vocabularies\n */\nexport class EXO {\n  static readonly namespace = new IRI(\"https://exocortex.io/ontology/core#\");\n  static readonly Asset = new IRI(\"https://exocortex.io/ontology/core#Asset\");\n  static readonly uuid = new IRI(\"https://exocortex.io/ontology/core#uuid\");\n  static readonly createdAt = new IRI(\n    \"https://exocortex.io/ontology/core#createdAt\",\n  );\n  static readonly updatedAt = new IRI(\n    \"https://exocortex.io/ontology/core#updatedAt\",\n  );\n  static readonly isDefinedBy = new IRI(\n    \"https://exocortex.io/ontology/core#isDefinedBy\",\n  );\n}\n\nexport class EMS {\n  static readonly namespace = new IRI(\"https://exocortex.io/ontology/ems#\");\n  static readonly Task = new IRI(\"https://exocortex.io/ontology/ems#Task\");\n  static readonly Project = new IRI(\n    \"https://exocortex.io/ontology/ems#Project\",\n  );\n  static readonly Area = new IRI(\"https://exocortex.io/ontology/ems#Area\");\n  static readonly status = new IRI(\"https://exocortex.io/ontology/ems#status\");\n  static readonly priority = new IRI(\n    \"https://exocortex.io/ontology/ems#priority\",\n  );\n}\n"],"version":3}