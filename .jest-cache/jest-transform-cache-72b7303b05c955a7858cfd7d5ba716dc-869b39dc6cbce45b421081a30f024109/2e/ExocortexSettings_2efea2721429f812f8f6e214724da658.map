{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/ExocortexSettings.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/ExocortexSettings.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\nimport { QueryEngineType } from \"../ports/IQueryEngine\";\n\n/**\n * Exocortex Plugin Settings Interface\n * Contains all user-configurable plugin settings\n */\nexport interface ExocortexSettingsData {\n  // Folder Paths\n  layoutsFolderPath: string;\n  templatesFolderPath: string;\n  templateUsageDataPath: string;\n\n  // Query Engine Settings\n  preferredQueryEngine: QueryEngineType;\n  fallbackQueryEngine: QueryEngineType;\n  enableQueryEngineAutoDetect: boolean;\n\n  // Cache Settings\n  enableSPARQLCache: boolean;\n  sparqlCacheMaxSize: number;\n  sparqlCacheTTLMinutes: number;\n  enableQueryCache: boolean;\n  queryCacheTimeout: number;\n  queryCacheMaxSize: number;\n\n  // RDF Export Settings\n  defaultRDFFormat: \"turtle\" | \"rdf-xml\" | \"n-triples\" | \"json-ld\";\n  includeInferredTriples: boolean;\n  exportNamespaces: boolean;\n\n  // Performance Settings\n  maxGraphSize: number;\n  batchProcessingSize: number;\n  enableLazyLoading: boolean;\n\n  // Mobile/Platform Settings\n  enableMobileOptimizations: boolean;\n  mobileBatchSize: number;\n  enableTouchControls: boolean;\n\n  // Debug Settings\n  enableDebugMode: boolean;\n  enableVerboseLogging: boolean;\n  logSPARQLQueries: boolean;\n  enablePerformanceMetrics: boolean;\n}\n\n/**\n * Default settings for the Exocortex plugin\n */\nexport const DEFAULT_SETTINGS: ExocortexSettingsData = {\n  // Folder Paths\n  layoutsFolderPath: \"layouts\",\n  templatesFolderPath: \".exocortex/templates\",\n  templateUsageDataPath: \".exocortex/template-usage.json\",\n\n  // Query Engine Settings\n  preferredQueryEngine: \"dataview\",\n  fallbackQueryEngine: \"datacore\",\n  enableQueryEngineAutoDetect: true,\n\n  // Cache Settings\n  enableSPARQLCache: true,\n  sparqlCacheMaxSize: 500,\n  sparqlCacheTTLMinutes: 5,\n  enableQueryCache: true,\n  queryCacheTimeout: 30,\n  queryCacheMaxSize: 100,\n\n  // RDF Export Settings\n  defaultRDFFormat: \"turtle\",\n  includeInferredTriples: false,\n  exportNamespaces: true,\n\n  // Performance Settings\n  maxGraphSize: 10000,\n  batchProcessingSize: 50,\n  enableLazyLoading: true,\n\n  // Mobile/Platform Settings\n  enableMobileOptimizations: true,\n  mobileBatchSize: 10,\n  enableTouchControls: true,\n\n  // Debug Settings\n  enableDebugMode: false,\n  enableVerboseLogging: false,\n  logSPARQLQueries: false,\n  enablePerformanceMetrics: false,\n};\n\n/**\n * Exocortex Settings Entity\n * Manages plugin configuration with validation\n */\nexport class ExocortexSettings {\n  private data: ExocortexSettingsData;\n\n  constructor(data: Partial<ExocortexSettingsData> = {}) {\n    this.data = { ...DEFAULT_SETTINGS, ...data };\n  }\n\n  /**\n   * Create settings from partial data with validation\n   */\n  public static create(\n    data: Partial<ExocortexSettingsData> = {},\n  ): Result<ExocortexSettings> {\n    try {\n      const settings = new ExocortexSettings(data);\n      const validation = settings.validate();\n\n      if (validation.isFailure) {\n        return Result.fail<ExocortexSettings>(validation.getError());\n      }\n\n      return Result.ok<ExocortexSettings>(settings);\n    } catch (error) {\n      return Result.fail<ExocortexSettings>(\n        `Failed to create settings: ${error.message}`,\n      );\n    }\n  }\n\n  /**\n   * Validate all settings\n   */\n  public validate(): Result<void> {\n    // Validate folder paths\n    if (\n      !this.data.layoutsFolderPath ||\n      this.data.layoutsFolderPath.trim().length === 0\n    ) {\n      return Result.fail<void>(\"Layouts folder path cannot be empty\");\n    }\n\n    if (\n      !this.data.templatesFolderPath ||\n      this.data.templatesFolderPath.trim().length === 0\n    ) {\n      return Result.fail<void>(\"Templates folder path cannot be empty\");\n    }\n\n    // Validate cache settings\n    if (this.data.sparqlCacheMaxSize < 1) {\n      return Result.fail<void>(\"SPARQL cache max size must be at least 1\");\n    }\n\n    if (this.data.sparqlCacheTTLMinutes < 1) {\n      return Result.fail<void>(\"SPARQL cache TTL must be at least 1 minute\");\n    }\n\n    if (this.data.queryCacheMaxSize < 1) {\n      return Result.fail<void>(\"Query cache max size must be at least 1\");\n    }\n\n    if (this.data.queryCacheTimeout < 1) {\n      return Result.fail<void>(\"Query cache timeout must be at least 1 minute\");\n    }\n\n    // Validate performance settings\n    if (this.data.maxGraphSize < 100) {\n      return Result.fail<void>(\"Max graph size must be at least 100\");\n    }\n\n    if (this.data.batchProcessingSize < 1) {\n      return Result.fail<void>(\"Batch processing size must be at least 1\");\n    }\n\n    if (this.data.mobileBatchSize < 1) {\n      return Result.fail<void>(\"Mobile batch size must be at least 1\");\n    }\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Get all settings data\n   */\n  public getData(): ExocortexSettingsData {\n    return { ...this.data };\n  }\n\n  /**\n   * Update settings with partial data\n   */\n  public update(updates: Partial<ExocortexSettingsData>): Result<void> {\n    const newData = { ...this.data, ...updates };\n    const tempSettings = new ExocortexSettings(newData);\n    const validation = tempSettings.validate();\n\n    if (validation.isFailure) {\n      return Result.fail<void>(validation.getError());\n    }\n\n    this.data = newData;\n    return Result.ok<void>();\n  }\n\n  /**\n   * Get specific setting value with type safety\n   */\n  public get<K extends keyof ExocortexSettingsData>(\n    key: K,\n  ): ExocortexSettingsData[K] {\n    return this.data[key];\n  }\n\n  /**\n   * Set specific setting value with validation\n   */\n  public set<K extends keyof ExocortexSettingsData>(\n    key: K,\n    value: ExocortexSettingsData[K],\n  ): Result<void> {\n    const updates = { [key]: value } as Partial<ExocortexSettingsData>;\n    return this.update(updates);\n  }\n\n  /**\n   * Reset all settings to defaults\n   */\n  public resetToDefaults(): void {\n    this.data = { ...DEFAULT_SETTINGS };\n  }\n\n  /**\n   * Convert to JSON for persistence\n   */\n  public toJSON(): ExocortexSettingsData {\n    return this.getData();\n  }\n\n  /**\n   * Create from JSON data\n   */\n  public static fromJSON(json: string): Result<ExocortexSettings> {\n    try {\n      const data = JSON.parse(json);\n      return ExocortexSettings.create(data);\n    } catch (error) {\n      return Result.fail<ExocortexSettings>(\n        `Failed to parse settings JSON: ${error.message}`,\n      );\n    }\n  }\n}\n"],"version":3}