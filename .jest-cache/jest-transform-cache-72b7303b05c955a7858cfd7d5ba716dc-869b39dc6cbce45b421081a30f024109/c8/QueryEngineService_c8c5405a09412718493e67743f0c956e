cb65b90e700096ee176588015e70a819
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryEngineService = void 0;
const QueryEngineConfig_1 = require("../../domain/entities/QueryEngineConfig");
const Result_1 = require("../../domain/core/Result");
/**
 * Query Engine Service
 * High-level service for executing queries with caching, fallback, and configuration support
 */
class QueryEngineService {
    constructor(queryEngineFactory, // IQueryEngineFactory - will be imported from infrastructure
    config) {
        this.queryEngineFactory = queryEngineFactory;
        this.queryCache = new Map();
        this.currentEngine = null;
        this.config = config || QueryEngineConfig_1.QueryEngineConfig.createDefault().getValue();
    }
    /**
     * Execute a query with automatic engine selection, caching, and fallback
     */
    async executeQuery(query, context, enginePreference) {
        // Check cache first
        if (this.config.enableCache) {
            const cached = this.getCachedResult(query, context);
            if (cached) {
                return Result_1.Result.ok(cached);
            }
        }
        // Get appropriate engine
        const engineResult = await this.getQueryEngine(enginePreference);
        if (!engineResult.isSuccess) {
            return Result_1.Result.fail(engineResult.getError());
        }
        const engine = engineResult.getValue();
        // Execute query
        const queryResult = await engine.executeQuery(query, context);
        // Cache successful results
        if (queryResult.isSuccess && this.config.enableCache) {
            this.cacheResult(query, context, queryResult.getValue());
        }
        return queryResult;
    }
    /**
     * Render a query directly to a container
     */
    async renderQuery(container, query, context, enginePreference) {
        const engineResult = await this.getQueryEngine(enginePreference);
        if (!engineResult.isSuccess) {
            container.createEl("p", {
                text: `Query Engine Error: ${engineResult.getError()}`,
                cls: "exocortex-error",
            });
            return Result_1.Result.fail(engineResult.getError());
        }
        const engine = engineResult.getValue();
        return engine.renderQuery(container, query, context);
    }
    /**
     * Get pages from any available engine
     */
    async getPages(source, enginePreference) {
        const engineResult = await this.getQueryEngine(enginePreference);
        if (!engineResult.isSuccess) {
            return Result_1.Result.fail(engineResult.getError());
        }
        const engine = engineResult.getValue();
        return engine.getPages(source);
    }
    /**
     * Get page metadata from any available engine
     */
    async getPageMetadata(path, enginePreference) {
        const engineResult = await this.getQueryEngine(enginePreference);
        if (!engineResult.isSuccess) {
            return Result_1.Result.fail(engineResult.getError());
        }
        const engine = engineResult.getValue();
        return engine.getPageMetadata(path);
    }
    /**
     * Validate query syntax
     */
    async validateQuery(query, engineType) {
        const engineResult = await this.getQueryEngine(engineType);
        if (!engineResult.isSuccess) {
            return Result_1.Result.fail(engineResult.getError());
        }
        const engine = engineResult.getValue();
        return Result_1.Result.ok(engine.validateQuery(query).getValue() || false);
    }
    /**
     * Get information about available engines
     */
    getAvailableEngines() {
        return this.queryEngineFactory.getAvailableEngines();
    }
    /**
     * Check if a specific engine is available
     */
    isEngineAvailable(type) {
        return this.queryEngineFactory.isEngineAvailable(type);
    }
    /**
     * Update configuration
     */
    updateConfig(config) {
        this.config = config;
        this.currentEngine = null; // Reset current engine to respect new preferences
        if (!config.enableCache) {
            this.clearCache();
        }
    }
    /**
     * Clear query cache
     */
    clearCache() {
        this.queryCache.clear();
    }
    /**
     * Get cache statistics
     */
    getCacheStats() {
        // This would need to be implemented with proper hit/miss tracking
        return {
            size: this.queryCache.size,
            hitRate: 0,
            maxSize: this.config.maxCacheSize,
        };
    }
    /**
     * Get diagnostic information
     */
    getDiagnostics() {
        return {
            currentEngine: this.currentEngine?.getType() || null,
            availableEngines: this.getAvailableEngines(),
            config: {
                preferred: this.config.preferredEngine,
                fallback: this.config.fallbackEngine,
                autoDetect: this.config.autoDetect,
                cacheEnabled: this.config.enableCache,
            },
            cache: this.getCacheStats(),
            factory: this.queryEngineFactory.getDiagnostics(),
        };
    }
    async getQueryEngine(preference) {
        // Use preference if provided, otherwise use config
        const engineType = preference || this.config.preferredEngine;
        // Try to reuse current engine if it matches preferences and is available
        if (this.currentEngine &&
            this.currentEngine.getType() === engineType &&
            this.currentEngine.isAvailable()) {
            return Result_1.Result.ok(this.currentEngine);
        }
        // Create new engine
        const engineResult = await this.queryEngineFactory.createQueryEngine(engineType);
        if (engineResult.isSuccess) {
            this.currentEngine = engineResult.getValue();
            return engineResult;
        }
        // Try fallback engine if configured
        if (this.config.fallbackEngine &&
            this.config.fallbackEngine !== engineType) {
            console.warn(`Primary engine '${engineType}' failed, trying fallback '${this.config.fallbackEngine}'`);
            const fallbackResult = await this.queryEngineFactory.createQueryEngine(this.config.fallbackEngine);
            if (fallbackResult.isSuccess) {
                this.currentEngine = fallbackResult.getValue();
                return fallbackResult;
            }
        }
        // If auto-detect is enabled, try any available engine
        if (this.config.autoDetect) {
            console.warn(`Configured engines failed, auto-detecting available engine`);
            const autoResult = await this.queryEngineFactory.createQueryEngine();
            if (autoResult.isSuccess) {
                this.currentEngine = autoResult.getValue();
                return autoResult;
            }
        }
        return Result_1.Result.fail("No query engines available");
    }
    getCachedResult(query, context) {
        const cacheKey = this.createCacheKey(query, context);
        const cached = this.queryCache.get(cacheKey);
        if (!cached) {
            return null;
        }
        // Check if cache entry is expired
        const now = Date.now();
        const ageMinutes = (now - cached.timestamp) / (1000 * 60);
        if (ageMinutes > this.config.cacheTimeout) {
            this.queryCache.delete(cacheKey);
            return null;
        }
        return cached.result;
    }
    cacheResult(query, context, result) {
        // Ensure cache doesn't grow too large
        if (this.queryCache.size >= this.config.maxCacheSize) {
            // Remove oldest entries (simple LRU approximation)
            const oldestKey = this.queryCache.keys().next().value;
            this.queryCache.delete(oldestKey);
        }
        const cacheKey = this.createCacheKey(query, context);
        this.queryCache.set(cacheKey, {
            result,
            timestamp: Date.now(),
        });
    }
    createCacheKey(query, context) {
        const contextStr = context ? JSON.stringify(context) : "";
        return `${query}|${contextStr}`;
    }
}
exports.QueryEngineService = QueryEngineService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,