c4c301eb7804b2e1599e35772492e63e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TaskStatus_1 = require("../../../../src/domain/value-objects/TaskStatus");
describe('TaskStatus', () => {
    describe('create', () => {
        it('should create status with valid string', () => {
            const result = TaskStatus_1.TaskStatus.create('done');
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().toString()).toBe('done');
        });
        it('should create status with enum value', () => {
            const result = TaskStatus_1.TaskStatus.create(TaskStatus_1.TaskStatusType.IN_PROGRESS);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.IN_PROGRESS);
        });
        it('should handle underscore to dash conversion', () => {
            const result = TaskStatus_1.TaskStatus.create('in_progress');
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().toString()).toBe('in-progress');
        });
        it('should reject invalid status', () => {
            const result = TaskStatus_1.TaskStatus.create('invalid');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('TaskStatus must be one of: todo, in-progress, waiting, done, cancelled');
        });
    });
    describe('static factory methods', () => {
        it('should create all status types', () => {
            expect(TaskStatus_1.TaskStatus.todo().getStatus()).toBe(TaskStatus_1.TaskStatusType.TODO);
            expect(TaskStatus_1.TaskStatus.inProgress().getStatus()).toBe(TaskStatus_1.TaskStatusType.IN_PROGRESS);
            expect(TaskStatus_1.TaskStatus.waiting().getStatus()).toBe(TaskStatus_1.TaskStatusType.WAITING);
            expect(TaskStatus_1.TaskStatus.done().getStatus()).toBe(TaskStatus_1.TaskStatusType.DONE);
            expect(TaskStatus_1.TaskStatus.cancelled().getStatus()).toBe(TaskStatus_1.TaskStatusType.CANCELLED);
        });
    });
    describe('state queries', () => {
        it('should identify active statuses', () => {
            expect(TaskStatus_1.TaskStatus.todo().isActive()).toBe(true);
            expect(TaskStatus_1.TaskStatus.inProgress().isActive()).toBe(true);
            expect(TaskStatus_1.TaskStatus.waiting().isActive()).toBe(true);
            expect(TaskStatus_1.TaskStatus.done().isActive()).toBe(false);
            expect(TaskStatus_1.TaskStatus.cancelled().isActive()).toBe(false);
        });
        it('should identify completed status', () => {
            expect(TaskStatus_1.TaskStatus.done().isCompleted()).toBe(true);
            expect(TaskStatus_1.TaskStatus.todo().isCompleted()).toBe(false);
        });
        it('should identify cancelled status', () => {
            expect(TaskStatus_1.TaskStatus.cancelled().isCancelled()).toBe(true);
            expect(TaskStatus_1.TaskStatus.done().isCancelled()).toBe(false);
        });
        it('should identify in-progress status', () => {
            expect(TaskStatus_1.TaskStatus.inProgress().isInProgress()).toBe(true);
            expect(TaskStatus_1.TaskStatus.todo().isInProgress()).toBe(false);
        });
    });
    describe('state transitions', () => {
        it('should allow valid transitions from todo', () => {
            const todo = TaskStatus_1.TaskStatus.todo();
            expect(todo.canTransitionTo(TaskStatus_1.TaskStatus.inProgress())).toBe(true);
            expect(todo.canTransitionTo(TaskStatus_1.TaskStatus.waiting())).toBe(true);
            expect(todo.canTransitionTo(TaskStatus_1.TaskStatus.done())).toBe(true);
            expect(todo.canTransitionTo(TaskStatus_1.TaskStatus.cancelled())).toBe(true);
        });
        it('should allow reopening completed tasks', () => {
            const done = TaskStatus_1.TaskStatus.done();
            expect(done.canTransitionTo(TaskStatus_1.TaskStatus.todo())).toBe(true);
        });
        it('should allow reactivating cancelled tasks', () => {
            const cancelled = TaskStatus_1.TaskStatus.cancelled();
            expect(cancelled.canTransitionTo(TaskStatus_1.TaskStatus.todo())).toBe(true);
        });
    });
    describe('markdown checkbox conversion', () => {
        it('should convert to markdown checkboxes', () => {
            expect(TaskStatus_1.TaskStatus.todo().toMarkdownCheckbox()).toBe('- [ ]');
            expect(TaskStatus_1.TaskStatus.inProgress().toMarkdownCheckbox()).toBe('- [/]');
            expect(TaskStatus_1.TaskStatus.waiting().toMarkdownCheckbox()).toBe('- [-]');
            expect(TaskStatus_1.TaskStatus.done().toMarkdownCheckbox()).toBe('- [x]');
            expect(TaskStatus_1.TaskStatus.cancelled().toMarkdownCheckbox()).toBe('- [~]');
        });
        it('should parse from markdown checkboxes', () => {
            expect(TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [ ]').getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.TODO);
            expect(TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [/]').getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.IN_PROGRESS);
            expect(TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [-]').getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.WAITING);
            expect(TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [x]').getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.DONE);
            expect(TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [X]').getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.DONE);
            expect(TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [~]').getValue().getStatus()).toBe(TaskStatus_1.TaskStatusType.CANCELLED);
        });
        it('should reject invalid markdown checkbox', () => {
            const result = TaskStatus_1.TaskStatus.fromMarkdownCheckbox('- [invalid]');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('Invalid markdown checkbox format');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,