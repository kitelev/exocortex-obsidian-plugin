10bdd325cb13faf4ea95af48fdd657ee
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderContextMother = exports.LayoutMother = void 0;
const ClassLayout_1 = require("../../src/domain/entities/ClassLayout");
const AssetId_1 = require("../../src/domain/value-objects/AssetId");
const ClassName_1 = require("../../src/domain/value-objects/ClassName");
/**
 * Mother Object pattern for creating test ClassLayout instances
 * Follows Test Data Builder pattern for flexible test setup
 */
class LayoutMother {
    constructor() {
        this.id = "00000000-0000-4000-8000-000000000001";
        this.targetClass = "TestClass";
        this.blocks = [];
        this.isEnabled = true;
        this.priority = 0;
    }
    static create() {
        return new LayoutMother();
    }
    static simple() {
        return LayoutMother.create()
            .withId("00000000-0000-4000-8000-000000000002")
            .withTargetClass("SimpleClass")
            .withPropertiesBlock()
            .build();
    }
    static complex() {
        return LayoutMother.create()
            .withId("00000000-0000-4000-8000-000000000003")
            .withTargetClass("ComplexClass")
            .withPropertiesBlock()
            .withBacklinksBlock()
            .withChildrenEffortsBlock()
            .withCustomBlock()
            .withPriority(10)
            .build();
    }
    static empty() {
        return LayoutMother.create()
            .withId("00000000-0000-4000-8000-000000000004")
            .withTargetClass("EmptyClass")
            .build();
    }
    static disabled() {
        return LayoutMother.create()
            .withId("00000000-0000-4000-8000-000000000005")
            .withTargetClass("DisabledClass")
            .disabled()
            .build();
    }
    static withCollapsibleBlocks() {
        return LayoutMother.create()
            .withId("00000000-0000-4000-8000-000000000006")
            .withTargetClass("CollapsibleClass")
            .withCollapsibleBlock("collapsible-1", "properties", "Collapsible Properties")
            .withCollapsibleBlock("collapsible-2", "backlinks", "Collapsible Backlinks", true)
            .build();
    }
    // Builder methods
    withId(id) {
        this.id = id;
        return this;
    }
    withTargetClass(targetClass) {
        this.targetClass = targetClass;
        return this;
    }
    withPriority(priority) {
        this.priority = priority;
        return this;
    }
    enabled() {
        this.isEnabled = true;
        return this;
    }
    disabled() {
        this.isEnabled = false;
        return this;
    }
    withBlock(block) {
        this.blocks.push(block);
        return this;
    }
    withPropertiesBlock(id = "properties-block", title = "Properties") {
        return this.withBlock({
            id,
            type: "properties",
            title,
            order: this.blocks.length,
            config: { type: "properties" },
            isVisible: true,
        });
    }
    withBacklinksBlock(id = "backlinks-block", title = "Backlinks") {
        return this.withBlock({
            id,
            type: "backlinks",
            title,
            order: this.blocks.length,
            config: { type: "backlinks" },
            isVisible: true,
        });
    }
    withChildrenEffortsBlock(id = "children-efforts-block", title = "Children Efforts") {
        return this.withBlock({
            id,
            type: "children-efforts",
            title,
            order: this.blocks.length,
            config: { type: "children-efforts" },
            isVisible: true,
        });
    }
    withQueryBlock(id = "query-block", title = "Query Results", query = "SELECT * WHERE { ?s ?p ?o }") {
        return this.withBlock({
            id,
            type: "query",
            title,
            order: this.blocks.length,
            config: { type: "query", query },
            isVisible: true,
        });
    }
    withCustomBlock(id = "custom-block", title = "Custom Block") {
        return this.withBlock({
            id,
            type: "custom",
            title,
            order: this.blocks.length,
            config: { type: "custom", templatePath: "templates/custom.md" },
            isVisible: true,
        });
    }
    withButtonsBlock(id = "buttons-block", title = "Actions") {
        return this.withBlock({
            id,
            type: "buttons",
            title,
            order: this.blocks.length,
            config: {
                type: "buttons",
                buttons: [
                    { id: "btn-1", label: "Action 1", commandType: "test-command" },
                ],
            },
            isVisible: true,
        });
    }
    withHiddenBlock(id = "hidden-block", type = "properties") {
        return this.withBlock({
            id,
            type,
            title: "Hidden Block",
            order: this.blocks.length,
            config: { type },
            isVisible: false,
        });
    }
    withCollapsibleBlock(id, type, title, isCollapsed = false) {
        return this.withBlock({
            id,
            type,
            title,
            order: this.blocks.length,
            config: { type },
            isVisible: true,
            isCollapsible: true,
            isCollapsed,
        });
    }
    build() {
        const assetIdResult = AssetId_1.AssetId.create(this.id);
        const classNameResult = ClassName_1.ClassName.create(this.targetClass);
        if (assetIdResult.isFailure) {
            throw new Error(`Invalid asset ID: ${assetIdResult.error}`);
        }
        if (classNameResult.isFailure) {
            throw new Error(`Invalid class name: ${classNameResult.error}`);
        }
        const layoutResult = ClassLayout_1.ClassLayout.create({
            id: assetIdResult.getValue(),
            targetClass: classNameResult.getValue(),
            blocks: this.blocks,
            isEnabled: this.isEnabled,
            priority: this.priority,
        });
        if (layoutResult.isFailure) {
            throw new Error(`Failed to create layout: ${layoutResult.error}`);
        }
        return layoutResult.getValue();
    }
}
exports.LayoutMother = LayoutMother;
/**
 * Mother Object for creating test RenderContext instances
 */
class RenderContextMother {
    constructor() {
        this.containerId = "test-container";
        this.assetPath = "/test/path.md";
        this.metadata = {};
        this.frontmatter = {};
    }
    static create() {
        return new RenderContextMother();
    }
    static simple() {
        return RenderContextMother.create().build();
    }
    static withFrontmatter(frontmatter) {
        return RenderContextMother.create().withFrontmatter(frontmatter).build();
    }
    static forAsset(assetPath) {
        return RenderContextMother.create().withAssetPath(assetPath).build();
    }
    withContainerId(containerId) {
        this.containerId = containerId;
        return this;
    }
    withAssetPath(assetPath) {
        this.assetPath = assetPath;
        return this;
    }
    withMetadata(metadata) {
        this.metadata = metadata;
        return this;
    }
    withFrontmatter(frontmatter) {
        this.frontmatter = frontmatter;
        return this;
    }
    build() {
        return {
            containerId: this.containerId,
            assetPath: this.assetPath,
            metadata: { ...this.metadata, frontmatter: this.frontmatter },
            frontmatter: this.frontmatter,
        };
    }
}
exports.RenderContextMother = RenderContextMother;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,