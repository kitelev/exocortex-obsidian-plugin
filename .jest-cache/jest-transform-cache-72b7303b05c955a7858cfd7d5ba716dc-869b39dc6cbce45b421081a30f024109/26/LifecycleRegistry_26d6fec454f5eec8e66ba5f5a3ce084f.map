{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/LifecycleRegistry.ts","mappings":";;;AAGA;;;GAGG;AACH,MAAa,iBAAiB;IAG5B,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAF1B,aAAQ,GAAwB,EAAE,CAAC;IAEN,CAAC;IAE/C;;OAEG;IACH,eAAe,CAAC,OAA0B;QACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa;QACjB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,EAAE;YACnC,IAAI;gBACF,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,wBAAwB,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;aAC/D;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CACX,gCAAgC,OAAO,CAAC,YAAY,EAAE,GAAG,EACzD,KAAK,CACN,CAAC;aACH;SACF;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,2BAA2B;QAC3B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAClD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI;gBACF,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;gBACxB,OAAO,CAAC,GAAG,CAAC,uBAAuB,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;aAC9D;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CACX,6BAA6B,OAAO,CAAC,YAAY,EAAE,GAAG,EACtD,KAAK,CACN,CAAC;aACH;SACF;IACH,CAAC;IAED;;OAEG;IACH,UAAU,CACR,WAAsC;QAEtC,OAAO,CACJ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,YAAY,WAAW,CAAO;YACtE,IAAI,CACL,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;CACF;AAlED,8CAkEC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/LifecycleRegistry.ts"],"sourcesContent":["import { Plugin } from \"obsidian\";\nimport { ILifecycleManager } from \"../../application/ports/ILifecycleManager\";\n\n/**\n * Lifecycle Registry following Pure Fabrication Pattern (GRASP)\n * Single Responsibility: Coordinate all lifecycle managers\n */\nexport class LifecycleRegistry {\n  private readonly managers: ILifecycleManager[] = [];\n\n  constructor(private readonly plugin: Plugin) {}\n\n  /**\n   * Register a lifecycle manager\n   */\n  registerManager(manager: ILifecycleManager): void {\n    this.managers.push(manager);\n  }\n\n  /**\n   * Initialize all registered managers\n   */\n  async initializeAll(): Promise<void> {\n    for (const manager of this.managers) {\n      try {\n        await manager.initialize();\n        console.log(`Initialized manager: ${manager.getManagerId()}`);\n      } catch (error) {\n        console.error(\n          `Failed to initialize manager ${manager.getManagerId()}:`,\n          error,\n        );\n      }\n    }\n  }\n\n  /**\n   * Cleanup all registered managers\n   */\n  async cleanupAll(): Promise<void> {\n    // Cleanup in reverse order\n    for (let i = this.managers.length - 1; i >= 0; i--) {\n      const manager = this.managers[i];\n      try {\n        await manager.cleanup();\n        console.log(`Cleaned up manager: ${manager.getManagerId()}`);\n      } catch (error) {\n        console.error(\n          `Failed to cleanup manager ${manager.getManagerId()}:`,\n          error,\n        );\n      }\n    }\n  }\n\n  /**\n   * Get a specific manager by type\n   */\n  getManager<T extends ILifecycleManager>(\n    managerType: new (...args: any[]) => T,\n  ): T | null {\n    return (\n      (this.managers.find((manager) => manager instanceof managerType) as T) ||\n      null\n    );\n  }\n\n  /**\n   * Get all registered managers\n   */\n  getManagers(): readonly ILifecycleManager[] {\n    return this.managers;\n  }\n}\n"],"version":3}