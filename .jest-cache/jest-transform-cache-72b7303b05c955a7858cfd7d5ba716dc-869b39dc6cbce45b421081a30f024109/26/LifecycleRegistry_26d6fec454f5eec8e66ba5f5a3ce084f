16ca216f8b7aa0bf6ff4897a5c911262
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleRegistry = void 0;
/**
 * Lifecycle Registry following Pure Fabrication Pattern (GRASP)
 * Single Responsibility: Coordinate all lifecycle managers
 */
class LifecycleRegistry {
    constructor(plugin) {
        this.plugin = plugin;
        this.managers = [];
    }
    /**
     * Register a lifecycle manager
     */
    registerManager(manager) {
        this.managers.push(manager);
    }
    /**
     * Initialize all registered managers
     */
    async initializeAll() {
        for (const manager of this.managers) {
            try {
                await manager.initialize();
                console.log(`Initialized manager: ${manager.getManagerId()}`);
            }
            catch (error) {
                console.error(`Failed to initialize manager ${manager.getManagerId()}:`, error);
            }
        }
    }
    /**
     * Cleanup all registered managers
     */
    async cleanupAll() {
        // Cleanup in reverse order
        for (let i = this.managers.length - 1; i >= 0; i--) {
            const manager = this.managers[i];
            try {
                await manager.cleanup();
                console.log(`Cleaned up manager: ${manager.getManagerId()}`);
            }
            catch (error) {
                console.error(`Failed to cleanup manager ${manager.getManagerId()}:`, error);
            }
        }
    }
    /**
     * Get a specific manager by type
     */
    getManager(managerType) {
        return (this.managers.find((manager) => manager instanceof managerType) ||
            null);
    }
    /**
     * Get all registered managers
     */
    getManagers() {
        return this.managers;
    }
}
exports.LifecycleRegistry = LifecycleRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2luZnJhc3RydWN0dXJlL2xpZmVjeWNsZS9MaWZlY3ljbGVSZWdpc3RyeS50cyIsIm1hcHBpbmdzIjoiOzs7QUFHQTs7O0dBR0c7QUFDSCxNQUFhLGlCQUFpQjtJQUc1QixZQUE2QixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUYxQixhQUFRLEdBQXdCLEVBQUUsQ0FBQztJQUVOLENBQUM7SUFFL0M7O09BRUc7SUFDSCxlQUFlLENBQUMsT0FBMEI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLGFBQWE7UUFDakIsS0FBSyxNQUFNLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ25DLElBQUk7Z0JBQ0YsTUFBTSxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDL0Q7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLENBQUMsS0FBSyxDQUNYLGdDQUFnQyxPQUFPLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFDekQsS0FBSyxDQUNOLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCwyQkFBMkI7UUFDM0IsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUk7Z0JBQ0YsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDOUQ7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLENBQUMsS0FBSyxDQUNYLDZCQUE2QixPQUFPLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFDdEQsS0FBSyxDQUNOLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsVUFBVSxDQUNSLFdBQXNDO1FBRXRDLE9BQU8sQ0FDSixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxZQUFZLFdBQVcsQ0FBTztZQUN0RSxJQUFJLENBQ0wsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBbEVELDhDQWtFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvaW5mcmFzdHJ1Y3R1cmUvbGlmZWN5Y2xlL0xpZmVjeWNsZVJlZ2lzdHJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBsdWdpbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgSUxpZmVjeWNsZU1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vcG9ydHMvSUxpZmVjeWNsZU1hbmFnZXJcIjtcblxuLyoqXG4gKiBMaWZlY3ljbGUgUmVnaXN0cnkgZm9sbG93aW5nIFB1cmUgRmFicmljYXRpb24gUGF0dGVybiAoR1JBU1ApXG4gKiBTaW5nbGUgUmVzcG9uc2liaWxpdHk6IENvb3JkaW5hdGUgYWxsIGxpZmVjeWNsZSBtYW5hZ2Vyc1xuICovXG5leHBvcnQgY2xhc3MgTGlmZWN5Y2xlUmVnaXN0cnkge1xuICBwcml2YXRlIHJlYWRvbmx5IG1hbmFnZXJzOiBJTGlmZWN5Y2xlTWFuYWdlcltdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFBsdWdpbikge31cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBsaWZlY3ljbGUgbWFuYWdlclxuICAgKi9cbiAgcmVnaXN0ZXJNYW5hZ2VyKG1hbmFnZXI6IElMaWZlY3ljbGVNYW5hZ2VyKTogdm9pZCB7XG4gICAgdGhpcy5tYW5hZ2Vycy5wdXNoKG1hbmFnZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYWxsIHJlZ2lzdGVyZWQgbWFuYWdlcnNcbiAgICovXG4gIGFzeW5jIGluaXRpYWxpemVBbGwoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgZm9yIChjb25zdCBtYW5hZ2VyIG9mIHRoaXMubWFuYWdlcnMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IG1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgSW5pdGlhbGl6ZWQgbWFuYWdlcjogJHttYW5hZ2VyLmdldE1hbmFnZXJJZCgpfWApO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBgRmFpbGVkIHRvIGluaXRpYWxpemUgbWFuYWdlciAke21hbmFnZXIuZ2V0TWFuYWdlcklkKCl9OmAsXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFudXAgYWxsIHJlZ2lzdGVyZWQgbWFuYWdlcnNcbiAgICovXG4gIGFzeW5jIGNsZWFudXBBbGwoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQ2xlYW51cCBpbiByZXZlcnNlIG9yZGVyXG4gICAgZm9yIChsZXQgaSA9IHRoaXMubWFuYWdlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IG1hbmFnZXIgPSB0aGlzLm1hbmFnZXJzW2ldO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbWFuYWdlci5jbGVhbnVwKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBDbGVhbmVkIHVwIG1hbmFnZXI6ICR7bWFuYWdlci5nZXRNYW5hZ2VySWQoKX1gKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byBjbGVhbnVwIG1hbmFnZXIgJHttYW5hZ2VyLmdldE1hbmFnZXJJZCgpfTpgLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzcGVjaWZpYyBtYW5hZ2VyIGJ5IHR5cGVcbiAgICovXG4gIGdldE1hbmFnZXI8VCBleHRlbmRzIElMaWZlY3ljbGVNYW5hZ2VyPihcbiAgICBtYW5hZ2VyVHlwZTogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVCxcbiAgKTogVCB8IG51bGwge1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5tYW5hZ2Vycy5maW5kKChtYW5hZ2VyKSA9PiBtYW5hZ2VyIGluc3RhbmNlb2YgbWFuYWdlclR5cGUpIGFzIFQpIHx8XG4gICAgICBudWxsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHJlZ2lzdGVyZWQgbWFuYWdlcnNcbiAgICovXG4gIGdldE1hbmFnZXJzKCk6IHJlYWRvbmx5IElMaWZlY3ljbGVNYW5hZ2VyW10ge1xuICAgIHJldHVybiB0aGlzLm1hbmFnZXJzO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=