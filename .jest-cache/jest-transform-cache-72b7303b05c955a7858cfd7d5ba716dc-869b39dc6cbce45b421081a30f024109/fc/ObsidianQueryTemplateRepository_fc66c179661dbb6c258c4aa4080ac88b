62d48c43578cb6185854469ee0c09b36
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianQueryTemplateRepository = void 0;
const tslib_1 = require("tslib");
const QueryTemplate_1 = require("../../domain/visual/QueryTemplate");
const BuiltInQueryTemplates_1 = require("./BuiltInQueryTemplates");
class ObsidianQueryTemplateRepository {
    constructor(app, templatesPath = '.exocortex/templates', usageDataPath = '.exocortex/template-usage.json') {
        this.app = app;
        this.templateCache = new Map();
        this.usageData = new Map();
        this.cacheLoaded = false;
        this.templatesPath = templatesPath;
        this.usageDataPath = usageDataPath;
    }
    findAll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            const templates = Array.from(this.templateCache.values());
            // Sort by usage frequency and then by name
            return templates.sort((a, b) => {
                var _a, _b;
                const usageA = ((_a = this.usageData.get(a.getId())) === null || _a === void 0 ? void 0 : _a.usageCount) || 0;
                const usageB = ((_b = this.usageData.get(b.getId())) === null || _b === void 0 ? void 0 : _b.usageCount) || 0;
                if (usageA !== usageB) {
                    return usageB - usageA;
                }
                return a.getMetadata().name.localeCompare(b.getMetadata().name);
            });
        });
    }
    findByCriteria(criteria) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            let templates = Array.from(this.templateCache.values());
            if (criteria.category) {
                templates = templates.filter(t => t.getMetadata().category === criteria.category);
            }
            if (criteria.difficulty) {
                templates = templates.filter(t => t.getMetadata().difficulty === criteria.difficulty);
            }
            if (criteria.nameContains) {
                const searchTerm = criteria.nameContains.toLowerCase();
                templates = templates.filter(t => t.getMetadata().name.toLowerCase().includes(searchTerm) ||
                    t.getMetadata().description.toLowerCase().includes(searchTerm));
            }
            if (criteria.tags && criteria.tags.length > 0) {
                templates = templates.filter(t => {
                    const templateTags = t.getMetadata().tags;
                    return criteria.tags.some(tag => templateTags.includes(tag));
                });
            }
            if (criteria.includeBuiltIn !== undefined) {
                templates = templates.filter(t => t.isBuiltInTemplate() === criteria.includeBuiltIn);
            }
            if (criteria.includeCustom !== undefined) {
                templates = templates.filter(t => !t.isBuiltInTemplate() === criteria.includeCustom);
            }
            return templates;
        });
    }
    findById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            return this.templateCache.get(id);
        });
    }
    findByCategory(category) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.findByCriteria({ category });
        });
    }
    findByTags(tags) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.findByCriteria({ tags });
        });
    }
    save(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot modify built-in templates');
            }
            const exists = yield this.exists(template.getId());
            if (exists) {
                return this.update(template);
            }
            else {
                return this.create(template);
            }
        });
    }
    create(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot create built-in templates through repository');
            }
            const exists = yield this.exists(template.getId());
            if (exists) {
                throw new Error(`Template with ID ${template.getId()} already exists`);
            }
            yield this.ensureTemplatesDirectoryExists();
            const fileName = `${this.sanitizeFileName(template.getMetadata().name)}-${template.getId()}.json`;
            const filePath = `${this.templatesPath}/${fileName}`;
            const data = {
                id: template.getId(),
                metadata: template.getMetadata(),
                layout: template.getLayout(),
                parameters: template.getParameters(),
                sparqlTemplate: template.getSparqlTemplate(),
                isBuiltIn: template.isBuiltInTemplate()
            };
            yield this.app.vault.create(filePath, JSON.stringify(data, null, 2));
            this.templateCache.set(template.getId(), template);
            return template;
        });
    }
    update(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot modify built-in templates');
            }
            const exists = yield this.exists(template.getId());
            if (!exists) {
                throw new Error(`Template with ID ${template.getId()} not found`);
            }
            yield this.ensureTemplatesDirectoryExists();
            const fileName = yield this.findTemplateFile(template.getId());
            if (!fileName) {
                throw new Error(`Template file not found for ID ${template.getId()}`);
            }
            const filePath = `${this.templatesPath}/${fileName}`;
            const file = this.app.vault.getAbstractFileByPath(filePath);
            const data = {
                id: template.getId(),
                metadata: template.getMetadata(),
                layout: template.getLayout(),
                parameters: template.getParameters(),
                sparqlTemplate: template.getSparqlTemplate(),
                isBuiltIn: template.isBuiltInTemplate()
            };
            yield this.app.vault.modify(file, JSON.stringify(data, null, 2));
            this.templateCache.set(template.getId(), template);
            return template;
        });
    }
    delete(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const template = yield this.findById(id);
            if (!template) {
                return false;
            }
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot delete built-in templates');
            }
            const fileName = yield this.findTemplateFile(id);
            if (!fileName) {
                return false;
            }
            const filePath = `${this.templatesPath}/${fileName}`;
            const file = this.app.vault.getAbstractFileByPath(filePath);
            if (file) {
                yield this.app.vault.delete(file);
                this.templateCache.delete(id);
                this.usageData.delete(id);
                yield this.saveUsageData();
                return true;
            }
            return false;
        });
    }
    exists(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            return this.templateCache.has(id);
        });
    }
    importTemplates(templatesData) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const imported = [];
            for (const templateData of templatesData) {
                try {
                    const data = templateData;
                    // Don't import if already exists and is built-in
                    const existing = this.templateCache.get(data.id);
                    if (existing && existing.isBuiltInTemplate()) {
                        continue;
                    }
                    const template = this.createTemplateFromData(data);
                    yield this.save(template);
                    imported.push(template);
                }
                catch (error) {
                    console.warn('Failed to import template:', error);
                }
            }
            return imported;
        });
    }
    exportTemplates(templateIds) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            let templates;
            if (templateIds) {
                templates = templateIds
                    .map(id => this.templateCache.get(id))
                    .filter(t => t !== undefined);
            }
            else {
                templates = Array.from(this.templateCache.values());
            }
            return templates.map(template => template.toJSON());
        });
    }
    getBuiltInTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.findByCriteria({ includeBuiltIn: true, includeCustom: false });
        });
    }
    getCustomTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.findByCriteria({ includeBuiltIn: false, includeCustom: true });
        });
    }
    getRecentlyUsed(limit = 10) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            const templateUsage = Array.from(this.usageData.entries())
                .sort((a, b) => b[1].lastUsed.getTime() - a[1].lastUsed.getTime())
                .slice(0, limit);
            return templateUsage
                .map(([id]) => this.templateCache.get(id))
                .filter(t => t !== undefined);
        });
    }
    recordUsage(templateId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            const existing = this.usageData.get(templateId);
            if (existing) {
                existing.usageCount++;
                existing.lastUsed = new Date();
            }
            else {
                this.usageData.set(templateId, {
                    templateId,
                    usageCount: 1,
                    lastUsed: new Date(),
                    parametersFilled: []
                });
            }
            yield this.saveUsageData();
        });
    }
    getUsageStats(templateId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureCacheLoaded();
            const usage = this.usageData.get(templateId);
            if (!usage) {
                return { usageCount: 0 };
            }
            const averageParametersFilled = usage.parametersFilled.length > 0
                ? usage.parametersFilled.reduce((sum, count) => sum + count, 0) / usage.parametersFilled.length
                : undefined;
            return {
                usageCount: usage.usageCount,
                lastUsed: usage.lastUsed,
                averageParametersFilled
            };
        });
    }
    refresh() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.templateCache.clear();
            this.usageData.clear();
            this.cacheLoaded = false;
            yield this.loadBuiltInTemplates();
            yield this.loadCustomTemplates();
            yield this.loadUsageData();
            this.cacheLoaded = true;
        });
    }
    ensureCacheLoaded() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.cacheLoaded) {
                yield this.refresh();
            }
        });
    }
    ensureTemplatesDirectoryExists() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const templatesDir = this.app.vault.getAbstractFileByPath(this.templatesPath);
            if (!templatesDir) {
                yield this.app.vault.createFolder(this.templatesPath);
            }
        });
    }
    loadBuiltInTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const builtInTemplates = BuiltInQueryTemplates_1.BuiltInQueryTemplates.getAll();
            builtInTemplates.forEach(template => {
                this.templateCache.set(template.getId(), template);
            });
        });
    }
    loadCustomTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureTemplatesDirectoryExists();
            const templatesDir = this.app.vault.getAbstractFileByPath(this.templatesPath);
            if (!templatesDir || !templatesDir.children) {
                return;
            }
            const files = templatesDir.children.filter((file) => file.extension === 'json' && file.name.endsWith('.json'));
            for (const file of files) {
                try {
                    const content = yield this.app.vault.read(file);
                    const data = JSON.parse(content);
                    const template = this.createTemplateFromData(data);
                    this.templateCache.set(template.getId(), template);
                }
                catch (error) {
                    console.warn(`Failed to load template from ${file.path}:`, error);
                }
            }
        });
    }
    loadUsageData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(this.usageDataPath);
                if (file) {
                    const content = yield this.app.vault.read(file);
                    const data = JSON.parse(content);
                    this.usageData.clear();
                    data.forEach(usage => {
                        usage.lastUsed = new Date(usage.lastUsed);
                        this.usageData.set(usage.templateId, usage);
                    });
                }
            }
            catch (error) {
                // Usage data file doesn't exist or is corrupted - start fresh
                this.usageData.clear();
            }
        });
    }
    saveUsageData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const data = Array.from(this.usageData.values());
            const content = JSON.stringify(data, null, 2);
            const file = this.app.vault.getAbstractFileByPath(this.usageDataPath);
            if (file) {
                yield this.app.vault.modify(file, content);
            }
            else {
                yield this.app.vault.create(this.usageDataPath, content);
            }
        });
    }
    findTemplateFile(templateId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.ensureTemplatesDirectoryExists();
            const templatesDir = this.app.vault.getAbstractFileByPath(this.templatesPath);
            if (!templatesDir || !templatesDir.children) {
                return null;
            }
            const files = templatesDir.children.filter((file) => file.extension === 'json' && file.name.includes(templateId));
            return files.length > 0 ? files[0].name : null;
        });
    }
    createTemplateFromData(data) {
        return new QueryTemplate_1.QueryTemplate({
            id: data.id,
            metadata: data.metadata,
            layout: data.layout,
            parameters: data.parameters,
            sparqlTemplate: data.sparqlTemplate || 'SELECT * WHERE { ?s ?p ?o }',
            isBuiltIn: data.isBuiltIn
        });
    }
    sanitizeFileName(name) {
        return name
            .toLowerCase()
            .replace(/[^\w\s-]/g, '')
            .replace(/\s+/g, '-')
            .substring(0, 50);
    }
}
exports.ObsidianQueryTemplateRepository = ObsidianQueryTemplateRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,