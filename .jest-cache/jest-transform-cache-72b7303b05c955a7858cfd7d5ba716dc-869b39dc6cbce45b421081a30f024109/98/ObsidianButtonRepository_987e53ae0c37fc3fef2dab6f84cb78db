e618e55e6da008ad7c5cef7a9140e3eb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianButtonRepository = void 0;
const obsidian_1 = require("obsidian");
const UIButton_1 = require("../../domain/entities/UIButton");
const ButtonCommand_1 = require("../../domain/entities/ButtonCommand");
const AssetId_1 = require("../../domain/value-objects/AssetId");
const Result_1 = require("../../domain/core/Result");
/**
 * Obsidian implementation of Button repository
 */
class ObsidianButtonRepository {
    constructor(app) {
        this.app = app;
    }
    async findButtonById(id) {
        try {
            const file = this.app.vault.getAbstractFileByPath(id.toString() + ".md");
            if (!file || !(file instanceof obsidian_1.TFile)) {
                return Result_1.Result.ok(null);
            }
            return this.buildButtonFromFile(file);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to find button: ${error.message}`);
        }
    }
    async findCommandById(id) {
        try {
            const file = this.app.vault.getAbstractFileByPath(id.toString() + ".md");
            if (!file || !(file instanceof obsidian_1.TFile)) {
                return Result_1.Result.ok(null);
            }
            return this.buildCommandFromFile(file);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to find command: ${error.message}`);
        }
    }
    async findAllButtons() {
        try {
            const buttons = [];
            const files = this.app.vault.getMarkdownFiles();
            for (const file of files) {
                const metadata = this.app.metadataCache.getFileCache(file);
                if (!metadata?.frontmatter)
                    continue;
                const instanceClass = metadata.frontmatter["exo__Instance_class"];
                if (instanceClass !== "[[ui__Button]]")
                    continue;
                const buttonResult = await this.buildButtonFromFile(file);
                if (buttonResult.isSuccess && buttonResult.getValue()) {
                    buttons.push(buttonResult.getValue());
                }
            }
            return Result_1.Result.ok(buttons);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to find buttons: ${error.message}`);
        }
    }
    async findAllCommands() {
        try {
            const commands = [];
            const files = this.app.vault.getMarkdownFiles();
            for (const file of files) {
                const metadata = this.app.metadataCache.getFileCache(file);
                if (!metadata?.frontmatter)
                    continue;
                const instanceClass = metadata.frontmatter["exo__Instance_class"];
                if (instanceClass !== "[[ui__ButtonCommand]]")
                    continue;
                const commandResult = await this.buildCommandFromFile(file);
                if (commandResult.isSuccess && commandResult.getValue()) {
                    commands.push(commandResult.getValue());
                }
            }
            return Result_1.Result.ok(commands);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to find commands: ${error.message}`);
        }
    }
    async findButtonsByCommandId(commandId) {
        try {
            const buttons = [];
            const allButtonsResult = await this.findAllButtons();
            if (allButtonsResult.isFailure) {
                return Result_1.Result.fail(allButtonsResult.error);
            }
            const allButtons = allButtonsResult.getValue();
            for (const button of allButtons) {
                if (button.commandId.equals(commandId)) {
                    buttons.push(button);
                }
            }
            return Result_1.Result.ok(buttons);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to find buttons by command: ${error.message}`);
        }
    }
    async saveButton(button) {
        try {
            const filePath = `${button.id.toString()}.md`;
            const content = this.serializeButton(button);
            const existingFile = this.app.vault.getAbstractFileByPath(filePath);
            if (existingFile instanceof obsidian_1.TFile) {
                await this.app.vault.modify(existingFile, content);
            }
            else {
                await this.app.vault.create(filePath, content);
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to save button: ${error.message}`);
        }
    }
    async saveCommand(command) {
        try {
            const filePath = `${command.id.toString()}.md`;
            const content = this.serializeCommand(command);
            const existingFile = this.app.vault.getAbstractFileByPath(filePath);
            if (existingFile instanceof obsidian_1.TFile) {
                await this.app.vault.modify(existingFile, content);
            }
            else {
                await this.app.vault.create(filePath, content);
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to save command: ${error.message}`);
        }
    }
    async deleteButton(id) {
        try {
            const file = this.app.vault.getAbstractFileByPath(id.toString() + ".md");
            if (file instanceof obsidian_1.TFile) {
                await this.app.vault.delete(file);
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to delete button: ${error.message}`);
        }
    }
    async deleteCommand(id) {
        try {
            const file = this.app.vault.getAbstractFileByPath(id.toString() + ".md");
            if (file instanceof obsidian_1.TFile) {
                await this.app.vault.delete(file);
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to delete command: ${error.message}`);
        }
    }
    async buildButtonFromFile(file) {
        try {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter) {
                return Result_1.Result.ok(null);
            }
            const fm = metadata.frontmatter;
            const idResult = AssetId_1.AssetId.create(file.basename);
            const commandIdResult = AssetId_1.AssetId.create(this.cleanAssetReference(fm["ui__Button_command"] || ""));
            if (idResult.isFailure || commandIdResult.isFailure) {
                return Result_1.Result.ok(null);
            }
            const buttonResult = UIButton_1.UIButton.create({
                id: idResult.getValue(),
                label: fm["ui__Button_label"] || file.basename,
                commandId: commandIdResult.getValue(),
                order: fm["ui__Button_order"] || 0,
                isEnabled: fm["ui__Button_enabled"] !== false,
                tooltip: fm["ui__Button_tooltip"],
            });
            if (buttonResult.isFailure) {
                return Result_1.Result.fail(buttonResult.error);
            }
            return Result_1.Result.ok(buttonResult.getValue());
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to build button: ${error.message}`);
        }
    }
    async buildCommandFromFile(file) {
        try {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter) {
                return Result_1.Result.ok(null);
            }
            const fm = metadata.frontmatter;
            const idResult = AssetId_1.AssetId.create(file.basename);
            if (idResult.isFailure) {
                return Result_1.Result.ok(null);
            }
            // Parse command type
            const typeString = fm["ui__Command_type"] || "CUSTOM";
            const type = this.parseCommandType(typeString);
            // Parse parameters
            const parameters = this.parseParameters(fm["ui__Command_parameters"]);
            const commandResult = ButtonCommand_1.ButtonCommand.create({
                id: idResult.getValue(),
                type: type,
                name: fm["ui__Command_name"] || file.basename,
                description: fm["ui__Command_description"],
                requiresInput: fm["ui__Command_requiresInput"] === true,
                parameters: parameters,
                targetClass: this.cleanAssetReference(fm["ui__Command_targetClass"]),
                template: fm["ui__Command_template"],
                script: fm["ui__Command_script"],
            });
            if (commandResult.isFailure) {
                return Result_1.Result.fail(commandResult.error);
            }
            return Result_1.Result.ok(commandResult.getValue());
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to build command: ${error.message}`);
        }
    }
    parseCommandType(typeString) {
        const upperType = typeString.toUpperCase();
        return (ButtonCommand_1.CommandType[upperType] || ButtonCommand_1.CommandType.CUSTOM);
    }
    parseParameters(paramsData) {
        if (!paramsData)
            return [];
        const params = [];
        const paramArray = this.ensureArray(paramsData);
        for (const param of paramArray) {
            if (typeof param === "object" && param.name) {
                params.push({
                    name: param.name,
                    type: param.type || "string",
                    required: param.required === true,
                    defaultValue: param.defaultValue,
                    label: param.label,
                    description: param.description,
                    validation: param.validation,
                });
            }
        }
        return params;
    }
    serializeButton(button) {
        const frontmatter = {
            exo__Instance_class: "[[ui__Button]]",
            ui__Button_label: button.label,
            ui__Button_command: `[[${button.commandId.toString()}]]`,
            ui__Button_order: button.order,
            ui__Button_enabled: button.isEnabled,
            ui__Button_tooltip: button.tooltip,
        };
        const yamlContent = this.toYaml(frontmatter);
        return `---\n${yamlContent}---\n\n# Button: ${button.label}\n`;
    }
    serializeCommand(command) {
        const frontmatter = {
            exo__Instance_class: "[[ui__ButtonCommand]]",
            ui__Command_type: command.type,
            ui__Command_name: command.name,
            ui__Command_description: command.description,
            ui__Command_requiresInput: command.requiresInput,
            ui__Command_parameters: command.parameters,
            ui__Command_targetClass: command.targetClass
                ? `[[${command.targetClass}]]`
                : null,
            ui__Command_template: command.template,
            ui__Command_script: command.script,
        };
        const yamlContent = this.toYaml(frontmatter);
        return `---\n${yamlContent}---\n\n# Command: ${command.name}\n`;
    }
    cleanAssetReference(ref) {
        if (typeof ref !== "string")
            return "";
        return ref.replace(/\[\[|\]\]/g, "").trim();
    }
    ensureArray(value) {
        if (Array.isArray(value))
            return value;
        if (value)
            return [value];
        return [];
    }
    toYaml(obj) {
        // Simple YAML serialization
        return (Object.entries(obj)
            .filter(([_, value]) => value !== null && value !== undefined)
            .map(([key, value]) => {
            if (Array.isArray(value)) {
                if (value.length === 0)
                    return `${key}: []`;
                return `${key}:\n${value.map((v) => `  - ${JSON.stringify(v)}`).join("\n")}`;
            }
            if (typeof value === "object") {
                return `${key}: ${JSON.stringify(value)}`;
            }
            return `${key}: ${value}`;
        })
            .join("\n") + "\n");
    }
}
exports.ObsidianButtonRepository = ObsidianButtonRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,