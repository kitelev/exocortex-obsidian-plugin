{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/RefactoredLayoutRenderer.ts","mappings":";;;AACA,qDAAkD;AAQlD;;;;;;;;GAQG;AACH,MAAa,wBAAwB;IACnC,YAA6B,iBAAqC;QAArC,sBAAiB,GAAjB,iBAAiB,CAAoB;IAAG,CAAC;IAEtE,KAAK,CAAC,YAAY,CAChB,MAAmB,EACnB,OAAsB;QAEtB,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,eAAM,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YACpC,OAAO,eAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;SACzE;QAED,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACvE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,eAAM,CAAC,IAAI,CAAC,4BAA4B,KAAK,EAAE,CAAC,CAAC;SACzD;IACH,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,OAAsB;QAEtB,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YACpC,OAAO,eAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;SACzE;QAED,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;SACtE;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,eAAM,CAAC,IAAI,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;SACjE;IACH,CAAC;CACF;AAnCD,4DAmCC;AAED;;;GAGG;AACH,MAAa,qBAAqB;IAChC,YACmB,cAA+B,EAC/B,mBAA2B,EAAE;QAD7B,mBAAc,GAAd,cAAc,CAAiB;QAC/B,qBAAgB,GAAhB,gBAAgB,CAAa;IAC7C,CAAC;IAEJ,KAAK,CAAC,iBAAiB,CACrB,WAAmB,EACnB,MAA0B,EAC1B,WAAgC,EAAE,EAClC,SAAkB;QAElB,MAAM,OAAO,GAAkB;YAC7B,WAAW;YACX,SAAS,EAAE,SAAS,IAAI,IAAI,CAAC,gBAAgB;YAC7C,QAAQ;YACR,WAAW,EAAE,QAAQ,CAAC,WAAW,IAAI,EAAE;SACxC,CAAC;QAEF,IAAI,MAAM,EAAE;YACV,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SAChE;aAAM;YACL,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;SAC/D;IACH,CAAC;CACF;AAzBD,sDAyBC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/RefactoredLayoutRenderer.ts"],"sourcesContent":["import { ClassLayout } from \"../../domain/entities/ClassLayout\";\nimport { Result } from \"../../domain/core/Result\";\nimport {\n  ILayoutRenderer,\n  RenderContext,\n  LayoutRenderResult,\n} from \"../../domain/ports/ILayoutRenderer\";\nimport { ILayoutCoordinator } from \"../../domain/ports/ILayoutCoordinator\";\n\n/**\n * Refactored Layout Renderer implementing SOLID principles\n *\n * SRP: Single responsibility - delegates to coordinator\n * OCP: Open for extension through strategy pattern in coordinator\n * LSP: Proper interface implementation\n * ISP: Segregated interface (removed block rendering)\n * DIP: Depends on abstractions (ILayoutCoordinator)\n */\nexport class RefactoredLayoutRenderer implements ILayoutRenderer {\n  constructor(private readonly layoutCoordinator: ILayoutCoordinator) {}\n\n  async renderLayout(\n    layout: ClassLayout,\n    context: RenderContext,\n  ): Promise<Result<LayoutRenderResult>> {\n    if (!layout) {\n      return Result.fail(\"Layout cannot be null or undefined\");\n    }\n\n    if (!context || !context.containerId) {\n      return Result.fail(\"Valid render context with containerId is required\");\n    }\n\n    try {\n      return await this.layoutCoordinator.coordinateLayout(layout, context);\n    } catch (error) {\n      return Result.fail(`Layout rendering failed: ${error}`);\n    }\n  }\n\n  async renderDefaultLayout(\n    context: RenderContext,\n  ): Promise<Result<LayoutRenderResult>> {\n    if (!context || !context.containerId) {\n      return Result.fail(\"Valid render context with containerId is required\");\n    }\n\n    try {\n      return await this.layoutCoordinator.coordinateDefaultLayout(context);\n    } catch (error) {\n      return Result.fail(`Default layout rendering failed: ${error}`);\n    }\n  }\n}\n\n/**\n * Facade for simplified external access\n * Implements Facade pattern for KISS principle compliance\n */\nexport class LayoutRenderingFacade {\n  constructor(\n    private readonly layoutRenderer: ILayoutRenderer,\n    private readonly defaultAssetPath: string = \"\",\n  ) {}\n\n  async renderToContainer(\n    containerId: string,\n    layout: ClassLayout | null,\n    metadata: Record<string, any> = {},\n    assetPath?: string,\n  ): Promise<Result<LayoutRenderResult>> {\n    const context: RenderContext = {\n      containerId,\n      assetPath: assetPath || this.defaultAssetPath,\n      metadata,\n      frontmatter: metadata.frontmatter || {},\n    };\n\n    if (layout) {\n      return await this.layoutRenderer.renderLayout(layout, context);\n    } else {\n      return await this.layoutRenderer.renderDefaultLayout(context);\n    }\n  }\n}\n"],"version":3}