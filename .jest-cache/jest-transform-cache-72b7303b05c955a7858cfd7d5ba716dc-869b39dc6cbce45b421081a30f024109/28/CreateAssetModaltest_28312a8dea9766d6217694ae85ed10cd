6f79ecc349d27d7dd66adc2b4c17a91f
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock DIContainer
jest.mock("../../../../src/infrastructure/container/DIContainer");
// Mock Notice
jest.mock("obsidian", () => {
    const actual = jest.requireActual("obsidian");
    return {
        ...actual,
        Notice: jest.fn(),
        Setting: jest.fn().mockImplementation(() => ({
            setName: jest.fn().mockReturnThis(),
            setDesc: jest.fn().mockReturnThis(),
            addText: jest.fn().mockReturnThis(),
            addDropdown: jest.fn().mockReturnThis(),
            addToggle: jest.fn().mockReturnThis(),
            addTextArea: jest.fn().mockReturnThis(),
            addButton: jest.fn().mockReturnThis(),
        })),
    };
});
const obsidian_1 = require("obsidian");
const CreateAssetModal_1 = require("../../../../src/presentation/modals/CreateAssetModal");
const DIContainer_1 = require("../../../../src/infrastructure/container/DIContainer");
const Result_1 = require("../../../../src/domain/core/Result");
// Add Obsidian DOM extensions to HTMLElement prototype
beforeAll(() => {
    HTMLElement.prototype.createEl = jest.fn().mockImplementation(function (tag, attrs) {
        const element = document.createElement(tag);
        if (attrs?.text)
            element.textContent = attrs.text;
        if (attrs?.cls)
            element.className = attrs.cls;
        // Append to parent (this) like real Obsidian createEl does
        this.appendChild(element);
        return element;
    });
    HTMLElement.prototype.createDiv = jest.fn().mockImplementation(function (attrs) {
        const element = document.createElement("div");
        if (attrs?.cls)
            element.className = attrs.cls;
        // Append to parent (this) like real Obsidian createDiv does
        this.appendChild(element);
        return element;
    });
    HTMLElement.prototype.empty = jest.fn().mockImplementation(function () {
        while (this.firstChild) {
            this.removeChild(this.firstChild);
        }
    });
});
describe("CreateAssetModal", () => {
    let app;
    let modal;
    let mockCreateAssetUseCase;
    let mockContainer;
    let mockCircuitBreaker;
    let mockPropertyCache;
    beforeEach(() => {
        // Setup app mock with vault and metadataCache
        app = new obsidian_1.App();
        app.vault = {
            getMarkdownFiles: jest.fn().mockReturnValue([]),
            read: jest.fn(),
        };
        app.metadataCache = {
            getFileCache: jest.fn().mockReturnValue(null),
        };
        // Setup CreateAssetUseCase mock
        mockCreateAssetUseCase = {
            execute: jest.fn(),
        };
        // Mock services for enhanced functionality
        mockPropertyCache = {
            getPropertiesForClass: jest.fn().mockReturnValue([]),
            updateClassProperties: jest.fn(),
            hasPropertiesForClass: jest.fn().mockReturnValue(false),
            clearCache: jest.fn(),
        };
        mockCircuitBreaker = {
            execute: jest.fn(),
            getCircuitState: jest.fn(),
            openCircuit: jest.fn(),
            closeCircuit: jest.fn(),
        };
        // Setup DIContainer mock
        mockContainer = {
            getCreateAssetUseCase: jest.fn().mockReturnValue(mockCreateAssetUseCase),
            getInstance: jest.fn().mockReturnThis(),
            resolve: jest.fn().mockImplementation((token) => {
                if (token === 'PropertyCacheService') {
                    return mockPropertyCache;
                }
                if (token === 'CircuitBreakerService') {
                    return mockCircuitBreaker;
                }
                // Return empty mock repositories
                return {};
            }),
        };
        DIContainer_1.DIContainer.getInstance.mockReturnValue(mockContainer);
        // Create modal instance
        modal = new CreateAssetModal_1.CreateAssetModal(app);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe("Asset Creation with Circuit Breaker", () => {
        test("should create asset successfully through circuit breaker", async () => {
            // Setup circuit breaker to execute operation and return success
            mockCircuitBreaker.execute.mockImplementation(async (name, operation) => {
                // Set up use case to return success
                mockCreateAssetUseCase.execute.mockResolvedValue({
                    success: true,
                    assetId: "test-id",
                    message: "Created asset: Test Asset",
                });
                // Execute the operation
                return await operation();
            });
            modal.assetTitle = "Test Asset";
            modal.assetClass = "exo__Task";
            modal.assetOntology = "exo";
            modal.propertyValues.set("priority", "high");
            const closeSpy = jest.spyOn(modal, "close").mockImplementation(() => { });
            await modal.createAsset();
            expect(mockCircuitBreaker.execute).toHaveBeenCalledWith("asset-creation", expect.any(Function), expect.objectContaining({
                failureThreshold: 3,
                resetTimeout: 30000,
                halfOpenMaxCalls: 2,
            }));
            expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith({
                title: "Test Asset",
                className: "exo__Task",
                ontologyPrefix: "exo",
                properties: {
                    priority: "high",
                },
            });
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Created asset: Test Asset");
            expect(closeSpy).toHaveBeenCalled();
        });
        test("should handle asset creation failure through circuit breaker", async () => {
            // Setup circuit breaker to execute operation and return failure
            mockCircuitBreaker.execute.mockImplementation(async (name, operation) => {
                mockCreateAssetUseCase.execute.mockResolvedValue({
                    success: false,
                    assetId: "",
                    message: "Creation failed",
                    error: "Invalid asset data",
                });
                return await operation();
            });
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Error: Invalid asset data", 5000);
        });
        test("should handle circuit breaker open state", async () => {
            // Setup circuit breaker to return circuit open error
            mockCircuitBreaker.execute.mockResolvedValue(Result_1.Result.fail("Circuit asset-creation is OPEN. Try again in 25 seconds"));
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Asset creation is temporarily unavailable. Please try again in a moment.", 5000);
        });
        test("should handle ontology-related errors", async () => {
            mockCircuitBreaker.execute.mockResolvedValue(Result_1.Result.fail("Ontology 'test' not found"));
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Ontology issue: Ontology 'test' not found", 8000);
        });
        test("should handle validation errors", async () => {
            mockCircuitBreaker.execute.mockResolvedValue(Result_1.Result.fail("Invalid asset title: contains special characters"));
            modal.assetTitle = "Test@Asset#";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Validation error: Invalid asset title: contains special characters", 6000);
        });
    });
    describe("Property Caching", () => {
        test("should use property cache when updating properties", async () => {
            const cachedProperties = [
                {
                    name: "cached_prop",
                    label: "Cached Property",
                    description: "From cache",
                    type: "string",
                    isRequired: false,
                },
            ];
            mockPropertyCache.getPropertiesForClass.mockReturnValue(cachedProperties);
            mockPropertyCache.hasPropertiesForClass.mockReturnValue(true);
            await modal.updatePropertiesForClass("TestClass");
            expect(mockPropertyCache.getPropertiesForClass).toHaveBeenCalledWith("TestClass");
        });
        test("should update cache when properties are loaded from vault", async () => {
            const file = {
                basename: "propertyName",
                name: "propertyName.md",
            };
            app.vault.getMarkdownFiles.mockReturnValue([file]);
            app.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    exo__Instance_class: "exo__Property",
                    rdfs__domain: "TestClass",
                    rdfs__label: "Property Label",
                },
            });
            mockPropertyCache.hasPropertiesForClass.mockReturnValue(false);
            await modal.updatePropertiesForClass("TestClass");
            // Properties should be loaded and cached
            expect(mockPropertyCache.updateClassProperties).not.toHaveBeenCalled(); // Cache update is handled internally
        });
    });
    describe("Modal Initialization", () => {
        test("should initialize with correct default values", () => {
            expect(modal.assetTitle).toBe("");
            expect(modal.assetClass).toBe("exo__Asset");
            expect(modal.assetOntology).toBe("");
            expect(modal.propertyValues).toBeInstanceOf(Map);
            expect(modal.propertyValues.size).toBe(0);
        });
        test("should properly resolve services from container", () => {
            expect(mockContainer.resolve).toHaveBeenCalledWith("IOntologyRepository");
            expect(mockContainer.resolve).toHaveBeenCalledWith("IClassViewRepository");
            expect(mockContainer.resolve).toHaveBeenCalledWith("PropertyCacheService");
            expect(mockContainer.resolve).toHaveBeenCalledWith("CircuitBreakerService");
        });
    });
    describe("Error Recovery", () => {
        test("should recover from circuit breaker errors", async () => {
            // First call fails
            mockCircuitBreaker.execute.mockResolvedValueOnce(Result_1.Result.fail("Circuit is open"));
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Asset creation is temporarily unavailable. Please try again in a moment.", 5000);
            // Reset Notice mock for second call
            obsidian_1.Notice.mockClear();
            // Second call succeeds after circuit recovery
            mockCircuitBreaker.execute.mockImplementation(async (name, operation) => {
                mockCreateAssetUseCase.execute.mockResolvedValue({
                    success: true,
                    assetId: "test-id",
                    message: "Created asset: Test Asset",
                });
                return await operation();
            });
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Created asset: Test Asset");
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,