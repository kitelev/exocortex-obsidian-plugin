{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/ProcessorLifecycleManager.ts","mappings":";;;AAIA,mFAAgF;AAChF,2GAAwG;AAExG;;;GAGG;AACH,MAAa,yBAAyB;IAIpC,YACmB,MAAc,EACd,KAAY,EACZ,QAA2B;QAF3B,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAO;QACZ,aAAQ,GAAR,QAAQ,CAAmB;IAC3C,CAAC;IAEJ,KAAK,CAAC,UAAU;QACd,qEAAqE;QACrE,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC;YAChD,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,IAAI;YAClE,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC;SAChD,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,IAAI,iCAAe,CACxC,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,EACV,SAAS,EACT,WAAW,CACZ,CAAC;QAEF,2CAA2C;QAC3C,IAAI,CAAC,2BAA2B,GAAG,IAAI,yDAA2B,CAChE,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,CACX,CAAC;QAEF,sBAAsB;QACtB,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAClC,CAAC;IAED,KAAK,CAAC,OAAO;QACX,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;SAChC;IACH,CAAC;IAED,YAAY;QACV,OAAO,2BAA2B,CAAC;IACrC,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,8BAA8B;QAC5B,OAAO,IAAI,CAAC,2BAA2B,CAAC;IAC1C,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,QAA2B;QAC3C,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,MAAM,WAAW,GAAG;gBAClB,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,oBAAoB,CAAC;gBAC3C,UAAU,EAAE,QAAQ,CAAC,GAAG,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,IAAI;gBAC7D,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,mBAAmB,CAAC;aAC3C,CAAC;YACF,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;SACrD;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,uCAAuC;QACvC,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,kCAAkC,CAC5C,QAAQ,EACR,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAClB,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,CAAC,CACzD,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,mEAAmE;YACnE,OAAO,CAAC,IAAI,CACV,iEAAiE,EACjE,KAAK,CAAC,OAAO,CACd,CAAC;SACH;QAED,oDAAoD;QACpD,IAAI;YACF,IAAI,CAAC,MAAM,CAAC,kCAAkC,CAC5C,OAAO,EACP,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,CAClB,IAAI,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,MAAM,EAAE,EAAE,EAAE,GAAG,CAAC,CACrE,CAAC;SACH;QAAC,OAAO,KAAK,EAAE;YACd,kEAAkE;YAClE,OAAO,CAAC,IAAI,CACV,gEAAgE,EAChE,KAAK,CAAC,OAAO,CACd,CAAC;SACH;IACH,CAAC;CACF;AAlGD,8DAkGC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/ProcessorLifecycleManager.ts"],"sourcesContent":["import { Plugin } from \"obsidian\";\nimport { ILifecycleManager } from \"../../application/ports/ILifecycleManager\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { ExocortexSettings } from \"../../domain/entities/ExocortexSettings\";\nimport { SPARQLProcessor } from \"../../presentation/processors/SPARQLProcessor\";\nimport { GraphVisualizationProcessor } from \"../../presentation/processors/GraphVisualizationProcessor\";\n\n/**\n * Processor Lifecycle Manager following Pure Fabrication Pattern (GRASP)\n * Single Responsibility: Manage code block processors lifecycle\n */\nexport class ProcessorLifecycleManager implements ILifecycleManager {\n  private sparqlProcessor: SPARQLProcessor;\n  private graphVisualizationProcessor: GraphVisualizationProcessor;\n\n  constructor(\n    private readonly plugin: Plugin,\n    private readonly graph: Graph,\n    private readonly settings: ExocortexSettings,\n  ) {}\n\n  async initialize(): Promise<void> {\n    // Initialize SPARQL processor with cache configuration from settings\n    const cacheConfig = {\n      maxSize: this.settings.get(\"sparqlCacheMaxSize\"),\n      defaultTTL: this.settings.get(\"sparqlCacheTTLMinutes\") * 60 * 1000,\n      enabled: this.settings.get(\"enableSPARQLCache\"),\n    };\n\n    this.sparqlProcessor = new SPARQLProcessor(\n      this.plugin,\n      this.graph,\n      undefined,\n      cacheConfig,\n    );\n\n    // Initialize Graph Visualization processor\n    this.graphVisualizationProcessor = new GraphVisualizationProcessor(\n      this.plugin,\n      this.graph,\n    );\n\n    // Register processors\n    await this.registerProcessors();\n  }\n\n  async cleanup(): Promise<void> {\n    if (this.sparqlProcessor) {\n      this.sparqlProcessor.destroy();\n    }\n  }\n\n  getManagerId(): string {\n    return \"ProcessorLifecycleManager\";\n  }\n\n  getSPARQLProcessor(): SPARQLProcessor {\n    return this.sparqlProcessor;\n  }\n\n  getGraphVisualizationProcessor(): GraphVisualizationProcessor {\n    return this.graphVisualizationProcessor;\n  }\n\n  /**\n   * Update cache configuration for processors\n   */\n  updateCacheConfig(settings: ExocortexSettings): void {\n    if (this.sparqlProcessor) {\n      const cacheConfig = {\n        maxSize: settings.get(\"sparqlCacheMaxSize\"),\n        defaultTTL: settings.get(\"sparqlCacheTTLMinutes\") * 60 * 1000,\n        enabled: settings.get(\"enableSPARQLCache\"),\n      };\n      this.sparqlProcessor.updateCacheConfig(cacheConfig);\n    }\n  }\n\n  private async registerProcessors(): Promise<void> {\n    // Register SPARQL code block processor\n    try {\n      this.plugin.registerMarkdownCodeBlockProcessor(\n        \"sparql\",\n        (source, el, ctx) =>\n          this.sparqlProcessor.processCodeBlock(source, el, ctx),\n      );\n    } catch (error) {\n      // SPARQL processor may already be registered (hot reload scenario)\n      console.warn(\n        \"SPARQL processor registration failed, likely due to hot reload:\",\n        error.message,\n      );\n    }\n\n    // Register Graph Visualization code block processor\n    try {\n      this.plugin.registerMarkdownCodeBlockProcessor(\n        \"graph\",\n        (source, el, ctx) =>\n          this.graphVisualizationProcessor.processCodeBlock(source, el, ctx),\n      );\n    } catch (error) {\n      // Graph processor may already be registered (hot reload scenario)\n      console.warn(\n        \"Graph processor registration failed, likely due to hot reload:\",\n        error.message,\n      );\n    }\n  }\n}\n"],"version":3}