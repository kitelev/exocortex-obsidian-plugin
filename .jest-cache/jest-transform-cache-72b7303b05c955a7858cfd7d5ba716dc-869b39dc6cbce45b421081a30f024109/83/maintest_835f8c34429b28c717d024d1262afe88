6db7fa283dbae5601ebaf1e5a9f579ac
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock DIContainer
jest.mock('../src/infrastructure/container/DIContainer', () => {
    const mockContainer = {
        getCreateAssetUseCase: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue({
                success: true,
                message: 'Asset created'
            })
        }),
        getPropertyEditingUseCase: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue({
                success: true,
                message: 'Property edited'
            })
        }),
        resolve: jest.fn().mockImplementation(() => ({})),
        dispose: jest.fn()
    };
    return {
        DIContainer: {
            initialize: jest.fn((app, plugin) => mockContainer),
            getInstance: jest.fn(() => mockContainer)
        }
    };
});
const main_1 = tslib_1.__importDefault(require("../main"));
describe('ExocortexPlugin - SPARQL Version', () => {
    let app;
    let plugin;
    // Mock Obsidian App
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        app = {
            vault: {
                getMarkdownFiles: jest.fn().mockReturnValue([
                    { basename: 'test-file', path: 'test-file.md' }
                ]),
                read: jest.fn().mockResolvedValue(`---
exo__Asset_uid: test-uid
exo__Asset_label: Test Asset
exo__Instance_class: "[[exo__Class]]"
---

# Test File`),
                on: jest.fn().mockReturnValue({ event: 'mock', callback: jest.fn() })
            },
            workspace: {
                openLinkText: jest.fn()
            },
            metadataCache: {
                getFileCache: jest.fn()
            }
        };
        plugin = new main_1.default(app, {
            id: 'exocortex',
            name: 'Exocortex',
            version: '2.0.0',
            minAppVersion: '1.0.0',
            description: 'SPARQL queries in Obsidian',
            author: 'M.K. Khromov',
            authorUrl: '',
            isDesktopOnly: false
        });
    }));
    describe('Plugin Lifecycle', () => {
        test('should load plugin successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const registerSpy = jest.spyOn(plugin, 'registerMarkdownCodeBlockProcessor');
            yield plugin.onload();
            expect(registerSpy).toHaveBeenCalledWith('sparql', expect.any(Function));
        }));
        test('should unload plugin successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            yield plugin.onunload();
            // Plugin should unload without errors
        }));
    });
    describe('SPARQL Processing', () => {
        test('should register SPARQL code block processor', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Check if processor was registered (tested via E2E tests)
            expect(true).toBe(true);
        }));
        test('should load vault data into graph', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Verify that the plugin has loaded data from vault
            // The graph should exist after loading
            expect(plugin['graph']).toBeDefined();
            // Verify vault.getMarkdownFiles was called
            expect(app.vault.getMarkdownFiles).toHaveBeenCalled();
        }));
        test('should initialize SPARQL processor', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Verify that the SPARQL processor was initialized
            expect(plugin['sparqlProcessor']).toBeDefined();
            // Verify the processor has required components
            expect(plugin['graph']).toBeDefined();
            expect(plugin['sparqlProcessor']).toBeDefined();
        }));
        test('should register event handlers for file changes', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Verify that file modification handlers were registered
            expect(app.vault.on).toHaveBeenCalledWith('modify', expect.any(Function));
            expect(app.vault.on).toHaveBeenCalledWith('create', expect.any(Function));
            expect(app.vault.on).toHaveBeenCalledWith('delete', expect.any(Function));
        }));
        test('should initialize layout renderer', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Verify that the graph and processors are initialized
            expect(plugin['graph']).toBeDefined();
            expect(plugin['sparqlProcessor']).toBeDefined();
            expect(plugin['graphVisualizationProcessor']).toBeDefined();
        }));
        test('should initialize API server when enabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Note: API server initialization depends on settings
            yield plugin.onload();
            // Verify the plugin loaded successfully with core components
            expect(plugin['graph']).toBeDefined();
            expect(plugin['rdfService']).toBeDefined();
            expect(plugin['container']).toBeDefined();
        }));
    });
    describe('DOM Processing', () => {
        test('should register markdown code block processors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock the registerMarkdownCodeBlockProcessor method
            const registerProcessorSpy = jest.spyOn(plugin, 'registerMarkdownCodeBlockProcessor')
                .mockImplementation(() => { });
            yield plugin.onload();
            // Verify that processors were registered (with error handling)
            // The plugin should attempt to register both SPARQL and graph processors
            expect(registerProcessorSpy).toHaveBeenCalledTimes(2);
            expect(registerProcessorSpy).toHaveBeenCalledWith('sparql', expect.any(Function));
            expect(registerProcessorSpy).toHaveBeenCalledWith('graph', expect.any(Function));
            // Verify the plugin loaded successfully even if processor registration had issues
            expect(plugin['graph']).toBeDefined();
            registerProcessorSpy.mockRestore();
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,