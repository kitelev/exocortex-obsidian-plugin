{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/Asset.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/Asset.ts"],"sourcesContent":["import { AssetId } from \"../value-objects/AssetId\";\nimport { ClassName } from \"../value-objects/ClassName\";\nimport { OntologyPrefix } from \"../value-objects/OntologyPrefix\";\nimport { PropertyValue } from \"../value-objects/PropertyValue\";\nimport { Entity, DomainEvent } from \"../core/Entity\";\nimport { Result } from \"../core/Result\";\n\ninterface AssetProps {\n  id: AssetId;\n  title: string;\n  className: ClassName;\n  ontology: OntologyPrefix;\n  label?: string;\n  description?: string;\n  properties: Map<string, PropertyValue>;\n  createdAt: Date;\n  updatedAt: Date;\n  filePath?: string;\n  version: number; // For optimistic locking\n}\n\n/**\n * Domain entity representing an Exocortex Asset\n * Core business logic and invariants\n */\nexport class Asset extends Entity<AssetProps> {\n  private constructor(props: AssetProps, id?: string) {\n    super(props, props.id.toString());\n  }\n\n  protected generateId(): string {\n    return this.props.id.toString();\n  }\n\n  protected validate(): void {\n    if (!this.props.id) {\n      throw new Error(\"Asset must have a valid ID\");\n    }\n\n    if (!this.props.title || this.props.title.trim().length === 0) {\n      throw new Error(\"Asset must have a non-empty title\");\n    }\n\n    if (this.props.title.length > 200) {\n      throw new Error(\"Asset title cannot exceed 200 characters\");\n    }\n\n    if (!this.props.className) {\n      throw new Error(\"Asset must have a valid class name\");\n    }\n\n    if (!this.props.ontology) {\n      throw new Error(\"Asset must belong to a valid ontology\");\n    }\n\n    // Validate all property values\n    for (const [key, propertyValue] of this.props.properties) {\n      if (!(propertyValue instanceof PropertyValue)) {\n        throw new Error(`Property '${key}' must be a PropertyValue instance`);\n      }\n    }\n  }\n\n  static create(params: {\n    id: AssetId;\n    className: ClassName;\n    ontology: OntologyPrefix;\n    label: string;\n    description?: string;\n    properties?: Record<string, any>;\n  }): Result<Asset> {\n    if (!params.label || params.label.trim().length === 0) {\n      return Result.fail<Asset>(\"Asset label cannot be empty\");\n    }\n\n    if (params.label.length > 200) {\n      return Result.fail<Asset>(\"Asset label cannot exceed 200 characters\");\n    }\n\n    // Convert properties to PropertyValue objects\n    const propertyMap = new Map<string, PropertyValue>();\n    if (params.properties) {\n      for (const [key, value] of Object.entries(params.properties)) {\n        const propertyValueResult = PropertyValue.create(value);\n        if (!propertyValueResult.isSuccess) {\n          return Result.fail<Asset>(\n            `Invalid property '${key}': ${propertyValueResult.getError()}`,\n          );\n        }\n        propertyMap.set(key, propertyValueResult.getValue()!);\n      }\n    }\n\n    const props: AssetProps = {\n      id: params.id,\n      title: params.label.trim(),\n      className: params.className,\n      ontology: params.ontology,\n      label: params.label.trim(),\n      description: params.description?.trim(),\n      properties: propertyMap,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      version: 1,\n    };\n\n    try {\n      const asset = new Asset(props);\n      asset.validate();\n\n      // Add domain event for asset creation\n      asset.addDomainEvent(\n        asset.createDomainEvent(\"AssetCreated\", {\n          assetId: params.id.toString(),\n          className: params.className.toString(),\n          ontology: params.ontology.toString(),\n        }),\n      );\n\n      return Result.ok<Asset>(asset);\n    } catch (error) {\n      return Result.fail<Asset>(`Asset creation failed: ${error}`);\n    }\n  }\n\n  // Getters\n  getId(): AssetId {\n    return this.props.id;\n  }\n\n  getTitle(): string {\n    return this.props.title;\n  }\n\n  getClassName(): ClassName {\n    return this.props.className;\n  }\n\n  getOntologyPrefix(): OntologyPrefix {\n    return this.props.ontology;\n  }\n\n  getProperties(): Map<string, PropertyValue> {\n    return new Map(this.props.properties);\n  }\n\n  getProperty(key: string): PropertyValue | undefined {\n    return this.props.properties.get(key);\n  }\n\n  getPropertyValue(key: string): any {\n    const propertyValue = this.props.properties.get(key);\n    return propertyValue ? propertyValue.getValue() : undefined;\n  }\n\n  hasProperty(key: string): boolean {\n    return this.props.properties.has(key);\n  }\n\n  getVersion(): number {\n    return this.props.version;\n  }\n\n  getCreatedAt(): Date {\n    return this.props.createdAt;\n  }\n\n  getUpdatedAt(): Date {\n    return this.props.updatedAt;\n  }\n\n  // Business methods\n  updateTitle(title: string): Result<void> {\n    if (!title || title.trim().length === 0) {\n      return Result.fail<void>(\"Asset title cannot be empty\");\n    }\n\n    if (title.length > 200) {\n      return Result.fail<void>(\"Asset title cannot exceed 200 characters\");\n    }\n\n    const oldTitle = this.props.title;\n    this.props.title = title.trim();\n    this.props.label = title.trim();\n    this.props.updatedAt = new Date();\n    this.props.version += 1;\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetTitleUpdated\", {\n        assetId: this.props.id.toString(),\n        oldTitle,\n        newTitle: title.trim(),\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  setProperty(key: string, value: any): Result<void> {\n    if (!key || key.trim().length === 0) {\n      return Result.fail<void>(\"Property key cannot be empty\");\n    }\n\n    const propertyValueResult = PropertyValue.create(value);\n    if (!propertyValueResult.isSuccess) {\n      return Result.fail<void>(\n        `Invalid property value: ${propertyValueResult.getError()}`,\n      );\n    }\n\n    const oldValue = this.props.properties.get(key);\n    this.props.properties.set(key, propertyValueResult.getValue()!);\n    this.props.updatedAt = new Date();\n    this.props.version += 1;\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetPropertyUpdated\", {\n        assetId: this.props.id.toString(),\n        propertyKey: key,\n        oldValue: oldValue?.getValue(),\n        newValue: value,\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  removeProperty(key: string): Result<void> {\n    if (!this.props.properties.has(key)) {\n      return Result.fail<void>(`Property '${key}' does not exist`);\n    }\n\n    const oldValue = this.props.properties.get(key);\n    this.props.properties.delete(key);\n    this.props.updatedAt = new Date();\n    this.props.version += 1;\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetPropertyRemoved\", {\n        assetId: this.props.id.toString(),\n        propertyKey: key,\n        removedValue: oldValue?.getValue(),\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  changeClass(className: ClassName): Result<void> {\n    if (!className) {\n      return Result.fail<void>(\"Class name cannot be null\");\n    }\n\n    const oldClassName = this.props.className;\n    this.props.className = className;\n    this.props.updatedAt = new Date();\n    this.props.version += 1;\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetClassChanged\", {\n        assetId: this.props.id.toString(),\n        oldClassName: oldClassName.toString(),\n        newClassName: className.toString(),\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  updateDescription(description: string): Result<void> {\n    if (description && description.length > 2000) {\n      return Result.fail<void>(\"Description cannot exceed 2000 characters\");\n    }\n\n    const oldDescription = this.props.description;\n    this.props.description = description?.trim();\n    this.props.updatedAt = new Date();\n    this.props.version += 1;\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetDescriptionUpdated\", {\n        assetId: this.props.id.toString(),\n        oldDescription,\n        newDescription: description?.trim(),\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Apply bulk property updates atomically\n   */\n  updateProperties(updates: Record<string, any>): Result<void> {\n    const validatedProperties = new Map<string, PropertyValue>();\n\n    // Validate all properties first\n    for (const [key, value] of Object.entries(updates)) {\n      if (!key || key.trim().length === 0) {\n        return Result.fail<void>(\"Property key cannot be empty\");\n      }\n\n      const propertyValueResult = PropertyValue.create(value);\n      if (!propertyValueResult.isSuccess) {\n        return Result.fail<void>(\n          `Invalid property '${key}': ${propertyValueResult.getError()}`,\n        );\n      }\n\n      validatedProperties.set(key, propertyValueResult.getValue()!);\n    }\n\n    // Apply all updates atomically\n    const oldProperties = new Map(this.props.properties);\n    for (const [key, propertyValue] of validatedProperties) {\n      this.props.properties.set(key, propertyValue);\n    }\n\n    this.props.updatedAt = new Date();\n    this.props.version += 1;\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetPropertiesUpdated\", {\n        assetId: this.props.id.toString(),\n        updatedProperties: Object.keys(updates),\n        changeCount: validatedProperties.size,\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Check if asset can be deleted (business rules)\n   */\n  canDelete(): { canDelete: boolean; reasons: string[] } {\n    const reasons: string[] = [];\n\n    // Add business rules for deletion\n    // For example: cannot delete if it has dependent assets\n\n    return {\n      canDelete: reasons.length === 0,\n      reasons,\n    };\n  }\n\n  /**\n   * Mark asset as deleted (soft delete)\n   */\n  markAsDeleted(): Result<void> {\n    const deleteCheck = this.canDelete();\n    if (!deleteCheck.canDelete) {\n      return Result.fail<void>(\n        `Cannot delete asset: ${deleteCheck.reasons.join(\", \")}`,\n      );\n    }\n\n    this.addDomainEvent(\n      this.createDomainEvent(\"AssetDeleted\", {\n        assetId: this.props.id.toString(),\n        className: this.props.className.toString(),\n        title: this.props.title,\n      }),\n    );\n\n    return Result.ok<void>();\n  }\n\n  toFrontmatter(): Record<string, any> {\n    // Always ensure mandatory fields are present with proper formats\n    const frontmatter: Record<string, any> = {\n      exo__Asset_uid: this.props.id.toString(),\n      exo__Asset_label: this.props.title,\n      exo__Asset_isDefinedBy: `[[!${this.props.ontology.toString()}]]`,\n      exo__Asset_createdAt: this.props.createdAt\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, \"\"), // Remove milliseconds for cleaner format\n      exo__Asset_updatedAt: this.props.updatedAt\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, \"\"),\n      exo__Asset_version: this.props.version,\n      exo__Instance_class: [this.props.className.toWikiLink()],\n    };\n\n    // Add description if present\n    if (this.props.description) {\n      frontmatter.exo__Asset_description = this.props.description;\n    }\n\n    // Add custom properties with proper value extraction\n    for (const [key, propertyValue] of this.props.properties) {\n      if (!frontmatter[key]) {\n        frontmatter[key] = propertyValue.getValue();\n      }\n    }\n\n    return frontmatter;\n  }\n\n  /**\n   * Validates if an asset has all mandatory properties for creation\n   * @param frontmatter The frontmatter to validate\n   * @returns ValidationResult indicating success or failure with details\n   */\n  private static validateMandatoryProperties(\n    frontmatter: Record<string, any>,\n  ): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Check for mandatory exo__Asset_uid (UUID format)\n    const uid = frontmatter[\"exo__Asset_uid\"];\n    if (!uid) {\n      errors.push(\"Missing mandatory field: exo__Asset_uid\");\n    } else {\n      // Validate UUID format\n      const uuidRegex =\n        /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n      if (!uuidRegex.test(uid.toString())) {\n        errors.push(\"exo__Asset_uid must be a valid UUID format\");\n      }\n    }\n\n    // Check for mandatory exo__Asset_isDefinedBy (ontology reference)\n    const isDefinedBy = frontmatter[\"exo__Asset_isDefinedBy\"];\n    if (!isDefinedBy) {\n      errors.push(\"Missing mandatory field: exo__Asset_isDefinedBy\");\n    } else {\n      // Validate format like \"[[Ontology - Exocortex]]\" or \"[[!exo]]\"\n      const ontologyRegex = /^\\[\\[(!?[a-zA-Z][a-zA-Z0-9_\\- ]*)\\]\\]$/;\n      if (!ontologyRegex.test(isDefinedBy.toString())) {\n        errors.push(\n          \"exo__Asset_isDefinedBy must be in format [[Ontology Name]] or [[!prefix]]\",\n        );\n      }\n    }\n\n    // Check for mandatory exo__Asset_createdAt (ISO timestamp)\n    const createdAt = frontmatter[\"exo__Asset_createdAt\"];\n    if (!createdAt) {\n      errors.push(\"Missing mandatory field: exo__Asset_createdAt\");\n    } else {\n      // Validate ISO timestamp format (YYYY-MM-DDTHH:mm:ss or with milliseconds and timezone)\n      const isoRegex =\n        /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?(Z|[+-]\\d{2}:\\d{2})?$/;\n      if (!isoRegex.test(createdAt.toString())) {\n        errors.push(\n          \"exo__Asset_createdAt must be in ISO timestamp format (YYYY-MM-DDTHH:mm:ss)\",\n        );\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  static fromFrontmatter(\n    frontmatter: Record<string, any>,\n    fileName: string,\n  ): Asset | null {\n    // Validate mandatory properties first\n    const validation = Asset.validateMandatoryProperties(frontmatter);\n    if (!validation.isValid) {\n      console.warn(\n        `Asset validation failed for ${fileName}:`,\n        validation.errors,\n      );\n      return null; // Silently ignore invalid assets\n    }\n\n    try {\n      const idResult = AssetId.create(frontmatter[\"exo__Asset_uid\"]);\n      if (!idResult.isSuccess) {\n        console.warn(`Invalid Asset ID for ${fileName}:`, idResult.getError());\n        return null;\n      }\n      const id = idResult.getValue()!;\n\n      const label =\n        frontmatter[\"exo__Asset_label\"] || fileName.replace(\".md\", \"\");\n\n      const classValue = Array.isArray(frontmatter[\"exo__Instance_class\"])\n        ? frontmatter[\"exo__Instance_class\"][0]\n        : frontmatter[\"exo__Instance_class\"];\n      const classNameResult = ClassName.create(classValue || \"exo__Asset\");\n      const className = classNameResult.isSuccess\n        ? classNameResult.getValue()\n        : ClassName.create(\"exo__Asset\").getValue()!;\n\n      const ontologyValue =\n        frontmatter[\"exo__Asset_isDefinedBy\"]?.replace(/\\[\\[!?|\\]\\]/g, \"\") ||\n        \"exo\";\n      const ontologyResult = OntologyPrefix.create(ontologyValue);\n      const ontology = ontologyResult.isSuccess\n        ? ontologyResult.getValue()\n        : OntologyPrefix.create(\"exo\").getValue()!;\n\n      const createdAt = new Date(frontmatter[\"exo__Asset_createdAt\"]);\n      if (isNaN(createdAt.getTime())) {\n        console.warn(`Invalid createdAt timestamp for ${fileName}`);\n        return null;\n      }\n\n      const properties: Record<string, any> = {};\n      for (const [key, value] of Object.entries(frontmatter)) {\n        if (\n          !key.startsWith(\"exo__Asset_\") &&\n          !key.startsWith(\"exo__Instance_\")\n        ) {\n          properties[key] = value;\n        }\n      }\n\n      // Use the factory method instead of constructor\n      const result = Asset.create({\n        id,\n        label,\n        className,\n        ontology,\n        properties,\n      });\n\n      if (result.isSuccess) {\n        const asset = result.getValue()!;\n        // Update timestamps and version with validated values\n        (asset as any).props.createdAt = createdAt;\n        (asset as any).props.version = frontmatter[\"exo__Asset_version\"] || 1;\n\n        const updatedAt = frontmatter[\"exo__Asset_updatedAt\"];\n        if (updatedAt) {\n          const updatedAtDate = new Date(updatedAt);\n          if (!isNaN(updatedAtDate.getTime())) {\n            (asset as any).props.updatedAt = updatedAtDate;\n          }\n        }\n\n        return asset;\n      } else {\n        console.warn(\n          \"Failed to create asset from frontmatter:\",\n          result.getError(),\n        );\n      }\n\n      return null;\n    } catch (error) {\n      console.warn(\"Failed to create asset from frontmatter:\", error);\n      return null;\n    }\n  }\n}\n"],"version":3}