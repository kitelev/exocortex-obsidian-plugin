917b712ff546db75775937fdb8abfdd3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorHandlerService = void 0;
const ExocortexError_1 = require("../../domain/errors/ExocortexError");
const ErrorAnalyzer_1 = require("../../domain/errors/ErrorAnalyzer");
const EnhancedResult_1 = require("../../domain/core/EnhancedResult");
class ErrorHandlerService {
    constructor(options = {}, notificationService) {
        this.options = options;
        this.notificationService = notificationService;
        this.errorHistory = [];
        this.errorMetrics = {
            totalErrors: 0,
            errorsBySeverity: {
                [ExocortexError_1.ErrorSeverity.CRITICAL]: 0,
                [ExocortexError_1.ErrorSeverity.ERROR]: 0,
                [ExocortexError_1.ErrorSeverity.WARNING]: 0,
                [ExocortexError_1.ErrorSeverity.INFO]: 0,
            },
            errorsByCategory: {
                [ExocortexError_1.ErrorCategory.SYNTAX]: 0,
                [ExocortexError_1.ErrorCategory.SEMANTIC]: 0,
                [ExocortexError_1.ErrorCategory.VALIDATION]: 0,
                [ExocortexError_1.ErrorCategory.SYSTEM]: 0,
                [ExocortexError_1.ErrorCategory.NETWORK]: 0,
                [ExocortexError_1.ErrorCategory.PERMISSION]: 0,
            },
            averageResolutionTime: 0,
        };
        this.resolutionTimes = [];
        this.maxHistorySize = 100;
        this.errorStartTimes = new Map();
        this.options = {
            showUserNotification: true,
            logToConsole: true,
            trackMetrics: true,
            autoRecover: false,
            ...options,
        };
    }
    async handleError(error, context) {
        const startTime = Date.now();
        try {
            let exoError;
            if (typeof error === "string") {
                exoError = ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
            }
            else if (error instanceof Error) {
                exoError = ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
            }
            else {
                exoError = error;
            }
            if (context) {
                exoError = {
                    ...exoError,
                    context: {
                        ...exoError.context,
                        ...context,
                    },
                };
            }
            this.errorStartTimes.set(exoError.id, startTime);
            if (this.options.trackMetrics) {
                this.updateMetrics(exoError);
            }
            if (this.options.logToConsole) {
                this.logError(exoError);
            }
            if (this.options.showUserNotification) {
                this.showUserNotification(exoError);
            }
            this.addToHistory(exoError);
            if (this.options.autoRecover && exoError.recoverable) {
                await this.attemptRecovery(exoError);
            }
            return EnhancedResult_1.EnhancedResult.okEnhanced();
        }
        catch (handlingError) {
            console.error("Error in error handler:", handlingError);
            return EnhancedResult_1.EnhancedResult.failEnhanced(ExocortexError_1.ErrorBuilder.create()
                .withTitle("Error Handler Failed")
                .withMessage("Failed to handle the error properly")
                .withSeverity(ExocortexError_1.ErrorSeverity.CRITICAL)
                .withCategory(ExocortexError_1.ErrorCategory.SYSTEM)
                .withContext({
                operation: "Error Handling",
                timestamp: new Date(),
            })
                .withTechnicalDetails(handlingError instanceof Error
                ? handlingError.message
                : String(handlingError))
                .build());
        }
    }
    markErrorResolved(errorId) {
        const startTime = this.errorStartTimes.get(errorId);
        if (startTime) {
            const resolutionTime = Date.now() - startTime;
            this.resolutionTimes.push(resolutionTime);
            if (this.resolutionTimes.length > 100) {
                this.resolutionTimes.shift();
            }
            this.errorMetrics.averageResolutionTime =
                this.resolutionTimes.reduce((a, b) => a + b, 0) /
                    this.resolutionTimes.length;
            this.errorStartTimes.delete(errorId);
        }
    }
    updateMetrics(error) {
        this.errorMetrics.totalErrors++;
        this.errorMetrics.errorsBySeverity[error.severity]++;
        this.errorMetrics.errorsByCategory[error.category]++;
        this.errorMetrics.lastError = error;
    }
    logError(error) {
        const logLevel = this.getLogLevel(error.severity);
        const logMessage = this.formatErrorForConsole(error);
        switch (logLevel) {
            case "error":
                console.error(logMessage, error);
                break;
            case "warn":
                console.warn(logMessage, error);
                break;
            case "info":
                console.info(logMessage, error);
                break;
            default:
                console.log(logMessage, error);
        }
    }
    getLogLevel(severity) {
        switch (severity) {
            case ExocortexError_1.ErrorSeverity.CRITICAL:
            case ExocortexError_1.ErrorSeverity.ERROR:
                return "error";
            case ExocortexError_1.ErrorSeverity.WARNING:
                return "warn";
            case ExocortexError_1.ErrorSeverity.INFO:
                return "info";
            default:
                return "log";
        }
    }
    formatErrorForConsole(error) {
        const parts = [
            `[${error.severity.toUpperCase()}]`,
            `[${error.category}]`,
            error.title,
            "-",
            error.message,
        ];
        if (error.context.location) {
            if (typeof error.context.location === "object" &&
                "line" in error.context.location) {
                parts.push(`(Line ${error.context.location.line}:${error.context.location.column})`);
            }
        }
        return parts.join(" ");
    }
    showUserNotification(error) {
        const duration = this.getNotificationDuration(error.severity);
        const message = this.formatErrorForUser(error);
        this.notificationService?.showError(message, duration);
    }
    getNotificationDuration(severity) {
        switch (severity) {
            case ExocortexError_1.ErrorSeverity.CRITICAL:
                return 10000;
            case ExocortexError_1.ErrorSeverity.ERROR:
                return 7000;
            case ExocortexError_1.ErrorSeverity.WARNING:
                return 5000;
            case ExocortexError_1.ErrorSeverity.INFO:
                return 3000;
            default:
                return 5000;
        }
    }
    formatErrorForUser(error) {
        let message = `${error.title}: ${error.message}`;
        if (error.suggestions && error.suggestions.length > 0) {
            const topSuggestion = error.suggestions[0];
            message += `\n\nðŸ’¡ ${topSuggestion.title}`;
        }
        return message;
    }
    addToHistory(error) {
        this.errorHistory.unshift(error);
        if (this.errorHistory.length > this.maxHistorySize) {
            this.errorHistory.pop();
        }
    }
    async attemptRecovery(error) {
        if (!error.suggestions || error.suggestions.length === 0) {
            return;
        }
        const autoFixSuggestion = error.suggestions.find((s) => s.confidence && s.confidence > 0.9 && s.action);
        if (autoFixSuggestion && autoFixSuggestion.action) {
            try {
                await autoFixSuggestion.action.handler();
                this.notificationService?.showSuccess(`Auto-recovery: ${autoFixSuggestion.title}`, 3000);
            }
            catch (recoveryError) {
                console.error("Auto-recovery failed:", recoveryError);
            }
        }
    }
    getMetrics() {
        return { ...this.errorMetrics };
    }
    getErrorHistory() {
        return [...this.errorHistory];
    }
    clearHistory() {
        this.errorHistory = [];
        this.errorStartTimes.clear();
    }
    getSuggestions(error) {
        const exoError = ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
        return exoError.suggestions || [];
    }
    analyzeError(error) {
        return ErrorAnalyzer_1.ErrorAnalyzer.analyze(error);
    }
}
exports.ErrorHandlerService = ErrorHandlerService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,