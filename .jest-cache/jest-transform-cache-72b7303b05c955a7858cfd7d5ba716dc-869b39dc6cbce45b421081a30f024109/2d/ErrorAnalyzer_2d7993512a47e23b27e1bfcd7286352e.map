{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/errors/ErrorAnalyzer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/errors/ErrorAnalyzer.ts"],"sourcesContent":["import {\n  ErrorSeverity,\n  ErrorCategory,\n  ExocortexError,\n  FixSuggestion,\n  ErrorBuilder,\n} from \"./ExocortexError\";\n\nexport interface ErrorPattern {\n  pattern: RegExp;\n  severity: ErrorSeverity;\n  category: ErrorCategory;\n  title: string;\n  getUserMessage: (match: RegExpMatchArray) => string;\n  getSuggestions: (match: RegExpMatchArray) => FixSuggestion[];\n  recoverable: boolean;\n}\n\nexport class ErrorAnalyzer {\n  private static patterns: ErrorPattern[] = [\n    {\n      pattern: /Unexpected token '([^']+)' at position (\\d+)/i,\n      severity: ErrorSeverity.ERROR,\n      category: ErrorCategory.SYNTAX,\n      title: \"SPARQL Syntax Error\",\n      getUserMessage: (match) =>\n        `Unexpected '${match[1]}' at position ${match[2]}. Check for missing brackets or incorrect syntax.`,\n      getSuggestions: (match) => [\n        {\n          title: \"Check Syntax\",\n          description: `The character '${match[1]}' was not expected at this position.`,\n          confidence: 0.9,\n        },\n        {\n          title: \"Common Fixes\",\n          description:\n            \"Ensure all brackets are closed and keywords are spelled correctly.\",\n          confidence: 0.7,\n          learnMore: {\n            url: \"https://www.w3.org/TR/sparql11-query/\",\n            title: \"SPARQL Syntax Guide\",\n          },\n        },\n      ],\n      recoverable: true,\n    },\n    {\n      pattern: /Unknown prefix: ([^\\s]+)/i,\n      severity: ErrorSeverity.ERROR,\n      category: ErrorCategory.SEMANTIC,\n      title: \"Unknown Prefix\",\n      getUserMessage: (match) =>\n        `The prefix '${match[1]}' is not defined. Add a PREFIX declaration at the beginning of your query.`,\n      getSuggestions: (match) => [\n        {\n          title: \"Add PREFIX Declaration\",\n          description: `Add: PREFIX ${match[1]} <http://example.org/${match[1].replace(\":\", \"\")}#> at the beginning`,\n          confidence: 0.95,\n          action: {\n            label: \"Add PREFIX\",\n            handler: () => console.log(\"Adding prefix...\"),\n          },\n        },\n      ],\n      recoverable: true,\n    },\n    {\n      pattern: /Query timeout after (\\d+)ms/i,\n      severity: ErrorSeverity.WARNING,\n      category: ErrorCategory.SYSTEM,\n      title: \"Query Timeout\",\n      getUserMessage: (match) =>\n        `Your query took longer than ${match[1]}ms and was cancelled. Try simplifying the query or adding limits.`,\n      getSuggestions: () => [\n        {\n          title: \"Add LIMIT Clause\",\n          description: \"Restrict the number of results with LIMIT 100\",\n          confidence: 0.8,\n          action: {\n            label: \"Add LIMIT\",\n            handler: () => console.log(\"Adding limit...\"),\n          },\n        },\n        {\n          title: \"Optimize Query\",\n          description: \"Simplify triple patterns or reduce the scope\",\n          confidence: 0.7,\n          learnMore: {\n            url: \"https://docs.exocortex.com/query-optimization\",\n            title: \"Query Optimization Guide\",\n          },\n        },\n      ],\n      recoverable: true,\n    },\n    {\n      pattern: /Invalid IRI: ([^\\s]+)/i,\n      severity: ErrorSeverity.ERROR,\n      category: ErrorCategory.VALIDATION,\n      title: \"Invalid IRI\",\n      getUserMessage: (match) =>\n        `'${match[1]}' is not a valid IRI. IRIs must be absolute URIs enclosed in angle brackets.`,\n      getSuggestions: (match) => {\n        const suggestions: FixSuggestion[] = [];\n\n        if (!match[1].startsWith(\"<\") || !match[1].endsWith(\">\")) {\n          suggestions.push({\n            title: \"Add Angle Brackets\",\n            description: `Enclose the IRI in angle brackets: <${match[1]}>`,\n            confidence: 0.9,\n          });\n        }\n\n        if (!match[1].includes(\"://\")) {\n          suggestions.push({\n            title: \"Use Absolute IRI\",\n            description:\n              \"IRIs must be absolute URLs, e.g., <http://example.org/resource>\",\n            confidence: 0.85,\n          });\n        }\n\n        return suggestions;\n      },\n      recoverable: true,\n    },\n    {\n      pattern: /Empty result set/i,\n      severity: ErrorSeverity.INFO,\n      category: ErrorCategory.SEMANTIC,\n      title: \"No Results Found\",\n      getUserMessage: () =>\n        \"Your query executed successfully but returned no results. This might be expected, or you may need to adjust your query criteria.\",\n      getSuggestions: () => [\n        {\n          title: \"Check Triple Patterns\",\n          description: \"Ensure your triple patterns match existing data\",\n          confidence: 0.6,\n        },\n        {\n          title: \"Broaden Search Criteria\",\n          description: \"Try using more general patterns or OPTIONAL clauses\",\n          confidence: 0.5,\n        },\n      ],\n      recoverable: true,\n    },\n    {\n      pattern: /Circular reference detected/i,\n      severity: ErrorSeverity.WARNING,\n      category: ErrorCategory.SEMANTIC,\n      title: \"Circular Reference\",\n      getUserMessage: () =>\n        \"A circular reference was detected in your ontology. This may cause infinite loops in reasoning.\",\n      getSuggestions: () => [\n        {\n          title: \"Review Ontology Structure\",\n          description:\n            \"Check for classes that reference themselves directly or indirectly\",\n          confidence: 0.7,\n        },\n        {\n          title: \"Use Reasoning Limits\",\n          description: \"Set maximum inference depth to prevent infinite loops\",\n          confidence: 0.8,\n        },\n      ],\n      recoverable: true,\n    },\n  ];\n\n  static analyze(error: Error | string): ExocortexError {\n    const errorMessage = typeof error === \"string\" ? error : error.message;\n    const stackTrace = error instanceof Error ? error.stack : undefined;\n\n    for (const pattern of this.patterns) {\n      const match = errorMessage.match(pattern.pattern);\n      if (match) {\n        return ErrorBuilder.create()\n          .withSeverity(pattern.severity)\n          .withCategory(pattern.category)\n          .withTitle(pattern.title)\n          .withMessage(pattern.getUserMessage(match))\n          .withContext({\n            operation: \"Error Analysis\",\n            timestamp: new Date(),\n          })\n          .withTechnicalDetails(errorMessage)\n          .withSuggestions(pattern.getSuggestions(match))\n          .withRecoverable(pattern.recoverable)\n          .withStackTrace(stackTrace || \"\")\n          .build();\n      }\n    }\n\n    return ErrorBuilder.create()\n      .withSeverity(ErrorSeverity.ERROR)\n      .withCategory(ErrorCategory.SYSTEM)\n      .withTitle(\"Unknown Error\")\n      .withMessage(\n        \"An unexpected error occurred. Please check the technical details for more information.\",\n      )\n      .withContext({\n        operation: \"Error Analysis\",\n        timestamp: new Date(),\n      })\n      .withTechnicalDetails(errorMessage)\n      .withRecoverable(false)\n      .withStackTrace(stackTrace || \"\")\n      .build();\n  }\n\n  static getSPARQLErrorLocation(\n    query: string,\n    errorPosition?: number,\n  ): { line: number; column: number } | undefined {\n    if (!errorPosition || errorPosition < 0) return undefined;\n\n    const lines = query.split(\"\\n\");\n    let currentPosition = 0;\n\n    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      const lineLength = lines[lineIndex].length;\n\n      if (currentPosition + lineLength >= errorPosition) {\n        return {\n          line: lineIndex + 1,\n          column: errorPosition - currentPosition + 1,\n        };\n      }\n\n      currentPosition += lineLength + 1; // +1 for the newline character\n    }\n\n    return undefined;\n  }\n\n  static addPattern(pattern: ErrorPattern): void {\n    this.patterns.push(pattern);\n  }\n\n  static clearPatterns(): void {\n    this.patterns = [];\n  }\n}\n"],"version":3}