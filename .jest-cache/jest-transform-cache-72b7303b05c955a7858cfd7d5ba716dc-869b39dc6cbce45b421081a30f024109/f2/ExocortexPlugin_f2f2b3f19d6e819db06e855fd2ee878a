0117b12dc5cb6bebd28054c6e2ebc38a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const obsidian_1 = require("obsidian");
const LifecycleRegistry_1 = require("./infrastructure/lifecycle/LifecycleRegistry");
const CommandRegistry_1 = require("./presentation/command-controllers/CommandRegistry");
const ServiceProvider_1 = require("./infrastructure/providers/ServiceProvider");
const SettingsLifecycleManager_1 = require("./infrastructure/lifecycle/SettingsLifecycleManager");
const GraphLifecycleManager_1 = require("./infrastructure/lifecycle/GraphLifecycleManager");
const ProcessorLifecycleManager_1 = require("./infrastructure/lifecycle/ProcessorLifecycleManager");
const AssetCommandController_1 = require("./presentation/command-controllers/AssetCommandController");
const SPARQLCommandController_1 = require("./presentation/command-controllers/SPARQLCommandController");
const RDFCommandController_1 = require("./presentation/command-controllers/RDFCommandController");
const TaskCommandController_1 = require("./presentation/command-controllers/TaskCommandController");
/**
 * Main Plugin Class following Single Responsibility Principle
 * Single Responsibility: Coordinate plugin initialization and cleanup
 *
 * This refactored version demonstrates:
 * - Single Responsibility Principle: Only handles plugin coordination
 * - Open/Closed Principle: Extensible through registries
 * - Dependency Inversion: Depends on abstractions, not concretions
 * - Interface Segregation: Uses specific interfaces for different concerns
 * - GRASP Patterns: Controller, Creator, Pure Fabrication
 */
class ExocortexPlugin extends obsidian_1.Plugin {
    async onload() {
        try {
            // Initialize registries
            this.lifecycleRegistry = new LifecycleRegistry_1.LifecycleRegistry(this);
            this.commandRegistry = new CommandRegistry_1.CommandRegistry(this);
            // Initialize and register lifecycle managers
            await this.initializeLifecycleManagers();
            // Initialize service provider
            await this.initializeServiceProvider();
            // Initialize and register command controllers
            await this.initializeCommandControllers();
            // Initialize all managers
            await this.lifecycleRegistry.initializeAll();
            // Wire up cache invalidation callback
            this.setupCacheInvalidation();
            // Initialize all commands
            await this.commandRegistry.initializeAll();
            console.log("🔍 Exocortex Plugin initialized successfully");
        }
        catch (error) {
            console.error("Failed to initialize Exocortex Plugin:", error);
            throw error;
        }
    }
    async onunload() {
        try {
            // Cleanup in reverse order
            await this.commandRegistry?.cleanupAll();
            await this.serviceProvider?.cleanup();
            await this.lifecycleRegistry?.cleanupAll();
            console.log("🔍 Exocortex Plugin cleaned up successfully");
        }
        catch (error) {
            console.error("Error during plugin cleanup:", error);
        }
    }
    /**
     * Get plugin settings (exposed for settings tab)
     */
    get settings() {
        return this.settingsManager?.getSettings();
    }
    /**
     * Save plugin settings (exposed for settings tab)
     */
    async saveSettings() {
        await this.settingsManager?.saveSettings();
        // Update dependent services
        this.serviceProvider?.updateServices(this.settings);
        this.processorManager?.updateCacheConfig(this.settings);
    }
    /**
     * Update container (exposed for settings tab)
     */
    updateContainer() {
        this.serviceProvider?.updateServices(this.settings);
        this.processorManager?.updateCacheConfig(this.settings);
    }
    /**
     * Get SPARQL processor (exposed for testing)
     */
    get sparqlProcessor() {
        return this.processorManager?.getSPARQLProcessor();
    }
    async initializeLifecycleManagers() {
        // Create and register lifecycle managers
        this.settingsManager = new SettingsLifecycleManager_1.SettingsLifecycleManager(this);
        this.graphManager = new GraphLifecycleManager_1.GraphLifecycleManager(this);
        this.lifecycleRegistry.registerManager(this.settingsManager);
        this.lifecycleRegistry.registerManager(this.graphManager);
        // Initialize settings first (others depend on it)
        await this.settingsManager.initialize();
        // Create processor manager (depends on settings and graph)
        this.processorManager = new ProcessorLifecycleManager_1.ProcessorLifecycleManager(this, this.graphManager.getGraph(), this.settingsManager.getSettings());
        this.lifecycleRegistry.registerManager(this.processorManager);
    }
    async initializeServiceProvider() {
        this.serviceProvider = new ServiceProvider_1.ServiceProvider(this, this.graphManager.getGraph(), this.settingsManager.getSettings());
        await this.serviceProvider.initializeServices();
    }
    async initializeCommandControllers() {
        // Create and register command controllers
        const assetController = new AssetCommandController_1.AssetCommandController(this);
        const sparqlController = new SPARQLCommandController_1.SPARQLCommandController(this, this.processorManager.getSPARQLProcessor());
        const rdfController = new RDFCommandController_1.RDFCommandController(this, this.graphManager.getGraph(), this.serviceProvider.getService("RDFService"), this.processorManager.getSPARQLProcessor());
        const taskController = new TaskCommandController_1.TaskCommandController(this, this.graphManager.getGraph());
        this.commandRegistry.registerController(assetController);
        this.commandRegistry.registerController(sparqlController);
        this.commandRegistry.registerController(rdfController);
        this.commandRegistry.registerController(taskController);
    }
    setupCacheInvalidation() {
        // Setup cache invalidation callback from graph to SPARQL processor
        this.graphManager.setCacheInvalidationCallback(() => {
            this.processorManager.getSPARQLProcessor()?.invalidateCache();
        });
    }
}
exports.default = ExocortexPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,