fcf4aa57b667d76f7aaf6706f5634c57
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const QueryTemplate_1 = require("../../../../src/domain/visual/QueryTemplate");
const VisualQueryNode_1 = require("../../../../src/domain/visual/VisualQueryNode");
describe('QueryTemplate', () => {
    let template;
    let mockMetadata;
    let mockLayout;
    let mockParameters;
    beforeEach(() => {
        mockMetadata = {
            name: 'Test Template',
            description: 'A test template',
            category: QueryTemplate_1.TemplateCategory.EXPLORATION,
            tags: ['test'],
            difficulty: 'beginner',
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
            version: '1.0.0'
        };
        mockLayout = {
            nodes: [
                {
                    id: 'node1',
                    type: VisualQueryNode_1.NodeType.ENTITY,
                    label: '{{Entity Name}}',
                    position: { x: 100, y: 100 }
                }
            ],
            edges: [],
            viewport: { x: 0, y: 0, zoom: 1 }
        };
        mockParameters = [
            {
                id: 'param1',
                name: 'Entity Name',
                description: 'Name of the entity',
                type: 'entity',
                required: true
            }
        ];
        template = new QueryTemplate_1.QueryTemplate({
            id: 'test-template',
            metadata: mockMetadata,
            layout: mockLayout,
            parameters: mockParameters
        });
    });
    describe('Constructor', () => {
        it('should create a template with the provided properties', () => {
            expect(template.getId()).toBe('test-template');
            expect(template.getMetadata().name).toBe('Test Template');
            expect(template.getLayout().nodes).toHaveLength(1);
            expect(template.getParameters()).toHaveLength(1);
        });
        it('should freeze the template ID', () => {
            expect(() => {
                template.id = 'changed';
            }).toThrow();
        });
    });
    describe('Metadata Management', () => {
        it('should allow updating metadata for non-built-in templates', () => {
            const updates = {
                name: 'Updated Template',
                description: 'Updated description'
            };
            template.updateMetadata(updates);
            const metadata = template.getMetadata();
            expect(metadata.name).toBe('Updated Template');
            expect(metadata.description).toBe('Updated description');
        });
        it('should prevent updating metadata for built-in templates', () => {
            const builtInTemplate = new QueryTemplate_1.QueryTemplate({
                id: 'builtin-test',
                metadata: mockMetadata,
                layout: mockLayout,
                isBuiltIn: true
            });
            expect(() => {
                builtInTemplate.updateMetadata({ name: 'Changed' });
            }).toThrow('Cannot modify built-in templates');
        });
    });
    describe('Parameter Management', () => {
        it('should allow setting parameter values', () => {
            template.setParameterValue('Entity Name', 'test-entity');
            expect(template.getParameterValue('Entity Name')).toBe('test-entity');
        });
        it('should throw error when setting value for non-existent parameter', () => {
            expect(() => {
                template.setParameterValue('nonexistent', 'value');
            }).toThrow('Parameter nonexistent not found');
        });
        it('should validate parameter values', () => {
            const validation = template.validateParameters();
            expect(validation.isValid).toBe(false);
            expect(validation.errors).toContain('Parameter Entity Name is required');
        });
        it('should validate parameters as valid when all required parameters are set', () => {
            template.setParameterValue('param1', 'test-entity');
            const validation = template.validateParameters();
            expect(validation.isValid).toBe(true);
            expect(validation.errors).toHaveLength(0);
        });
    });
    describe('Template Instantiation', () => {
        beforeEach(() => {
            template.setParameterValue('Entity Name', 'test-entity');
        });
        it('should instantiate template with valid parameters', () => {
            const { nodes, edges } = template.instantiate();
            expect(nodes).toHaveLength(1);
            expect(edges).toHaveLength(0);
            expect(nodes[0].getLabel()).toBe('test-entity');
        });
        it('should throw error when instantiating with invalid parameters', () => {
            template.clearParameterValues();
            expect(() => {
                template.instantiate();
            }).toThrow('Template validation failed');
        });
    });
    describe('Template Cloning', () => {
        it('should create a copy of the template', () => {
            const cloned = template.clone();
            expect(cloned.getId()).not.toBe(template.getId());
            expect(cloned.getMetadata().name).toBe('Test Template (Copy)');
            expect(cloned.isBuiltInTemplate()).toBe(false);
        });
        it('should create a copy with custom ID', () => {
            const cloned = template.clone('custom-id');
            expect(cloned.getId()).toBe('custom-id');
        });
    });
    describe('JSON Serialization', () => {
        it('should serialize template to JSON', () => {
            const json = template.toJSON();
            expect(json).toHaveProperty('id');
            expect(json).toHaveProperty('metadata');
            expect(json).toHaveProperty('layout');
            expect(json).toHaveProperty('parameters');
            expect(json).toHaveProperty('isBuiltIn');
        });
    });
    describe('Static Factory Methods', () => {
        it('should create template from canvas state', () => {
            const mockNodes = new Map();
            const mockEdges = new Map();
            const mockViewport = { x: 0, y: 0, zoom: 1 };
            // Mock node
            const mockNode = {
                getId: () => 'node1',
                getType: () => VisualQueryNode_1.NodeType.ENTITY,
                getLabel: () => 'Test',
                getPosition: () => ({ x: 100, y: 100 }),
                getVariableName: () => undefined,
                getUri: () => undefined,
                getDimensions: () => ({ width: 150, height: 60 })
            };
            mockNodes.set('node1', mockNode);
            const canvasTemplate = QueryTemplate_1.QueryTemplate.fromCanvas(mockNodes, mockEdges, mockViewport, mockMetadata);
            expect(canvasTemplate.getMetadata().name).toBe('Test Template');
            expect(canvasTemplate.getLayout().nodes).toHaveLength(1);
        });
    });
    describe('Parameter Constraints', () => {
        it('should validate parameter constraints', () => {
            const constrainedParam = {
                id: 'constrained',
                name: 'Constrained Parameter',
                description: 'A parameter with constraints',
                type: 'literal',
                required: true,
                constraints: {
                    minLength: 3,
                    maxLength: 10,
                    pattern: '^[a-z]+$'
                }
            };
            template.addParameter(constrainedParam);
            // Test valid value
            template.setParameterValue('constrained', 'valid');
            expect(template.validateParameters().isValid).toBe(false); // Still need param1
            // Test invalid values
            expect(() => {
                template.setParameterValue('constrained', 'INVALID'); // Uppercase
            }).toThrow('Invalid value for parameter Constrained Parameter');
            expect(() => {
                template.setParameterValue('constrained', 'ab'); // Too short
            }).toThrow('Invalid value for parameter Constrained Parameter');
            expect(() => {
                template.setParameterValue('constrained', 'toolongvalue'); // Too long
            }).toThrow('Invalid value for parameter Constrained Parameter');
        });
        it('should validate allowed values constraint', () => {
            const selectParam = {
                id: 'select',
                name: 'Select Parameter',
                description: 'A parameter with allowed values',
                type: 'literal',
                required: true,
                constraints: {
                    allowedValues: ['option1', 'option2', 'option3']
                }
            };
            template.addParameter(selectParam);
            // Valid value
            template.setParameterValue('select', 'option1');
            // Invalid value
            expect(() => {
                template.setParameterValue('select', 'invalid');
            }).toThrow('Invalid value for parameter Select Parameter');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9kb21haW4vdmlzdWFsL1F1ZXJ5VGVtcGxhdGUudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLCtFQUFtSjtBQUNuSixtRkFBeUU7QUFHekUsUUFBUSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDM0IsSUFBSSxRQUF1QixDQUFDO0lBQzVCLElBQUksWUFBOEIsQ0FBQztJQUNuQyxJQUFJLFVBQTBCLENBQUM7SUFDL0IsSUFBSSxjQUFtQyxDQUFDO0lBRXhDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixZQUFZLEdBQUc7WUFDWCxJQUFJLEVBQUUsZUFBZTtZQUNyQixXQUFXLEVBQUUsaUJBQWlCO1lBQzlCLFFBQVEsRUFBRSxnQ0FBZ0IsQ0FBQyxXQUFXO1lBQ3RDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQztZQUNkLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLFNBQVMsRUFBRSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDakMsU0FBUyxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQztZQUNqQyxPQUFPLEVBQUUsT0FBTztTQUNuQixDQUFDO1FBRUYsVUFBVSxHQUFHO1lBQ1QsS0FBSyxFQUFFO2dCQUNIO29CQUNJLEVBQUUsRUFBRSxPQUFPO29CQUNYLElBQUksRUFBRSwwQkFBUSxDQUFDLE1BQU07b0JBQ3JCLEtBQUssRUFBRSxpQkFBaUI7b0JBQ3hCLFFBQVEsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRTtpQkFDL0I7YUFDSjtZQUNELEtBQUssRUFBRSxFQUFFO1lBQ1QsUUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7U0FDcEMsQ0FBQztRQUVGLGNBQWMsR0FBRztZQUNiO2dCQUNJLEVBQUUsRUFBRSxRQUFRO2dCQUNaLElB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LElBQUksRUFBRSxrQkFBa0I7Z0JBQ3hCLFdBQVcsRUFBRSxpQ0FBaUM7Z0JBQzlDLElBQUksRUFBRSxTQUFTO2dCQUNmLFFBQVEsRUFBRSxJQUFJO2dCQUNkLFdBQVcsRUFBRTtvQkFDVCxhQUFhLEVBQUUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztpQkFDbkQ7YUFDSixDQUFDO1lBRUYsUUFBUSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVuQyxjQUFjO1lBQ2QsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUVoRCxnQkFBZ0I7WUFDaEIsTUFBTSxDQUFDLEdBQUcsRUFBRTtnQkFDUixRQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3BELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi90ZXN0cy91bml0L2RvbWFpbi92aXN1YWwvUXVlcnlUZW1wbGF0ZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5VGVtcGxhdGUsIFRlbXBsYXRlQ2F0ZWdvcnksIFRlbXBsYXRlTWV0YWRhdGEsIFRlbXBsYXRlTGF5b3V0LCBUZW1wbGF0ZVBhcmFtZXRlciB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9kb21haW4vdmlzdWFsL1F1ZXJ5VGVtcGxhdGUnO1xuaW1wb3J0IHsgTm9kZVR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL3Zpc3VhbC9WaXN1YWxRdWVyeU5vZGUnO1xuaW1wb3J0IHsgRWRnZVR5cGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL3Zpc3VhbC9WaXN1YWxRdWVyeUVkZ2UnO1xuXG5kZXNjcmliZSgnUXVlcnlUZW1wbGF0ZScsICgpID0+IHtcbiAgICBsZXQgdGVtcGxhdGU6IFF1ZXJ5VGVtcGxhdGU7XG4gICAgbGV0IG1vY2tNZXRhZGF0YTogVGVtcGxhdGVNZXRhZGF0YTtcbiAgICBsZXQgbW9ja0xheW91dDogVGVtcGxhdGVMYXlvdXQ7XG4gICAgbGV0IG1vY2tQYXJhbWV0ZXJzOiBUZW1wbGF0ZVBhcmFtZXRlcltdO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIG1vY2tNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgIG5hbWU6ICdUZXN0IFRlbXBsYXRlJyxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQSB0ZXN0IHRlbXBsYXRlJyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBUZW1wbGF0ZUNhdGVnb3J5LkVYUExPUkFUSU9OLFxuICAgICAgICAgICAgdGFnczogWyd0ZXN0J10sXG4gICAgICAgICAgICBkaWZmaWN1bHR5OiAnYmVnaW5uZXInLFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgnMjAyNC0wMS0wMScpLFxuICAgICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgnMjAyNC0wMS0wMScpLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEuMC4wJ1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vY2tMYXlvdXQgPSB7XG4gICAgICAgICAgICBub2RlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICdub2RlMScsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IE5vZGVUeXBlLkVOVElUWSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICd7e0VudGl0eSBOYW1lfX0nLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogeyB4OiAxMDAsIHk6IDEwMCB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGVkZ2VzOiBbXSxcbiAgICAgICAgICAgIHZpZXdwb3J0OiB7IHg6IDAsIHk6IDAsIHpvb206IDEgfVxuICAgICAgICB9O1xuXG4gICAgICAgIG1vY2tQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiAncGFyYW0xJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnRW50aXR5IE5hbWUnLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTmFtZSBvZiB0aGUgZW50aXR5JyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnZW50aXR5JyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuXG4gICAgICAgIHRlbXBsYXRlID0gbmV3IFF1ZXJ5VGVtcGxhdGUoe1xuICAgICAgICAgICAgaWQ6ICd0ZXN0LXRlbXBsYXRlJyxcbiAgICAgICAgICAgIG1ldGFkYXRhOiBtb2NrTWV0YWRhdGEsXG4gICAgICAgICAgICBsYXlvdXQ6IG1vY2tMYXlvdXQsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiBtb2NrUGFyYW1ldGVyc1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdDb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICAgICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSB0ZW1wbGF0ZSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wZXJ0aWVzJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KHRlbXBsYXRlLmdldElkKCkpLnRvQmUoJ3Rlc3QtdGVtcGxhdGUnKTtcbiAgICAgICAgICAgIGV4cGVjdCh0ZW1wbGF0ZS5nZXRNZXRhZGF0YSgpLm5hbWUpLnRvQmUoJ1Rlc3QgVGVtcGxhdGUnKTtcbiAgICAgICAgICAgIGV4cGVjdCh0ZW1wbGF0ZS5nZXRMYXlvdXQoKS5ub2RlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgICAgICAgZXhwZWN0KHRlbXBsYXRlLmdldFBhcmFtZXRlcnMoKSkudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGZyZWV6ZSB0aGUgdGVtcGxhdGUgSUQnLCAoKSA9PiB7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgICh0ZW1wbGF0ZSBhcyBhbnkpLmlkID0gJ2NoYW5nZWQnO1xuICAgICAgICAgICAgfSkudG9UaHJvdygpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdNZXRhZGF0YSBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIGFsbG93IHVwZGF0aW5nIG1ldGFkYXRhIGZvciBub24tYnVpbHQtaW4gdGVtcGxhdGVzJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlcyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnVXBkYXRlZCBUZW1wbGF0ZScsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdVcGRhdGVkIGRlc2NyaXB0aW9uJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGVtcGxhdGUudXBkYXRlTWV0YWRhdGEodXBkYXRlcyk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGVtcGxhdGUuZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgICAgIGV4cGVjdChtZXRhZGF0YS5uYW1lKS50b0JlKCdVcGRhdGVkIFRlbXBsYXRlJyk7XG4gICAgICAgICAgICBleHBlY3QobWV0YWRhdGEuZGVzY3JpcHRpb24pLnRvQmUoJ1VwZGF0ZWQgZGVzY3JpcHRpb24nKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBwcmV2ZW50IHVwZGF0aW5nIG1ldGFkYXRhIGZvciBidWlsdC1pbiB0ZW1wbGF0ZXMnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidWlsdEluVGVtcGxhdGUgPSBuZXcgUXVlcnlUZW1wbGF0ZSh7XG4gICAgICAgICAgICAgICAgaWQ6ICdidWlsdGluLXRlc3QnLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtb2NrTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgbGF5b3V0OiBtb2NrTGF5b3V0LFxuICAgICAgICAgICAgICAgIGlzQnVpbHRJbjogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgYnVpbHRJblRlbXBsYXRlLnVwZGF0ZU1ldGFkYXRhKHsgbmFtZTogJ0NoYW5nZWQnIH0pO1xuICAgICAgICAgICAgfSkudG9UaHJvdygnQ2Fubm90IG1vZGlmeSBidWlsdC1pbiB0ZW1wbGF0ZXMnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUGFyYW1ldGVyIE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgYWxsb3cgc2V0dGluZyBwYXJhbWV0ZXIgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgICAgICAgdGVtcGxhdGUuc2V0UGFyYW1ldGVyVmFsdWUoJ0VudGl0eSBOYW1lJywgJ3Rlc3QtZW50aXR5Jyk7XG4gICAgICAgICAgICBleHBlY3QodGVtcGxhdGUuZ2V0UGFyYW1ldGVyVmFsdWUoJ0VudGl0eSBOYW1lJykpLnRvQmUoJ3Rlc3QtZW50aXR5Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBzZXR0aW5nIHZhbHVlIGZvciBub24tZXhpc3RlbnQgcGFyYW1ldGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZS5zZXRQYXJhbWV0ZXJWYWx1ZSgnbm9uZXhpc3RlbnQnLCAndmFsdWUnKTtcbiAgICAgICAgICAgIH0pLnRvVGhyb3coJ1BhcmFtZXRlciBub25leGlzdGVudCBub3QgZm91bmQnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBwYXJhbWV0ZXIgdmFsdWVzJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRlbXBsYXRlLnZhbGlkYXRlUGFyYW1ldGVycygpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkYXRpb24uaXNWYWxpZCkudG9CZShmYWxzZSk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWRhdGlvbi5lcnJvcnMpLnRvQ29udGFpbignUGFyYW1ldGVyIEVudGl0eSBOYW1lIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgcGFyYW1ldGVycyBhcyB2YWxpZCB3aGVuIGFsbCByZXF1aXJlZCBwYXJhbWV0ZXJzIGFyZSBzZXQnLCAoKSA9PiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5zZXRQYXJhbWV0ZXJWYWx1ZSgncGFyYW0xJywgJ3Rlc3QtZW50aXR5Jyk7XG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gdGVtcGxhdGUudmFsaWRhdGVQYXJhbWV0ZXJzKCk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWRhdGlvbi5pc1ZhbGlkKS50b0JlKHRydWUpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkYXRpb24uZXJyb3JzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1RlbXBsYXRlIEluc3RhbnRpYXRpb24nLCAoKSA9PiB7XG4gICAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICAgICAgdGVtcGxhdGUuc2V0UGFyYW1ldGVyVmFsdWUoJ0VudGl0eSBOYW1lJywgJ3Rlc3QtZW50aXR5Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5zdGFudGlhdGUgdGVtcGxhdGUgd2l0aCB2YWxpZCBwYXJhbWV0ZXJzJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBub2RlcywgZWRnZXMgfSA9IHRlbXBsYXRlLmluc3RhbnRpYXRlKCk7XG4gICAgICAgICAgICBleHBlY3Qobm9kZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgICAgICAgIGV4cGVjdChlZGdlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgICAgICAgZXhwZWN0KG5vZGVzWzBdLmdldExhYmVsKCkpLnRvQmUoJ3Rlc3QtZW50aXR5Jyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBpbnN0YW50aWF0aW5nIHdpdGggaW52YWxpZCBwYXJhbWV0ZXJzJywgKCkgPT4ge1xuICAgICAgICAgICAgdGVtcGxhdGUuY2xlYXJQYXJhbWV0ZXJWYWx1ZXMoKTtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUuaW5zdGFudGlhdGUoKTtcbiAgICAgICAgICAgIH0pLnRvVGhyb3coJ1RlbXBsYXRlIHZhbGlkYXRpb24gZmFpbGVkJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ1RlbXBsYXRlIENsb25pbmcnLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGEgY29weSBvZiB0aGUgdGVtcGxhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWQgPSB0ZW1wbGF0ZS5jbG9uZSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QoY2xvbmVkLmdldElkKCkpLm5vdC50b0JlKHRlbXBsYXRlLmdldElkKCkpO1xuICAgICAgICAgICAgZXhwZWN0KGNsb25lZC5nZXRNZXRhZGF0YSgpLm5hbWUpLnRvQmUoJ1Rlc3QgVGVtcGxhdGUgKENvcHkpJyk7XG4gICAgICAgICAgICBleHBlY3QoY2xvbmVkLmlzQnVpbHRJblRlbXBsYXRlKCkpLnRvQmUoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGNvcHkgd2l0aCBjdXN0b20gSUQnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWQgPSB0ZW1wbGF0ZS5jbG9uZSgnY3VzdG9tLWlkJyk7XG4gICAgICAgICAgICBleHBlY3QoY2xvbmVkLmdldElkKCkpLnRvQmUoJ2N1c3RvbS1pZCcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdKU09OIFNlcmlhbGl6YXRpb24nLCAoKSA9PiB7XG4gICAgICAgIGl0KCdzaG91bGQgc2VyaWFsaXplIHRlbXBsYXRlIHRvIEpTT04nLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBqc29uID0gdGVtcGxhdGUudG9KU09OKCk7XG4gICAgICAgICAgICBleHBlY3QoanNvbikudG9IYXZlUHJvcGVydHkoJ2lkJyk7XG4gICAgICAgICAgICBleHBlY3QoanNvbikudG9IYXZlUHJvcGVydHkoJ21ldGFkYXRhJyk7XG4gICAgICAgICAgICBleHBlY3QoanNvbikudG9IYXZlUHJvcGVydHkoJ2xheW91dCcpO1xuICAgICAgICAgICAgZXhwZWN0KGpzb24pLnRvSGF2ZVByb3BlcnR5KCdwYXJhbWV0ZXJzJyk7XG4gICAgICAgICAgICBleHBlY3QoanNvbikudG9IYXZlUHJvcGVydHkoJ2lzQnVpbHRJbicpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdTdGF0aWMgRmFjdG9yeSBNZXRob2RzJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIGNyZWF0ZSB0ZW1wbGF0ZSBmcm9tIGNhbnZhcyBzdGF0ZScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tOb2RlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tFZGdlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGNvbnN0IG1vY2tWaWV3cG9ydCA9IHsgeDogMCwgeTogMCwgem9vbTogMSB9O1xuXG4gICAgICAgICAgICAvLyBNb2NrIG5vZGVcbiAgICAgICAgICAgIGNvbnN0IG1vY2tOb2RlID0ge1xuICAgICAgICAgICAgICAgIGdldElkOiAoKSA9PiAnbm9kZTEnLFxuICAgICAgICAgICAgICAgIGdldFR5cGU6ICgpID0+IE5vZGVUeXBlLkVOVElUWSxcbiAgICAgICAgICAgICAgICBnZXRMYWJlbDogKCkgPT4gJ1Rlc3QnLFxuICAgICAgICAgICAgICAgIGdldFBvc2l0aW9uOiAoKSA9PiAoeyB4OiAxMDAsIHk6IDEwMCB9KSxcbiAgICAgICAgICAgICAgICBnZXRWYXJpYWJsZU5hbWU6ICgpID0+IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBnZXRVcmk6ICgpID0+IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBnZXREaW1lbnNpb25zOiAoKSA9PiAoeyB3aWR0aDogMTUwLCBoZWlnaHQ6IDYwIH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbW9ja05vZGVzLnNldCgnbm9kZTEnLCBtb2NrTm9kZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhbnZhc1RlbXBsYXRlID0gUXVlcnlUZW1wbGF0ZS5mcm9tQ2FudmFzKFxuICAgICAgICAgICAgICAgIG1vY2tOb2RlcyBhcyBhbnksXG4gICAgICAgICAgICAgICAgbW9ja0VkZ2VzIGFzIGFueSxcbiAgICAgICAgICAgICAgICBtb2NrVmlld3BvcnQsXG4gICAgICAgICAgICAgICAgbW9ja01ldGFkYXRhXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBleHBlY3QoY2FudmFzVGVtcGxhdGUuZ2V0TWV0YWRhdGEoKS5uYW1lKS50b0JlKCdUZXN0IFRlbXBsYXRlJyk7XG4gICAgICAgICAgICBleHBlY3QoY2FudmFzVGVtcGxhdGUuZ2V0TGF5b3V0KCkubm9kZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUGFyYW1ldGVyIENvbnN0cmFpbnRzJywgKCkgPT4ge1xuICAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHBhcmFtZXRlciBjb25zdHJhaW50cycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnN0cmFpbmVkUGFyYW06IFRlbXBsYXRlUGFyYW1ldGVyID0ge1xuICAgICAgICAgICAgICAgIGlkOiAnY29uc3RyYWluZWQnLFxuICAgICAgICAgICAgICAgIG5hbWU6ICdDb25zdHJhaW5lZCBQYXJhbWV0ZXInLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQSBwYXJhbWV0ZXIgd2l0aCBjb25zdHJhaW50cycsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpdGVyYWwnLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aDogMyxcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogJ15bYS16XSskJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRlbXBsYXRlLmFkZFBhcmFtZXRlcihjb25zdHJhaW5lZFBhcmFtKTtcblxuICAgICAgICAgICAgLy8gVGVzdCB2YWxpZCB2YWx1ZVxuICAgICAgICAgICAgdGVtcGxhdGUuc2V0UGFyYW1ldGVyVmFsdWUoJ2NvbnN0cmFpbmVkJywgJ3ZhbGlkJyk7XG4gICAgICAgICAgICBleHBlY3QodGVtcGxhdGUudmFsaWRhdGVQYXJhbWV0ZXJzKCkuaXNWYWxpZCkudG9CZShmYWxzZSk7IC8vIFN0aWxsIG5lZWQgcGFyYW0xXG5cbiAgICAgICAgICAgIC8vIFRlc3QgaW52YWxpZCB2YWx1ZXNcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUuc2V0UGFyYW1ldGVyVmFsdWUoJ2NvbnN0cmFpbmVkJywgJ0lOVkFMSUQnKTsgLy8gVXBwZXJjYXNlXG4gICAgICAgICAgICB9KS50b1Rocm93KCdJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgQ29uc3RyYWluZWQgUGFyYW1ldGVyJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGUuc2V0UGFyYW1ldGVyVmFsdWUoJ2NvbnN0cmFpbmVkJywgJ2FiJyk7IC8vIFRvbyBzaG9ydFxuICAgICAgICAgICAgfSkudG9UaHJvdygnSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyIENvbnN0cmFpbmVkIFBhcmFtZXRlcicpO1xuXG4gICAgICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnNldFBhcmFtZXRlclZhbHVlKCdjb25zdHJhaW5lZCcsICd0b29sb25ndmFsdWUnKTsgLy8gVG9vIGxvbmdcbiAgICAgICAgICAgIH0pLnRvVGhyb3coJ0ludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciBDb25zdHJhaW5lZCBQYXJhbWV0ZXInKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSBhbGxvd2VkIHZhbHVlcyBjb25zdHJhaW50JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0UGFyYW06IFRlbXBsYXRlUGFyYW1ldGVyID0ge1xuICAgICAgICAgICAgICAgIGlkOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnU2VsZWN0IFBhcmFtZXRlcicsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBIHBhcmFtZXRlciB3aXRoIGFsbG93ZWQgdmFsdWVzJyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGl0ZXJhbCcsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29uc3RyYWludHM6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dlZFZhbHVlczogWydvcHRpb24xJywgJ29wdGlvbjInLCAnb3B0aW9uMyddXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGVtcGxhdGUuYWRkUGFyYW1ldGVyKHNlbGVjdFBhcmFtKTtcblxuICAgICAgICAgICAgLy8gVmFsaWQgdmFsdWVcbiAgICAgICAgICAgIHRlbXBsYXRlLnNldFBhcmFtZXRlclZhbHVlKCdzZWxlY3QnLCAnb3B0aW9uMScpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJbnZhbGlkIHZhbHVlXG4gICAgICAgICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlLnNldFBhcmFtZXRlclZhbHVlKCdzZWxlY3QnLCAnaW52YWxpZCcpO1xuICAgICAgICAgICAgfSkudG9UaHJvdygnSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyIFNlbGVjdCBQYXJhbWV0ZXInKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=