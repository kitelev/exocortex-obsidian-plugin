{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/integration/PropertyEditingUseCase.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/integration/PropertyEditingUseCase.test.ts"],"sourcesContent":["import { PropertyEditingUseCase } from \"../../src/application/use-cases/PropertyEditingUseCase\";\nimport { IAssetRepository } from \"../../src/domain/repositories/IAssetRepository\";\nimport { Asset } from \"../../src/domain/entities/Asset\";\nimport { AssetId } from \"../../src/domain/value-objects/AssetId\";\nimport { ClassName } from \"../../src/domain/value-objects/ClassName\";\nimport { OntologyPrefix } from \"../../src/domain/value-objects/OntologyPrefix\";\n\ndescribe(\"PropertyEditingUseCase Integration\", () => {\n  let useCase: PropertyEditingUseCase;\n  let mockRepository: jest.Mocked<IAssetRepository>;\n  let mockPlugin: any;\n\n  beforeEach(() => {\n    mockRepository = {\n      findById: jest.fn(),\n      findByFilename: jest.fn(),\n      findByClass: jest.fn(),\n      findByOntology: jest.fn(),\n      save: jest.fn(),\n      delete: jest.fn(),\n      exists: jest.fn(),\n      findAll: jest.fn(),\n    } as any;\n\n    mockPlugin = {\n      findPropertiesForClass: jest.fn(),\n      findAssetsByClass: jest.fn(),\n    };\n\n    useCase = new PropertyEditingUseCase(mockRepository, mockPlugin);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n    // Clear references to prevent memory leaks\n    mockRepository = null as any;\n    mockPlugin = null as any;\n    useCase = null as any;\n  });\n\n  describe(\"execute with different asset identifiers\", () => {\n    let testAsset: Asset;\n\n    beforeEach(() => {\n      const assetId = AssetId.generate();\n      const className = ClassName.create(\"TestClass\").getValue()!;\n      const ontology = OntologyPrefix.create(\"test\").getValue()!;\n\n      const assetResult = Asset.create({\n        id: assetId,\n        label: \"Test Asset\",\n        className: className,\n        ontology: ontology,\n        properties: { testProp: \"oldValue\" },\n      });\n\n      if (!assetResult.isSuccess) {\n        throw new Error(\n          `Failed to create test asset: ${assetResult.getError()}`,\n        );\n      }\n\n      testAsset = assetResult.getValue()!;\n    });\n\n    it(\"should find asset by UUID and update property\", async () => {\n      mockRepository.findById.mockResolvedValue(testAsset);\n      mockRepository.save.mockResolvedValue(undefined);\n\n      const result = await useCase.execute({\n        assetId: testAsset.getId().toString(),\n        propertyName: \"testProp\",\n        value: \"newValue\",\n        propertyDefinition: {\n          propertyName: \"testProp\",\n          label: \"Test Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      });\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockRepository.findById).toHaveBeenCalled();\n      expect(mockRepository.save).toHaveBeenCalled();\n    });\n\n    it(\"should fallback to filename when UUID not found\", async () => {\n      mockRepository.findById.mockResolvedValue(null);\n      mockRepository.findByFilename.mockResolvedValue(testAsset);\n      mockRepository.save.mockResolvedValue(undefined);\n\n      // Mock the updateFrontmatterByPath method for file path handling\n      const mockUpdateFrontmatterByPath = jest\n        .fn()\n        .mockResolvedValue(undefined);\n      (mockRepository as any).updateFrontmatterByPath =\n        mockUpdateFrontmatterByPath;\n\n      const result = await useCase.execute({\n        assetId: \"MyAsset.md\",\n        propertyName: \"testProp\",\n        value: \"newValue\",\n        propertyDefinition: {\n          propertyName: \"testProp\",\n          label: \"Test Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      });\n\n      expect(result.isSuccess).toBe(true);\n      // For .md files, it should use the direct path update method\n      expect(mockUpdateFrontmatterByPath).toHaveBeenCalledWith(\"MyAsset.md\", {\n        testProp: \"newValue\",\n      });\n    });\n\n    it(\"should handle filename without extension\", async () => {\n      mockRepository.findById.mockResolvedValue(null);\n      mockRepository.findByFilename.mockResolvedValue(testAsset);\n      mockRepository.save.mockResolvedValue(undefined);\n\n      const result = await useCase.execute({\n        assetId: \"MyAsset\",\n        propertyName: \"testProp\",\n        value: \"newValue\",\n        propertyDefinition: {\n          propertyName: \"testProp\",\n          label: \"Test Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      });\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockRepository.findByFilename).toHaveBeenCalledWith(\"MyAsset\");\n    });\n\n    it(\"should return error when asset not found by any method\", async () => {\n      mockRepository.findById.mockResolvedValue(null);\n      mockRepository.findByFilename.mockResolvedValue(null);\n\n      const result = await useCase.execute({\n        assetId: \"NonExistent\",\n        propertyName: \"testProp\",\n        value: \"newValue\",\n        propertyDefinition: {\n          propertyName: \"testProp\",\n          label: \"Test Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Asset not found\");\n    });\n\n    it(\"should handle file paths as identifiers\", async () => {\n      // Mock the updateFrontmatterByPath method for file path handling\n      const mockUpdateFrontmatterByPath = jest\n        .fn()\n        .mockResolvedValue(undefined);\n      (mockRepository as any).updateFrontmatterByPath =\n        mockUpdateFrontmatterByPath;\n\n      const result = await useCase.execute({\n        assetId: \"folder/subfolder/MyAsset.md\",\n        propertyName: \"testProp\",\n        value: \"newValue\",\n        propertyDefinition: {\n          propertyName: \"testProp\",\n          label: \"Test Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      });\n\n      expect(result.isSuccess).toBe(true);\n      // For file paths with slashes, it should use the direct path update method\n      expect(mockUpdateFrontmatterByPath).toHaveBeenCalledWith(\n        \"folder/subfolder/MyAsset.md\",\n        {\n          testProp: \"newValue\",\n        },\n      );\n    });\n  });\n\n  describe(\"property validation\", () => {\n    const testAsset = Asset.create({\n      id: AssetId.generate(),\n      label: \"Test Asset\",\n      className: ClassName.create(\"TestClass\").getValue()!,\n      ontology: OntologyPrefix.create(\"test\").getValue()!,\n      properties: {},\n    }).getValue()!;\n\n    beforeEach(() => {\n      mockRepository.findById.mockResolvedValue(testAsset);\n      mockRepository.save.mockResolvedValue(undefined);\n      // Mock the updateFrontmatterByPath method for property validation tests\n      (mockRepository as any).updateFrontmatterByPath = jest\n        .fn()\n        .mockResolvedValue(undefined);\n    });\n\n    it(\"should validate required fields\", async () => {\n      const validUuid = testAsset.getId().toString();\n\n      const result = await useCase.execute({\n        assetId: validUuid,\n        propertyName: \"requiredProp\",\n        value: \"\",\n        propertyDefinition: {\n          propertyName: \"requiredProp\",\n          label: \"Required Property\",\n          range: \"string\",\n          isRequired: true,\n        },\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Required Property is required\");\n    });\n\n    it(\"should allow empty values for optional fields\", async () => {\n      // Use a valid UUID as assetId and set up proper mocks\n      const validUuid = testAsset.getId().toString();\n\n      const result = await useCase.execute({\n        assetId: validUuid,\n        propertyName: \"optionalProp\",\n        value: \"\",\n        propertyDefinition: {\n          propertyName: \"optionalProp\",\n          label: \"Optional Property\",\n          range: \"string\",\n          isRequired: false,\n        },\n      });\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    it(\"should validate enum values\", async () => {\n      const validUuid = testAsset.getId().toString();\n\n      const result = await useCase.execute({\n        assetId: validUuid,\n        propertyName: \"statusProp\",\n        value: \"invalid\",\n        propertyDefinition: {\n          propertyName: \"statusProp\",\n          label: \"Status\",\n          range: \"enum:pending,active,completed\",\n          isRequired: true,\n        },\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\n        \"Status must be one of: pending, active, completed\",\n      );\n    });\n\n    it(\"should validate date format\", async () => {\n      const validUuid = testAsset.getId().toString();\n\n      const result = await useCase.execute({\n        assetId: validUuid,\n        propertyName: \"dateProp\",\n        value: \"not-a-date\",\n        propertyDefinition: {\n          propertyName: \"dateProp\",\n          label: \"Date\",\n          range: \"date\",\n          isRequired: true,\n        },\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Date must be a valid date\");\n    });\n\n    it(\"should validate custom regex patterns\", async () => {\n      const validUuid = testAsset.getId().toString();\n\n      const result = await useCase.execute({\n        assetId: validUuid,\n        propertyName: \"emailProp\",\n        value: \"invalid-email\",\n        propertyDefinition: {\n          propertyName: \"emailProp\",\n          label: \"Email\",\n          range: \"string\",\n          isRequired: true,\n          validation: \"^[\\\\w\\\\.-]+@[\\\\w\\\\.-]+\\\\.\\\\w+$\",\n        },\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Email format is invalid\");\n    });\n  });\n});\n"],"version":3}