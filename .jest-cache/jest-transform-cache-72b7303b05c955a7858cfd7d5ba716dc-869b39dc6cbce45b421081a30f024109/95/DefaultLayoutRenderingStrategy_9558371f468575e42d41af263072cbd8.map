{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/strategies/DefaultLayoutRenderingStrategy.ts","mappings":";;;AAAA,qDAAkD;AAWlD,MAAa,8BAA8B;IAGzC,YAA6B,oBAA2C;QAA3C,yBAAoB,GAApB,oBAAoB,CAAuB;IAAG,CAAC;IAE5E,SAAS,CAAC,MAA0B;QAClC,OAAO,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,CAAC;IACjD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAA+B;QAC1C,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YACtB,OAAO,eAAM,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;SAC3D;QAED,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAE;YAClC,OAAO,IAAI,CAAC,WAAW,CACrB,OAAO,CAAC,SAAS,EACjB,qCAAqC,CACtC,CAAC;SACH;QAED,IAAI;YACF,MAAM,WAAW,GAAG,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC;YAEjD,qDAAqD;YACrD,MAAM,IAAI,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC;YAEhD,OAAO,eAAM,CAAC,EAAE,EAAE,CAAC;SACpB;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,eAAM,CAAC,IAAI,CAAC,oCAAoC,KAAK,EAAE,CAAC,CAAC;SACjE;IACH,CAAC;IAEO,KAAK,CAAC,2BAA2B,CACvC,OAA+B;QAE/B,MAAM,kBAAkB,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC;YACrD,GAAG,EAAE,mDAAmD;SACzD,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,SAAS,CAAC;YACpD,GAAG,EAAE,yBAAyB;SAC/B,CAAC,CAAC;QAEH,MAAM,cAAc,GAClB,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAChE,IAAI,cAAc,CAAC,SAAS,EAAE;YAC5B,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC;YAC3C,MAAM,YAAY,GAA0B;gBAC1C,SAAS,EAAE,gBAAgB;gBAC3B,MAAM,EAAE;oBACN,IAAI,EAAE,mBAAmB;oBACzB,iBAAiB,EAAE,CAAC,eAAe,EAAE,qBAAqB,CAAC;oBAC3D,mBAAmB,EAAE,KAAK;iBAC3B;gBACD,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,WAAW,EAAE,OAAO,CAAC,QAAQ,CAAC,WAAW;gBACzC,WAAW,EAAE,OAAO,CAAC,WAAW;aACjC,CAAC;YAEF,MAAM,QAAQ,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;SACrC;IACH,CAAC;IAEO,WAAW,CAAC,SAAsB,EAAE,KAAa;QACvD,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE;YACxB,IAAI,EAAE,iBAAiB,KAAK,EAAE;YAC9B,GAAG,EAAE,8BAA8B;SACpC,CAAC,CAAC;QACH,OAAO,eAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAEO,cAAc,CAAC,SAAc;QACnC,IAAI,CAAC,SAAS;YAAE,OAAO,EAAE,CAAC;QAC1B,MAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAChE,OAAO,GAAG,EAAE,QAAQ,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;IACzD,CAAC;CACF;AA5ED,wEA4EC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/strategies/DefaultLayoutRenderingStrategy.ts"],"sourcesContent":["import { Result } from \"../../domain/core/Result\";\nimport { ClassLayout } from \"../../domain/entities/ClassLayout\";\nimport {\n  ILayoutRenderingStrategy,\n  LayoutRenderingContext,\n} from \"./ILayoutRenderingStrategy\";\nimport {\n  IBlockRendererFactory,\n  BlockRenderingContext,\n} from \"../factories/IBlockRendererFactory\";\n\nexport class DefaultLayoutRenderingStrategy\n  implements ILayoutRenderingStrategy\n{\n  constructor(private readonly blockRendererFactory: IBlockRendererFactory) {}\n\n  canHandle(layout: ClassLayout | null): boolean {\n    return layout === null || layout === undefined;\n  }\n\n  async render(context: LayoutRenderingContext): Promise<Result<void>> {\n    if (!context.container) {\n      return Result.fail(\"Container is required for rendering\");\n    }\n\n    if (!context.metadata?.frontmatter) {\n      return this.renderError(\n        context.container,\n        \"No metadata available for this file\",\n      );\n    }\n\n    try {\n      const frontmatter = context.metadata.frontmatter;\n\n      // Render only dynamic backlinks in simplified system\n      await this.renderDynamicBacklinksBlock(context);\n\n      return Result.ok();\n    } catch (error) {\n      return Result.fail(`Default layout rendering failed: ${error}`);\n    }\n  }\n\n  private async renderDynamicBacklinksBlock(\n    context: LayoutRenderingContext,\n  ): Promise<void> {\n    const backlinksContainer = context.container.createDiv({\n      cls: \"exocortex-block exocortex-block-dynamic-backlinks\",\n    });\n    const backlinksContent = backlinksContainer.createDiv({\n      cls: \"exocortex-block-content\",\n    });\n\n    const rendererResult =\n      this.blockRendererFactory.createRenderer(\"dynamic-backlinks\");\n    if (rendererResult.isSuccess) {\n      const renderer = rendererResult.getValue();\n      const blockContext: BlockRenderingContext = {\n        container: backlinksContent,\n        config: {\n          type: \"dynamic-backlinks\",\n          excludeProperties: [\"exo__Asset_id\", \"exo__Instance_class\"],\n          showEmptyProperties: false,\n        },\n        file: context.file,\n        frontmatter: context.metadata.frontmatter,\n        dataviewApi: context.dataviewApi,\n      };\n\n      await renderer.render(blockContext);\n    }\n  }\n\n  private renderError(container: HTMLElement, error: string): Result<void> {\n    container.createEl(\"div\", {\n      text: `Layout Error: ${error}`,\n      cls: \"exocortex-error notice-error\",\n    });\n    return Result.fail(error);\n  }\n\n  private cleanClassName(className: any): string {\n    if (!className) return \"\";\n    const str = Array.isArray(className) ? className[0] : className;\n    return str?.toString().replace(/\\[\\[|\\]\\]/g, \"\") || \"\";\n  }\n}\n"],"version":3}