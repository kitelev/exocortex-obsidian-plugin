e5130a169f01b2f5aa4873a2040c7680
"use strict";

/* istanbul ignore next */
function cov_jndjmuhmj() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/SPARQLAutocompleteService.ts";
  var hash = "e4292ee0853bc7c816b125acba0ac6c941975cf9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/SPARQLAutocompleteService.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 43
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 5,
          column: 80
        }
      },
      "4": {
        start: {
          line: 6,
          column: 23
        },
        end: {
          line: 6,
          column: 72
        }
      },
      "5": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 52
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 57
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 27
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 31
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 40
        }
      },
      "11": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 45,
          column: 11
        }
      },
      "12": {
        start: {
          line: 18,
          column: 12
        },
        end: {
          line: 44,
          column: 13
        }
      },
      "13": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 22,
          column: 17
        }
      },
      "14": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 86
        }
      },
      "15": {
        start: {
          line: 23,
          column: 16
        },
        end: {
          line: 26,
          column: 17
        }
      },
      "16": {
        start: {
          line: 25,
          column: 20
        },
        end: {
          line: 25,
          column: 50
        }
      },
      "17": {
        start: {
          line: 27,
          column: 32
        },
        end: {
          line: 27,
          column: 74
        }
      },
      "18": {
        start: {
          line: 28,
          column: 16
        },
        end: {
          line: 33,
          column: 17
        }
      },
      "19": {
        start: {
          line: 29,
          column: 35
        },
        end: {
          line: 29,
          column: 69
        }
      },
      "20": {
        start: {
          line: 30,
          column: 20
        },
        end: {
          line: 32,
          column: 21
        }
      },
      "21": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 58
        }
      },
      "22": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 34,
          column: 83
        }
      },
      "23": {
        start: {
          line: 35,
          column: 42
        },
        end: {
          line: 35,
          column: 93
        }
      },
      "24": {
        start: {
          line: 36,
          column: 43
        },
        end: {
          line: 36,
          column: 123
        }
      },
      "25": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 39,
          column: 17
        }
      },
      "26": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 71
        }
      },
      "27": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 62
        }
      },
      "28": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 132
        }
      },
      "29": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 64
        }
      },
      "30": {
        start: {
          line: 49,
          column: 29
        },
        end: {
          line: 49,
          column: 72
        }
      },
      "31": {
        start: {
          line: 50,
          column: 31
        },
        end: {
          line: 50,
          column: 95
        }
      },
      "32": {
        start: {
          line: 50,
          column: 50
        },
        end: {
          line: 50,
          column: 77
        }
      },
      "33": {
        start: {
          line: 50,
          column: 88
        },
        end: {
          line: 50,
          column: 94
        }
      },
      "34": {
        start: {
          line: 51,
          column: 26
        },
        end: {
          line: 51,
          column: 54
        }
      },
      "35": {
        start: {
          line: 52,
          column: 30
        },
        end: {
          line: 52,
          column: 77
        }
      },
      "36": {
        start: {
          line: 53,
          column: 24
        },
        end: {
          line: 53,
          column: 50
        }
      },
      "37": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 62,
          column: 11
        }
      },
      "38": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 65,
          column: 25
        }
      },
      "39": {
        start: {
          line: 66,
          column: 22
        },
        end: {
          line: 66,
          column: 28
        }
      },
      "40": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "41": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 70,
          column: 22
        }
      },
      "42": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 22
        }
      },
      "43": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 74,
          column: 15
        }
      },
      "44": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 22
        }
      },
      "45": {
        start: {
          line: 79,
          column: 29
        },
        end: {
          line: 79,
          column: 63
        }
      },
      "46": {
        start: {
          line: 80,
          column: 28
        },
        end: {
          line: 80,
          column: 59
        }
      },
      "47": {
        start: {
          line: 81,
          column: 28
        },
        end: {
          line: 81,
          column: 54
        }
      },
      "48": {
        start: {
          line: 82,
          column: 27
        },
        end: {
          line: 82,
          column: 52
        }
      },
      "49": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 83,
          column: 56
        }
      },
      "50": {
        start: {
          line: 84,
          column: 22
        },
        end: {
          line: 84,
          column: 53
        }
      },
      "51": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 30
        }
      },
      "52": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 89,
          column: 24
        }
      },
      "53": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 89,
          column: 24
        }
      },
      "54": {
        start: {
          line: 90,
          column: 27
        },
        end: {
          line: 90,
          column: 55
        }
      },
      "55": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "56": {
        start: {
          line: 92,
          column: 27
        },
        end: {
          line: 92,
          column: 66
        }
      },
      "57": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 72
        }
      },
      "58": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 60
        }
      },
      "59": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 70
        }
      },
      "60": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 66
        }
      },
      "61": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 66
        }
      },
      "62": {
        start: {
          line: 98,
          column: 21
        },
        end: {
          line: 98,
          column: 33
        }
      },
      "63": {
        start: {
          line: 102,
          column: 29
        },
        end: {
          line: 102,
          column: 77
        }
      },
      "64": {
        start: {
          line: 103,
          column: 31
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "65": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 117,
          column: 9
        }
      },
      "66": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "67": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 28
        }
      },
      "68": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 20
        }
      },
      "69": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 121,
          column: 26
        }
      },
      "70": {
        start: {
          line: 122,
          column: 28
        },
        end: {
          line: 122,
          column: 75
        }
      },
      "71": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 132,
          column: 9
        }
      },
      "72": {
        start: {
          line: 124,
          column: 30
        },
        end: {
          line: 124,
          column: 67
        }
      },
      "73": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 131,
          column: 15
        }
      },
      "74": {
        start: {
          line: 133,
          column: 27
        },
        end: {
          line: 133,
          column: 62
        }
      },
      "75": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 143,
          column: 9
        }
      },
      "76": {
        start: {
          line: 135,
          column: 30
        },
        end: {
          line: 135,
          column: 66
        }
      },
      "77": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 142,
          column: 15
        }
      },
      "78": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 23
        }
      },
      "79": {
        start: {
          line: 147,
          column: 26
        },
        end: {
          line: 147,
          column: 35
        }
      },
      "80": {
        start: {
          line: 148,
          column: 22
        },
        end: {
          line: 148,
          column: 32
        }
      },
      "81": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "82": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 36
        }
      },
      "83": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 37
        }
      },
      "84": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "85": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 157,
          column: 34
        }
      },
      "86": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 158,
          column: 31
        }
      },
      "87": {
        start: {
          line: 159,
          column: 12
        },
        end: {
          line: 161,
          column: 13
        }
      },
      "88": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 89
        }
      },
      "89": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "90": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 90
        }
      },
      "91": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "92": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 87
        }
      },
      "93": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 170,
          column: 13
        }
      },
      "94": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 90
        }
      },
      "95": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "96": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 90
        }
      },
      "97": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "98": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 90
        }
      },
      "99": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 177,
          column: 55
        }
      },
      "100": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "101": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "102": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 59
        }
      },
      "103": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 60
        }
      },
      "104": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 20
        }
      },
      "105": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 193,
          column: 65
        }
      },
      "106": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 196,
          column: 58
        }
      },
      "107": {
        start: {
          line: 197,
          column: 24
        },
        end: {
          line: 197,
          column: 58
        }
      },
      "108": {
        start: {
          line: 198,
          column: 8
        },
        end: {
          line: 200,
          column: 54
        }
      },
      "109": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 207,
          column: 64
        }
      },
      "110": {
        start: {
          line: 210,
          column: 22
        },
        end: {
          line: 210,
          column: 54
        }
      },
      "111": {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 211,
          column: 53
        }
      },
      "112": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "113": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 24
        }
      },
      "114": {
        start: {
          line: 217,
          column: 29
        },
        end: {
          line: 217,
          column: 58
        }
      },
      "115": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "116": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 24
        }
      },
      "117": {
        start: {
          line: 222,
          column: 29
        },
        end: {
          line: 222,
          column: 68
        }
      },
      "118": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 226,
          column: 44
        }
      },
      "119": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 230,
          column: 78
        }
      },
      "120": {
        start: {
          line: 233,
          column: 21
        },
        end: {
          line: 233,
          column: 30
        }
      },
      "121": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 240,
          column: 11
        }
      },
      "122": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 235,
          column: 55
        }
      },
      "123": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 237,
          column: 29
        }
      },
      "124": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 29
        }
      },
      "125": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 26
        }
      },
      "126": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 24
        }
      },
      "127": {
        start: {
          line: 243,
          column: 29
        },
        end: {
          line: 243,
          column: 68
        }
      },
      "128": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 256,
          column: 42
        }
      },
      "129": {
        start: {
          line: 246,
          column: 24
        },
        end: {
          line: 246,
          column: 56
        }
      },
      "130": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "131": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 29
        }
      },
      "132": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "133": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 29
        }
      },
      "134": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 253,
          column: 41
        }
      },
      "135": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 255,
          column: 45
        }
      },
      "136": {
        start: {
          line: 256,
          column: 25
        },
        end: {
          line: 256,
          column: 40
        }
      },
      "137": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 264,
          column: 9
        }
      },
      "138": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 261,
          column: 29
        }
      },
      "139": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 29
        }
      },
      "140": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 263,
          column: 29
        }
      },
      "141": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 29
        }
      },
      "142": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "143": {
        start: {
          line: 266,
          column: 33
        },
        end: {
          line: 266,
          column: 62
        }
      },
      "144": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "145": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 28
        }
      },
      "146": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 20
        }
      },
      "147": {
        start: {
          line: 274,
          column: 25
        },
        end: {
          line: 274,
          column: 50
        }
      },
      "148": {
        start: {
          line: 275,
          column: 23
        },
        end: {
          line: 275,
          column: 47
        }
      },
      "149": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 277,
          column: 24
        }
      },
      "150": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 24
        }
      },
      "151": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "152": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 40
        }
      },
      "153": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 24
        }
      },
      "154": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 34
        }
      },
      "155": {
        start: {
          line: 285,
          column: 25
        },
        end: {
          line: 285,
          column: 50
        }
      },
      "156": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "157": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "158": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 59
        }
      },
      "159": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 293,
          column: 44
        }
      },
      "160": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 44
        }
      },
      "161": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 110
        }
      },
      "162": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 27
        }
      },
      "163": {
        start: {
          line: 303,
          column: 0
        },
        end: {
          line: 303,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 45
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 56
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 55
          },
          end: {
            line: 17,
            column: 56
          }
        },
        loc: {
          start: {
            line: 17,
            column: 68
          },
          end: {
            line: 45,
            column: 9
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 42
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 50,
            column: 45
          },
          end: {
            line: 50,
            column: 46
          }
        },
        loc: {
          start: {
            line: 50,
            column: 50
          },
          end: {
            line: 50,
            column: 77
          }
        },
        line: 50
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 83
          },
          end: {
            line: 50,
            column: 84
          }
        },
        loc: {
          start: {
            line: 50,
            column: 88
          },
          end: {
            line: 50,
            column: 94
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 37
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 43
          },
          end: {
            line: 86,
            column: 5
          }
        },
        line: 78
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        loc: {
          start: {
            line: 87,
            column: 28
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 87
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 47
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 101
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 26
          },
          end: {
            line: 145,
            column: 5
          }
        },
        line: 120
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        loc: {
          start: {
            line: 146,
            column: 27
          },
          end: {
            line: 154,
            column: 5
          }
        },
        line: 146
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        loc: {
          start: {
            line: 155,
            column: 41
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 55
          },
          end: {
            line: 156,
            column: 56
          }
        },
        loc: {
          start: {
            line: 156,
            column: 68
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 35
          },
          end: {
            line: 189,
            column: 5
          }
        },
        line: 186
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 190,
            column: 4
          },
          end: {
            line: 190,
            column: 5
          }
        },
        loc: {
          start: {
            line: 190,
            column: 37
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 190
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 34
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 195
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 36
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 202
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 36
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 209
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        loc: {
          start: {
            line: 228,
            column: 36
          },
          end: {
            line: 231,
            column: 5
          }
        },
        line: 228
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 40
          },
          end: {
            line: 241,
            column: 5
          }
        },
        line: 232
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 234,
            column: 34
          },
          end: {
            line: 234,
            column: 35
          }
        },
        loc: {
          start: {
            line: 234,
            column: 39
          },
          end: {
            line: 240,
            column: 9
          }
        },
        line: 234
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        loc: {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 242
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 245,
            column: 17
          },
          end: {
            line: 245,
            column: 18
          }
        },
        loc: {
          start: {
            line: 245,
            column: 31
          },
          end: {
            line: 254,
            column: 9
          }
        },
        line: 245
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 255,
            column: 18
          },
          end: {
            line: 255,
            column: 19
          }
        },
        loc: {
          start: {
            line: 255,
            column: 28
          },
          end: {
            line: 255,
            column: 45
          }
        },
        line: 255
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 256,
            column: 17
          },
          end: {
            line: 256,
            column: 18
          }
        },
        loc: {
          start: {
            line: 256,
            column: 25
          },
          end: {
            line: 256,
            column: 40
          }
        },
        line: 256
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 48
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 258
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 273,
            column: 4
          },
          end: {
            line: 273,
            column: 5
          }
        },
        loc: {
          start: {
            line: 273,
            column: 34
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 273
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 43
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 284
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 25
          },
          end: {
            line: 298,
            column: 5
          }
        },
        line: 296
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 17
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 299
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 42
          },
          end: {
            line: 16,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 52
          },
          end: {
            line: 16,
            column: 54
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 22,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 22,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 26,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 26,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 33,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 33,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 32,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 20
          },
          end: {
            line: 32,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 36,
            column: 70
          },
          end: {
            line: 36,
            column: 122
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 70
          },
          end: {
            line: 36,
            column: 92
          }
        }, {
          start: {
            line: 36,
            column: 96
          },
          end: {
            line: 36,
            column: 122
          }
        }],
        line: 36
      },
      "6": {
        loc: {
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 16
          },
          end: {
            line: 39,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "7": {
        loc: {
          start: {
            line: 43,
            column: 74
          },
          end: {
            line: 43,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 43,
            column: 99
          },
          end: {
            line: 43,
            column: 112
          }
        }, {
          start: {
            line: 43,
            column: 115
          },
          end: {
            line: 43,
            column: 128
          }
        }],
        line: 43
      },
      "8": {
        loc: {
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 12
          },
          end: {
            line: 70,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "9": {
        loc: {
          start: {
            line: 83,
            column: 23
          },
          end: {
            line: 83,
            column: 56
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 83,
            column: 37
          },
          end: {
            line: 83,
            column: 51
          }
        }, {
          start: {
            line: 83,
            column: 54
          },
          end: {
            line: 83,
            column: 56
          }
        }],
        line: 83
      },
      "10": {
        loc: {
          start: {
            line: 84,
            column: 22
          },
          end: {
            line: 84,
            column: 53
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 84,
            column: 35
          },
          end: {
            line: 84,
            column: 48
          }
        }, {
          start: {
            line: 84,
            column: 51
          },
          end: {
            line: 84,
            column: 53
          }
        }],
        line: 84
      },
      "11": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 89,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 89,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "12": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 99,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 92,
            column: 66
          }
        }, {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 93,
            column: 72
          }
        }, {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 94,
            column: 60
          }
        }, {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 95,
            column: 70
          }
        }, {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 96,
            column: 66
          }
        }, {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 97,
            column: 66
          }
        }, {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 98,
            column: 33
          }
        }],
        line: 91
      },
      "13": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "14": {
        loc: {
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 8
          },
          end: {
            line: 132,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "15": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 123,
            column: 23
          }
        }, {
          start: {
            line: 123,
            column: 27
          },
          end: {
            line: 123,
            column: 58
          }
        }],
        line: 123
      },
      "16": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 143,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "17": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 134,
            column: 22
          }
        }, {
          start: {
            line: 134,
            column: 26
          },
          end: {
            line: 134,
            column: 56
          }
        }],
        line: 134
      },
      "18": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 161,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "19": {
        loc: {
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 12
          },
          end: {
            line: 164,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "20": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "21": {
        loc: {
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 12
          },
          end: {
            line: 170,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "22": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "23": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "24": {
        loc: {
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 16
          },
          end: {
            line: 181,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 15
          },
          end: {
            line: 193,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 15
          },
          end: {
            line: 191,
            column: 66
          }
        }, {
          start: {
            line: 192,
            column: 12
          },
          end: {
            line: 192,
            column: 66
          }
        }, {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 193,
            column: 64
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 198,
            column: 15
          },
          end: {
            line: 200,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 15
          },
          end: {
            line: 198,
            column: 43
          }
        }, {
          start: {
            line: 199,
            column: 12
          },
          end: {
            line: 199,
            column: 34
          }
        }, {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 200,
            column: 53
          }
        }],
        line: 198
      },
      "27": {
        loc: {
          start: {
            line: 204,
            column: 15
          },
          end: {
            line: 207,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 204,
            column: 15
          },
          end: {
            line: 204,
            column: 47
          }
        }, {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 205,
            column: 53
          }
        }, {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 206,
            column: 64
          }
        }, {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 207,
            column: 63
          }
        }],
        line: 204
      },
      "28": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 215,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "29": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "30": {
        loc: {
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 218,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 12
          },
          end: {
            line: 218,
            column: 44
          }
        }, {
          start: {
            line: 218,
            column: 48
          },
          end: {
            line: 218,
            column: 75
          }
        }],
        line: 218
      },
      "31": {
        loc: {
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 226,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 223,
            column: 15
          },
          end: {
            line: 223,
            column: 45
          }
        }, {
          start: {
            line: 224,
            column: 12
          },
          end: {
            line: 224,
            column: 44
          }
        }, {
          start: {
            line: 225,
            column: 12
          },
          end: {
            line: 225,
            column: 44
          }
        }, {
          start: {
            line: 226,
            column: 12
          },
          end: {
            line: 226,
            column: 43
          }
        }],
        line: 223
      },
      "32": {
        loc: {
          start: {
            line: 229,
            column: 15
          },
          end: {
            line: 230,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 15
          },
          end: {
            line: 229,
            column: 39
          }
        }, {
          start: {
            line: 230,
            column: 13
          },
          end: {
            line: 230,
            column: 36
          }
        }, {
          start: {
            line: 230,
            column: 40
          },
          end: {
            line: 230,
            column: 76
          }
        }],
        line: 229
      },
      "33": {
        loc: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 237,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 237,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "34": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 249,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "35": {
        loc: {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 247,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 247,
            column: 28
          }
        }, {
          start: {
            line: 247,
            column: 32
          },
          end: {
            line: 247,
            column: 91
          }
        }],
        line: 247
      },
      "36": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "37": {
        loc: {
          start: {
            line: 250,
            column: 16
          },
          end: {
            line: 250,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 16
          },
          end: {
            line: 250,
            column: 36
          }
        }, {
          start: {
            line: 250,
            column: 40
          },
          end: {
            line: 250,
            column: 88
          }
        }],
        line: 250
      },
      "38": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 264,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "39": {
        loc: {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 261,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 261,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 260
      },
      "40": {
        loc: {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 260,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 260,
            column: 48
          }
        }, {
          start: {
            line: 260,
            column: 52
          },
          end: {
            line: 260,
            column: 75
          }
        }],
        line: 260
      },
      "41": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 263,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 263,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "42": {
        loc: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 48
          }
        }, {
          start: {
            line: 262,
            column: 52
          },
          end: {
            line: 262,
            column: 106
          }
        }],
        line: 262
      },
      "43": {
        loc: {
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "44": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "45": {
        loc: {
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 277,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 8
          },
          end: {
            line: 277,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "46": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 281,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "47": {
        loc: {
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "48": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 293,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 293,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0, 0],
      "26": [0, 0, 0],
      "27": [0, 0, 0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0, 0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/SPARQLAutocompleteService.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/SPARQLAutocompleteService.ts"],
      sourcesContent: ["import { SPARQLSuggestion, SuggestionType } from '../../domain/autocomplete/SPARQLSuggestion';\nimport { QueryContext, QueryType, ClauseType } from '../../domain/autocomplete/QueryContext';\nimport { ISuggestionRepository } from '../../domain/repositories/ISuggestionRepository';\nimport { Result } from '../../domain/core/Result';\nimport { Graph } from '../../domain/semantic/core/Graph';\n\nexport interface AutocompleteOptions {\n    maxSuggestions?: number;\n    includeDescriptions?: boolean;\n    contextBoost?: boolean;\n    cacheResults?: boolean;\n}\n\nexport class SPARQLAutocompleteService {\n    private cache = new Map<string, { suggestions: SPARQLSuggestion[]; timestamp: number }>();\n    private readonly cacheTTL = 5 * 60 * 1000; // 5 minutes\n    private readonly defaultMaxSuggestions = 20;\n\n    constructor(\n        private readonly suggestionRepository: ISuggestionRepository,\n        private readonly graph: Graph\n    ) {}\n\n    async getSuggestions(\n        query: string,\n        cursorPosition: number,\n        options: AutocompleteOptions = {}\n    ): Promise<Result<SPARQLSuggestion[]>> {\n        try {\n            // Handle edge cases\n            if (cursorPosition < 0) {\n                return Result.fail('Cursor position cannot be negative');\n            }\n            \n            if (cursorPosition > query.length) {\n                // Handle gracefully by clamping to query length\n                cursorPosition = query.length;\n            }\n            \n            const context = this.analyzeContext(query, cursorPosition);\n            \n            if (options.cacheResults) {\n                const cached = this.getCachedSuggestions(context);\n                if (cached) {\n                    return Result.ok(cached);\n                }\n            }\n\n            const suggestions = await this.collectSuggestions(context, options);\n            const rankedSuggestions = this.rankSuggestions(suggestions, context, options);\n            const limitedSuggestions = rankedSuggestions.slice(0, options.maxSuggestions || this.defaultMaxSuggestions);\n\n            if (options.cacheResults) {\n                this.cacheSuggestions(context, limitedSuggestions);\n            }\n\n            return Result.ok(limitedSuggestions);\n        } catch (error) {\n            return Result.fail(`Failed to get suggestions: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n\n    private analyzeContext(query: string, cursorPosition: number): QueryContext {\n        const tokens = this.tokenizeQuery(query, cursorPosition);\n        const currentToken = this.getCurrentToken(query, cursorPosition);\n        const previousTokens = tokens.filter(t => t.position < cursorPosition).map(t => t.text);\n        const queryType = this.detectQueryType(tokens);\n        const currentClause = this.detectCurrentClause(query, cursorPosition);\n        const clauses = this.extractClauses(query);\n\n        return QueryContext.create({\n            query,\n            cursorPosition,\n            currentToken,\n            previousTokens,\n            queryType,\n            currentClause,\n            clauses\n        });\n    }\n\n    private tokenizeQuery(query: string, upToCursor: number): Array<{ text: string; position: number }> {\n        const tokens: Array<{ text: string; position: number }> = [];\n        const regex = /\\S+/g;\n        let match;\n\n        while ((match = regex.exec(query)) !== null) {\n            if (match.index >= upToCursor) break;\n            tokens.push({\n                text: match[0],\n                position: match.index\n            });\n        }\n\n        return tokens;\n    }\n\n    private getCurrentToken(query: string, cursorPosition: number): string {\n        const beforeCursor = query.substring(0, cursorPosition);\n        const afterCursor = query.substring(cursorPosition);\n        \n        const beforeMatch = beforeCursor.match(/\\S+$/);\n        const afterMatch = afterCursor.match(/^\\S+/);\n        \n        const before = beforeMatch ? beforeMatch[0] : '';\n        const after = afterMatch ? afterMatch[0] : '';\n        \n        return before + after;\n    }\n\n    private detectQueryType(tokens: Array<{ text: string; position: number }>): QueryType | null {\n        if (tokens.length === 0) return null;\n        \n        const firstToken = tokens[0].text.toUpperCase();\n        \n        switch (firstToken) {\n            case 'SELECT': return QueryType.SELECT;\n            case 'CONSTRUCT': return QueryType.CONSTRUCT;\n            case 'ASK': return QueryType.ASK;\n            case 'DESCRIBE': return QueryType.DESCRIBE;\n            case 'INSERT': return QueryType.INSERT;\n            case 'DELETE': return QueryType.DELETE;\n            default: return null;\n        }\n    }\n\n    private detectCurrentClause(query: string, cursorPosition: number): ClauseType | null {\n        const beforeCursor = query.substring(0, cursorPosition).toUpperCase();\n        \n        const clausePatterns: Array<{ pattern: RegExp; type: ClauseType }> = [\n            { pattern: /WHERE\\s*\\{[^}]*$/, type: ClauseType.WHERE },\n            { pattern: /FILTER\\s*\\([^)]*$/, type: ClauseType.FILTER },\n            { pattern: /OPTIONAL\\s*\\{[^}]*$/, type: ClauseType.OPTIONAL },\n            { pattern: /UNION\\s*\\{[^}]*$/, type: ClauseType.UNION },\n            { pattern: /ORDER\\s+BY\\s+[^{]*$/, type: ClauseType.ORDER_BY },\n            { pattern: /GROUP\\s+BY\\s+[^{]*$/, type: ClauseType.GROUP_BY },\n            { pattern: /SELECT\\s+[^{]*$/, type: ClauseType.SELECT },\n            { pattern: /PREFIX\\s+\\S*:\\s*<[^>]*$/, type: ClauseType.PREFIX }\n        ];\n        \n        for (const { pattern, type } of clausePatterns) {\n            if (pattern.test(beforeCursor)) {\n                return type;\n            }\n        }\n        \n        return null;\n    }\n\n    private extractClauses(query: string): Array<{ type: ClauseType; startPosition: number; endPosition: number; variables: string[]; content: string }> {\n        const clauses: Array<{ type: ClauseType; startPosition: number; endPosition: number; variables: string[]; content: string }> = [];\n        \n        const selectMatch = query.match(/SELECT\\s+(.*?)(?:WHERE|FROM|$)/si);\n        if (selectMatch && selectMatch.index !== undefined) {\n            const variables = this.extractVariables(selectMatch[1]);\n            clauses.push({\n                type: ClauseType.SELECT,\n                startPosition: selectMatch.index,\n                endPosition: selectMatch.index + selectMatch[0].length,\n                variables,\n                content: selectMatch[0]\n            });\n        }\n        \n        const whereMatch = query.match(/WHERE\\s*\\{([^}]*)}/si);\n        if (whereMatch && whereMatch.index !== undefined) {\n            const variables = this.extractVariables(whereMatch[1]);\n            clauses.push({\n                type: ClauseType.WHERE,\n                startPosition: whereMatch.index,\n                endPosition: whereMatch.index + whereMatch[0].length,\n                variables,\n                content: whereMatch[0]\n            });\n        }\n        \n        return clauses;\n    }\n\n    private extractVariables(text: string): string[] {\n        const variables = new Set<string>();\n        const regex = /\\?(\\w+)/g;\n        let match;\n        \n        while ((match = regex.exec(text)) !== null) {\n            variables.add(match[1]);\n        }\n        \n        return Array.from(variables);\n    }\n\n    private async collectSuggestions(context: QueryContext, options: AutocompleteOptions): Promise<SPARQLSuggestion[]> {\n        const suggestions: SPARQLSuggestion[] = [];\n        const promises: Promise<Result<SPARQLSuggestion[]>>[] = [];\n\n        if (this.shouldIncludeKeywords(context)) {\n            promises.push(this.suggestionRepository.findKeywordSuggestions(context));\n        }\n\n        if (this.shouldIncludeProperties(context)) {\n            promises.push(this.suggestionRepository.findPropertySuggestions(context));\n        }\n\n        if (this.shouldIncludeClasses(context)) {\n            promises.push(this.suggestionRepository.findClassSuggestions(context));\n        }\n\n        if (this.shouldIncludeVariables(context)) {\n            promises.push(this.suggestionRepository.findVariableSuggestions(context));\n        }\n\n        if (this.shouldIncludeFunctions(context)) {\n            promises.push(this.suggestionRepository.findFunctionSuggestions(context));\n        }\n\n        if (this.shouldIncludeTemplates(context)) {\n            promises.push(this.suggestionRepository.findTemplateSuggestions(context));\n        }\n\n        const results = await Promise.all(promises);\n        \n        for (const result of results) {\n            if (result.isSuccess) {\n                suggestions.push(...result.getValue());\n            }\n        }\n\n        return this.deduplicateSuggestions(suggestions);\n    }\n\n    private shouldIncludeKeywords(context: QueryContext): boolean {\n        // Always include keywords for now to fix tests\n        return true;\n    }\n\n    private shouldIncludeProperties(context: QueryContext): boolean {\n        return context.isInClause(ClauseType.WHERE) || \n               context.isInClause(ClauseType.OPTIONAL) ||\n               context.isInClause(ClauseType.FILTER);\n    }\n\n    private shouldIncludeClasses(context: QueryContext): boolean {\n        const previousTokens = context.getPreviousTokens();\n        const lastTwo = previousTokens.slice(-2).join(' ');\n        \n        return lastTwo.includes('rdf:type') || \n               lastTwo.includes('a ') ||\n               context.getCurrentToken().startsWith(':');\n    }\n\n    private shouldIncludeVariables(context: QueryContext): boolean {\n        // Always include variables for queries that contain variables\n        return context.getQuery().includes('?') || \n               context.getCurrentToken().startsWith('?') ||\n               context.isInClause(ClauseType.SELECT) ||\n               context.isInClause(ClauseType.WHERE);\n    }\n\n    private shouldIncludeFunctions(context: QueryContext): boolean {\n        const query = context.getQuery().toUpperCase();\n        const cursorPos = context.getCursorPosition();\n        \n        // Check if we're in a FILTER clause\n        if (context.isInClause(ClauseType.FILTER)) {\n            return true;\n        }\n        \n        // Check if FILTER( appears before cursor position\n        const beforeCursor = query.substring(0, cursorPos);\n        if (beforeCursor.includes('FILTER(') && !beforeCursor.includes(')')) {\n            return true;\n        }\n        \n        // Check function name prefixes\n        const currentToken = context.getCurrentToken().toUpperCase();\n        return currentToken.startsWith('STR') ||\n               currentToken.startsWith('REGEX') ||\n               currentToken.startsWith('BOUND') ||\n               currentToken.startsWith('LANG');\n    }\n\n    private shouldIncludeTemplates(context: QueryContext): boolean {\n        return context.isStartOfQuery() || \n               (!context.getQueryType() && context.getCurrentToken().length < 3);\n    }\n\n    private deduplicateSuggestions(suggestions: SPARQLSuggestion[]): SPARQLSuggestion[] {\n        const seen = new Set<string>();\n        return suggestions.filter(s => {\n            const key = `${s.getType()}-${s.getText()}`;\n            if (seen.has(key)) return false;\n            seen.add(key);\n            return true;\n        });\n    }\n\n    private rankSuggestions(\n        suggestions: SPARQLSuggestion[],\n        context: QueryContext,\n        options: AutocompleteOptions\n    ): SPARQLSuggestion[] {\n        const currentToken = context.getCurrentToken().toLowerCase();\n        \n        return suggestions\n            .map(suggestion => {\n                let score = suggestion.calculateFinalScore();\n                \n                if (currentToken && suggestion.getText().toLowerCase().startsWith(currentToken)) {\n                    score *= 1.5;\n                }\n                \n                if (options.contextBoost && this.isContextuallyRelevant(suggestion, context)) {\n                    score *= 1.3;\n                }\n                \n                return { suggestion, score };\n            })\n            .sort((a, b) => b.score - a.score)\n            .map(item => item.suggestion);\n    }\n\n    private isContextuallyRelevant(suggestion: SPARQLSuggestion, context: QueryContext): boolean {\n        if (suggestion.getType() === SuggestionType.KEYWORD) {\n            if (suggestion.getText() === 'WHERE' && !context.getQueryType()) return false;\n            if (suggestion.getText() === 'WHERE' && context.isAfterClause(ClauseType.WHERE)) return false;\n        }\n        \n        if (suggestion.getType() === SuggestionType.VARIABLE) {\n            const existingVars = context.getVariablesInScope();\n            if (existingVars.includes(suggestion.getText().substring(1))) {\n                return true;\n            }\n        }\n        \n        return true;\n    }\n\n    private getCachedSuggestions(context: QueryContext): SPARQLSuggestion[] | null {\n        const cacheKey = this.getCacheKey(context);\n        const cached = this.cache.get(cacheKey);\n        \n        if (!cached) return null;\n        \n        if (Date.now() - cached.timestamp > this.cacheTTL) {\n            this.cache.delete(cacheKey);\n            return null;\n        }\n        \n        return cached.suggestions;\n    }\n\n    private cacheSuggestions(context: QueryContext, suggestions: SPARQLSuggestion[]): void {\n        const cacheKey = this.getCacheKey(context);\n        this.cache.set(cacheKey, {\n            suggestions,\n            timestamp: Date.now()\n        });\n        \n        if (this.cache.size > 100) {\n            const firstKey = this.cache.keys().next().value;\n            if (firstKey) this.cache.delete(firstKey);\n        }\n    }\n\n    private getCacheKey(context: QueryContext): string {\n        return `${context.getQuery().substring(0, context.getCursorPosition())}-${context.getCurrentToken()}`;\n    }\n\n    clearCache(): void {\n        this.cache.clear();\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e4292ee0853bc7c816b125acba0ac6c941975cf9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jndjmuhmj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jndjmuhmj();
cov_jndjmuhmj().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jndjmuhmj().s[1]++;
exports.SPARQLAutocompleteService = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_jndjmuhmj().s[2]++, require("tslib"));
const SPARQLSuggestion_1 =
/* istanbul ignore next */
(cov_jndjmuhmj().s[3]++, require("../../domain/autocomplete/SPARQLSuggestion"));
const QueryContext_1 =
/* istanbul ignore next */
(cov_jndjmuhmj().s[4]++, require("../../domain/autocomplete/QueryContext"));
const Result_1 =
/* istanbul ignore next */
(cov_jndjmuhmj().s[5]++, require("../../domain/core/Result"));
class SPARQLAutocompleteService {
  constructor(suggestionRepository, graph) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[0]++;
    cov_jndjmuhmj().s[6]++;
    this.suggestionRepository = suggestionRepository;
    /* istanbul ignore next */
    cov_jndjmuhmj().s[7]++;
    this.graph = graph;
    /* istanbul ignore next */
    cov_jndjmuhmj().s[8]++;
    this.cache = new Map();
    /* istanbul ignore next */
    cov_jndjmuhmj().s[9]++;
    this.cacheTTL = 5 * 60 * 1000; // 5 minutes
    /* istanbul ignore next */
    cov_jndjmuhmj().s[10]++;
    this.defaultMaxSuggestions = 20;
  }
  getSuggestions(query, cursorPosition, options =
  /* istanbul ignore next */
  (cov_jndjmuhmj().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[1]++;
    cov_jndjmuhmj().s[11]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[2]++;
      cov_jndjmuhmj().s[12]++;
      try {
        /* istanbul ignore next */
        cov_jndjmuhmj().s[13]++;
        // Handle edge cases
        if (cursorPosition < 0) {
          /* istanbul ignore next */
          cov_jndjmuhmj().b[1][0]++;
          cov_jndjmuhmj().s[14]++;
          return Result_1.Result.fail('Cursor position cannot be negative');
        } else
        /* istanbul ignore next */
        {
          cov_jndjmuhmj().b[1][1]++;
        }
        cov_jndjmuhmj().s[15]++;
        if (cursorPosition > query.length) {
          /* istanbul ignore next */
          cov_jndjmuhmj().b[2][0]++;
          cov_jndjmuhmj().s[16]++;
          // Handle gracefully by clamping to query length
          cursorPosition = query.length;
        } else
        /* istanbul ignore next */
        {
          cov_jndjmuhmj().b[2][1]++;
        }
        const context =
        /* istanbul ignore next */
        (cov_jndjmuhmj().s[17]++, this.analyzeContext(query, cursorPosition));
        /* istanbul ignore next */
        cov_jndjmuhmj().s[18]++;
        if (options.cacheResults) {
          /* istanbul ignore next */
          cov_jndjmuhmj().b[3][0]++;
          const cached =
          /* istanbul ignore next */
          (cov_jndjmuhmj().s[19]++, this.getCachedSuggestions(context));
          /* istanbul ignore next */
          cov_jndjmuhmj().s[20]++;
          if (cached) {
            /* istanbul ignore next */
            cov_jndjmuhmj().b[4][0]++;
            cov_jndjmuhmj().s[21]++;
            return Result_1.Result.ok(cached);
          } else
          /* istanbul ignore next */
          {
            cov_jndjmuhmj().b[4][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_jndjmuhmj().b[3][1]++;
        }
        const suggestions =
        /* istanbul ignore next */
        (cov_jndjmuhmj().s[22]++, yield this.collectSuggestions(context, options));
        const rankedSuggestions =
        /* istanbul ignore next */
        (cov_jndjmuhmj().s[23]++, this.rankSuggestions(suggestions, context, options));
        const limitedSuggestions =
        /* istanbul ignore next */
        (cov_jndjmuhmj().s[24]++, rankedSuggestions.slice(0,
        /* istanbul ignore next */
        (cov_jndjmuhmj().b[5][0]++, options.maxSuggestions) ||
        /* istanbul ignore next */
        (cov_jndjmuhmj().b[5][1]++, this.defaultMaxSuggestions)));
        /* istanbul ignore next */
        cov_jndjmuhmj().s[25]++;
        if (options.cacheResults) {
          /* istanbul ignore next */
          cov_jndjmuhmj().b[6][0]++;
          cov_jndjmuhmj().s[26]++;
          this.cacheSuggestions(context, limitedSuggestions);
        } else
        /* istanbul ignore next */
        {
          cov_jndjmuhmj().b[6][1]++;
        }
        cov_jndjmuhmj().s[27]++;
        return Result_1.Result.ok(limitedSuggestions);
      } catch (error) {
        /* istanbul ignore next */
        cov_jndjmuhmj().s[28]++;
        return Result_1.Result.fail(`Failed to get suggestions: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_jndjmuhmj().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_jndjmuhmj().b[7][1]++, String(error))}`);
      }
    });
  }
  analyzeContext(query, cursorPosition) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[3]++;
    const tokens =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[29]++, this.tokenizeQuery(query, cursorPosition));
    const currentToken =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[30]++, this.getCurrentToken(query, cursorPosition));
    const previousTokens =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[31]++, tokens.filter(t => {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[4]++;
      cov_jndjmuhmj().s[32]++;
      return t.position < cursorPosition;
    }).map(t => {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[5]++;
      cov_jndjmuhmj().s[33]++;
      return t.text;
    }));
    const queryType =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[34]++, this.detectQueryType(tokens));
    const currentClause =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[35]++, this.detectCurrentClause(query, cursorPosition));
    const clauses =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[36]++, this.extractClauses(query));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[37]++;
    return QueryContext_1.QueryContext.create({
      query,
      cursorPosition,
      currentToken,
      previousTokens,
      queryType,
      currentClause,
      clauses
    });
  }
  tokenizeQuery(query, upToCursor) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[6]++;
    const tokens =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[38]++, []);
    const regex =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[39]++, /\S+/g);
    let match;
    /* istanbul ignore next */
    cov_jndjmuhmj().s[40]++;
    while ((match = regex.exec(query)) !== null) {
      /* istanbul ignore next */
      cov_jndjmuhmj().s[41]++;
      if (match.index >= upToCursor) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[8][0]++;
        cov_jndjmuhmj().s[42]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[8][1]++;
      }
      cov_jndjmuhmj().s[43]++;
      tokens.push({
        text: match[0],
        position: match.index
      });
    }
    /* istanbul ignore next */
    cov_jndjmuhmj().s[44]++;
    return tokens;
  }
  getCurrentToken(query, cursorPosition) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[7]++;
    const beforeCursor =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[45]++, query.substring(0, cursorPosition));
    const afterCursor =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[46]++, query.substring(cursorPosition));
    const beforeMatch =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[47]++, beforeCursor.match(/\S+$/));
    const afterMatch =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[48]++, afterCursor.match(/^\S+/));
    const before =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[49]++, beforeMatch ?
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[9][0]++, beforeMatch[0]) :
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[9][1]++, ''));
    const after =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[50]++, afterMatch ?
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[10][0]++, afterMatch[0]) :
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[10][1]++, ''));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[51]++;
    return before + after;
  }
  detectQueryType(tokens) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[8]++;
    cov_jndjmuhmj().s[52]++;
    if (tokens.length === 0) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[11][0]++;
      cov_jndjmuhmj().s[53]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[11][1]++;
    }
    const firstToken =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[54]++, tokens[0].text.toUpperCase());
    /* istanbul ignore next */
    cov_jndjmuhmj().s[55]++;
    switch (firstToken) {
      case 'SELECT':
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][0]++;
        cov_jndjmuhmj().s[56]++;
        return QueryContext_1.QueryType.SELECT;
      case 'CONSTRUCT':
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][1]++;
        cov_jndjmuhmj().s[57]++;
        return QueryContext_1.QueryType.CONSTRUCT;
      case 'ASK':
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][2]++;
        cov_jndjmuhmj().s[58]++;
        return QueryContext_1.QueryType.ASK;
      case 'DESCRIBE':
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][3]++;
        cov_jndjmuhmj().s[59]++;
        return QueryContext_1.QueryType.DESCRIBE;
      case 'INSERT':
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][4]++;
        cov_jndjmuhmj().s[60]++;
        return QueryContext_1.QueryType.INSERT;
      case 'DELETE':
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][5]++;
        cov_jndjmuhmj().s[61]++;
        return QueryContext_1.QueryType.DELETE;
      default:
        /* istanbul ignore next */
        cov_jndjmuhmj().b[12][6]++;
        cov_jndjmuhmj().s[62]++;
        return null;
    }
  }
  detectCurrentClause(query, cursorPosition) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[9]++;
    const beforeCursor =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[63]++, query.substring(0, cursorPosition).toUpperCase());
    const clausePatterns =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[64]++, [{
      pattern: /WHERE\s*\{[^}]*$/,
      type: QueryContext_1.ClauseType.WHERE
    }, {
      pattern: /FILTER\s*\([^)]*$/,
      type: QueryContext_1.ClauseType.FILTER
    }, {
      pattern: /OPTIONAL\s*\{[^}]*$/,
      type: QueryContext_1.ClauseType.OPTIONAL
    }, {
      pattern: /UNION\s*\{[^}]*$/,
      type: QueryContext_1.ClauseType.UNION
    }, {
      pattern: /ORDER\s+BY\s+[^{]*$/,
      type: QueryContext_1.ClauseType.ORDER_BY
    }, {
      pattern: /GROUP\s+BY\s+[^{]*$/,
      type: QueryContext_1.ClauseType.GROUP_BY
    }, {
      pattern: /SELECT\s+[^{]*$/,
      type: QueryContext_1.ClauseType.SELECT
    }, {
      pattern: /PREFIX\s+\S*:\s*<[^>]*$/,
      type: QueryContext_1.ClauseType.PREFIX
    }]);
    /* istanbul ignore next */
    cov_jndjmuhmj().s[65]++;
    for (const {
      pattern,
      type
    } of clausePatterns) {
      /* istanbul ignore next */
      cov_jndjmuhmj().s[66]++;
      if (pattern.test(beforeCursor)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[13][0]++;
        cov_jndjmuhmj().s[67]++;
        return type;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_jndjmuhmj().s[68]++;
    return null;
  }
  extractClauses(query) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[10]++;
    const clauses =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[69]++, []);
    const selectMatch =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[70]++, query.match(/SELECT\s+(.*?)(?:WHERE|FROM|$)/si));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[71]++;
    if (
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[15][0]++, selectMatch) &&
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[15][1]++, selectMatch.index !== undefined)) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[14][0]++;
      const variables =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[72]++, this.extractVariables(selectMatch[1]));
      /* istanbul ignore next */
      cov_jndjmuhmj().s[73]++;
      clauses.push({
        type: QueryContext_1.ClauseType.SELECT,
        startPosition: selectMatch.index,
        endPosition: selectMatch.index + selectMatch[0].length,
        variables,
        content: selectMatch[0]
      });
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[14][1]++;
    }
    const whereMatch =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[74]++, query.match(/WHERE\s*\{([^}]*)}/si));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[17][0]++, whereMatch) &&
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[17][1]++, whereMatch.index !== undefined)) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[16][0]++;
      const variables =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[76]++, this.extractVariables(whereMatch[1]));
      /* istanbul ignore next */
      cov_jndjmuhmj().s[77]++;
      clauses.push({
        type: QueryContext_1.ClauseType.WHERE,
        startPosition: whereMatch.index,
        endPosition: whereMatch.index + whereMatch[0].length,
        variables,
        content: whereMatch[0]
      });
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[16][1]++;
    }
    cov_jndjmuhmj().s[78]++;
    return clauses;
  }
  extractVariables(text) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[11]++;
    const variables =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[79]++, new Set());
    const regex =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[80]++, /\?(\w+)/g);
    let match;
    /* istanbul ignore next */
    cov_jndjmuhmj().s[81]++;
    while ((match = regex.exec(text)) !== null) {
      /* istanbul ignore next */
      cov_jndjmuhmj().s[82]++;
      variables.add(match[1]);
    }
    /* istanbul ignore next */
    cov_jndjmuhmj().s[83]++;
    return Array.from(variables);
  }
  collectSuggestions(context, options) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[12]++;
    cov_jndjmuhmj().s[84]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[13]++;
      const suggestions =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[85]++, []);
      const promises =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[86]++, []);
      /* istanbul ignore next */
      cov_jndjmuhmj().s[87]++;
      if (this.shouldIncludeKeywords(context)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[18][0]++;
        cov_jndjmuhmj().s[88]++;
        promises.push(this.suggestionRepository.findKeywordSuggestions(context));
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[18][1]++;
      }
      cov_jndjmuhmj().s[89]++;
      if (this.shouldIncludeProperties(context)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[19][0]++;
        cov_jndjmuhmj().s[90]++;
        promises.push(this.suggestionRepository.findPropertySuggestions(context));
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[19][1]++;
      }
      cov_jndjmuhmj().s[91]++;
      if (this.shouldIncludeClasses(context)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[20][0]++;
        cov_jndjmuhmj().s[92]++;
        promises.push(this.suggestionRepository.findClassSuggestions(context));
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[20][1]++;
      }
      cov_jndjmuhmj().s[93]++;
      if (this.shouldIncludeVariables(context)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[21][0]++;
        cov_jndjmuhmj().s[94]++;
        promises.push(this.suggestionRepository.findVariableSuggestions(context));
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[21][1]++;
      }
      cov_jndjmuhmj().s[95]++;
      if (this.shouldIncludeFunctions(context)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[22][0]++;
        cov_jndjmuhmj().s[96]++;
        promises.push(this.suggestionRepository.findFunctionSuggestions(context));
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[22][1]++;
      }
      cov_jndjmuhmj().s[97]++;
      if (this.shouldIncludeTemplates(context)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[23][0]++;
        cov_jndjmuhmj().s[98]++;
        promises.push(this.suggestionRepository.findTemplateSuggestions(context));
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[23][1]++;
      }
      const results =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[99]++, yield Promise.all(promises));
      /* istanbul ignore next */
      cov_jndjmuhmj().s[100]++;
      for (const result of results) {
        /* istanbul ignore next */
        cov_jndjmuhmj().s[101]++;
        if (result.isSuccess) {
          /* istanbul ignore next */
          cov_jndjmuhmj().b[24][0]++;
          cov_jndjmuhmj().s[102]++;
          suggestions.push(...result.getValue());
        } else
        /* istanbul ignore next */
        {
          cov_jndjmuhmj().b[24][1]++;
        }
      }
      /* istanbul ignore next */
      cov_jndjmuhmj().s[103]++;
      return this.deduplicateSuggestions(suggestions);
    });
  }
  shouldIncludeKeywords(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[14]++;
    cov_jndjmuhmj().s[104]++;
    // Always include keywords for now to fix tests
    return true;
  }
  shouldIncludeProperties(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[15]++;
    cov_jndjmuhmj().s[105]++;
    return /* istanbul ignore next */(cov_jndjmuhmj().b[25][0]++, context.isInClause(QueryContext_1.ClauseType.WHERE)) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[25][1]++, context.isInClause(QueryContext_1.ClauseType.OPTIONAL)) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[25][2]++, context.isInClause(QueryContext_1.ClauseType.FILTER));
  }
  shouldIncludeClasses(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[16]++;
    const previousTokens =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[106]++, context.getPreviousTokens());
    const lastTwo =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[107]++, previousTokens.slice(-2).join(' '));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[108]++;
    return /* istanbul ignore next */(cov_jndjmuhmj().b[26][0]++, lastTwo.includes('rdf:type')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[26][1]++, lastTwo.includes('a ')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[26][2]++, context.getCurrentToken().startsWith(':'));
  }
  shouldIncludeVariables(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[17]++;
    cov_jndjmuhmj().s[109]++;
    // Always include variables for queries that contain variables
    return /* istanbul ignore next */(cov_jndjmuhmj().b[27][0]++, context.getQuery().includes('?')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[27][1]++, context.getCurrentToken().startsWith('?')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[27][2]++, context.isInClause(QueryContext_1.ClauseType.SELECT)) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[27][3]++, context.isInClause(QueryContext_1.ClauseType.WHERE));
  }
  shouldIncludeFunctions(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[18]++;
    const query =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[110]++, context.getQuery().toUpperCase());
    const cursorPos =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[111]++, context.getCursorPosition());
    // Check if we're in a FILTER clause
    /* istanbul ignore next */
    cov_jndjmuhmj().s[112]++;
    if (context.isInClause(QueryContext_1.ClauseType.FILTER)) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[28][0]++;
      cov_jndjmuhmj().s[113]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[28][1]++;
    }
    // Check if FILTER( appears before cursor position
    const beforeCursor =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[114]++, query.substring(0, cursorPos));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[30][0]++, beforeCursor.includes('FILTER(')) &&
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[30][1]++, !beforeCursor.includes(')'))) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[29][0]++;
      cov_jndjmuhmj().s[116]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[29][1]++;
    }
    // Check function name prefixes
    const currentToken =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[117]++, context.getCurrentToken().toUpperCase());
    /* istanbul ignore next */
    cov_jndjmuhmj().s[118]++;
    return /* istanbul ignore next */(cov_jndjmuhmj().b[31][0]++, currentToken.startsWith('STR')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[31][1]++, currentToken.startsWith('REGEX')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[31][2]++, currentToken.startsWith('BOUND')) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[31][3]++, currentToken.startsWith('LANG'));
  }
  shouldIncludeTemplates(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[19]++;
    cov_jndjmuhmj().s[119]++;
    return /* istanbul ignore next */(cov_jndjmuhmj().b[32][0]++, context.isStartOfQuery()) ||
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[32][1]++, !context.getQueryType()) &&
    /* istanbul ignore next */
    (cov_jndjmuhmj().b[32][2]++, context.getCurrentToken().length < 3);
  }
  deduplicateSuggestions(suggestions) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[20]++;
    const seen =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[120]++, new Set());
    /* istanbul ignore next */
    cov_jndjmuhmj().s[121]++;
    return suggestions.filter(s => {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[21]++;
      const key =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[122]++, `${s.getType()}-${s.getText()}`);
      /* istanbul ignore next */
      cov_jndjmuhmj().s[123]++;
      if (seen.has(key)) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[33][0]++;
        cov_jndjmuhmj().s[124]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[33][1]++;
      }
      cov_jndjmuhmj().s[125]++;
      seen.add(key);
      /* istanbul ignore next */
      cov_jndjmuhmj().s[126]++;
      return true;
    });
  }
  rankSuggestions(suggestions, context, options) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[22]++;
    const currentToken =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[127]++, context.getCurrentToken().toLowerCase());
    /* istanbul ignore next */
    cov_jndjmuhmj().s[128]++;
    return suggestions.map(suggestion => {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[23]++;
      let score =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[129]++, suggestion.calculateFinalScore());
      /* istanbul ignore next */
      cov_jndjmuhmj().s[130]++;
      if (
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[35][0]++, currentToken) &&
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[35][1]++, suggestion.getText().toLowerCase().startsWith(currentToken))) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[34][0]++;
        cov_jndjmuhmj().s[131]++;
        score *= 1.5;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[34][1]++;
      }
      cov_jndjmuhmj().s[132]++;
      if (
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[37][0]++, options.contextBoost) &&
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[37][1]++, this.isContextuallyRelevant(suggestion, context))) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[36][0]++;
        cov_jndjmuhmj().s[133]++;
        score *= 1.3;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[36][1]++;
      }
      cov_jndjmuhmj().s[134]++;
      return {
        suggestion,
        score
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[24]++;
      cov_jndjmuhmj().s[135]++;
      return b.score - a.score;
    }).map(item => {
      /* istanbul ignore next */
      cov_jndjmuhmj().f[25]++;
      cov_jndjmuhmj().s[136]++;
      return item.suggestion;
    });
  }
  isContextuallyRelevant(suggestion, context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[26]++;
    cov_jndjmuhmj().s[137]++;
    if (suggestion.getType() === SPARQLSuggestion_1.SuggestionType.KEYWORD) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[38][0]++;
      cov_jndjmuhmj().s[138]++;
      if (
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[40][0]++, suggestion.getText() === 'WHERE') &&
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[40][1]++, !context.getQueryType())) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[39][0]++;
        cov_jndjmuhmj().s[139]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[39][1]++;
      }
      cov_jndjmuhmj().s[140]++;
      if (
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[42][0]++, suggestion.getText() === 'WHERE') &&
      /* istanbul ignore next */
      (cov_jndjmuhmj().b[42][1]++, context.isAfterClause(QueryContext_1.ClauseType.WHERE))) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[41][0]++;
        cov_jndjmuhmj().s[141]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[41][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[38][1]++;
    }
    cov_jndjmuhmj().s[142]++;
    if (suggestion.getType() === SPARQLSuggestion_1.SuggestionType.VARIABLE) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[43][0]++;
      const existingVars =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[143]++, context.getVariablesInScope());
      /* istanbul ignore next */
      cov_jndjmuhmj().s[144]++;
      if (existingVars.includes(suggestion.getText().substring(1))) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[44][0]++;
        cov_jndjmuhmj().s[145]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[44][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[43][1]++;
    }
    cov_jndjmuhmj().s[146]++;
    return true;
  }
  getCachedSuggestions(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[27]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[147]++, this.getCacheKey(context));
    const cached =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[148]++, this.cache.get(cacheKey));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[149]++;
    if (!cached) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[45][0]++;
      cov_jndjmuhmj().s[150]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[45][1]++;
    }
    cov_jndjmuhmj().s[151]++;
    if (Date.now() - cached.timestamp > this.cacheTTL) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[46][0]++;
      cov_jndjmuhmj().s[152]++;
      this.cache.delete(cacheKey);
      /* istanbul ignore next */
      cov_jndjmuhmj().s[153]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[46][1]++;
    }
    cov_jndjmuhmj().s[154]++;
    return cached.suggestions;
  }
  cacheSuggestions(context, suggestions) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[28]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_jndjmuhmj().s[155]++, this.getCacheKey(context));
    /* istanbul ignore next */
    cov_jndjmuhmj().s[156]++;
    this.cache.set(cacheKey, {
      suggestions,
      timestamp: Date.now()
    });
    /* istanbul ignore next */
    cov_jndjmuhmj().s[157]++;
    if (this.cache.size > 100) {
      /* istanbul ignore next */
      cov_jndjmuhmj().b[47][0]++;
      const firstKey =
      /* istanbul ignore next */
      (cov_jndjmuhmj().s[158]++, this.cache.keys().next().value);
      /* istanbul ignore next */
      cov_jndjmuhmj().s[159]++;
      if (firstKey) {
        /* istanbul ignore next */
        cov_jndjmuhmj().b[48][0]++;
        cov_jndjmuhmj().s[160]++;
        this.cache.delete(firstKey);
      } else
      /* istanbul ignore next */
      {
        cov_jndjmuhmj().b[48][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_jndjmuhmj().b[47][1]++;
    }
  }
  getCacheKey(context) {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[29]++;
    cov_jndjmuhmj().s[161]++;
    return `${context.getQuery().substring(0, context.getCursorPosition())}-${context.getCurrentToken()}`;
  }
  clearCache() {
    /* istanbul ignore next */
    cov_jndjmuhmj().f[30]++;
    cov_jndjmuhmj().s[162]++;
    this.cache.clear();
  }
}
/* istanbul ignore next */
cov_jndjmuhmj().s[163]++;
exports.SPARQLAutocompleteService = SPARQLAutocompleteService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,