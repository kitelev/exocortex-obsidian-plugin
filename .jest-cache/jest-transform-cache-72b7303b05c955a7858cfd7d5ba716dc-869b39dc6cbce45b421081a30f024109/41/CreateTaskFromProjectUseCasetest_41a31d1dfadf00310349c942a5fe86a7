c4023e4ad800577d7785b06e5e7784d3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const CreateTaskFromProjectUseCase_1 = require("../../../../src/application/use-cases/CreateTaskFromProjectUseCase");
const Task_1 = require("../../../../src/domain/entities/Task");
const Asset_1 = require("../../../../src/domain/entities/Asset");
const AssetId_1 = require("../../../../src/domain/value-objects/AssetId");
const Priority_1 = require("../../../../src/domain/value-objects/Priority");
const TaskStatus_1 = require("../../../../src/domain/value-objects/TaskStatus");
const ClassName_1 = require("../../../../src/domain/value-objects/ClassName");
const OntologyPrefix_1 = require("../../../../src/domain/value-objects/OntologyPrefix");
// Mock repositories and services
const mockTaskRepository = {
    save: jest.fn(),
    findById: jest.fn(),
    findAll: jest.fn(),
    delete: jest.fn(),
    findByProject: jest.fn(),
    findByStatus: jest.fn(),
    findByPriority: jest.fn(),
    findByTags: jest.fn(),
    findByDateRange: jest.fn(),
    update: jest.fn(),
    exists: jest.fn()
};
const mockAssetRepository = {
    save: jest.fn(),
    findById: jest.fn(),
    findAll: jest.fn(),
    delete: jest.fn(),
    findByClass: jest.fn(),
    findByTitle: jest.fn(),
    findByFilename: jest.fn(),
    update: jest.fn(),
    exists: jest.fn(),
    search: jest.fn()
};
const mockGraph = {
    add: jest.fn(),
    remove: jest.fn(),
    query: jest.fn(),
    getTriples: jest.fn(),
    size: jest.fn(),
    clear: jest.fn(),
    has: jest.fn(),
    getSubjects: jest.fn(),
    getPredicates: jest.fn(),
    getObjects: jest.fn(),
    serialize: jest.fn(),
    deserialize: jest.fn()
};
const mockGetCurrentProjectUseCase = {
    execute: jest.fn()
};
describe('CreateTaskFromProjectUseCase', () => {
    let useCase;
    let mockTask;
    let mockAsset;
    beforeEach(() => {
        jest.clearAllMocks();
        useCase = new CreateTaskFromProjectUseCase_1.CreateTaskFromProjectUseCase(mockTaskRepository, mockAssetRepository, mockGraph, mockGetCurrentProjectUseCase);
        // Create mock task
        const taskResult = Task_1.Task.create({
            title: 'Test Task',
            description: 'Test Description',
            priority: Priority_1.Priority.medium(),
            status: TaskStatus_1.TaskStatus.todo(),
            tags: ['test']
        });
        mockTask = taskResult.getValue();
        // Create mock asset
        const assetResult = Asset_1.Asset.create({
            id: AssetId_1.AssetId.create('test-asset-id').getValue(),
            label: 'Test Asset',
            className: ClassName_1.ClassName.create('ems__Project').getValue(),
            ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
            properties: {
                status: 'active',
                priority: 'medium',
                description: 'Test project'
            }
        });
        mockAsset = assetResult.getValue();
    });
    describe('Request Validation', () => {
        it('should fail when title is missing', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const request = {
                title: ''
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Task title is required');
            expect((_a = result.errors) === null || _a === void 0 ? void 0 : _a.request).toContain('Task title is required');
        }));
        it('should fail when title is only whitespace', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: '   '
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Task title is required');
        }));
        it('should fail when title exceeds 200 characters', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'a'.repeat(201)
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Task title cannot exceed 200 characters');
        }));
        it('should fail when estimated hours is negative', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Title',
                estimatedHours: -5
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Estimated hours must be a non-negative number');
        }));
        it('should fail when estimated hours is not a number', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Title',
                estimatedHours: 'not a number'
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Estimated hours must be a non-negative number');
        }));
        it('should fail when due date is invalid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Title',
                dueDate: 'invalid-date'
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Due date must be a valid date');
        }));
        it('should fail when priority is invalid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Title',
                priority: 'invalid-priority'
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Priority must be one of: low, medium, high, urgent');
        }));
        it('should fail when status is invalid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Title',
                status: 'invalid-status'
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Status must be one of: todo, in-progress, done, cancelled');
        }));
        it('should pass validation with valid request', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Task Title',
                description: 'Valid description',
                priority: 'high',
                status: 'todo',
                estimatedHours: 5,
                dueDate: '2024-12-31',
                tags: ['work', 'urgent']
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
        }));
    });
    describe('Template Application', () => {
        it('should apply template when templateId is provided', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const templateAsset = Asset_1.Asset.create({
                id: AssetId_1.AssetId.create('template-id').getValue(),
                label: 'Task Template',
                className: ClassName_1.ClassName.create('ems__TaskTemplate').getValue(),
                ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                properties: {
                    description: 'Template description',
                    priority: 'high',
                    estimatedHours: 8,
                    tags: ['template-tag']
                }
            }).getValue();
            const request = {
                title: 'Task from Template',
                templateId: 'template-id'
            };
            mockAssetRepository.findById.mockResolvedValue(templateAsset);
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockAssetRepository.findById).toHaveBeenCalledWith(expect.objectContaining({
                value: 'template-id'
            }));
        }));
        it('should handle template not found gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Task with Missing Template',
                templateId: 'missing-template'
            };
            mockAssetRepository.findById.mockResolvedValue(undefined);
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockAssetRepository.findById).toHaveBeenCalled();
        }));
        it('should substitute template variables', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const templateAsset = Asset_1.Asset.create({
                id: AssetId_1.AssetId.create('template-id').getValue(),
                label: 'Task Template',
                className: ClassName_1.ClassName.create('ems__TaskTemplate').getValue(),
                ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                properties: {
                    description: 'Work on {{project}} for {{client}}'
                }
            }).getValue();
            const request = {
                title: 'Task for {{client}}',
                templateId: 'template-id',
                templateVariables: {
                    project: 'Website',
                    client: 'ACME Corp'
                }
            };
            mockAssetRepository.findById.mockResolvedValue(templateAsset);
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_a = result.task) === null || _a === void 0 ? void 0 : _a.title).toBe('Task for ACME Corp');
        }));
        it('should handle invalid template ID gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Valid Task',
                templateId: 'invalid-uuid'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
        }));
    });
    describe('Project Context Resolution', () => {
        it('should use provided project ID when valid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Task with Project',
                projectId: 'valid-project-id'
            };
            mockAssetRepository.findById.mockResolvedValue(mockAsset);
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockAssetRepository.findById).toHaveBeenCalledWith(expect.objectContaining({
                value: 'valid-project-id'
            }));
        }));
        it('should fall back to context detection when project ID is invalid', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Task with Invalid Project',
                projectId: 'invalid-project-id'
            };
            mockAssetRepository.findById.mockResolvedValue(undefined);
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                currentProject: {
                    id: 'context-project-id',
                    title: 'Context Project',
                    status: 'active',
                    priority: 'medium'
                },
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.8, reasoning: 'from context' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockGetCurrentProjectUseCase.execute).toHaveBeenCalled();
        }));
        it('should use context-based detection when no project ID provided', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Task without Project',
                context: {
                    activeFile: 'project-file.md',
                    focusContext: 'project-context'
                }
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                currentProject: {
                    id: 'detected-project',
                    title: 'Detected Project',
                    status: 'active',
                    priority: 'medium'
                },
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.9, reasoning: 'detected from file' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockGetCurrentProjectUseCase.execute).toHaveBeenCalledWith({
                activeFile: 'project-file.md',
                preferences: {
                    includeCompleted: false,
                    maxResults: 5,
                    selectionStrategy: 'context'
                }
            });
        }));
        it('should handle missing context gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Task without Context'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.0, reasoning: 'no context' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
        }));
    });
    describe('Task Creation', () => {
        it('should create task with default values', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const request = {
                title: 'Simple Task'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_a = result.task) === null || _a === void 0 ? void 0 : _a.title).toBe('Simple Task');
            expect((_b = result.task) === null || _b === void 0 ? void 0 : _b.status).toBe('todo');
            expect((_c = result.task) === null || _c === void 0 ? void 0 : _c.priority).toBe('medium');
            expect((_d = result.task) === null || _d === void 0 ? void 0 : _d.tags).toEqual([]);
        }));
        it('should create task with all properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _e, _f, _g, _h, _j, _k;
            const request = {
                title: 'Complex Task',
                description: 'Detailed description',
                priority: 'urgent',
                status: 'in-progress',
                projectId: 'project-123',
                dueDate: '2024-12-31',
                estimatedHours: 10,
                tags: ['important', 'deadline']
            };
            mockAssetRepository.findById.mockResolvedValue(mockAsset);
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_e = result.task) === null || _e === void 0 ? void 0 : _e.title).toBe('Complex Task');
            expect((_f = result.task) === null || _f === void 0 ? void 0 : _f.status).toBe('in-progress');
            expect((_g = result.task) === null || _g === void 0 ? void 0 : _g.priority).toBe('urgent');
            expect((_h = result.task) === null || _h === void 0 ? void 0 : _h.projectId).toBe('project-123');
            expect((_j = result.task) === null || _j === void 0 ? void 0 : _j.dueDate).toBe('2024-12-31');
            expect((_k = result.task) === null || _k === void 0 ? void 0 : _k.tags).toEqual(['important', 'deadline']);
        }));
        it('should handle task creation failure', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: '', // This will cause validation to fail in the use case
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(false);
            expect(result.message).toContain('Task title is required');
        }));
        it('should trim whitespace from title and description', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _l;
            const request = {
                title: '  Trimmed Title  ',
                description: '  Trimmed Description  '
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_l = result.task) === null || _l === void 0 ? void 0 : _l.title).toBe('Trimmed Title');
        }));
    });
    describe('Repository Operations', () => {
        it('should save task to task repository', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Repository Test'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockTaskRepository.save).toHaveBeenCalledTimes(1);
            expect(mockTaskRepository.save).toHaveBeenCalledWith(expect.any(Task_1.Task));
        }));
        it('should save task as asset for compatibility', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Asset Compatibility Test',
                context: {
                    activeFile: 'test.md',
                    selection: 'selected text',
                    focusContext: 'focus'
                }
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            mockAssetRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(mockAssetRepository.save).toHaveBeenCalledTimes(1);
        }));
        it('should continue when asset save fails', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Asset Save Failure Test'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            mockAssetRepository.save.mockRejectedValue(new Error('Asset save failed'));
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(consoleSpy).toHaveBeenCalledWith('Failed to save task as asset:', expect.any(String));
            consoleSpy.mockRestore();
        }));
    });
    describe('RDF Graph Updates', () => {
        it('should add basic task triples to graph', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'RDF Test Task',
                description: 'Test description',
                priority: 'high',
                status: 'todo',
                estimatedHours: 5,
                tags: ['rdf', 'test']
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.rdfTriples).toBeDefined();
            expect(result.rdfTriples.length).toBeGreaterThan(0);
            expect(mockGraph.add).toHaveBeenCalled();
        }));
        it('should add project relationship triples when project exists', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Task with Project RDF',
                projectId: 'project-123'
            };
            mockAssetRepository.findById.mockResolvedValue(mockAsset);
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.rdfTriples).toBeDefined();
            const projectTriples = result.rdfTriples.filter(triple => triple.predicate === 'ems:belongsToProject' || triple.predicate === 'ems:hasTask');
            expect(projectTriples.length).toBeGreaterThan(0);
        }));
        it('should handle RDF graph errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'RDF Error Test'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            mockGraph.add.mockImplementation(() => {
                throw new Error('Graph error');
            });
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.rdfTriples).toBeDefined(); // Triples are created but graph.add fails
            expect(consoleSpy).toHaveBeenCalledWith('Failed to create triple:', expect.any(Object), expect.any(Error));
            consoleSpy.mockRestore();
        }));
        it('should handle invalid triple creation gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Invalid Triple Test'
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            consoleSpy.mockRestore();
        }));
    });
    describe('Response Building', () => {
        it('should build success response with all fields', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Response Test',
                description: 'Test description',
                priority: 'high',
                status: 'todo',
                projectId: 'project-123',
                dueDate: '2024-12-31',
                tags: ['test']
            };
            mockAssetRepository.findById.mockResolvedValue(mockAsset);
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result).toMatchObject({
                success: true,
                taskId: expect.any(String),
                message: expect.stringContaining('created successfully'),
                task: {
                    id: expect.any(String),
                    title: 'Response Test',
                    status: 'todo',
                    priority: 'high',
                    projectId: 'project-123',
                    dueDate: '2024-12-31',
                    tags: ['test']
                },
                rdfTriples: expect.any(Array)
            });
        }));
        it('should build error response for validation failures', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: '',
                priority: 'invalid'
            };
            const result = yield useCase.execute(request);
            expect(result).toMatchObject({
                success: false,
                message: expect.stringContaining('Task title is required'),
                errors: {
                    request: expect.arrayContaining([
                        expect.stringContaining('Task title is required')
                    ])
                }
            });
        }));
        it('should build error response for system errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'System Error Test'
            };
            mockGetCurrentProjectUseCase.execute.mockRejectedValue(new Error('System failure'));
            const result = yield useCase.execute(request);
            expect(result).toMatchObject({
                success: false,
                message: expect.stringContaining('Failed to create task'),
                errors: {
                    system: expect.arrayContaining([
                        expect.stringContaining('System failure')
                    ])
                }
            });
        }));
    });
    describe('Edge Cases', () => {
        it('should handle null/undefined values gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const request = {
                title: 'Edge Case Test',
                description: undefined,
                priority: undefined,
                status: undefined,
                projectId: undefined,
                dueDate: undefined,
                estimatedHours: undefined,
                tags: undefined
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_a = result.task) === null || _a === void 0 ? void 0 : _a.tags).toEqual([]);
        }));
        it('should handle empty arrays and objects', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Empty Values Test',
                tags: [],
                templateVariables: {},
                context: {}
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
        }));
        it('should handle very long valid titles (up to 200 chars)', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _b;
            const request = {
                title: 'a'.repeat(200)
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_b = result.task) === null || _b === void 0 ? void 0 : _b.title).toHaveLength(200);
        }));
        it('should handle zero estimated hours', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Zero Hours Task',
                estimatedHours: 0
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
        }));
        it('should handle duplicate tags', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _c;
            const request = {
                title: 'Duplicate Tags Test',
                tags: ['tag1', 'tag2', 'tag1', 'tag2']
            };
            mockGetCurrentProjectUseCase.execute.mockResolvedValue({
                success: true,
                availableProjects: [],
                context: { strategy: 'context', confidence: 0.5, reasoning: 'test' }
            });
            mockTaskRepository.save.mockResolvedValue();
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_c = result.task) === null || _c === void 0 ? void 0 : _c.tags).toEqual(['tag1', 'tag2', 'tag1', 'tag2']);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,