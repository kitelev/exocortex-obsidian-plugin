{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/DatacoreQueryEngine.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/DatacoreQueryEngine.ts"],"sourcesContent":["import {\n  IQueryEngine,\n  QueryEngineType,\n  QueryResult,\n  QueryContext,\n} from \"../../domain/ports/IQueryEngine\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Datacore Query Engine Implementation\n * Adapts the Datacore plugin API to our generic query engine interface\n */\nexport class DatacoreQueryEngine implements IQueryEngine {\n  constructor(private datacoreApi?: any) {}\n\n  public getType(): QueryEngineType {\n    return \"datacore\";\n  }\n\n  public isAvailable(): boolean {\n    return !!this.datacoreApi && typeof this.datacoreApi.query === \"function\";\n  }\n\n  public async executeQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<Result<QueryResult>> {\n    if (!this.isAvailable()) {\n      return Result.fail<QueryResult>(\"Datacore is not available\");\n    }\n\n    try {\n      const result = await this.parseAndExecuteQuery(query, context);\n      return Result.ok<QueryResult>(result);\n    } catch (error) {\n      return Result.fail<QueryResult>(`Datacore query error: ${error}`);\n    }\n  }\n\n  public async renderQuery(\n    container: HTMLElement,\n    query: string,\n    context?: QueryContext,\n  ): Promise<Result<void>> {\n    if (!this.isAvailable()) {\n      return Result.fail<void>(\"Datacore is not available\");\n    }\n\n    try {\n      await this.renderDatacoreQuery(container, query, context);\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Datacore render error: ${error}`);\n    }\n  }\n\n  public async getPages(source: string): Promise<Result<any[]>> {\n    if (!this.isAvailable()) {\n      return Result.fail<any[]>(\"Datacore is not available\");\n    }\n\n    try {\n      // Datacore uses different syntax - convert from Dataview format if needed\n      const datacoreSource = this.convertDataviewSource(source);\n      const result = await this.datacoreApi.query(datacoreSource);\n      return Result.ok<any[]>(result ? Array.from(result) : []);\n    } catch (error) {\n      return Result.fail<any[]>(`Failed to get pages: ${error}`);\n    }\n  }\n\n  public async getPageMetadata(\n    path: string,\n  ): Promise<Result<Record<string, any>>> {\n    if (!this.isAvailable()) {\n      return Result.fail<Record<string, any>>(\"Datacore is not available\");\n    }\n\n    try {\n      const page = await this.datacoreApi.page(path);\n      return Result.ok<Record<string, any>>(page || {});\n    } catch (error) {\n      return Result.fail<Record<string, any>>(\n        `Failed to get page metadata: ${error}`,\n      );\n    }\n  }\n\n  public validateQuery(query: string): Result<boolean> {\n    if (!query || query.trim().length === 0) {\n      return Result.fail<boolean>(\"Query cannot be empty\");\n    }\n\n    // Basic validation for Datacore query syntax\n    const trimmedQuery = query.trim().toLowerCase();\n\n    // Datacore supports both Dataview-style queries and its own query language\n    const validDataviewStart = [\"table\", \"list\", \"task\", \"calendar\"];\n    const hasValidDataviewStart = validDataviewStart.some((keyword) =>\n      trimmedQuery.startsWith(keyword),\n    );\n\n    // Datacore also supports SQL-like queries and JavaScript\n    const hasDatacorePattern =\n      trimmedQuery.includes(\"from\") ||\n      trimmedQuery.includes(\"select\") ||\n      trimmedQuery.includes(\"dc.\") ||\n      trimmedQuery.includes(\"datacore.\");\n\n    if (!hasValidDataviewStart && !hasDatacorePattern) {\n      return Result.fail<boolean>(\n        \"Query must be valid Dataview or Datacore syntax\",\n      );\n    }\n\n    return Result.ok<boolean>(true);\n  }\n\n  private async parseAndExecuteQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    const trimmedQuery = query.trim();\n    const firstLine = trimmedQuery.split(\"\\n\")[0].toLowerCase();\n\n    // Check if it's a Dataview-style query that needs conversion\n    if (firstLine.startsWith(\"table\")) {\n      return await this.executeTableQuery(query, context);\n    } else if (firstLine.startsWith(\"list\")) {\n      return await this.executeListQuery(query, context);\n    } else if (firstLine.startsWith(\"task\")) {\n      return await this.executeTaskQuery(query, context);\n    } else if (firstLine.startsWith(\"calendar\")) {\n      return await this.executeCalendarQuery(query, context);\n    } else {\n      // Execute as native Datacore query or JavaScript\n      return await this.executeNativeQuery(query, context);\n    }\n  }\n\n  private async executeTableQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Convert Dataview table query to Datacore format\n    const datacoreQuery = this.convertDataviewTableQuery(query);\n\n    const result = await this.datacoreApi.query(datacoreQuery);\n\n    return {\n      type: \"table\",\n      data: Array.from(result),\n      columns: this.extractColumnsFromResult(result),\n      metadata: {\n        originalQuery: query,\n        convertedQuery: datacoreQuery,\n        engine: \"datacore\",\n      },\n    };\n  }\n\n  private async executeListQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Convert Dataview list query to Datacore format\n    const datacoreQuery = this.convertDataviewListQuery(query);\n\n    const result = await this.datacoreApi.query(datacoreQuery);\n\n    return {\n      type: \"list\",\n      data: Array.from(result),\n      metadata: {\n        originalQuery: query,\n        convertedQuery: datacoreQuery,\n        engine: \"datacore\",\n      },\n    };\n  }\n\n  private async executeTaskQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Datacore has different task handling - adapt as needed\n    const datacoreQuery = this.convertDataviewTaskQuery(query);\n\n    const result = await this.datacoreApi.query(datacoreQuery);\n\n    return {\n      type: \"task\",\n      data: Array.from(result),\n      metadata: {\n        originalQuery: query,\n        convertedQuery: datacoreQuery,\n        engine: \"datacore\",\n      },\n    };\n  }\n\n  private async executeCalendarQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Calendar functionality would need to be implemented based on Datacore capabilities\n    return {\n      type: \"calendar\",\n      data: [],\n      metadata: {\n        queryType: \"calendar\",\n        engine: \"datacore\",\n        note: \"Calendar queries not yet implemented for Datacore\",\n      },\n    };\n  }\n\n  private async executeNativeQuery(\n    query: string,\n    context?: QueryContext,\n  ): Promise<QueryResult> {\n    // Execute as native Datacore query\n    const result = await this.datacoreApi.query(query, context);\n\n    return {\n      type: \"raw\",\n      data: Array.isArray(result) ? result : [result],\n      metadata: {\n        queryType: \"native\",\n        engine: \"datacore\",\n      },\n    };\n  }\n\n  private async renderDatacoreQuery(\n    container: HTMLElement,\n    query: string,\n    context?: QueryContext,\n  ): Promise<void> {\n    const dcContainer = container.createDiv({\n      cls: \"exocortex-datacore-container\",\n    });\n\n    try {\n      const result = await this.parseAndExecuteQuery(query, context);\n\n      switch (result.type) {\n        case \"table\":\n          this.renderTable(dcContainer, result);\n          break;\n        case \"list\":\n          this.renderList(dcContainer, result);\n          break;\n        case \"task\":\n          this.renderTasks(dcContainer, result);\n          break;\n        case \"calendar\":\n          this.renderCalendar(dcContainer, result);\n          break;\n        default:\n          this.renderRaw(dcContainer, result);\n      }\n    } catch (error) {\n      dcContainer.createEl(\"p\", {\n        text: `Datacore execution error: ${error}`,\n        cls: \"exocortex-error\",\n      });\n    }\n  }\n\n  private renderTable(container: HTMLElement, result: QueryResult): void {\n    if (!result.data.length) {\n      container.createEl(\"p\", {\n        text: \"No results found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    const table = container.createEl(\"table\", { cls: \"exocortex-table\" });\n\n    // Create header\n    if (result.columns) {\n      const thead = table.createEl(\"thead\");\n      const headerRow = thead.createEl(\"tr\");\n      result.columns.forEach((col) => {\n        headerRow.createEl(\"th\", { text: col });\n      });\n    }\n\n    // Create body\n    const tbody = table.createEl(\"tbody\");\n    result.data.forEach((row: any) => {\n      const tr = tbody.createEl(\"tr\");\n      if (result.columns) {\n        result.columns.forEach((col) => {\n          tr.createEl(\"td\", { text: this.formatCellValue(row[col]) });\n        });\n      } else {\n        // Fallback if no columns defined\n        Object.values(row).forEach((value) => {\n          tr.createEl(\"td\", { text: this.formatCellValue(value) });\n        });\n      }\n    });\n  }\n\n  private renderList(container: HTMLElement, result: QueryResult): void {\n    if (!result.data.length) {\n      container.createEl(\"p\", {\n        text: \"No results found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    const list = container.createEl(\"ul\", { cls: \"exocortex-list\" });\n    result.data.forEach((item: any) => {\n      const li = list.createEl(\"li\");\n      li.textContent = this.formatCellValue(item);\n    });\n  }\n\n  private renderTasks(container: HTMLElement, result: QueryResult): void {\n    if (!result.data.length) {\n      container.createEl(\"p\", {\n        text: \"No tasks found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    const taskList = container.createEl(\"ul\", { cls: \"exocortex-task-list\" });\n    result.data.forEach((task: any) => {\n      const li = taskList.createEl(\"li\");\n      const checkbox = li.createEl(\"input\", { type: \"checkbox\" });\n      checkbox.checked = task.completed || false;\n      li.appendText(` ${task.text || task.description || \"Untitled task\"}`);\n    });\n  }\n\n  private renderCalendar(container: HTMLElement, result: QueryResult): void {\n    container.createEl(\"p\", {\n      text: \"Calendar view not yet implemented for Datacore\",\n      cls: \"exocortex-info\",\n    });\n  }\n\n  private renderRaw(container: HTMLElement, result: QueryResult): void {\n    const pre = container.createEl(\"pre\", { cls: \"exocortex-raw-result\" });\n    pre.textContent = JSON.stringify(result.data, null, 2);\n  }\n\n  private convertDataviewSource(source: string): string {\n    // Convert Dataview source format to Datacore format\n    // This would need to be implemented based on actual Datacore syntax\n    // For now, return as-is and let Datacore handle it\n    return source;\n  }\n\n  private convertDataviewTableQuery(query: string): string {\n    // Convert Dataview table query to Datacore equivalent\n    // This is a simplified conversion - real implementation would be more sophisticated\n\n    const tableMatch = query.match(\n      /table\\s+(.+?)\\s+from\\s+(.+?)(?:\\s+where\\s+(.+?))?$/s,\n    );\n\n    if (!tableMatch) {\n      return query; // Return original if can't parse\n    }\n\n    const [, fields, source, where] = tableMatch;\n\n    let datacoreQuery = `SELECT ${fields.trim()} FROM ${source.trim()}`;\n\n    if (where) {\n      datacoreQuery += ` WHERE ${where.trim()}`;\n    }\n\n    return datacoreQuery;\n  }\n\n  private convertDataviewListQuery(query: string): string {\n    // Convert Dataview list query to Datacore equivalent\n    const fromMatch = query.match(/from\\s+(.+?)(?:\\s+where\\s+(.+?))?$/s);\n\n    if (!fromMatch) {\n      return query;\n    }\n\n    const [, source, where] = fromMatch;\n\n    let datacoreQuery = `SELECT file FROM ${source.trim()}`;\n\n    if (where) {\n      datacoreQuery += ` WHERE ${where.trim()}`;\n    }\n\n    return datacoreQuery;\n  }\n\n  private convertDataviewTaskQuery(query: string): string {\n    // Convert Dataview task query to Datacore equivalent\n    // This would need to be implemented based on how Datacore handles tasks\n    return query; // Placeholder\n  }\n\n  private extractColumnsFromResult(result: any): string[] | undefined {\n    if (!result || !Array.isArray(result) || result.length === 0) {\n      return undefined;\n    }\n\n    const firstRow = result[0];\n    if (typeof firstRow === \"object\" && firstRow !== null) {\n      return Object.keys(firstRow);\n    }\n\n    return undefined;\n  }\n\n  private formatCellValue(value: any): string {\n    if (value === null || value === undefined) {\n      return \"\";\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((v) => this.formatCellValue(v)).join(\", \");\n    }\n\n    if (typeof value === \"object\") {\n      // Handle links, dates, and other objects\n      if (value.path) {\n        return `[[${value.path}]]`;\n      }\n      return JSON.stringify(value);\n    }\n\n    return String(value);\n  }\n}\n"],"version":3}