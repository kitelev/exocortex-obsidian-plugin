{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Entity.ts","mappings":";;;AAUA;;;GAGG;AACH,MAAsB,MAAM;IAK1B,YAAsB,KAAQ,EAAE,EAAQ;QAFhC,kBAAa,GAAkB,EAAE,CAAC;QAGxC,IAAI,CAAC,GAAG,GAAG,EAAE,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED;;;OAGG;IACO,UAAU;QAClB,2DAA2D;QAC3D,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,IAAW,EAAE;QACX,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;OAEG;IACI,MAAM,CAAC,MAAkB;QAC9B,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,EAAE;YAC3C,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,KAAK,MAAM,EAAE;YACnB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC,WAAW,EAAE;YACrE,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC;IACjC,CAAC;IAEO,QAAQ,CAAC,CAAM;QACrB,OAAO,CAAC,YAAY,MAAM,CAAC;IAC7B,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,WAAwB;QAC/C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAES,iBAAiB,CACzB,SAAiB,EACjB,YAAiC,EAAE;QAEnC,OAAO;YACL,SAAS;YACT,WAAW,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE;YAChC,UAAU,EAAE,IAAI,IAAI,EAAE;YACtB,SAAS;SACV,CAAC;IACJ,CAAC;IAEM,WAAW;QAChB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,kCAAkC;IACpE,CAAC;IAES,eAAe;QACvB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAES,iBAAiB;QACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACO,QAAQ;QAChB,8EAA8E;IAChF,CAAC;IAED;;OAEG;IACI,OAAO;QACZ,IAAI;YACF,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO,IAAI,CAAC;SACb;QAAC,MAAM;YACN,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CACF;AAtGD,wBAsGC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Entity.ts"],"sourcesContent":["/**\n * Domain Event interface for type safety\n */\nexport interface DomainEvent {\n  readonly eventType: string;\n  readonly aggregateId: string;\n  readonly occurredOn: Date;\n  readonly eventData: Record<string, any>;\n}\n\n/**\n * Base Entity class for Domain-Driven Design\n * Entities have identity and lifecycle\n */\nexport abstract class Entity<T> {\n  protected readonly _id: any; // Allow flexible ID types including AssetId\n  protected props: T;\n  private _domainEvents: DomainEvent[] = [];\n\n  protected constructor(props: T, id?: any) {\n    this._id = id ?? this.generateId();\n    this.props = props;\n  }\n\n  /**\n   * Method for generating entity ID\n   * Each entity can override this with its own ID generation strategy\n   */\n  protected generateId(): any {\n    // Default implementation - can be overridden by subclasses\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  /**\n   * Get the entity's unique identifier\n   */\n  public get id(): any {\n    return this._id;\n  }\n\n  /**\n   * Entities are equal if they have the same ID and type\n   */\n  public equals(object?: Entity<T>): boolean {\n    if (object === null || object === undefined) {\n      return false;\n    }\n\n    if (this === object) {\n      return true;\n    }\n\n    if (!this.isEntity(object) || object.constructor !== this.constructor) {\n      return false;\n    }\n\n    return this._id === object._id;\n  }\n\n  private isEntity(v: any): v is Entity<any> {\n    return v instanceof Entity;\n  }\n\n  /**\n   * Domain events for cross-aggregate communication\n   */\n  protected addDomainEvent(domainEvent: DomainEvent): void {\n    this._domainEvents.push(domainEvent);\n  }\n\n  protected createDomainEvent(\n    eventType: string,\n    eventData: Record<string, any> = {},\n  ): DomainEvent {\n    return {\n      eventType,\n      aggregateId: this._id.toString(),\n      occurredOn: new Date(),\n      eventData,\n    };\n  }\n\n  public clearEvents(): void {\n    this._domainEvents = [];\n  }\n\n  public get domainEvents(): DomainEvent[] {\n    return [...this._domainEvents]; // Return copy to prevent mutation\n  }\n\n  protected getDomainEvents(): DomainEvent[] {\n    return this._domainEvents;\n  }\n\n  protected clearDomainEvents(): void {\n    this._domainEvents = [];\n  }\n\n  /**\n   * Validation method that each entity can override\n   */\n  protected validate(): void {\n    // Default implementation - subclasses should override for specific validation\n  }\n\n  /**\n   * Check if entity is in a valid state\n   */\n  public isValid(): boolean {\n    try {\n      this.validate();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n"],"version":3}