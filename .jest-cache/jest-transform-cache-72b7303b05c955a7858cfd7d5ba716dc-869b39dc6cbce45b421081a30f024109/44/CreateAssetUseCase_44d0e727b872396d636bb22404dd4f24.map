{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/CreateAssetUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/CreateAssetUseCase.ts"],"sourcesContent":["import { Asset } from \"../../domain/entities/Asset\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { OntologyPrefix } from \"../../domain/value-objects/OntologyPrefix\";\nimport { IAssetRepository } from \"../../domain/repositories/IAssetRepository\";\nimport { IOntologyRepository } from \"../../domain/repositories/IOntologyRepository\";\nimport { OntologyProvisioningService } from \"../../domain/services/OntologyProvisioningService\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Use case for creating a new asset\n * Orchestrates the asset creation process\n */\nexport class CreateAssetUseCase {\n  constructor(\n    private readonly assetRepository: IAssetRepository,\n    private readonly ontologyRepository: IOntologyRepository,\n    private readonly ontologyProvisioningService: OntologyProvisioningService,\n  ) {}\n\n  async execute(request: CreateAssetRequest): Promise<CreateAssetResponse> {\n    try {\n      // Validate the request\n      const validationResult = this.validateRequest(request);\n      if (!validationResult.isSuccess) {\n        return {\n          success: false,\n          assetId: \"\",\n          message: validationResult.getError(),\n          error: validationResult.getError(),\n        };\n      }\n\n      // Ensure ontology exists (auto-provision if needed)\n      const ontologyResult = await this.ontologyProvisioningService.ensureOntologyExists(\n        request.ontologyPrefix,\n      );\n      if (!ontologyResult.isSuccess) {\n        return {\n          success: false,\n          assetId: \"\",\n          message: `Failed to provision ontology: ${ontologyResult.getError()}`,\n          error: ontologyResult.getError(),\n        };\n      }\n      const ontologyPrefix = ontologyResult.getValue()!;\n\n      // Create class name\n      const classNameResult = ClassName.create(request.className);\n      if (!classNameResult.isSuccess) {\n        return {\n          success: false,\n          assetId: \"\",\n          message: `Invalid class name: ${classNameResult.getError()}`,\n          error: classNameResult.getError(),\n        };\n      }\n      const className = classNameResult.getValue()!;\n\n      // Create the asset\n      const assetResult = Asset.create({\n        id: AssetId.generate(),\n        label: request.title,\n        className: className,\n        ontology: ontologyPrefix,\n        properties: request.properties || {},\n      });\n\n      if (!assetResult.isSuccess) {\n        return {\n          success: false,\n          assetId: \"\",\n          message: `Asset creation failed: ${assetResult.getError()}`,\n          error: assetResult.getError(),\n        };\n      }\n      const asset = assetResult.getValue()!;\n\n      // Save the asset\n      await this.assetRepository.save(asset);\n\n      return {\n        success: true,\n        assetId: asset.getId().toString(),\n        message: `Created asset: ${asset.getTitle()}`,\n      };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      return {\n        success: false,\n        assetId: \"\",\n        message: `Unexpected error: ${errorMessage}`,\n        error: errorMessage,\n      };\n    }\n  }\n\n  private validateRequest(request: CreateAssetRequest): Result<void> {\n    if (!request.title || request.title.trim().length === 0) {\n      return Result.fail<void>(\"Asset title is required\");\n    }\n\n    if (request.title.length > 200) {\n      return Result.fail<void>(\"Asset title cannot exceed 200 characters\");\n    }\n\n    if (!request.className) {\n      return Result.fail<void>(\"Asset class is required\");\n    }\n\n    if (!request.ontologyPrefix) {\n      return Result.fail<void>(\"Ontology prefix is required\");\n    }\n\n    if (request.ontologyPrefix.trim().length === 0) {\n      return Result.fail<void>(\"Ontology prefix cannot be empty\");\n    }\n\n    return Result.ok<void>();\n  }\n}\n\nexport interface CreateAssetRequest {\n  title: string;\n  className: string;\n  ontologyPrefix: string;\n  properties?: Record<string, any>;\n}\n\nexport interface CreateAssetResponse {\n  success: boolean;\n  assetId: string;\n  message: string;\n  error?: string;\n}\n"],"version":3}