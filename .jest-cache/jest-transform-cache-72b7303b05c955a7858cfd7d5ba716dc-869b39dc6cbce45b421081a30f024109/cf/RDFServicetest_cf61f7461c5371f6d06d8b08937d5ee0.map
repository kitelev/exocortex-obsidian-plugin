{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/application/services/RDFService.test.ts","mappings":";AAAA;;;GAGG;;AAEH,yCAAyC;AACzC,8CAA4C;AAE5C,6CAA6C;AAE7C,gFAA6E;AAG7E,4FAAyF;AACzF,sEAAmE;AACnE,wEAKqD;AACrD,+DAA4D;AAK5D,iCAAiC;AACjC,MAAM,uBAAuB,GAAyB;IACpD,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;IACpB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;IACtB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;CACvB,CAAC;AAEF,MAAM,qBAAqB,GAAuB;IAChD,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;IACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;IACpB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;IACpB,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;IAC3B,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE;IACpC,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE;CAC3B,CAAC;AAEF,wDAAwD;AACxD,MAAM,OAAO,GAAG;IACd,KAAK,EAAE;QACL,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;QAChC,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;QACvB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;QACjB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;QACf,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;QACvC,OAAO,EAAE;YACP,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;YAChB,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;SAChB;KACF;CACK,CAAC;AAET,2BAA2B;AAC3B,MAAM,kBAAkB,GAAG;IACzB,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;IACxB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;IACtB,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE;IACpC,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;IACvB,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;CAC5B,CAAC;AAEF,MAAM,aAAa,GAAG;IACpB,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;CACjB,CAAC;AAEF,MAAM,gBAAgB,GAAG;IACvB,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;IAChC,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;IAChC,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;CACzB,CAAC;AAEF,MAAM,iBAAiB,GAAG;IACxB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;CACrB,CAAC;AAEF,MAAM,oBAAoB,GAAG;IAC3B,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;IACpB,UAAU,EAAE,IAAI,CAAC,EAAE,EAAE;IACrB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;IACpB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;IACjB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;IACtB,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;IACzB,0BAA0B,EAAE,IAAI,CAAC,EAAE,EAAE;IACrC,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;IACvB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;CACvB,CAAC;AAEF,wDAAwD;AACxD,yDAAyD;AAEzD,IAAI,CAAC,MAAM,CAAC,gDAAgD,EAAE,GAAG,EAAE;IACjE,OAAO;QACL,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC;KACxC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,MAAM,CAAC,mDAAmD,EAAE,GAAG,EAAE;IACpE,OAAO;QACL,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC;KAC9C,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,MAAM,CAAC,oDAAoD,EAAE,GAAG,EAAE;IACrE,OAAO;QACL,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,iBAAiB,CAAC;KAChD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,IAAI,CAAC,MAAM,CAAC,uDAAuD,EAAE,GAAG,EAAE;IACxE,OAAO;QACL,gBAAgB,EAAE,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,oBAAoB,CAAC;KACtD,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAI,UAAsB,CAAC;IAC3B,IAAI,KAAY,CAAC;IAEjB,UAAU,CAAC,GAAG,EAAE;QACd,kBAAkB;QAClB,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,yDAAyD;QACzD,kBAAkB,CAAC,aAAa,CAAC,iBAAiB,CAAC;YACjD,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG,EAAE,CACb,+DAA+D;YACjE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;YACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,kBAAkB,CAAC,yBAAyB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAEvE,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;YAClC,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;gBACf,KAAK,EAAE,IAAI,aAAK,EAAE;gBAClB,WAAW,EAAE,CAAC;gBACd,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;gBACzC,QAAQ,EAAE,EAAE;aACb,CAAC;YACF,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;YACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,wGAAwG;QACxG,gBAAgB,CAAC,qBAAqB,CAAC,eAAe,CAAC;YACrD,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS;YACzB,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;YACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,gBAAgB,CAAC,qBAAqB,CAAC,eAAe,CAAC;YACrD,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS;YACzB,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;YACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC;YAChD,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;YACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,kBAAkB,CAAC,WAAW,CAAC,kBAAkB,CAC/C,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,EAAE;YAC1B,iCAAiC;YACjC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACxC,OAAO;gBACL,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;gBAC7C,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;gBACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;gBAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;gBACzB,KAAK,EAAE,EAAE;aACV,CAAC;QACJ,CAAC,CACF,CAAC;QAEF,kBAAkB,CAAC,gBAAgB,CAAC,kBAAkB,CACpD,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE;YACnB,IAAI,QAAQ;gBAAE,OAAO,QAAQ,CAAC;YAC9B,MAAM,SAAS,GAAG,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;YACxD,OAAO,iBAAiB,SAAS,EAAE,CAAC;QACtC,CAAC,CACF,CAAC;QAEF,+CAA+C;QAC/C,iBAAiB,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAChE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACjC,IAAI,OAAe,CAAC;YAEpB,QAAQ,OAAO,CAAC,MAAM,EAAE;gBACtB,KAAK,SAAS;oBACZ,OAAO,GAAG,IAAI,CAAC,SAAS,CACtB;wBACE,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;wBACzC,QAAQ,EAAE;4BACR;gCACE,KAAK,EAAE,6BAA6B;gCACpC,yBAAyB,EAAE,EAAE,QAAQ,EAAE,UAAU,EAAE;6BACpD;yBACF;qBACF,EACD,IAAI,EACJ,CAAC,CACF,CAAC;oBACF,MAAM;gBACR,KAAK,WAAW;oBACd,OAAO;wBACL,sEAAsE,CAAC;oBACzE,MAAM;gBACR,KAAK,QAAQ,CAAC;gBACd;oBACE,OAAO;wBACL,2GAA2G,CAAC;oBAC9G,MAAM;aACT;YAED,OAAO;gBACL,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,OAAO;oBACP,WAAW;oBACX,MAAM,EAAE,OAAO,CAAC,MAAM;iBACvB,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;gBACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;gBAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;gBACzB,KAAK,EAAE,EAAE;aACV,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,+BAA+B;QAC/B,oBAAoB,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACtD,oBAAoB,CAAC,UAAU,CAAC,kBAAkB,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC;QAC7D,oBAAoB,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,GAAG,EAAE,EAAE,CAC1D,GAAG,CAAC,QAAQ,EAAE,CACf,CAAC;QACF,oBAAoB,CAAC,cAAc,CAAC,eAAe,CAAC;YAClD,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,qBAAqB,EAAE,EAAE;YACtE;gBACE,MAAM,EAAE,MAAM;gBACd,SAAS,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,4BAA4B,EAAE;aAC5D;SACF,CAAC,CAAC;QACH,oBAAoB,CAAC,0BAA0B,CAAC,eAAe,CAC7D,qCAAqC,CACtC,CAAC;QACF,oBAAoB,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QACxD,oBAAoB,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QAEvE,gBAAgB,CAAC,aAAa,CAAC,eAAe,CAAC;YAC7C,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;gBACf,OAAO,EAAE,IAAI;gBACb,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,EAAE;aACb,CAAC;YACF,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE;YACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,EAAE;YAClB,eAAe,EAAE,GAAG,EAAE,CAAC,EAAE;YACzB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,UAAU,GAAG,IAAI,uBAAU,CAAC,uBAAuB,EAAE,qBAAqB,CAAC,CAAC;QAC5E,KAAK,GAAG,IAAI,aAAK,EAAE,CAAC;QAEpB,qBAAqB;QACrB,MAAM,OAAO,GAAG,IAAI,YAAG,CAAC,6BAA6B,CAAC,CAAC;QACvD,MAAM,SAAS,GAAG,IAAI,YAAG,CAAC,yBAAyB,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,gBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QAE1C,KAAK,CAAC,GAAG,CAAC,IAAI,eAAM,CAAC,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACvC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,SAAS;gBACjB,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC1C,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEvC,uBAAuB;YACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAChD,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,6CAA6C;YAC7C,gBAAgB,CAAC,qBAAqB,CAAC,eAAe,CAAC;gBACrD,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;gBACpB,UAAU,EAAE,GAAG,EAAE,CAAC,6BAA6B;aAChD,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,SAAgB;gBACxB,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,SAAS,CACnC,oCAAoC,CACrC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,aAAa,GAAG;;;;aAIf,CAAC;YAER,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE;gBAC9D,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,OAAO;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC5D,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC,CAAC,yCAAyC;QAClG,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;gBACnC,UAAU,EAAE;oBACV,EAAE,EAAE,qBAAqB;iBAC1B;gBACD,QAAQ,EAAE;oBACR;wBACE,KAAK,EAAE,YAAY;wBACnB,SAAS,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE;wBACtC,QAAQ,EAAE;4BACR,QAAQ,EAAE,IAAI;4BACd,OAAO,EAAE,0CAA0C;yBACpD;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE;gBAC9D,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,OAAO;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACvC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,6CAA6C;YAC7C,gBAAgB,CAAC,qBAAqB,CAAC,eAAe,CAAC;gBACrD,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;gBACpB,UAAU,EAAE,GAAG,EAAE,CAAC,oCAAoC;aACvD,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,iBAAiB,EAAE,KAAK,EAAE;gBAClE,MAAM,EAAE,SAAgB;gBACxB,SAAS,EAAE,OAAO;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,SAAS,CACnC,oCAAoC,CACrC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAElC,MAAM,aAAa,GAAG;;;aAGf,CAAC;YAER,8DAA8D;YAC9D,MAAM,gBAAgB,GAAG,IAAI,aAAK,EAAE,CAAC;YACrC,gBAAgB,CAAC,GAAG,CAClB,IAAI,eAAM,CACR,IAAI,YAAG,CAAC,8BAA8B,CAAC,EACvC,IAAI,YAAG,CAAC,yBAAyB,CAAC,EAClC,gBAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAC7B,CACF,CAAC;YAEF,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,KAAK,EAAE,gBAAgB;oBACvB,WAAW,EAAE,CAAC;oBACd,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;oBACzC,QAAQ,EAAE,EAAE;iBACb,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE;gBAC9D,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,SAAS;aACrB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAClD,uDAAuD;YACvD,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,OAAO,GAAG,UAAU,CAAC,mBAAmB,EAAE,CAAC;YAEjD,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAEhD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAC1C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,yBAAyB;oBACpC,MAAM,EAAE,UAAU;iBACnB;gBACD;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,wBAAwB;oBACnC,MAAM,EAAE,IAAI;iBACb;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,eAAe,EACf,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzC,MAAM,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,UAAU;aACV,CAAC;YAET,sDAAsD;YACtD,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,UAAU;aACR,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC/D,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAClC,0EAA0E,CAC3E,CAAC;YAEF,4BAA4B;YAC5B,kBAAkB,CAAC,aAAa,CAAC,iBAAiB,CAAC;gBACjD,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CACb,wEAAwE;gBAC1E,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,wBAAwB;YACxB,kBAAkB,CAAC,yBAAyB,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAEvE,0BAA0B;YAC1B,MAAM,SAAS,GAAG,IAAI,aAAK,EAAE,CAAC;YAC9B,SAAS,CAAC,GAAG,CACX,IAAI,eAAM,CACR,IAAI,YAAG,CAAC,4BAA4B,CAAC,EACrC,IAAI,YAAG,CAAC,yBAAyB,CAAC,EAClC,gBAAO,CAAC,MAAM,CAAC,aAAa,CAAC,CAC9B,CACF,CAAC;YAEF,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,CAAC;oBACd,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;oBACzC,QAAQ,EAAE,EAAE;iBACb,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,mBAAmB,CACjD,QAAQ,CAAC,IAAI,EACb,KAAK,EACL;gBACE,SAAS,EAAE,OAAO;aACnB,CACF,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,yEAAyE;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,aAAa;aACb,CAAC;YAET,sDAAsD;YACtD,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,aAAa;aACX,CAAC;YACX,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAC/D,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAClC,IAAI,CAAC,SAAS,CAAC;gBACb,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;gBACzC,QAAQ,EAAE,EAAE;aACb,CAAC,CACH,CAAC;YAEF,4BAA4B;YAC5B,kBAAkB,CAAC,aAAa,CAAC,iBAAiB,CAAC;gBACjD,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CACb,IAAI,CAAC,SAAS,CAAC;oBACb,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;oBACzC,QAAQ,EAAE,EAAE;iBACb,CAAC;gBACJ,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,oCAAoC;YACpC,kBAAkB,CAAC,yBAAyB,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;YAExE,0BAA0B;YAC1B,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,KAAK,EAAE,IAAI,aAAK,EAAE;oBAClB,WAAW,EAAE,CAAC;oBACd,UAAU,EAAE,EAAE,EAAE,EAAE,qBAAqB,EAAE;oBACzC,QAAQ,EAAE,EAAE;iBACb,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,mBAAmB,CACjD,QAAQ,CAAC,IAAI,EACb,KAAK,EACL;gBACE,SAAS,EAAE,OAAO;aACnB,CACF,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,yEAAyE;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,iBAAiB;gBACvB,IAAI,EAAE,iBAAiB;aACjB,CAAC;YAET,yBAAyB;YACxB,qBAAqB,CAAC,QAAsB,CAAC,iBAAiB,CAC7D,eAAM,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAC/C,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,mBAAmB,CACjD,QAAQ,CAAC,IAAI,EACb,KAAK,EACL;gBACE,SAAS,EAAE,OAAO;aACnB,CACF,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;QACjC,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,SAAS,GAAG;gBAChB,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;gBACxD,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE;gBACxD,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,QAAQ,EAAE;aACjE,CAAC;YAET,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAChD,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS;gBACzB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,YAAY,EAAE,CAAC;YAE/C,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,+BAA+B;YAC9D,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvC,UAAU;gBACV,UAAU;gBACV,gBAAgB;aACjB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,SAAS,GAAG;gBAChB,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,KAAK,EAAE;gBAChE;oBACE,IAAI,EAAE,gBAAgB;oBACtB,IAAI,EAAE,wBAAwB;oBAC9B,SAAS,EAAE,QAAQ;iBACpB;aACK,CAAC;YAET,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC;gBAChD,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,SAAS;gBACzB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;YAExD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC;gBACvC,kBAAkB;gBAClB,wBAAwB;aACzB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;QAC7B,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAErD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpD,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,OAAO,GAAG;gBACd,UAAU,EAAE,IAAI;gBAChB,eAAe,EAAE,IAAI;gBACrB,eAAe,EAAE,IAAI;aACtB,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAE9D,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,yBAAyB;oBACpC,MAAM,EAAE,UAAU;iBACnB;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,UAAU,CAAC,kBAAkB,CAC1C,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,MAAM;oBACf,SAAS,EAAE,yBAAyB;oBACpC,MAAM,EAAE,UAAU;iBACnB;aACF,CAAC;YAEF,2DAA2D;YAC3D,iBAAiB,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;gBACpE,OAAO;oBACL,SAAS,EAAE,IAAI;oBACf,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;wBACf,OAAO,EAAE,6CAA6C;wBACtD,WAAW,EAAE,CAAC;wBACd,MAAM,EAAE,OAAO,CAAC,MAAM;qBACvB,CAAC;oBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;iBACvB,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACjD,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,wBAAwB;oBACnC,MAAM,EAAE,EAAE;iBACX;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,2BAA2B;oBACtC,MAAM,EAAE,IAAI;iBACb;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,8BAA8B;oBACzC,MAAM,EAAE;wBACN,IAAI,EAAE,SAAS;wBACf,KAAK,EAAE,YAAY;wBACnB,QAAQ,EAAE,uCAAuC;qBAClD;iBACF;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6DAA6D,EAAE,KAAK,IAAI,EAAE;YAC3E,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,yBAAyB;oBACpC,MAAM,EAAE;wBACN,IAAI,EAAE,SAAS;wBACf,KAAK,EAAE,MAAM;wBACb,IAAI,EAAE,IAAI;qBACX;iBACF;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,YAAY,GAAG;gBACnB;oBACE,OAAO,EAAE,6BAA6B;oBACtC,SAAS,EAAE,yBAAyB;oBACpC,MAAM,EAAE,IAAI;iBACb;aACF,CAAC;YAEF,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,kBAAkB,CAChD,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,KAAK,CACN,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YAClD,mCAAmC;YACnC,MAAM,YAAY,GAAG,IAAI,aAAK,EAAE,CAAC;YAEjC,6BAA6B;YAC7B,iBAAiB,CAAC,SAAS,CAAC,sBAAsB,CAAC,GAAG,EAAE;gBACtD,OAAO;oBACL,SAAS,EAAE,KAAK;oBAChB,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;oBACpB,UAAU,EAAE,GAAG,EAAE,CAAC,wCAAwC;iBAC3D,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,YAAY,EAAE;gBACxD,MAAM,EAAE,QAAQ;gBAChB,OAAO,EAAE,aAAa;gBACtB,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;YAEH,qCAAqC;YACrC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,cAAc,GAAG,uBAAuB,CAAC;YAE/C,uBAAuB;YACvB,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;gBACpB,UAAU,EAAE,GAAG,EAAE,CAAC,oBAAoB;aACvC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,cAAc,EAAE,KAAK,EAAE;gBAC/D,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,OAAO;gBAClB,UAAU,EAAE,IAAI;aACjB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,gBAAgB,GAAG;;;aAGlB,CAAC;YAER,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,gBAAgB,EAAE,KAAK,EAAE;gBACjE,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,OAAO;gBAClB,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;YAEH,uCAAuC;YACvC,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,sCAAsC;gBACtC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;aAC3D;iBAAM;gBACL,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;aACzD;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,aAAa,GAAG,qBAAqB,CAAC,CAAC,sBAAsB;YAEnE,2CAA2C;YAC3C,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;gBACpB,UAAU,EAAE,GAAG,EAAE,CAAC,wBAAwB;aAC3C,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE;gBAC9D,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,OAAO;gBAClB,UAAU,EAAE,IAAI,EAAE,6CAA6C;aAChE,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YACrD,oBAAoB;YACpB,kBAAkB,CAAC,WAAW,CAAC,iBAAiB,CAAC;gBAC/C,SAAS,EAAE,KAAK;gBAChB,SAAS,EAAE,IAAI;gBACf,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI;gBACpB,UAAU,EAAE,GAAG,EAAE,CAAC,cAAc;aACjC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,UAAU;aACrB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,IAAI,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YACnD,MAAM,uBAAuB,GAAG;;;aAGzB,CAAC;YAER,6BAA6B;YAC7B,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,KAAK,EAAE,IAAI,aAAK,EAAE;oBAClB,WAAW,EAAE,CAAC;oBACd,UAAU,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE;oBAClC,QAAQ,EAAE,CAAC,oCAAoC,CAAC;iBACjD,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,gCAAgC;YAChC,gBAAgB,CAAC,aAAa,CAAC,eAAe,CAAC;gBAC7C,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,OAAO,EAAE,IAAI;oBACb,MAAM,EAAE,EAAE;oBACV,QAAQ,EAAE,CAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;iBAC1D,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CACvC,uBAAuB,EACvB,KAAK,EACL;gBACE,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,OAAO;gBAClB,UAAU,EAAE,IAAI;gBAChB,aAAa,EAAE,IAAI;aACpB,CACF,CAAC;YAEF,+BAA+B;YAC/B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACrC,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,UAAU,GAAG,IAAI,aAAK,EAAE,CAAC;YAE/B,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,UAAU,EAAE;gBACtD,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,KAAK,IAAI,EAAE;YAC/C,MAAM,UAAU,GAAG,IAAI,aAAK,EAAE,CAAC;YAE/B,8CAA8C;YAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;gBAC7B,MAAM,MAAM,GAAG,IAAI,eAAM,CACvB,IAAI,YAAG,CAAC,6BAA6B,CAAC,EAAE,CAAC,EACzC,IAAI,YAAG,CAAC,yBAAyB,CAAC,EAClC,gBAAO,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAC9B,CAAC;gBACF,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACxB;YAED,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,UAAU,EAAE;gBACtD,MAAM,EAAE,WAAW;gBACnB,WAAW,EAAE,KAAK;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YACnC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;QACpC,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,kCAAkC;YAClC,MAAM,sBAAsB,GAAG,IAAI,mCAAgB,EAAE,CAAC;YACtD,sBAAsB,CAAC,UAAU,CAAC,QAAQ,EAAE,4BAA4B,CAAC,CAAC;YAE1E,MAAM,gBAAgB,GAAG,IAAI,uBAAU,CACrC,uBAAuB,EACvB,qBAAqB,EACrB,sBAAsB,CACvB,CAAC;YACF,MAAM,SAAS,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;YAEzD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,aAAa,GAAG;;;;aAIf,CAAC;YAER,sCAAsC;YACtC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC;gBAClC,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,KAAK;gBAChB,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC;oBACf,KAAK,EAAE,IAAI,aAAK,EAAE;oBAClB,WAAW,EAAE,CAAC;oBACd,UAAU,EAAE;wBACV,MAAM,EAAE,4BAA4B;wBACpC,IAAI,EAAE,0BAA0B;qBACjC;oBACD,QAAQ,EAAE,EAAE;iBACb,CAAC;gBACF,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI;aACvB,CAAC,CAAC;YAEH,wDAAwD;YACxD,oBAAoB,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,MAAc,EAAE,EAAE;gBACnE,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,KAAK,MAAM,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,EAAE;gBAC9D,MAAM,EAAE,QAAQ;gBAChB,SAAS,EAAE,OAAO;aACnB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEpC,MAAM,SAAS,GAAG,UAAU,CAAC,mBAAmB,EAAE,CAAC;YACnD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAC3C,UAAU,CAAC,GAAG,EAAE;YACb,qBAAqB,CAAC,SAAuB,CAAC,iBAAiB,CAC9D,eAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CACrB,CAAC;YACD,qBAAqB,CAAC,gBAA8B,CAAC,kBAAkB,CACtE,CAAC,QAAQ,EAAE,SAAS,EAAE,EAAE;gBACtB,IAAI,QAAQ,EAAE;oBACZ,2DAA2D;oBAC3D,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;wBAC1B,OAAO,QAAQ,CAAC;qBACjB;oBACD,OAAO,GAAG,QAAQ,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;iBAC5C;gBACD,OAAO,UAAU,IAAI,CAAC,GAAG,EAAE,IAAI,SAAS,IAAI,KAAK,EAAE,CAAC;YACtD,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,IAAI;gBACjB,QAAQ,EAAE,iBAAiB;aAC5B,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAC1D,iBAAiB,EACjB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACrD,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,IAAI;gBACjB,YAAY,EAAE,SAAS;gBACvB,QAAQ,EAAE,UAAU;aACrB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAC1D,kBAAkB,EAClB,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC1D,MAAM,MAAM,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,KAAK,EAAE;gBACjD,MAAM,EAAE,QAAQ;gBAChB,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC;YAEH,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,MAAM,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC,oBAAoB,CAC1D,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,EACjC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CACnB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,6GAA6G","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/application/services/RDFService.test.ts"],"sourcesContent":["/**\n * Test suite for RDF Service functionality\n * Memory-optimized for CI/CD environments\n */\n\n// Import memory optimization setup first\nimport \"../../../memory-optimization-setup\";\n\n// Manual mocking approach for better control\n\nimport { RDFService } from \"../../../../src/application/services/RDFService\";\nimport { RDFSerializer } from \"../../../../src/application/services/RDFSerializer\";\nimport { RDFParser } from \"../../../../src/application/services/RDFParser\";\nimport { NamespaceManager } from \"../../../../src/application/services/NamespaceManager\";\nimport { Graph } from \"../../../../src/domain/semantic/core/Graph\";\nimport {\n  Triple,\n  IRI,\n  BlankNode,\n  Literal,\n} from \"../../../../src/domain/semantic/core/Triple\";\nimport { Result } from \"../../../../src/domain/core/Result\";\nimport { TFile } from \"obsidian\";\nimport { INotificationService } from \"../../../../src/application/ports/INotificationService\";\nimport { IFileSystemAdapter } from \"../../../../src/application/ports/IFileSystemAdapter\";\n\n// Mock implementations for ports\nconst mockNotificationService: INotificationService = {\n  showNotice: jest.fn(),\n  showError: jest.fn(),\n  showSuccess: jest.fn(),\n  showWarning: jest.fn(),\n};\n\nconst mockFileSystemAdapter: IFileSystemAdapter = {\n  readFile: jest.fn(),\n  writeFile: jest.fn(),\n  fileExists: jest.fn(),\n  listFiles: jest.fn(),\n  generateFileName: jest.fn(),\n  detectFormatFromExtension: jest.fn(),\n  ensureDirectory: jest.fn(),\n};\n\n// Mock Obsidian App with comprehensive vault operations\nconst mockApp = {\n  vault: {\n    getAbstractFileByPath: jest.fn(),\n    createFolder: jest.fn(),\n    create: jest.fn(),\n    modify: jest.fn(),\n    read: jest.fn(),\n    getFiles: jest.fn().mockReturnValue([]),\n    adapter: {\n      write: jest.fn(),\n      read: jest.fn(),\n    },\n  },\n} as any;\n\n// Mock the service classes\nconst mockRDFFileManager = {\n  readFromVault: jest.fn(),\n  saveToVault: jest.fn(),\n  detectFormatFromExtension: jest.fn(),\n  listRDFFiles: jest.fn(),\n  generateFileName: jest.fn(),\n};\n\nconst mockRDFParser = {\n  parse: jest.fn(),\n};\n\nconst mockRDFValidator = {\n  validateExportOptions: jest.fn(),\n  validateImportOptions: jest.fn(),\n  validateGraph: jest.fn(),\n};\n\nconst mockRDFSerializer = {\n  serialize: jest.fn(),\n};\n\nconst mockNamespaceManager = {\n  hasPrefix: jest.fn(),\n  addBinding: jest.fn(),\n  getPrefix: jest.fn(),\n  expand: jest.fn(),\n  compressIRI: jest.fn(),\n  getAllBindings: jest.fn(),\n  generatePrefixDeclarations: jest.fn(),\n  getNamespace: jest.fn(),\n  expandCURIE: jest.fn(),\n};\n\n// Override the imports with our mocks using jest.doMock\n// Using real RDFFileManager - just mock vault operations\n\njest.doMock(\"../../../../src/application/services/RDFParser\", () => {\n  return {\n    RDFParser: jest.fn(() => mockRDFParser),\n  };\n});\n\njest.doMock(\"../../../../src/application/services/RDFValidator\", () => {\n  return {\n    RDFValidator: jest.fn(() => mockRDFValidator),\n  };\n});\n\njest.doMock(\"../../../../src/application/services/RDFSerializer\", () => {\n  return {\n    RDFSerializer: jest.fn(() => mockRDFSerializer),\n  };\n});\n\njest.doMock(\"../../../../src/application/services/NamespaceManager\", () => {\n  return {\n    NamespaceManager: jest.fn(() => mockNamespaceManager),\n  };\n});\n\ndescribe(\"RDFService\", () => {\n  let rdfService: RDFService;\n  let graph: Graph;\n\n  beforeEach(() => {\n    // Reset all mocks\n    jest.clearAllMocks();\n\n    // Setup default mock responses for successful operations\n    mockRDFFileManager.readFromVault.mockResolvedValue({\n      isSuccess: true,\n      isFailure: false,\n      getValue: () =>\n        '@prefix ex: <http://example.org/> . ex:test ex:prop \"value\" .',\n      errorValue: () => \"\",\n      getError: () => \"\",\n      getErrorMessage: () => \"\",\n      error: \"\",\n    });\n\n    mockRDFFileManager.detectFormatFromExtension.mockReturnValue(\"turtle\");\n\n    mockRDFParser.parse.mockReturnValue({\n      isSuccess: true,\n      isFailure: false,\n      getValue: () => ({\n        graph: new Graph(),\n        tripleCount: 1,\n        namespaces: { ex: \"http://example.org/\" },\n        warnings: [],\n      }),\n      errorValue: () => \"\",\n      getError: () => \"\",\n      getErrorMessage: () => \"\",\n      error: \"\",\n    });\n\n    // CRITICAL FIX: Setup RDFValidator methods to return proper Result objects matching Result<T> interface\n    mockRDFValidator.validateExportOptions.mockReturnValue({\n      isSuccess: true,\n      isFailure: false,\n      getValue: () => undefined,\n      errorValue: () => \"\",\n      getError: () => \"\",\n      getErrorMessage: () => \"\",\n      error: \"\",\n    });\n\n    mockRDFValidator.validateImportOptions.mockReturnValue({\n      isSuccess: true,\n      isFailure: false,\n      getValue: () => undefined,\n      errorValue: () => \"\",\n      getError: () => \"\",\n      getErrorMessage: () => \"\",\n      error: \"\",\n    });\n\n    mockRDFFileManager.listRDFFiles.mockResolvedValue({\n      isSuccess: true,\n      isFailure: false,\n      getValue: () => [],\n      errorValue: () => \"\",\n      getError: () => \"\",\n      getErrorMessage: () => \"\",\n      error: \"\",\n    });\n\n    mockRDFFileManager.saveToVault.mockImplementation(\n      async (content, filePath) => {\n        // Simulate vault write operation\n        mockApp.vault.create(filePath, content);\n        return {\n          isSuccess: true,\n          isFailure: false,\n          getValue: () => ({ filePath, success: true }),\n          errorValue: () => \"\",\n          getError: () => \"\",\n          getErrorMessage: () => \"\",\n          error: \"\",\n        };\n      },\n    );\n\n    mockRDFFileManager.generateFileName.mockImplementation(\n      (fileName, format) => {\n        if (fileName) return fileName;\n        const extension = format === \"turtle\" ? \".ttl\" : \".rdf\";\n        return `generated-file${extension}`;\n      },\n    );\n\n    // Setup serializer mock - make it format-aware\n    mockRDFSerializer.serialize.mockImplementation((graph, options) => {\n      const tripleCount = graph.size();\n      let content: string;\n\n      switch (options.format) {\n        case \"json-ld\":\n          content = JSON.stringify(\n            {\n              \"@context\": { ex: \"http://example.org/\" },\n              \"@graph\": [\n                {\n                  \"@id\": \"http://example.org/person/1\",\n                  \"http://example.org/name\": { \"@value\": \"John Doe\" },\n                },\n              ],\n            },\n            null,\n            2,\n          );\n          break;\n        case \"n-triples\":\n          content =\n            '<http://example.org/person/1> <http://example.org/name> \"John Doe\" .';\n          break;\n        case \"turtle\":\n        default:\n          content =\n            '@prefix ex: <http://example.org/> .\\n<http://example.org/person/1> <http://example.org/name> \"John Doe\" .';\n          break;\n      }\n\n      return {\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          content,\n          tripleCount,\n          format: options.format,\n        }),\n        errorValue: () => \"\",\n        getError: () => \"\",\n        getErrorMessage: () => \"\",\n        error: \"\",\n      };\n    });\n\n    // Setup namespace manager mock\n    mockNamespaceManager.hasPrefix.mockReturnValue(false);\n    mockNamespaceManager.addBinding.mockImplementation(() => {});\n    mockNamespaceManager.compressIRI.mockImplementation((iri) =>\n      iri.toString(),\n    );\n    mockNamespaceManager.getAllBindings.mockReturnValue([\n      { prefix: \"ex\", namespace: { toString: () => \"http://example.org/\" } },\n      {\n        prefix: \"foaf\",\n        namespace: { toString: () => \"http://xmlns.com/foaf/0.1/\" },\n      },\n    ]);\n    mockNamespaceManager.generatePrefixDeclarations.mockReturnValue(\n      \"@prefix ex: <http://example.org/> .\",\n    );\n    mockNamespaceManager.getNamespace.mockReturnValue(null);\n    mockNamespaceManager.expandCURIE.mockReturnValue({ isSuccess: false });\n\n    mockRDFValidator.validateGraph.mockReturnValue({\n      isSuccess: true,\n      isFailure: false,\n      getValue: () => ({\n        isValid: true,\n        errors: [],\n        warnings: [],\n      }),\n      errorValue: () => \"\",\n      getError: () => \"\",\n      getErrorMessage: () => \"\",\n      error: \"\",\n    });\n\n    rdfService = new RDFService(mockNotificationService, mockFileSystemAdapter);\n    graph = new Graph();\n\n    // Add some test data\n    const subject = new IRI(\"http://example.org/person/1\");\n    const predicate = new IRI(\"http://example.org/name\");\n    const object = Literal.string(\"John Doe\");\n\n    graph.add(new Triple(subject, predicate, object));\n  });\n\n  describe(\"exportGraph\", () => {\n    it(\"should export graph in Turtle format\", async () => {\n      const result = await rdfService.exportGraph(graph, {\n        format: \"turtle\",\n        saveToVault: false,\n      });\n\n      expect(result.isSuccess).toBe(true);\n\n      const exportData = result.getValue();\n      expect(exportData.format).toBe(\"turtle\");\n      expect(exportData.tripleCount).toBe(1);\n      expect(exportData.content).toContain(\"@prefix\");\n      expect(exportData.content).toContain(\"John Doe\");\n    });\n\n    it(\"should export graph in JSON-LD format\", async () => {\n      const result = await rdfService.exportGraph(graph, {\n        format: \"json-ld\",\n        saveToVault: false,\n      });\n\n      expect(result.isSuccess).toBe(true);\n\n      const exportData = result.getValue();\n      expect(exportData.format).toBe(\"json-ld\");\n      expect(exportData.tripleCount).toBe(1);\n\n      // Should be valid JSON\n      const jsonData = JSON.parse(exportData.content);\n      expect(jsonData[\"@context\"]).toBeDefined();\n      expect(jsonData[\"@graph\"]).toBeDefined();\n    });\n\n    it(\"should validate export options\", async () => {\n      // Mock validation failure for invalid format\n      mockRDFValidator.validateExportOptions.mockReturnValue({\n        isSuccess: false,\n        isFailure: true,\n        getValue: () => null,\n        errorValue: () => \"Unsupported format: invalid\",\n      });\n\n      const result = await rdfService.exportGraph(graph, {\n        format: \"invalid\" as any,\n        saveToVault: false,\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.errorValue()).toContain(\n        \"Unsupported export format: invalid\",\n      );\n    });\n  });\n\n  describe(\"importRDF\", () => {\n    it(\"should import Turtle format RDF\", async () => {\n      const turtleContent = `\n                @prefix ex: <http://example.org/> .\n                ex:person1 ex:name \"Jane Smith\" .\n                ex:person1 ex:age \"30\"^^<http://www.w3.org/2001/XMLSchema#integer> .\n            `;\n\n      const result = await rdfService.importRDF(turtleContent, graph, {\n        format: \"turtle\",\n        mergeMode: \"merge\",\n      });\n\n      expect(result.isSuccess).toBe(true);\n\n      const { graph: updatedGraph, imported } = result.getValue();\n      expect(imported.tripleCount).toBeGreaterThan(0);\n      expect(updatedGraph.size()).toBeGreaterThanOrEqual(1); // Should have at least the imported data\n    });\n\n    it(\"should import JSON-LD format RDF\", async () => {\n      const jsonldContent = JSON.stringify({\n        \"@context\": {\n          ex: \"http://example.org/\",\n        },\n        \"@graph\": [\n          {\n            \"@id\": \"ex:person2\",\n            \"ex:name\": { \"@value\": \"Bob Johnson\" },\n            \"ex:age\": {\n              \"@value\": \"25\",\n              \"@type\": \"http://www.w3.org/2001/XMLSchema#integer\",\n            },\n          },\n        ],\n      });\n\n      const result = await rdfService.importRDF(jsonldContent, graph, {\n        format: \"json-ld\",\n        mergeMode: \"merge\",\n      });\n\n      expect(result.isSuccess).toBe(true);\n\n      const { imported } = result.getValue();\n      expect(imported.tripleCount).toBeGreaterThan(0);\n    });\n\n    it(\"should validate import options\", async () => {\n      // Mock validation failure for invalid format\n      mockRDFValidator.validateImportOptions.mockReturnValue({\n        isSuccess: false,\n        isFailure: true,\n        getValue: () => null,\n        errorValue: () => \"Unsupported import format: invalid\",\n      });\n\n      const result = await rdfService.importRDF(\"invalid content\", graph, {\n        format: \"invalid\" as any,\n        mergeMode: \"merge\",\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.errorValue()).toContain(\n        \"Unsupported import format: invalid\",\n      );\n    });\n\n    it(\"should handle replace merge mode\", async () => {\n      const originalSize = graph.size();\n\n      const turtleContent = `\n                @prefix ex: <http://example.org/> .\n                ex:newperson ex:name \"New Person\" .\n            `;\n\n      // Mock successful parsing with specific data for replace mode\n      const replacementGraph = new Graph();\n      replacementGraph.add(\n        new Triple(\n          new IRI(\"http://example.org/newperson\"),\n          new IRI(\"http://example.org/name\"),\n          Literal.string(\"New Person\"),\n        ),\n      );\n\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          graph: replacementGraph,\n          tripleCount: 1,\n          namespaces: { ex: \"http://example.org/\" },\n          warnings: [],\n        }),\n        errorValue: () => null,\n      });\n\n      const result = await rdfService.importRDF(turtleContent, graph, {\n        format: \"turtle\",\n        mergeMode: \"replace\",\n      });\n\n      expect(result.isSuccess).toBe(true);\n\n      const { graph: updatedGraph } = result.getValue();\n      // In replace mode, should return the replacement graph\n      expect(updatedGraph.size()).toBe(1);\n    });\n  });\n\n  describe(\"getSupportedFormats\", () => {\n    it(\"should return all supported formats\", () => {\n      const formats = rdfService.getSupportedFormats();\n\n      expect(formats).toContain(\"turtle\");\n      expect(formats).toContain(\"n-triples\");\n      expect(formats).toContain(\"json-ld\");\n      expect(formats).toContain(\"rdf-xml\");\n    });\n  });\n\n  describe(\"getFormatInfo\", () => {\n    it(\"should return format information\", () => {\n      const info = rdfService.getFormatInfo(\"turtle\");\n\n      expect(info.extension).toBe(\".ttl\");\n      expect(info.mimeType).toBe(\"text/turtle\");\n      expect(info.name).toBe(\"Turtle\");\n    });\n  });\n\n  describe(\"exportQueryResults\", () => {\n    it(\"should export SPARQL query results\", async () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/name\",\n          object: \"John Doe\",\n        },\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/age\",\n          object: \"30\",\n        },\n      ];\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"query-results\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n\n      const exportData = result.getValue();\n      expect(exportData.format).toBe(\"turtle\");\n      expect(exportData.tripleCount).toBe(2);\n    });\n  });\n\n  describe(\"importFromVaultFile\", () => {\n    it.skip(\"should import RDF from vault file\", async () => {\n      const mockFile = {\n        path: \"test.ttl\",\n        name: \"test.ttl\",\n      } as any;\n\n      // Mock the vault to return a proper TFile for reading\n      const mockTFile = {\n        path: \"test.ttl\",\n        name: \"test.ttl\",\n      } as TFile;\n      mockApp.vault.getAbstractFileByPath.mockReturnValue(mockTFile);\n      mockApp.vault.read.mockResolvedValue(\n        '@prefix ex: <http://example.org/> . ex:person1 ex:name \\\"Test Person\\\" .',\n      );\n\n      // Mock successful file read\n      mockRDFFileManager.readFromVault.mockResolvedValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () =>\n          '@prefix ex: <http://example.org/> . ex:person1 ex:name \"Test Person\" .',\n        errorValue: () => null,\n      });\n\n      // Mock format detection\n      mockRDFFileManager.detectFormatFromExtension.mockReturnValue(\"turtle\");\n\n      // Mock successful parsing\n      const testGraph = new Graph();\n      testGraph.add(\n        new Triple(\n          new IRI(\"http://example.org/person1\"),\n          new IRI(\"http://example.org/name\"),\n          Literal.string(\"Test Person\"),\n        ),\n      );\n\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          graph: testGraph,\n          tripleCount: 1,\n          namespaces: { ex: \"http://example.org/\" },\n          warnings: [],\n        }),\n        errorValue: () => null,\n      });\n\n      const result = await rdfService.importFromVaultFile(\n        mockFile.path,\n        graph,\n        {\n          mergeMode: \"merge\",\n        },\n      );\n\n      expect(result.isSuccess).toBe(true);\n      // Note: using real RDFFileManager implementation, not testing mock calls\n    });\n\n    it.skip(\"should auto-detect format from file extension\", async () => {\n      const mockFile = {\n        path: \"test.jsonld\",\n        name: \"test.jsonld\",\n      } as any;\n\n      // Mock the vault to return a proper TFile for reading\n      const mockTFile = {\n        path: \"test.jsonld\",\n        name: \"test.jsonld\",\n      } as TFile;\n      mockApp.vault.getAbstractFileByPath.mockReturnValue(mockTFile);\n      mockApp.vault.read.mockResolvedValue(\n        JSON.stringify({\n          \"@context\": { ex: \"http://example.org/\" },\n          \"@graph\": [],\n        }),\n      );\n\n      // Mock successful file read\n      mockRDFFileManager.readFromVault.mockResolvedValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () =>\n          JSON.stringify({\n            \"@context\": { ex: \"http://example.org/\" },\n            \"@graph\": [],\n          }),\n        errorValue: () => null,\n      });\n\n      // Mock format detection for JSON-LD\n      mockRDFFileManager.detectFormatFromExtension.mockReturnValue(\"json-ld\");\n\n      // Mock successful parsing\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          graph: new Graph(),\n          tripleCount: 0,\n          namespaces: { ex: \"http://example.org/\" },\n          warnings: [],\n        }),\n        errorValue: () => null,\n      });\n\n      const result = await rdfService.importFromVaultFile(\n        mockFile.path,\n        graph,\n        {\n          mergeMode: \"merge\",\n        },\n      );\n\n      expect(result.isSuccess).toBe(true);\n      // Note: using real RDFFileManager implementation, not testing mock calls\n    });\n\n    it(\"should handle file read errors\", async () => {\n      const mockFile = {\n        path: \"nonexistent.ttl\",\n        name: \"nonexistent.ttl\",\n      } as any;\n\n      // Mock file read failure\n      (mockFileSystemAdapter.readFile as jest.Mock).mockResolvedValue(\n        Result.fail(\"File not found: nonexistent.ttl\"),\n      );\n\n      const result = await rdfService.importFromVaultFile(\n        mockFile.path,\n        graph,\n        {\n          mergeMode: \"merge\",\n        },\n      );\n\n      expect(result.isFailure).toBe(true);\n      expect(result.errorValue()).toContain(\"File not found\");\n    });\n  });\n\n  describe.skip(\"listRDFFiles\", () => {\n    it(\"should list RDF files in vault\", async () => {\n      const mockFiles = [\n        { name: \"test.ttl\", path: \"test.ttl\", extension: \"ttl\" },\n        { name: \"data.rdf\", path: \"data.rdf\", extension: \"rdf\" },\n        { name: \"example.jsonld\", path: \"example.jsonld\", extension: \"jsonld\" },\n      ] as any;\n\n      mockRDFFileManager.listRDFFiles.mockResolvedValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => mockFiles,\n        errorValue: () => null,\n      });\n\n      const result = await rdfService.listRDFFiles();\n\n      expect(result.isSuccess).toBe(true);\n      const files = result.getValue();\n      expect(files).toHaveLength(3); // Should exclude non-RDF files\n      expect(files.map((f) => f.name)).toEqual([\n        \"test.ttl\",\n        \"data.rdf\",\n        \"example.jsonld\",\n      ]);\n    });\n\n    it(\"should filter files by folder\", async () => {\n      const mockFiles = [\n        { name: \"test.ttl\", path: \"folder1/test.ttl\", extension: \"ttl\" },\n        {\n          name: \"example.jsonld\",\n          path: \"folder1/example.jsonld\",\n          extension: \"jsonld\",\n        },\n      ] as any;\n\n      mockRDFFileManager.listRDFFiles.mockResolvedValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => mockFiles,\n        errorValue: () => null,\n      });\n\n      const result = await rdfService.listRDFFiles(\"folder1\");\n\n      expect(result.isSuccess).toBe(true);\n      const files = result.getValue();\n      expect(files).toHaveLength(2);\n      expect(files.map((f) => f.path)).toEqual([\n        \"folder1/test.ttl\",\n        \"folder1/example.jsonld\",\n      ]);\n    });\n  });\n\n  describe(\"validateGraph\", () => {\n    it(\"should validate graph with default options\", async () => {\n      const result = await rdfService.validateGraph(graph);\n\n      expect(result.isSuccess).toBe(true);\n      const validation = result.getValue();\n      expect(validation.isValid).toBe(true);\n      expect(Array.isArray(validation.errors)).toBe(true);\n      expect(Array.isArray(validation.warnings)).toBe(true);\n    });\n\n    it(\"should validate graph with custom options\", async () => {\n      const options = {\n        strictMode: true,\n        checkDuplicates: true,\n        checkNamespaces: true,\n      };\n\n      const result = await rdfService.validateGraph(graph, options);\n\n      expect(result.isSuccess).toBe(true);\n    });\n  });\n\n  describe(\"createNodeFromValue\", () => {\n    it(\"should create IRI from string with protocol\", () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/name\",\n          object: \"John Doe\",\n        },\n      ];\n\n      const result = rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result).resolves.toBeDefined();\n    });\n\n    it(\"should create BlankNode from string with _: prefix\", async () => {\n      const queryResults = [\n        {\n          subject: \"_:b1\",\n          predicate: \"http://example.org/name\",\n          object: \"John Doe\",\n        },\n      ];\n\n      // Update the serializer mock to handle blank node subjects\n      mockRDFSerializer.serialize.mockImplementationOnce((graph, options) => {\n        return {\n          isSuccess: true,\n          isFailure: false,\n          getValue: () => ({\n            content: '_:b1 <http://example.org/name> \"John Doe\" .',\n            tripleCount: 1,\n            format: options.format,\n          }),\n          errorValue: () => null,\n        };\n      });\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n      const exported = result.getValue();\n      expect(exported.content).toContain(\"_:b1\");\n    });\n\n    it(\"should create Literal from number\", async () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/age\",\n          object: 25,\n        },\n      ];\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    it(\"should create Literal from boolean\", async () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/active\",\n          object: true,\n        },\n      ];\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    it(\"should create typed Literal from object with datatype\", async () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/birthDate\",\n          object: {\n            type: \"literal\",\n            value: \"1990-01-01\",\n            datatype: \"http://www.w3.org/2001/XMLSchema#date\",\n          },\n        },\n      ];\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    it(\"should create language-tagged Literal from object with lang\", async () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/name\",\n          object: {\n            type: \"literal\",\n            value: \"Jean\",\n            lang: \"fr\",\n          },\n        },\n      ];\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n    });\n\n    it(\"should handle null values gracefully\", async () => {\n      const queryResults = [\n        {\n          subject: \"http://example.org/person/1\",\n          predicate: \"http://example.org/name\",\n          object: null,\n        },\n      ];\n\n      const result = await rdfService.exportQueryResults(\n        queryResults,\n        \"turtle\",\n        \"test\",\n        false,\n      );\n\n      expect(result.isSuccess).toBe(true);\n    });\n  });\n\n  describe(\"error handling\", () => {\n    it(\"should handle serialization errors\", async () => {\n      // Create an invalid graph scenario\n      const invalidGraph = new Graph();\n\n      // Mock serialization failure\n      mockRDFSerializer.serialize.mockImplementationOnce(() => {\n        return {\n          isSuccess: false,\n          isFailure: true,\n          getValue: () => null,\n          errorValue: () => \"Serialization failed: Invalid base IRI\",\n        };\n      });\n\n      const result = await rdfService.exportGraph(invalidGraph, {\n        format: \"turtle\",\n        baseIRI: \"invalid-uri\",\n        saveToVault: false,\n      });\n\n      // Should handle the error gracefully\n      expect(result.isFailure).toBe(true);\n    });\n\n    it(\"should handle parsing errors in strict mode\", async () => {\n      const invalidContent = \"This is not valid RDF\";\n\n      // Mock parsing failure\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: false,\n        isFailure: true,\n        getValue: () => null,\n        errorValue: () => \"Invalid RDF syntax\",\n      });\n\n      const result = await rdfService.importRDF(invalidContent, graph, {\n        format: \"turtle\",\n        mergeMode: \"merge\",\n        strictMode: true,\n      });\n\n      expect(result.isFailure).toBe(true);\n    });\n\n    it(\"should handle malformed RDF content\", async () => {\n      const malformedContent = `\n                @prefix ex: <http://example.org/>\n                ex:person1 ex:name \"Unclosed string\n            `;\n\n      const result = await rdfService.importRDF(malformedContent, graph, {\n        format: \"turtle\",\n        mergeMode: \"merge\",\n        strictMode: false,\n      });\n\n      // Should fail or succeed with warnings\n      if (result.isSuccess) {\n        // If successful, should have warnings\n        expect(result.getValue().imported.warnings).toBeDefined();\n      } else {\n        expect(result.errorValue()).toContain(\"parsing failed\");\n      }\n    });\n\n    it(\"should handle invalid JSON-LD content\", async () => {\n      const invalidJsonLD = '{ \"invalid\": json }'; // Invalid JSON syntax\n\n      // Mock parsing failure for invalid JSON-LD\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: false,\n        isFailure: true,\n        getValue: () => null,\n        errorValue: () => \"Invalid JSON-LD syntax\",\n      });\n\n      const result = await rdfService.importRDF(invalidJsonLD, graph, {\n        format: \"json-ld\",\n        mergeMode: \"merge\",\n        strictMode: true, // Enable strict mode to catch parsing errors\n      });\n\n      expect(result.isFailure).toBe(true);\n    });\n\n    it.skip(\"should handle vault write errors\", async () => {\n      // Mock save failure\n      mockRDFFileManager.saveToVault.mockResolvedValue({\n        isSuccess: false,\n        isFailure: true,\n        getValue: () => null,\n        errorValue: () => \"Write failed\",\n      });\n\n      const result = await rdfService.exportGraph(graph, {\n        format: \"turtle\",\n        saveToVault: true,\n        fileName: \"test.ttl\",\n      });\n\n      expect(result.isFailure).toBe(true);\n      expect(result.errorValue()).toContain(\"Write failed\");\n    });\n\n    it.skip(\"should handle namespace errors\", async () => {\n      const contentWithBadNamespace = `\n                @prefix bad: <invalid-uri> .\n                bad:test bad:prop \"value\" .\n            `;\n\n      // Mock parsing with warnings\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          graph: new Graph(),\n          tripleCount: 1,\n          namespaces: { bad: \"invalid-uri\" },\n          warnings: [\"Invalid namespace URI: invalid-uri\"],\n        }),\n        errorValue: () => null,\n      });\n\n      // Mock validation with warnings\n      mockRDFValidator.validateGraph.mockReturnValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          isValid: true,\n          errors: [],\n          warnings: [{ message: \"Invalid namespace URI detected\" }],\n        }),\n        errorValue: () => null,\n      });\n\n      const result = await rdfService.importRDF(\n        contentWithBadNamespace,\n        graph,\n        {\n          format: \"turtle\",\n          mergeMode: \"merge\",\n          strictMode: true,\n          validateInput: true,\n        },\n      );\n\n      // Should succeed with warnings\n      expect(result.isSuccess).toBe(true);\n      const validation = result.getValue();\n      expect(validation.imported.warnings.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle empty graph export\", async () => {\n      const emptyGraph = new Graph();\n\n      const result = await rdfService.exportGraph(emptyGraph, {\n        format: \"turtle\",\n        saveToVault: false,\n      });\n\n      expect(result.isSuccess).toBe(true);\n      const exported = result.getValue();\n      expect(exported.tripleCount).toBe(0);\n    });\n\n    it(\"should handle very large graphs\", async () => {\n      const largeGraph = new Graph();\n\n      // Add many triples to test memory/performance\n      for (let i = 0; i < 1000; i++) {\n        const triple = new Triple(\n          new IRI(`http://example.org/person/${i}`),\n          new IRI(\"http://example.org/name\"),\n          Literal.string(`Person ${i}`),\n        );\n        largeGraph.add(triple);\n      }\n\n      const result = await rdfService.exportGraph(largeGraph, {\n        format: \"n-triples\",\n        saveToVault: false,\n      });\n\n      expect(result.isSuccess).toBe(true);\n      const exported = result.getValue();\n      expect(exported.tripleCount).toBe(1000);\n    });\n  });\n\n  describe(\"namespace management\", () => {\n    it(\"should use custom namespace manager\", () => {\n      // Test with real NamespaceManager\n      const customNamespaceManager = new NamespaceManager();\n      customNamespaceManager.addBinding(\"custom\", \"http://custom.example.org/\");\n\n      const customRDFService = new RDFService(\n        mockNotificationService,\n        mockFileSystemAdapter,\n        customNamespaceManager,\n      );\n      const nsManager = customRDFService.getNamespaceManager();\n\n      expect(nsManager.hasPrefix(\"custom\")).toBe(true);\n    });\n\n    it(\"should preserve namespace bindings during import\", async () => {\n      const turtleContent = `\n                @prefix custom: <http://custom.example.org/> .\n                @prefix test: <http://test.example.org/> .\n                custom:item test:property \"value\" .\n            `;\n\n      // Mock parsing with custom namespaces\n      mockRDFParser.parse.mockReturnValue({\n        isSuccess: true,\n        isFailure: false,\n        getValue: () => ({\n          graph: new Graph(),\n          tripleCount: 1,\n          namespaces: {\n            custom: \"http://custom.example.org/\",\n            test: \"http://test.example.org/\",\n          },\n          warnings: [],\n        }),\n        errorValue: () => null,\n      });\n\n      // Mock namespace manager to show prefixes after binding\n      mockNamespaceManager.hasPrefix.mockImplementation((prefix: string) => {\n        return prefix === \"custom\" || prefix === \"test\";\n      });\n\n      const result = await rdfService.importRDF(turtleContent, graph, {\n        format: \"turtle\",\n        mergeMode: \"merge\",\n      });\n\n      expect(result.isSuccess).toBe(true);\n\n      const nsManager = rdfService.getNamespaceManager();\n      expect(nsManager.hasPrefix(\"custom\")).toBe(true);\n      expect(nsManager.hasPrefix(\"test\")).toBe(true);\n    });\n  });\n\n  describe(\"export with file operations\", () => {\n    beforeEach(() => {\n      (mockFileSystemAdapter.writeFile as jest.Mock).mockResolvedValue(\n        Result.ok(undefined),\n      );\n      (mockFileSystemAdapter.generateFileName as jest.Mock).mockImplementation(\n        (baseName, extension) => {\n          if (baseName) {\n            // If baseName already has extension, don't add another one\n            if (baseName.includes(\".\")) {\n              return baseName;\n            }\n            return `${baseName}.${extension || \"ttl\"}`;\n          }\n          return `export-${Date.now()}.${extension || \"ttl\"}`;\n        },\n      );\n    });\n\n    it(\"should save to vault with custom filename\", async () => {\n      const result = await rdfService.exportGraph(graph, {\n        format: \"turtle\",\n        saveToVault: true,\n        fileName: \"custom-name.ttl\",\n      });\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockFileSystemAdapter.writeFile).toHaveBeenCalledWith(\n        \"custom-name.ttl\",\n        expect.any(String),\n      );\n    });\n\n    it(\"should save to vault in target folder\", async () => {\n      const result = await rdfService.exportGraph(graph, {\n        format: \"turtle\",\n        saveToVault: true,\n        targetFolder: \"exports\",\n        fileName: \"test.ttl\",\n      });\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockFileSystemAdapter.writeFile).toHaveBeenCalledWith(\n        \"exports/test.ttl\",\n        expect.any(String),\n      );\n    });\n\n    it(\"should generate filename when not provided\", async () => {\n      const result = await rdfService.exportGraph(graph, {\n        format: \"turtle\",\n        saveToVault: true,\n      });\n\n      expect(result.isSuccess).toBe(true);\n      expect(mockFileSystemAdapter.writeFile).toHaveBeenCalledWith(\n        expect.stringMatching(/.*\\.ttl$/),\n        expect.any(String),\n      );\n    });\n  });\n});\n\n// Additional component tests removed - we're now testing the integrated RDFService with real implementations\n"],"version":3}