491b85cd7d4001bc66eea08338d7401c
"use strict";

/* istanbul ignore next */
function cov_1mbxxwpxay() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/BuiltInQueryTemplates.ts";
  var hash = "bfeaf16c50ca063d630ed5c8716975064c5a148a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/BuiltInQueryTemplates.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 39
        }
      },
      "2": {
        start: {
          line: 4,
          column: 24
        },
        end: {
          line: 4,
          column: 68
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 72
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 72
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 11,
          column: 9
        }
      },
      "6": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 10,
          column: 59
        }
      },
      "7": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 35
        }
      },
      "8": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "9": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 57,
          column: 9
        }
      },
      "10": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "11": {
        start: {
          line: 96,
          column: 23
        },
        end: {
          line: 138,
          column: 9
        }
      },
      "12": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 175,
          column: 11
        }
      },
      "13": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "14": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 233,
          column: 11
        }
      },
      "15": {
        start: {
          line: 236,
          column: 23
        },
        end: {
          line: 262,
          column: 9
        }
      },
      "16": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 290,
          column: 11
        }
      },
      "17": {
        start: {
          line: 293,
          column: 23
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "18": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 357,
          column: 11
        }
      },
      "19": {
        start: {
          line: 360,
          column: 23
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "20": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 433,
          column: 11
        }
      },
      "21": {
        start: {
          line: 436,
          column: 23
        },
        end: {
          line: 462,
          column: 9
        }
      },
      "22": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 491,
          column: 11
        }
      },
      "23": {
        start: {
          line: 494,
          column: 23
        },
        end: {
          line: 527,
          column: 9
        }
      },
      "24": {
        start: {
          line: 528,
          column: 8
        },
        end: {
          line: 557,
          column: 11
        }
      },
      "25": {
        start: {
          line: 560,
          column: 23
        },
        end: {
          line: 585,
          column: 9
        }
      },
      "26": {
        start: {
          line: 586,
          column: 8
        },
        end: {
          line: 627,
          column: 11
        }
      },
      "27": {
        start: {
          line: 630,
          column: 23
        },
        end: {
          line: 678,
          column: 9
        }
      },
      "28": {
        start: {
          line: 679,
          column: 8
        },
        end: {
          line: 716,
          column: 11
        }
      },
      "29": {
        start: {
          line: 719,
          column: 0
        },
        end: {
          line: 719,
          column: 54
        }
      },
      "30": {
        start: {
          line: 720,
          column: 0
        },
        end: {
          line: 720,
          column: 37
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 36
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 42
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 41
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 95
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 41
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 177
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 235,
            column: 4
          },
          end: {
            line: 235,
            column: 5
          }
        },
        loc: {
          start: {
            line: 235,
            column: 44
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 235
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 46
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 292
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 359,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        loc: {
          start: {
            line: 359,
            column: 41
          },
          end: {
            line: 434,
            column: 5
          }
        },
        line: 359
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 435,
            column: 4
          },
          end: {
            line: 435,
            column: 5
          }
        },
        loc: {
          start: {
            line: 435,
            column: 41
          },
          end: {
            line: 492,
            column: 5
          }
        },
        line: 435
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 493,
            column: 4
          },
          end: {
            line: 493,
            column: 5
          }
        },
        loc: {
          start: {
            line: 493,
            column: 39
          },
          end: {
            line: 558,
            column: 5
          }
        },
        line: 493
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 559,
            column: 4
          },
          end: {
            line: 559,
            column: 5
          }
        },
        loc: {
          start: {
            line: 559,
            column: 44
          },
          end: {
            line: 628,
            column: 5
          }
        },
        line: 559
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 629,
            column: 4
          },
          end: {
            line: 629,
            column: 5
          }
        },
        loc: {
          start: {
            line: 629,
            column: 43
          },
          end: {
            line: 717,
            column: 5
          }
        },
        line: 629
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 11,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 11,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 9
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/BuiltInQueryTemplates.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/BuiltInQueryTemplates.ts"],
      sourcesContent: ["import { QueryTemplate, TemplateCategory, TemplateDifficulty, TemplateLayout } from '../../domain/visual/QueryTemplate';\nimport { NodeType } from '../../domain/visual/VisualQueryNode';\nimport { EdgeType } from '../../domain/visual/VisualQueryEdge';\n\nexport class BuiltInQueryTemplates {\n    private static templates: QueryTemplate[] = [];\n    \n    static getAll(): QueryTemplate[] {\n        if (this.templates.length === 0) {\n            this.templates = this.createBuiltInTemplates();\n        }\n        return [...this.templates];\n    }\n    \n    private static createBuiltInTemplates(): QueryTemplate[] {\n        return [\n            this.createFindAllRelatedTemplate(),\n            this.createPropertyChainTemplate(),\n            this.createTypeHierarchyTemplate(),\n            this.createEntityPropertiesTemplate(),\n            this.createOptionalPropertiesTemplate(),\n            this.createFilterByValueTemplate(),\n            this.createCountEntitiesTemplate(),\n            this.createFindByLabelTemplate(),\n            this.createRelationshipPathTemplate(),\n            this.createValueComparisonTemplate()\n        ];\n    }\n    \n    private static createFindAllRelatedTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'entity1',\n                    type: NodeType.ENTITY,\n                    label: '{{entityName}}',\n                    position: { x: 100, y: 200 },\n                    uri: '{{entityUri}}'\n                },\n                {\n                    id: 'var1',\n                    type: NodeType.VARIABLE,\n                    label: 'related',\n                    position: { x: 400, y: 200 },\n                    variableName: 'related'\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'entity1',\n                    targetNodeId: 'var1',\n                    type: EdgeType.PROPERTY,\n                    label: '?property',\n                    propertyUri: undefined\n                }\n            ],\n            viewport: { x: 0, y: 0, zoom: 1 }\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_find_all_related',\n            metadata: {\n                name: 'Find All Related',\n                description: 'Find all entities related to a specific entity',\n                category: TemplateCategory.EXPLORATION,\n                difficulty: TemplateDifficulty.BEGINNER,\n                tags: ['exploration', 'relationships', 'basic'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'entityName',\n                    type: 'entity',\n                    description: 'Name of the entity to explore',\n                    required: true,\n                    placeholder: 'Entity name'\n                },\n                {\n                    name: 'entityUri',\n                    type: 'entity',\n                    description: 'URI of the entity',\n                    required: false,\n                    placeholder: 'Optional entity URI'\n                }\n            ],\n            sparqlTemplate: `SELECT ?property ?related\nWHERE {\n  <{{entityUri}}> ?property ?related .\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createPropertyChainTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'start',\n                    type: NodeType.VARIABLE,\n                    label: 'start',\n                    position: { x: 100, y: 200 },\n                    variableName: 'start'\n                },\n                {\n                    id: 'middle',\n                    type: NodeType.VARIABLE,\n                    label: 'middle',\n                    position: { x: 300, y: 200 },\n                    variableName: 'middle'\n                },\n                {\n                    id: 'end',\n                    type: NodeType.VARIABLE,\n                    label: 'end',\n                    position: { x: 500, y: 200 },\n                    variableName: 'end'\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'start',\n                    targetNodeId: 'middle',\n                    type: EdgeType.PROPERTY,\n                    label: '{{property1}}',\n                    propertyUri: undefined\n                },\n                {\n                    id: 'edge2',\n                    sourceNodeId: 'middle',\n                    targetNodeId: 'end',\n                    type: EdgeType.PROPERTY,\n                    label: '{{property2}}',\n                    propertyUri: undefined\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_property_chain',\n            metadata: {\n                name: 'Property Chain',\n                description: 'Follow a chain of properties between entities',\n                category: TemplateCategory.RELATIONSHIP,\n                difficulty: TemplateDifficulty.INTERMEDIATE,\n                tags: ['path', 'chain', 'relationship'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'property1',\n                    type: 'property',\n                    description: 'First property in the chain',\n                    required: true,\n                    defaultValue: 'hasParent'\n                },\n                {\n                    name: 'property2',\n                    type: 'property',\n                    description: 'Second property in the chain',\n                    required: true,\n                    defaultValue: 'hasChild'\n                }\n            ],\n            sparqlTemplate: `SELECT ?start ?middle ?end\nWHERE {\n  ?start {{property1}} ?middle .\n  ?middle {{property2}} ?end .\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createTypeHierarchyTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'instance',\n                    type: NodeType.VARIABLE,\n                    label: 'instance',\n                    position: { x: 100, y: 200 },\n                    variableName: 'instance'\n                },\n                {\n                    id: 'type',\n                    type: NodeType.ENTITY,\n                    label: '{{typeClass}}',\n                    position: { x: 400, y: 200 }\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'instance',\n                    targetNodeId: 'type',\n                    type: EdgeType.PROPERTY,\n                    label: 'rdf:type',\n                    propertyUri: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_type_hierarchy',\n            metadata: {\n                name: 'Type Hierarchy',\n                description: 'Find all instances of a specific type or class',\n                category: TemplateCategory.ANALYSIS,\n                difficulty: TemplateDifficulty.BEGINNER,\n                tags: ['type', 'class', 'hierarchy', 'rdf'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'typeClass',\n                    type: 'entity',\n                    description: 'The type/class to search for',\n                    required: true,\n                    defaultValue: 'Person'\n                }\n            ],\n            sparqlTemplate: `SELECT ?instance\nWHERE {\n  ?instance rdf:type {{typeClass}} .\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createEntityPropertiesTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'entity',\n                    type: NodeType.ENTITY,\n                    label: '{{entityName}}',\n                    position: { x: 100, y: 200 }\n                },\n                {\n                    id: 'value',\n                    type: NodeType.VARIABLE,\n                    label: 'value',\n                    position: { x: 400, y: 200 },\n                    variableName: 'value'\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'entity',\n                    targetNodeId: 'value',\n                    type: EdgeType.PROPERTY,\n                    label: '?property',\n                    propertyUri: undefined\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_entity_properties',\n            metadata: {\n                name: 'Entity Properties',\n                description: 'List all properties and values of an entity',\n                category: TemplateCategory.PROPERTY,\n                difficulty: TemplateDifficulty.BEGINNER,\n                tags: ['properties', 'attributes', 'exploration'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'entityName',\n                    type: 'entity',\n                    description: 'Entity to explore',\n                    required: true\n                }\n            ],\n            sparqlTemplate: `SELECT ?property ?value\nWHERE {\n  {{entityName}} ?property ?value .\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createOptionalPropertiesTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'subject',\n                    type: NodeType.VARIABLE,\n                    label: 'subject',\n                    position: { x: 100, y: 200 },\n                    variableName: 'subject'\n                },\n                {\n                    id: 'name',\n                    type: NodeType.VARIABLE,\n                    label: 'name',\n                    position: { x: 400, y: 100 },\n                    variableName: 'name'\n                },\n                {\n                    id: 'description',\n                    type: NodeType.VARIABLE,\n                    label: 'description',\n                    position: { x: 400, y: 300 },\n                    variableName: 'description'\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'subject',\n                    targetNodeId: 'name',\n                    type: EdgeType.PROPERTY,\n                    label: 'rdfs:label',\n                    propertyUri: 'http://www.w3.org/2000/01/rdf-schema#label'\n                },\n                {\n                    id: 'edge2',\n                    sourceNodeId: 'subject',\n                    targetNodeId: 'description',\n                    type: EdgeType.OPTIONAL,\n                    label: 'rdfs:comment',\n                    propertyUri: 'http://www.w3.org/2000/01/rdf-schema#comment'\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_optional_properties',\n            metadata: {\n                name: 'Optional Properties',\n                description: 'Query with optional properties that may or may not exist',\n                category: TemplateCategory.PROPERTY,\n                difficulty: TemplateDifficulty.INTERMEDIATE,\n                tags: ['optional', 'properties', 'flexible'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [],\n            sparqlTemplate: `SELECT ?subject ?name ?description\nWHERE {\n  ?subject rdfs:label ?name .\n  OPTIONAL { ?subject rdfs:comment ?description }\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createFilterByValueTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'entity',\n                    type: NodeType.VARIABLE,\n                    label: 'entity',\n                    position: { x: 100, y: 200 },\n                    variableName: 'entity'\n                },\n                {\n                    id: 'value',\n                    type: NodeType.VARIABLE,\n                    label: 'value',\n                    position: { x: 400, y: 200 },\n                    variableName: 'value'\n                },\n                {\n                    id: 'filter',\n                    type: NodeType.FILTER,\n                    label: '?value > {{threshold}}',\n                    position: { x: 250, y: 350 }\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'entity',\n                    targetNodeId: 'value',\n                    type: EdgeType.PROPERTY,\n                    label: '{{property}}',\n                    propertyUri: undefined\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_filter_by_value',\n            metadata: {\n                name: 'Filter by Value',\n                description: 'Find entities with property values matching a condition',\n                category: TemplateCategory.ANALYSIS,\n                difficulty: TemplateDifficulty.INTERMEDIATE,\n                tags: ['filter', 'condition', 'comparison'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'property',\n                    type: 'property',\n                    description: 'Property to filter on',\n                    required: true,\n                    defaultValue: 'hasAge'\n                },\n                {\n                    name: 'threshold',\n                    type: 'literal',\n                    description: 'Threshold value',\n                    required: true,\n                    defaultValue: '18',\n                    constraints: {\n                        pattern: '^\\\\d+$'\n                    }\n                }\n            ],\n            sparqlTemplate: `SELECT ?entity ?value\nWHERE {\n  ?entity {{property}} ?value .\n  FILTER (?value > {{threshold}})\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createCountEntitiesTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'entity',\n                    type: NodeType.VARIABLE,\n                    label: 'entity',\n                    position: { x: 100, y: 200 },\n                    variableName: 'entity'\n                },\n                {\n                    id: 'type',\n                    type: NodeType.ENTITY,\n                    label: '{{entityType}}',\n                    position: { x: 400, y: 200 }\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'entity',\n                    targetNodeId: 'type',\n                    type: EdgeType.PROPERTY,\n                    label: 'rdf:type',\n                    propertyUri: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_count_entities',\n            metadata: {\n                name: 'Count Entities',\n                description: 'Count the number of entities of a specific type',\n                category: TemplateCategory.ANALYSIS,\n                difficulty: TemplateDifficulty.BEGINNER,\n                tags: ['count', 'aggregate', 'statistics'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'entityType',\n                    type: 'entity',\n                    description: 'Type of entities to count',\n                    required: true,\n                    defaultValue: 'Person'\n                }\n            ],\n            sparqlTemplate: `SELECT (COUNT(?entity) AS ?count)\nWHERE {\n  ?entity rdf:type {{entityType}} .\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createFindByLabelTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'entity',\n                    type: NodeType.VARIABLE,\n                    label: 'entity',\n                    position: { x: 100, y: 200 },\n                    variableName: 'entity'\n                },\n                {\n                    id: 'label',\n                    type: NodeType.VARIABLE,\n                    label: 'label',\n                    position: { x: 400, y: 200 },\n                    variableName: 'label'\n                },\n                {\n                    id: 'filter',\n                    type: NodeType.FILTER,\n                    label: 'regex(?label, \"{{searchTerm}}\", \"i\")',\n                    position: { x: 250, y: 350 }\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'entity',\n                    targetNodeId: 'label',\n                    type: EdgeType.PROPERTY,\n                    label: 'rdfs:label',\n                    propertyUri: 'http://www.w3.org/2000/01/rdf-schema#label'\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_find_by_label',\n            metadata: {\n                name: 'Find by Label',\n                description: 'Search for entities by their label text',\n                category: TemplateCategory.EXPLORATION,\n                difficulty: TemplateDifficulty.INTERMEDIATE,\n                tags: ['search', 'text', 'label', 'regex'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'searchTerm',\n                    type: 'literal',\n                    description: 'Text to search for in labels',\n                    required: true,\n                    placeholder: 'Search term'\n                }\n            ],\n            sparqlTemplate: `SELECT ?entity ?label\nWHERE {\n  ?entity rdfs:label ?label .\n  FILTER (regex(?label, \"{{searchTerm}}\", \"i\"))\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createRelationshipPathTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'source',\n                    type: NodeType.ENTITY,\n                    label: '{{sourceEntity}}',\n                    position: { x: 100, y: 200 }\n                },\n                {\n                    id: 'target',\n                    type: NodeType.ENTITY,\n                    label: '{{targetEntity}}',\n                    position: { x: 500, y: 200 }\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'source',\n                    targetNodeId: 'target',\n                    type: EdgeType.PROPERTY,\n                    label: '{{relationship}}+',\n                    propertyUri: undefined\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_relationship_path',\n            metadata: {\n                name: 'Relationship Path',\n                description: 'Find paths between two specific entities',\n                category: TemplateCategory.RELATIONSHIP,\n                difficulty: TemplateDifficulty.ADVANCED,\n                tags: ['path', 'connection', 'graph', 'traversal'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'sourceEntity',\n                    type: 'entity',\n                    description: 'Starting entity',\n                    required: true\n                },\n                {\n                    name: 'targetEntity',\n                    type: 'entity',\n                    description: 'Target entity',\n                    required: true\n                },\n                {\n                    name: 'relationship',\n                    type: 'property',\n                    description: 'Relationship type to follow',\n                    required: false,\n                    defaultValue: 'knows'\n                }\n            ],\n            sparqlTemplate: `SELECT ?path\nWHERE {\n  {{sourceEntity}} {{relationship}}+ {{targetEntity}} .\n  BIND({{relationship}} AS ?path)\n}`,\n            isBuiltIn: true\n        });\n    }\n    \n    private static createValueComparisonTemplate(): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: [\n                {\n                    id: 'entity',\n                    type: NodeType.VARIABLE,\n                    label: 'entity',\n                    position: { x: 250, y: 100 },\n                    variableName: 'entity'\n                },\n                {\n                    id: 'value1',\n                    type: NodeType.VARIABLE,\n                    label: 'value1',\n                    position: { x: 100, y: 250 },\n                    variableName: 'value1'\n                },\n                {\n                    id: 'value2',\n                    type: NodeType.VARIABLE,\n                    label: 'value2',\n                    position: { x: 400, y: 250 },\n                    variableName: 'value2'\n                },\n                {\n                    id: 'filter',\n                    type: NodeType.FILTER,\n                    label: '?value1 > ?value2',\n                    position: { x: 250, y: 400 }\n                }\n            ],\n            edges: [\n                {\n                    id: 'edge1',\n                    sourceNodeId: 'entity',\n                    targetNodeId: 'value1',\n                    type: EdgeType.PROPERTY,\n                    label: '{{property1}}',\n                    propertyUri: undefined\n                },\n                {\n                    id: 'edge2',\n                    sourceNodeId: 'entity',\n                    targetNodeId: 'value2',\n                    type: EdgeType.PROPERTY,\n                    label: '{{property2}}',\n                    propertyUri: undefined\n                }\n            ]\n        };\n        \n        return new QueryTemplate({\n            id: 'builtin_value_comparison',\n            metadata: {\n                name: 'Value Comparison',\n                description: 'Compare values of different properties on the same entity',\n                category: TemplateCategory.ANALYSIS,\n                difficulty: TemplateDifficulty.ADVANCED,\n                tags: ['comparison', 'analysis', 'filter'],\n                author: 'Exocortex',\n                version: '1.0.0',\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout,\n            parameters: [\n                {\n                    name: 'property1',\n                    type: 'property',\n                    description: 'First property to compare',\n                    required: true,\n                    defaultValue: 'hasIncome'\n                },\n                {\n                    name: 'property2',\n                    type: 'property',\n                    description: 'Second property to compare',\n                    required: true,\n                    defaultValue: 'hasExpenses'\n                }\n            ],\n            sparqlTemplate: `SELECT ?entity ?value1 ?value2\nWHERE {\n  ?entity {{property1}} ?value1 .\n  ?entity {{property2}} ?value2 .\n  FILTER (?value1 > ?value2)\n}`,\n            isBuiltIn: true\n        });\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bfeaf16c50ca063d630ed5c8716975064c5a148a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mbxxwpxay = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mbxxwpxay();
cov_1mbxxwpxay().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mbxxwpxay().s[1]++;
exports.BuiltInQueryTemplates = void 0;
const QueryTemplate_1 =
/* istanbul ignore next */
(cov_1mbxxwpxay().s[2]++, require("../../domain/visual/QueryTemplate"));
const VisualQueryNode_1 =
/* istanbul ignore next */
(cov_1mbxxwpxay().s[3]++, require("../../domain/visual/VisualQueryNode"));
const VisualQueryEdge_1 =
/* istanbul ignore next */
(cov_1mbxxwpxay().s[4]++, require("../../domain/visual/VisualQueryEdge"));
class BuiltInQueryTemplates {
  static getAll() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[0]++;
    cov_1mbxxwpxay().s[5]++;
    if (this.templates.length === 0) {
      /* istanbul ignore next */
      cov_1mbxxwpxay().b[0][0]++;
      cov_1mbxxwpxay().s[6]++;
      this.templates = this.createBuiltInTemplates();
    } else
    /* istanbul ignore next */
    {
      cov_1mbxxwpxay().b[0][1]++;
    }
    cov_1mbxxwpxay().s[7]++;
    return [...this.templates];
  }
  static createBuiltInTemplates() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[1]++;
    cov_1mbxxwpxay().s[8]++;
    return [this.createFindAllRelatedTemplate(), this.createPropertyChainTemplate(), this.createTypeHierarchyTemplate(), this.createEntityPropertiesTemplate(), this.createOptionalPropertiesTemplate(), this.createFilterByValueTemplate(), this.createCountEntitiesTemplate(), this.createFindByLabelTemplate(), this.createRelationshipPathTemplate(), this.createValueComparisonTemplate()];
  }
  static createFindAllRelatedTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[2]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[9]++, {
      nodes: [{
        id: 'entity1',
        type: VisualQueryNode_1.NodeType.ENTITY,
        label: '{{entityName}}',
        position: {
          x: 100,
          y: 200
        },
        uri: '{{entityUri}}'
      }, {
        id: 'var1',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'related',
        position: {
          x: 400,
          y: 200
        },
        variableName: 'related'
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'entity1',
        targetNodeId: 'var1',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '?property',
        propertyUri: undefined
      }],
      viewport: {
        x: 0,
        y: 0,
        zoom: 1
      }
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[10]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_find_all_related',
      metadata: {
        name: 'Find All Related',
        description: 'Find all entities related to a specific entity',
        category: QueryTemplate_1.TemplateCategory.EXPLORATION,
        difficulty: QueryTemplate_1.TemplateDifficulty.BEGINNER,
        tags: ['exploration', 'relationships', 'basic'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'entityName',
        type: 'entity',
        description: 'Name of the entity to explore',
        required: true,
        placeholder: 'Entity name'
      }, {
        name: 'entityUri',
        type: 'entity',
        description: 'URI of the entity',
        required: false,
        placeholder: 'Optional entity URI'
      }],
      sparqlTemplate: `SELECT ?property ?related
WHERE {
  <{{entityUri}}> ?property ?related .
}`,
      isBuiltIn: true
    });
  }
  static createPropertyChainTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[3]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[11]++, {
      nodes: [{
        id: 'start',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'start',
        position: {
          x: 100,
          y: 200
        },
        variableName: 'start'
      }, {
        id: 'middle',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'middle',
        position: {
          x: 300,
          y: 200
        },
        variableName: 'middle'
      }, {
        id: 'end',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'end',
        position: {
          x: 500,
          y: 200
        },
        variableName: 'end'
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'start',
        targetNodeId: 'middle',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '{{property1}}',
        propertyUri: undefined
      }, {
        id: 'edge2',
        sourceNodeId: 'middle',
        targetNodeId: 'end',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '{{property2}}',
        propertyUri: undefined
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[12]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_property_chain',
      metadata: {
        name: 'Property Chain',
        description: 'Follow a chain of properties between entities',
        category: QueryTemplate_1.TemplateCategory.RELATIONSHIP,
        difficulty: QueryTemplate_1.TemplateDifficulty.INTERMEDIATE,
        tags: ['path', 'chain', 'relationship'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'property1',
        type: 'property',
        description: 'First property in the chain',
        required: true,
        defaultValue: 'hasParent'
      }, {
        name: 'property2',
        type: 'property',
        description: 'Second property in the chain',
        required: true,
        defaultValue: 'hasChild'
      }],
      sparqlTemplate: `SELECT ?start ?middle ?end
WHERE {
  ?start {{property1}} ?middle .
  ?middle {{property2}} ?end .
}`,
      isBuiltIn: true
    });
  }
  static createTypeHierarchyTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[4]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[13]++, {
      nodes: [{
        id: 'instance',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'instance',
        position: {
          x: 100,
          y: 200
        },
        variableName: 'instance'
      }, {
        id: 'type',
        type: VisualQueryNode_1.NodeType.ENTITY,
        label: '{{typeClass}}',
        position: {
          x: 400,
          y: 200
        }
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'instance',
        targetNodeId: 'type',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: 'rdf:type',
        propertyUri: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[14]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_type_hierarchy',
      metadata: {
        name: 'Type Hierarchy',
        description: 'Find all instances of a specific type or class',
        category: QueryTemplate_1.TemplateCategory.ANALYSIS,
        difficulty: QueryTemplate_1.TemplateDifficulty.BEGINNER,
        tags: ['type', 'class', 'hierarchy', 'rdf'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'typeClass',
        type: 'entity',
        description: 'The type/class to search for',
        required: true,
        defaultValue: 'Person'
      }],
      sparqlTemplate: `SELECT ?instance
WHERE {
  ?instance rdf:type {{typeClass}} .
}`,
      isBuiltIn: true
    });
  }
  static createEntityPropertiesTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[5]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[15]++, {
      nodes: [{
        id: 'entity',
        type: VisualQueryNode_1.NodeType.ENTITY,
        label: '{{entityName}}',
        position: {
          x: 100,
          y: 200
        }
      }, {
        id: 'value',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'value',
        position: {
          x: 400,
          y: 200
        },
        variableName: 'value'
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'entity',
        targetNodeId: 'value',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '?property',
        propertyUri: undefined
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[16]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_entity_properties',
      metadata: {
        name: 'Entity Properties',
        description: 'List all properties and values of an entity',
        category: QueryTemplate_1.TemplateCategory.PROPERTY,
        difficulty: QueryTemplate_1.TemplateDifficulty.BEGINNER,
        tags: ['properties', 'attributes', 'exploration'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'entityName',
        type: 'entity',
        description: 'Entity to explore',
        required: true
      }],
      sparqlTemplate: `SELECT ?property ?value
WHERE {
  {{entityName}} ?property ?value .
}`,
      isBuiltIn: true
    });
  }
  static createOptionalPropertiesTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[6]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[17]++, {
      nodes: [{
        id: 'subject',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'subject',
        position: {
          x: 100,
          y: 200
        },
        variableName: 'subject'
      }, {
        id: 'name',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'name',
        position: {
          x: 400,
          y: 100
        },
        variableName: 'name'
      }, {
        id: 'description',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'description',
        position: {
          x: 400,
          y: 300
        },
        variableName: 'description'
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'subject',
        targetNodeId: 'name',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: 'rdfs:label',
        propertyUri: 'http://www.w3.org/2000/01/rdf-schema#label'
      }, {
        id: 'edge2',
        sourceNodeId: 'subject',
        targetNodeId: 'description',
        type: VisualQueryEdge_1.EdgeType.OPTIONAL,
        label: 'rdfs:comment',
        propertyUri: 'http://www.w3.org/2000/01/rdf-schema#comment'
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[18]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_optional_properties',
      metadata: {
        name: 'Optional Properties',
        description: 'Query with optional properties that may or may not exist',
        category: QueryTemplate_1.TemplateCategory.PROPERTY,
        difficulty: QueryTemplate_1.TemplateDifficulty.INTERMEDIATE,
        tags: ['optional', 'properties', 'flexible'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [],
      sparqlTemplate: `SELECT ?subject ?name ?description
WHERE {
  ?subject rdfs:label ?name .
  OPTIONAL { ?subject rdfs:comment ?description }
}`,
      isBuiltIn: true
    });
  }
  static createFilterByValueTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[7]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[19]++, {
      nodes: [{
        id: 'entity',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'entity',
        position: {
          x: 100,
          y: 200
        },
        variableName: 'entity'
      }, {
        id: 'value',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'value',
        position: {
          x: 400,
          y: 200
        },
        variableName: 'value'
      }, {
        id: 'filter',
        type: VisualQueryNode_1.NodeType.FILTER,
        label: '?value > {{threshold}}',
        position: {
          x: 250,
          y: 350
        }
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'entity',
        targetNodeId: 'value',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '{{property}}',
        propertyUri: undefined
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[20]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_filter_by_value',
      metadata: {
        name: 'Filter by Value',
        description: 'Find entities with property values matching a condition',
        category: QueryTemplate_1.TemplateCategory.ANALYSIS,
        difficulty: QueryTemplate_1.TemplateDifficulty.INTERMEDIATE,
        tags: ['filter', 'condition', 'comparison'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'property',
        type: 'property',
        description: 'Property to filter on',
        required: true,
        defaultValue: 'hasAge'
      }, {
        name: 'threshold',
        type: 'literal',
        description: 'Threshold value',
        required: true,
        defaultValue: '18',
        constraints: {
          pattern: '^\\d+$'
        }
      }],
      sparqlTemplate: `SELECT ?entity ?value
WHERE {
  ?entity {{property}} ?value .
  FILTER (?value > {{threshold}})
}`,
      isBuiltIn: true
    });
  }
  static createCountEntitiesTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[8]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[21]++, {
      nodes: [{
        id: 'entity',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'entity',
        position: {
          x: 100,
          y: 200
        },
        variableName: 'entity'
      }, {
        id: 'type',
        type: VisualQueryNode_1.NodeType.ENTITY,
        label: '{{entityType}}',
        position: {
          x: 400,
          y: 200
        }
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'entity',
        targetNodeId: 'type',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: 'rdf:type',
        propertyUri: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[22]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_count_entities',
      metadata: {
        name: 'Count Entities',
        description: 'Count the number of entities of a specific type',
        category: QueryTemplate_1.TemplateCategory.ANALYSIS,
        difficulty: QueryTemplate_1.TemplateDifficulty.BEGINNER,
        tags: ['count', 'aggregate', 'statistics'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'entityType',
        type: 'entity',
        description: 'Type of entities to count',
        required: true,
        defaultValue: 'Person'
      }],
      sparqlTemplate: `SELECT (COUNT(?entity) AS ?count)
WHERE {
  ?entity rdf:type {{entityType}} .
}`,
      isBuiltIn: true
    });
  }
  static createFindByLabelTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[9]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[23]++, {
      nodes: [{
        id: 'entity',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'entity',
        position: {
          x: 100,
          y: 200
        },
        variableName: 'entity'
      }, {
        id: 'label',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'label',
        position: {
          x: 400,
          y: 200
        },
        variableName: 'label'
      }, {
        id: 'filter',
        type: VisualQueryNode_1.NodeType.FILTER,
        label: 'regex(?label, "{{searchTerm}}", "i")',
        position: {
          x: 250,
          y: 350
        }
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'entity',
        targetNodeId: 'label',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: 'rdfs:label',
        propertyUri: 'http://www.w3.org/2000/01/rdf-schema#label'
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[24]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_find_by_label',
      metadata: {
        name: 'Find by Label',
        description: 'Search for entities by their label text',
        category: QueryTemplate_1.TemplateCategory.EXPLORATION,
        difficulty: QueryTemplate_1.TemplateDifficulty.INTERMEDIATE,
        tags: ['search', 'text', 'label', 'regex'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'searchTerm',
        type: 'literal',
        description: 'Text to search for in labels',
        required: true,
        placeholder: 'Search term'
      }],
      sparqlTemplate: `SELECT ?entity ?label
WHERE {
  ?entity rdfs:label ?label .
  FILTER (regex(?label, "{{searchTerm}}", "i"))
}`,
      isBuiltIn: true
    });
  }
  static createRelationshipPathTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[10]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[25]++, {
      nodes: [{
        id: 'source',
        type: VisualQueryNode_1.NodeType.ENTITY,
        label: '{{sourceEntity}}',
        position: {
          x: 100,
          y: 200
        }
      }, {
        id: 'target',
        type: VisualQueryNode_1.NodeType.ENTITY,
        label: '{{targetEntity}}',
        position: {
          x: 500,
          y: 200
        }
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'source',
        targetNodeId: 'target',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '{{relationship}}+',
        propertyUri: undefined
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[26]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_relationship_path',
      metadata: {
        name: 'Relationship Path',
        description: 'Find paths between two specific entities',
        category: QueryTemplate_1.TemplateCategory.RELATIONSHIP,
        difficulty: QueryTemplate_1.TemplateDifficulty.ADVANCED,
        tags: ['path', 'connection', 'graph', 'traversal'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'sourceEntity',
        type: 'entity',
        description: 'Starting entity',
        required: true
      }, {
        name: 'targetEntity',
        type: 'entity',
        description: 'Target entity',
        required: true
      }, {
        name: 'relationship',
        type: 'property',
        description: 'Relationship type to follow',
        required: false,
        defaultValue: 'knows'
      }],
      sparqlTemplate: `SELECT ?path
WHERE {
  {{sourceEntity}} {{relationship}}+ {{targetEntity}} .
  BIND({{relationship}} AS ?path)
}`,
      isBuiltIn: true
    });
  }
  static createValueComparisonTemplate() {
    /* istanbul ignore next */
    cov_1mbxxwpxay().f[11]++;
    const layout =
    /* istanbul ignore next */
    (cov_1mbxxwpxay().s[27]++, {
      nodes: [{
        id: 'entity',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'entity',
        position: {
          x: 250,
          y: 100
        },
        variableName: 'entity'
      }, {
        id: 'value1',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'value1',
        position: {
          x: 100,
          y: 250
        },
        variableName: 'value1'
      }, {
        id: 'value2',
        type: VisualQueryNode_1.NodeType.VARIABLE,
        label: 'value2',
        position: {
          x: 400,
          y: 250
        },
        variableName: 'value2'
      }, {
        id: 'filter',
        type: VisualQueryNode_1.NodeType.FILTER,
        label: '?value1 > ?value2',
        position: {
          x: 250,
          y: 400
        }
      }],
      edges: [{
        id: 'edge1',
        sourceNodeId: 'entity',
        targetNodeId: 'value1',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '{{property1}}',
        propertyUri: undefined
      }, {
        id: 'edge2',
        sourceNodeId: 'entity',
        targetNodeId: 'value2',
        type: VisualQueryEdge_1.EdgeType.PROPERTY,
        label: '{{property2}}',
        propertyUri: undefined
      }]
    });
    /* istanbul ignore next */
    cov_1mbxxwpxay().s[28]++;
    return new QueryTemplate_1.QueryTemplate({
      id: 'builtin_value_comparison',
      metadata: {
        name: 'Value Comparison',
        description: 'Compare values of different properties on the same entity',
        category: QueryTemplate_1.TemplateCategory.ANALYSIS,
        difficulty: QueryTemplate_1.TemplateDifficulty.ADVANCED,
        tags: ['comparison', 'analysis', 'filter'],
        author: 'Exocortex',
        version: '1.0.0',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      layout,
      parameters: [{
        name: 'property1',
        type: 'property',
        description: 'First property to compare',
        required: true,
        defaultValue: 'hasIncome'
      }, {
        name: 'property2',
        type: 'property',
        description: 'Second property to compare',
        required: true,
        defaultValue: 'hasExpenses'
      }],
      sparqlTemplate: `SELECT ?entity ?value1 ?value2
WHERE {
  ?entity {{property1}} ?value1 .
  ?entity {{property2}} ?value2 .
  FILTER (?value1 > ?value2)
}`,
      isBuiltIn: true
    });
  }
}
/* istanbul ignore next */
cov_1mbxxwpxay().s[29]++;
exports.BuiltInQueryTemplates = BuiltInQueryTemplates;
/* istanbul ignore next */
cov_1mbxxwpxay().s[30]++;
BuiltInQueryTemplates.templates = [];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,