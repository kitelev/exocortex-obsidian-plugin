92fe9ba9dd3496fd50b5485488d93e40
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDFValidator = void 0;
const Result_1 = require("../../domain/core/Result");
const Triple_1 = require("../../domain/semantic/core/Triple");
class RDFValidator {
    constructor() { }
    validateGraph(graph, options = {}) {
        const errors = [];
        const warnings = [];
        const stats = {
            tripleCount: 0,
            duplicateCount: 0,
            invalidIRICount: 0,
            invalidLiteralCount: 0
        };
        try {
            const triples = graph.toArray();
            stats.tripleCount = triples.length;
            const seenTriples = new Set();
            for (const triple of triples) {
                const validationErrors = this.validateTriple(triple, options);
                errors.push(...validationErrors.filter(e => e.type === 'error'));
                warnings.push(...validationErrors.filter(e => e.type === 'warning'));
                if (validationErrors.some(e => e.message.includes('Invalid IRI'))) {
                    stats.invalidIRICount++;
                }
                if (validationErrors.some(e => e.message.includes('Invalid literal'))) {
                    stats.invalidLiteralCount++;
                }
                if (options.checkDuplicates) {
                    const tripleKey = this.getTripleKey(triple);
                    if (seenTriples.has(tripleKey)) {
                        stats.duplicateCount++;
                        warnings.push({
                            type: 'warning',
                            message: 'Duplicate triple detected',
                            triple
                        });
                    }
                    else {
                        seenTriples.add(tripleKey);
                    }
                }
            }
            const result = {
                isValid: errors.length === 0,
                errors,
                warnings,
                stats
            };
            return Result_1.Result.ok(result);
        }
        catch (error) {
            return Result_1.Result.fail(`Validation failed: ${error.message}`);
        }
    }
    validateTriple(triple, options = {}) {
        const errors = [];
        const subject = triple.getSubject();
        const predicate = triple.getPredicate();
        const object = triple.getObject();
        if (!subject || !predicate || !object) {
            errors.push({
                type: 'error',
                message: 'Triple is missing required components',
                triple
            });
            return errors;
        }
        if (subject instanceof Triple_1.IRI) {
            const iriErrors = this.validateIRI(subject.toString());
            if (iriErrors.length > 0) {
                errors.push({
                    type: options.strictMode ? 'error' : 'warning',
                    message: `Invalid IRI in subject: ${iriErrors.join(', ')}`,
                    triple
                });
            }
        }
        if (predicate instanceof Triple_1.IRI) {
            const iriErrors = this.validateIRI(predicate.toString());
            if (iriErrors.length > 0) {
                errors.push({
                    type: 'error',
                    message: `Invalid IRI in predicate: ${iriErrors.join(', ')}`,
                    triple
                });
            }
        }
        if (object instanceof Triple_1.IRI) {
            const iriErrors = this.validateIRI(object.toString());
            if (iriErrors.length > 0) {
                errors.push({
                    type: options.strictMode ? 'error' : 'warning',
                    message: `Invalid IRI in object: ${iriErrors.join(', ')}`,
                    triple
                });
            }
        }
        if (options.checkLiterals && object instanceof Triple_1.Literal) {
            const literalErrors = this.validateLiteral(object);
            errors.push(...literalErrors);
        }
        return errors;
    }
    validateIRI(iri) {
        const errors = [];
        if (!iri || iri.trim() === '') {
            errors.push('IRI cannot be empty');
            return errors;
        }
        if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(iri)) {
            errors.push('IRI must start with a valid scheme');
        }
        const invalidChars = /[\s<>"{}|\\^`]/;
        if (invalidChars.test(iri)) {
            errors.push('IRI contains invalid characters');
        }
        if (iri.length > 2048) {
            errors.push('IRI exceeds maximum length');
        }
        return errors;
    }
    validateLiteral(literal) {
        const errors = [];
        const datatype = literal.getDatatype();
        const language = literal.getLanguage();
        const value = literal.getValue();
        if (datatype) {
            const datatypeErrors = this.validateIRI(datatype.toString());
            if (datatypeErrors.length > 0) {
                errors.push({
                    type: 'warning',
                    message: `Invalid datatype IRI: ${datatypeErrors.join(', ')}`
                });
            }
            const isValid = this.validateLiteralValue(value, datatype.toString());
            if (!isValid) {
                errors.push({
                    type: 'warning',
                    message: `Literal value does not match declared datatype ${datatype.toString()}`
                });
            }
        }
        if (language) {
            if (!/^[a-z]{2,3}(-[A-Z]{2})?$/.test(language)) {
                errors.push({
                    type: 'warning',
                    message: `Invalid language tag: ${language}`
                });
            }
        }
        return errors;
    }
    validateLiteralValue(value, datatypeIRI) {
        const xsdNamespace = 'http://www.w3.org/2001/XMLSchema#';
        if (datatypeIRI === `${xsdNamespace}integer`) {
            return /^-?\d+$/.test(value);
        }
        if (datatypeIRI === `${xsdNamespace}decimal`) {
            return /^-?\d+(\.\d+)?$/.test(value);
        }
        if (datatypeIRI === `${xsdNamespace}boolean`) {
            return value === 'true' || value === 'false';
        }
        if (datatypeIRI === `${xsdNamespace}dateTime`) {
            return /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/.test(value);
        }
        if (datatypeIRI === `${xsdNamespace}date`) {
            return /^\d{4}-\d{2}-\d{2}$/.test(value);
        }
        return true;
    }
    validateExportOptions(options) {
        if (!options.format) {
            return Result_1.Result.fail('Export format is required');
        }
        const validFormats = ['turtle', 'n-triples', 'json-ld', 'rdf-xml'];
        if (!validFormats.includes(options.format)) {
            return Result_1.Result.fail(`Unsupported export format: ${options.format}`);
        }
        if (options.targetFolder && typeof options.targetFolder !== 'string') {
            return Result_1.Result.fail('Target folder must be a string');
        }
        if (options.fileName && typeof options.fileName !== 'string') {
            return Result_1.Result.fail('File name must be a string');
        }
        return Result_1.Result.ok();
    }
    validateImportOptions(options) {
        if (!options.mergeMode) {
            return Result_1.Result.fail('Merge mode is required');
        }
        if (options.mergeMode !== 'merge' && options.mergeMode !== 'replace') {
            return Result_1.Result.fail(`Invalid merge mode: ${options.mergeMode}`);
        }
        if (options.format) {
            const validFormats = ['turtle', 'n-triples', 'json-ld', 'rdf-xml'];
            if (!validFormats.includes(options.format)) {
                return Result_1.Result.fail(`Unsupported import format: ${options.format}`);
            }
        }
        return Result_1.Result.ok();
    }
    getTripleKey(triple) {
        const subject = triple.getSubject();
        const predicate = triple.getPredicate();
        const object = triple.getObject();
        const subjectStr = subject instanceof Triple_1.IRI ? subject.toString() :
            subject instanceof Triple_1.BlankNode ? `_:${subject.toString()}` : '';
        const predicateStr = predicate.toString();
        const objectStr = object instanceof Triple_1.IRI ? object.toString() :
            object instanceof Triple_1.BlankNode ? `_:${object.toString()}` :
                object instanceof Triple_1.Literal ? `"${object.toString()}"` : '';
        return `${subjectStr}|${predicateStr}|${objectStr}`;
    }
}
exports.RDFValidator = RDFValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,