654cad80128f1217ca1ebfce144c7f3c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformDetector = void 0;
/**
 * Platform Detector
 * Detects device capabilities and platform-specific features
 */
class PlatformDetector {
    /**
     * Get platform information with caching
     */
    static getPlatformInfo() {
        if (!this.cachedInfo) {
            this.cachedInfo = this.detectPlatform();
        }
        return this.cachedInfo;
    }
    /**
     * Check if running on mobile device
     */
    static isMobile() {
        return this.getPlatformInfo().isMobile;
    }
    /**
     * Check if running on iOS
     */
    static isIOS() {
        return this.getPlatformInfo().isIOS;
    }
    /**
     * Check if running on Android
     */
    static isAndroid() {
        return this.getPlatformInfo().isAndroid;
    }
    /**
     * Check if touch is available
     */
    static hasTouch() {
        return this.getPlatformInfo().hasTouch;
    }
    /**
     * Check if running in Obsidian mobile app
     */
    static isObsidianMobile() {
        return this.getPlatformInfo().isObsidianMobile;
    }
    /**
     * Check if running on tablet device
     */
    static isTablet() {
        return this.getPlatformInfo().isTablet;
    }
    /**
     * Check if device has limited memory
     */
    static hasLimitedMemory() {
        const info = this.getPlatformInfo();
        return info.isMobile || (info.memory !== undefined && info.memory < 4096); // < 4GB
    }
    /**
     * Check if should use mobile optimizations
     */
    static shouldUseMobileOptimizations() {
        const info = this.getPlatformInfo();
        return info.isMobile || info.isTablet || this.hasLimitedMemory();
    }
    /**
     * Get recommended batch size based on device capabilities
     */
    static getRecommendedBatchSize() {
        const info = this.getPlatformInfo();
        if (info.isMobile) {
            return 25; // Small batches for mobile
        }
        if (info.isTablet) {
            return 50; // Medium batches for tablets
        }
        if (info.memory && info.memory < 8192) {
            // < 8GB
            return 75;
        }
        return 100; // Large batches for powerful devices
    }
    /**
     * Get recommended cache size based on memory constraints
     */
    static getRecommendedCacheSize() {
        const info = this.getPlatformInfo();
        if (info.isMobile) {
            return 100; // Small cache for mobile
        }
        if (info.isTablet) {
            return 250; // Medium cache for tablets
        }
        if (info.memory && info.memory < 8192) {
            return 500;
        }
        return 1000; // Large cache for powerful devices
    }
    /**
     * Check if virtual scrolling should be enabled
     */
    static shouldUseVirtualScrolling(itemCount) {
        const info = this.getPlatformInfo();
        if (info.isMobile && itemCount > 50) {
            return true;
        }
        if (info.isTablet && itemCount > 100) {
            return true;
        }
        return itemCount > 200;
    }
    /**
     * Force refresh of platform detection
     */
    static refresh() {
        this.cachedInfo = undefined;
    }
    static detectPlatform() {
        const userAgent = navigator.userAgent.toLowerCase();
        const platform = navigator.platform?.toLowerCase() || "";
        // Detect operating system
        let os = "unknown";
        if (/iphone|ipad|ipod/.test(userAgent)) {
            os = "ios";
        }
        else if (/android/.test(userAgent)) {
            os = "android";
        }
        else if (/mac/.test(platform)) {
            os = "macos";
        }
        else if (/win/.test(platform)) {
            os = "windows";
        }
        else if (/linux/.test(platform)) {
            os = "linux";
        }
        // Detect mobile devices
        const isMobileUA = /mobile|android|iphone|ipad|phone|blackberry|opera mini|iemobile|wpdesktop/.test(userAgent);
        const isTabletUA = /tablet|ipad|playbook|silk/.test(userAgent);
        const isTouchDevice = "ontouchstart" in window ||
            navigator.maxTouchPoints > 0 ||
            navigator.msMaxTouchPoints > 0;
        // More sophisticated mobile detection
        const isSmallScreen = window.innerWidth <= 768 || window.innerHeight <= 768;
        const isIOS = /iphone|ipad|ipod/.test(userAgent);
        const isAndroid = /android/.test(userAgent);
        // Detect if running in mobile app (heuristics)
        const isObsidianMobile = this.detectObsidianMobile();
        const isMobile = isMobileUA || (isSmallScreen && isTouchDevice) || isObsidianMobile;
        const isTablet = isTabletUA && !isMobile;
        const isDesktop = !isMobile && !isTablet;
        // Get memory information if available
        let memory;
        const deviceMemory = navigator.deviceMemory; // in GB
        const performanceMemory = performance.memory?.jsHeapSizeLimit; // in bytes
        if (deviceMemory) {
            // deviceMemory is in GB, convert to MB for consistent comparison
            memory = deviceMemory * 1024;
        }
        else if (performanceMemory) {
            // performanceMemory is in bytes, convert to MB
            memory = performanceMemory / 1024 / 1024;
        }
        // Get connection information if available
        let connection;
        const connectionInfo = navigator.connection ||
            navigator.mozConnection ||
            navigator.webkitConnection;
        if (connectionInfo) {
            connection = connectionInfo.effectiveType || connectionInfo.type;
        }
        return {
            isMobile,
            isIOS,
            isAndroid,
            isTablet,
            isDesktop,
            hasTouch: isTouchDevice,
            screenWidth: window.innerWidth,
            screenHeight: window.innerHeight,
            devicePixelRatio: window.devicePixelRatio || 1,
            memory,
            connection,
            isObsidianMobile,
            os,
        };
    }
    static detectObsidianMobile() {
        // Check for Obsidian mobile app indicators
        // Check for Capacitor (which Obsidian mobile uses)
        if (window.Capacitor) {
            return true;
        }
        // Check for mobile-specific Obsidian APIs
        if (window.ObsidianMobile) {
            return true;
        }
        // Check user agent for Obsidian mobile
        const userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.includes("obsidian") &&
            (userAgent.includes("mobile") ||
                userAgent.includes("ios") ||
                userAgent.includes("android"))) {
            return true;
        }
        // Check for file system access patterns typical of mobile apps
        const hasFileSystemAccess = "showOpenFilePicker" in window || "webkitRequestFileSystem" in window;
        const isMobileEnvironment = /mobile|android|iphone|ipad/.test(userAgent);
        if (!hasFileSystemAccess && isMobileEnvironment) {
            return true;
        }
        // Check for specific mobile app characteristics
        const isStandalone = window.matchMedia?.("(display-mode: standalone)")?.matches || false;
        const isFullscreen = window.matchMedia?.("(display-mode: fullscreen)")?.matches || false;
        if ((isStandalone || isFullscreen) && isMobileEnvironment) {
            return true;
        }
        return false;
    }
    /**
     * Get CSS media query for mobile detection
     */
    static getMobileMediaQuery() {
        return "(max-width: 768px), (pointer: coarse)";
    }
    /**
     * Get CSS media query for touch detection
     */
    static getTouchMediaQuery() {
        return "(pointer: coarse)";
    }
    /**
     * Check if reduced motion is preferred
     */
    static prefersReducedMotion() {
        return (window.matchMedia?.("(prefers-reduced-motion: reduce)")?.matches || false);
    }
    /**
     * Check if dark mode is preferred
     */
    static prefersDarkMode() {
        return (window.matchMedia?.("(prefers-color-scheme: dark)")?.matches || false);
    }
    /**
     * Get safe area insets (for devices with notches)
     */
    static getSafeAreaInsets() {
        const style = getComputedStyle(document.documentElement);
        return {
            top: parseInt(style.getPropertyValue("env(safe-area-inset-top)") || "0", 10),
            right: parseInt(style.getPropertyValue("env(safe-area-inset-right)") || "0", 10),
            bottom: parseInt(style.getPropertyValue("env(safe-area-inset-bottom)") || "0", 10),
            left: parseInt(style.getPropertyValue("env(safe-area-inset-left)") || "0", 10),
        };
    }
    /**
     * Create a media query listener for platform changes
     */
    static createPlatformListener(callback) {
        if (!window.matchMedia) {
            // Return no-op cleanup function if matchMedia is not available
            return () => { };
        }
        const mediaQueries = [
            window.matchMedia("(max-width: 768px)"),
            window.matchMedia("(orientation: portrait)"),
            window.matchMedia("(pointer: coarse)"),
        ];
        const handleChange = () => {
            this.refresh();
            callback(this.getPlatformInfo());
        };
        mediaQueries.forEach((mq) => mq?.addEventListener?.("change", handleChange));
        // Return cleanup function
        return () => {
            mediaQueries.forEach((mq) => mq?.removeEventListener?.("change", handleChange));
        };
    }
}
exports.PlatformDetector = PlatformDetector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,