{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/CreateChildAreaUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/CreateChildAreaUseCase.ts"],"sourcesContent":["import { Asset } from \"../../domain/entities/Asset\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { IAssetRepository } from \"../../domain/repositories/IAssetRepository\";\nimport { CreateAssetUseCase } from \"./CreateAssetUseCase\";\nimport { Result } from \"../../domain/core/Result\";\n\nexport class CreateChildAreaUseCase {\n  constructor(\n    private readonly assetRepository: IAssetRepository,\n    private readonly createAssetUseCase: CreateAssetUseCase,\n  ) {}\n\n  async execute(\n    request: CreateChildAreaRequest,\n  ): Promise<CreateChildAreaResponse> {\n    try {\n      const parentIdResult = AssetId.create(request.parentAreaId);\n      if (parentIdResult.isFailure) {\n        return {\n          success: false,\n          message: `Invalid parent area ID: ${parentIdResult.error}`,\n        };\n      }\n\n      const parentAsset = await this.assetRepository.findById(\n        parentIdResult.getValue(),\n      );\n      if (!parentAsset) {\n        return {\n          success: false,\n          message: \"Parent area not found\",\n        };\n      }\n\n      const parentClassName = parentAsset.getClassName();\n      if (\n        !parentClassName.equals(ClassName.create(\"ems__Area\").getValue())\n      ) {\n        return {\n          success: false,\n          message: \"Parent asset is not an area\",\n        };\n      }\n\n      const areaId = AssetId.generate();\n      const areaProperties = this.generateAreaProperties(\n        parentAsset,\n        areaId,\n        request.areaTitle,\n      );\n\n      const createResult = await this.createAssetUseCase.execute({\n        title: request.areaTitle || `Area - ${areaId.toString().substring(0, 8)}`,\n        className: \"ems__Area\",\n        ontologyPrefix: parentAsset.getOntologyPrefix().toString(),\n        properties: areaProperties,\n      });\n\n      if (!createResult.success) {\n        return {\n          success: false,\n          message: createResult.message,\n        };\n      }\n\n      return {\n        success: true,\n        areaId: createResult.assetId,\n        areaFilePath: `${createResult.assetId}.md`,\n        message: `Child area created successfully under \"${parentAsset.getTitle()}\"`,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to create child area: ${error.message}`,\n      };\n    }\n  }\n\n  private generateAreaProperties(\n    parentArea: Asset,\n    areaId: AssetId,\n    areaTitle?: string,\n  ): Record<string, any> {\n    const now = new Date().toISOString().replace(/\\.\\d{3}Z$/, \"\");\n    const title = areaTitle || `Area - ${areaId.toString().substring(0, 8)}`;\n    \n    return {\n      exo__Asset_uid: areaId.toString(),\n      exo__Asset_label: title,\n      exo__Asset_isDefinedBy: `[[!${parentArea.getOntologyPrefix().toString()}]]`,\n      exo__Asset_createdAt: now,\n      exo__Instance_class: [\"[[ems__Area]]\"],\n      ems__Area_parent: `[[${parentArea.getTitle()}]]`,\n      ems__Area_status: \"Active\",\n    };\n  }\n}\n\nexport interface CreateChildAreaRequest {\n  parentAreaId: string;\n  areaTitle?: string;\n  context?: {\n    activeFile?: string;\n    selection?: string;\n  };\n}\n\nexport interface CreateChildAreaResponse {\n  success: boolean;\n  areaId?: string;\n  areaFilePath?: string;\n  message: string;\n}"],"version":3}