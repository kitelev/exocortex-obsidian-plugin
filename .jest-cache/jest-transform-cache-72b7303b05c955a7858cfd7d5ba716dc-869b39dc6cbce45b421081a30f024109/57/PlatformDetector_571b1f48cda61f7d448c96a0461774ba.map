{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/utils/PlatformDetector.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/utils/PlatformDetector.ts"],"sourcesContent":["/**\n * Platform Information\n */\nexport interface PlatformInfo {\n  /** Is running on mobile device */\n  isMobile: boolean;\n  /** Is running on iOS */\n  isIOS: boolean;\n  /** Is running on Android */\n  isAndroid: boolean;\n  /** Is running on tablet */\n  isTablet: boolean;\n  /** Is running on desktop */\n  isDesktop: boolean;\n  /** Is touch-enabled device */\n  hasTouch: boolean;\n  /** Screen width in pixels */\n  screenWidth: number;\n  /** Screen height in pixels */\n  screenHeight: number;\n  /** Device pixel ratio */\n  devicePixelRatio: number;\n  /** Available memory (if supported) */\n  memory?: number;\n  /** Connection type (if supported) */\n  connection?: string;\n  /** Is running in Obsidian mobile app */\n  isObsidianMobile: boolean;\n  /** Operating system */\n  os: \"ios\" | \"android\" | \"macos\" | \"windows\" | \"linux\" | \"unknown\";\n}\n\n/**\n * Platform Detector\n * Detects device capabilities and platform-specific features\n */\nexport class PlatformDetector {\n  private static cachedInfo?: PlatformInfo;\n\n  /**\n   * Get platform information with caching\n   */\n  public static getPlatformInfo(): PlatformInfo {\n    if (!this.cachedInfo) {\n      this.cachedInfo = this.detectPlatform();\n    }\n    return this.cachedInfo;\n  }\n\n  /**\n   * Check if running on mobile device\n   */\n  public static isMobile(): boolean {\n    return this.getPlatformInfo().isMobile;\n  }\n\n  /**\n   * Check if running on iOS\n   */\n  public static isIOS(): boolean {\n    return this.getPlatformInfo().isIOS;\n  }\n\n  /**\n   * Check if running on Android\n   */\n  public static isAndroid(): boolean {\n    return this.getPlatformInfo().isAndroid;\n  }\n\n  /**\n   * Check if touch is available\n   */\n  public static hasTouch(): boolean {\n    return this.getPlatformInfo().hasTouch;\n  }\n\n  /**\n   * Check if running in Obsidian mobile app\n   */\n  public static isObsidianMobile(): boolean {\n    return this.getPlatformInfo().isObsidianMobile;\n  }\n\n  /**\n   * Check if running on tablet device\n   */\n  public static isTablet(): boolean {\n    return this.getPlatformInfo().isTablet;\n  }\n\n  /**\n   * Check if device has limited memory\n   */\n  public static hasLimitedMemory(): boolean {\n    const info = this.getPlatformInfo();\n    return info.isMobile || (info.memory !== undefined && info.memory < 4096); // < 4GB\n  }\n\n  /**\n   * Check if should use mobile optimizations\n   */\n  public static shouldUseMobileOptimizations(): boolean {\n    const info = this.getPlatformInfo();\n    return info.isMobile || info.isTablet || this.hasLimitedMemory();\n  }\n\n  /**\n   * Get recommended batch size based on device capabilities\n   */\n  public static getRecommendedBatchSize(): number {\n    const info = this.getPlatformInfo();\n\n    if (info.isMobile) {\n      return 25; // Small batches for mobile\n    }\n\n    if (info.isTablet) {\n      return 50; // Medium batches for tablets\n    }\n\n    if (info.memory && info.memory < 8192) {\n      // < 8GB\n      return 75;\n    }\n\n    return 100; // Large batches for powerful devices\n  }\n\n  /**\n   * Get recommended cache size based on memory constraints\n   */\n  public static getRecommendedCacheSize(): number {\n    const info = this.getPlatformInfo();\n\n    if (info.isMobile) {\n      return 100; // Small cache for mobile\n    }\n\n    if (info.isTablet) {\n      return 250; // Medium cache for tablets\n    }\n\n    if (info.memory && info.memory < 8192) {\n      return 500;\n    }\n\n    return 1000; // Large cache for powerful devices\n  }\n\n  /**\n   * Check if virtual scrolling should be enabled\n   */\n  public static shouldUseVirtualScrolling(itemCount: number): boolean {\n    const info = this.getPlatformInfo();\n\n    if (info.isMobile && itemCount > 50) {\n      return true;\n    }\n\n    if (info.isTablet && itemCount > 100) {\n      return true;\n    }\n\n    return itemCount > 200;\n  }\n\n  /**\n   * Force refresh of platform detection\n   */\n  public static refresh(): void {\n    this.cachedInfo = undefined;\n  }\n\n  private static detectPlatform(): PlatformInfo {\n    const userAgent = navigator.userAgent.toLowerCase();\n    const platform = navigator.platform?.toLowerCase() || \"\";\n\n    // Detect operating system\n    let os: PlatformInfo[\"os\"] = \"unknown\";\n    if (/iphone|ipad|ipod/.test(userAgent)) {\n      os = \"ios\";\n    } else if (/android/.test(userAgent)) {\n      os = \"android\";\n    } else if (/mac/.test(platform)) {\n      os = \"macos\";\n    } else if (/win/.test(platform)) {\n      os = \"windows\";\n    } else if (/linux/.test(platform)) {\n      os = \"linux\";\n    }\n\n    // Detect mobile devices\n    const isMobileUA =\n      /mobile|android|iphone|ipad|phone|blackberry|opera mini|iemobile|wpdesktop/.test(\n        userAgent,\n      );\n    const isTabletUA = /tablet|ipad|playbook|silk/.test(userAgent);\n    const isTouchDevice =\n      \"ontouchstart\" in window ||\n      navigator.maxTouchPoints > 0 ||\n      (navigator as any).msMaxTouchPoints > 0;\n\n    // More sophisticated mobile detection\n    const isSmallScreen = window.innerWidth <= 768 || window.innerHeight <= 768;\n    const isIOS = /iphone|ipad|ipod/.test(userAgent);\n    const isAndroid = /android/.test(userAgent);\n\n    // Detect if running in mobile app (heuristics)\n    const isObsidianMobile = this.detectObsidianMobile();\n\n    const isMobile =\n      isMobileUA || (isSmallScreen && isTouchDevice) || isObsidianMobile;\n    const isTablet = isTabletUA && !isMobile;\n    const isDesktop = !isMobile && !isTablet;\n\n    // Get memory information if available\n    let memory: number | undefined;\n    const deviceMemory = (navigator as any).deviceMemory; // in GB\n    const performanceMemory = (performance as any).memory?.jsHeapSizeLimit; // in bytes\n\n    if (deviceMemory) {\n      // deviceMemory is in GB, convert to MB for consistent comparison\n      memory = deviceMemory * 1024;\n    } else if (performanceMemory) {\n      // performanceMemory is in bytes, convert to MB\n      memory = performanceMemory / 1024 / 1024;\n    }\n\n    // Get connection information if available\n    let connection: string | undefined;\n    const connectionInfo =\n      (navigator as any).connection ||\n      (navigator as any).mozConnection ||\n      (navigator as any).webkitConnection;\n    if (connectionInfo) {\n      connection = connectionInfo.effectiveType || connectionInfo.type;\n    }\n\n    return {\n      isMobile,\n      isIOS,\n      isAndroid,\n      isTablet,\n      isDesktop,\n      hasTouch: isTouchDevice,\n      screenWidth: window.innerWidth,\n      screenHeight: window.innerHeight,\n      devicePixelRatio: window.devicePixelRatio || 1,\n      memory,\n      connection,\n      isObsidianMobile,\n      os,\n    };\n  }\n\n  private static detectObsidianMobile(): boolean {\n    // Check for Obsidian mobile app indicators\n\n    // Check for Capacitor (which Obsidian mobile uses)\n    if ((window as any).Capacitor) {\n      return true;\n    }\n\n    // Check for mobile-specific Obsidian APIs\n    if ((window as any).ObsidianMobile) {\n      return true;\n    }\n\n    // Check user agent for Obsidian mobile\n    const userAgent = navigator.userAgent.toLowerCase();\n    if (\n      userAgent.includes(\"obsidian\") &&\n      (userAgent.includes(\"mobile\") ||\n        userAgent.includes(\"ios\") ||\n        userAgent.includes(\"android\"))\n    ) {\n      return true;\n    }\n\n    // Check for file system access patterns typical of mobile apps\n    const hasFileSystemAccess =\n      \"showOpenFilePicker\" in window || \"webkitRequestFileSystem\" in window;\n    const isMobileEnvironment = /mobile|android|iphone|ipad/.test(userAgent);\n\n    if (!hasFileSystemAccess && isMobileEnvironment) {\n      return true;\n    }\n\n    // Check for specific mobile app characteristics\n    const isStandalone =\n      window.matchMedia?.(\"(display-mode: standalone)\")?.matches || false;\n    const isFullscreen =\n      window.matchMedia?.(\"(display-mode: fullscreen)\")?.matches || false;\n\n    if ((isStandalone || isFullscreen) && isMobileEnvironment) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get CSS media query for mobile detection\n   */\n  public static getMobileMediaQuery(): string {\n    return \"(max-width: 768px), (pointer: coarse)\";\n  }\n\n  /**\n   * Get CSS media query for touch detection\n   */\n  public static getTouchMediaQuery(): string {\n    return \"(pointer: coarse)\";\n  }\n\n  /**\n   * Check if reduced motion is preferred\n   */\n  public static prefersReducedMotion(): boolean {\n    return (\n      window.matchMedia?.(\"(prefers-reduced-motion: reduce)\")?.matches || false\n    );\n  }\n\n  /**\n   * Check if dark mode is preferred\n   */\n  public static prefersDarkMode(): boolean {\n    return (\n      window.matchMedia?.(\"(prefers-color-scheme: dark)\")?.matches || false\n    );\n  }\n\n  /**\n   * Get safe area insets (for devices with notches)\n   */\n  public static getSafeAreaInsets(): {\n    top: number;\n    right: number;\n    bottom: number;\n    left: number;\n  } {\n    const style = getComputedStyle(document.documentElement);\n\n    return {\n      top: parseInt(\n        style.getPropertyValue(\"env(safe-area-inset-top)\") || \"0\",\n        10,\n      ),\n      right: parseInt(\n        style.getPropertyValue(\"env(safe-area-inset-right)\") || \"0\",\n        10,\n      ),\n      bottom: parseInt(\n        style.getPropertyValue(\"env(safe-area-inset-bottom)\") || \"0\",\n        10,\n      ),\n      left: parseInt(\n        style.getPropertyValue(\"env(safe-area-inset-left)\") || \"0\",\n        10,\n      ),\n    };\n  }\n\n  /**\n   * Create a media query listener for platform changes\n   */\n  public static createPlatformListener(\n    callback: (info: PlatformInfo) => void,\n  ): () => void {\n    if (!window.matchMedia) {\n      // Return no-op cleanup function if matchMedia is not available\n      return () => {};\n    }\n\n    const mediaQueries = [\n      window.matchMedia(\"(max-width: 768px)\"),\n      window.matchMedia(\"(orientation: portrait)\"),\n      window.matchMedia(\"(pointer: coarse)\"),\n    ];\n\n    const handleChange = () => {\n      this.refresh();\n      callback(this.getPlatformInfo());\n    };\n\n    mediaQueries.forEach((mq) =>\n      mq?.addEventListener?.(\"change\", handleChange),\n    );\n\n    // Return cleanup function\n    return () => {\n      mediaQueries.forEach((mq) =>\n        mq?.removeEventListener?.(\"change\", handleChange),\n      );\n    };\n  }\n}\n"],"version":3}