2e0c4fc72919d0c885e0f00a6c36c381
"use strict";

/* istanbul ignore next */
function cov_251f4iodtt() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/QueryTemplate.ts";
  var hash = "5adfbc828fca93e51ff4cc3b2b3e4906bc9fa1ed";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/QueryTemplate.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 87
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 11,
          column: 83
        }
      },
      "3": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 6,
          column: 52
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 46
        }
      },
      "5": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 46
        }
      },
      "7": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 42
        }
      },
      "8": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 17,
          column: 89
        }
      },
      "9": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 48
        }
      },
      "10": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 56
        }
      },
      "11": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 48
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 28
        }
      },
      "14": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 40
        }
      },
      "15": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "16": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 178
        }
      },
      "17": {
        start: {
          line: 24,
          column: 62
        },
        end: {
          line: 24,
          column: 175
        }
      },
      "18": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 85
        }
      },
      "19": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 51
        }
      },
      "20": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 32,
          column: 11
        }
      },
      "21": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 38
        }
      },
      "22": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 23
        }
      },
      "23": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "24": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 41
        }
      },
      "25": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 38
        }
      },
      "26": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 40
        }
      },
      "27": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 39
        }
      },
      "28": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 55,
          column: 14
        }
      },
      "29": {
        start: {
          line: 54,
          column: 41
        },
        end: {
          line: 55,
          column: 11
        }
      },
      "30": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 62,
          column: 10
        }
      },
      "31": {
        start: {
          line: 59,
          column: 47
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "32": {
        start: {
          line: 60,
          column: 47
        },
        end: {
          line: 60,
          column: 67
        }
      },
      "33": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 35
        }
      },
      "34": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 48
        }
      },
      "35": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 30
        }
      },
      "36": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 42
        }
      },
      "37": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 55
        }
      },
      "38": {
        start: {
          line: 77,
          column: 43
        },
        end: {
          line: 77,
          column: 53
        }
      },
      "39": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 77
        }
      },
      "40": {
        start: {
          line: 80,
          column: 41
        },
        end: {
          line: 80,
          column: 75
        }
      },
      "41": {
        start: {
          line: 83,
          column: 23
        },
        end: {
          line: 83,
          column: 32
        }
      },
      "42": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 88,
          column: 11
        }
      },
      "43": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "44": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 82
        }
      },
      "45": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 22
        }
      },
      "46": {
        start: {
          line: 92,
          column: 23
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "47": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "48": {
        start: {
          line: 95,
          column: 29
        },
        end: {
          line: 95,
          column: 87
        }
      },
      "49": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "50": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 67
        }
      },
      "51": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 120,
          column: 9
        }
      },
      "52": {
        start: {
          line: 102,
          column: 26
        },
        end: {
          line: 102,
          column: 62
        }
      },
      "53": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "54": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "55": {
        start: {
          line: 105,
          column: 34
        },
        end: {
          line: 105,
          column: 71
        }
      },
      "56": {
        start: {
          line: 106,
          column: 20
        },
        end: {
          line: 108,
          column: 21
        }
      },
      "57": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 97
        }
      },
      "58": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "59": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 112
        }
      },
      "60": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "61": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 111
        }
      },
      "62": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "63": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 123
        }
      },
      "64": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 124,
          column: 10
        }
      },
      "65": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 134,
          column: 11
        }
      },
      "66": {
        start: {
          line: 137,
          column: 23
        },
        end: {
          line: 137,
          column: 25
        }
      },
      "67": {
        start: {
          line: 138,
          column: 23
        },
        end: {
          line: 138,
          column: 44
        }
      },
      "68": {
        start: {
          line: 140,
          column: 26
        },
        end: {
          line: 140,
          column: 51
        }
      },
      "69": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "70": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "71": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 39
        }
      },
      "72": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 152,
          column: 9
        }
      },
      "73": {
        start: {
          line: 148,
          column: 29
        },
        end: {
          line: 148,
          column: 72
        }
      },
      "74": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 151,
          column: 13
        }
      },
      "75": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 77
        }
      },
      "76": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "77": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 80
        }
      },
      "78": {
        start: {
          line: 157,
          column: 35
        },
        end: {
          line: 157,
          column: 78
        }
      },
      "79": {
        start: {
          line: 159,
          column: 35
        },
        end: {
          line: 159,
          column: 78
        }
      },
      "80": {
        start: {
          line: 161,
          column: 22
        },
        end: {
          line: 169,
          column: 11
        }
      },
      "81": {
        start: {
          line: 161,
          column: 64
        },
        end: {
          line: 169,
          column: 9
        }
      },
      "82": {
        start: {
          line: 162,
          column: 25
        },
        end: {
          line: 162,
          column: 36
        }
      },
      "83": {
        start: {
          line: 163,
          column: 28
        },
        end: {
          line: 163,
          column: 42
        }
      },
      "84": {
        start: {
          line: 164,
          column: 27
        },
        end: {
          line: 164,
          column: 40
        }
      },
      "85": {
        start: {
          line: 165,
          column: 31
        },
        end: {
          line: 165,
          column: 48
        }
      },
      "86": {
        start: {
          line: 166,
          column: 33
        },
        end: {
          line: 166,
          column: 82
        }
      },
      "87": {
        start: {
          line: 167,
          column: 26
        },
        end: {
          line: 167,
          column: 38
        }
      },
      "88": {
        start: {
          line: 168,
          column: 35
        },
        end: {
          line: 168,
          column: 56
        }
      },
      "89": {
        start: {
          line: 170,
          column: 22
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "90": {
        start: {
          line: 170,
          column: 64
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "91": {
        start: {
          line: 171,
          column: 25
        },
        end: {
          line: 171,
          column: 36
        }
      },
      "92": {
        start: {
          line: 172,
          column: 28
        },
        end: {
          line: 172,
          column: 42
        }
      },
      "93": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 40
        }
      },
      "94": {
        start: {
          line: 174,
          column: 35
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "95": {
        start: {
          line: 175,
          column: 35
        },
        end: {
          line: 175,
          column: 56
        }
      },
      "96": {
        start: {
          line: 176,
          column: 34
        },
        end: {
          line: 176,
          column: 54
        }
      },
      "97": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 184,
          column: 10
        }
      },
      "98": {
        start: {
          line: 187,
          column: 23
        },
        end: {
          line: 187,
          column: 39
        }
      },
      "99": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 202,
          column: 11
        }
      },
      "100": {
        start: {
          line: 190,
          column: 28
        },
        end: {
          line: 190,
          column: 51
        }
      },
      "101": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 73
        }
      },
      "102": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 196,
          column: 13
        }
      },
      "103": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 91
        }
      },
      "104": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "105": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 73
        }
      },
      "106": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 201,
          column: 27
        }
      },
      "107": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "108": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 205,
          column: 51
        }
      },
      "109": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 73
        }
      },
      "110": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "111": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 89
        }
      },
      "112": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 27
        }
      },
      "113": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 22
        }
      },
      "114": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 69
        }
      },
      "115": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 221,
          column: 30
        }
      },
      "116": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 30
        }
      },
      "117": {
        start: {
          line: 222,
          column: 21
        },
        end: {
          line: 222,
          column: 25
        }
      },
      "118": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "119": {
        start: {
          line: 224,
          column: 32
        },
        end: {
          line: 224,
          column: 44
        }
      },
      "120": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 73
        }
      },
      "121": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "122": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "123": {
        start: {
          line: 230,
          column: 36
        },
        end: {
          line: 230,
          column: 55
        }
      },
      "124": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 90
        }
      },
      "125": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 22
        }
      },
      "126": {
        start: {
          line: 237,
          column: 32
        },
        end: {
          line: 237,
          column: 177
        }
      },
      "127": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "128": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "129": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 64
        }
      },
      "130": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 73
        }
      },
      "131": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 20
        }
      },
      "132": {
        start: {
          line: 257,
          column: 22
        },
        end: {
          line: 257,
          column: 95
        }
      },
      "133": {
        start: {
          line: 257,
          column: 48
        },
        end: {
          line: 257,
          column: 94
        }
      },
      "134": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "135": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 66
        }
      },
      "136": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "137": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "138": {
        start: {
          line: 264,
          column: 30
        },
        end: {
          line: 264,
          column: 67
        }
      },
      "139": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 267,
          column: 17
        }
      },
      "140": {
        start: {
          line: 266,
          column: 20
        },
        end: {
          line: 266,
          column: 81
        }
      },
      "141": {
        start: {
          line: 269,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "142": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 77
        }
      },
      "143": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "144": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 77
        }
      },
      "145": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "146": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 77
        }
      },
      "147": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 52
        }
      },
      "148": {
        start: {
          line: 282,
          column: 22
        },
        end: {
          line: 282,
          column: 95
        }
      },
      "149": {
        start: {
          line: 282,
          column: 48
        },
        end: {
          line: 282,
          column: 94
        }
      },
      "150": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 72
        }
      },
      "151": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 37
        }
      },
      "152": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "153": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 64
        }
      },
      "154": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 168
        }
      },
      "155": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 302,
          column: 10
        }
      },
      "156": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "157": {
        start: {
          line: 316,
          column: 26
        },
        end: {
          line: 316,
          column: 83
        }
      },
      "158": {
        start: {
          line: 317,
          column: 26
        },
        end: {
          line: 317,
          column: 83
        }
      },
      "159": {
        start: {
          line: 318,
          column: 23
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "160": {
        start: {
          line: 319,
          column: 42
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "161": {
        start: {
          line: 328,
          column: 42
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "162": {
        start: {
          line: 338,
          column: 29
        },
        end: {
          line: 338,
          column: 338
        }
      },
      "163": {
        start: {
          line: 340,
          column: 23
        },
        end: {
          line: 340,
          column: 52
        }
      },
      "164": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "165": {
        start: {
          line: 351,
          column: 23
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "166": {
        start: {
          line: 352,
          column: 38
        },
        end: {
          line: 360,
          column: 13
        }
      },
      "167": {
        start: {
          line: 361,
          column: 38
        },
        end: {
          line: 368,
          column: 13
        }
      },
      "168": {
        start: {
          line: 370,
          column: 25
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "169": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 388,
          column: 11
        }
      },
      "170": {
        start: {
          line: 391,
          column: 0
        },
        end: {
          line: 391,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 5,
            column: 1
          },
          end: {
            line: 5,
            column: 2
          }
        },
        loc: {
          start: {
            line: 5,
            column: 29
          },
          end: {
            line: 11,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 13,
            column: 1
          },
          end: {
            line: 13,
            column: 2
          }
        },
        loc: {
          start: {
            line: 13,
            column: 31
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 13
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 24
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 56
          },
          end: {
            line: 24,
            column: 57
          }
        },
        loc: {
          start: {
            line: 24,
            column: 62
          },
          end: {
            line: 24,
            column: 175
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        loc: {
          start: {
            line: 38,
            column: 14
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        loc: {
          start: {
            line: 44,
            column: 18
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 47
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 50,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        loc: {
          start: {
            line: 50,
            column: 14
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 50
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 20
          },
          end: {
            line: 56,
            column: 5
          }
        },
        line: 53
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 54,
            column: 35
          },
          end: {
            line: 54,
            column: 36
          }
        },
        loc: {
          start: {
            line: 54,
            column: 41
          },
          end: {
            line: 55,
            column: 11
          }
        },
        line: 54
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 57
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 59,
            column: 41
          },
          end: {
            line: 59,
            column: 42
          }
        },
        loc: {
          start: {
            line: 59,
            column: 47
          },
          end: {
            line: 59,
            column: 67
          }
        },
        line: 59
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 60,
            column: 41
          },
          end: {
            line: 60,
            column: 42
          }
        },
        loc: {
          start: {
            line: 60,
            column: 47
          },
          end: {
            line: 60,
            column: 67
          }
        },
        line: 60
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 64
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 18
          },
          end: {
            line: 69,
            column: 5
          }
        },
        line: 67
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 24
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 70
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        loc: {
          start: {
            line: 73,
            column: 20
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 73
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        loc: {
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 76
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 77,
            column: 38
          },
          end: {
            line: 77,
            column: 39
          }
        },
        loc: {
          start: {
            line: 77,
            column: 43
          },
          end: {
            line: 77,
            column: 53
          }
        },
        line: 77
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 21
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 79
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 80,
            column: 36
          },
          end: {
            line: 80,
            column: 37
          }
        },
        loc: {
          start: {
            line: 80,
            column: 41
          },
          end: {
            line: 80,
            column: 75
          }
        },
        line: 80
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 25
          },
          end: {
            line: 90,
            column: 5
          }
        },
        line: 82
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 84,
            column: 32
          },
          end: {
            line: 84,
            column: 33
          }
        },
        loc: {
          start: {
            line: 84,
            column: 41
          },
          end: {
            line: 88,
            column: 9
          }
        },
        line: 84
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 25
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 91
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 20
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 126
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 136
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 161,
            column: 51
          },
          end: {
            line: 161,
            column: 52
          }
        },
        loc: {
          start: {
            line: 161,
            column: 64
          },
          end: {
            line: 169,
            column: 9
          }
        },
        line: 161
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 162,
            column: 19
          },
          end: {
            line: 162,
            column: 20
          }
        },
        loc: {
          start: {
            line: 162,
            column: 25
          },
          end: {
            line: 162,
            column: 36
          }
        },
        line: 162
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 163,
            column: 22
          },
          end: {
            line: 163,
            column: 23
          }
        },
        loc: {
          start: {
            line: 163,
            column: 28
          },
          end: {
            line: 163,
            column: 42
          }
        },
        line: 163
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 164,
            column: 21
          },
          end: {
            line: 164,
            column: 22
          }
        },
        loc: {
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 164,
            column: 40
          }
        },
        line: 164
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 165,
            column: 25
          },
          end: {
            line: 165,
            column: 26
          }
        },
        loc: {
          start: {
            line: 165,
            column: 31
          },
          end: {
            line: 165,
            column: 48
          }
        },
        line: 165
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 166,
            column: 27
          },
          end: {
            line: 166,
            column: 28
          }
        },
        loc: {
          start: {
            line: 166,
            column: 33
          },
          end: {
            line: 166,
            column: 82
          }
        },
        line: 166
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 167,
            column: 20
          },
          end: {
            line: 167,
            column: 21
          }
        },
        loc: {
          start: {
            line: 167,
            column: 26
          },
          end: {
            line: 167,
            column: 38
          }
        },
        line: 167
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 168,
            column: 29
          },
          end: {
            line: 168,
            column: 30
          }
        },
        loc: {
          start: {
            line: 168,
            column: 35
          },
          end: {
            line: 168,
            column: 56
          }
        },
        line: 168
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 170,
            column: 51
          },
          end: {
            line: 170,
            column: 52
          }
        },
        loc: {
          start: {
            line: 170,
            column: 64
          },
          end: {
            line: 177,
            column: 9
          }
        },
        line: 170
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 171,
            column: 19
          },
          end: {
            line: 171,
            column: 20
          }
        },
        loc: {
          start: {
            line: 171,
            column: 25
          },
          end: {
            line: 171,
            column: 36
          }
        },
        line: 171
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 172,
            column: 22
          },
          end: {
            line: 172,
            column: 23
          }
        },
        loc: {
          start: {
            line: 172,
            column: 28
          },
          end: {
            line: 172,
            column: 42
          }
        },
        line: 172
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 173,
            column: 21
          },
          end: {
            line: 173,
            column: 22
          }
        },
        loc: {
          start: {
            line: 173,
            column: 27
          },
          end: {
            line: 173,
            column: 40
          }
        },
        line: 173
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 174,
            column: 29
          },
          end: {
            line: 174,
            column: 30
          }
        },
        loc: {
          start: {
            line: 174,
            column: 35
          },
          end: {
            line: 174,
            column: 56
          }
        },
        line: 174
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 175,
            column: 29
          },
          end: {
            line: 175,
            column: 30
          }
        },
        loc: {
          start: {
            line: 175,
            column: 35
          },
          end: {
            line: 175,
            column: 56
          }
        },
        line: 175
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 176,
            column: 28
          },
          end: {
            line: 176,
            column: 29
          }
        },
        loc: {
          start: {
            line: 176,
            column: 34
          },
          end: {
            line: 176,
            column: 54
          }
        },
        line: 176
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 40
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 186
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 189,
            column: 40
          },
          end: {
            line: 189,
            column: 41
          }
        },
        loc: {
          start: {
            line: 189,
            column: 48
          },
          end: {
            line: 202,
            column: 9
          }
        },
        line: 189
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 204,
            column: 40
          },
          end: {
            line: 204,
            column: 41
          }
        },
        loc: {
          start: {
            line: 204,
            column: 48
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 204
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 40
          },
          end: {
            line: 218,
            column: 5
          }
        },
        line: 216
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 38
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 219
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 236,
            column: 4
          },
          end: {
            line: 236,
            column: 5
          }
        },
        loc: {
          start: {
            line: 236,
            column: 21
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 236
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 28
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 247
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 256,
            column: 4
          },
          end: {
            line: 256,
            column: 5
          }
        },
        loc: {
          start: {
            line: 256,
            column: 42
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 256
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 257,
            column: 43
          },
          end: {
            line: 257,
            column: 44
          }
        },
        loc: {
          start: {
            line: 257,
            column: 48
          },
          end: {
            line: 257,
            column: 94
          }
        },
        line: 257
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 281,
            column: 4
          },
          end: {
            line: 281,
            column: 5
          }
        },
        loc: {
          start: {
            line: 281,
            column: 35
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 281
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 282,
            column: 43
          },
          end: {
            line: 282,
            column: 44
          }
        },
        loc: {
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 94
          }
        },
        line: 282
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 27
          },
          end: {
            line: 287,
            column: 5
          }
        },
        line: 285
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 288,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        loc: {
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 288
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 13
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 294
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 26
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 304
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 56
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 314
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 319,
            column: 33
          },
          end: {
            line: 319,
            column: 34
          }
        },
        loc: {
          start: {
            line: 319,
            column: 42
          },
          end: {
            line: 327,
            column: 13
          }
        },
        line: 319
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 328,
            column: 33
          },
          end: {
            line: 328,
            column: 34
          }
        },
        loc: {
          start: {
            line: 328,
            column: 42
          },
          end: {
            line: 335,
            column: 13
          }
        },
        line: 328
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 350,
            column: 4
          },
          end: {
            line: 350,
            column: 5
          }
        },
        loc: {
          start: {
            line: 350,
            column: 116
          },
          end: {
            line: 389,
            column: 5
          }
        },
        line: 350
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 352,
            column: 29
          },
          end: {
            line: 352,
            column: 30
          }
        },
        loc: {
          start: {
            line: 352,
            column: 38
          },
          end: {
            line: 360,
            column: 13
          }
        },
        line: 352
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 361,
            column: 29
          },
          end: {
            line: 361,
            column: 30
          }
        },
        loc: {
          start: {
            line: 361,
            column: 38
          },
          end: {
            line: 368,
            column: 13
          }
        },
        line: 361
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 46
          }
        }, {
          start: {
            line: 11,
            column: 51
          },
          end: {
            line: 11,
            column: 80
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 17,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 17,
            column: 50
          }
        }, {
          start: {
            line: 17,
            column: 55
          },
          end: {
            line: 17,
            column: 86
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 27
          },
          end: {
            line: 24,
            column: 44
          }
        }, {
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 50
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 104
          },
          end: {
            line: 24,
            column: 172
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 104
          },
          end: {
            line: 24,
            column: 108
          }
        }, {
          start: {
            line: 24,
            column: 112
          },
          end: {
            line: 24,
            column: 172
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 30
          },
          end: {
            line: 25,
            column: 51
          }
        }, {
          start: {
            line: 25,
            column: 55
          },
          end: {
            line: 25,
            column: 84
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 41
          }
        }, {
          start: {
            line: 26,
            column: 45
          },
          end: {
            line: 26,
            column: 50
          }
        }],
        line: 26
      },
      "6": {
        loc: {
          start: {
            line: 54,
            column: 83
          },
          end: {
            line: 54,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 83
          },
          end: {
            line: 54,
            column: 87
          }
        }, {
          start: {
            line: 54,
            column: 91
          },
          end: {
            line: 54,
            column: 108
          }
        }],
        line: 54
      },
      "7": {
        loc: {
          start: {
            line: 61,
            column: 22
          },
          end: {
            line: 61,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 45
          },
          end: {
            line: 61,
            column: 84
          }
        }, {
          start: {
            line: 61,
            column: 87
          },
          end: {
            line: 61,
            column: 96
          }
        }],
        line: 61
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 42
          },
          end: {
            line: 80,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 42
          },
          end: {
            line: 80,
            column: 46
          }
        }, {
          start: {
            line: 80,
            column: 50
          },
          end: {
            line: 80,
            column: 67
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 87,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 27
          },
          end: {
            line: 86,
            column: 35
          }
        }, {
          start: {
            line: 86,
            column: 39
          },
          end: {
            line: 86,
            column: 60
          }
        }],
        line: 86
      },
      "11": {
        loc: {
          start: {
            line: 95,
            column: 29
          },
          end: {
            line: 95,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 29
          },
          end: {
            line: 95,
            column: 65
          }
        }, {
          start: {
            line: 95,
            column: 69
          },
          end: {
            line: 95,
            column: 87
          }
        }],
        line: 95
      },
      "12": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "13": {
        loc: {
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "14": {
        loc: {
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 16
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 42
          }
        }],
        line: 103
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "16": {
        loc: {
          start: {
            line: 106,
            column: 20
          },
          end: {
            line: 108,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 20
          },
          end: {
            line: 108,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "17": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "18": {
        loc: {
          start: {
            line: 110,
            column: 20
          },
          end: {
            line: 110,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 20
          },
          end: {
            line: 110,
            column: 47
          }
        }, {
          start: {
            line: 110,
            column: 51
          },
          end: {
            line: 110,
            column: 93
          }
        }],
        line: 110
      },
      "19": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "20": {
        loc: {
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 20
          },
          end: {
            line: 113,
            column: 47
          }
        }, {
          start: {
            line: 113,
            column: 51
          },
          end: {
            line: 113,
            column: 93
          }
        }],
        line: 113
      },
      "21": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "22": {
        loc: {
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 116,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 116,
            column: 51
          }
        }, {
          start: {
            line: 116,
            column: 55
          },
          end: {
            line: 116,
            column: 103
          }
        }],
        line: 116
      },
      "23": {
        loc: {
          start: {
            line: 128,
            column: 16
          },
          end: {
            line: 128,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 16
          },
          end: {
            line: 128,
            column: 24
          }
        }, {
          start: {
            line: 128,
            column: 28
          },
          end: {
            line: 128,
            column: 60
          }
        }],
        line: 128
      },
      "24": {
        loc: {
          start: {
            line: 138,
            column: 23
          },
          end: {
            line: 138,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 23
          },
          end: {
            line: 138,
            column: 38
          }
        }, {
          start: {
            line: 138,
            column: 42
          },
          end: {
            line: 138,
            column: 44
          }
        }],
        line: 138
      },
      "25": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "26": {
        loc: {
          start: {
            line: 148,
            column: 29
          },
          end: {
            line: 148,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 29
          },
          end: {
            line: 148,
            column: 50
          }
        }, {
          start: {
            line: 148,
            column: 54
          },
          end: {
            line: 148,
            column: 72
          }
        }],
        line: 148
      },
      "27": {
        loc: {
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 12
          },
          end: {
            line: 151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "28": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "29": {
        loc: {
          start: {
            line: 166,
            column: 33
          },
          end: {
            line: 166,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 33
          },
          end: {
            line: 166,
            column: 52
          }
        }, {
          start: {
            line: 166,
            column: 56
          },
          end: {
            line: 166,
            column: 82
          }
        }],
        line: 166
      },
      "30": {
        loc: {
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 196,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "31": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "32": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "33": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 221,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 221,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "34": {
        loc: {
          start: {
            line: 221,
            column: 19
          },
          end: {
            line: 221,
            column: 29
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 221,
            column: 19
          },
          end: {
            line: 221,
            column: 23
          }
        }, {
          start: {
            line: 221,
            column: 27
          },
          end: {
            line: 221,
            column: 29
          }
        }],
        line: 221
      },
      "35": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "36": {
        loc: {
          start: {
            line: 237,
            column: 95
          },
          end: {
            line: 237,
            column: 124
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 237,
            column: 95
          },
          end: {
            line: 237,
            column: 119
          }
        }, {
          start: {
            line: 237,
            column: 123
          },
          end: {
            line: 237,
            column: 124
          }
        }],
        line: 237
      },
      "37": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "38": {
        loc: {
          start: {
            line: 257,
            column: 48
          },
          end: {
            line: 257,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 48
          },
          end: {
            line: 257,
            column: 70
          }
        }, {
          start: {
            line: 257,
            column: 74
          },
          end: {
            line: 257,
            column: 94
          }
        }],
        line: 257
      },
      "39": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "40": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 278,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "41": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "42": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 267,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "43": {
        loc: {
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 269
      },
      "44": {
        loc: {
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 269,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 269,
            column: 16
          },
          end: {
            line: 269,
            column: 43
          }
        }, {
          start: {
            line: 269,
            column: 47
          },
          end: {
            line: 269,
            column: 89
          }
        }],
        line: 269
      },
      "45": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 274,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "46": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 272,
            column: 43
          }
        }, {
          start: {
            line: 272,
            column: 47
          },
          end: {
            line: 272,
            column: 89
          }
        }],
        line: 272
      },
      "47": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "48": {
        loc: {
          start: {
            line: 275,
            column: 16
          },
          end: {
            line: 275,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 275,
            column: 16
          },
          end: {
            line: 275,
            column: 47
          }
        }, {
          start: {
            line: 275,
            column: 51
          },
          end: {
            line: 275,
            column: 99
          }
        }],
        line: 275
      },
      "49": {
        loc: {
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 48
          },
          end: {
            line: 282,
            column: 70
          }
        }, {
          start: {
            line: 282,
            column: 74
          },
          end: {
            line: 282,
            column: 94
          }
        }],
        line: 282
      },
      "50": {
        loc: {
          start: {
            line: 283,
            column: 15
          },
          end: {
            line: 283,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 23
          },
          end: {
            line: 283,
            column: 59
          }
        }, {
          start: {
            line: 283,
            column: 62
          },
          end: {
            line: 283,
            column: 71
          }
        }],
        line: 283
      },
      "51": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "52": {
        loc: {
          start: {
            line: 292,
            column: 79
          },
          end: {
            line: 292,
            column: 163
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 79
          },
          end: {
            line: 292,
            column: 91
          }
        }, {
          start: {
            line: 292,
            column: 95
          },
          end: {
            line: 292,
            column: 163
          }
        }],
        line: 292
      },
      "53": {
        loc: {
          start: {
            line: 307,
            column: 174
          },
          end: {
            line: 307,
            column: 243
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 307,
            column: 199
          },
          end: {
            line: 307,
            column: 231
          }
        }, {
          start: {
            line: 307,
            column: 234
          },
          end: {
            line: 307,
            column: 243
          }
        }],
        line: 307
      },
      "54": {
        loc: {
          start: {
            line: 309,
            column: 24
          },
          end: {
            line: 309,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 24
          },
          end: {
            line: 309,
            column: 39
          }
        }, {
          start: {
            line: 309,
            column: 43
          },
          end: {
            line: 309,
            column: 45
          }
        }],
        line: 309
      },
      "55": {
        loc: {
          start: {
            line: 311,
            column: 23
          },
          end: {
            line: 311,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 23
          },
          end: {
            line: 311,
            column: 37
          }
        }, {
          start: {
            line: 311,
            column: 41
          },
          end: {
            line: 311,
            column: 46
          }
        }],
        line: 311
      },
      "56": {
        loc: {
          start: {
            line: 316,
            column: 26
          },
          end: {
            line: 316,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 49
          },
          end: {
            line: 316,
            column: 75
          }
        }, {
          start: {
            line: 316,
            column: 78
          },
          end: {
            line: 316,
            column: 83
          }
        }],
        line: 316
      },
      "57": {
        loc: {
          start: {
            line: 317,
            column: 26
          },
          end: {
            line: 317,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 317,
            column: 49
          },
          end: {
            line: 317,
            column: 75
          }
        }, {
          start: {
            line: 317,
            column: 78
          },
          end: {
            line: 317,
            column: 83
          }
        }],
        line: 317
      },
      "58": {
        loc: {
          start: {
            line: 338,
            column: 51
          },
          end: {
            line: 338,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 51
          },
          end: {
            line: 338,
            column: 64
          }
        }, {
          start: {
            line: 338,
            column: 68
          },
          end: {
            line: 338,
            column: 87
          }
        }],
        line: 338
      },
      "59": {
        loc: {
          start: {
            line: 338,
            column: 102
          },
          end: {
            line: 338,
            column: 128
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 102
          },
          end: {
            line: 338,
            column: 122
          }
        }, {
          start: {
            line: 338,
            column: 126
          },
          end: {
            line: 338,
            column: 128
          }
        }],
        line: 338
      },
      "60": {
        loc: {
          start: {
            line: 338,
            column: 140
          },
          end: {
            line: 338,
            column: 184
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 140
          },
          end: {
            line: 338,
            column: 157
          }
        }, {
          start: {
            line: 338,
            column: 161
          },
          end: {
            line: 338,
            column: 184
          }
        }],
        line: 338
      },
      "61": {
        loc: {
          start: {
            line: 338,
            column: 198
          },
          end: {
            line: 338,
            column: 252
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 198
          },
          end: {
            line: 338,
            column: 217
          }
        }, {
          start: {
            line: 338,
            column: 221
          },
          end: {
            line: 338,
            column: 252
          }
        }],
        line: 338
      },
      "62": {
        loc: {
          start: {
            line: 338,
            column: 260
          },
          end: {
            line: 338,
            column: 279
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 260
          },
          end: {
            line: 338,
            column: 273
          }
        }, {
          start: {
            line: 338,
            column: 277
          },
          end: {
            line: 338,
            column: 279
          }
        }],
        line: 338
      },
      "63": {
        loc: {
          start: {
            line: 350,
            column: 69
          },
          end: {
            line: 350,
            column: 103
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 350,
            column: 80
          },
          end: {
            line: 350,
            column: 103
          }
        }],
        line: 350
      },
      "64": {
        loc: {
          start: {
            line: 350,
            column: 105
          },
          end: {
            line: 350,
            column: 114
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 350,
            column: 112
          },
          end: {
            line: 350,
            column: 114
          }
        }],
        line: 350
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0],
      "64": [0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/QueryTemplate.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/QueryTemplate.ts"],
      sourcesContent: ["import { VisualQueryNode } from './VisualQueryNode';\nimport { VisualQueryEdge } from './VisualQueryEdge';\n\nexport enum TemplateCategory {\n    EXPLORATION = 'exploration',\n    ANALYSIS = 'analysis',\n    RELATIONSHIP = 'relationship',\n    PROPERTY = 'property',\n    CUSTOM = 'custom'\n}\n\nexport enum TemplateDifficulty {\n    BEGINNER = 'beginner',\n    INTERMEDIATE = 'intermediate',\n    ADVANCED = 'advanced'\n}\n\nexport interface TemplateParameter {\n    id?: string;\n    name: string;\n    type: 'entity' | 'property' | 'literal' | 'variable';\n    description: string;\n    defaultValue?: string;\n    required: boolean;\n    placeholder?: string;\n    constraints?: {\n        pattern?: string;\n        minLength?: number;\n        maxLength?: number;\n        allowedValues?: string[];\n    };\n}\n\nexport interface TemplateMetadata {\n    name: string;\n    description: string;\n    category: TemplateCategory;\n    difficulty: TemplateDifficulty;\n    tags: string[];\n    author?: string;\n    version?: string;\n    sparqlPattern?: string;\n    usageCount?: number;\n    lastUsed?: Date;\n    createdAt: Date;\n    updatedAt: Date;\n    exampleUsage?: string;\n}\n\nexport interface SerializedNode {\n    id: string;\n    type: string;\n    label: string;\n    position: { x: number; y: number };\n    variableName?: string;\n    uri?: string;\n    dimensions?: { width: number; height: number };\n}\n\nexport interface SerializedEdge {\n    id: string;\n    sourceNodeId: string;\n    targetNodeId: string;\n    type: string;\n    label: string;\n    propertyUri?: string;\n}\n\nexport interface TemplateLayout {\n    nodes: SerializedNode[];\n    edges: SerializedEdge[];\n    viewport?: {\n        x: number;\n        y: number;\n        zoom: number;\n    };\n}\n\nexport class QueryTemplate {\n    private readonly id: string;\n    private readonly metadata: TemplateMetadata;\n    private readonly layout: TemplateLayout;\n    private readonly parameters: TemplateParameter[];\n    private readonly sparqlTemplate: string;\n    private readonly isBuiltIn: boolean;\n    private parameterValues: Map<string, string> = new Map();\n\n    constructor(params: {\n        id: string;\n        metadata: TemplateMetadata;\n        layout: TemplateLayout;\n        parameters?: TemplateParameter[];\n        sparqlTemplate?: string;\n        isBuiltIn?: boolean;\n    }) {\n        this.id = params.id;\n        this.metadata = params.metadata;\n        this.layout = params.layout;\n        this.parameters = (params.parameters || []).map(p => ({\n            ...p,\n            id: p.id || `param_${p.name}_${Math.random().toString(36).substr(2, 9)}`\n        }));\n        this.sparqlTemplate = params.sparqlTemplate || 'SELECT * WHERE { ?s ?p ?o }';\n        this.isBuiltIn = params.isBuiltIn || false;\n        \n        // Make id property non-writable\n        Object.defineProperty(this, 'id', {\n            value: params.id,\n            writable: false,\n            configurable: false\n        });\n        Object.freeze(this.isBuiltIn);\n    }\n\n    getId(): string {\n        return this.id;\n    }\n\n    getName(): string {\n        return this.metadata.name;\n    }\n\n    getDescription(): string {\n        return this.metadata.description;\n    }\n\n    getCategory(): TemplateCategory {\n        return this.metadata.category;\n    }\n\n    getDifficulty(): TemplateDifficulty {\n        return this.metadata.difficulty;\n    }\n\n    getTags(): string[] {\n        return [...this.metadata.tags];\n    }\n\n    getParameters(): TemplateParameter[] {\n        return this.parameters.map(p => ({ \n            ...p, \n            id: p.id || `param_${p.name}` // Ensure id exists\n        }));\n    }\n\n    getLayout(): TemplateLayout {\n        return {\n            nodes: this.layout.nodes.map(n => ({ ...n })),\n            edges: this.layout.edges.map(e => ({ ...e })),\n            viewport: this.layout.viewport ? { ...this.layout.viewport } : undefined\n        };\n    }\n\n    getSparqlTemplate(): string {\n        return this.sparqlTemplate;\n    }\n\n    getMetadata(): TemplateMetadata {\n        return { ...this.metadata };\n    }\n\n    isBuiltInTemplate(): boolean {\n        return this.isBuiltIn;\n    }\n\n    hasParameters(): boolean {\n        return this.parameters.length > 0;\n    }\n\n    getRequiredParameters(): TemplateParameter[] {\n        return this.parameters.filter(p => p.required);\n    }\n\n    getParameter(id: string): TemplateParameter | undefined {\n        return this.parameters.find(p => (p.id || `param_${p.name}`) === id);\n    }\n\n    getParameterValues(): Map<string, string> {\n        const values = new Map<string, string>();\n        this.parameters.forEach(param => {\n            if (param.defaultValue) {\n                values.set(param.id || `param_${param.name}`, param.defaultValue);\n            }\n        });\n        return values;\n    }\n\n\n    validateParameters(): { isValid: boolean; errors: string[] } {\n        const errors: string[] = [];\n        \n        // Validate required parameters have values\n        for (const param of this.getRequiredParameters()) {\n            const hasValue = this.parameterValues.has(param.name) || param.defaultValue;\n            if (!hasValue) {\n                errors.push(`Parameter ${param.name} is required`);\n            }\n        }\n        \n        // Validate parameter constraints\n        for (const param of this.parameters) {\n            const value = this.parameterValues.get(param.name);\n            if (value && param.constraints) {\n                if (param.constraints.pattern) {\n                    const regex = new RegExp(param.constraints.pattern);\n                    if (!regex.test(value)) {\n                        errors.push(`Parameter '${param.name}' does not match required pattern`);\n                    }\n                }\n                \n                if (param.constraints.minLength && value.length < param.constraints.minLength) {\n                    errors.push(`Parameter '${param.name}' is too short (min: ${param.constraints.minLength})`);\n                }\n                \n                if (param.constraints.maxLength && value.length > param.constraints.maxLength) {\n                    errors.push(`Parameter '${param.name}' is too long (max: ${param.constraints.maxLength})`);\n                }\n                \n                if (param.constraints.allowedValues && !param.constraints.allowedValues.includes(value)) {\n                    errors.push(`Parameter '${param.name}' must be one of: ${param.constraints.allowedValues.join(', ')}`);\n                }\n            }\n        }\n        \n        return {\n            isValid: errors.length === 0,\n            errors\n        };\n    }\n\n    clone(customId?: string): QueryTemplate {\n        return new QueryTemplate({\n            id: customId || `${this.id}_clone_${Date.now()}`,\n            metadata: {\n                ...this.metadata,\n                name: `${this.metadata.name} (Copy)`,\n                createdAt: new Date(),\n                updatedAt: new Date()\n            },\n            layout: this.layout,\n            parameters: this.parameters,\n            sparqlTemplate: this.sparqlTemplate,\n            isBuiltIn: false\n        });\n    }\n\n    instantiate(parameterValues?: Record<string, string>): {\n        nodes: any[];\n        edges: any[];\n        sparql?: string;\n        layout?: TemplateLayout;\n        errors?: string[];\n    } {\n        const errors: string[] = [];\n        const values = parameterValues || {};\n        \n        // Merge with stored parameter values\n        const allValues = { ...values };\n        for (const [key, value] of this.parameterValues) {\n            if (!allValues[key]) {\n                allValues[key] = value;\n            }\n        }\n        \n        // Validate required parameters\n        for (const param of this.getRequiredParameters()) {\n            const hasValue = allValues[param.name] || param.defaultValue;\n            if (!hasValue) {\n                errors.push(`Required parameter '${param.name}' is missing`);\n            }\n        }\n        \n        if (errors.length > 0) {\n            throw new Error('Template validation failed: ' + errors.join(', '));\n        }\n        \n        // Replace placeholders in layout\n        const instantiatedLayout = this.replacePlaceholdersInLayout(allValues);\n        \n        // Replace placeholders in SPARQL\n        const instantiatedSparql = this.replacePlaceholdersInSparql(allValues);\n        \n        // Convert serialized nodes/edges to mock objects for testing\n        const nodes = instantiatedLayout.nodes.map(nodeData => ({\n            getId: () => nodeData.id,\n            getLabel: () => nodeData.label,\n            getType: () => nodeData.type,\n            getPosition: () => nodeData.position,\n            getDimensions: () => nodeData.dimensions || { width: 100, height: 40 },\n            getUri: () => nodeData.uri,\n            getVariableName: () => nodeData.variableName\n        }));\n        \n        const edges = instantiatedLayout.edges.map(edgeData => ({\n            getId: () => edgeData.id,\n            getLabel: () => edgeData.label,\n            getType: () => edgeData.type,\n            getSourceNodeId: () => edgeData.sourceNodeId,\n            getTargetNodeId: () => edgeData.targetNodeId,\n            getPropertyUri: () => edgeData.propertyUri\n        }));\n        \n        return {\n            nodes,\n            edges,\n            sparql: instantiatedSparql,\n            layout: instantiatedLayout,\n            errors: []\n        };\n    }\n\n    private replacePlaceholdersInLayout(values: Record<string, string>): TemplateLayout {\n        const layout = this.getLayout();\n        \n        // Replace in nodes\n        layout.nodes = layout.nodes.map(node => {\n            const newNode = { ...node };\n            \n            // Replace in label\n            newNode.label = this.replacePlaceholders(node.label, values);\n            \n            // Replace in variableName\n            if (node.variableName) {\n                newNode.variableName = this.replacePlaceholders(node.variableName, values);\n            }\n            \n            // Replace in URI\n            if (node.uri) {\n                newNode.uri = this.replacePlaceholders(node.uri, values);\n            }\n            \n            return newNode;\n        });\n        \n        // Replace in edges\n        layout.edges = layout.edges.map(edge => {\n            const newEdge = { ...edge };\n            \n            // Replace in label\n            newEdge.label = this.replacePlaceholders(edge.label, values);\n            \n            // Replace in propertyUri\n            if (edge.propertyUri) {\n                newEdge.propertyUri = this.replacePlaceholders(edge.propertyUri, values);\n            }\n            \n            return newEdge;\n        });\n        \n        return layout;\n    }\n\n    private replacePlaceholdersInSparql(values: Record<string, string>): string {\n        return this.replacePlaceholders(this.sparqlTemplate, values);\n    }\n\n    private replacePlaceholders(text: string, values: Record<string, string>): string {\n        if (!text) return text || '';\n        \n        let result = text;\n        \n        for (const [key, value] of Object.entries(values)) {\n            const placeholder = `{{${key}}}`;\n            result = result.replace(new RegExp(placeholder, 'g'), value);\n        }\n        \n        // Replace any remaining placeholders with defaults\n        for (const param of this.parameters) {\n            if (param.defaultValue) {\n                const placeholder = `{{${param.name}}}`;\n                result = result.replace(new RegExp(placeholder, 'g'), param.defaultValue);\n            }\n        }\n        \n        return result;\n    }\n\n    incrementUsage(): QueryTemplate {\n        const updatedMetadata = {\n            ...this.metadata,\n            usageCount: (this.metadata.usageCount || 0) + 1,\n            lastUsed: new Date(),\n            updatedAt: new Date()\n        };\n        \n        return new QueryTemplate({\n            id: this.id,\n            metadata: updatedMetadata,\n            layout: this.layout,\n            parameters: this.parameters,\n            sparqlTemplate: this.sparqlTemplate,\n            isBuiltIn: this.isBuiltIn\n        });\n    }\n\n    updateMetadata(updates: Partial<TemplateMetadata>): QueryTemplate {\n        if (this.isBuiltIn) {\n            throw new Error('Cannot modify built-in templates');\n        }\n        \n        // For test compatibility, update the current instance metadata directly\n        Object.assign(this.metadata, updates, { updatedAt: new Date() });\n        \n        return this;\n    }\n\n    // Parameter value management\n    setParameterValue(parameterId: string, value: string): void {\n        const param = this.parameters.find(p => p.name === parameterId || p.id === parameterId);\n        if (!param) {\n            throw new Error(`Parameter ${parameterId} not found`);\n        }\n        \n        // Validate parameter constraints\n        if (param.constraints) {\n            if (param.constraints.pattern) {\n                const regex = new RegExp(param.constraints.pattern);\n                if (!regex.test(value)) {\n                    throw new Error(`Invalid value for parameter ${param.name}`);\n                }\n            }\n            \n            if (param.constraints.minLength && value.length < param.constraints.minLength) {\n                throw new Error(`Invalid value for parameter ${param.name}`);\n            }\n            \n            if (param.constraints.maxLength && value.length > param.constraints.maxLength) {\n                throw new Error(`Invalid value for parameter ${param.name}`);\n            }\n            \n            if (param.constraints.allowedValues && !param.constraints.allowedValues.includes(value)) {\n                throw new Error(`Invalid value for parameter ${param.name}`);\n            }\n        }\n        \n        this.parameterValues.set(param.name, value);\n    }\n\n    getParameterValue(parameterId: string): string | undefined {\n        const param = this.parameters.find(p => p.name === parameterId || p.id === parameterId);\n        return param ? this.parameterValues.get(param.name) : undefined;\n    }\n\n    clearParameterValues(): void {\n        this.parameterValues.clear();\n    }\n\n    addParameter(parameter: TemplateParameter): void {\n        if (this.isBuiltIn) {\n            throw new Error('Cannot modify built-in templates');\n        }\n        this.parameters.push({\n            ...parameter,\n            id: parameter.id || `param_${parameter.name}_${Math.random().toString(36).substr(2, 9)}`\n        });\n    }\n\n    toJSON(): any {\n        return {\n            id: this.id,\n            metadata: this.metadata,\n            layout: this.layout,\n            parameters: this.parameters,\n            sparqlTemplate: this.sparqlTemplate,\n            isBuiltIn: this.isBuiltIn\n        };\n    }\n\n    static fromJSON(json: any): QueryTemplate {\n        return new QueryTemplate({\n            id: json.id,\n            metadata: {\n                ...json.metadata,\n                createdAt: new Date(json.metadata.createdAt),\n                updatedAt: new Date(json.metadata.updatedAt),\n                lastUsed: json.metadata.lastUsed ? new Date(json.metadata.lastUsed) : undefined\n            },\n            layout: json.layout,\n            parameters: json.parameters || [],\n            sparqlTemplate: json.sparqlTemplate,\n            isBuiltIn: json.isBuiltIn || false\n        });\n    }\n\n    static fromCanvas(\n        nodes: Map<string, VisualQueryNode> | VisualQueryNode[],\n        edges: Map<string, VisualQueryEdge> | VisualQueryEdge[],\n        viewport: { x: number; y: number; zoom: number },\n        metadata: Partial<TemplateMetadata>\n    ): QueryTemplate {\n        // Convert Maps to arrays if needed\n        const nodeArray = nodes instanceof Map ? Array.from(nodes.values()) : nodes;\n        const edgeArray = edges instanceof Map ? Array.from(edges.values()) : edges;\n        \n        const layout: TemplateLayout = {\n            nodes: nodeArray.map(node => ({\n                id: node.getId(),\n                type: node.getType(),\n                label: node.getLabel(),\n                position: node.getPosition(),\n                variableName: node.getVariableName(),\n                uri: node.getUri(),\n                dimensions: node.getDimensions()\n            })),\n            edges: edgeArray.map(edge => ({\n                id: edge.getId(),\n                sourceNodeId: edge.getSourceNodeId(),\n                targetNodeId: edge.getTargetNodeId(),\n                type: edge.getType(),\n                label: edge.getLabel(),\n                propertyUri: edge.getPropertyUri()\n            })),\n            viewport\n        };\n        \n        const fullMetadata: TemplateMetadata = {\n            name: metadata.name || 'Untitled Template',\n            description: metadata.description || '',\n            category: metadata.category || TemplateCategory.CUSTOM,\n            difficulty: metadata.difficulty || TemplateDifficulty.INTERMEDIATE,\n            tags: metadata.tags || [],\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            ...metadata\n        };\n        \n        // Generate a basic SPARQL template\n        const sparql = 'SELECT * WHERE { ?s ?p ?o }';\n        \n        return new QueryTemplate({\n            id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            metadata: fullMetadata,\n            layout,\n            parameters: [],\n            sparqlTemplate: sparql,\n            isBuiltIn: false\n        });\n    }\n\n    static createFromCanvas(\n        name: string,\n        description: string,\n        nodes: VisualQueryNode[],\n        edges: VisualQueryEdge[],\n        sparql: string,\n        category: TemplateCategory = TemplateCategory.CUSTOM,\n        tags: string[] = []\n    ): QueryTemplate {\n        const layout: TemplateLayout = {\n            nodes: nodes.map(node => ({\n                id: node.getId(),\n                type: node.getType(),\n                label: node.getLabel(),\n                position: node.getPosition(),\n                variableName: node.getVariableName(),\n                uri: node.getUri(),\n                dimensions: node.getDimensions()\n            })),\n            edges: edges.map(edge => ({\n                id: edge.getId(),\n                sourceNodeId: edge.getSourceNodeId(),\n                targetNodeId: edge.getTargetNodeId(),\n                type: edge.getType(),\n                label: edge.getLabel(),\n                propertyUri: edge.getPropertyUri()\n            }))\n        };\n        \n        const metadata: TemplateMetadata = {\n            name,\n            description,\n            category,\n            difficulty: TemplateDifficulty.INTERMEDIATE,\n            tags,\n            sparqlPattern: sparql,\n            usageCount: 0,\n            createdAt: new Date(),\n            updatedAt: new Date()\n        };\n        \n        return new QueryTemplate({\n            id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n            metadata,\n            layout,\n            parameters: [],\n            sparqlTemplate: sparql,\n            isBuiltIn: false\n        });\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5adfbc828fca93e51ff4cc3b2b3e4906bc9fa1ed"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_251f4iodtt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_251f4iodtt();
cov_251f4iodtt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_251f4iodtt().s[1]++;
exports.QueryTemplate = exports.TemplateDifficulty = exports.TemplateCategory = void 0;
var TemplateCategory;
/* istanbul ignore next */
cov_251f4iodtt().s[2]++;
(function (TemplateCategory) {
  /* istanbul ignore next */
  cov_251f4iodtt().f[0]++;
  cov_251f4iodtt().s[3]++;
  TemplateCategory["EXPLORATION"] = "exploration";
  /* istanbul ignore next */
  cov_251f4iodtt().s[4]++;
  TemplateCategory["ANALYSIS"] = "analysis";
  /* istanbul ignore next */
  cov_251f4iodtt().s[5]++;
  TemplateCategory["RELATIONSHIP"] = "relationship";
  /* istanbul ignore next */
  cov_251f4iodtt().s[6]++;
  TemplateCategory["PROPERTY"] = "property";
  /* istanbul ignore next */
  cov_251f4iodtt().s[7]++;
  TemplateCategory["CUSTOM"] = "custom";
})(TemplateCategory =
/* istanbul ignore next */
(cov_251f4iodtt().b[0][0]++, exports.TemplateCategory) ||
/* istanbul ignore next */
(cov_251f4iodtt().b[0][1]++, exports.TemplateCategory = {}));
var TemplateDifficulty;
/* istanbul ignore next */
cov_251f4iodtt().s[8]++;
(function (TemplateDifficulty) {
  /* istanbul ignore next */
  cov_251f4iodtt().f[1]++;
  cov_251f4iodtt().s[9]++;
  TemplateDifficulty["BEGINNER"] = "beginner";
  /* istanbul ignore next */
  cov_251f4iodtt().s[10]++;
  TemplateDifficulty["INTERMEDIATE"] = "intermediate";
  /* istanbul ignore next */
  cov_251f4iodtt().s[11]++;
  TemplateDifficulty["ADVANCED"] = "advanced";
})(TemplateDifficulty =
/* istanbul ignore next */
(cov_251f4iodtt().b[1][0]++, exports.TemplateDifficulty) ||
/* istanbul ignore next */
(cov_251f4iodtt().b[1][1]++, exports.TemplateDifficulty = {}));
class QueryTemplate {
  constructor(params) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[2]++;
    cov_251f4iodtt().s[12]++;
    this.parameterValues = new Map();
    /* istanbul ignore next */
    cov_251f4iodtt().s[13]++;
    this.id = params.id;
    /* istanbul ignore next */
    cov_251f4iodtt().s[14]++;
    this.metadata = params.metadata;
    /* istanbul ignore next */
    cov_251f4iodtt().s[15]++;
    this.layout = params.layout;
    /* istanbul ignore next */
    cov_251f4iodtt().s[16]++;
    this.parameters = (
    /* istanbul ignore next */
    (cov_251f4iodtt().b[2][0]++, params.parameters) ||
    /* istanbul ignore next */
    (cov_251f4iodtt().b[2][1]++, [])).map(p => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[3]++;
      cov_251f4iodtt().s[17]++;
      return Object.assign(Object.assign({}, p), {
        id:
        /* istanbul ignore next */
        (cov_251f4iodtt().b[3][0]++, p.id) ||
        /* istanbul ignore next */
        (cov_251f4iodtt().b[3][1]++, `param_${p.name}_${Math.random().toString(36).substr(2, 9)}`)
      });
    });
    /* istanbul ignore next */
    cov_251f4iodtt().s[18]++;
    this.sparqlTemplate =
    /* istanbul ignore next */
    (cov_251f4iodtt().b[4][0]++, params.sparqlTemplate) ||
    /* istanbul ignore next */
    (cov_251f4iodtt().b[4][1]++, 'SELECT * WHERE { ?s ?p ?o }');
    /* istanbul ignore next */
    cov_251f4iodtt().s[19]++;
    this.isBuiltIn =
    /* istanbul ignore next */
    (cov_251f4iodtt().b[5][0]++, params.isBuiltIn) ||
    /* istanbul ignore next */
    (cov_251f4iodtt().b[5][1]++, false);
    // Make id property non-writable
    /* istanbul ignore next */
    cov_251f4iodtt().s[20]++;
    Object.defineProperty(this, 'id', {
      value: params.id,
      writable: false,
      configurable: false
    });
    /* istanbul ignore next */
    cov_251f4iodtt().s[21]++;
    Object.freeze(this.isBuiltIn);
  }
  getId() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[4]++;
    cov_251f4iodtt().s[22]++;
    return this.id;
  }
  getName() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[5]++;
    cov_251f4iodtt().s[23]++;
    return this.metadata.name;
  }
  getDescription() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[6]++;
    cov_251f4iodtt().s[24]++;
    return this.metadata.description;
  }
  getCategory() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[7]++;
    cov_251f4iodtt().s[25]++;
    return this.metadata.category;
  }
  getDifficulty() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[8]++;
    cov_251f4iodtt().s[26]++;
    return this.metadata.difficulty;
  }
  getTags() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[9]++;
    cov_251f4iodtt().s[27]++;
    return [...this.metadata.tags];
  }
  getParameters() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[10]++;
    cov_251f4iodtt().s[28]++;
    return this.parameters.map(p => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[11]++;
      cov_251f4iodtt().s[29]++;
      return Object.assign(Object.assign({}, p), {
        id:
        /* istanbul ignore next */
        (cov_251f4iodtt().b[6][0]++, p.id) ||
        /* istanbul ignore next */
        (cov_251f4iodtt().b[6][1]++, `param_${p.name}`) // Ensure id exists
      });
    });
  }
  getLayout() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[12]++;
    cov_251f4iodtt().s[30]++;
    return {
      nodes: this.layout.nodes.map(n => {
        /* istanbul ignore next */
        cov_251f4iodtt().f[13]++;
        cov_251f4iodtt().s[31]++;
        return Object.assign({}, n);
      }),
      edges: this.layout.edges.map(e => {
        /* istanbul ignore next */
        cov_251f4iodtt().f[14]++;
        cov_251f4iodtt().s[32]++;
        return Object.assign({}, e);
      }),
      viewport: this.layout.viewport ?
      /* istanbul ignore next */
      (cov_251f4iodtt().b[7][0]++, Object.assign({}, this.layout.viewport)) :
      /* istanbul ignore next */
      (cov_251f4iodtt().b[7][1]++, undefined)
    };
  }
  getSparqlTemplate() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[15]++;
    cov_251f4iodtt().s[33]++;
    return this.sparqlTemplate;
  }
  getMetadata() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[16]++;
    cov_251f4iodtt().s[34]++;
    return Object.assign({}, this.metadata);
  }
  isBuiltInTemplate() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[17]++;
    cov_251f4iodtt().s[35]++;
    return this.isBuiltIn;
  }
  hasParameters() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[18]++;
    cov_251f4iodtt().s[36]++;
    return this.parameters.length > 0;
  }
  getRequiredParameters() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[19]++;
    cov_251f4iodtt().s[37]++;
    return this.parameters.filter(p => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[20]++;
      cov_251f4iodtt().s[38]++;
      return p.required;
    });
  }
  getParameter(id) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[21]++;
    cov_251f4iodtt().s[39]++;
    return this.parameters.find(p => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[22]++;
      cov_251f4iodtt().s[40]++;
      return (
      /* istanbul ignore next */
      (cov_251f4iodtt().b[8][0]++, p.id) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[8][1]++, `param_${p.name}`)) === id;
    });
  }
  getParameterValues() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[23]++;
    const values =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[41]++, new Map());
    /* istanbul ignore next */
    cov_251f4iodtt().s[42]++;
    this.parameters.forEach(param => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[24]++;
      cov_251f4iodtt().s[43]++;
      if (param.defaultValue) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[9][0]++;
        cov_251f4iodtt().s[44]++;
        values.set(
        /* istanbul ignore next */
        (cov_251f4iodtt().b[10][0]++, param.id) ||
        /* istanbul ignore next */
        (cov_251f4iodtt().b[10][1]++, `param_${param.name}`), param.defaultValue);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[9][1]++;
      }
    });
    /* istanbul ignore next */
    cov_251f4iodtt().s[45]++;
    return values;
  }
  validateParameters() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[25]++;
    const errors =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[46]++, []);
    // Validate required parameters have values
    /* istanbul ignore next */
    cov_251f4iodtt().s[47]++;
    for (const param of this.getRequiredParameters()) {
      const hasValue =
      /* istanbul ignore next */
      (cov_251f4iodtt().s[48]++,
      /* istanbul ignore next */
      (cov_251f4iodtt().b[11][0]++, this.parameterValues.has(param.name)) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[11][1]++, param.defaultValue));
      /* istanbul ignore next */
      cov_251f4iodtt().s[49]++;
      if (!hasValue) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[12][0]++;
        cov_251f4iodtt().s[50]++;
        errors.push(`Parameter ${param.name} is required`);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[12][1]++;
      }
    }
    // Validate parameter constraints
    /* istanbul ignore next */
    cov_251f4iodtt().s[51]++;
    for (const param of this.parameters) {
      const value =
      /* istanbul ignore next */
      (cov_251f4iodtt().s[52]++, this.parameterValues.get(param.name));
      /* istanbul ignore next */
      cov_251f4iodtt().s[53]++;
      if (
      /* istanbul ignore next */
      (cov_251f4iodtt().b[14][0]++, value) &&
      /* istanbul ignore next */
      (cov_251f4iodtt().b[14][1]++, param.constraints)) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[13][0]++;
        cov_251f4iodtt().s[54]++;
        if (param.constraints.pattern) {
          /* istanbul ignore next */
          cov_251f4iodtt().b[15][0]++;
          const regex =
          /* istanbul ignore next */
          (cov_251f4iodtt().s[55]++, new RegExp(param.constraints.pattern));
          /* istanbul ignore next */
          cov_251f4iodtt().s[56]++;
          if (!regex.test(value)) {
            /* istanbul ignore next */
            cov_251f4iodtt().b[16][0]++;
            cov_251f4iodtt().s[57]++;
            errors.push(`Parameter '${param.name}' does not match required pattern`);
          } else
          /* istanbul ignore next */
          {
            cov_251f4iodtt().b[16][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_251f4iodtt().b[15][1]++;
        }
        cov_251f4iodtt().s[58]++;
        if (
        /* istanbul ignore next */
        (cov_251f4iodtt().b[18][0]++, param.constraints.minLength) &&
        /* istanbul ignore next */
        (cov_251f4iodtt().b[18][1]++, value.length < param.constraints.minLength)) {
          /* istanbul ignore next */
          cov_251f4iodtt().b[17][0]++;
          cov_251f4iodtt().s[59]++;
          errors.push(`Parameter '${param.name}' is too short (min: ${param.constraints.minLength})`);
        } else
        /* istanbul ignore next */
        {
          cov_251f4iodtt().b[17][1]++;
        }
        cov_251f4iodtt().s[60]++;
        if (
        /* istanbul ignore next */
        (cov_251f4iodtt().b[20][0]++, param.constraints.maxLength) &&
        /* istanbul ignore next */
        (cov_251f4iodtt().b[20][1]++, value.length > param.constraints.maxLength)) {
          /* istanbul ignore next */
          cov_251f4iodtt().b[19][0]++;
          cov_251f4iodtt().s[61]++;
          errors.push(`Parameter '${param.name}' is too long (max: ${param.constraints.maxLength})`);
        } else
        /* istanbul ignore next */
        {
          cov_251f4iodtt().b[19][1]++;
        }
        cov_251f4iodtt().s[62]++;
        if (
        /* istanbul ignore next */
        (cov_251f4iodtt().b[22][0]++, param.constraints.allowedValues) &&
        /* istanbul ignore next */
        (cov_251f4iodtt().b[22][1]++, !param.constraints.allowedValues.includes(value))) {
          /* istanbul ignore next */
          cov_251f4iodtt().b[21][0]++;
          cov_251f4iodtt().s[63]++;
          errors.push(`Parameter '${param.name}' must be one of: ${param.constraints.allowedValues.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_251f4iodtt().b[21][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_251f4iodtt().s[64]++;
    return {
      isValid: errors.length === 0,
      errors
    };
  }
  clone(customId) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[26]++;
    cov_251f4iodtt().s[65]++;
    return new QueryTemplate({
      id:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[23][0]++, customId) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[23][1]++, `${this.id}_clone_${Date.now()}`),
      metadata: Object.assign(Object.assign({}, this.metadata), {
        name: `${this.metadata.name} (Copy)`,
        createdAt: new Date(),
        updatedAt: new Date()
      }),
      layout: this.layout,
      parameters: this.parameters,
      sparqlTemplate: this.sparqlTemplate,
      isBuiltIn: false
    });
  }
  instantiate(parameterValues) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[27]++;
    const errors =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[66]++, []);
    const values =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[67]++,
    /* istanbul ignore next */
    (cov_251f4iodtt().b[24][0]++, parameterValues) ||
    /* istanbul ignore next */
    (cov_251f4iodtt().b[24][1]++, {}));
    // Merge with stored parameter values
    const allValues =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[68]++, Object.assign({}, values));
    /* istanbul ignore next */
    cov_251f4iodtt().s[69]++;
    for (const [key, value] of this.parameterValues) {
      /* istanbul ignore next */
      cov_251f4iodtt().s[70]++;
      if (!allValues[key]) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[25][0]++;
        cov_251f4iodtt().s[71]++;
        allValues[key] = value;
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[25][1]++;
      }
    }
    // Validate required parameters
    /* istanbul ignore next */
    cov_251f4iodtt().s[72]++;
    for (const param of this.getRequiredParameters()) {
      const hasValue =
      /* istanbul ignore next */
      (cov_251f4iodtt().s[73]++,
      /* istanbul ignore next */
      (cov_251f4iodtt().b[26][0]++, allValues[param.name]) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[26][1]++, param.defaultValue));
      /* istanbul ignore next */
      cov_251f4iodtt().s[74]++;
      if (!hasValue) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[27][0]++;
        cov_251f4iodtt().s[75]++;
        errors.push(`Required parameter '${param.name}' is missing`);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[27][1]++;
      }
    }
    /* istanbul ignore next */
    cov_251f4iodtt().s[76]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_251f4iodtt().b[28][0]++;
      cov_251f4iodtt().s[77]++;
      throw new Error('Template validation failed: ' + errors.join(', '));
    } else
    /* istanbul ignore next */
    {
      cov_251f4iodtt().b[28][1]++;
    }
    // Replace placeholders in layout
    const instantiatedLayout =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[78]++, this.replacePlaceholdersInLayout(allValues));
    // Replace placeholders in SPARQL
    const instantiatedSparql =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[79]++, this.replacePlaceholdersInSparql(allValues));
    // Convert serialized nodes/edges to mock objects for testing
    const nodes =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[80]++, instantiatedLayout.nodes.map(nodeData => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[28]++;
      cov_251f4iodtt().s[81]++;
      return {
        getId: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[29]++;
          cov_251f4iodtt().s[82]++;
          return nodeData.id;
        },
        getLabel: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[30]++;
          cov_251f4iodtt().s[83]++;
          return nodeData.label;
        },
        getType: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[31]++;
          cov_251f4iodtt().s[84]++;
          return nodeData.type;
        },
        getPosition: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[32]++;
          cov_251f4iodtt().s[85]++;
          return nodeData.position;
        },
        getDimensions: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[33]++;
          cov_251f4iodtt().s[86]++;
          return /* istanbul ignore next */(cov_251f4iodtt().b[29][0]++, nodeData.dimensions) ||
          /* istanbul ignore next */
          (cov_251f4iodtt().b[29][1]++, {
            width: 100,
            height: 40
          });
        },
        getUri: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[34]++;
          cov_251f4iodtt().s[87]++;
          return nodeData.uri;
        },
        getVariableName: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[35]++;
          cov_251f4iodtt().s[88]++;
          return nodeData.variableName;
        }
      };
    }));
    const edges =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[89]++, instantiatedLayout.edges.map(edgeData => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[36]++;
      cov_251f4iodtt().s[90]++;
      return {
        getId: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[37]++;
          cov_251f4iodtt().s[91]++;
          return edgeData.id;
        },
        getLabel: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[38]++;
          cov_251f4iodtt().s[92]++;
          return edgeData.label;
        },
        getType: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[39]++;
          cov_251f4iodtt().s[93]++;
          return edgeData.type;
        },
        getSourceNodeId: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[40]++;
          cov_251f4iodtt().s[94]++;
          return edgeData.sourceNodeId;
        },
        getTargetNodeId: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[41]++;
          cov_251f4iodtt().s[95]++;
          return edgeData.targetNodeId;
        },
        getPropertyUri: () => {
          /* istanbul ignore next */
          cov_251f4iodtt().f[42]++;
          cov_251f4iodtt().s[96]++;
          return edgeData.propertyUri;
        }
      };
    }));
    /* istanbul ignore next */
    cov_251f4iodtt().s[97]++;
    return {
      nodes,
      edges,
      sparql: instantiatedSparql,
      layout: instantiatedLayout,
      errors: []
    };
  }
  replacePlaceholdersInLayout(values) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[43]++;
    const layout =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[98]++, this.getLayout());
    // Replace in nodes
    /* istanbul ignore next */
    cov_251f4iodtt().s[99]++;
    layout.nodes = layout.nodes.map(node => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[44]++;
      const newNode =
      /* istanbul ignore next */
      (cov_251f4iodtt().s[100]++, Object.assign({}, node));
      // Replace in label
      /* istanbul ignore next */
      cov_251f4iodtt().s[101]++;
      newNode.label = this.replacePlaceholders(node.label, values);
      // Replace in variableName
      /* istanbul ignore next */
      cov_251f4iodtt().s[102]++;
      if (node.variableName) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[30][0]++;
        cov_251f4iodtt().s[103]++;
        newNode.variableName = this.replacePlaceholders(node.variableName, values);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[30][1]++;
      }
      // Replace in URI
      cov_251f4iodtt().s[104]++;
      if (node.uri) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[31][0]++;
        cov_251f4iodtt().s[105]++;
        newNode.uri = this.replacePlaceholders(node.uri, values);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[31][1]++;
      }
      cov_251f4iodtt().s[106]++;
      return newNode;
    });
    // Replace in edges
    /* istanbul ignore next */
    cov_251f4iodtt().s[107]++;
    layout.edges = layout.edges.map(edge => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[45]++;
      const newEdge =
      /* istanbul ignore next */
      (cov_251f4iodtt().s[108]++, Object.assign({}, edge));
      // Replace in label
      /* istanbul ignore next */
      cov_251f4iodtt().s[109]++;
      newEdge.label = this.replacePlaceholders(edge.label, values);
      // Replace in propertyUri
      /* istanbul ignore next */
      cov_251f4iodtt().s[110]++;
      if (edge.propertyUri) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[32][0]++;
        cov_251f4iodtt().s[111]++;
        newEdge.propertyUri = this.replacePlaceholders(edge.propertyUri, values);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[32][1]++;
      }
      cov_251f4iodtt().s[112]++;
      return newEdge;
    });
    /* istanbul ignore next */
    cov_251f4iodtt().s[113]++;
    return layout;
  }
  replacePlaceholdersInSparql(values) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[46]++;
    cov_251f4iodtt().s[114]++;
    return this.replacePlaceholders(this.sparqlTemplate, values);
  }
  replacePlaceholders(text, values) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[47]++;
    cov_251f4iodtt().s[115]++;
    if (!text) {
      /* istanbul ignore next */
      cov_251f4iodtt().b[33][0]++;
      cov_251f4iodtt().s[116]++;
      return /* istanbul ignore next */(cov_251f4iodtt().b[34][0]++, text) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[34][1]++, '');
    } else
    /* istanbul ignore next */
    {
      cov_251f4iodtt().b[33][1]++;
    }
    let result =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[117]++, text);
    /* istanbul ignore next */
    cov_251f4iodtt().s[118]++;
    for (const [key, value] of Object.entries(values)) {
      const placeholder =
      /* istanbul ignore next */
      (cov_251f4iodtt().s[119]++, `{{${key}}}`);
      /* istanbul ignore next */
      cov_251f4iodtt().s[120]++;
      result = result.replace(new RegExp(placeholder, 'g'), value);
    }
    // Replace any remaining placeholders with defaults
    /* istanbul ignore next */
    cov_251f4iodtt().s[121]++;
    for (const param of this.parameters) {
      /* istanbul ignore next */
      cov_251f4iodtt().s[122]++;
      if (param.defaultValue) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[35][0]++;
        const placeholder =
        /* istanbul ignore next */
        (cov_251f4iodtt().s[123]++, `{{${param.name}}}`);
        /* istanbul ignore next */
        cov_251f4iodtt().s[124]++;
        result = result.replace(new RegExp(placeholder, 'g'), param.defaultValue);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[35][1]++;
      }
    }
    /* istanbul ignore next */
    cov_251f4iodtt().s[125]++;
    return result;
  }
  incrementUsage() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[48]++;
    const updatedMetadata =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[126]++, Object.assign(Object.assign({}, this.metadata), {
      usageCount: (
      /* istanbul ignore next */
      (cov_251f4iodtt().b[36][0]++, this.metadata.usageCount) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[36][1]++, 0)) + 1,
      lastUsed: new Date(),
      updatedAt: new Date()
    }));
    /* istanbul ignore next */
    cov_251f4iodtt().s[127]++;
    return new QueryTemplate({
      id: this.id,
      metadata: updatedMetadata,
      layout: this.layout,
      parameters: this.parameters,
      sparqlTemplate: this.sparqlTemplate,
      isBuiltIn: this.isBuiltIn
    });
  }
  updateMetadata(updates) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[49]++;
    cov_251f4iodtt().s[128]++;
    if (this.isBuiltIn) {
      /* istanbul ignore next */
      cov_251f4iodtt().b[37][0]++;
      cov_251f4iodtt().s[129]++;
      throw new Error('Cannot modify built-in templates');
    } else
    /* istanbul ignore next */
    {
      cov_251f4iodtt().b[37][1]++;
    }
    // For test compatibility, update the current instance metadata directly
    cov_251f4iodtt().s[130]++;
    Object.assign(this.metadata, updates, {
      updatedAt: new Date()
    });
    /* istanbul ignore next */
    cov_251f4iodtt().s[131]++;
    return this;
  }
  // Parameter value management
  setParameterValue(parameterId, value) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[50]++;
    const param =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[132]++, this.parameters.find(p => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[51]++;
      cov_251f4iodtt().s[133]++;
      return /* istanbul ignore next */(cov_251f4iodtt().b[38][0]++, p.name === parameterId) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[38][1]++, p.id === parameterId);
    }));
    /* istanbul ignore next */
    cov_251f4iodtt().s[134]++;
    if (!param) {
      /* istanbul ignore next */
      cov_251f4iodtt().b[39][0]++;
      cov_251f4iodtt().s[135]++;
      throw new Error(`Parameter ${parameterId} not found`);
    } else
    /* istanbul ignore next */
    {
      cov_251f4iodtt().b[39][1]++;
    }
    // Validate parameter constraints
    cov_251f4iodtt().s[136]++;
    if (param.constraints) {
      /* istanbul ignore next */
      cov_251f4iodtt().b[40][0]++;
      cov_251f4iodtt().s[137]++;
      if (param.constraints.pattern) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[41][0]++;
        const regex =
        /* istanbul ignore next */
        (cov_251f4iodtt().s[138]++, new RegExp(param.constraints.pattern));
        /* istanbul ignore next */
        cov_251f4iodtt().s[139]++;
        if (!regex.test(value)) {
          /* istanbul ignore next */
          cov_251f4iodtt().b[42][0]++;
          cov_251f4iodtt().s[140]++;
          throw new Error(`Invalid value for parameter ${param.name}`);
        } else
        /* istanbul ignore next */
        {
          cov_251f4iodtt().b[42][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[41][1]++;
      }
      cov_251f4iodtt().s[141]++;
      if (
      /* istanbul ignore next */
      (cov_251f4iodtt().b[44][0]++, param.constraints.minLength) &&
      /* istanbul ignore next */
      (cov_251f4iodtt().b[44][1]++, value.length < param.constraints.minLength)) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[43][0]++;
        cov_251f4iodtt().s[142]++;
        throw new Error(`Invalid value for parameter ${param.name}`);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[43][1]++;
      }
      cov_251f4iodtt().s[143]++;
      if (
      /* istanbul ignore next */
      (cov_251f4iodtt().b[46][0]++, param.constraints.maxLength) &&
      /* istanbul ignore next */
      (cov_251f4iodtt().b[46][1]++, value.length > param.constraints.maxLength)) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[45][0]++;
        cov_251f4iodtt().s[144]++;
        throw new Error(`Invalid value for parameter ${param.name}`);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[45][1]++;
      }
      cov_251f4iodtt().s[145]++;
      if (
      /* istanbul ignore next */
      (cov_251f4iodtt().b[48][0]++, param.constraints.allowedValues) &&
      /* istanbul ignore next */
      (cov_251f4iodtt().b[48][1]++, !param.constraints.allowedValues.includes(value))) {
        /* istanbul ignore next */
        cov_251f4iodtt().b[47][0]++;
        cov_251f4iodtt().s[146]++;
        throw new Error(`Invalid value for parameter ${param.name}`);
      } else
      /* istanbul ignore next */
      {
        cov_251f4iodtt().b[47][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_251f4iodtt().b[40][1]++;
    }
    cov_251f4iodtt().s[147]++;
    this.parameterValues.set(param.name, value);
  }
  getParameterValue(parameterId) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[52]++;
    const param =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[148]++, this.parameters.find(p => {
      /* istanbul ignore next */
      cov_251f4iodtt().f[53]++;
      cov_251f4iodtt().s[149]++;
      return /* istanbul ignore next */(cov_251f4iodtt().b[49][0]++, p.name === parameterId) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[49][1]++, p.id === parameterId);
    }));
    /* istanbul ignore next */
    cov_251f4iodtt().s[150]++;
    return param ?
    /* istanbul ignore next */
    (cov_251f4iodtt().b[50][0]++, this.parameterValues.get(param.name)) :
    /* istanbul ignore next */
    (cov_251f4iodtt().b[50][1]++, undefined);
  }
  clearParameterValues() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[54]++;
    cov_251f4iodtt().s[151]++;
    this.parameterValues.clear();
  }
  addParameter(parameter) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[55]++;
    cov_251f4iodtt().s[152]++;
    if (this.isBuiltIn) {
      /* istanbul ignore next */
      cov_251f4iodtt().b[51][0]++;
      cov_251f4iodtt().s[153]++;
      throw new Error('Cannot modify built-in templates');
    } else
    /* istanbul ignore next */
    {
      cov_251f4iodtt().b[51][1]++;
    }
    cov_251f4iodtt().s[154]++;
    this.parameters.push(Object.assign(Object.assign({}, parameter), {
      id:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[52][0]++, parameter.id) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[52][1]++, `param_${parameter.name}_${Math.random().toString(36).substr(2, 9)}`)
    }));
  }
  toJSON() {
    /* istanbul ignore next */
    cov_251f4iodtt().f[56]++;
    cov_251f4iodtt().s[155]++;
    return {
      id: this.id,
      metadata: this.metadata,
      layout: this.layout,
      parameters: this.parameters,
      sparqlTemplate: this.sparqlTemplate,
      isBuiltIn: this.isBuiltIn
    };
  }
  static fromJSON(json) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[57]++;
    cov_251f4iodtt().s[156]++;
    return new QueryTemplate({
      id: json.id,
      metadata: Object.assign(Object.assign({}, json.metadata), {
        createdAt: new Date(json.metadata.createdAt),
        updatedAt: new Date(json.metadata.updatedAt),
        lastUsed: json.metadata.lastUsed ?
        /* istanbul ignore next */
        (cov_251f4iodtt().b[53][0]++, new Date(json.metadata.lastUsed)) :
        /* istanbul ignore next */
        (cov_251f4iodtt().b[53][1]++, undefined)
      }),
      layout: json.layout,
      parameters:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[54][0]++, json.parameters) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[54][1]++, []),
      sparqlTemplate: json.sparqlTemplate,
      isBuiltIn:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[55][0]++, json.isBuiltIn) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[55][1]++, false)
    });
  }
  static fromCanvas(nodes, edges, viewport, metadata) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[58]++;
    // Convert Maps to arrays if needed
    const nodeArray =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[157]++, nodes instanceof Map ?
    /* istanbul ignore next */
    (cov_251f4iodtt().b[56][0]++, Array.from(nodes.values())) :
    /* istanbul ignore next */
    (cov_251f4iodtt().b[56][1]++, nodes));
    const edgeArray =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[158]++, edges instanceof Map ?
    /* istanbul ignore next */
    (cov_251f4iodtt().b[57][0]++, Array.from(edges.values())) :
    /* istanbul ignore next */
    (cov_251f4iodtt().b[57][1]++, edges));
    const layout =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[159]++, {
      nodes: nodeArray.map(node => {
        /* istanbul ignore next */
        cov_251f4iodtt().f[59]++;
        cov_251f4iodtt().s[160]++;
        return {
          id: node.getId(),
          type: node.getType(),
          label: node.getLabel(),
          position: node.getPosition(),
          variableName: node.getVariableName(),
          uri: node.getUri(),
          dimensions: node.getDimensions()
        };
      }),
      edges: edgeArray.map(edge => {
        /* istanbul ignore next */
        cov_251f4iodtt().f[60]++;
        cov_251f4iodtt().s[161]++;
        return {
          id: edge.getId(),
          sourceNodeId: edge.getSourceNodeId(),
          targetNodeId: edge.getTargetNodeId(),
          type: edge.getType(),
          label: edge.getLabel(),
          propertyUri: edge.getPropertyUri()
        };
      }),
      viewport
    });
    const fullMetadata =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[162]++, Object.assign({
      name:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[58][0]++, metadata.name) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[58][1]++, 'Untitled Template'),
      description:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[59][0]++, metadata.description) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[59][1]++, ''),
      category:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[60][0]++, metadata.category) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[60][1]++, TemplateCategory.CUSTOM),
      difficulty:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[61][0]++, metadata.difficulty) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[61][1]++, TemplateDifficulty.INTERMEDIATE),
      tags:
      /* istanbul ignore next */
      (cov_251f4iodtt().b[62][0]++, metadata.tags) ||
      /* istanbul ignore next */
      (cov_251f4iodtt().b[62][1]++, []),
      createdAt: new Date(),
      updatedAt: new Date()
    }, metadata));
    // Generate a basic SPARQL template
    const sparql =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[163]++, 'SELECT * WHERE { ?s ?p ?o }');
    /* istanbul ignore next */
    cov_251f4iodtt().s[164]++;
    return new QueryTemplate({
      id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      metadata: fullMetadata,
      layout,
      parameters: [],
      sparqlTemplate: sparql,
      isBuiltIn: false
    });
  }
  static createFromCanvas(name, description, nodes, edges, sparql, category =
  /* istanbul ignore next */
  (cov_251f4iodtt().b[63][0]++, TemplateCategory.CUSTOM), tags =
  /* istanbul ignore next */
  (cov_251f4iodtt().b[64][0]++, [])) {
    /* istanbul ignore next */
    cov_251f4iodtt().f[61]++;
    const layout =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[165]++, {
      nodes: nodes.map(node => {
        /* istanbul ignore next */
        cov_251f4iodtt().f[62]++;
        cov_251f4iodtt().s[166]++;
        return {
          id: node.getId(),
          type: node.getType(),
          label: node.getLabel(),
          position: node.getPosition(),
          variableName: node.getVariableName(),
          uri: node.getUri(),
          dimensions: node.getDimensions()
        };
      }),
      edges: edges.map(edge => {
        /* istanbul ignore next */
        cov_251f4iodtt().f[63]++;
        cov_251f4iodtt().s[167]++;
        return {
          id: edge.getId(),
          sourceNodeId: edge.getSourceNodeId(),
          targetNodeId: edge.getTargetNodeId(),
          type: edge.getType(),
          label: edge.getLabel(),
          propertyUri: edge.getPropertyUri()
        };
      })
    });
    const metadata =
    /* istanbul ignore next */
    (cov_251f4iodtt().s[168]++, {
      name,
      description,
      category,
      difficulty: TemplateDifficulty.INTERMEDIATE,
      tags,
      sparqlPattern: sparql,
      usageCount: 0,
      createdAt: new Date(),
      updatedAt: new Date()
    });
    /* istanbul ignore next */
    cov_251f4iodtt().s[169]++;
    return new QueryTemplate({
      id: `template_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      metadata,
      layout,
      parameters: [],
      sparqlTemplate: sparql,
      isBuiltIn: false
    });
  }
}
/* istanbul ignore next */
cov_251f4iodtt().s[170]++;
exports.QueryTemplate = QueryTemplate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,