{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/application/use-cases/ExecuteQueryBlockUseCase.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/application/use-cases/ExecuteQueryBlockUseCase.test.ts"],"sourcesContent":["import {\n  ExecuteQueryBlockUseCase,\n  ExecuteQueryBlockRequest,\n  ExecuteQueryBlockResponse,\n} from \"../../../../src/application/use-cases/ExecuteQueryBlockUseCase\";\nimport { QueryBlockConfig } from \"../../../../src/domain/entities/LayoutBlock\";\nimport { Result } from \"../../../../src/domain/core/Result\";\nimport { App, TFile, Vault, MetadataCache } from \"obsidian\";\n\n// Mock Obsidian components\nconst mockFiles: TFile[] = [];\n\nconst mockVault: jest.Mocked<Vault> = {\n  getFiles: jest.fn().mockReturnValue(mockFiles),\n  getMarkdownFiles: jest\n    .fn()\n    .mockReturnValue(mockFiles.filter((f) => f.extension === \"md\")),\n  getAbstractFileByPath: jest.fn(),\n  create: jest.fn(),\n  read: jest.fn(),\n  modify: jest.fn(),\n  delete: jest.fn(),\n  exists: jest.fn(),\n  on: jest.fn(),\n  off: jest.fn(),\n  adapter: {} as any,\n} as any;\n\nconst mockMetadataCache: jest.Mocked<MetadataCache> = {\n  getFileCache: jest.fn(),\n  getBacklinksForFile: jest.fn(),\n  getFrontmatterPropertyValue: jest.fn(),\n  on: jest.fn(),\n  off: jest.fn(),\n} as any;\n\nconst mockApp: jest.Mocked<App> = {\n  vault: mockVault,\n  metadataCache: mockMetadataCache,\n  workspace: {} as any,\n} as any;\n\ndescribe(\"ExecuteQueryBlockUseCase\", () => {\n  let useCase: ExecuteQueryBlockUseCase;\n  let testFiles: TFile[];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    useCase = new ExecuteQueryBlockUseCase(mockApp);\n\n    // Create test files\n    testFiles = [\n      // Project files\n      { path: \"project1.md\", basename: \"project1\", extension: \"md\" } as TFile,\n      { path: \"project2.md\", basename: \"project2\", extension: \"md\" } as TFile,\n      {\n        path: \"completed-project.md\",\n        basename: \"completed-project\",\n        extension: \"md\",\n      } as TFile,\n\n      // Task files\n      { path: \"task1.md\", basename: \"task1\", extension: \"md\" } as TFile,\n      { path: \"task2.md\", basename: \"task2\", extension: \"md\" } as TFile,\n      {\n        path: \"high-priority-task.md\",\n        basename: \"high-priority-task\",\n        extension: \"md\",\n      } as TFile,\n\n      // Note files\n      { path: \"note1.md\", basename: \"note1\", extension: \"md\" } as TFile,\n      { path: \"note2.md\", basename: \"note2\", extension: \"md\" } as TFile,\n\n      // Non-markdown files\n      { path: \"image.png\", basename: \"image\", extension: \"png\" } as TFile,\n      { path: \"document.pdf\", basename: \"document\", extension: \"pdf\" } as TFile,\n    ];\n\n    mockVault.getFiles.mockReturnValue(testFiles);\n\n    // Setup metadata cache responses\n    mockMetadataCache.getFileCache.mockImplementation((file: TFile) => {\n      const cacheMap = new Map([\n        [\n          \"project1.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"[[ems__Project]]\",\n              status: \"active\",\n              priority: \"high\",\n              title: \"Project 1\",\n              updatedAt: \"2024-01-15T10:00:00Z\",\n            },\n          },\n        ],\n        [\n          \"project2.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Project\",\n              status: \"active\",\n              priority: \"medium\",\n              title: \"Project 2\",\n              updatedAt: \"2024-01-14T10:00:00Z\",\n            },\n          },\n        ],\n        [\n          \"completed-project.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Project\",\n              status: \"completed\",\n              priority: \"low\",\n              title: \"Completed Project\",\n              updatedAt: \"2024-01-10T10:00:00Z\",\n            },\n          },\n        ],\n        [\n          \"task1.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Task\",\n              status: \"todo\",\n              priority: \"medium\",\n              project: \"[[project1]]\",\n              assignee: \"John Doe\",\n            },\n          },\n        ],\n        [\n          \"task2.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Task\",\n              status: \"done\",\n              priority: \"low\",\n              project: \"[[project2]]\",\n              assignee: \"Jane Smith\",\n            },\n          },\n        ],\n        [\n          \"high-priority-task.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Task\",\n              status: \"in-progress\",\n              priority: \"high\",\n              project: \"[[project1]]\",\n              assignee: \"Bob Johnson\",\n            },\n          },\n        ],\n        [\n          \"note1.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Note\",\n              tags: [\"research\", \"important\"],\n              related_to: [\"[[project1]]\"],\n            },\n          },\n        ],\n        [\n          \"note2.md\",\n          {\n            frontmatter: {\n              exo__Instance_class: \"ems__Note\",\n              tags: [\"meeting\"],\n              related_to: [\"[[project2]]\"],\n            },\n          },\n        ],\n        [\"image.png\", null],\n        [\"document.pdf\", { frontmatter: null }],\n      ]);\n\n      return cacheMap.get(file.path) || { frontmatter: null };\n    });\n  });\n\n  describe(\"Basic Query Execution\", () => {\n    it(\"should execute query and return all files when no filters are applied\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"SELECT * WHERE { ?s ?p ?o }\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(testFiles.length);\n      expect(response.totalCount).toBe(testFiles.length);\n      expect(response.executionTime).toBeGreaterThanOrEqual(0);\n    });\n\n    it(\"should measure execution time accurately\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list all\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const startTime = Date.now();\n      const result = await useCase.execute(request);\n      const endTime = Date.now();\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.executionTime).toBeGreaterThanOrEqual(0);\n      expect(response.executionTime).toBeLessThanOrEqual(\n        endTime - startTime + 10,\n      ); // Allow for small timing differences\n    });\n\n    it(\"should handle empty vault gracefully\", async () => {\n      mockVault.getFiles.mockReturnValue([]);\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list all\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0);\n      expect(response.totalCount).toBe(0);\n      expect(response.executionTime).toBeGreaterThanOrEqual(0);\n    });\n  });\n\n  describe(\"Class-based Filtering\", () => {\n    it(\"should filter by exact class name\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list projects\",\n          className: \"ems__Project\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // All project files\n      expect(\n        response.results.every((file) =>\n          [\"project1.md\", \"project2.md\", \"completed-project.md\"].includes(\n            file.path,\n          ),\n        ),\n      ).toBe(true);\n    });\n\n    it(\"should handle class names with wikilinks\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list projects\",\n          className: \"[[ems__Project]]\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3);\n    });\n\n    it(\"should handle missing class gracefully\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list unknown\",\n          className: \"unknown__Class\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0);\n      expect(response.totalCount).toBe(0);\n    });\n\n    it(\"should filter tasks by class\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list tasks\",\n          className: \"ems__Task\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // All task files\n      expect(\n        response.results.every((file) =>\n          [\"task1.md\", \"task2.md\", \"high-priority-task.md\"].includes(file.path),\n        ),\n      ).toBe(true);\n    });\n  });\n\n  describe(\"Property Filtering\", () => {\n    it(\"should filter by equals operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list active projects\",\n          className: \"ems__Project\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"equals\",\n              value: \"active\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2); // project1 and project2\n      expect(\n        response.results.every((file) =>\n          [\"project1.md\", \"project2.md\"].includes(file.path),\n        ),\n      ).toBe(true);\n    });\n\n    it(\"should filter by notEquals operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list non-completed projects\",\n          className: \"ems__Project\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"notEquals\",\n              value: \"completed\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2); // project1 and project2\n    });\n\n    it(\"should filter by contains operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list tasks assigned to John\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"assignee\",\n              operator: \"contains\",\n              value: \"John\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2); // task1 (John Doe) and high-priority-task (Bob Johnson)\n    });\n\n    it(\"should filter by startsWith operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list tasks assigned to John\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"assignee\",\n              operator: \"startsWith\",\n              value: \"John\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // task1 (John Doe)\n      expect(response.results[0].path).toBe(\"task1.md\");\n    });\n\n    it(\"should filter by endsWith operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list tasks assigned to people named Johnson\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"assignee\",\n              operator: \"endsWith\",\n              value: \"Johnson\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // high-priority-task (Bob Johnson)\n      expect(response.results[0].path).toBe(\"high-priority-task.md\");\n    });\n\n    it(\"should filter by exists operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list items with assignee\",\n          propertyFilters: [\n            {\n              property: \"assignee\",\n              operator: \"exists\",\n              value: \"true\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // All tasks have assignee\n    });\n\n    it(\"should filter by notExists operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list items without assignee\",\n          propertyFilters: [\n            {\n              property: \"assignee\",\n              operator: \"notExists\",\n              value: \"true\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(5); // All non-task files (excluding non-MD files)\n    });\n\n    it(\"should handle multiple property filters with AND logic\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list high priority active projects\",\n          className: \"ems__Project\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"equals\",\n              value: \"active\",\n            },\n            {\n              property: \"priority\",\n              operator: \"equals\",\n              value: \"high\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // Only project1\n      expect(response.results[0].path).toBe(\"project1.md\");\n    });\n\n    it(\"should handle array property values\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list research notes\",\n          className: \"ems__Note\",\n          propertyFilters: [\n            {\n              property: \"tags\",\n              operator: \"contains\",\n              value: \"research\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1);\n      expect(response.results[0].path).toBe(\"note1.md\");\n    });\n\n    it(\"should handle array values with equals operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list notes with specific tag\",\n          className: \"ems__Note\",\n          propertyFilters: [\n            {\n              property: \"tags\",\n              operator: \"equals\",\n              value: \"important\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1);\n      expect(response.results[0].path).toBe(\"note1.md\");\n    });\n\n    it(\"should handle array values with startsWith operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list notes with tags starting with research\",\n          className: \"ems__Note\",\n          propertyFilters: [\n            {\n              property: \"tags\",\n              operator: \"startsWith\",\n              value: \"research\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1);\n      expect(response.results[0].path).toBe(\"note1.md\");\n    });\n\n    it(\"should handle array values with endsWith operator\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list notes with tags ending with ing\",\n          className: \"ems__Note\",\n          propertyFilters: [\n            {\n              property: \"tags\",\n              operator: \"endsWith\",\n              value: \"ing\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1);\n      expect(response.results[0].path).toBe(\"note2.md\"); // 'meeting' ends with 'ing'\n    });\n\n    it(\"should handle unknown operators gracefully\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list with unknown operator\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"unknown\" as any,\n              value: \"active\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0); // No matches for unknown operator\n    });\n  });\n\n  describe(\"Template Variable Replacement\", () => {\n    it(\"should replace {{current_asset}} template variable\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list related to current\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"project\",\n              operator: \"equals\",\n              value: \"{{current_asset}}\",\n            },\n          ],\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2); // task1 and high-priority-task\n    });\n\n    it(\"should replace {{current_file}} template variable\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list related to current file\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"project\",\n              operator: \"equals\",\n              value: \"{{current_file}}\",\n            },\n          ],\n        },\n        currentAssetPath: \"project2\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // task2\n      expect(response.results[0].path).toBe(\"task2.md\");\n    });\n\n    it(\"should replace {{fm.property}} frontmatter variables\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list tasks with same priority as current\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"priority\",\n              operator: \"equals\",\n              value: \"{{fm.priority}}\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {\n          priority: \"high\",\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // high-priority-task\n      expect(response.results[0].path).toBe(\"high-priority-task.md\");\n    });\n\n    it(\"should handle multiple template variables\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"complex query with templates\",\n          propertyFilters: [\n            {\n              property: \"project\",\n              operator: \"equals\",\n              value: \"{{current_asset}}\",\n            },\n            {\n              property: \"priority\",\n              operator: \"equals\",\n              value: \"{{fm.priority}}\",\n            },\n          ],\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {\n          priority: \"medium\",\n        },\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // task1\n      expect(response.results[0].path).toBe(\"task1.md\");\n    });\n\n    it(\"should handle missing frontmatter variables gracefully\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test missing frontmatter\",\n          propertyFilters: [\n            {\n              property: \"priority\",\n              operator: \"equals\",\n              value: \"{{fm.nonexistent}}\",\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0); // No matches since template wasn't replaced\n    });\n  });\n\n  describe(\"Relation Filtering\", () => {\n    it(\"should filter by relation property\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list items related to current\",\n          relationProperty: \"project\",\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2); // task1 and high-priority-task\n    });\n\n    it(\"should handle array relation values\", async () => {\n      // Mock note with array related_to property\n      mockMetadataCache.getFileCache.mockImplementation((file: TFile) => {\n        if (file.path === \"note1.md\") {\n          return {\n            frontmatter: {\n              exo__Instance_class: \"ems__Note\",\n              tags: [\"research\", \"important\"],\n              related_to: [\"[[project1]]\", \"[[project2]]\"],\n            },\n          };\n        }\n        // Use original cache for other files\n        const originalImplementations = new Map([\n          [\n            \"project1.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"[[ems__Project]]\",\n                status: \"active\",\n                priority: \"high\",\n                title: \"Project 1\",\n                updatedAt: \"2024-01-15T10:00:00Z\",\n              },\n            },\n          ],\n          [\n            \"project2.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"ems__Project\",\n                status: \"active\",\n                priority: \"medium\",\n                title: \"Project 2\",\n                updatedAt: \"2024-01-14T10:00:00Z\",\n              },\n            },\n          ],\n          [\n            \"completed-project.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"ems__Project\",\n                status: \"completed\",\n                priority: \"low\",\n                title: \"Completed Project\",\n                updatedAt: \"2024-01-10T10:00:00Z\",\n              },\n            },\n          ],\n          [\n            \"task1.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"ems__Task\",\n                status: \"todo\",\n                priority: \"medium\",\n                project: \"[[project1]]\",\n                assignee: \"John Doe\",\n              },\n            },\n          ],\n          [\n            \"task2.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"ems__Task\",\n                status: \"done\",\n                priority: \"low\",\n                project: \"[[project2]]\",\n                assignee: \"Jane Smith\",\n              },\n            },\n          ],\n          [\n            \"high-priority-task.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"ems__Task\",\n                status: \"in-progress\",\n                priority: \"high\",\n                project: \"[[project1]]\",\n                assignee: \"Bob Johnson\",\n              },\n            },\n          ],\n          [\n            \"note2.md\",\n            {\n              frontmatter: {\n                exo__Instance_class: \"ems__Note\",\n                tags: [\"meeting\"],\n                related_to: [\"[[project2]]\"],\n              },\n            },\n          ],\n          [\"image.png\", null],\n          [\"document.pdf\", { frontmatter: null }],\n        ]);\n\n        return originalImplementations.get(file.path) || { frontmatter: null };\n      });\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list notes related to current project\",\n          relationProperty: \"related_to\",\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // note1\n      expect(response.results[0].path).toBe(\"note1.md\");\n    });\n\n    it(\"should handle missing relation property gracefully\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list items with missing relation\",\n          relationProperty: \"nonexistent_relation\",\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0);\n    });\n  });\n\n  describe(\"Sorting\", () => {\n    it(\"should sort by property in ascending order\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list projects sorted by priority\",\n          className: \"ems__Project\",\n          sortBy: \"priority\",\n          sortOrder: \"asc\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3);\n\n      // Check order: high, low, medium (alphabetical for string comparison)\n      const priorities = response.results.map((file) => {\n        const cache = mockMetadataCache.getFileCache(file);\n        return cache?.frontmatter?.priority || \"\";\n      });\n      expect(priorities[0]).toBe(\"high\");\n      expect(priorities[1]).toBe(\"low\");\n      expect(priorities[2]).toBe(\"medium\");\n    });\n\n    it(\"should sort by property in descending order\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list projects sorted by priority desc\",\n          className: \"ems__Project\",\n          sortBy: \"priority\",\n          sortOrder: \"desc\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3);\n\n      // Check reversed order\n      const priorities = response.results.map((file) => {\n        const cache = mockMetadataCache.getFileCache(file);\n        return cache?.frontmatter?.priority || \"\";\n      });\n      expect(priorities[0]).toBe(\"medium\");\n      expect(priorities[1]).toBe(\"low\");\n      expect(priorities[2]).toBe(\"high\");\n    });\n\n    it(\"should handle missing sort property gracefully\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list sorted by nonexistent property\",\n          sortBy: \"nonexistent\",\n          sortOrder: \"asc\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(testFiles.length);\n      // Should not crash and return results in some order\n    });\n\n    it(\"should default to ascending when sortOrder is not specified\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list projects with default sort order\",\n          className: \"ems__Project\",\n          sortBy: \"title\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3);\n    });\n  });\n\n  describe(\"Result Limiting\", () => {\n    it(\"should limit results when maxResults is specified\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list limited projects\",\n          className: \"ems__Project\",\n          maxResults: 2,\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2);\n      expect(response.totalCount).toBe(3); // Total before limiting\n    });\n\n    it(\"should handle maxResults larger than available results\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list with large limit\",\n          className: \"ems__Project\",\n          maxResults: 100,\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // All available projects\n      expect(response.totalCount).toBe(3);\n    });\n\n    it(\"should handle maxResults of zero\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list with zero limit\",\n          className: \"ems__Project\",\n          maxResults: 0,\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // Ignores zero limit\n      expect(response.totalCount).toBe(3);\n    });\n\n    it(\"should handle negative maxResults\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"list with negative limit\",\n          className: \"ems__Project\",\n          maxResults: -5,\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // Ignores negative limit\n      expect(response.totalCount).toBe(3);\n    });\n  });\n\n  describe(\"Complex Query Combinations\", () => {\n    it(\"should combine class filter, property filters, sorting, and limiting\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"complex query\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"notEquals\",\n              value: \"done\",\n            },\n          ],\n          sortBy: \"priority\",\n          sortOrder: \"desc\",\n          maxResults: 1,\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1);\n      expect(response.totalCount).toBe(2); // task1 and high-priority-task (not done)\n    });\n\n    it(\"should combine relation filter with class filter\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"tasks related to current project\",\n          className: \"ems__Task\",\n          relationProperty: \"project\",\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(2); // task1 and high-priority-task\n      expect(\n        response.results.every((file) =>\n          [\"task1.md\", \"high-priority-task.md\"].includes(file.path),\n        ),\n      ).toBe(true);\n    });\n\n    it(\"should combine all filter types\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"comprehensive filter test\",\n          className: \"ems__Task\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"equals\",\n              value: \"in-progress\",\n            },\n          ],\n          relationProperty: \"project\",\n          sortBy: \"priority\",\n          sortOrder: \"desc\",\n          maxResults: 10,\n        },\n        currentAssetPath: \"project1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // Only high-priority-task\n      expect(response.results[0].path).toBe(\"high-priority-task.md\");\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle vault.getFiles() throwing an error\", async () => {\n      mockVault.getFiles.mockImplementation(() => {\n        throw new Error(\"Vault access error\");\n      });\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test error handling\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Failed to execute query block\");\n      expect(result.error).toContain(\"Vault access error\");\n    });\n\n    it(\"should handle metadataCache.getFileCache() throwing an error\", async () => {\n      mockMetadataCache.getFileCache.mockImplementation(() => {\n        throw new Error(\"Metadata cache error\");\n      });\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test metadata error\",\n          className: \"ems__Project\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isFailure).toBe(true);\n      expect(result.error).toContain(\"Failed to execute query block\");\n      expect(result.error).toContain(\"Metadata cache error\");\n    });\n\n    it(\"should handle null metadata gracefully\", async () => {\n      mockMetadataCache.getFileCache.mockReturnValue(null);\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test null metadata\",\n          className: \"ems__Project\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0); // No files match without metadata\n    });\n\n    it(\"should handle undefined frontmatter gracefully\", async () => {\n      mockMetadataCache.getFileCache.mockReturnValue({\n        frontmatter: undefined,\n      });\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test undefined frontmatter\",\n          className: \"ems__Project\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(0);\n    });\n  });\n\n  describe(\"Edge Cases\", () => {\n    it(\"should handle empty property filters array\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test empty filters\",\n          className: \"ems__Project\",\n          propertyFilters: [],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3); // All projects\n    });\n\n    it(\"should handle null/undefined filter values\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test null filter values\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"equals\",\n              value: null as any,\n            },\n          ],\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      // Should handle gracefully without crashing\n    });\n\n    it(\"should handle empty string values\", async () => {\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test empty string values\",\n          className: \"\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"equals\",\n              value: \"\",\n            },\n          ],\n        },\n        currentAssetPath: \"\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      // Should handle gracefully\n    });\n\n    it(\"should handle circular wikilink references\", async () => {\n      mockMetadataCache.getFileCache.mockImplementation((file: TFile) => {\n        if (file.path === \"circular1.md\") {\n          return {\n            frontmatter: {\n              exo__Instance_class: \"ems__Test\",\n              references: \"[[circular2]]\",\n            },\n          };\n        }\n        if (file.path === \"circular2.md\") {\n          return {\n            frontmatter: {\n              exo__Instance_class: \"ems__Test\",\n              references: \"[[circular1]]\",\n            },\n          };\n        }\n        return { frontmatter: null };\n      });\n\n      const circularFiles = [\n        {\n          path: \"circular1.md\",\n          basename: \"circular1\",\n          extension: \"md\",\n        } as TFile,\n        {\n          path: \"circular2.md\",\n          basename: \"circular2\",\n          extension: \"md\",\n        } as TFile,\n      ];\n      mockVault.getFiles.mockReturnValue(circularFiles);\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test circular references\",\n          relationProperty: \"references\",\n        },\n        currentAssetPath: \"circular1\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(1); // circular2\n    });\n\n    it(\"should handle files with special characters in path\", async () => {\n      const specialFiles = [\n        {\n          path: \"file with spaces.md\",\n          basename: \"file with spaces\",\n          extension: \"md\",\n        } as TFile,\n        {\n          path: \"file-with-dashes.md\",\n          basename: \"file-with-dashes\",\n          extension: \"md\",\n        } as TFile,\n        {\n          path: \"file_with_underscores.md\",\n          basename: \"file_with_underscores\",\n          extension: \"md\",\n        } as TFile,\n      ];\n      mockVault.getFiles.mockReturnValue(specialFiles);\n      mockMetadataCache.getFileCache.mockReturnValue({\n        frontmatter: { status: \"test\" },\n      });\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"test special characters\",\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const result = await useCase.execute(request);\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(3);\n    });\n  });\n\n  describe(\"Performance and Timing\", () => {\n    it(\"should complete execution within reasonable time\", async () => {\n      // Create a larger dataset\n      const largeDataset = Array.from({ length: 100 }, (_, i) => ({\n        path: `file${i}.md`,\n        basename: `file${i}`,\n        extension: \"md\",\n      })) as TFile[];\n\n      mockVault.getFiles.mockReturnValue(largeDataset);\n      mockMetadataCache.getFileCache.mockReturnValue({\n        frontmatter: {\n          exo__Instance_class: \"ems__Test\",\n          status: \"active\",\n          priority: \"medium\",\n        },\n      });\n\n      const request: ExecuteQueryBlockRequest = {\n        blockConfig: {\n          type: \"query\",\n          query: \"performance test\",\n          className: \"ems__Test\",\n          propertyFilters: [\n            {\n              property: \"status\",\n              operator: \"equals\",\n              value: \"active\",\n            },\n          ],\n          sortBy: \"priority\",\n          maxResults: 10,\n        },\n        currentAssetPath: \"current.md\",\n        currentAssetFrontmatter: {},\n      };\n\n      const startTime = Date.now();\n      const result = await useCase.execute(request);\n      const endTime = Date.now();\n\n      expect(result.isSuccess).toBe(true);\n      const response = result.getValue();\n      expect(response.results).toHaveLength(10);\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete in less than 1 second\n      expect(response.executionTime).toBeGreaterThanOrEqual(0);\n      expect(response.executionTime).toBeLessThanOrEqual(\n        endTime - startTime + 10,\n      );\n    });\n\n    it(\"should track execution time accurately for different operations\", async () => {\n      const operations = [\n        {\n          name: \"simple query\",\n          config: { type: \"query\" as const, query: \"simple\" },\n        },\n        {\n          name: \"filtered query\",\n          config: {\n            type: \"query\" as const,\n            query: \"filtered\",\n            className: \"ems__Project\",\n            propertyFilters: [\n              {\n                property: \"status\",\n                operator: \"equals\" as const,\n                value: \"active\",\n              },\n            ],\n          },\n        },\n        {\n          name: \"sorted query\",\n          config: {\n            type: \"query\" as const,\n            query: \"sorted\",\n            className: \"ems__Project\",\n            sortBy: \"priority\",\n          },\n        },\n      ];\n\n      const timings: number[] = [];\n\n      for (const operation of operations) {\n        const request: ExecuteQueryBlockRequest = {\n          blockConfig: operation.config,\n          currentAssetPath: \"current.md\",\n          currentAssetFrontmatter: {},\n        };\n\n        const result = await useCase.execute(request);\n        expect(result.isSuccess).toBe(true);\n\n        const response = result.getValue();\n        timings.push(response.executionTime);\n        expect(response.executionTime).toBeGreaterThanOrEqual(0);\n      }\n\n      // All operations should have measurable execution times\n      timings.forEach((time) => {\n        expect(time).toBeGreaterThanOrEqual(0);\n        expect(time).toBeLessThan(1000); // Reasonable upper bound\n      });\n    });\n  });\n});\n"],"version":3}