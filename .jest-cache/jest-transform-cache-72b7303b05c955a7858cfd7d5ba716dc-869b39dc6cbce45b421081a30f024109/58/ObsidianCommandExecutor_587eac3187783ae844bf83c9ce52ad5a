513a9f20fa6b7fdf63d7555c6721997e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianCommandExecutor = void 0;
const obsidian_1 = require("obsidian");
const Result_1 = require("../../domain/core/Result");
const ButtonCommand_1 = require("../../domain/entities/ButtonCommand");
const Asset_1 = require("../../domain/entities/Asset");
const AssetId_1 = require("../../domain/value-objects/AssetId");
const ClassName_1 = require("../../domain/value-objects/ClassName");
const OntologyPrefix_1 = require("../../domain/value-objects/OntologyPrefix");
/**
 * Obsidian implementation of command executor
 * Handles actual command execution in the Obsidian environment
 */
class ObsidianCommandExecutor {
    constructor(app, assetRepository, createChildTaskUseCase, createChildAreaUseCase) {
        this.app = app;
        this.assetRepository = assetRepository;
        this.createChildTaskUseCase = createChildTaskUseCase;
        this.createChildAreaUseCase = createChildAreaUseCase;
        this.handlers = new Map();
        this.registerDefaultHandlers();
    }
    async execute(request) {
        const startTime = Date.now();
        try {
            // Validate request
            const validationResult = this.validate(request);
            if (validationResult.isFailure) {
                return Result_1.Result.fail(validationResult.error);
            }
            // Get handler for command type
            const handler = this.handlers.get(request.command.type);
            if (!handler) {
                return Result_1.Result.fail(`No handler registered for command type: ${request.command.type}`);
            }
            // Execute command
            const executionResult = await handler(request);
            const executionTime = Date.now() - startTime;
            if (executionResult.isFailure) {
                return Result_1.Result.ok({
                    commandId: request.context.commandId,
                    status: "failure",
                    error: executionResult.error,
                    executionTime,
                });
            }
            return Result_1.Result.ok({
                commandId: request.context.commandId,
                status: "success",
                output: executionResult.getValue(),
                executionTime,
            });
        }
        catch (error) {
            const executionTime = Date.now() - startTime;
            return Result_1.Result.ok({
                commandId: request.context.commandId,
                status: "failure",
                error: `Unexpected error: ${error.message}`,
                executionTime,
            });
        }
    }
    registerHandler(type, handler) {
        this.handlers.set(type, handler);
    }
    isSupported(type) {
        return this.handlers.has(type);
    }
    validate(request) {
        if (!request.command) {
            return Result_1.Result.fail("Command is required");
        }
        if (!request.context) {
            return Result_1.Result.fail("Execution context is required");
        }
        // Validate command-specific requirements
        const command = request.command;
        if (command.requiresInput &&
            (!request.context.parameters ||
                Object.keys(request.context.parameters).length === 0)) {
            return Result_1.Result.fail("Command requires input parameters");
        }
        return Result_1.Result.ok();
    }
    registerDefaultHandlers() {
        // CREATE_ASSET handler
        this.registerHandler(ButtonCommand_1.CommandType.CREATE_ASSET, async (request) => {
            const params = request.context.parameters;
            // Extract parameters
            const title = params.title || "Untitled";
            const className = params.className || request.context.targetClass || "exo__Asset";
            const ontology = params.ontology || "exo";
            const properties = params.properties || {};
            // Create asset ID
            const idResult = AssetId_1.AssetId.create(this.sanitizeFileName(title));
            if (idResult.isFailure) {
                return Result_1.Result.fail(idResult.error);
            }
            // Create class name
            const classNameResult = ClassName_1.ClassName.create(className);
            if (classNameResult.isFailure) {
                return Result_1.Result.fail(classNameResult.error);
            }
            // Create ontology prefix
            const ontologyResult = OntologyPrefix_1.OntologyPrefix.create(ontology);
            if (ontologyResult.isFailure) {
                return Result_1.Result.fail(ontologyResult.error);
            }
            // Create asset
            const assetResult = Asset_1.Asset.create({
                id: idResult.getValue(),
                className: classNameResult.getValue(),
                ontology: ontologyResult.getValue(),
                label: title,
                description: params.description || "",
                properties: properties,
            });
            if (assetResult.isFailure) {
                return Result_1.Result.fail(assetResult.error);
            }
            // Save asset
            await this.assetRepository.save(assetResult.getValue());
            // Open the new asset
            const file = this.app.vault.getAbstractFileByPath(`${title}.md`);
            if (file instanceof obsidian_1.TFile) {
                await this.app.workspace.getLeaf().openFile(file);
            }
            new obsidian_1.Notice(`Asset "${title}" created successfully`);
            return Result_1.Result.ok({ assetId: idResult.getValue().toString() });
        });
        // OPEN_ASSET handler
        this.registerHandler(ButtonCommand_1.CommandType.OPEN_ASSET, async (request) => {
            const assetId = request.context.assetId || request.context.parameters.assetId;
            if (!assetId) {
                return Result_1.Result.fail("Asset ID is required for OPEN_ASSET command");
            }
            const file = this.app.vault.getAbstractFileByPath(`${assetId}.md`);
            if (!(file instanceof obsidian_1.TFile)) {
                return Result_1.Result.fail(`Asset not found: ${assetId}`);
            }
            await this.app.workspace.getLeaf(true).openFile(file);
            return Result_1.Result.ok({ opened: assetId });
        });
        // DELETE_ASSET handler
        this.registerHandler(ButtonCommand_1.CommandType.DELETE_ASSET, async (request) => {
            const assetId = request.context.assetId || request.context.parameters.assetId;
            if (!assetId) {
                return Result_1.Result.fail("Asset ID is required for DELETE_ASSET command");
            }
            const file = this.app.vault.getAbstractFileByPath(`${assetId}.md`);
            if (!(file instanceof obsidian_1.TFile)) {
                return Result_1.Result.fail(`Asset not found: ${assetId}`);
            }
            // Confirm deletion
            const confirmDelete = await this.confirmAction(`Delete Asset`, `Are you sure you want to delete "${assetId}"? This cannot be undone.`);
            if (!confirmDelete) {
                return Result_1.Result.ok({ cancelled: true });
            }
            await this.app.vault.delete(file);
            new obsidian_1.Notice(`Asset "${assetId}" deleted`);
            return Result_1.Result.ok({ deleted: assetId });
        });
        // RUN_TEMPLATE handler
        this.registerHandler(ButtonCommand_1.CommandType.RUN_TEMPLATE, async (request) => {
            const templateName = request.context.template || request.context.parameters.template_name;
            const targetAssetId = request.context.assetId;
            if (!templateName) {
                return Result_1.Result.fail("Template name is required");
            }
            if (!targetAssetId) {
                return Result_1.Result.fail("Target asset is required for template application");
            }
            // Find template file
            const templateFile = this.app.vault.getAbstractFileByPath(`templates/${templateName}.md`);
            if (!(templateFile instanceof obsidian_1.TFile)) {
                return Result_1.Result.fail(`Template not found: ${templateName}`);
            }
            // Read template content
            const templateContent = await this.app.vault.read(templateFile);
            // Find target asset
            const targetFile = this.app.vault.getAbstractFileByPath(`${targetAssetId}.md`);
            if (!(targetFile instanceof obsidian_1.TFile)) {
                return Result_1.Result.fail(`Target asset not found: ${targetAssetId}`);
            }
            // Apply template (append to existing content)
            const currentContent = await this.app.vault.read(targetFile);
            const newContent = currentContent +
                "\n\n" +
                this.processTemplate(templateContent, request.context.parameters);
            await this.app.vault.modify(targetFile, newContent);
            new obsidian_1.Notice(`Template "${templateName}" applied successfully`);
            return Result_1.Result.ok({ template: templateName, target: targetAssetId });
        });
        // EXECUTE_SEARCH handler
        this.registerHandler(ButtonCommand_1.CommandType.EXECUTE_SEARCH, async (request) => {
            const query = request.context.parameters.query;
            if (!query) {
                return Result_1.Result.fail("Search query is required");
            }
            // Open search with query
            // Using Obsidian internal API for search
            this.app.internalPlugins
                .getPluginById("global-search")
                .instance.openGlobalSearch(query);
            return Result_1.Result.ok({ query });
        });
        // TRIGGER_WORKFLOW handler
        this.registerHandler(ButtonCommand_1.CommandType.TRIGGER_WORKFLOW, async (request) => {
            const workflowName = request.context.parameters.workflow;
            if (!workflowName) {
                return Result_1.Result.fail("Workflow name is required");
            }
            // This would integrate with a workflow system
            // For now, just log the workflow trigger
            console.log(`Triggering workflow: ${workflowName}`, request.context.parameters);
            new obsidian_1.Notice(`Workflow "${workflowName}" triggered`);
            return Result_1.Result.ok({ workflow: workflowName });
        });
        // CUSTOM handler
        this.registerHandler(ButtonCommand_1.CommandType.CUSTOM, async (request) => {
            const script = request.context.script;
            if (!script) {
                return Result_1.Result.fail("Script is required for custom commands");
            }
            // Script execution is disabled for security reasons
            // Dynamic code execution (eval, new Function) poses significant security risks:
            // - Arbitrary code execution
            // - Access to sensitive APIs
            // - Potential data exfiltration
            // Please use predefined commands or safe templating instead
            return Result_1.Result.fail("Script execution is disabled for security. Use predefined commands instead.");
        });
        // CREATE_CHILD_TASK handler
        this.registerHandler(ButtonCommand_1.CommandType.CREATE_CHILD_TASK, async (request) => {
            const projectAssetId = request.context.assetId;
            if (!projectAssetId) {
                return Result_1.Result.fail("Project asset ID is required for CREATE_CHILD_TASK command");
            }
            if (!this.createChildTaskUseCase) {
                return Result_1.Result.fail("CreateChildTaskUseCase not initialized");
            }
            const result = await this.createChildTaskUseCase.execute({
                projectAssetId,
                context: {
                    activeFile: request.context.currentView,
                    selection: request.context.selection?.join("\n"),
                },
            });
            if (!result.success) {
                return Result_1.Result.fail(result.message);
            }
            // Open the new task file
            if (result.taskFilePath) {
                const file = this.app.vault.getAbstractFileByPath(result.taskFilePath);
                if (file instanceof obsidian_1.TFile) {
                    await this.app.workspace.getLeaf(true).openFile(file);
                }
            }
            new obsidian_1.Notice(result.message);
            return Result_1.Result.ok({
                taskId: result.taskId,
                taskFilePath: result.taskFilePath,
            });
        });
        // CREATE_CHILD_AREA handler
        this.registerHandler(ButtonCommand_1.CommandType.CREATE_CHILD_AREA, async (request) => {
            const parentAreaId = request.context.assetId;
            if (!parentAreaId) {
                return Result_1.Result.fail("Parent area ID is required for CREATE_CHILD_AREA command");
            }
            if (!this.createChildAreaUseCase) {
                return Result_1.Result.fail("CreateChildAreaUseCase not initialized");
            }
            const result = await this.createChildAreaUseCase.execute({
                parentAreaId,
                context: {
                    activeFile: request.context.currentView,
                    selection: request.context.selection?.join("\n"),
                },
            });
            if (!result.success) {
                return Result_1.Result.fail(result.message);
            }
            // Open the new area file
            if (result.areaFilePath) {
                const file = this.app.vault.getAbstractFileByPath(result.areaFilePath);
                if (file instanceof obsidian_1.TFile) {
                    await this.app.workspace.getLeaf(true).openFile(file);
                }
            }
            new obsidian_1.Notice(result.message);
            return Result_1.Result.ok({
                areaId: result.areaId,
                areaFilePath: result.areaFilePath,
            });
        });
    }
    sanitizeFileName(name) {
        // Remove characters that are invalid in file names
        return name.replace(/[\\/:*?"<>|]/g, "-").trim();
    }
    processTemplate(template, parameters) {
        // Replace template variables
        let processed = template;
        for (const [key, value] of Object.entries(parameters)) {
            const regex = new RegExp(`{{\\s*${key}\\s*}}`, "g");
            processed = processed.replace(regex, String(value));
        }
        // Replace date variables
        const now = new Date();
        processed = processed.replace(/{{date}}/g, now.toISOString().split("T")[0]);
        processed = processed.replace(/{{time}}/g, now.toTimeString().split(" ")[0]);
        processed = processed.replace(/{{datetime}}/g, now.toISOString());
        return processed;
    }
    async confirmAction(title, message) {
        return new Promise((resolve) => {
            // Create a simple confirmation modal
            const modal = new ConfirmationModal(this.app, title, message, resolve);
            modal.open();
        });
    }
}
exports.ObsidianCommandExecutor = ObsidianCommandExecutor;
/**
 * Simple confirmation modal
 */
class ConfirmationModal extends obsidian_1.Modal {
    constructor(app, title, message, onConfirm) {
        super(app);
        this.title = title;
        this.message = message;
        this.onConfirm = onConfirm;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl("h2", { text: this.title });
        contentEl.createEl("p", { text: this.message });
        const buttonContainer = contentEl.createDiv({
            cls: "modal-button-container",
        });
        const cancelBtn = buttonContainer.createEl("button", { text: "Cancel" });
        cancelBtn.addEventListener("click", () => {
            this.onConfirm(false);
            this.close();
        });
        const confirmBtn = buttonContainer.createEl("button", {
            text: "Confirm",
            cls: "mod-warning",
        });
        confirmBtn.addEventListener("click", () => {
            this.onConfirm(true);
            this.close();
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,