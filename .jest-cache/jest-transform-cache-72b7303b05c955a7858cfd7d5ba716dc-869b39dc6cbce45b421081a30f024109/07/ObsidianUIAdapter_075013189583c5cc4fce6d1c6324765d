0b5aa2af4a1453d815002cb4fdd07e88
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianUIAdapter = void 0;
/**
 * Obsidian implementation of UI adapter
 */
class ObsidianUIAdapter {
    constructor(app) {
        this.app = app;
    }
    getDisplayLabel(file) {
        const frontmatter = this.app.metadataCache.getFileCache(file)?.frontmatter;
        return (frontmatter?.["exo__Asset_title"] ||
            frontmatter?.["title"] ||
            file.basename);
    }
    extractFrontmatterData(file, key) {
        const cache = this.app.metadataCache.getFileCache(file);
        return cache?.frontmatter?.[key];
    }
    createInternalLink(container, text, path) {
        const link = container.createEl("a", {
            text,
            cls: "internal-link",
            href: `#`,
        });
        link.addEventListener("click", (e) => {
            e.preventDefault();
            this.app.workspace.openLinkText(path, "", false);
        });
    }
    createElement(parent, tag, options) {
        const element = parent.createEl(tag, {
            cls: options?.cls,
            text: options?.text,
            attr: options?.attrs,
        });
        return element;
    }
    cleanClassName(className) {
        if (!className)
            return "";
        let clean = String(className);
        // Remove namespace prefixes
        if (clean.includes("#")) {
            clean = clean.split("#").pop() || clean;
        }
        // Replace underscores with spaces for display
        clean = clean.replace(/_/g, " ");
        // Capitalize first letter of each word
        clean = clean.replace(/\b\w/g, (l) => l.toUpperCase());
        return clean;
    }
    groupFilesByClass(files) {
        const groups = new Map();
        files.forEach((file) => {
            const className = this.extractFrontmatterData(file, "exo__Instance_class") ||
                "Unclassified";
            const cleanName = this.cleanClassName(className);
            if (!groups.has(cleanName)) {
                groups.set(cleanName, []);
            }
            groups.get(cleanName).push(file);
        });
        return groups;
    }
    filterFilesByClass(files, className) {
        if (!className)
            return files;
        return files.filter((file) => {
            const fileClass = this.extractFrontmatterData(file, "exo__Instance_class");
            return this.cleanClassName(fileClass) === className;
        });
    }
    applyResultLimit(files, limit) {
        return limit ? files.slice(0, limit) : files;
    }
}
exports.ObsidianUIAdapter = ObsidianUIAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2luZnJhc3RydWN0dXJlL2FkYXB0ZXJzL09ic2lkaWFuVUlBZGFwdGVyLnRzIiwibWFwcGluZ3MiOiI7OztBQUdBOztHQUVHO0FBQ0gsTUFBYSxpQkFBaUI7SUFDNUIsWUFBb0IsR0FBUTtRQUFSLFFBQUcsR0FBSCxHQUFHLENBQUs7SUFBRyxDQUFDO0lBRWhDLGVBQWUsQ0FBQyxJQUFXO1FBQ3pCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLENBQUM7UUFDM0UsT0FBTyxDQUNMLFdBQVcsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1lBQ2pDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQztZQUN0QixJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7SUFDSixDQUFDO0lBRUQsc0JBQXNCLENBQUMsSUFBVyxFQUFFLEdBQVc7UUFDN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hELE9BQU8sS0FBSyxFQUFFLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxTQUFzQixFQUFFLElBQVksRUFBRSxJQUFZO1FBQ25FLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ25DLElBQUk7WUFDSixHQUFHLEVBQUUsZUFBZTtZQUNwQixJQUFJLEVBQUUsR0FBRztTQUNWLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNuQyxDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUNYLE1BQW1CLEVBQ25CLEdBQVcsRUFDWCxPQUlDO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFrQyxFQUFFO1lBQ2xFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRztZQUNqQixJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUk7WUFDbkIsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLO1NBQ3JCLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxjQUFjLENBQUMsU0FBYztRQUMzQixJQUFJLENBQUMsU0FBUztZQUFFLE9BQU8sRUFBRSxDQUFDO1FBRTFCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU5Qiw0QkFBNEI7UUFDNUIsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEtBQUssQ0FBQztTQUN6QztRQUVELDhDQUE4QztRQUM5QyxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFakMsdUNBQXVDO1FBQ3ZDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFdkQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBYztRQUM5QixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztRQUUxQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDckIsTUFBTSxTQUFTLEdBQ2IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxxQkFBcUIsQ0FBQztnQkFDeEQsY0FBYyxDQUFDO1lBQ2pCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFakQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQzFCLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzNCO1lBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsa0JBQWtCLENBQUMsS0FBYyxFQUFFLFNBQWtCO1FBQ25ELElBQUksQ0FBQyxTQUFTO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFFN0IsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDM0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUMzQyxJQUFJLEVBQ0oscUJBQXFCLENBQ3RCLENBQUM7WUFDRixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssU0FBUyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQWMsRUFBRSxLQUFjO1FBQzdDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQy9DLENBQUM7Q0FDRjtBQW5HRCw4Q0FtR0MiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2luZnJhc3RydWN0dXJlL2FkYXB0ZXJzL09ic2lkaWFuVUlBZGFwdGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCwgVEZpbGUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IElVSUFkYXB0ZXIgfSBmcm9tIFwiLi4vLi4vYXBwbGljYXRpb24vcG9ydHMvSVVJQWRhcHRlclwiO1xuXG4vKipcbiAqIE9ic2lkaWFuIGltcGxlbWVudGF0aW9uIG9mIFVJIGFkYXB0ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE9ic2lkaWFuVUlBZGFwdGVyIGltcGxlbWVudHMgSVVJQWRhcHRlciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwOiBBcHApIHt9XG5cbiAgZ2V0RGlzcGxheUxhYmVsKGZpbGU6IFRGaWxlKTogc3RyaW5nIHtcbiAgICBjb25zdCBmcm9udG1hdHRlciA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpPy5mcm9udG1hdHRlcjtcbiAgICByZXR1cm4gKFxuICAgICAgZnJvbnRtYXR0ZXI/LltcImV4b19fQXNzZXRfdGl0bGVcIl0gfHxcbiAgICAgIGZyb250bWF0dGVyPy5bXCJ0aXRsZVwiXSB8fFxuICAgICAgZmlsZS5iYXNlbmFtZVxuICAgICk7XG4gIH1cblxuICBleHRyYWN0RnJvbnRtYXR0ZXJEYXRhKGZpbGU6IFRGaWxlLCBrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICByZXR1cm4gY2FjaGU/LmZyb250bWF0dGVyPy5ba2V5XTtcbiAgfVxuXG4gIGNyZWF0ZUludGVybmFsTGluayhjb250YWluZXI6IEhUTUxFbGVtZW50LCB0ZXh0OiBzdHJpbmcsIHBhdGg6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGxpbmsgPSBjb250YWluZXIuY3JlYXRlRWwoXCJhXCIsIHtcbiAgICAgIHRleHQsXG4gICAgICBjbHM6IFwiaW50ZXJuYWwtbGlua1wiLFxuICAgICAgaHJlZjogYCNgLFxuICAgIH0pO1xuXG4gICAgbGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vcGVuTGlua1RleHQocGF0aCwgXCJcIiwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlRWxlbWVudChcbiAgICBwYXJlbnQ6IEhUTUxFbGVtZW50LFxuICAgIHRhZzogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICBjbHM/OiBzdHJpbmc7XG4gICAgICB0ZXh0Pzogc3RyaW5nO1xuICAgICAgYXR0cnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuICAgIH0sXG4gICk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBlbGVtZW50ID0gcGFyZW50LmNyZWF0ZUVsKHRhZyBhcyBrZXlvZiBIVE1MRWxlbWVudFRhZ05hbWVNYXAsIHtcbiAgICAgIGNsczogb3B0aW9ucz8uY2xzLFxuICAgICAgdGV4dDogb3B0aW9ucz8udGV4dCxcbiAgICAgIGF0dHI6IG9wdGlvbnM/LmF0dHJzLFxuICAgIH0pO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgY2xlYW5DbGFzc05hbWUoY2xhc3NOYW1lOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmICghY2xhc3NOYW1lKSByZXR1cm4gXCJcIjtcblxuICAgIGxldCBjbGVhbiA9IFN0cmluZyhjbGFzc05hbWUpO1xuXG4gICAgLy8gUmVtb3ZlIG5hbWVzcGFjZSBwcmVmaXhlc1xuICAgIGlmIChjbGVhbi5pbmNsdWRlcyhcIiNcIikpIHtcbiAgICAgIGNsZWFuID0gY2xlYW4uc3BsaXQoXCIjXCIpLnBvcCgpIHx8IGNsZWFuO1xuICAgIH1cblxuICAgIC8vIFJlcGxhY2UgdW5kZXJzY29yZXMgd2l0aCBzcGFjZXMgZm9yIGRpc3BsYXlcbiAgICBjbGVhbiA9IGNsZWFuLnJlcGxhY2UoL18vZywgXCIgXCIpO1xuXG4gICAgLy8gQ2FwaXRhbGl6ZSBmaXJzdCBsZXR0ZXIgb2YgZWFjaCB3b3JkXG4gICAgY2xlYW4gPSBjbGVhbi5yZXBsYWNlKC9cXGJcXHcvZywgKGwpID0+IGwudG9VcHBlckNhc2UoKSk7XG5cbiAgICByZXR1cm4gY2xlYW47XG4gIH1cblxuICBncm91cEZpbGVzQnlDbGFzcyhmaWxlczogVEZpbGVbXSk6IE1hcDxzdHJpbmcsIFRGaWxlW10+IHtcbiAgICBjb25zdCBncm91cHMgPSBuZXcgTWFwPHN0cmluZywgVEZpbGVbXT4oKTtcblxuICAgIGZpbGVzLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZSA9XG4gICAgICAgIHRoaXMuZXh0cmFjdEZyb250bWF0dGVyRGF0YShmaWxlLCBcImV4b19fSW5zdGFuY2VfY2xhc3NcIikgfHxcbiAgICAgICAgXCJVbmNsYXNzaWZpZWRcIjtcbiAgICAgIGNvbnN0IGNsZWFuTmFtZSA9IHRoaXMuY2xlYW5DbGFzc05hbWUoY2xhc3NOYW1lKTtcblxuICAgICAgaWYgKCFncm91cHMuaGFzKGNsZWFuTmFtZSkpIHtcbiAgICAgICAgZ3JvdXBzLnNldChjbGVhbk5hbWUsIFtdKTtcbiAgICAgIH1cbiAgICAgIGdyb3Vwcy5nZXQoY2xlYW5OYW1lKSEucHVzaChmaWxlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBncm91cHM7XG4gIH1cblxuICBmaWx0ZXJGaWxlc0J5Q2xhc3MoZmlsZXM6IFRGaWxlW10sIGNsYXNzTmFtZT86IHN0cmluZyk6IFRGaWxlW10ge1xuICAgIGlmICghY2xhc3NOYW1lKSByZXR1cm4gZmlsZXM7XG5cbiAgICByZXR1cm4gZmlsZXMuZmlsdGVyKChmaWxlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlQ2xhc3MgPSB0aGlzLmV4dHJhY3RGcm9udG1hdHRlckRhdGEoXG4gICAgICAgIGZpbGUsXG4gICAgICAgIFwiZXhvX19JbnN0YW5jZV9jbGFzc1wiLFxuICAgICAgKTtcbiAgICAgIHJldHVybiB0aGlzLmNsZWFuQ2xhc3NOYW1lKGZpbGVDbGFzcykgPT09IGNsYXNzTmFtZTtcbiAgICB9KTtcbiAgfVxuXG4gIGFwcGx5UmVzdWx0TGltaXQoZmlsZXM6IFRGaWxlW10sIGxpbWl0PzogbnVtYmVyKTogVEZpbGVbXSB7XG4gICAgcmV0dXJuIGxpbWl0ID8gZmlsZXMuc2xpY2UoMCwgbGltaXQpIDogZmlsZXM7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==