{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/CreateTaskFromProjectUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/CreateTaskFromProjectUseCase.ts"],"sourcesContent":["import { Task } from \"../../domain/entities/Task\";\nimport { Asset } from \"../../domain/entities/Asset\";\nimport { TaskId } from \"../../domain/value-objects/TaskId\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { Priority } from \"../../domain/value-objects/Priority\";\nimport { TaskStatus } from \"../../domain/value-objects/TaskStatus\";\nimport { IAssetRepository } from \"../../domain/repositories/IAssetRepository\";\nimport { ITaskRepository } from \"../../domain/repositories/ITaskRepository\";\nimport { IndexedGraph } from \"../../domain/semantic/core/IndexedGraph\";\nimport { Triple, IRI, Literal } from \"../../domain/semantic/core/Triple\";\nimport { GetCurrentProjectUseCase } from \"./GetCurrentProjectUseCase\";\nimport {\n  CreateTaskRequest,\n  CreateTaskResponse,\n} from \"../dtos/CreateTaskRequest\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Use case for creating tasks from project context\n * Orchestrates task creation with intelligent project association\n * Following Clean Architecture and TOGAF principles\n */\nexport class CreateTaskFromProjectUseCase {\n  constructor(\n    private readonly taskRepository: ITaskRepository,\n    private readonly assetRepository: IAssetRepository,\n    private readonly graph: IndexedGraph,\n    private readonly getCurrentProjectUseCase: GetCurrentProjectUseCase,\n  ) {}\n\n  async execute(request: CreateTaskRequest): Promise<CreateTaskResponse> {\n    try {\n      // Validate request\n      const validationResult = this.validateRequest(request);\n      if (validationResult.isFailure) {\n        return {\n          success: false,\n          message: validationResult.error,\n          errors: { request: [validationResult.error] },\n        };\n      }\n\n      // Apply template if specified\n      const processedRequest = await this.applyTemplate(request);\n\n      // Get project context if not explicitly provided\n      const projectContext = await this.resolveProjectContext(processedRequest);\n\n      // Create the task\n      const taskResult = await this.createTask(\n        processedRequest,\n        projectContext,\n      );\n      if (taskResult.isFailure) {\n        return {\n          success: false,\n          message: taskResult.error,\n          errors: { task: [taskResult.error] },\n        };\n      }\n\n      const task = taskResult.getValue();\n\n      // Save task to repository\n      await this.taskRepository.save(task);\n\n      // Also save as asset for compatibility\n      const saveResult = await this.saveTaskAsAsset(task, processedRequest);\n      if (saveResult.isFailure) {\n        console.warn(\"Failed to save task as asset:\", saveResult.error);\n        // Continue - task repository save was successful\n      }\n\n      // Update RDF graph\n      const rdfTriples = await this.updateRDFGraph(task, projectContext);\n\n      // Build successful response\n      return {\n        success: true,\n        taskId: task.getId().toString(),\n        message: `Task \"${task.getTitle()}\" created successfully`,\n        task: {\n          id: task.getId().toString(),\n          title: task.getTitle(),\n          status: task.getStatus().toString(),\n          priority: task.getPriority().toString(),\n          projectId: task.getProjectId()?.toString(),\n          dueDate: task.getDueDate()?.toISOString().split(\"T\")[0],\n          tags: task.getTags(),\n        },\n        rdfTriples,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to create task: ${error.message}`,\n        errors: { system: [error.message] },\n      };\n    }\n  }\n\n  /**\n   * Validate the task creation request\n   */\n  private validateRequest(request: CreateTaskRequest): Result<void> {\n    const errors: string[] = [];\n\n    if (!request.title || request.title.trim().length === 0) {\n      errors.push(\"Task title is required\");\n    }\n\n    if (request.title && request.title.length > 200) {\n      errors.push(\"Task title cannot exceed 200 characters\");\n    }\n\n    if (request.estimatedHours !== undefined) {\n      if (\n        typeof request.estimatedHours !== \"number\" ||\n        request.estimatedHours < 0\n      ) {\n        errors.push(\"Estimated hours must be a non-negative number\");\n      }\n    }\n\n    if (request.dueDate) {\n      const dueDate = new Date(request.dueDate);\n      if (isNaN(dueDate.getTime())) {\n        errors.push(\"Due date must be a valid date\");\n      }\n    }\n\n    if (\n      request.priority &&\n      ![\"low\", \"medium\", \"high\", \"urgent\"].includes(request.priority)\n    ) {\n      errors.push(\"Priority must be one of: low, medium, high, urgent\");\n    }\n\n    if (\n      request.status &&\n      ![\"todo\", \"in-progress\", \"done\", \"cancelled\"].includes(request.status)\n    ) {\n      errors.push(\"Status must be one of: todo, in-progress, done, cancelled\");\n    }\n\n    if (errors.length > 0) {\n      return Result.fail<void>(errors.join(\"; \"));\n    }\n\n    return Result.ok<void>();\n  }\n\n  /**\n   * Apply task template if specified\n   */\n  private async applyTemplate(\n    request: CreateTaskRequest,\n  ): Promise<CreateTaskRequest> {\n    if (!request.templateId) {\n      return request;\n    }\n\n    try {\n      // Load template from repository\n      const templateId = AssetId.create(request.templateId);\n      if (templateId.isFailure) {\n        console.warn(\"Invalid template ID:\", request.templateId);\n        return request;\n      }\n\n      const template = await this.assetRepository.findById(\n        templateId.getValue(),\n      );\n      if (!template) {\n        console.warn(\"Template not found:\", request.templateId);\n        return request;\n      }\n\n      // Apply template properties\n      const templateRequest = { ...request };\n\n      // Override with template values if not explicitly set\n      if (\n        !templateRequest.description &&\n        template.getPropertyValue(\"description\")\n      ) {\n        templateRequest.description = template.getPropertyValue(\"description\");\n      }\n\n      if (!templateRequest.priority && template.getPropertyValue(\"priority\")) {\n        templateRequest.priority = template.getPropertyValue(\"priority\");\n      }\n\n      if (\n        !templateRequest.estimatedHours &&\n        template.getPropertyValue(\"estimatedHours\")\n      ) {\n        templateRequest.estimatedHours =\n          template.getPropertyValue(\"estimatedHours\");\n      }\n\n      if (!templateRequest.tags || templateRequest.tags.length === 0) {\n        const templateTags = template.getPropertyValue(\"tags\");\n        if (templateTags && Array.isArray(templateTags)) {\n          templateRequest.tags = templateTags;\n        }\n      }\n\n      // Apply template variable substitution\n      if (request.templateVariables) {\n        templateRequest.title = this.substituteVariables(\n          templateRequest.title,\n          request.templateVariables,\n        );\n        if (templateRequest.description) {\n          templateRequest.description = this.substituteVariables(\n            templateRequest.description,\n            request.templateVariables,\n          );\n        }\n      }\n\n      return templateRequest;\n    } catch (error) {\n      console.warn(\"Failed to apply template:\", error);\n      return request;\n    }\n  }\n\n  /**\n   * Substitute template variables in text\n   */\n  private substituteVariables(\n    text: string,\n    variables: Record<string, string>,\n  ): string {\n    let result = text;\n    for (const [key, value] of Object.entries(variables)) {\n      const regex = new RegExp(`\\\\{\\\\{${key}\\\\}\\\\}`, \"g\");\n      result = result.replace(regex, value);\n    }\n    return result;\n  }\n\n  /**\n   * Resolve project context for task association\n   */\n  private async resolveProjectContext(\n    request: CreateTaskRequest,\n  ): Promise<string | undefined> {\n    if (request.projectId) {\n      // Validate provided project ID\n      const projectId = AssetId.create(request.projectId);\n      if (projectId.isSuccess) {\n        const project = await this.assetRepository.findById(\n          projectId.getValue(),\n        );\n        if (project) {\n          return request.projectId;\n        }\n      }\n    }\n\n    // Use context-based project detection\n    const projectResponse = await this.getCurrentProjectUseCase.execute({\n      activeFile: request.context?.activeFile,\n      preferences: {\n        includeCompleted: false,\n        maxResults: 5,\n        selectionStrategy: \"context\",\n      },\n    });\n\n    return projectResponse.currentProject?.id;\n  }\n\n  /**\n   * Create the task domain entity\n   */\n  private async createTask(\n    request: CreateTaskRequest,\n    projectId?: string,\n  ): Promise<Result<Task>> {\n    // Parse priority\n    let priority: Priority;\n    if (request.priority) {\n      const priorityResult = Priority.create(request.priority);\n      if (priorityResult.isFailure) {\n        return Result.fail<Task>(`Invalid priority: ${priorityResult.error}`);\n      }\n      priority = priorityResult.getValue();\n    } else {\n      priority = Priority.medium();\n    }\n\n    // Parse status\n    let status: TaskStatus;\n    if (request.status) {\n      const statusResult = TaskStatus.create(request.status);\n      if (statusResult.isFailure) {\n        return Result.fail<Task>(`Invalid status: ${statusResult.error}`);\n      }\n      status = statusResult.getValue();\n    } else {\n      status = TaskStatus.todo();\n    }\n\n    // Parse project ID\n    let taskProjectId: AssetId | undefined;\n    if (projectId) {\n      const projectIdResult = AssetId.create(projectId);\n      if (projectIdResult.isSuccess) {\n        taskProjectId = projectIdResult.getValue();\n      }\n    }\n\n    // Parse due date\n    let dueDate: Date | undefined;\n    if (request.dueDate) {\n      dueDate = new Date(request.dueDate);\n      if (isNaN(dueDate.getTime())) {\n        return Result.fail<Task>(\"Invalid due date format\");\n      }\n    }\n\n    // Create task\n    return Task.create({\n      title: request.title.trim(),\n      description: request.description?.trim(),\n      priority: priority,\n      status: status,\n      projectId: taskProjectId,\n      dueDate,\n      estimatedHours: request.estimatedHours,\n      tags: request.tags || [],\n    });\n  }\n\n  /**\n   * Save task as an asset in the repository\n   */\n  private async saveTaskAsAsset(\n    task: Task,\n    request: CreateTaskRequest,\n  ): Promise<Result<void>> {\n    try {\n      // Create asset from task\n      const assetResult = Asset.create({\n        id: AssetId.create(task.getId().toString()).getValue(),\n        label: task.getTitle(),\n        className: ClassName.create(\"ems__Task\").getValue(),\n        ontology: OntologyPrefix.create(\"ems\").getValue(),\n        properties: {\n          ...task.toFrontmatter(),\n          // Add context information\n          creationContext: {\n            activeFile: request.context?.activeFile,\n            selection: request.context?.selection,\n            focusContext: request.context?.focusContext,\n            timestamp: new Date().toISOString(),\n          },\n        },\n      });\n\n      if (assetResult.isFailure) {\n        return Result.fail<void>(\n          `Failed to create asset: ${assetResult.error}`,\n        );\n      }\n\n      const asset = assetResult.getValue();\n      await this.assetRepository.save(asset);\n\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Failed to save task: ${error.message}`);\n    }\n  }\n\n  /**\n   * Update RDF graph with task relationships and metadata\n   */\n  private async updateRDFGraph(\n    task: Task,\n    projectId?: string,\n  ): Promise<CreateTaskResponse[\"rdfTriples\"]> {\n    const triples: CreateTaskResponse[\"rdfTriples\"] = [];\n    const taskIRI = this.ensureValidIRI(task.getId().toString());\n\n    try {\n      // Add basic task triples\n      this.addTriple(triples, taskIRI, \"rdf:type\", \"ems:Task\");\n      this.addTriple(triples, taskIRI, \"ems:title\", task.getTitle());\n      this.addTriple(\n        triples,\n        taskIRI,\n        \"ems:status\",\n        task.getStatus().toString(),\n      );\n      this.addTriple(\n        triples,\n        taskIRI,\n        \"ems:priority\",\n        task.getPriority().toString(),\n      );\n      this.addTriple(\n        triples,\n        taskIRI,\n        \"ems:createdAt\",\n        task.getCreatedAt().toISOString(),\n      );\n      this.addTriple(\n        triples,\n        taskIRI,\n        \"ems:updatedAt\",\n        task.getUpdatedAt().toISOString(),\n      );\n\n      // Add optional properties\n      const description = task.getDescription();\n      if (description) {\n        this.addTriple(triples, taskIRI, \"ems:description\", description);\n      }\n\n      const dueDate = task.getDueDate();\n      if (dueDate) {\n        this.addTriple(triples, taskIRI, \"ems:dueDate\", dueDate.toISOString());\n      }\n\n      const estimatedHours = task.getEstimatedHours();\n      if (estimatedHours !== undefined) {\n        this.addTriple(\n          triples,\n          taskIRI,\n          \"ems:estimatedHours\",\n          estimatedHours.toString(),\n        );\n      }\n\n      // Add project relationship\n      if (projectId) {\n        const projectIRI = this.ensureValidIRI(projectId);\n        this.addTriple(triples, taskIRI, \"ems:belongsToProject\", projectIRI);\n        this.addTriple(triples, projectIRI, \"ems:hasTask\", taskIRI);\n      }\n\n      // Add tags\n      for (const tag of task.getTags()) {\n        this.addTriple(triples, taskIRI, \"ems:hasTag\", tag);\n      }\n\n      // Add all triples to graph\n      for (const tripleData of triples) {\n        try {\n          // Ensure valid IRI format for subjects and predicates\n          const subjectIRI = this.ensureValidIRI(tripleData.subject);\n          const predicateIRI = this.ensureValidIRI(tripleData.predicate);\n\n          const triple = new Triple(\n            new IRI(subjectIRI),\n            new IRI(predicateIRI),\n            tripleData.object.startsWith('\"')\n              ? new Literal(tripleData.object.slice(1, -1))\n              : new IRI(this.ensureValidIRI(tripleData.object)),\n          );\n          this.graph.add(triple);\n        } catch (error) {\n          console.warn(\"Failed to create triple:\", tripleData, error);\n        }\n      }\n\n      return triples;\n    } catch (error) {\n      console.warn(\"Failed to update RDF graph:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Helper method to add triple data\n   */\n  private addTriple(\n    triples: CreateTaskResponse[\"rdfTriples\"],\n    subject: string,\n    predicate: string,\n    object: string,\n  ): void {\n    if (!triples) {\n      return;\n    }\n    triples.push({\n      subject,\n      predicate,\n      object:\n        object.includes(\" \") || object.includes(\":\") === false\n          ? `\"${object}\"`\n          : object,\n    });\n  }\n\n  /**\n   * Ensure a string is formatted as a valid IRI\n   */\n  private ensureValidIRI(value: string): string {\n    // If it looks like a UUID, wrap it in a namespace\n    if (\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(\n        value,\n      )\n    ) {\n      return `ems:${value}`;\n    }\n\n    // If it already has a scheme or namespace, return as-is\n    if (value.includes(\":\")) {\n      return value;\n    }\n\n    // Otherwise, add default namespace\n    return `ems:${value}`;\n  }\n}\n\n// Import required classes that might be missing\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { OntologyPrefix } from \"../../domain/value-objects/OntologyPrefix\";\n"],"version":3}