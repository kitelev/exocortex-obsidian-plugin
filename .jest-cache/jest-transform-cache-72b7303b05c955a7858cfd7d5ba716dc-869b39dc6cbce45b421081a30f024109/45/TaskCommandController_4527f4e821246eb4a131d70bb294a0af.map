{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/command-controllers/TaskCommandController.ts","mappings":";;;AAAA,uCAA0C;AAG1C,2GAAwG;AACxG,mGAAgG;AAChG,qGAAkG;AAClG,uGAAoG;AACpG,0EAAuE;AAEvE,6DAA0D;AAC1D,4EAAyE;AAEzE;;;GAGG;AACH,MAAa,qBAAqB;IAChC,YACmB,MAAc,EACd,KAAY;QADZ,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAO;IAC5B,CAAC;IAEJ,KAAK,CAAC,gBAAgB;QACpB,wCAAwC;QACxC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACrB,EAAE,EAAE,mBAAmB;YACvB,IAAI,EAAE,uCAAuC;YAC7C,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;YACpD,QAAQ,EAAE,KAAK,IAAI,EAAE;gBACnB,IAAI;oBACF,2BAA2B;oBAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;oBAC7D,MAAM,cAAc,GAAG,UAAU,EAAE,IAAI,CAAC;oBAExC,uCAAuC;oBACvC,MAAM,cAAc,GAAG,IAAI,+CAAsB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACnE,MAAM,eAAe,GAAG,IAAI,iDAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBACrE,MAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;oBACxC,kCAAkC;oBAClC,MAAM,SAAS,GAAG,yBAAW,CAAC,WAAW,EAAE,CAAC;oBAC5C,MAAM,YAAY,GAChB,SAAS,CAAC,OAAO,CAAkB,iBAAiB,CAAC,CAAC;oBAExD,mBAAmB;oBACnB,MAAM,wBAAwB,GAAG,IAAI,mDAAwB,CAC3D,eAAe,EACf,YAAY,EACZ,YAAY,CACb,CAAC;oBAEF,MAAM,iBAAiB,GAAG,IAAI,2DAA4B,CACxD,cAAc,EACd,eAAe,EACf,YAAY,EACZ,wBAAwB,CACzB,CAAC;oBAEF,aAAa;oBACb,MAAM,KAAK,GAAG,IAAI,+BAAc,CAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,EACf,iBAAiB,EACjB,wBAAwB,EACxB,cAAc,CACf,CAAC;oBACF,KAAK,CAAC,IAAI,EAAE,CAAC;iBACd;gBAAC,OAAO,KAAK,EAAE;oBACd,yBAAyB;oBACzB,IAAI,iBAAM,CAAC,iCAAiC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;iBAC9D;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,OAAO;QACX,+CAA+C;IACjD,CAAC;IAED,eAAe;QACb,OAAO,uBAAuB,CAAC;IACjC,CAAC;CACF;AAhED,sDAgEC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/command-controllers/TaskCommandController.ts"],"sourcesContent":["import { Plugin, Notice } from \"obsidian\";\nimport { ICommandController } from \"../../application/ports/ICommandController\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { CreateTaskFromProjectUseCase } from \"../../application/use-cases/CreateTaskFromProjectUseCase\";\nimport { GetCurrentProjectUseCase } from \"../../application/use-cases/GetCurrentProjectUseCase\";\nimport { ObsidianTaskRepository } from \"../../infrastructure/repositories/ObsidianTaskRepository\";\nimport { ObsidianAssetRepository } from \"../../infrastructure/repositories/ObsidianAssetRepository\";\nimport { IndexedGraph } from \"../../domain/semantic/core/IndexedGraph\";\nimport { ExoFocusService } from \"../../application/services/ExoFocusService\";\nimport { QuickTaskModal } from \"../modals/QuickTaskModal\";\nimport { DIContainer } from \"../../infrastructure/container/DIContainer\";\n\n/**\n * Task Command Controller following Controller Pattern (GRASP)\n * Single Responsibility: Handle task-related commands only\n */\nexport class TaskCommandController implements ICommandController {\n  constructor(\n    private readonly plugin: Plugin,\n    private readonly graph: Graph,\n  ) {}\n\n  async registerCommands(): Promise<void> {\n    // Register command: Quick Task Creation\n    this.plugin.addCommand({\n      id: \"quick-create-task\",\n      name: \"Quick create task for current project\",\n      hotkeys: [{ modifiers: [\"Mod\", \"Shift\"], key: \"t\" }],\n      callback: async () => {\n        try {\n          // Get current file context\n          const activeFile = this.plugin.app.workspace.getActiveFile();\n          const activeFilePath = activeFile?.path;\n\n          // Initialize repositories and services\n          const taskRepository = new ObsidianTaskRepository(this.plugin.app);\n          const assetRepository = new ObsidianAssetRepository(this.plugin.app);\n          const indexedGraph = new IndexedGraph();\n          // Get focusService from container\n          const container = DIContainer.getInstance();\n          const focusService =\n            container.resolve<ExoFocusService>(\"ExoFocusService\");\n\n          // Create use cases\n          const getCurrentProjectUseCase = new GetCurrentProjectUseCase(\n            assetRepository,\n            focusService,\n            indexedGraph,\n          );\n\n          const createTaskUseCase = new CreateTaskFromProjectUseCase(\n            taskRepository,\n            assetRepository,\n            indexedGraph,\n            getCurrentProjectUseCase,\n          );\n\n          // Open modal\n          const modal = new QuickTaskModal(\n            this.plugin.app,\n            createTaskUseCase,\n            getCurrentProjectUseCase,\n            activeFilePath,\n          );\n          modal.open();\n        } catch (error) {\n          // Quick task modal error\n          new Notice(`Failed to open task creation: ${error.message}`);\n        }\n      },\n    });\n  }\n\n  async cleanup(): Promise<void> {\n    // No specific cleanup needed for task commands\n  }\n\n  getControllerId(): string {\n    return \"TaskCommandController\";\n  }\n}\n"],"version":3}