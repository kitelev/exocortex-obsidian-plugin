597ed7b6eb704d0f3b97f84a4a101d0a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const TaskId_1 = require("../value-objects/TaskId");
const Priority_1 = require("../value-objects/Priority");
const TaskStatus_1 = require("../value-objects/TaskStatus");
const AssetId_1 = require("../value-objects/AssetId");
const Entity_1 = require("../core/Entity");
const Result_1 = require("../core/Result");
/**
 * Domain entity representing a Task in the Exocortex system
 * Follows domain-driven design principles with business rules
 */
class Task extends Entity_1.Entity {
    constructor(props) {
        super(props, props.id.toString());
    }
    generateId() {
        return this.props.id.toString();
    }
    validate() {
        if (!this.props.id) {
            throw new Error("Task must have a valid ID");
        }
        if (!this.props.title || this.props.title.trim().length === 0) {
            throw new Error("Task must have a non-empty title");
        }
        if (!this.props.priority) {
            throw new Error("Task must have a valid priority");
        }
        if (!this.props.status) {
            throw new Error("Task must have a valid status");
        }
    }
    static create(params) {
        // Validate required fields
        if (!params.title || params.title.trim().length === 0) {
            return Result_1.Result.fail("Task title cannot be empty");
        }
        if (params.title.length > 200) {
            return Result_1.Result.fail("Task title cannot exceed 200 characters");
        }
        if (params.estimatedHours !== undefined && params.estimatedHours < 0) {
            return Result_1.Result.fail("Estimated hours cannot be negative");
        }
        if (params.dueDate && params.dueDate < new Date()) {
            // Only warn for past due dates, don't fail creation
            console.warn("Task created with past due date:", params.dueDate);
        }
        const props = {
            id: TaskId_1.TaskId.generate(),
            title: params.title.trim(),
            description: params.description?.trim(),
            priority: params.priority || Priority_1.Priority.medium(),
            status: params.status || TaskStatus_1.TaskStatus.todo(),
            projectId: params.projectId,
            dueDate: params.dueDate,
            estimatedHours: params.estimatedHours,
            tags: params.tags || [],
            createdAt: new Date(),
            updatedAt: new Date(),
        };
        return Result_1.Result.ok(new Task(props));
    }
    // Getters
    getId() {
        return this.props.id;
    }
    getTitle() {
        return this.props.title;
    }
    getDescription() {
        return this.props.description;
    }
    getPriority() {
        return this.props.priority;
    }
    getStatus() {
        return this.props.status;
    }
    getProjectId() {
        return this.props.projectId;
    }
    getDueDate() {
        return this.props.dueDate;
    }
    getEstimatedHours() {
        return this.props.estimatedHours;
    }
    getTags() {
        return [...this.props.tags];
    }
    getCreatedAt() {
        return this.props.createdAt;
    }
    getUpdatedAt() {
        return this.props.updatedAt;
    }
    getCompletedAt() {
        return this.props.completedAt;
    }
    // Override equals to use TaskId comparison
    equals(object) {
        if (object === null || object === undefined) {
            return false;
        }
        if (this === object) {
            return true;
        }
        if (!(object instanceof Task)) {
            return false;
        }
        return this.props.id.equals(object.props.id);
    }
    // Business methods
    updateTitle(title) {
        if (!title || title.trim().length === 0) {
            return Result_1.Result.fail("Task title cannot be empty");
        }
        if (title.length > 200) {
            return Result_1.Result.fail("Task title cannot exceed 200 characters");
        }
        this.props.title = title.trim();
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    updateDescription(description) {
        this.props.description = description?.trim();
        this.props.updatedAt = new Date();
    }
    updatePriority(priority) {
        this.props.priority = priority;
        this.props.updatedAt = new Date();
    }
    updateStatus(status) {
        if (!this.props.status.canTransitionTo(status)) {
            return Result_1.Result.fail(`Cannot transition from ${this.props.status.toString()} to ${status.toString()}`);
        }
        this.props.status = status;
        this.props.updatedAt = new Date();
        // Set completion date when task is completed
        if (status.isCompleted()) {
            this.props.completedAt = new Date();
        }
        else if (this.props.completedAt) {
            // Clear completion date if task is reopened
            this.props.completedAt = undefined;
        }
        return Result_1.Result.ok();
    }
    assignToProject(projectId) {
        this.props.projectId = projectId;
        this.props.updatedAt = new Date();
    }
    removeFromProject() {
        this.props.projectId = undefined;
        this.props.updatedAt = new Date();
    }
    setDueDate(dueDate) {
        this.props.dueDate = dueDate;
        this.props.updatedAt = new Date();
    }
    removeDueDate() {
        this.props.dueDate = undefined;
        this.props.updatedAt = new Date();
    }
    setEstimatedHours(hours) {
        if (hours < 0) {
            return Result_1.Result.fail("Estimated hours cannot be negative");
        }
        this.props.estimatedHours = hours;
        this.props.updatedAt = new Date();
        return Result_1.Result.ok();
    }
    addTag(tag) {
        const normalizedTag = tag.trim().toLowerCase();
        if (normalizedTag && !this.props.tags.includes(normalizedTag)) {
            this.props.tags.push(normalizedTag);
            this.props.updatedAt = new Date();
        }
    }
    removeTag(tag) {
        const normalizedTag = tag.trim().toLowerCase();
        const index = this.props.tags.indexOf(normalizedTag);
        if (index > -1) {
            this.props.tags.splice(index, 1);
            this.props.updatedAt = new Date();
        }
    }
    hasTag(tag) {
        return this.props.tags.includes(tag.trim().toLowerCase());
    }
    // Query methods
    isOverdue() {
        return (this.props.dueDate !== undefined &&
            this.props.dueDate < new Date() &&
            this.props.status.isActive());
    }
    isDueToday() {
        if (!this.props.dueDate)
            return false;
        const today = new Date();
        const due = this.props.dueDate;
        return (today.getFullYear() === due.getFullYear() &&
            today.getMonth() === due.getMonth() &&
            today.getDate() === due.getDate());
    }
    isHighPriority() {
        return this.props.priority.isHigherThan(Priority_1.Priority.medium());
    }
    // Serialization methods
    toFrontmatter() {
        const frontmatter = {
            exo__Task_uid: this.props.id.toString(),
            exo__Task_title: this.props.title,
            exo__Task_priority: this.props.priority.toString(),
            exo__Task_status: this.props.status.toString(),
            exo__Task_createdAt: this.props.createdAt.toISOString(),
            exo__Task_updatedAt: this.props.updatedAt.toISOString(),
        };
        if (this.props.description) {
            frontmatter["exo__Task_description"] = this.props.description;
        }
        if (this.props.projectId) {
            frontmatter["exo__Effort_parent"] =
                `[[${this.props.projectId.toString()}]]`;
        }
        if (this.props.dueDate) {
            frontmatter["exo__Task_dueDate"] = this.props.dueDate
                .toISOString()
                .split("T")[0];
        }
        if (this.props.estimatedHours !== undefined) {
            frontmatter["exo__Task_estimatedHours"] = this.props.estimatedHours;
        }
        if (this.props.tags.length > 0) {
            frontmatter["exo__Task_tags"] = this.props.tags;
        }
        if (this.props.completedAt) {
            frontmatter["exo__Task_completedAt"] =
                this.props.completedAt.toISOString();
        }
        return frontmatter;
    }
    static fromFrontmatter(frontmatter, fileName) {
        try {
            const idResult = TaskId_1.TaskId.create(frontmatter["exo__Task_uid"] || TaskId_1.TaskId.generate().toString());
            const id = idResult.isSuccess ? idResult.getValue() : TaskId_1.TaskId.generate();
            const title = frontmatter["exo__Task_title"] || fileName.replace(".md", "");
            const description = frontmatter["exo__Task_description"];
            const priorityResult = Priority_1.Priority.create(frontmatter["exo__Task_priority"] || "medium");
            const priority = priorityResult.isSuccess
                ? priorityResult.getValue()
                : Priority_1.Priority.medium();
            const statusResult = TaskStatus_1.TaskStatus.create(frontmatter["exo__Task_status"] || "todo");
            const status = statusResult.isSuccess
                ? statusResult.getValue()
                : TaskStatus_1.TaskStatus.todo();
            let projectId;
            const parentValue = frontmatter["exo__Effort_parent"];
            if (parentValue) {
                const cleanParent = parentValue.toString().replace(/\[\[|\]\]/g, "");
                const projectIdResult = AssetId_1.AssetId.create(cleanParent);
                if (projectIdResult.isSuccess) {
                    projectId = projectIdResult.getValue();
                }
            }
            const dueDate = frontmatter["exo__Task_dueDate"]
                ? new Date(frontmatter["exo__Task_dueDate"])
                : undefined;
            const estimatedHours = frontmatter["exo__Task_estimatedHours"];
            const tags = Array.isArray(frontmatter["exo__Task_tags"])
                ? frontmatter["exo__Task_tags"]
                : [];
            const createdAt = frontmatter["exo__Task_createdAt"]
                ? new Date(frontmatter["exo__Task_createdAt"])
                : new Date();
            const result = Task.create({
                title,
                description,
                priority,
                status,
                projectId,
                dueDate,
                estimatedHours,
                tags,
            });
            if (result.isSuccess) {
                const task = result.getValue();
                // Update timestamps and completion date
                task.props.id = id;
                task.props.createdAt = createdAt;
                if (frontmatter["exo__Task_completedAt"]) {
                    task.props.completedAt = new Date(frontmatter["exo__Task_completedAt"]);
                }
                return task;
            }
            else {
                console.warn("Failed to create task from frontmatter:", result.error);
            }
            return null;
        }
        catch (error) {
            console.warn("Failed to create task from frontmatter:", error);
            return null;
        }
    }
    /**
     * Generates markdown content for the task
     */
    toMarkdown() {
        let content = `# ${this.props.title}\n\n`;
        if (this.props.description) {
            content += `${this.props.description}\n\n`;
        }
        content += `## Task Details\n\n`;
        content += `${this.props.status.toMarkdownCheckbox()} **Status**: ${this.props.status.toString()}\n`;
        content += `- **Priority**: ${this.props.priority.toString()}\n`;
        if (this.props.dueDate) {
            content += `- **Due Date**: ${this.props.dueDate.toISOString().split("T")[0]}\n`;
        }
        if (this.props.estimatedHours) {
            content += `- **Estimated Hours**: ${this.props.estimatedHours}\n`;
        }
        if (this.props.projectId) {
            content += `- **Project**: [[${this.props.projectId.toString()}]]\n`;
        }
        if (this.props.tags.length > 0) {
            content += `- **Tags**: ${this.props.tags.map((tag) => `#${tag}`).join(" ")}\n`;
        }
        content += `\n---\n\n`;
        content += `*Created: ${this.props.createdAt.toISOString()}*\n`;
        content += `*Updated: ${this.props.updatedAt.toISOString()}*\n`;
        if (this.props.completedAt) {
            content += `*Completed: ${this.props.completedAt.toISOString()}*\n`;
        }
        return content;
    }
}
exports.Task = Task;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9lbnRpdGllcy9UYXNrLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUFpRDtBQUNqRCx3REFBcUQ7QUFDckQsNERBQXlEO0FBQ3pELHNEQUFtRDtBQUNuRCwyQ0FBd0M7QUFDeEMsMkNBQXdDO0FBaUJ4Qzs7O0dBR0c7QUFDSCxNQUFhLElBQUssU0FBUSxlQUFpQjtJQUN6QyxZQUFvQixLQUFnQjtRQUNsQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRVMsVUFBVTtRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFUyxRQUFRO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNsQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7U0FDOUM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM3RCxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztTQUNsRDtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BU2I7UUFDQywyQkFBMkI7UUFD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QUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLE9BQU8sSUFBSSxlQUFlLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1NBQ2pGO1FBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQztRQUN2QixPQUFPLElBQUksYUFBYSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO1FBQ2hFLE9BQU8sSUFBSSxhQUFhLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUM7UUFFaEUsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUMxQixPQUFPLElBQUksZUFBZSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDO1NBQ3JFO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGO0FBNWFELG9CQTRhQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvZG9tYWluL2VudGl0aWVzL1Rhc2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGFza0lkIH0gZnJvbSBcIi4uL3ZhbHVlLW9iamVjdHMvVGFza0lkXCI7XG5pbXBvcnQgeyBQcmlvcml0eSB9IGZyb20gXCIuLi92YWx1ZS1vYmplY3RzL1ByaW9yaXR5XCI7XG5pbXBvcnQgeyBUYXNrU3RhdHVzIH0gZnJvbSBcIi4uL3ZhbHVlLW9iamVjdHMvVGFza1N0YXR1c1wiO1xuaW1wb3J0IHsgQXNzZXRJZCB9IGZyb20gXCIuLi92YWx1ZS1vYmplY3RzL0Fzc2V0SWRcIjtcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gXCIuLi9jb3JlL0VudGl0eVwiO1xuaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uL2NvcmUvUmVzdWx0XCI7XG5cbmludGVyZmFjZSBUYXNrUHJvcHMge1xuICBpZDogVGFza0lkO1xuICB0aXRsZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgcHJpb3JpdHk6IFByaW9yaXR5O1xuICBzdGF0dXM6IFRhc2tTdGF0dXM7XG4gIHByb2plY3RJZD86IEFzc2V0SWQ7XG4gIGR1ZURhdGU/OiBEYXRlO1xuICBlc3RpbWF0ZWRIb3Vycz86IG51bWJlcjtcbiAgdGFnczogc3RyaW5nW107XG4gIGNyZWF0ZWRBdDogRGF0ZTtcbiAgdXBkYXRlZEF0OiBEYXRlO1xuICBjb21wbGV0ZWRBdD86IERhdGU7XG59XG5cbi8qKlxuICogRG9tYWluIGVudGl0eSByZXByZXNlbnRpbmcgYSBUYXNrIGluIHRoZSBFeG9jb3J0ZXggc3lzdGVtXG4gKiBGb2xsb3dzIGRvbWFpbi1kcml2ZW4gZGVzaWduIHByaW5jaXBsZXMgd2l0aCBidXNpbmVzcyBydWxlc1xuICovXG5leHBvcnQgY2xhc3MgVGFzayBleHRlbmRzIEVudGl0eTxUYXNrUHJvcHM+IHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihwcm9wczogVGFza1Byb3BzKSB7XG4gICAgc3VwZXIocHJvcHMsIHByb3BzLmlkLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdlbmVyYXRlSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5pZC50b1N0cmluZygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5wcm9wcy5pZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGFzayBtdXN0IGhhdmUgYSB2YWxpZCBJRFwiKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHJvcHMudGl0bGUgfHwgdGhpcy5wcm9wcy50aXRsZS50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUYXNrIG11c3QgaGF2ZSBhIG5vbi1lbXB0eSB0aXRsZVwiKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucHJvcHMucHJpb3JpdHkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRhc2sgbXVzdCBoYXZlIGEgdmFsaWQgcHJpb3JpdHlcIik7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnByb3BzLnN0YXR1cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGFzayBtdXN0IGhhdmUgYSB2YWxpZCBzdGF0dXNcIik7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZShwYXJhbXM6IHtcbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIHByaW9yaXR5PzogUHJpb3JpdHk7XG4gICAgc3RhdHVzPzogVGFza1N0YXR1cztcbiAgICBwcm9qZWN0SWQ/OiBBc3NldElkO1xuICAgIGR1ZURhdGU/OiBEYXRlO1xuICAgIGVzdGltYXRlZEhvdXJzPzogbnVtYmVyO1xuICAgIHRhZ3M/OiBzdHJpbmdbXTtcbiAgfSk6IFJlc3VsdDxUYXNrPiB7XG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgaWYgKCFwYXJhbXMudGl0bGUgfHwgcGFyYW1zLnRpdGxlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxUYXNrPihcIlRhc2sgdGl0bGUgY2Fubm90IGJlIGVtcHR5XCIpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMudGl0bGUubGVuZ3RoID4gMjAwKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWw8VGFzaz4oXCJUYXNrIHRpdGxlIGNhbm5vdCBleGNlZWQgMjAwIGNoYXJhY3RlcnNcIik7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5lc3RpbWF0ZWRIb3VycyAhPT0gdW5kZWZpbmVkICYmIHBhcmFtcy5lc3RpbWF0ZWRIb3VycyA8IDApIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxUYXNrPihcIkVzdGltYXRlZCBob3VycyBjYW5ub3QgYmUgbmVnYXRpdmVcIik7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5kdWVEYXRlICYmIHBhcmFtcy5kdWVEYXRlIDwgbmV3IERhdGUoKSkge1xuICAgICAgLy8gT25seSB3YXJuIGZvciBwYXN0IGR1ZSBkYXRlcywgZG9uJ3QgZmFpbCBjcmVhdGlvblxuICAgICAgY29uc29sZS53YXJuKFwiVGFzayBjcmVhdGVkIHdpdGggcGFzdCBkdWUgZGF0ZTpcIiwgcGFyYW1zLmR1ZURhdGUpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3BzOiBUYXNrUHJvcHMgPSB7XG4gICAgICBpZDogVGFza0lkLmdlbmVyYXRlKCksXG4gICAgICB0aXRsZTogcGFyYW1zLnRpdGxlLnRyaW0oKSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwYXJhbXMuZGVzY3JpcHRpb24/LnRyaW0oKSxcbiAgICAgIHByaW9yaXR5OiBwYXJhbXMucHJpb3JpdHkgfHwgUHJpb3JpdHkubWVkaXVtKCksXG4gICAgICBzdGF0dXM6IHBhcmFtcy5zdGF0dXMgfHwgVGFza1N0YXR1cy50b2RvKCksXG4gICAgICBwcm9qZWN0SWQ6IHBhcmFtcy5wcm9qZWN0SWQsXG4gICAgICBkdWVEYXRlOiBwYXJhbXMuZHVlRGF0ZSxcbiAgICAgIGVzdGltYXRlZEhvdXJzOiBwYXJhbXMuZXN0aW1hdGVkSG91cnMsXG4gICAgICB0YWdzOiBwYXJhbXMudGFncyB8fCBbXSxcbiAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlc3VsdC5vazxUYXNrPihuZXcgVGFzayhwcm9wcykpO1xuICB9XG5cbiAgLy8gR2V0dGVyc1xuICBnZXRJZCgpOiBUYXNrSWQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmlkO1xuICB9XG5cbiAgZ2V0VGl0bGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy50aXRsZTtcbiAgfVxuXG4gIGdldERlc2NyaXB0aW9uKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGVzY3JpcHRpb247XG4gIH1cblxuICBnZXRQcmlvcml0eSgpOiBQcmlvcml0eSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMucHJpb3JpdHk7XG4gIH1cblxuICBnZXRTdGF0dXMoKTogVGFza1N0YXR1cyB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuc3RhdHVzO1xuICB9XG5cbiAgZ2V0UHJvamVjdElkKCk6IEFzc2V0SWQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnByb2plY3RJZDtcbiAgfVxuXG4gIGdldER1ZURhdGUoKTogRGF0ZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZHVlRGF0ZTtcbiAgfVxuXG4gIGdldEVzdGltYXRlZEhvdXJzKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZXN0aW1hdGVkSG91cnM7XG4gIH1cblxuICBnZXRUYWdzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMucHJvcHMudGFnc107XG4gIH1cblxuICBnZXRDcmVhdGVkQXQoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY3JlYXRlZEF0O1xuICB9XG5cbiAgZ2V0VXBkYXRlZEF0KCk6IERhdGUge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnVwZGF0ZWRBdDtcbiAgfVxuXG4gIGdldENvbXBsZXRlZEF0KCk6IERhdGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNvbXBsZXRlZEF0O1xuICB9XG5cbiAgLy8gT3ZlcnJpZGUgZXF1YWxzIHRvIHVzZSBUYXNrSWQgY29tcGFyaXNvblxuICBwdWJsaWMgZXF1YWxzKG9iamVjdD86IEVudGl0eTxUYXNrUHJvcHM+KTogYm9vbGVhbiB7XG4gICAgaWYgKG9iamVjdCA9PT0gbnVsbCB8fCBvYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzID09PSBvYmplY3QpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIFRhc2spKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJvcHMuaWQuZXF1YWxzKG9iamVjdC5wcm9wcy5pZCk7XG4gIH1cblxuICAvLyBCdXNpbmVzcyBtZXRob2RzXG4gIHVwZGF0ZVRpdGxlKHRpdGxlOiBzdHJpbmcpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGlmICghdGl0bGUgfHwgdGl0bGUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPHZvaWQ+KFwiVGFzayB0aXRsZSBjYW5ub3QgYmUgZW1wdHlcIik7XG4gICAgfVxuXG4gICAgaWYgKHRpdGxlLmxlbmd0aCA+IDIwMCkge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPHZvaWQ+KFwiVGFzayB0aXRsZSBjYW5ub3QgZXhjZWVkIDIwMCBjaGFyYWN0ZXJzXCIpO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMudGl0bGUgPSB0aXRsZS50cmltKCk7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIHJldHVybiBSZXN1bHQub2s8dm9pZD4oKTtcbiAgfVxuXG4gIHVwZGF0ZURlc2NyaXB0aW9uKGRlc2NyaXB0aW9uPzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5wcm9wcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uPy50cmltKCk7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlUHJpb3JpdHkocHJpb3JpdHk6IFByaW9yaXR5KTogdm9pZCB7XG4gICAgdGhpcy5wcm9wcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHRoaXMucHJvcHMudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXR1cyhzdGF0dXM6IFRhc2tTdGF0dXMpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5zdGF0dXMuY2FuVHJhbnNpdGlvblRvKHN0YXR1cykpIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDx2b2lkPihcbiAgICAgICAgYENhbm5vdCB0cmFuc2l0aW9uIGZyb20gJHt0aGlzLnByb3BzLnN0YXR1cy50b1N0cmluZygpfSB0byAke3N0YXR1cy50b1N0cmluZygpfWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMuc3RhdHVzID0gc3RhdHVzO1xuICAgIHRoaXMucHJvcHMudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcblxuICAgIC8vIFNldCBjb21wbGV0aW9uIGRhdGUgd2hlbiB0YXNrIGlzIGNvbXBsZXRlZFxuICAgIGlmIChzdGF0dXMuaXNDb21wbGV0ZWQoKSkge1xuICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLmNvbXBsZXRlZEF0KSB7XG4gICAgICAvLyBDbGVhciBjb21wbGV0aW9uIGRhdGUgaWYgdGFzayBpcyByZW9wZW5lZFxuICAgICAgdGhpcy5wcm9wcy5jb21wbGV0ZWRBdCA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVzdWx0Lm9rPHZvaWQ+KCk7XG4gIH1cblxuICBhc3NpZ25Ub1Byb2plY3QocHJvamVjdElkOiBBc3NldElkKTogdm9pZCB7XG4gICAgdGhpcy5wcm9wcy5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICB9XG5cbiAgcmVtb3ZlRnJvbVByb2plY3QoKTogdm9pZCB7XG4gICAgdGhpcy5wcm9wcy5wcm9qZWN0SWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICB9XG5cbiAgc2V0RHVlRGF0ZShkdWVEYXRlOiBEYXRlKTogdm9pZCB7XG4gICAgdGhpcy5wcm9wcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB0aGlzLnByb3BzLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gIH1cblxuICByZW1vdmVEdWVEYXRlKCk6IHZvaWQge1xuICAgIHRoaXMucHJvcHMuZHVlRGF0ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnByb3BzLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gIH1cblxuICBzZXRFc3RpbWF0ZWRIb3Vycyhob3VyczogbnVtYmVyKTogUmVzdWx0PHZvaWQ+IHtcbiAgICBpZiAoaG91cnMgPCAwKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWw8dm9pZD4oXCJFc3RpbWF0ZWQgaG91cnMgY2Fubm90IGJlIG5lZ2F0aXZlXCIpO1xuICAgIH1cblxuICAgIHRoaXMucHJvcHMuZXN0aW1hdGVkSG91cnMgPSBob3VycztcbiAgICB0aGlzLnByb3BzLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIFJlc3VsdC5vazx2b2lkPigpO1xuICB9XG5cbiAgYWRkVGFnKHRhZzogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFRhZyA9IHRhZy50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobm9ybWFsaXplZFRhZyAmJiAhdGhpcy5wcm9wcy50YWdzLmluY2x1ZGVzKG5vcm1hbGl6ZWRUYWcpKSB7XG4gICAgICB0aGlzLnByb3BzLnRhZ3MucHVzaChub3JtYWxpemVkVGFnKTtcbiAgICAgIHRoaXMucHJvcHMudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVUYWcodGFnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBub3JtYWxpemVkVGFnID0gdGFnLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wcm9wcy50YWdzLmluZGV4T2Yobm9ybWFsaXplZFRhZyk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMucHJvcHMudGFncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdGhpcy5wcm9wcy51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGhhc1RhZyh0YWc6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnRhZ3MuaW5jbHVkZXModGFnLnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIC8vIFF1ZXJ5IG1ldGhvZHNcbiAgaXNPdmVyZHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLnByb3BzLmR1ZURhdGUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgdGhpcy5wcm9wcy5kdWVEYXRlIDwgbmV3IERhdGUoKSAmJlxuICAgICAgdGhpcy5wcm9wcy5zdGF0dXMuaXNBY3RpdmUoKVxuICAgICk7XG4gIH1cblxuICBpc0R1ZVRvZGF5KCk6IGJvb2xlYW4ge1xuICAgIGlmICghdGhpcy5wcm9wcy5kdWVEYXRlKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgZHVlID0gdGhpcy5wcm9wcy5kdWVEYXRlO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHRvZGF5LmdldEZ1bGxZZWFyKCkgPT09IGR1ZS5nZXRGdWxsWWVhcigpICYmXG4gICAgICB0b2RheS5nZXRNb250aCgpID09PSBkdWUuZ2V0TW9udGgoKSAmJlxuICAgICAgdG9kYXkuZ2V0RGF0ZSgpID09PSBkdWUuZ2V0RGF0ZSgpXG4gICAgKTtcbiAgfVxuXG4gIGlzSGlnaFByaW9yaXR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLnByaW9yaXR5LmlzSGlnaGVyVGhhbihQcmlvcml0eS5tZWRpdW0oKSk7XG4gIH1cblxuICAvLyBTZXJpYWxpemF0aW9uIG1ldGhvZHNcbiAgdG9Gcm9udG1hdHRlcigpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICBjb25zdCBmcm9udG1hdHRlcjogUmVjb3JkPHN0cmluZywgYW55PiA9IHtcbiAgICAgIGV4b19fVGFza191aWQ6IHRoaXMucHJvcHMuaWQudG9TdHJpbmcoKSxcbiAgICAgIGV4b19fVGFza190aXRsZTogdGhpcy5wcm9wcy50aXRsZSxcbiAgICAgIGV4b19fVGFza19wcmlvcml0eTogdGhpcy5wcm9wcy5wcmlvcml0eS50b1N0cmluZygpLFxuICAgICAgZXhvX19UYXNrX3N0YXR1czogdGhpcy5wcm9wcy5zdGF0dXMudG9TdHJpbmcoKSxcbiAgICAgIGV4b19fVGFza19jcmVhdGVkQXQ6IHRoaXMucHJvcHMuY3JlYXRlZEF0LnRvSVNPU3RyaW5nKCksXG4gICAgICBleG9fX1Rhc2tfdXBkYXRlZEF0OiB0aGlzLnByb3BzLnVwZGF0ZWRBdC50b0lTT1N0cmluZygpLFxuICAgIH07XG5cbiAgICBpZiAodGhpcy5wcm9wcy5kZXNjcmlwdGlvbikge1xuICAgICAgZnJvbnRtYXR0ZXJbXCJleG9fX1Rhc2tfZGVzY3JpcHRpb25cIl0gPSB0aGlzLnByb3BzLmRlc2NyaXB0aW9uO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnByb2plY3RJZCkge1xuICAgICAgZnJvbnRtYXR0ZXJbXCJleG9fX0VmZm9ydF9wYXJlbnRcIl0gPVxuICAgICAgICBgW1ske3RoaXMucHJvcHMucHJvamVjdElkLnRvU3RyaW5nKCl9XV1gO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmR1ZURhdGUpIHtcbiAgICAgIGZyb250bWF0dGVyW1wiZXhvX19UYXNrX2R1ZURhdGVcIl0gPSB0aGlzLnByb3BzLmR1ZURhdGVcbiAgICAgICAgLnRvSVNPU3RyaW5nKClcbiAgICAgICAgLnNwbGl0KFwiVFwiKVswXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9wcy5lc3RpbWF0ZWRIb3VycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza19lc3RpbWF0ZWRIb3Vyc1wiXSA9IHRoaXMucHJvcHMuZXN0aW1hdGVkSG91cnM7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMudGFncy5sZW5ndGggPiAwKSB7XG4gICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza190YWdzXCJdID0gdGhpcy5wcm9wcy50YWdzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmNvbXBsZXRlZEF0KSB7XG4gICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza19jb21wbGV0ZWRBdFwiXSA9XG4gICAgICAgIHRoaXMucHJvcHMuY29tcGxldGVkQXQudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbnRtYXR0ZXI7XG4gIH1cblxuICBzdGF0aWMgZnJvbUZyb250bWF0dGVyKFxuICAgIGZyb250bWF0dGVyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICk6IFRhc2sgfCBudWxsIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaWRSZXN1bHQgPSBUYXNrSWQuY3JlYXRlKFxuICAgICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza191aWRcIl0gfHwgVGFza0lkLmdlbmVyYXRlKCkudG9TdHJpbmcoKSxcbiAgICAgICk7XG4gICAgICBjb25zdCBpZCA9IGlkUmVzdWx0LmlzU3VjY2VzcyA/IGlkUmVzdWx0LmdldFZhbHVlKCkgOiBUYXNrSWQuZ2VuZXJhdGUoKTtcblxuICAgICAgY29uc3QgdGl0bGUgPVxuICAgICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza190aXRsZVwiXSB8fCBmaWxlTmFtZS5yZXBsYWNlKFwiLm1kXCIsIFwiXCIpO1xuICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBmcm9udG1hdHRlcltcImV4b19fVGFza19kZXNjcmlwdGlvblwiXTtcblxuICAgICAgY29uc3QgcHJpb3JpdHlSZXN1bHQgPSBQcmlvcml0eS5jcmVhdGUoXG4gICAgICAgIGZyb250bWF0dGVyW1wiZXhvX19UYXNrX3ByaW9yaXR5XCJdIHx8IFwibWVkaXVtXCIsXG4gICAgICApO1xuICAgICAgY29uc3QgcHJpb3JpdHkgPSBwcmlvcml0eVJlc3VsdC5pc1N1Y2Nlc3NcbiAgICAgICAgPyBwcmlvcml0eVJlc3VsdC5nZXRWYWx1ZSgpXG4gICAgICAgIDogUHJpb3JpdHkubWVkaXVtKCk7XG5cbiAgICAgIGNvbnN0IHN0YXR1c1Jlc3VsdCA9IFRhc2tTdGF0dXMuY3JlYXRlKFxuICAgICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza19zdGF0dXNcIl0gfHwgXCJ0b2RvXCIsXG4gICAgICApO1xuICAgICAgY29uc3Qgc3RhdHVzID0gc3RhdHVzUmVzdWx0LmlzU3VjY2Vzc1xuICAgICAgICA/IHN0YXR1c1Jlc3VsdC5nZXRWYWx1ZSgpXG4gICAgICAgIDogVGFza1N0YXR1cy50b2RvKCk7XG5cbiAgICAgIGxldCBwcm9qZWN0SWQ6IEFzc2V0SWQgfCB1bmRlZmluZWQ7XG4gICAgICBjb25zdCBwYXJlbnRWYWx1ZSA9IGZyb250bWF0dGVyW1wiZXhvX19FZmZvcnRfcGFyZW50XCJdO1xuICAgICAgaWYgKHBhcmVudFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNsZWFuUGFyZW50ID0gcGFyZW50VmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKC9cXFtcXFt8XFxdXFxdL2csIFwiXCIpO1xuICAgICAgICBjb25zdCBwcm9qZWN0SWRSZXN1bHQgPSBBc3NldElkLmNyZWF0ZShjbGVhblBhcmVudCk7XG4gICAgICAgIGlmIChwcm9qZWN0SWRSZXN1bHQuaXNTdWNjZXNzKSB7XG4gICAgICAgICAgcHJvamVjdElkID0gcHJvamVjdElkUmVzdWx0LmdldFZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZHVlRGF0ZSA9IGZyb250bWF0dGVyW1wiZXhvX19UYXNrX2R1ZURhdGVcIl1cbiAgICAgICAgPyBuZXcgRGF0ZShmcm9udG1hdHRlcltcImV4b19fVGFza19kdWVEYXRlXCJdKVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgIGNvbnN0IGVzdGltYXRlZEhvdXJzID0gZnJvbnRtYXR0ZXJbXCJleG9fX1Rhc2tfZXN0aW1hdGVkSG91cnNcIl07XG4gICAgICBjb25zdCB0YWdzID0gQXJyYXkuaXNBcnJheShmcm9udG1hdHRlcltcImV4b19fVGFza190YWdzXCJdKVxuICAgICAgICA/IGZyb250bWF0dGVyW1wiZXhvX19UYXNrX3RhZ3NcIl1cbiAgICAgICAgOiBbXTtcblxuICAgICAgY29uc3QgY3JlYXRlZEF0ID0gZnJvbnRtYXR0ZXJbXCJleG9fX1Rhc2tfY3JlYXRlZEF0XCJdXG4gICAgICAgID8gbmV3IERhdGUoZnJvbnRtYXR0ZXJbXCJleG9fX1Rhc2tfY3JlYXRlZEF0XCJdKVxuICAgICAgICA6IG5ldyBEYXRlKCk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IFRhc2suY3JlYXRlKHtcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBwcmlvcml0eSxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBwcm9qZWN0SWQsXG4gICAgICAgIGR1ZURhdGUsXG4gICAgICAgIGVzdGltYXRlZEhvdXJzLFxuICAgICAgICB0YWdzLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQuaXNTdWNjZXNzKSB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSByZXN1bHQuZ2V0VmFsdWUoKSE7XG4gICAgICAgIC8vIFVwZGF0ZSB0aW1lc3RhbXBzIGFuZCBjb21wbGV0aW9uIGRhdGVcbiAgICAgICAgKHRhc2sgYXMgYW55KS5wcm9wcy5pZCA9IGlkO1xuICAgICAgICAodGFzayBhcyBhbnkpLnByb3BzLmNyZWF0ZWRBdCA9IGNyZWF0ZWRBdDtcblxuICAgICAgICBpZiAoZnJvbnRtYXR0ZXJbXCJleG9fX1Rhc2tfY29tcGxldGVkQXRcIl0pIHtcbiAgICAgICAgICAodGFzayBhcyBhbnkpLnByb3BzLmNvbXBsZXRlZEF0ID0gbmV3IERhdGUoXG4gICAgICAgICAgICBmcm9udG1hdHRlcltcImV4b19fVGFza19jb21wbGV0ZWRBdFwiXSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhc2s7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gY3JlYXRlIHRhc2sgZnJvbSBmcm9udG1hdHRlcjpcIiwgcmVzdWx0LmVycm9yKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkZhaWxlZCB0byBjcmVhdGUgdGFzayBmcm9tIGZyb250bWF0dGVyOlwiLCBlcnJvcik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIG1hcmtkb3duIGNvbnRlbnQgZm9yIHRoZSB0YXNrXG4gICAqL1xuICB0b01hcmtkb3duKCk6IHN0cmluZyB7XG4gICAgbGV0IGNvbnRlbnQgPSBgIyAke3RoaXMucHJvcHMudGl0bGV9XFxuXFxuYDtcblxuICAgIGlmICh0aGlzLnByb3BzLmRlc2NyaXB0aW9uKSB7XG4gICAgICBjb250ZW50ICs9IGAke3RoaXMucHJvcHMuZGVzY3JpcHRpb259XFxuXFxuYDtcbiAgICB9XG5cbiAgICBjb250ZW50ICs9IGAjIyBUYXNrIERldGFpbHNcXG5cXG5gO1xuICAgIGNvbnRlbnQgKz0gYCR7dGhpcy5wcm9wcy5zdGF0dXMudG9NYXJrZG93bkNoZWNrYm94KCl9ICoqU3RhdHVzKio6ICR7dGhpcy5wcm9wcy5zdGF0dXMudG9TdHJpbmcoKX1cXG5gO1xuICAgIGNvbnRlbnQgKz0gYC0gKipQcmlvcml0eSoqOiAke3RoaXMucHJvcHMucHJpb3JpdHkudG9TdHJpbmcoKX1cXG5gO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuZHVlRGF0ZSkge1xuICAgICAgY29udGVudCArPSBgLSAqKkR1ZSBEYXRlKio6ICR7dGhpcy5wcm9wcy5kdWVEYXRlLnRvSVNPU3RyaW5nKCkuc3BsaXQoXCJUXCIpWzBdfVxcbmA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuZXN0aW1hdGVkSG91cnMpIHtcbiAgICAgIGNvbnRlbnQgKz0gYC0gKipFc3RpbWF0ZWQgSG91cnMqKjogJHt0aGlzLnByb3BzLmVzdGltYXRlZEhvdXJzfVxcbmA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMucHJvamVjdElkKSB7XG4gICAgICBjb250ZW50ICs9IGAtICoqUHJvamVjdCoqOiBbWyR7dGhpcy5wcm9wcy5wcm9qZWN0SWQudG9TdHJpbmcoKX1dXVxcbmA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMudGFncy5sZW5ndGggPiAwKSB7XG4gICAgICBjb250ZW50ICs9IGAtICoqVGFncyoqOiAke3RoaXMucHJvcHMudGFncy5tYXAoKHRhZykgPT4gYCMke3RhZ31gKS5qb2luKFwiIFwiKX1cXG5gO1xuICAgIH1cblxuICAgIGNvbnRlbnQgKz0gYFxcbi0tLVxcblxcbmA7XG4gICAgY29udGVudCArPSBgKkNyZWF0ZWQ6ICR7dGhpcy5wcm9wcy5jcmVhdGVkQXQudG9JU09TdHJpbmcoKX0qXFxuYDtcbiAgICBjb250ZW50ICs9IGAqVXBkYXRlZDogJHt0aGlzLnByb3BzLnVwZGF0ZWRBdC50b0lTT1N0cmluZygpfSpcXG5gO1xuXG4gICAgaWYgKHRoaXMucHJvcHMuY29tcGxldGVkQXQpIHtcbiAgICAgIGNvbnRlbnQgKz0gYCpDb21wbGV0ZWQ6ICR7dGhpcy5wcm9wcy5jb21wbGV0ZWRBdC50b0lTT1N0cmluZygpfSpcXG5gO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50O1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=