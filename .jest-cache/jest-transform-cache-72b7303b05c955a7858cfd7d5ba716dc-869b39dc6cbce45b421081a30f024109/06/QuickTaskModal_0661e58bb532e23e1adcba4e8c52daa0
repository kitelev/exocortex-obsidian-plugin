e24e06dee384a0623fdf74f718314ad1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickTaskModal = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
/**
 * Modal for quick task creation with project context
 * Provides streamlined UI for creating tasks linked to current project
 */
class QuickTaskModal extends obsidian_1.Modal {
    constructor(app, createTaskUseCase, getCurrentProjectUseCase, activeFile) {
        super(app);
        this.createTaskUseCase = createTaskUseCase;
        this.getCurrentProjectUseCase = getCurrentProjectUseCase;
        this.activeFile = activeFile;
        this.taskTitle = '';
        this.taskDescription = '';
        this.taskPriority = 'medium';
        this.taskStatus = 'todo';
        this.taskDueDate = '';
        this.taskTags = [];
        this.availableProjects = [];
    }
    onOpen() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { contentEl } = this;
            contentEl.empty();
            // Add modal title
            contentEl.createEl('h2', { text: 'Create New Task' });
            // Load current project context
            yield this.loadProjectContext();
            // Project selection
            if (this.currentProject) {
                const projectDiv = contentEl.createDiv({ cls: 'quick-task-project' });
                projectDiv.createEl('div', {
                    text: `Project: ${this.currentProject.title}`,
                    cls: 'quick-task-project-current'
                });
                this.selectedProjectId = this.currentProject.id;
            }
            // Show available projects if multiple found
            if (this.availableProjects.length > 1) {
                new obsidian_1.Setting(contentEl)
                    .setName('Project')
                    .setDesc('Select the project for this task')
                    .addDropdown(dropdown => {
                    // Add empty option
                    dropdown.addOption('', 'No project');
                    // Add all available projects
                    this.availableProjects.forEach(project => {
                        dropdown.addOption(project.id, project.title);
                    });
                    // Set current selection
                    if (this.currentProject) {
                        dropdown.setValue(this.currentProject.id);
                    }
                    dropdown.onChange(value => {
                        this.selectedProjectId = value || undefined;
                    });
                });
            }
            // Task title
            new obsidian_1.Setting(contentEl)
                .setName('Title')
                .setDesc('Enter the task title (required)')
                .addText(text => {
                text.inputEl.addClass('quick-task-title-input');
                text.setPlaceholder('Task title...');
                text.onChange(value => {
                    this.taskTitle = value;
                });
                // Focus on title input
                text.inputEl.focus();
                // Select all text for quick replacement
                text.inputEl.select();
            });
            // Task description
            new obsidian_1.Setting(contentEl)
                .setName('Description')
                .setDesc('Optional task description')
                .addTextArea(text => {
                text.inputEl.addClass('quick-task-description-input');
                text.setPlaceholder('Task description...');
                text.inputEl.rows = 3;
                text.onChange(value => {
                    this.taskDescription = value;
                });
            });
            // Priority and Status row
            const priorityStatusDiv = contentEl.createDiv({ cls: 'quick-task-row' });
            // Priority
            new obsidian_1.Setting(priorityStatusDiv)
                .setName('Priority')
                .addDropdown(dropdown => {
                dropdown
                    .addOption('low', '🟢 Low')
                    .addOption('medium', '🟡 Medium')
                    .addOption('high', '🟠 High')
                    .addOption('urgent', '🔴 Urgent')
                    .setValue(this.taskPriority)
                    .onChange(value => {
                    this.taskPriority = value;
                });
            });
            // Status
            new obsidian_1.Setting(priorityStatusDiv)
                .setName('Status')
                .addDropdown(dropdown => {
                dropdown
                    .addOption('todo', '📋 Todo')
                    .addOption('in-progress', '🔄 In Progress')
                    .addOption('done', '✅ Done')
                    .addOption('cancelled', '❌ Cancelled')
                    .setValue(this.taskStatus)
                    .onChange(value => {
                    this.taskStatus = value;
                });
            });
            // Due date and estimated hours row
            const dateHoursDiv = contentEl.createDiv({ cls: 'quick-task-row' });
            // Due date
            new obsidian_1.Setting(dateHoursDiv)
                .setName('Due Date')
                .addText(text => {
                text.inputEl.type = 'date';
                text.onChange(value => {
                    this.taskDueDate = value;
                });
                // Set default to tomorrow
                const tomorrow = new Date();
                tomorrow.setDate(tomorrow.getDate() + 1);
                text.setValue(tomorrow.toISOString().split('T')[0]);
                this.taskDueDate = tomorrow.toISOString().split('T')[0];
            });
            // Estimated hours
            new obsidian_1.Setting(dateHoursDiv)
                .setName('Est. Hours')
                .addText(text => {
                text.inputEl.type = 'number';
                text.inputEl.min = '0';
                text.inputEl.step = '0.5';
                text.setPlaceholder('0');
                text.onChange(value => {
                    const hours = parseFloat(value);
                    this.taskEstimatedHours = isNaN(hours) ? undefined : hours;
                });
            });
            // Tags
            new obsidian_1.Setting(contentEl)
                .setName('Tags')
                .setDesc('Enter tags separated by commas')
                .addText(text => {
                text.inputEl.addClass('quick-task-tags-input');
                text.setPlaceholder('tag1, tag2, tag3');
                text.onChange(value => {
                    this.taskTags = value
                        .split(',')
                        .map(tag => tag.trim())
                        .filter(tag => tag.length > 0);
                });
            });
            // Action buttons
            const buttonDiv = contentEl.createDiv({ cls: 'quick-task-buttons' });
            // Create button
            const createBtn = buttonDiv.createEl('button', {
                text: 'Create Task',
                cls: 'mod-cta'
            });
            createBtn.addEventListener('click', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield this.createTask();
            }));
            // Create and continue button
            const createContinueBtn = buttonDiv.createEl('button', {
                text: 'Create & Continue',
                cls: 'mod-primary'
            });
            createContinueBtn.addEventListener('click', () => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const success = yield this.createTask();
                if (success) {
                    // Clear form for next task
                    this.resetForm();
                    // Reopen modal
                    this.onOpen();
                }
            }));
            // Cancel button
            const cancelBtn = buttonDiv.createEl('button', {
                text: 'Cancel'
            });
            cancelBtn.addEventListener('click', () => {
                this.close();
            });
            // Add styles
            this.addStyles();
            // Handle Enter key to create task
            contentEl.addEventListener('keydown', (e) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (e.key === 'Enter' && e.ctrlKey) {
                    yield this.createTask();
                }
            }));
        });
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
    /**
     * Load current project context
     */
    loadProjectContext() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.getCurrentProjectUseCase.execute({
                    activeFile: this.activeFile,
                    preferences: {
                        includeCompleted: false,
                        maxResults: 10,
                        selectionStrategy: 'context'
                    }
                });
                if (response.success && response.currentProject) {
                    this.currentProject = response.currentProject;
                }
                if (response.availableProjects && response.availableProjects.length > 0) {
                    this.availableProjects = response.availableProjects;
                }
            }
            catch (error) {
                console.error('Failed to load project context:', error);
            }
        });
    }
    /**
     * Create the task
     */
    createTask() {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Validate required fields
            if (!this.taskTitle || this.taskTitle.trim().length === 0) {
                new obsidian_1.Notice('Task title is required');
                return false;
            }
            try {
                // Build request
                const request = {
                    title: this.taskTitle.trim(),
                    description: this.taskDescription.trim() || undefined,
                    priority: this.taskPriority,
                    status: this.taskStatus,
                    projectId: this.selectedProjectId,
                    dueDate: this.taskDueDate || undefined,
                    estimatedHours: this.taskEstimatedHours,
                    tags: this.taskTags,
                    context: {
                        activeFile: this.activeFile
                    }
                };
                // Execute use case
                const response = yield this.createTaskUseCase.execute(request);
                if (response.success) {
                    new obsidian_1.Notice(`Task "${(_a = response.task) === null || _a === void 0 ? void 0 : _a.title}" created successfully`);
                    this.close();
                    return true;
                }
                else {
                    new obsidian_1.Notice(`Failed to create task: ${response.message}`);
                    console.error('Task creation failed:', response.errors);
                    return false;
                }
            }
            catch (error) {
                new obsidian_1.Notice(`Error creating task: ${error.message}`);
                console.error('Task creation error:', error);
                return false;
            }
        });
    }
    /**
     * Reset form fields
     */
    resetForm() {
        this.taskTitle = '';
        this.taskDescription = '';
        this.taskPriority = 'medium';
        this.taskStatus = 'todo';
        this.taskDueDate = '';
        this.taskEstimatedHours = undefined;
        this.taskTags = [];
        // Keep project context
    }
    /**
     * Add custom styles
     */
    addStyles() {
        const style = document.createElement('style');
        style.textContent = `
      .quick-task-project {
        padding: 10px;
        margin-bottom: 15px;
        background: var(--background-secondary);
        border-radius: 5px;
      }

      .quick-task-project-current {
        font-weight: bold;
        color: var(--text-accent);
      }

      .quick-task-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
      }

      .quick-task-row .setting-item {
        flex: 1;
        margin-bottom: 0;
      }

      .quick-task-title-input {
        font-size: 1.1em;
        font-weight: bold;
      }

      .quick-task-description-input {
        font-family: var(--font-monospace);
        min-height: 60px;
      }

      .quick-task-tags-input {
        font-family: var(--font-monospace);
      }

      .quick-task-buttons {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid var(--background-modifier-border);
      }

      .quick-task-buttons button {
        padding: 8px 16px;
      }
    `;
        document.head.appendChild(style);
    }
}
exports.QuickTaskModal = QuickTaskModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,