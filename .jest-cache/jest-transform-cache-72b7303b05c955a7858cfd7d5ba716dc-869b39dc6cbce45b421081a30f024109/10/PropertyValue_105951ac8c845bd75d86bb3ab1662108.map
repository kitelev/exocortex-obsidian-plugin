{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/PropertyValue.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/PropertyValue.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\n\n/**\n * Enumeration of supported property value types\n */\nexport enum PropertyValueType {\n  STRING = \"string\",\n  NUMBER = \"number\",\n  BOOLEAN = \"boolean\",\n  DATE = \"date\",\n  ARRAY = \"array\",\n  OBJECT = \"object\",\n  REFERENCE = \"reference\", // For WikiLinks like [[AssetName]]\n  IRI = \"iri\", // For semantic web IRIs\n}\n\n/**\n * Value object representing a typed property value in the domain\n * Ensures type safety and validation for asset properties\n */\nexport class PropertyValue {\n  private readonly _value: any;\n  private readonly _type: PropertyValueType;\n  private readonly _constraints: PropertyConstraints;\n\n  private constructor(\n    value: any,\n    type: PropertyValueType,\n    constraints: PropertyConstraints = {},\n  ) {\n    this._value = value;\n    this._type = type;\n    this._constraints = constraints;\n  }\n\n  /**\n   * Create a PropertyValue with automatic type detection\n   */\n  static create(\n    value: any,\n    constraints: PropertyConstraints = {},\n  ): Result<PropertyValue> {\n    if (value === null || value === undefined) {\n      return Result.fail<PropertyValue>(\n        \"Property value cannot be null or undefined\",\n      );\n    }\n\n    const type = PropertyValue.detectType(value);\n    const validationResult = PropertyValue.validateValue(\n      value,\n      type,\n      constraints,\n    );\n\n    if (!validationResult.isValid) {\n      return Result.fail<PropertyValue>(validationResult.error);\n    }\n\n    return Result.ok<PropertyValue>(\n      new PropertyValue(value, type, constraints),\n    );\n  }\n\n  /**\n   * Create a PropertyValue with explicit type\n   */\n  static createTyped(\n    value: any,\n    type: PropertyValueType,\n    constraints: PropertyConstraints = {},\n  ): Result<PropertyValue> {\n    const validationResult = PropertyValue.validateValue(\n      value,\n      type,\n      constraints,\n    );\n\n    if (!validationResult.isValid) {\n      return Result.fail<PropertyValue>(validationResult.error);\n    }\n\n    const convertedValue = PropertyValue.convertValue(value, type);\n    return Result.ok<PropertyValue>(\n      new PropertyValue(convertedValue, type, constraints),\n    );\n  }\n\n  /**\n   * Detect type from JavaScript value\n   */\n  private static detectType(value: any): PropertyValueType {\n    if (typeof value === \"string\") {\n      // Check for WikiLink pattern [[...]]\n      if (/^\\[\\[.*\\]\\]$/.test(value)) {\n        return PropertyValueType.REFERENCE;\n      }\n      // Check for IRI pattern\n      if (/^https?:\\/\\/|^[a-z][a-z0-9+.-]*:/i.test(value)) {\n        return PropertyValueType.IRI;\n      }\n      // Check for ISO date pattern\n      if (/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value)) {\n        return PropertyValueType.DATE;\n      }\n      return PropertyValueType.STRING;\n    }\n\n    if (typeof value === \"number\") {\n      return PropertyValueType.NUMBER;\n    }\n\n    if (typeof value === \"boolean\") {\n      return PropertyValueType.BOOLEAN;\n    }\n\n    if (value instanceof Date) {\n      return PropertyValueType.DATE;\n    }\n\n    if (Array.isArray(value)) {\n      return PropertyValueType.ARRAY;\n    }\n\n    return PropertyValueType.OBJECT;\n  }\n\n  /**\n   * Convert value to appropriate type\n   */\n  private static convertValue(value: any, type: PropertyValueType): any {\n    switch (type) {\n      case PropertyValueType.STRING:\n        return String(value);\n      case PropertyValueType.NUMBER:\n        return Number(value);\n      case PropertyValueType.BOOLEAN:\n        return Boolean(value);\n      case PropertyValueType.DATE:\n        return value instanceof Date ? value : new Date(value);\n      case PropertyValueType.ARRAY:\n        return Array.isArray(value) ? [...value] : [value];\n      case PropertyValueType.REFERENCE:\n      case PropertyValueType.IRI:\n        return String(value);\n      default:\n        return value;\n    }\n  }\n\n  /**\n   * Validate value against type and constraints\n   */\n  private static validateValue(\n    value: any,\n    type: PropertyValueType,\n    constraints: PropertyConstraints,\n  ): { isValid: boolean; error: string } {\n    switch (type) {\n      case PropertyValueType.STRING:\n      case PropertyValueType.REFERENCE:\n      case PropertyValueType.IRI:\n        if (typeof value !== \"string\") {\n          return {\n            isValid: false,\n            error: `Expected string, got ${typeof value}`,\n          };\n        }\n        if (constraints.minLength && value.length < constraints.minLength) {\n          return {\n            isValid: false,\n            error: `String too short, minimum ${constraints.minLength}`,\n          };\n        }\n        if (constraints.maxLength && value.length > constraints.maxLength) {\n          return {\n            isValid: false,\n            error: `String too long, maximum ${constraints.maxLength}`,\n          };\n        }\n        if (constraints.pattern && !constraints.pattern.test(value)) {\n          return {\n            isValid: false,\n            error: \"String does not match required pattern\",\n          };\n        }\n        break;\n\n      case PropertyValueType.NUMBER:\n        const num = Number(value);\n        if (isNaN(num)) {\n          return { isValid: false, error: \"Invalid number\" };\n        }\n        if (constraints.min !== undefined && num < constraints.min) {\n          return {\n            isValid: false,\n            error: `Number too small, minimum ${constraints.min}`,\n          };\n        }\n        if (constraints.max !== undefined && num > constraints.max) {\n          return {\n            isValid: false,\n            error: `Number too large, maximum ${constraints.max}`,\n          };\n        }\n        break;\n\n      case PropertyValueType.DATE:\n        const date = value instanceof Date ? value : new Date(value);\n        if (isNaN(date.getTime())) {\n          return { isValid: false, error: \"Invalid date\" };\n        }\n        break;\n\n      case PropertyValueType.ARRAY:\n        if (!Array.isArray(value)) {\n          return { isValid: false, error: \"Expected array\" };\n        }\n        if (constraints.minItems && value.length < constraints.minItems) {\n          return {\n            isValid: false,\n            error: `Array too short, minimum ${constraints.minItems} items`,\n          };\n        }\n        if (constraints.maxItems && value.length > constraints.maxItems) {\n          return {\n            isValid: false,\n            error: `Array too long, maximum ${constraints.maxItems} items`,\n          };\n        }\n        break;\n    }\n\n    return { isValid: true, error: \"\" };\n  }\n\n  /**\n   * Get the raw value\n   */\n  getValue(): any {\n    // Return deep copy for objects and arrays to maintain immutability\n    if (this._type === PropertyValueType.ARRAY) {\n      return [...this._value];\n    }\n    if (this._type === PropertyValueType.OBJECT) {\n      return { ...this._value };\n    }\n    return this._value;\n  }\n\n  /**\n   * Get the property type\n   */\n  getType(): PropertyValueType {\n    return this._type;\n  }\n\n  /**\n   * Get the constraints\n   */\n  getConstraints(): PropertyConstraints {\n    return { ...this._constraints };\n  }\n\n  /**\n   * Check if this is a semantic reference (WikiLink)\n   */\n  isReference(): boolean {\n    return this._type === PropertyValueType.REFERENCE;\n  }\n\n  /**\n   * Check if this is an IRI\n   */\n  isIRI(): boolean {\n    return this._type === PropertyValueType.IRI;\n  }\n\n  /**\n   * Extract reference target from WikiLink\n   */\n  getReferenceTarget(): string | null {\n    if (!this.isReference()) {\n      return null;\n    }\n    const match = this._value.match(/^\\[\\[(.*?)\\]\\]$/);\n    return match ? match[1] : null;\n  }\n\n  /**\n   * Convert to string representation\n   */\n  toString(): string {\n    if (this._type === PropertyValueType.DATE && this._value instanceof Date) {\n      return this._value.toISOString().replace(/\\.\\d{3}Z$/, \"\");\n    }\n    return String(this._value);\n  }\n\n  /**\n   * Equality comparison\n   */\n  equals(other: PropertyValue): boolean {\n    if (this._type !== other._type) {\n      return false;\n    }\n\n    // For complex types, use JSON comparison\n    if (\n      this._type === PropertyValueType.ARRAY ||\n      this._type === PropertyValueType.OBJECT\n    ) {\n      return JSON.stringify(this._value) === JSON.stringify(other._value);\n    }\n\n    return this._value === other._value;\n  }\n\n  /**\n   * Create a new PropertyValue with updated constraints\n   */\n  withConstraints(constraints: PropertyConstraints): Result<PropertyValue> {\n    return PropertyValue.createTyped(this._value, this._type, {\n      ...this._constraints,\n      ...constraints,\n    });\n  }\n}\n\n/**\n * Property validation constraints\n */\nexport interface PropertyConstraints {\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n  pattern?: RegExp;\n  minItems?: number;\n  maxItems?: number;\n  required?: boolean;\n}\n"],"version":3}