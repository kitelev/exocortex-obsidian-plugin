9b1eac5cefdcf6d08fa8044cadae74b8
"use strict";
/**
 * Core RDF Triple implementation for semantic knowledge representation
 * Based on RDF 1.1 specification: https://www.w3.org/TR/rdf11-concepts/
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EMS = exports.EXO = exports.XSD = exports.OWL = exports.RDFS = exports.RDF = exports.Triple = exports.Literal = exports.BlankNode = exports.IRI = void 0;
const Result_1 = require("../../core/Result");
/**
 * Internationalized Resource Identifier
 * Used to uniquely identify resources in the semantic web
 */
class IRI {
    constructor(value) {
        this.value = value;
        if (!this.isValid(value)) {
            throw new Error(`Invalid IRI: ${value}`);
        }
    }
    isValid(value) {
        try {
            new URL(value);
            return true;
        }
        catch {
            // Check if it's a valid CURIE (prefix:localName) or property path (prefix__Class_property)
            // Allows double underscore for Exocortex naming convention
            return (/^[a-zA-Z][a-zA-Z0-9_]*(__[a-zA-Z][a-zA-Z0-9_]*(_[a-zA-Z][a-zA-Z0-9_]*)?)?$/.test(value) || /^[a-zA-Z][a-zA-Z0-9]*:[a-zA-Z_][a-zA-Z0-9_-]*$/.test(value));
        }
    }
    toString() {
        return this.value;
    }
    equals(other) {
        return this.value === other.value;
    }
    static from(value) {
        try {
            return Result_1.Result.ok(new IRI(value));
        }
        catch (error) {
            return Result_1.Result.fail(`Invalid IRI: ${error.message}`);
        }
    }
}
exports.IRI = IRI;
/**
 * Blank node for representing anonymous resources
 */
class BlankNode {
    constructor(id = BlankNode.generateId()) {
        this.id = id;
    }
    static generateId() {
        return `_:b${++BlankNode.counter}`;
    }
    toString() {
        return this.id;
    }
    equals(other) {
        return this.id === other.id;
    }
}
exports.BlankNode = BlankNode;
BlankNode.counter = 0;
/**
 * RDF Literal with optional datatype and language tag
 */
class Literal {
    constructor(value, datatype, language) {
        this.value = value;
        this.datatype = datatype;
        this.language = language;
        if (language && datatype) {
            throw new Error("Literal cannot have both language and datatype");
        }
    }
    toString() {
        if (this.language) {
            return `"${this.value}"@${this.language}`;
        }
        if (this.datatype) {
            return `"${this.value}"^^${this.datatype.toString()}`;
        }
        return `"${this.value}"`;
    }
    getValue() {
        return this.value;
    }
    getDatatype() {
        return this.datatype;
    }
    getLanguage() {
        return this.language;
    }
    equals(other) {
        const datatypeEquals = this.datatype && other.datatype
            ? this.datatype.equals(other.datatype)
            : this.datatype === other.datatype;
        return (this.value === other.value &&
            datatypeEquals &&
            this.language === other.language);
    }
    static string(value) {
        return new Literal(value, XSD.string);
    }
    static boolean(value) {
        return new Literal(value.toString(), XSD.boolean);
    }
    static integer(value) {
        return new Literal(Math.floor(value).toString(), XSD.integer);
    }
    static double(value) {
        return new Literal(value.toString(), XSD.double);
    }
    static dateTime(value) {
        return new Literal(value.toISOString(), XSD.dateTime);
    }
    static langString(value, language) {
        return new Literal(value, undefined, language);
    }
}
exports.Literal = Literal;
/**
 * RDF Triple: Subject-Predicate-Object statement
 */
class Triple {
    constructor(subject, predicate, object) {
        this.subject = subject;
        this.predicate = predicate;
        this.object = object;
    }
    getSubject() {
        return this.subject;
    }
    getPredicate() {
        return this.predicate;
    }
    getObject() {
        return this.object;
    }
    toString() {
        return `${this.subject.toString()} ${this.predicate.toString()} ${this.object.toString()} .`;
    }
    equals(other) {
        return (this.subjectEquals(other.subject) &&
            this.predicate.equals(other.predicate) &&
            this.objectEquals(other.object));
    }
    subjectEquals(other) {
        if (this.subject instanceof IRI && other instanceof IRI) {
            return this.subject.equals(other);
        }
        if (this.subject instanceof BlankNode && other instanceof BlankNode) {
            return this.subject.equals(other);
        }
        return false;
    }
    objectEquals(other) {
        if (this.object instanceof IRI && other instanceof IRI) {
            return this.object.equals(other);
        }
        if (this.object instanceof BlankNode && other instanceof BlankNode) {
            return this.object.equals(other);
        }
        if (this.object instanceof Literal && other instanceof Literal) {
            return this.object.equals(other);
        }
        return false;
    }
}
exports.Triple = Triple;
/**
 * Common RDF vocabularies
 */
class RDF {
}
exports.RDF = RDF;
RDF.namespace = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#");
RDF.type = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#type");
RDF.Property = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#Property");
RDF.Statement = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement");
RDF.subject = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#subject");
RDF.predicate = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate");
RDF.object = new IRI("http://www.w3.org/1999/02/22-rdf-syntax-ns#object");
class RDFS {
}
exports.RDFS = RDFS;
RDFS.namespace = new IRI("http://www.w3.org/2000/01/rdf-schema#");
RDFS.Class = new IRI("http://www.w3.org/2000/01/rdf-schema#Class");
RDFS.subClassOf = new IRI("http://www.w3.org/2000/01/rdf-schema#subClassOf");
RDFS.subPropertyOf = new IRI("http://www.w3.org/2000/01/rdf-schema#subPropertyOf");
RDFS.domain = new IRI("http://www.w3.org/2000/01/rdf-schema#domain");
RDFS.range = new IRI("http://www.w3.org/2000/01/rdf-schema#range");
RDFS.label = new IRI("http://www.w3.org/2000/01/rdf-schema#label");
RDFS.comment = new IRI("http://www.w3.org/2000/01/rdf-schema#comment");
class OWL {
}
exports.OWL = OWL;
OWL.namespace = new IRI("http://www.w3.org/2002/07/owl#");
OWL.Class = new IRI("http://www.w3.org/2002/07/owl#Class");
OWL.ObjectProperty = new IRI("http://www.w3.org/2002/07/owl#ObjectProperty");
OWL.DatatypeProperty = new IRI("http://www.w3.org/2002/07/owl#DatatypeProperty");
OWL.sameAs = new IRI("http://www.w3.org/2002/07/owl#sameAs");
OWL.differentFrom = new IRI("http://www.w3.org/2002/07/owl#differentFrom");
OWL.equivalentClass = new IRI("http://www.w3.org/2002/07/owl#equivalentClass");
class XSD {
}
exports.XSD = XSD;
XSD.namespace = new IRI("http://www.w3.org/2001/XMLSchema#");
XSD.string = new IRI("http://www.w3.org/2001/XMLSchema#string");
XSD.boolean = new IRI("http://www.w3.org/2001/XMLSchema#boolean");
XSD.integer = new IRI("http://www.w3.org/2001/XMLSchema#integer");
XSD.double = new IRI("http://www.w3.org/2001/XMLSchema#double");
XSD.dateTime = new IRI("http://www.w3.org/2001/XMLSchema#dateTime");
XSD.date = new IRI("http://www.w3.org/2001/XMLSchema#date");
/**
 * Exocortex-specific vocabularies
 */
class EXO {
}
exports.EXO = EXO;
EXO.namespace = new IRI("https://exocortex.io/ontology/core#");
EXO.Asset = new IRI("https://exocortex.io/ontology/core#Asset");
EXO.uuid = new IRI("https://exocortex.io/ontology/core#uuid");
EXO.createdAt = new IRI("https://exocortex.io/ontology/core#createdAt");
EXO.updatedAt = new IRI("https://exocortex.io/ontology/core#updatedAt");
EXO.isDefinedBy = new IRI("https://exocortex.io/ontology/core#isDefinedBy");
class EMS {
}
exports.EMS = EMS;
EMS.namespace = new IRI("https://exocortex.io/ontology/ems#");
EMS.Task = new IRI("https://exocortex.io/ontology/ems#Task");
EMS.Project = new IRI("https://exocortex.io/ontology/ems#Project");
EMS.Area = new IRI("https://exocortex.io/ontology/ems#Area");
EMS.status = new IRI("https://exocortex.io/ontology/ems#status");
EMS.priority = new IRI("https://exocortex.io/ontology/ems#priority");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,