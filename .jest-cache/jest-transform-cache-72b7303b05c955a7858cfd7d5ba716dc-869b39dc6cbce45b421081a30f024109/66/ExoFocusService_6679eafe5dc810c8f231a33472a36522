48c5e70362cf10280b16f1a3bc362015
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExoFocusService = void 0;
const tslib_1 = require("tslib");
const ExoFocus_1 = require("../../domain/entities/ExoFocus");
const Result_1 = require("../../domain/core/Result");
class ExoFocusService {
    constructor(app, graph) {
        var _a, _b;
        this.app = app;
        this.graph = graph;
        this.activeFocus = null;
        this.allFocuses = new Map();
        this.focusFilePath = '.exocortex/focus.json';
        this.focusConfigPath = '.exocortex/focus-configs.json';
        // Only load focuses if vault adapter is available
        if ((_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.vault) === null || _b === void 0 ? void 0 : _b.adapter) {
            this.loadFocuses();
        }
    }
    /**
     * Load all focus configurations from vault
     */
    loadFocuses() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!((_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.vault) === null || _b === void 0 ? void 0 : _b.adapter)) {
                return;
            }
            try {
                const content = yield this.app.vault.adapter.read(this.focusConfigPath);
                const configs = JSON.parse(content);
                for (const config of configs) {
                    const focusResult = ExoFocus_1.ExoFocus.fromJSON(config);
                    if (focusResult.isSuccess) {
                        const focus = focusResult.getValue();
                        this.allFocuses.set(focus.id, focus);
                        if (focus.active) {
                            this.activeFocus = focus;
                        }
                    }
                }
            }
            catch (error) {
                // File doesn't exist, create default focuses
                yield this.createDefaultFocuses();
            }
        });
    }
    /**
     * Create default focus configurations
     */
    createDefaultFocuses() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!((_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.vault) === null || _b === void 0 ? void 0 : _b.adapter)) {
                return;
            }
            const defaults = [
                {
                    name: 'All',
                    description: 'No filtering - show all knowledge',
                    filters: [],
                    priority: 0,
                    active: true
                },
                {
                    name: 'Work',
                    description: 'Work-related knowledge only',
                    filters: [
                        {
                            type: 'tag',
                            operator: 'includes',
                            value: ['work', 'project', 'task', 'meeting']
                        },
                        {
                            type: 'class',
                            operator: 'includes',
                            value: ['ems__Task', 'ems__Project', 'ems__Meeting']
                        }
                    ],
                    priority: 50,
                    active: false
                },
                {
                    name: 'Personal',
                    description: 'Personal knowledge only',
                    filters: [
                        {
                            type: 'tag',
                            operator: 'includes',
                            value: ['personal', 'family', 'health', 'hobby']
                        },
                        {
                            type: 'tag',
                            operator: 'excludes',
                            value: ['work', 'project']
                        }
                    ],
                    priority: 50,
                    active: false
                },
                {
                    name: 'Today',
                    description: 'Focus on today\'s items',
                    filters: [
                        {
                            type: 'timeframe',
                            operator: 'equals',
                            value: new Date().toISOString().split('T')[0]
                        }
                    ],
                    priority: 75,
                    active: false
                },
                {
                    name: 'This Week',
                    description: 'Focus on this week\'s items',
                    filters: [
                        {
                            type: 'timeframe',
                            operator: 'between',
                            value: [
                                this.getWeekStart(),
                                this.getWeekEnd()
                            ]
                        }
                    ],
                    priority: 60,
                    active: false
                }
            ];
            for (const config of defaults) {
                const focusResult = ExoFocus_1.ExoFocus.create(Object.assign(Object.assign({}, config), { createdAt: new Date(), updatedAt: new Date() }));
                if (focusResult.isSuccess) {
                    const focus = focusResult.getValue();
                    this.allFocuses.set(focus.id, focus);
                    if (focus.active) {
                        this.activeFocus = focus;
                    }
                }
            }
            yield this.saveFocuses();
        });
    }
    /**
     * Save all focus configurations
     */
    saveFocuses() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!((_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.vault) === null || _b === void 0 ? void 0 : _b.adapter)) {
                return;
            }
            const configs = Array.from(this.allFocuses.values()).map(f => f.toJSON());
            yield this.app.vault.adapter.write(this.focusConfigPath, JSON.stringify(configs, null, 2));
            // Save active focus separately for quick access
            if (this.activeFocus) {
                yield this.app.vault.adapter.write(this.focusFilePath, JSON.stringify({
                    activeId: this.activeFocus.id,
                    name: this.activeFocus.name,
                    filters: this.activeFocus.filters,
                    timestamp: new Date().toISOString()
                }, null, 2));
            }
        });
    }
    /**
     * Get active focus
     */
    getActiveFocus() {
        return this.activeFocus;
    }
    /**
     * Set active focus by ID
     */
    setActiveFocus(focusId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const focus = this.allFocuses.get(focusId);
            if (!focus) {
                return Result_1.Result.fail('Focus not found');
            }
            // Deactivate current focus
            if (this.activeFocus) {
                this.activeFocus.deactivate();
            }
            // Activate new focus
            focus.activate();
            this.activeFocus = focus;
            yield this.saveFocuses();
            return Result_1.Result.ok();
        });
    }
    /**
     * Create new focus
     */
    createFocus(name, description, filters) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const focusResult = ExoFocus_1.ExoFocus.create({
                name,
                description,
                filters,
                priority: 50,
                active: false,
                createdAt: new Date(),
                updatedAt: new Date()
            });
            if (focusResult.isFailure) {
                return focusResult;
            }
            const focus = focusResult.getValue();
            this.allFocuses.set(focus.id, focus);
            yield this.saveFocuses();
            return Result_1.Result.ok(focus);
        });
    }
    /**
     * Update focus
     */
    updateFocus(focusId, updates) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const focus = this.allFocuses.get(focusId);
            if (!focus) {
                return Result_1.Result.fail('Focus not found');
            }
            // Update properties
            if (updates.priority !== undefined) {
                const result = focus.updatePriority(updates.priority);
                if (result.isFailure) {
                    return result;
                }
            }
            // For other updates, we'd need to add methods to ExoFocus
            // or recreate the focus with new properties
            yield this.saveFocuses();
            return Result_1.Result.ok();
        });
    }
    /**
     * Delete focus
     */
    deleteFocus(focusId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const focus = this.allFocuses.get(focusId);
            if (!focus) {
                return Result_1.Result.fail('Focus not found');
            }
            if (focus === this.activeFocus) {
                // Switch to "All" focus
                const allFocus = Array.from(this.allFocuses.values())
                    .find(f => f.name === 'All');
                if (allFocus) {
                    this.activeFocus = allFocus;
                    allFocus.activate();
                }
                else {
                    this.activeFocus = null;
                }
            }
            this.allFocuses.delete(focusId);
            yield this.saveFocuses();
            return Result_1.Result.ok();
        });
    }
    /**
     * Get all focuses
     */
    getAllFocuses() {
        return Array.from(this.allFocuses.values());
    }
    /**
     * Filter assets based on active focus
     */
    filterAssets(assets) {
        if (!this.activeFocus) {
            return assets;
        }
        return assets.filter(asset => this.activeFocus.matchesAsset(asset));
    }
    /**
     * Filter triples based on active focus
     */
    filterTriples(triples) {
        if (!this.activeFocus) {
            return triples;
        }
        return triples.filter(triple => {
            // Convert Triple to plain object for matchesTriple
            const tripleObj = {
                subject: triple.getSubject().toString(),
                predicate: triple.getPredicate().toString(),
                object: triple.getObject().toString()
            };
            return this.activeFocus.matchesTriple(tripleObj);
        });
    }
    /**
     * Filter files based on active focus
     */
    filterFiles(files) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.activeFocus) {
                return files;
            }
            const filteredFiles = [];
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    if (this.activeFocus.matchesAsset(cache.frontmatter)) {
                        filteredFiles.push(file);
                    }
                }
            }
            return filteredFiles;
        });
    }
    /**
     * Apply focus to SPARQL query results
     */
    filterSPARQLResults(results) {
        if (!this.activeFocus) {
            return results;
        }
        return results.filter(result => {
            // Check if result is a triple
            if (result.subject && result.predicate && result.object) {
                return this.activeFocus.matchesTriple(result);
            }
            // Otherwise treat as asset
            return this.activeFocus.matchesAsset(result);
        });
    }
    /**
     * Get focus statistics
     */
    getFocusStatistics() {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const files = this.app.vault.getMarkdownFiles();
            const allAssets = files.length;
            const filteredFiles = yield this.filterFiles(files);
            const filteredAssets = filteredFiles.length;
            const allTriples = this.graph.match(null, null, null);
            const totalTriples = allTriples.length;
            const filteredTriples = this.filterTriples(allTriples);
            const filteredTriplesCount = filteredTriples.length;
            return {
                totalAssets: allAssets,
                filteredAssets,
                totalTriples,
                filteredTriples: filteredTriplesCount,
                activeFocus: ((_a = this.activeFocus) === null || _a === void 0 ? void 0 : _a.name) || 'None'
            };
        });
    }
    /**
     * Helper: Get start of current week
     */
    getWeekStart() {
        const now = new Date();
        const dayOfWeek = now.getDay();
        const diff = now.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);
        const weekStart = new Date(now.setDate(diff));
        weekStart.setHours(0, 0, 0, 0);
        return weekStart.toISOString();
    }
    /**
     * Helper: Get end of current week
     */
    getWeekEnd() {
        const now = new Date();
        const dayOfWeek = now.getDay();
        const diff = now.getDate() - dayOfWeek + 7;
        const weekEnd = new Date(now.setDate(diff));
        weekEnd.setHours(23, 59, 59, 999);
        return weekEnd.toISOString();
    }
}
exports.ExoFocusService = ExoFocusService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2FwcGxpY2F0aW9uL3NlcnZpY2VzL0V4b0ZvY3VzU2VydmljZS50cyIsIm1hcHBpbmdzIjoiOzs7O0FBQ0EsNkRBQXVFO0FBR3ZFLHFEQUFrRDtBQUVsRCxNQUFhLGVBQWU7SUFNeEIsWUFDWSxHQUFRLEVBQ1IsS0FBWTs7UUFEWixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBQ1IsVUFBSyxHQUFMLEtBQUssQ0FBTztRQVBoQixnQkFBVyxHQUFvQixJQUFJLENBQUM7UUFDcEMsZUFBVSxHQUEwQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzlDLGtCQUFhLEdBQUcsdUJBQXVCLENBQUM7UUFDeEMsb0JBQWUsR0FBRywrQkFBK0IsQ0FBQztRQU10RCxrREFBa0Q7UUFDbEQsSUFBSSxNQUFBLE1BQUEsSUFBSSxDQUFDLEdBQUcsMENBQUUsS0FBSywwQ0FBRSxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ1csV0FBVzs7O1lBQ3JCLElBQUksQ0FBQyxDQUFBLE1BQUEsTUFBQSxJQUFJLENBQUMsR0FBRywwQ0FBRSxLQUFLLDBDQUFFLE9BQU8sQ0FBQSxFQUFFO2dCQUMzQixPQUFPO2FBQ1Y7WUFFRCxJQUFJO2dCQUNBLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBQ3hFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRXBDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO29CQUMxQixNQUFNLFdBQVcsR0FBRyxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDOUMsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO3dC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QUFHLENBQUMsQ0FBQztRQUNsQyxPQUFPLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0NBQ0o7QUF6YUQsMENBeWFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9hcHBsaWNhdGlvbi9zZXJ2aWNlcy9FeG9Gb2N1c1NlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEV4b0ZvY3VzLCBGb2N1c0ZpbHRlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9lbnRpdGllcy9FeG9Gb2N1cyc7XG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJy4uLy4uL2RvbWFpbi9zZW1hbnRpYy9jb3JlL0dyYXBoJztcbmltcG9ydCB7IFRyaXBsZSB9IGZyb20gJy4uLy4uL2RvbWFpbi9zZW1hbnRpYy9jb3JlL1RyaXBsZSc7XG5pbXBvcnQgeyBSZXN1bHQgfSBmcm9tICcuLi8uLi9kb21haW4vY29yZS9SZXN1bHQnO1xuXG5leHBvcnQgY2xhc3MgRXhvRm9jdXNTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGFjdGl2ZUZvY3VzOiBFeG9Gb2N1cyB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgYWxsRm9jdXNlczogTWFwPHN0cmluZywgRXhvRm9jdXM+ID0gbmV3IE1hcCgpO1xuICAgIHByaXZhdGUgZm9jdXNGaWxlUGF0aCA9ICcuZXhvY29ydGV4L2ZvY3VzLmpzb24nO1xuICAgIHByaXZhdGUgZm9jdXNDb25maWdQYXRoID0gJy5leG9jb3J0ZXgvZm9jdXMtY29uZmlncy5qc29uJztcbiAgICBcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcHA6IEFwcCxcbiAgICAgICAgcHJpdmF0ZSBncmFwaDogR3JhcGhcbiAgICApIHtcbiAgICAgICAgLy8gT25seSBsb2FkIGZvY3VzZXMgaWYgdmF1bHQgYWRhcHRlciBpcyBhdmFpbGFibGVcbiAgICAgICAgaWYgKHRoaXMuYXBwPy52YXVsdD8uYWRhcHRlcikge1xuICAgICAgICAgICAgdGhpcy5sb2FkRm9jdXNlcygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIExvYWQgYWxsIGZvY3VzIGNvbmZpZ3VyYXRpb25zIGZyb20gdmF1bHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGxvYWRGb2N1c2VzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIXRoaXMuYXBwPy52YXVsdD8uYWRhcHRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZCh0aGlzLmZvY3VzQ29uZmlnUGF0aCk7XG4gICAgICAgICAgICBjb25zdCBjb25maWdzID0gSlNPTi5wYXJzZShjb250ZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChjb25zdCBjb25maWcgb2YgY29uZmlncykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzUmVzdWx0ID0gRXhvRm9jdXMuZnJvbUpTT04oY29uZmlnKTtcbiAgICAgICAgICAgICAgICBpZiAoZm9jdXNSZXN1bHQuaXNTdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvY3VzID0gZm9jdXNSZXN1bHQuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxGb2N1c2VzLnNldChmb2N1cy5pZCwgZm9jdXMpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvY3VzLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVGb2N1cyA9IGZvY3VzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRmlsZSBkb2Vzbid0IGV4aXN0LCBjcmVhdGUgZGVmYXVsdCBmb2N1c2VzXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZURlZmF1bHRGb2N1c2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGRlZmF1bHQgZm9jdXMgY29uZmlndXJhdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGNyZWF0ZURlZmF1bHRGb2N1c2VzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIXRoaXMuYXBwPy52YXVsdD8uYWRhcHRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBkZWZhdWx0cyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQWxsJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ05vIGZpbHRlcmluZyAtIHNob3cgYWxsIGtub3dsZWRnZScsXG4gICAgICAgICAgICAgICAgZmlsdGVyczogW10sXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IDAsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdXb3JrJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1dvcmstcmVsYXRlZCBrbm93bGVkZ2Ugb25seScsXG4gICAgICAgICAgICAgICAgZmlsdGVyczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGFnJyBhcyBjb25zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiAnaW5jbHVkZXMnIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFsnd29yaycsICdwcm9qZWN0JywgJ3Rhc2snLCAnbWVldGluZyddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjbGFzcycgYXMgY29uc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogJ2luY2x1ZGVzJyBhcyBjb25zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbJ2Vtc19fVGFzaycsICdlbXNfX1Byb2plY3QnLCAnZW1zX19NZWV0aW5nJ11cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IDUwLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1BlcnNvbmFsJyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BlcnNvbmFsIGtub3dsZWRnZSBvbmx5JyxcbiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0YWcnIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6ICdpbmNsdWRlcycgYXMgY29uc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogWydwZXJzb25hbCcsICdmYW1pbHknLCAnaGVhbHRoJywgJ2hvYmJ5J11cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RhZycgYXMgY29uc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogJ2V4Y2x1ZGVzJyBhcyBjb25zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbJ3dvcmsnLCAncHJvamVjdCddXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiA1MCxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdUb2RheScsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdGb2N1cyBvbiB0b2RheVxcJ3MgaXRlbXMnLFxuICAgICAgICAgICAgICAgIGZpbHRlcnM6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RpbWVmcmFtZScgYXMgY29uc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogJ2VxdWFscycgYXMgY29uc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IDc1LFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ1RoaXMgV2VlaycsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdGb2N1cyBvbiB0aGlzIHdlZWtcXCdzIGl0ZW1zJyxcbiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0aW1lZnJhbWUnIGFzIGNvbnN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6ICdiZXR3ZWVuJyBhcyBjb25zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRXZWVrU3RhcnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFdlZWtFbmQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogNjAsXG4gICAgICAgICAgICAgICAgYWN0aXZlOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgZm9yIChjb25zdCBjb25maWcgb2YgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvY3VzUmVzdWx0ID0gRXhvRm9jdXMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAuLi5jb25maWcsXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChmb2N1c1Jlc3VsdC5pc1N1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb2N1cyA9IGZvY3VzUmVzdWx0LmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGxGb2N1c2VzLnNldChmb2N1cy5pZCwgZm9jdXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChmb2N1cy5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVGb2N1cyA9IGZvY3VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRm9jdXNlcygpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBTYXZlIGFsbCBmb2N1cyBjb25maWd1cmF0aW9uc1xuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgc2F2ZUZvY3VzZXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICghdGhpcy5hcHA/LnZhdWx0Py5hZGFwdGVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbmZpZ3MgPSBBcnJheS5mcm9tKHRoaXMuYWxsRm9jdXNlcy52YWx1ZXMoKSkubWFwKGYgPT4gZi50b0pTT04oKSk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKFxuICAgICAgICAgICAgdGhpcy5mb2N1c0NvbmZpZ1BhdGgsXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShjb25maWdzLCBudWxsLCAyKVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8gU2F2ZSBhY3RpdmUgZm9jdXMgc2VwYXJhdGVseSBmb3IgcXVpY2sgYWNjZXNzXG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZUZvY3VzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKFxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNGaWxlUGF0aCxcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZUlkOiB0aGlzLmFjdGl2ZUZvY3VzLmlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmFjdGl2ZUZvY3VzLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnM6IHRoaXMuYWN0aXZlRm9jdXMuZmlsdGVycyxcbiAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgICAgICB9LCBudWxsLCAyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXQgYWN0aXZlIGZvY3VzXG4gICAgICovXG4gICAgZ2V0QWN0aXZlRm9jdXMoKTogRXhvRm9jdXMgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlRm9jdXM7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFNldCBhY3RpdmUgZm9jdXMgYnkgSURcbiAgICAgKi9cbiAgICBhc3luYyBzZXRBY3RpdmVGb2N1cyhmb2N1c0lkOiBzdHJpbmcpOiBQcm9taXNlPFJlc3VsdDx2b2lkPj4ge1xuICAgICAgICBjb25zdCBmb2N1cyA9IHRoaXMuYWxsRm9jdXNlcy5nZXQoZm9jdXNJZCk7XG4gICAgICAgIGlmICghZm9jdXMpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDx2b2lkPignRm9jdXMgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIERlYWN0aXZhdGUgY3VycmVudCBmb2N1c1xuICAgICAgICBpZiAodGhpcy5hY3RpdmVGb2N1cykge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVGb2N1cy5kZWFjdGl2YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFjdGl2YXRlIG5ldyBmb2N1c1xuICAgICAgICBmb2N1cy5hY3RpdmF0ZSgpO1xuICAgICAgICB0aGlzLmFjdGl2ZUZvY3VzID0gZm9jdXM7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVGb2N1c2VzKCk7XG4gICAgICAgIHJldHVybiBSZXN1bHQub2s8dm9pZD4oKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIG5ldyBmb2N1c1xuICAgICAqL1xuICAgIGFzeW5jIGNyZWF0ZUZvY3VzKFxuICAgICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICAgIGZpbHRlcnM6IEZvY3VzRmlsdGVyW11cbiAgICApOiBQcm9taXNlPFJlc3VsdDxFeG9Gb2N1cz4+IHtcbiAgICAgICAgY29uc3QgZm9jdXNSZXN1bHQgPSBFeG9Gb2N1cy5jcmVhdGUoe1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZmlsdGVycyxcbiAgICAgICAgICAgIHByaW9yaXR5OiA1MCxcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZm9jdXNSZXN1bHQuaXNGYWlsdXJlKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9jdXNSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZvY3VzID0gZm9jdXNSZXN1bHQuZ2V0VmFsdWUoKTtcbiAgICAgICAgdGhpcy5hbGxGb2N1c2VzLnNldChmb2N1cy5pZCwgZm9jdXMpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRm9jdXNlcygpO1xuICAgICAgICByZXR1cm4gUmVzdWx0Lm9rPEV4b0ZvY3VzPihmb2N1cyk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBmb2N1c1xuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZUZvY3VzKFxuICAgICAgICBmb2N1c0lkOiBzdHJpbmcsXG4gICAgICAgIHVwZGF0ZXM6IFBhcnRpYWw8e1xuICAgICAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICAgICAgICAgIGZpbHRlcnM6IEZvY3VzRmlsdGVyW107XG4gICAgICAgICAgICBwcmlvcml0eTogbnVtYmVyO1xuICAgICAgICB9PlxuICAgICk6IFByb21pc2U8UmVzdWx0PHZvaWQ+PiB7XG4gICAgICAgIGNvbnN0IGZvY3VzID0gdGhpcy5hbGxGb2N1c2VzLmdldChmb2N1c0lkKTtcbiAgICAgICAgaWYgKCFmb2N1cykge1xuICAgICAgICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPHZvaWQ+KCdGb2N1cyBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHByb3BlcnRpZXNcbiAgICAgICAgaWYgKHVwZGF0ZXMucHJpb3JpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZm9jdXMudXBkYXRlUHJpb3JpdHkodXBkYXRlcy5wcmlvcml0eSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmlzRmFpbHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEZvciBvdGhlciB1cGRhdGVzLCB3ZSdkIG5lZWQgdG8gYWRkIG1ldGhvZHMgdG8gRXhvRm9jdXNcbiAgICAgICAgLy8gb3IgcmVjcmVhdGUgdGhlIGZvY3VzIHdpdGggbmV3IHByb3BlcnRpZXNcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZUZvY3VzZXMoKTtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vazx2b2lkPigpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZWxldGUgZm9jdXNcbiAgICAgKi9cbiAgICBhc3luYyBkZWxldGVGb2N1cyhmb2N1c0lkOiBzdHJpbmcpOiBQcm9taXNlPFJlc3VsdDx2b2lkPj4ge1xuICAgICAgICBjb25zdCBmb2N1cyA9IHRoaXMuYWxsRm9jdXNlcy5nZXQoZm9jdXNJZCk7XG4gICAgICAgIGlmICghZm9jdXMpIHtcbiAgICAgICAgICAgIHJldHVybiBSZXN1bHQuZmFpbDx2b2lkPignRm9jdXMgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChmb2N1cyA9PT0gdGhpcy5hY3RpdmVGb2N1cykge1xuICAgICAgICAgICAgLy8gU3dpdGNoIHRvIFwiQWxsXCIgZm9jdXNcbiAgICAgICAgICAgIGNvbnN0IGFsbEZvY3VzID0gQXJyYXkuZnJvbSh0aGlzLmFsbEZvY3VzZXMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgLmZpbmQoZiA9PiBmLm5hbWUgPT09ICdBbGwnKTtcbiAgICAgICAgICAgIGlmIChhbGxGb2N1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlRm9jdXMgPSBhbGxGb2N1cztcbiAgICAgICAgICAgICAgICBhbGxGb2N1cy5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUZvY3VzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5hbGxGb2N1c2VzLmRlbGV0ZShmb2N1c0lkKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlRm9jdXNlcygpO1xuICAgICAgICByZXR1cm4gUmVzdWx0Lm9rPHZvaWQ+KCk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgZm9jdXNlc1xuICAgICAqL1xuICAgIGdldEFsbEZvY3VzZXMoKTogRXhvRm9jdXNbXSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuYWxsRm9jdXNlcy52YWx1ZXMoKSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbHRlciBhc3NldHMgYmFzZWQgb24gYWN0aXZlIGZvY3VzXG4gICAgICovXG4gICAgZmlsdGVyQXNzZXRzKGFzc2V0czogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVGb2N1cykge1xuICAgICAgICAgICAgcmV0dXJuIGFzc2V0cztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFzc2V0cy5maWx0ZXIoYXNzZXQgPT4gdGhpcy5hY3RpdmVGb2N1cyEubWF0Y2hlc0Fzc2V0KGFzc2V0KSk7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0cmlwbGVzIGJhc2VkIG9uIGFjdGl2ZSBmb2N1c1xuICAgICAqL1xuICAgIGZpbHRlclRyaXBsZXModHJpcGxlczogVHJpcGxlW10pOiBUcmlwbGVbXSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVGb2N1cykge1xuICAgICAgICAgICAgcmV0dXJuIHRyaXBsZXM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0cmlwbGVzLmZpbHRlcih0cmlwbGUgPT4ge1xuICAgICAgICAgICAgLy8gQ29udmVydCBUcmlwbGUgdG8gcGxhaW4gb2JqZWN0IGZvciBtYXRjaGVzVHJpcGxlXG4gICAgICAgICAgICBjb25zdCB0cmlwbGVPYmogPSB7XG4gICAgICAgICAgICAgICAgc3ViamVjdDogdHJpcGxlLmdldFN1YmplY3QoKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIHByZWRpY2F0ZTogdHJpcGxlLmdldFByZWRpY2F0ZSgpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0cmlwbGUuZ2V0T2JqZWN0KCkudG9TdHJpbmcoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUZvY3VzIS5tYXRjaGVzVHJpcGxlKHRyaXBsZU9iaik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgZmlsZXMgYmFzZWQgb24gYWN0aXZlIGZvY3VzXG4gICAgICovXG4gICAgYXN5bmMgZmlsdGVyRmlsZXMoZmlsZXM6IFRGaWxlW10pOiBQcm9taXNlPFRGaWxlW10+IHtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZUZvY3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZXM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRmlsZXM6IFRGaWxlW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgIGlmIChjYWNoZT8uZnJvbnRtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hY3RpdmVGb2N1cy5tYXRjaGVzQXNzZXQoY2FjaGUuZnJvbnRtYXR0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRmlsZXMucHVzaChmaWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZEZpbGVzO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBBcHBseSBmb2N1cyB0byBTUEFSUUwgcXVlcnkgcmVzdWx0c1xuICAgICAqL1xuICAgIGZpbHRlclNQQVJRTFJlc3VsdHMocmVzdWx0czogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVGb2N1cykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHRzLmZpbHRlcihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcmVzdWx0IGlzIGEgdHJpcGxlXG4gICAgICAgICAgICBpZiAocmVzdWx0LnN1YmplY3QgJiYgcmVzdWx0LnByZWRpY2F0ZSAmJiByZXN1bHQub2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlRm9jdXMhLm1hdGNoZXNUcmlwbGUocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlIHRyZWF0IGFzIGFzc2V0XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVGb2N1cyEubWF0Y2hlc0Fzc2V0KHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBHZXQgZm9jdXMgc3RhdGlzdGljc1xuICAgICAqL1xuICAgIGFzeW5jIGdldEZvY3VzU3RhdGlzdGljcygpOiBQcm9taXNlPHtcbiAgICAgICAgdG90YWxBc3NldHM6IG51bWJlcjtcbiAgICAgICAgZmlsdGVyZWRBc3NldHM6IG51bWJlcjtcbiAgICAgICAgdG90YWxUcmlwbGVzOiBudW1iZXI7XG4gICAgICAgIGZpbHRlcmVkVHJpcGxlczogbnVtYmVyO1xuICAgICAgICBhY3RpdmVGb2N1czogc3RyaW5nO1xuICAgIH0+IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIGNvbnN0IGFsbEFzc2V0cyA9IGZpbGVzLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkRmlsZXMgPSBhd2FpdCB0aGlzLmZpbHRlckZpbGVzKGZpbGVzKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRBc3NldHMgPSBmaWx0ZXJlZEZpbGVzLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGFsbFRyaXBsZXMgPSB0aGlzLmdyYXBoLm1hdGNoKG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICBjb25zdCB0b3RhbFRyaXBsZXMgPSBhbGxUcmlwbGVzLmxlbmd0aDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkVHJpcGxlcyA9IHRoaXMuZmlsdGVyVHJpcGxlcyhhbGxUcmlwbGVzKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRUcmlwbGVzQ291bnQgPSBmaWx0ZXJlZFRyaXBsZXMubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvdGFsQXNzZXRzOiBhbGxBc3NldHMsXG4gICAgICAgICAgICBmaWx0ZXJlZEFzc2V0cyxcbiAgICAgICAgICAgIHRvdGFsVHJpcGxlcyxcbiAgICAgICAgICAgIGZpbHRlcmVkVHJpcGxlczogZmlsdGVyZWRUcmlwbGVzQ291bnQsXG4gICAgICAgICAgICBhY3RpdmVGb2N1czogdGhpcy5hY3RpdmVGb2N1cz8ubmFtZSB8fCAnTm9uZSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogSGVscGVyOiBHZXQgc3RhcnQgb2YgY3VycmVudCB3ZWVrXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRXZWVrU3RhcnQoKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgZGF5T2ZXZWVrID0gbm93LmdldERheSgpO1xuICAgICAgICBjb25zdCBkaWZmID0gbm93LmdldERhdGUoKSAtIGRheU9mV2VlayArIChkYXlPZldlZWsgPT09IDAgPyAtNiA6IDEpO1xuICAgICAgICBjb25zdCB3ZWVrU3RhcnQgPSBuZXcgRGF0ZShub3cuc2V0RGF0ZShkaWZmKSk7XG4gICAgICAgIHdlZWtTdGFydC5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHdlZWtTdGFydC50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBIZWxwZXI6IEdldCBlbmQgb2YgY3VycmVudCB3ZWVrXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRXZWVrRW5kKCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGNvbnN0IGRheU9mV2VlayA9IG5vdy5nZXREYXkoKTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5vdy5nZXREYXRlKCkgLSBkYXlPZldlZWsgKyA3O1xuICAgICAgICBjb25zdCB3ZWVrRW5kID0gbmV3IERhdGUobm93LnNldERhdGUoZGlmZikpO1xuICAgICAgICB3ZWVrRW5kLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gICAgICAgIHJldHVybiB3ZWVrRW5kLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxufSJdLCJ2ZXJzaW9uIjozfQ==