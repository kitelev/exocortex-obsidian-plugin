e788faad7bff0e6e2bb5420d0cbe00c5
"use strict";

/* istanbul ignore next */
function cov_z0dpwdblh() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Result.ts";
  var hash = "378ae91535634db3a3a93e0612e8a0e97559983e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Result.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 24
        }
      },
      "2": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "3": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 100
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 15,
          column: 9
        }
      },
      "5": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 100
        }
      },
      "6": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 35
        }
      },
      "7": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 36
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 27
        }
      },
      "9": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 28
        }
      },
      "10": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 28
        }
      },
      "11": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "12": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 97
        }
      },
      "13": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 27
        }
      },
      "14": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 26
        }
      },
      "15": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 26
        }
      },
      "16": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 40
        }
      },
      "18": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "19": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 43,
          column: 30
        }
      },
      "20": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 43,
          column: 30
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 27
        }
      },
      "22": {
        start: {
          line: 48,
          column: 0
        },
        end: {
          line: 48,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 41
          },
          end: {
            line: 21,
            column: 5
          }
        },
        line: 9
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 15
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 22
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 17
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 31,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        loc: {
          start: {
            line: 31,
            column: 22
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 31
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 21
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 23
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 37
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 28
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 40
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 8
          },
          end: {
            line: 12,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "1": {
        loc: {
          start: {
            line: 10,
            column: 12
          },
          end: {
            line: 10,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 10,
            column: 12
          },
          end: {
            line: 10,
            column: 21
          }
        }, {
          start: {
            line: 10,
            column: 25
          },
          end: {
            line: 10,
            column: 30
          }
        }],
        line: 10
      },
      "2": {
        loc: {
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 8
          },
          end: {
            line: 15,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "3": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 13,
            column: 22
          }
        }, {
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 32
          }
        }],
        line: 13
      },
      "4": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "5": {
        loc: {
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 43,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 12
          },
          end: {
            line: 43,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Result.ts",
      mappings: ";;;AAAA;;;GAGG;AACH,MAAa,MAAM;IAMf,YAAoB,SAAkB,EAAE,KAAc,EAAE,KAAS;QAC7D,IAAI,SAAS,IAAI,KAAK,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;SAC3F;QACD,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE;YACtB,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;SAC3F;QAED,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,CAAC,SAAS,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAe,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAU,CAAC;QAEzB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IAEM,QAAQ;QACX,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,mEAAmE,CAAC,CAAC;SACxF;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAEM,UAAU;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,eAAe;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,MAAM,CAAC,EAAE,CAAI,KAAS;QACzB,OAAO,IAAI,MAAM,CAAI,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IAEM,MAAM,CAAC,IAAI,CAAI,KAAa;QAC/B,OAAO,IAAI,MAAM,CAAI,KAAK,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,OAAsB;QACxC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,IAAI,MAAM,CAAC,SAAS;gBAAE,OAAO,MAAM,CAAC;SACvC;QACD,OAAO,MAAM,CAAC,EAAE,EAAE,CAAC;IACvB,CAAC;CACJ;AApDD,wBAoDC",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Result.ts"],
      sourcesContent: ["/**\n * Result class for handling success and failure states\n * Following functional programming patterns for error handling\n */\nexport class Result<T> {\n    public isSuccess: boolean;\n    public isFailure: boolean;\n    public error: string;\n    private _value: T;\n\n    private constructor(isSuccess: boolean, error?: string, value?: T) {\n        if (isSuccess && error) {\n            throw new Error('InvalidOperation: A result cannot be successful and contain an error');\n        }\n        if (!isSuccess && !error) {\n            throw new Error('InvalidOperation: A failing result needs to contain an error message');\n        }\n\n        this.isSuccess = isSuccess;\n        this.isFailure = !isSuccess;\n        this.error = error as string;\n        this._value = value as T;\n\n        Object.freeze(this);\n    }\n\n    public getValue(): T {\n        if (!this.isSuccess) {\n            throw new Error(`Can't get the value of an error result. Use 'errorValue' instead.`);\n        }\n\n        return this._value;\n    }\n\n    public errorValue(): string {\n        return this.error;\n    }\n\n    public getErrorMessage(): string {\n        return this.error;\n    }\n\n    public static ok<U>(value?: U): Result<U> {\n        return new Result<U>(true, undefined, value);\n    }\n\n    public static fail<U>(error: string): Result<U> {\n        return new Result<U>(false, error);\n    }\n\n    public static combine(results: Result<any>[]): Result<any> {\n        for (const result of results) {\n            if (result.isFailure) return result;\n        }\n        return Result.ok();\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "378ae91535634db3a3a93e0612e8a0e97559983e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_z0dpwdblh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_z0dpwdblh();
cov_z0dpwdblh().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_z0dpwdblh().s[1]++;
exports.Result = void 0;
/**
 * Result class for handling success and failure states
 * Following functional programming patterns for error handling
 */
class Result {
  constructor(isSuccess, error, value) {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[0]++;
    cov_z0dpwdblh().s[2]++;
    if (
    /* istanbul ignore next */
    (cov_z0dpwdblh().b[1][0]++, isSuccess) &&
    /* istanbul ignore next */
    (cov_z0dpwdblh().b[1][1]++, error)) {
      /* istanbul ignore next */
      cov_z0dpwdblh().b[0][0]++;
      cov_z0dpwdblh().s[3]++;
      throw new Error('InvalidOperation: A result cannot be successful and contain an error');
    } else
    /* istanbul ignore next */
    {
      cov_z0dpwdblh().b[0][1]++;
    }
    cov_z0dpwdblh().s[4]++;
    if (
    /* istanbul ignore next */
    (cov_z0dpwdblh().b[3][0]++, !isSuccess) &&
    /* istanbul ignore next */
    (cov_z0dpwdblh().b[3][1]++, !error)) {
      /* istanbul ignore next */
      cov_z0dpwdblh().b[2][0]++;
      cov_z0dpwdblh().s[5]++;
      throw new Error('InvalidOperation: A failing result needs to contain an error message');
    } else
    /* istanbul ignore next */
    {
      cov_z0dpwdblh().b[2][1]++;
    }
    cov_z0dpwdblh().s[6]++;
    this.isSuccess = isSuccess;
    /* istanbul ignore next */
    cov_z0dpwdblh().s[7]++;
    this.isFailure = !isSuccess;
    /* istanbul ignore next */
    cov_z0dpwdblh().s[8]++;
    this.error = error;
    /* istanbul ignore next */
    cov_z0dpwdblh().s[9]++;
    this._value = value;
    /* istanbul ignore next */
    cov_z0dpwdblh().s[10]++;
    Object.freeze(this);
  }
  getValue() {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[1]++;
    cov_z0dpwdblh().s[11]++;
    if (!this.isSuccess) {
      /* istanbul ignore next */
      cov_z0dpwdblh().b[4][0]++;
      cov_z0dpwdblh().s[12]++;
      throw new Error(`Can't get the value of an error result. Use 'errorValue' instead.`);
    } else
    /* istanbul ignore next */
    {
      cov_z0dpwdblh().b[4][1]++;
    }
    cov_z0dpwdblh().s[13]++;
    return this._value;
  }
  errorValue() {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[2]++;
    cov_z0dpwdblh().s[14]++;
    return this.error;
  }
  getErrorMessage() {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[3]++;
    cov_z0dpwdblh().s[15]++;
    return this.error;
  }
  static ok(value) {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[4]++;
    cov_z0dpwdblh().s[16]++;
    return new Result(true, undefined, value);
  }
  static fail(error) {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[5]++;
    cov_z0dpwdblh().s[17]++;
    return new Result(false, error);
  }
  static combine(results) {
    /* istanbul ignore next */
    cov_z0dpwdblh().f[6]++;
    cov_z0dpwdblh().s[18]++;
    for (const result of results) {
      /* istanbul ignore next */
      cov_z0dpwdblh().s[19]++;
      if (result.isFailure) {
        /* istanbul ignore next */
        cov_z0dpwdblh().b[5][0]++;
        cov_z0dpwdblh().s[20]++;
        return result;
      } else
      /* istanbul ignore next */
      {
        cov_z0dpwdblh().b[5][1]++;
      }
    }
    /* istanbul ignore next */
    cov_z0dpwdblh().s[21]++;
    return Result.ok();
  }
}
/* istanbul ignore next */
cov_z0dpwdblh().s[22]++;
exports.Result = Result;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfejBkcHdkYmxoIiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiUmVzdWx0IiwiY29uc3RydWN0b3IiLCJpc1N1Y2Nlc3MiLCJlcnJvciIsInZhbHVlIiwiZiIsImIiLCJFcnJvciIsImlzRmFpbHVyZSIsIl92YWx1ZSIsIk9iamVjdCIsImZyZWV6ZSIsImdldFZhbHVlIiwiZXJyb3JWYWx1ZSIsImdldEVycm9yTWVzc2FnZSIsIm9rIiwidW5kZWZpbmVkIiwiZmFpbCIsImNvbWJpbmUiLCJyZXN1bHRzIiwicmVzdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9kb21haW4vY29yZS9SZXN1bHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXN1bHQgY2xhc3MgZm9yIGhhbmRsaW5nIHN1Y2Nlc3MgYW5kIGZhaWx1cmUgc3RhdGVzXG4gKiBGb2xsb3dpbmcgZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBwYXR0ZXJucyBmb3IgZXJyb3IgaGFuZGxpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3VsdDxUPiB7XG4gICAgcHVibGljIGlzU3VjY2VzczogYm9vbGVhbjtcbiAgICBwdWJsaWMgaXNGYWlsdXJlOiBib29sZWFuO1xuICAgIHB1YmxpYyBlcnJvcjogc3RyaW5nO1xuICAgIHByaXZhdGUgX3ZhbHVlOiBUO1xuXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3Rvcihpc1N1Y2Nlc3M6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB2YWx1ZT86IFQpIHtcbiAgICAgICAgaWYgKGlzU3VjY2VzcyAmJiBlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkT3BlcmF0aW9uOiBBIHJlc3VsdCBjYW5ub3QgYmUgc3VjY2Vzc2Z1bCBhbmQgY29udGFpbiBhbiBlcnJvcicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNTdWNjZXNzICYmICFlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkT3BlcmF0aW9uOiBBIGZhaWxpbmcgcmVzdWx0IG5lZWRzIHRvIGNvbnRhaW4gYW4gZXJyb3IgbWVzc2FnZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pc1N1Y2Nlc3MgPSBpc1N1Y2Nlc3M7XG4gICAgICAgIHRoaXMuaXNGYWlsdXJlID0gIWlzU3VjY2VzcztcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yIGFzIHN0cmluZztcbiAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZSBhcyBUO1xuXG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFZhbHVlKCk6IFQge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdWNjZXNzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGdldCB0aGUgdmFsdWUgb2YgYW4gZXJyb3IgcmVzdWx0LiBVc2UgJ2Vycm9yVmFsdWUnIGluc3RlYWQuYCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIGVycm9yVmFsdWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXJyb3I7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEVycm9yTWVzc2FnZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5lcnJvcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG9rPFU+KHZhbHVlPzogVSk6IFJlc3VsdDxVPiB7XG4gICAgICAgIHJldHVybiBuZXcgUmVzdWx0PFU+KHRydWUsIHVuZGVmaW5lZCwgdmFsdWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZmFpbDxVPihlcnJvcjogc3RyaW5nKTogUmVzdWx0PFU+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXN1bHQ8VT4oZmFsc2UsIGVycm9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNvbWJpbmUocmVzdWx0czogUmVzdWx0PGFueT5bXSk6IFJlc3VsdDxhbnk+IHtcbiAgICAgICAgZm9yIChjb25zdCByZXN1bHQgb2YgcmVzdWx0cykge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5pc0ZhaWx1cmUpIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vaygpO1xuICAgIH1cbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBa0JZO0lB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