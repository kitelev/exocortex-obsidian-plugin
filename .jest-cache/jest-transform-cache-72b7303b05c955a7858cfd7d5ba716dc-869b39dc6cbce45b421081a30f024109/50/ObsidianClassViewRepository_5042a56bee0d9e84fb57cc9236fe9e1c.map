{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianClassViewRepository.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianClassViewRepository.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { IClassViewRepository } from \"../../domain/repositories/IClassViewRepository\";\nimport { ClassView, DisplayOptions } from \"../../domain/aggregates/ClassView\";\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { Result } from \"../../domain/core/Result\";\nimport { UIButton } from \"../../domain/entities/UIButton\";\n\n/**\n * Obsidian implementation of ClassView repository\n * Maps between domain entities and Obsidian vault files\n */\nexport class ObsidianClassViewRepository implements IClassViewRepository {\n  constructor(private app: App) {}\n\n  async findByClassName(\n    className: ClassName,\n  ): Promise<Result<ClassView | null>> {\n    try {\n      const files = this.app.vault.getMarkdownFiles();\n\n      for (const file of files) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (!metadata?.frontmatter) continue;\n\n        const instanceClass = metadata.frontmatter[\"exo__Instance_class\"];\n        if (instanceClass !== \"[[ui__ClassView]]\") continue;\n\n        const targetClass = metadata.frontmatter[\"ui__ClassView_targetClass\"];\n        if (!targetClass) continue;\n\n        const cleanTargetClass = this.cleanAssetReference(targetClass);\n        if (cleanTargetClass !== className.value) continue;\n\n        // Found the ClassView for this class\n        return this.buildClassViewFromFile(file);\n      }\n\n      return Result.ok<ClassView | null>(null);\n    } catch (error) {\n      return Result.fail<ClassView | null>(\n        `Failed to find ClassView: ${error.message}`,\n      );\n    }\n  }\n\n  async findById(id: AssetId): Promise<Result<ClassView | null>> {\n    try {\n      const file = this.app.vault.getAbstractFileByPath(id.toString() + \".md\");\n      if (!file || !(file instanceof TFile)) {\n        return Result.ok<ClassView | null>(null);\n      }\n\n      return this.buildClassViewFromFile(file);\n    } catch (error) {\n      return Result.fail<ClassView | null>(\n        `Failed to find ClassView by ID: ${error.message}`,\n      );\n    }\n  }\n\n  async save(classView: ClassView): Promise<Result<void>> {\n    try {\n      const filePath = `${classView.id.toString()}.md`;\n      const content = this.serializeClassView(classView);\n\n      const existingFile = this.app.vault.getAbstractFileByPath(filePath);\n      if (existingFile instanceof TFile) {\n        await this.app.vault.modify(existingFile, content);\n      } else {\n        await this.app.vault.create(filePath, content);\n      }\n\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Failed to save ClassView: ${error.message}`);\n    }\n  }\n\n  async delete(id: AssetId): Promise<Result<void>> {\n    try {\n      const file = this.app.vault.getAbstractFileByPath(id.toString() + \".md\");\n      if (file instanceof TFile) {\n        await this.app.vault.delete(file);\n      }\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Failed to delete ClassView: ${error.message}`);\n    }\n  }\n\n  async findAll(): Promise<Result<ClassView[]>> {\n    try {\n      const classViews: ClassView[] = [];\n      const files = this.app.vault.getMarkdownFiles();\n\n      for (const file of files) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (!metadata?.frontmatter) continue;\n\n        const instanceClass = metadata.frontmatter[\"exo__Instance_class\"];\n        if (instanceClass !== \"[[ui__ClassView]]\") continue;\n\n        const result = await this.buildClassViewFromFile(file);\n        if (result.isSuccess && result.getValue()) {\n          classViews.push(result.getValue()!);\n        }\n      }\n\n      return Result.ok<ClassView[]>(classViews);\n    } catch (error) {\n      return Result.fail<ClassView[]>(\n        `Failed to find all ClassViews: ${error.message}`,\n      );\n    }\n  }\n\n  async exists(className: ClassName): Promise<Result<boolean>> {\n    const result = await this.findByClassName(className);\n    if (result.isFailure) {\n      return Result.fail<boolean>(result.error);\n    }\n    return Result.ok<boolean>(result.getValue() !== null);\n  }\n\n  private async buildClassViewFromFile(\n    file: TFile,\n  ): Promise<Result<ClassView | null>> {\n    try {\n      const metadata = this.app.metadataCache.getFileCache(file);\n      if (!metadata?.frontmatter) {\n        return Result.ok<ClassView | null>(null);\n      }\n\n      const fm = metadata.frontmatter;\n\n      // Parse target class\n      const targetClass = fm[\"ui__ClassView_targetClass\"];\n      if (!targetClass) {\n        return Result.ok<ClassView | null>(null);\n      }\n\n      const classNameResult = ClassName.create(\n        this.cleanAssetReference(targetClass),\n      );\n      if (classNameResult.isFailure) {\n        return Result.fail<ClassView | null>(classNameResult.error);\n      }\n\n      // Parse buttons\n      const buttonRefs = fm[\"ui__ClassView_buttons\"] || [];\n      const buttons: UIButton[] = [];\n\n      for (const buttonRef of this.ensureArray(buttonRefs)) {\n        const buttonResult = await this.loadButton(\n          this.cleanAssetReference(buttonRef),\n        );\n        if (buttonResult.isSuccess && buttonResult.getValue()) {\n          buttons.push(buttonResult.getValue()!);\n        }\n      }\n\n      // Parse display options\n      const displayOptions: DisplayOptions = {\n        showProperties: fm[\"ui__ClassView_showProperties\"] !== false,\n        showRelations: fm[\"ui__ClassView_showRelations\"] !== false,\n        showBacklinks: fm[\"ui__ClassView_showBacklinks\"] !== false,\n        showButtons: fm[\"ui__ClassView_showButtons\"] !== false,\n        buttonPosition: fm[\"ui__ClassView_buttonPosition\"] || \"top\",\n      };\n\n      // Create ClassView\n      const idResult = AssetId.create(file.basename);\n      if (idResult.isFailure) {\n        return Result.fail<ClassView | null>(idResult.error);\n      }\n\n      const classViewResult = ClassView.create({\n        id: idResult.getValue(),\n        className: classNameResult.getValue(),\n        buttons: buttons,\n        layoutTemplate: fm[\"ui__ClassView_template\"],\n        displayOptions: displayOptions,\n      });\n\n      if (classViewResult.isFailure) {\n        return Result.fail<ClassView | null>(classViewResult.error);\n      }\n\n      return Result.ok<ClassView | null>(classViewResult.getValue());\n    } catch (error) {\n      return Result.fail<ClassView | null>(\n        `Failed to build ClassView: ${error.message}`,\n      );\n    }\n  }\n\n  private async loadButton(\n    buttonName: string,\n  ): Promise<Result<UIButton | null>> {\n    try {\n      const file = this.app.vault.getAbstractFileByPath(buttonName + \".md\");\n      if (!file || !(file instanceof TFile)) {\n        return Result.ok<UIButton | null>(null);\n      }\n\n      const metadata = this.app.metadataCache.getFileCache(file);\n      if (!metadata?.frontmatter) {\n        return Result.ok<UIButton | null>(null);\n      }\n\n      const fm = metadata.frontmatter;\n\n      const idResult = AssetId.create(file.basename);\n      const commandIdResult = AssetId.create(\n        this.cleanAssetReference(fm[\"ui__Button_command\"] || \"\"),\n      );\n\n      if (idResult.isFailure || commandIdResult.isFailure) {\n        return Result.ok<UIButton | null>(null);\n      }\n\n      const buttonResult = UIButton.create({\n        id: idResult.getValue(),\n        label: fm[\"ui__Button_label\"] || file.basename,\n        commandId: commandIdResult.getValue(),\n        order: fm[\"ui__Button_order\"] || 0,\n        isEnabled: fm[\"ui__Button_enabled\"] !== false,\n        tooltip: fm[\"ui__Button_tooltip\"],\n      });\n\n      if (buttonResult.isFailure) {\n        return Result.fail<UIButton | null>(buttonResult.error);\n      }\n\n      return Result.ok<UIButton | null>(buttonResult.getValue());\n    } catch (error) {\n      return Result.fail<UIButton | null>(\n        `Failed to load button: ${error.message}`,\n      );\n    }\n  }\n\n  private serializeClassView(classView: ClassView): string {\n    const frontmatter = {\n      exo__Instance_class: \"[[ui__ClassView]]\",\n      ui__ClassView_targetClass: `[[${classView.className.value}]]`,\n      ui__ClassView_buttons: classView.buttons.map(\n        (b) => `[[${b.id.toString()}]]`,\n      ),\n      ui__ClassView_showProperties: classView.displayOptions.showProperties,\n      ui__ClassView_showRelations: classView.displayOptions.showRelations,\n      ui__ClassView_showBacklinks: classView.displayOptions.showBacklinks,\n      ui__ClassView_showButtons: classView.displayOptions.showButtons,\n      ui__ClassView_buttonPosition: classView.displayOptions.buttonPosition,\n    };\n\n    const yamlContent = this.toYaml(frontmatter);\n    return `---\\n${yamlContent}---\\n\\n# ClassView: ${classView.className.value}\\n`;\n  }\n\n  private cleanAssetReference(ref: string): string {\n    if (typeof ref !== \"string\") return \"\";\n    return ref.replace(/\\[\\[|\\]\\]/g, \"\").trim();\n  }\n\n  private ensureArray(value: any): any[] {\n    if (Array.isArray(value)) return value;\n    if (value) return [value];\n    return [];\n  }\n\n  private toYaml(obj: any): string {\n    // Simple YAML serialization\n    return (\n      Object.entries(obj)\n        .map(([key, value]) => {\n          if (Array.isArray(value)) {\n            return `${key}:\\n${value.map((v) => `  - ${v}`).join(\"\\n\")}`;\n          }\n          return `${key}: ${value}`;\n        })\n        .join(\"\\n\") + \"\\n\"\n    );\n  }\n}\n"],"version":3}