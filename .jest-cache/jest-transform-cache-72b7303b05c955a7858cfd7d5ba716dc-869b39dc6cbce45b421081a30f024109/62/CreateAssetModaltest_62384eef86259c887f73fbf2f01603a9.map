{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/modals/CreateAssetModal.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/modals/CreateAssetModal.test.ts"],"sourcesContent":["import { App, Setting, Notice } from \"obsidian\";\nimport { CreateAssetModal } from \"../../../../src/presentation/modals/CreateAssetModal\";\nimport { CreateAssetUseCase } from \"../../../../src/application/use-cases/CreateAssetUseCase\";\nimport { DIContainer } from \"../../../../src/infrastructure/container/DIContainer\";\nimport { Result } from \"../../../../src/domain/core/Result\";\n\n// Mock DIContainer\njest.mock(\"../../../../src/infrastructure/container/DIContainer\");\n\n// Mock Notice\njest.mock(\"obsidian\", () => {\n  const actual = jest.requireActual(\"obsidian\");\n  return {\n    ...actual,\n    Notice: jest.fn(),\n    Setting: jest.fn().mockImplementation(() => ({\n      setName: jest.fn().mockReturnThis(),\n      setDesc: jest.fn().mockReturnThis(),\n      addText: jest.fn().mockReturnThis(),\n      addDropdown: jest.fn().mockReturnThis(),\n      addToggle: jest.fn().mockReturnThis(),\n      addTextArea: jest.fn().mockReturnThis(),\n      addButton: jest.fn().mockReturnThis(),\n    })),\n  };\n});\n\n// Extend HTMLElement to include Obsidian-specific methods\ndeclare global {\n  interface HTMLElement {\n    createEl(tag: string, attrs?: any): HTMLElement;\n    createDiv(attrs?: any): HTMLElement;\n    empty(): void;\n  }\n}\n\n// Add Obsidian DOM extensions to HTMLElement prototype\nbeforeAll(() => {\n  HTMLElement.prototype.createEl = jest.fn().mockImplementation(function (\n    this: HTMLElement,\n    tag: string,\n    attrs?: any,\n  ) {\n    const element = document.createElement(tag);\n    if (attrs?.text) element.textContent = attrs.text;\n    if (attrs?.cls) element.className = attrs.cls;\n    // Append to parent (this) like real Obsidian createEl does\n    this.appendChild(element);\n    return element;\n  });\n\n  HTMLElement.prototype.createDiv = jest.fn().mockImplementation(function (\n    this: HTMLElement,\n    attrs?: any,\n  ) {\n    const element = document.createElement(\"div\");\n    if (attrs?.cls) element.className = attrs.cls;\n    // Append to parent (this) like real Obsidian createDiv does\n    this.appendChild(element);\n    return element;\n  });\n\n  HTMLElement.prototype.empty = jest.fn().mockImplementation(function () {\n    while (this.firstChild) {\n      this.removeChild(this.firstChild);\n    }\n  });\n});\n\ndescribe(\"CreateAssetModal\", () => {\n  let app: App;\n  let modal: CreateAssetModal;\n  let mockCreateAssetUseCase: jest.Mocked<CreateAssetUseCase>;\n  let mockContainer: jest.Mocked<DIContainer>;\n  let mockCircuitBreaker: any;\n  let mockPropertyCache: any;\n\n  beforeEach(() => {\n    // Setup app mock with vault and metadataCache\n    app = new App();\n    (app as any).vault = {\n      getMarkdownFiles: jest.fn().mockReturnValue([]),\n      read: jest.fn(),\n    };\n    (app as any).metadataCache = {\n      getFileCache: jest.fn().mockReturnValue(null),\n    };\n\n    // Setup CreateAssetUseCase mock\n    mockCreateAssetUseCase = {\n      execute: jest.fn(),\n    } as any;\n\n    // Mock services for enhanced functionality\n    mockPropertyCache = {\n      getPropertiesForClass: jest.fn().mockReturnValue([]),\n      updateClassProperties: jest.fn(),\n      hasPropertiesForClass: jest.fn().mockReturnValue(false),\n      clearCache: jest.fn(),\n    };\n\n    mockCircuitBreaker = {\n      execute: jest.fn(),\n      getCircuitState: jest.fn(),\n      openCircuit: jest.fn(),\n      closeCircuit: jest.fn(),\n    };\n\n    // Setup DIContainer mock\n    mockContainer = {\n      getCreateAssetUseCase: jest.fn().mockReturnValue(mockCreateAssetUseCase),\n      getInstance: jest.fn().mockReturnThis(),\n      resolve: jest.fn().mockImplementation((token: string) => {\n        if (token === 'PropertyCacheService') {\n          return mockPropertyCache;\n        }\n        if (token === 'CircuitBreakerService') {\n          return mockCircuitBreaker;\n        }\n        // Return empty mock repositories\n        return {};\n      }),\n    } as any;\n\n    (DIContainer.getInstance as jest.Mock).mockReturnValue(mockContainer);\n\n    // Create modal instance\n    modal = new CreateAssetModal(app);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Asset Creation with Circuit Breaker\", () => {\n    test(\"should create asset successfully through circuit breaker\", async () => {\n      // Setup circuit breaker to execute operation and return success\n      mockCircuitBreaker.execute.mockImplementation(async (name: string, operation: Function) => {\n        // Set up use case to return success\n        mockCreateAssetUseCase.execute.mockResolvedValue({\n          success: true,\n          assetId: \"test-id\",\n          message: \"Created asset: Test Asset\",\n        });\n        // Execute the operation\n        return await operation();\n      });\n\n      (modal as any).assetTitle = \"Test Asset\";\n      (modal as any).assetClass = \"exo__Task\";\n      (modal as any).assetOntology = \"exo\";\n      (modal as any).propertyValues.set(\"priority\", \"high\");\n\n      const closeSpy = jest.spyOn(modal, \"close\").mockImplementation(() => {});\n\n      await (modal as any).createAsset();\n\n      expect(mockCircuitBreaker.execute).toHaveBeenCalledWith(\n        \"asset-creation\",\n        expect.any(Function),\n        expect.objectContaining({\n          failureThreshold: 3,\n          resetTimeout: 30000,\n          halfOpenMaxCalls: 2,\n        })\n      );\n\n      expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith({\n        title: \"Test Asset\",\n        className: \"exo__Task\",\n        ontologyPrefix: \"exo\",\n        properties: {\n          priority: \"high\",\n        },\n      });\n\n      expect(Notice).toHaveBeenCalledWith(\"Created asset: Test Asset\");\n      expect(closeSpy).toHaveBeenCalled();\n    });\n\n    test(\"should handle asset creation failure through circuit breaker\", async () => {\n      // Setup circuit breaker to execute operation and return failure\n      mockCircuitBreaker.execute.mockImplementation(async (name: string, operation: Function) => {\n        mockCreateAssetUseCase.execute.mockResolvedValue({\n          success: false,\n          assetId: \"\",\n          message: \"Creation failed\",\n          error: \"Invalid asset data\",\n        });\n        return await operation();\n      });\n\n      (modal as any).assetTitle = \"Test Asset\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Validation error: Invalid asset data\", 6000);\n    });\n\n    test(\"should handle circuit breaker open state\", async () => {\n      // Setup circuit breaker to return circuit open error\n      mockCircuitBreaker.execute.mockResolvedValue(\n        Result.fail(\"Circuit asset-creation is OPEN. Try again in 25 seconds\")\n      );\n\n      (modal as any).assetTitle = \"Test Asset\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\n        \"Asset creation is temporarily unavailable. Please try again in a moment.\",\n        5000\n      );\n    });\n\n    test(\"should handle ontology-related errors\", async () => {\n      mockCircuitBreaker.execute.mockResolvedValue(\n        Result.fail(\"Ontology 'test' not found\")\n      );\n\n      (modal as any).assetTitle = \"Test Asset\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\n        \"Error: Ontology 'test' not found\",\n        5000\n      );\n    });\n\n    test(\"should handle validation errors\", async () => {\n      mockCircuitBreaker.execute.mockResolvedValue(\n        Result.fail(\"Invalid asset title: contains special characters\")\n      );\n\n      (modal as any).assetTitle = \"Test@Asset#\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\n        \"Validation error: Invalid asset title: contains special characters\",\n        6000\n      );\n    });\n  });\n\n  describe(\"Property Caching\", () => {\n    test(\"should use property cache service\", async () => {\n      // Test that the property cache service is resolved during initialization\n      expect(mockContainer.resolve).toHaveBeenCalledWith(\"PropertyCacheService\");\n      \n      // Test that the cache service is available\n      expect(mockPropertyCache).toBeDefined();\n      expect(mockPropertyCache.getPropertiesForClass).toBeDefined();\n      expect(mockPropertyCache.updateClassProperties).toBeDefined();\n    });\n\n    test(\"should update cache when properties are loaded from vault\", async () => {\n      const file = {\n        basename: \"propertyName\",\n        name: \"propertyName.md\",\n      };\n\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([file]);\n      (app.metadataCache.getFileCache as jest.Mock).mockReturnValue({\n        frontmatter: {\n          exo__Instance_class: \"exo__Property\",\n          rdfs__domain: \"TestClass\",\n          rdfs__label: \"Property Label\",\n        },\n      });\n\n      mockPropertyCache.hasPropertiesForClass.mockReturnValue(false);\n\n      await (modal as any).updatePropertiesForClass(\"TestClass\");\n\n      // Properties should be loaded and cached\n      expect(mockPropertyCache.updateClassProperties).not.toHaveBeenCalled(); // Cache update is handled internally\n    });\n  });\n\n  describe(\"Modal Initialization\", () => {\n    test(\"should initialize with correct default values\", () => {\n      expect((modal as any).assetTitle).toBe(\"\");\n      expect((modal as any).assetClass).toBe(\"exo__Asset\");\n      expect((modal as any).assetOntology).toBe(\"\");\n      expect((modal as any).propertyValues).toBeInstanceOf(Map);\n      expect((modal as any).propertyValues.size).toBe(0);\n    });\n\n    test(\"should properly resolve services from container\", () => {\n      expect(mockContainer.resolve).toHaveBeenCalledWith(\"IOntologyRepository\");\n      expect(mockContainer.resolve).toHaveBeenCalledWith(\"IClassViewRepository\");\n      expect(mockContainer.resolve).toHaveBeenCalledWith(\"PropertyCacheService\");\n      expect(mockContainer.resolve).toHaveBeenCalledWith(\"CircuitBreakerService\");\n    });\n  });\n\n  describe(\"Error Recovery\", () => {\n    test(\"should recover from circuit breaker errors\", async () => {\n      // First call fails\n      mockCircuitBreaker.execute.mockResolvedValueOnce(\n        Result.fail(\"Circuit is open\")\n      );\n\n      (modal as any).assetTitle = \"Test Asset\";\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\n        \"Asset creation is temporarily unavailable. Please try again in a moment.\",\n        5000\n      );\n\n      // Reset Notice mock for second call\n      (Notice as jest.Mock).mockClear();\n\n      // Second call succeeds after circuit recovery\n      mockCircuitBreaker.execute.mockImplementation(async (name: string, operation: Function) => {\n        mockCreateAssetUseCase.execute.mockResolvedValue({\n          success: true,\n          assetId: \"test-id\",\n          message: \"Created asset: Test Asset\",\n        });\n        return await operation();\n      });\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Created asset: Test Asset\");\n    });\n  });\n});"],"version":3}