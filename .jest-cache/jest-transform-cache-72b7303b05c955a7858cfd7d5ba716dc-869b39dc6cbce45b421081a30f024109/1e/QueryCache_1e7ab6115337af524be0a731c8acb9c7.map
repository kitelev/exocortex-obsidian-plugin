{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/QueryCache.ts","mappings":";AAAA;;;GAGG;;;AA2BU,QAAA,oBAAoB,GAAqB;IACpD,OAAO,EAAE,IAAI;IACb,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACzB,MAAM,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IACtB,eAAe,EAAE,EAAE,GAAG,IAAI;IAC1B,OAAO,EAAE,IAAI;CACd,CAAC;AAEF,MAAa,UAAU;IAMrB,YAAY,SAAoC,EAAE;QAChD,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,4BAAoB,EAAE,GAAG,MAAM,EAAE,CAAC;QACrD,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG;YACX,IAAI,EAAE,CAAC;YACP,MAAM,EAAE,CAAC;YACT,SAAS,EAAE,CAAC;YACZ,YAAY,EAAE,CAAC;YACf,OAAO,EAAE,CAAC;YACV,IAAI,EAAE,CAAC;YACP,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;SAC7B,CAAC;QAEF,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,GAAG,CAAI,QAAgB;QACrB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;QAE1B,IAAI,CAAC,KAAK,EAAE;YACV,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;SACb;QAED,6BAA6B;QAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACpB,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,OAAO,KAAK,CAAC,KAAK,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,GAAG,CAAI,QAAgB,EAAE,KAAQ,EAAE,GAAY;QAC7C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACxB,OAAO;SACR;QAED,MAAM,YAAY,GAAG,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACtE,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAC3B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,EACzB,IAAI,CAAC,MAAM,CAAC,MAAM,CACnB,CAAC;QAEF,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAEvB,yCAAyC;QACzC,IAAI,YAAY,IAAI,CAAC,EAAE;YACrB,OAAO;SACR;QAED,wCAAwC;QACxC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAC7C,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;QAED,MAAM,KAAK,GAAkB;YAC3B,KAAK;YACL,SAAS,EAAE,GAAG;YACd,SAAS,EAAE,GAAG,GAAG,YAAY;YAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;SACpC,CAAC;QAEF,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,KAAa;QAC1B,oEAAoE;QACpE,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,SAAS,GAAG,KAAK,CAAC;QAEtB,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,GAAG,EAAE,EAAE;YACrC,yBAAyB;YACzB,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC;YAC5D,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;SAC7C;QAED,+EAA+E;QAC/E,MAAM,UAAU,GAAG,SAAS;aACzB,IAAI,EAAE,CAAC,2CAA2C;aAClD,OAAO,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,wCAAwC;aACnE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,4CAA4C;aACjE,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,wCAAwC;aACpE,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC;aAC3B,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,uCAAuC;aACnE,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC;aAC3B,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,wBAAwB;aAC7C,IAAI,EAAE,CAAC,gCAAgC;aACvC,WAAW,EAAE,CAAC,CAAC,qDAAqD;QAEvE,MAAM,OAAO,GAAG,MAAM,GAAG,UAAU,CAAC;QAEpC,uEAAuE;QACvE,8BAA8B;QAC9B,IAAI,OAAO,CAAC,MAAM,GAAG,IAAI,EAAE;YACzB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAChC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,aAAa;QACX,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;QACnC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC;QACnC,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,eAAe,CACb,SAA2D;QAE3D,IAAI,WAAW,GAAG,CAAC,CAAC;QAEpB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;YAC/C,IAAI,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;gBACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,WAAW,EAAE,CAAC;aACf;SACF;QAED,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,WAAW,CAAC;QACpC,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,OAAO,WAAW,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,aAAa;QACX,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAoC;QAC/C,IAAI,CAAC,MAAM,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAEzC,iCAAiC;QACjC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;QAED,qCAAqC;QACrC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YAC5C,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;QAEnB,4CAA4C;QAC5C,IAAI,SAAS,CAAC,eAAe,KAAK,SAAS,EAAE;YAC3C,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;IACH,CAAC;IAED;;OAEG;IACH,SAAS;QACP,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,OAAO;QACL,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,IAAI,OAAO,GAAG,CAAC,CAAC;QAEhB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;YAC/C,IAAI,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE;gBACzB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvB,OAAO,EAAE,CAAC;aACX;SACF;QAED,IAAI,OAAO,GAAG,CAAC,EAAE;YACf,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,OAAO,CAAC;YAChC,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,GAAG,CAAC,QAAgB;QAClB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;YACxB,OAAO,KAAK,CAAC;SACd;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QAED,mBAAmB;QACnB,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO,KAAK,CAAC;SACd;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAED,kBAAkB;IAEV,SAAS,CAAC,KAAa;QAC7B,yCAAyC;QACzC,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;YACjC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC,4BAA4B;SACjD;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;IACnC,CAAC;IAEO,WAAW;QACjB,IAAI,SAAS,GAAkB,IAAI,CAAC;QACpC,IAAI,eAAe,GAAG,QAAQ,CAAC;QAE/B,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE;YAC/C,IAAI,KAAK,CAAC,SAAS,GAAG,eAAe,EAAE;gBACrC,eAAe,GAAG,KAAK,CAAC,SAAS,CAAC;gBAClC,SAAS,GAAG,GAAG,CAAC;aACjB;SACF;QAED,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;IACH,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACpC,CAAC;IAEO,aAAa;QACnB,IAAI,CAAC,KAAK,CAAC,OAAO;YAChB,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,CAAC;gBACzB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,GAAG;gBACnD,CAAC,CAAC,CAAC,CAAC;IACV,CAAC;IAEO,iBAAiB;QACvB,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,CAAC,EAAE;YACnC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;gBACnC,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;SACjC;IACH,CAAC;IAEO,gBAAgB;QACtB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC;SAC/B;IACH,CAAC;CACF;AA1TD,gCA0TC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/QueryCache.ts"],"sourcesContent":["/**\n * SPARQL Query Cache Service\n * Provides in-memory caching for SPARQL query results with TTL and cache invalidation\n */\n\nexport interface CacheEntry<T> {\n  value: T;\n  timestamp: number;\n  expiresAt: number;\n  queryHash: string;\n}\n\nexport interface CacheStatistics {\n  hits: number;\n  misses: number;\n  evictions: number;\n  totalQueries: number;\n  hitRate: number;\n  size: number;\n  maxSize: number;\n}\n\nexport interface QueryCacheConfig {\n  maxSize: number; // Maximum number of cached entries\n  defaultTTL: number; // Default TTL in milliseconds\n  maxTTL: number; // Maximum TTL in milliseconds\n  cleanupInterval: number; // Cleanup interval in milliseconds\n  enabled: boolean; // Whether caching is enabled\n}\n\nexport const DEFAULT_CACHE_CONFIG: QueryCacheConfig = {\n  maxSize: 1000,\n  defaultTTL: 5 * 60 * 1000, // 5 minutes\n  maxTTL: 30 * 60 * 1000, // 30 minutes\n  cleanupInterval: 60 * 1000, // 1 minute\n  enabled: true,\n};\n\nexport class QueryCache {\n  private cache: Map<string, CacheEntry<any>>;\n  private stats: CacheStatistics;\n  private config: QueryCacheConfig;\n  private cleanupTimer?: ReturnType<typeof setTimeout>;\n\n  constructor(config: Partial<QueryCacheConfig> = {}) {\n    this.config = { ...DEFAULT_CACHE_CONFIG, ...config };\n    this.cache = new Map();\n    this.stats = {\n      hits: 0,\n      misses: 0,\n      evictions: 0,\n      totalQueries: 0,\n      hitRate: 0,\n      size: 0,\n      maxSize: this.config.maxSize,\n    };\n\n    this.startCleanupTimer();\n  }\n\n  /**\n   * Get cached result for a query\n   */\n  get<T>(queryKey: string): T | null {\n    if (!this.config.enabled) {\n      this.stats.misses++;\n      this.stats.totalQueries++;\n      this.updateHitRate();\n      return null;\n    }\n\n    const entry = this.cache.get(queryKey);\n    this.stats.totalQueries++;\n\n    if (!entry) {\n      this.stats.misses++;\n      this.updateHitRate();\n      return null;\n    }\n\n    // Check if entry has expired\n    if (Date.now() > entry.expiresAt) {\n      this.cache.delete(queryKey);\n      this.stats.misses++;\n      this.stats.evictions++;\n      this.updateStats();\n      this.updateHitRate();\n      return null;\n    }\n\n    this.stats.hits++;\n    this.updateHitRate();\n    return entry.value;\n  }\n\n  /**\n   * Set cached result for a query\n   */\n  set<T>(queryKey: string, value: T, ttl?: number): void {\n    if (!this.config.enabled) {\n      return;\n    }\n\n    const requestedTTL = ttl !== undefined ? ttl : this.config.defaultTTL;\n    const effectiveTTL = Math.min(\n      Math.max(requestedTTL, 0),\n      this.config.maxTTL,\n    );\n\n    const now = Date.now();\n\n    // Don't cache if TTL is zero or negative\n    if (effectiveTTL <= 0) {\n      return;\n    }\n\n    // Evict oldest entries if cache is full\n    while (this.cache.size >= this.config.maxSize) {\n      this.evictOldest();\n    }\n\n    const entry: CacheEntry<T> = {\n      value,\n      timestamp: now,\n      expiresAt: now + effectiveTTL,\n      queryHash: this.hashQuery(queryKey),\n    };\n\n    this.cache.set(queryKey, entry);\n    this.updateStats();\n  }\n\n  /**\n   * Normalize and create cache key from SPARQL query\n   */\n  createCacheKey(query: string): string {\n    // First split on the colon to handle prefix separately if it exists\n    const colonIndex = query.indexOf(\":\");\n    let prefix = \"\";\n    let queryPart = query;\n\n    if (colonIndex > 0 && colonIndex < 20) {\n      // Assume prefix is short\n      prefix = query.substring(0, colonIndex).toLowerCase() + \":\";\n      queryPart = query.substring(colonIndex + 1);\n    }\n\n    // Normalize the query by removing extra whitespace and converting to lowercase\n    const normalized = queryPart\n      .trim() // Remove leading/trailing whitespace first\n      .replace(/[\\r\\n\\t]+/g, \" \") // Replace newlines and tabs with spaces\n      .replace(/\\s+/g, \" \") // Replace multiple spaces with single space\n      .replace(/\\s*\\{\\s*/g, \" { \") // Normalize spacing around curly braces\n      .replace(/\\s*\\}\\s*/g, \" } \")\n      .replace(/\\s*\\(\\s*/g, \" ( \") // Normalize spacing around parentheses\n      .replace(/\\s*\\)\\s*/g, \" ) \")\n      .replace(/\\s+/g, \" \") // Clean up spaces again\n      .trim() // Trim again after replacements\n      .toLowerCase(); // Convert to lowercase for case-insensitive matching\n\n    const fullKey = prefix + normalized;\n\n    // Use the normalized string directly as the key for better consistency\n    // Only hash very long queries\n    if (fullKey.length > 1000) {\n      return this.hashQuery(fullKey);\n    }\n    return fullKey;\n  }\n\n  /**\n   * Invalidate all cached entries\n   */\n  invalidateAll(): void {\n    const sizeBefore = this.cache.size;\n    this.cache.clear();\n    this.stats.evictions += sizeBefore;\n    this.updateStats();\n  }\n\n  /**\n   * Invalidate entries based on a predicate function\n   */\n  invalidateWhere(\n    predicate: (key: string, entry: CacheEntry<any>) => boolean,\n  ): number {\n    let invalidated = 0;\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (predicate(key, entry)) {\n        this.cache.delete(key);\n        invalidated++;\n      }\n    }\n\n    this.stats.evictions += invalidated;\n    this.updateStats();\n    return invalidated;\n  }\n\n  /**\n   * Get current cache statistics\n   */\n  getStatistics(): CacheStatistics {\n    return { ...this.stats };\n  }\n\n  /**\n   * Update cache configuration\n   */\n  updateConfig(newConfig: Partial<QueryCacheConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.stats.maxSize = this.config.maxSize;\n\n    // If cache is disabled, clear it\n    if (!this.config.enabled) {\n      this.invalidateAll();\n    }\n\n    // If max size reduced, evict entries\n    while (this.cache.size > this.config.maxSize) {\n      this.evictOldest();\n    }\n    this.updateStats();\n\n    // Restart cleanup timer if interval changed\n    if (newConfig.cleanupInterval !== undefined) {\n      this.stopCleanupTimer();\n      this.startCleanupTimer();\n    }\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): QueryCacheConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Manually trigger cleanup of expired entries\n   */\n  cleanup(): number {\n    const now = Date.now();\n    let cleaned = 0;\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (now > entry.expiresAt) {\n        this.cache.delete(key);\n        cleaned++;\n      }\n    }\n\n    if (cleaned > 0) {\n      this.stats.evictions += cleaned;\n      this.updateStats();\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * Check if a query result is cached\n   */\n  has(queryKey: string): boolean {\n    if (!this.config.enabled) {\n      return false;\n    }\n\n    const entry = this.cache.get(queryKey);\n    if (!entry) {\n      return false;\n    }\n\n    // Check if expired\n    if (Date.now() > entry.expiresAt) {\n      this.cache.delete(queryKey);\n      this.stats.evictions++;\n      this.updateStats();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Destroy the cache and cleanup resources\n   */\n  destroy(): void {\n    this.stopCleanupTimer();\n    this.cache.clear();\n  }\n\n  // Private methods\n\n  private hashQuery(query: string): string {\n    // Simple hash function for query strings\n    let hash = 0;\n    if (query.length === 0) return hash.toString();\n\n    for (let i = 0; i < query.length; i++) {\n      const char = query.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n\n    return Math.abs(hash).toString();\n  }\n\n  private evictOldest(): void {\n    let oldestKey: string | null = null;\n    let oldestTimestamp = Infinity;\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.timestamp < oldestTimestamp) {\n        oldestTimestamp = entry.timestamp;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n      this.stats.evictions++;\n      this.updateStats();\n    }\n  }\n\n  private updateStats(): void {\n    this.stats.size = this.cache.size;\n  }\n\n  private updateHitRate(): void {\n    this.stats.hitRate =\n      this.stats.totalQueries > 0\n        ? (this.stats.hits / this.stats.totalQueries) * 100\n        : 0;\n  }\n\n  private startCleanupTimer(): void {\n    if (this.config.cleanupInterval > 0) {\n      this.cleanupTimer = setInterval(() => {\n        this.cleanup();\n      }, this.config.cleanupInterval);\n    }\n  }\n\n  private stopCleanupTimer(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = undefined;\n    }\n  }\n}\n"],"version":3}