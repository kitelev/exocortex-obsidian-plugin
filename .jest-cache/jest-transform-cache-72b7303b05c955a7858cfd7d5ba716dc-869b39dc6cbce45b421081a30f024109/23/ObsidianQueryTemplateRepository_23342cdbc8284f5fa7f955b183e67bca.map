{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianQueryTemplateRepository.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianQueryTemplateRepository.ts"],"sourcesContent":["import { App, TFile, Vault } from \"obsidian\";\nimport {\n  IQueryTemplateRepository,\n  TemplateSearchCriteria,\n} from \"../../domain/repositories/IQueryTemplateRepository\";\nimport {\n  QueryTemplate,\n  TemplateCategory,\n  TemplateMetadata,\n  TemplateLayout,\n  TemplateParameter,\n} from \"../../domain/visual/QueryTemplate\";\nimport { BuiltInQueryTemplates } from \"./BuiltInQueryTemplates\";\n\ninterface StoredTemplateData {\n  id: string;\n  metadata: TemplateMetadata;\n  layout: TemplateLayout;\n  parameters: TemplateParameter[];\n  sparqlTemplate: string;\n  isBuiltIn: boolean;\n  usageCount?: number;\n  lastUsed?: string;\n}\n\ninterface TemplateUsageData {\n  templateId: string;\n  usageCount: number;\n  lastUsed: Date;\n  parametersFilled: number[];\n}\n\nexport class ObsidianQueryTemplateRepository\n  implements IQueryTemplateRepository\n{\n  private readonly templatesPath: string;\n  private readonly usageDataPath: string;\n  private templateCache: Map<string, QueryTemplate> = new Map();\n  private usageData: Map<string, TemplateUsageData> = new Map();\n  private cacheLoaded: boolean = false;\n\n  constructor(\n    private readonly app: App,\n    templatesPath: string = \".exocortex/templates\",\n    usageDataPath: string = \".exocortex/template-usage.json\",\n  ) {\n    this.templatesPath = templatesPath;\n    this.usageDataPath = usageDataPath;\n  }\n\n  async findAll(): Promise<QueryTemplate[]> {\n    await this.ensureCacheLoaded();\n    const templates = Array.from(this.templateCache.values());\n\n    // Sort by usage frequency and then by name\n    return templates.sort((a, b) => {\n      const usageA = this.usageData.get(a.getId())?.usageCount || 0;\n      const usageB = this.usageData.get(b.getId())?.usageCount || 0;\n\n      if (usageA !== usageB) {\n        return usageB - usageA;\n      }\n\n      return a.getMetadata().name.localeCompare(b.getMetadata().name);\n    });\n  }\n\n  async findByCriteria(\n    criteria: TemplateSearchCriteria,\n  ): Promise<QueryTemplate[]> {\n    await this.ensureCacheLoaded();\n    let templates = Array.from(this.templateCache.values());\n\n    if (criteria.category) {\n      templates = templates.filter(\n        (t) => t.getMetadata().category === criteria.category,\n      );\n    }\n\n    if (criteria.difficulty) {\n      templates = templates.filter(\n        (t) => t.getMetadata().difficulty === criteria.difficulty,\n      );\n    }\n\n    if (criteria.nameContains) {\n      const searchTerm = criteria.nameContains.toLowerCase();\n      templates = templates.filter(\n        (t) =>\n          t.getMetadata().name.toLowerCase().includes(searchTerm) ||\n          t.getMetadata().description.toLowerCase().includes(searchTerm),\n      );\n    }\n\n    if (criteria.tags && criteria.tags.length > 0) {\n      templates = templates.filter((t) => {\n        const templateTags = t.getMetadata().tags;\n        return criteria.tags!.some((tag) => templateTags.includes(tag));\n      });\n    }\n\n    if (criteria.includeBuiltIn !== undefined) {\n      templates = templates.filter(\n        (t) => t.isBuiltInTemplate() === criteria.includeBuiltIn,\n      );\n    }\n\n    if (criteria.includeCustom !== undefined) {\n      templates = templates.filter(\n        (t) => !t.isBuiltInTemplate() === criteria.includeCustom,\n      );\n    }\n\n    return templates;\n  }\n\n  async findById(id: string): Promise<QueryTemplate | undefined> {\n    await this.ensureCacheLoaded();\n    return this.templateCache.get(id);\n  }\n\n  async findByCategory(category: TemplateCategory): Promise<QueryTemplate[]> {\n    return this.findByCriteria({ category });\n  }\n\n  async findByTags(tags: string[]): Promise<QueryTemplate[]> {\n    return this.findByCriteria({ tags });\n  }\n\n  async save(template: QueryTemplate): Promise<QueryTemplate> {\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot modify built-in templates\");\n    }\n\n    const exists = await this.exists(template.getId());\n    if (exists) {\n      return this.update(template);\n    } else {\n      return this.create(template);\n    }\n  }\n\n  async create(template: QueryTemplate): Promise<QueryTemplate> {\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot create built-in templates through repository\");\n    }\n\n    const exists = await this.exists(template.getId());\n    if (exists) {\n      throw new Error(`Template with ID ${template.getId()} already exists`);\n    }\n\n    await this.ensureTemplatesDirectoryExists();\n\n    const fileName = `${this.sanitizeFileName(template.getMetadata().name)}-${template.getId()}.json`;\n    const filePath = `${this.templatesPath}/${fileName}`;\n\n    const data: StoredTemplateData = {\n      id: template.getId(),\n      metadata: template.getMetadata(),\n      layout: template.getLayout(),\n      parameters: template.getParameters(),\n      sparqlTemplate: template.getSparqlTemplate(),\n      isBuiltIn: template.isBuiltInTemplate(),\n    };\n\n    await this.app.vault.create(filePath, JSON.stringify(data, null, 2));\n    this.templateCache.set(template.getId(), template);\n\n    return template;\n  }\n\n  async update(template: QueryTemplate): Promise<QueryTemplate> {\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot modify built-in templates\");\n    }\n\n    const exists = await this.exists(template.getId());\n    if (!exists) {\n      throw new Error(`Template with ID ${template.getId()} not found`);\n    }\n\n    await this.ensureTemplatesDirectoryExists();\n\n    const fileName = await this.findTemplateFile(template.getId());\n    if (!fileName) {\n      throw new Error(`Template file not found for ID ${template.getId()}`);\n    }\n\n    const filePath = `${this.templatesPath}/${fileName}`;\n    const file = this.app.vault.getAbstractFileByPath(filePath) as TFile;\n\n    const data: StoredTemplateData = {\n      id: template.getId(),\n      metadata: template.getMetadata(),\n      layout: template.getLayout(),\n      parameters: template.getParameters(),\n      sparqlTemplate: template.getSparqlTemplate(),\n      isBuiltIn: template.isBuiltInTemplate(),\n    };\n\n    await this.app.vault.modify(file, JSON.stringify(data, null, 2));\n    this.templateCache.set(template.getId(), template);\n\n    return template;\n  }\n\n  async delete(id: string): Promise<boolean> {\n    const template = await this.findById(id);\n    if (!template) {\n      return false;\n    }\n\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot delete built-in templates\");\n    }\n\n    const fileName = await this.findTemplateFile(id);\n    if (!fileName) {\n      return false;\n    }\n\n    const filePath = `${this.templatesPath}/${fileName}`;\n    const file = this.app.vault.getAbstractFileByPath(filePath) as TFile;\n\n    if (file) {\n      await this.app.vault.delete(file);\n      this.templateCache.delete(id);\n      this.usageData.delete(id);\n      await this.saveUsageData();\n      return true;\n    }\n\n    return false;\n  }\n\n  async exists(id: string): Promise<boolean> {\n    await this.ensureCacheLoaded();\n    return this.templateCache.has(id);\n  }\n\n  async importTemplates(templatesData: object[]): Promise<QueryTemplate[]> {\n    const imported: QueryTemplate[] = [];\n\n    for (const templateData of templatesData) {\n      try {\n        const data = templateData as StoredTemplateData;\n\n        // Don't import if already exists and is built-in\n        const existing = this.templateCache.get(data.id);\n        if (existing && existing.isBuiltInTemplate()) {\n          continue;\n        }\n\n        const template = this.createTemplateFromData(data);\n        await this.save(template);\n        imported.push(template);\n      } catch (error) {\n        console.warn(\"Failed to import template:\", error);\n      }\n    }\n\n    return imported;\n  }\n\n  async exportTemplates(templateIds?: string[]): Promise<object[]> {\n    await this.ensureCacheLoaded();\n\n    let templates: QueryTemplate[];\n    if (templateIds) {\n      templates = templateIds\n        .map((id) => this.templateCache.get(id))\n        .filter((t) => t !== undefined) as QueryTemplate[];\n    } else {\n      templates = Array.from(this.templateCache.values());\n    }\n\n    return templates.map((template) => template.toJSON());\n  }\n\n  async getBuiltInTemplates(): Promise<QueryTemplate[]> {\n    return this.findByCriteria({ includeBuiltIn: true, includeCustom: false });\n  }\n\n  async getCustomTemplates(): Promise<QueryTemplate[]> {\n    return this.findByCriteria({ includeBuiltIn: false, includeCustom: true });\n  }\n\n  async getRecentlyUsed(limit: number = 10): Promise<QueryTemplate[]> {\n    await this.ensureCacheLoaded();\n\n    const templateUsage = Array.from(this.usageData.entries())\n      .sort((a, b) => b[1].lastUsed.getTime() - a[1].lastUsed.getTime())\n      .slice(0, limit);\n\n    return templateUsage\n      .map(([id]) => this.templateCache.get(id))\n      .filter((t) => t !== undefined) as QueryTemplate[];\n  }\n\n  async recordUsage(templateId: string): Promise<void> {\n    await this.ensureCacheLoaded();\n\n    const existing = this.usageData.get(templateId);\n    if (existing) {\n      existing.usageCount++;\n      existing.lastUsed = new Date();\n    } else {\n      this.usageData.set(templateId, {\n        templateId,\n        usageCount: 1,\n        lastUsed: new Date(),\n        parametersFilled: [],\n      });\n    }\n\n    await this.saveUsageData();\n  }\n\n  async getUsageStats(templateId: string): Promise<{\n    usageCount: number;\n    lastUsed?: Date;\n    averageParametersFilled?: number;\n  }> {\n    await this.ensureCacheLoaded();\n\n    const usage = this.usageData.get(templateId);\n    if (!usage) {\n      return { usageCount: 0 };\n    }\n\n    const averageParametersFilled =\n      usage.parametersFilled.length > 0\n        ? usage.parametersFilled.reduce((sum, count) => sum + count, 0) /\n          usage.parametersFilled.length\n        : undefined;\n\n    return {\n      usageCount: usage.usageCount,\n      lastUsed: usage.lastUsed,\n      averageParametersFilled,\n    };\n  }\n\n  async refresh(): Promise<void> {\n    this.templateCache.clear();\n    this.usageData.clear();\n    this.cacheLoaded = false;\n    await this.loadBuiltInTemplates();\n    await this.loadCustomTemplates();\n    await this.loadUsageData();\n    this.cacheLoaded = true;\n  }\n\n  private async ensureCacheLoaded(): Promise<void> {\n    if (!this.cacheLoaded) {\n      await this.refresh();\n    }\n  }\n\n  private async ensureTemplatesDirectoryExists(): Promise<void> {\n    const templatesDir = this.app.vault.getAbstractFileByPath(\n      this.templatesPath,\n    );\n    if (!templatesDir) {\n      await this.app.vault.createFolder(this.templatesPath);\n    }\n  }\n\n  private async loadBuiltInTemplates(): Promise<void> {\n    const builtInTemplates = BuiltInQueryTemplates.getAll();\n    builtInTemplates.forEach((template) => {\n      this.templateCache.set(template.getId(), template);\n    });\n  }\n\n  private async loadCustomTemplates(): Promise<void> {\n    await this.ensureTemplatesDirectoryExists();\n\n    const templatesDir = this.app.vault.getAbstractFileByPath(\n      this.templatesPath,\n    );\n    if (!templatesDir || !(templatesDir as any).children) {\n      return;\n    }\n\n    const files = (templatesDir as any).children.filter(\n      (file: any) => file.extension === \"json\" && file.name.endsWith(\".json\"),\n    );\n\n    for (const file of files) {\n      try {\n        const content = await this.app.vault.read(file);\n        const data = JSON.parse(content) as StoredTemplateData;\n\n        const template = this.createTemplateFromData(data);\n        this.templateCache.set(template.getId(), template);\n      } catch (error) {\n        console.warn(`Failed to load template from ${file.path}:`, error);\n      }\n    }\n  }\n\n  private async loadUsageData(): Promise<void> {\n    try {\n      const file = this.app.vault.getAbstractFileByPath(\n        this.usageDataPath,\n      ) as TFile;\n      if (file) {\n        const content = await this.app.vault.read(file);\n        const data = JSON.parse(content) as TemplateUsageData[];\n\n        this.usageData.clear();\n        data.forEach((usage) => {\n          usage.lastUsed = new Date(usage.lastUsed);\n          this.usageData.set(usage.templateId, usage);\n        });\n      }\n    } catch (error) {\n      // Usage data file doesn't exist or is corrupted - start fresh\n      this.usageData.clear();\n    }\n  }\n\n  private async saveUsageData(): Promise<void> {\n    const data = Array.from(this.usageData.values());\n    const content = JSON.stringify(data, null, 2);\n\n    const file = this.app.vault.getAbstractFileByPath(\n      this.usageDataPath,\n    ) as TFile;\n    if (file) {\n      await this.app.vault.modify(file, content);\n    } else {\n      await this.app.vault.create(this.usageDataPath, content);\n    }\n  }\n\n  private async findTemplateFile(templateId: string): Promise<string | null> {\n    await this.ensureTemplatesDirectoryExists();\n\n    const templatesDir = this.app.vault.getAbstractFileByPath(\n      this.templatesPath,\n    );\n    if (!templatesDir || !(templatesDir as any).children) {\n      return null;\n    }\n\n    const files = (templatesDir as any).children.filter(\n      (file: any) =>\n        file.extension === \"json\" && file.name.includes(templateId),\n    );\n\n    return files.length > 0 ? files[0].name : null;\n  }\n\n  private createTemplateFromData(data: StoredTemplateData): QueryTemplate {\n    return new QueryTemplate({\n      id: data.id,\n      metadata: data.metadata,\n      layout: data.layout,\n      parameters: data.parameters,\n      sparqlTemplate: data.sparqlTemplate || \"SELECT * WHERE { ?s ?p ?o }\",\n      isBuiltIn: data.isBuiltIn,\n    });\n  }\n\n  private sanitizeFileName(name: string): string {\n    return name\n      .toLowerCase()\n      .replace(/[^\\w\\s-]/g, \"\")\n      .replace(/\\s+/g, \"-\")\n      .substring(0, 50);\n  }\n}\n"],"version":3}