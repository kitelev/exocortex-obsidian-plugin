{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/services/PropertyCacheService.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/services/PropertyCacheService.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\n\n/**\n * Performance-optimized caching service for property definitions\n * Reduces file system reads during asset creation\n */\nexport class PropertyCacheService {\n  private static instance: PropertyCacheService | null = null;\n  private propertyCache = new Map<string, PropertyDefinition[]>();\n  private classPropertyIndex = new Map<string, string[]>();\n  private lastCacheUpdate = 0;\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n  private readonly MAX_CACHE_SIZE = 1000;\n\n  private constructor() {\n    this.setupPerformanceMonitoring();\n  }\n\n  static getInstance(): PropertyCacheService {\n    if (!PropertyCacheService.instance) {\n      PropertyCacheService.instance = new PropertyCacheService();\n    }\n    return PropertyCacheService.instance;\n  }\n\n  /**\n   * Gets cached properties for a class with performance optimization\n   * @param className The class to get properties for\n   * @returns Array of property definitions\n   */\n  getPropertiesForClass(className: string): PropertyDefinition[] {\n    const cacheKey = `class:${className}`;\n    \n    // Check cache first\n    if (this.isCacheValid() && this.propertyCache.has(cacheKey)) {\n      const cached = this.propertyCache.get(cacheKey)!;\n      console.debug(`Cache hit for ${className}: ${cached.length} properties`);\n      return [...cached]; // Return copy to prevent mutation\n    }\n\n    console.debug(`Cache miss for ${className}, returning empty array`);\n    return [];\n  }\n\n  /**\n   * Updates cache with property definitions for a class\n   * @param className The class name\n   * @param properties Array of property definitions\n   */\n  updateClassProperties(\n    className: string,\n    properties: PropertyDefinition[],\n  ): void {\n    const cacheKey = `class:${className}`;\n    \n    // Implement cache size limit\n    if (this.propertyCache.size >= this.MAX_CACHE_SIZE) {\n      this.evictOldestEntries();\n    }\n\n    // Cache the properties\n    this.propertyCache.set(cacheKey, [...properties]);\n    \n    // Update class-property index for faster lookups\n    const propertyNames = properties.map(p => p.name);\n    this.classPropertyIndex.set(className, propertyNames);\n    \n    this.lastCacheUpdate = Date.now();\n    \n    console.debug(`Cached ${properties.length} properties for ${className}`);\n  }\n\n  /**\n   * Bulk update cache with multiple classes at once\n   * @param classPropertiesMap Map of class name to property definitions\n   */\n  bulkUpdateCache(\n    classPropertiesMap: Map<string, PropertyDefinition[]>,\n  ): void {\n    const startTime = performance.now();\n    \n    for (const [className, properties] of classPropertiesMap) {\n      this.updateClassProperties(className, properties);\n    }\n    \n    const duration = performance.now() - startTime;\n    console.debug(`Bulk cache update completed in ${duration.toFixed(2)}ms for ${classPropertiesMap.size} classes`);\n  }\n\n  /**\n   * Checks if a class has cached properties\n   * @param className The class name to check\n   * @returns True if properties are cached and valid\n   */\n  hasPropertiesForClass(className: string): boolean {\n    return this.isCacheValid() && this.propertyCache.has(`class:${className}`);\n  }\n\n  /**\n   * Gets all cached class names\n   * @returns Array of class names in cache\n   */\n  getCachedClasses(): string[] {\n    if (!this.isCacheValid()) {\n      return [];\n    }\n    \n    return Array.from(this.classPropertyIndex.keys());\n  }\n\n  /**\n   * Invalidates cache for a specific class\n   * @param className The class to invalidate\n   */\n  invalidateClass(className: string): void {\n    const cacheKey = `class:${className}`;\n    this.propertyCache.delete(cacheKey);\n    this.classPropertyIndex.delete(className);\n    console.debug(`Invalidated cache for ${className}`);\n  }\n\n  /**\n   * Clears all cached data\n   */\n  clearCache(): void {\n    this.propertyCache.clear();\n    this.classPropertyIndex.clear();\n    this.lastCacheUpdate = 0;\n    console.debug(\"Cache cleared\");\n  }\n\n  /**\n   * Gets cache statistics for performance monitoring\n   * @returns Cache performance metrics\n   */\n  getCacheStats(): CacheStats {\n    return {\n      size: this.propertyCache.size,\n      classCount: this.classPropertyIndex.size,\n      lastUpdate: this.lastCacheUpdate,\n      isValid: this.isCacheValid(),\n      hitRate: this.calculateHitRate(),\n      memoryUsage: this.estimateMemoryUsage(),\n    };\n  }\n\n  /**\n   * Preloads properties for common classes to improve performance\n   * @param priorityClasses Array of class names to prioritize\n   */\n  async preloadPriorityClasses(priorityClasses: string[]): Promise<void> {\n    console.debug(`Preloading ${priorityClasses.length} priority classes`);\n    \n    const startTime = performance.now();\n    const preloadMap = new Map<string, PropertyDefinition[]>();\n    \n    // For now, set empty arrays to indicate classes are \"loaded\"\n    // In a real implementation, this would fetch from the vault\n    for (const className of priorityClasses) {\n      if (!this.hasPropertiesForClass(className)) {\n        preloadMap.set(className, []);\n      }\n    }\n    \n    if (preloadMap.size > 0) {\n      this.bulkUpdateCache(preloadMap);\n    }\n    \n    const duration = performance.now() - startTime;\n    console.debug(`Preload completed in ${duration.toFixed(2)}ms`);\n  }\n\n  /**\n   * Checks if cache is still valid based on TTL\n   */\n  private isCacheValid(): boolean {\n    if (this.lastCacheUpdate === 0) {\n      return false;\n    }\n    return (Date.now() - this.lastCacheUpdate) < this.CACHE_TTL;\n  }\n\n  /**\n   * Evicts oldest cache entries to maintain size limit\n   */\n  private evictOldestEntries(): void {\n    const entriesToEvict = Math.floor(this.MAX_CACHE_SIZE * 0.2); // Remove 20%\n    const entries = Array.from(this.propertyCache.keys());\n    \n    for (let i = 0; i < entriesToEvict && entries.length > 0; i++) {\n      const keyToEvict = entries[i];\n      this.propertyCache.delete(keyToEvict);\n      \n      // Extract class name from cache key\n      const className = keyToEvict.replace('class:', '');\n      this.classPropertyIndex.delete(className);\n    }\n    \n    console.debug(`Evicted ${entriesToEvict} cache entries`);\n  }\n\n  /**\n   * Calculates cache hit rate for performance monitoring\n   */\n  private calculateHitRate(): number {\n    // This would be tracked in a real implementation\n    return 0.85; // Placeholder\n  }\n\n  /**\n   * Estimates memory usage of cached data\n   */\n  private estimateMemoryUsage(): number {\n    let totalSize = 0;\n    \n    for (const [key, properties] of this.propertyCache) {\n      totalSize += key.length * 2; // String characters as bytes\n      totalSize += properties.length * 200; // Estimated property object size\n    }\n    \n    return totalSize;\n  }\n\n  /**\n   * Sets up performance monitoring and cleanup\n   */\n  private setupPerformanceMonitoring(): void {\n    // Auto-cleanup old cache entries every 10 minutes\n    if (typeof setInterval !== 'undefined') {\n      setInterval(() => {\n        if (!this.isCacheValid()) {\n          this.clearCache();\n        }\n      }, 10 * 60 * 1000);\n    }\n  }\n}\n\nexport interface PropertyDefinition {\n  name: string;\n  label: string;\n  description: string;\n  type: string;\n  isRequired: boolean;\n  range?: string;\n  options?: any[];\n}\n\nexport interface CacheStats {\n  size: number;\n  classCount: number;\n  lastUpdate: number;\n  isValid: boolean;\n  hitRate: number;\n  memoryUsage: number;\n}"],"version":3}