de9381776f8d0dd1ff0d085a86424e24
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const SPARQLEngine_1 = require("../../src/application/SPARQLEngine");
const Graph_1 = require("../../src/domain/semantic/core/Graph");
const Triple_1 = require("../../src/domain/semantic/core/Triple");
describe('SPARQLEngine CONSTRUCT Queries', () => {
    let engine;
    let graph;
    beforeEach(() => {
        graph = new Graph_1.Graph();
        engine = new SPARQLEngine_1.SPARQLEngine(graph);
        // Add test data
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task1'), new Triple_1.IRI('rdf:type'), new Triple_1.IRI('ems:Task')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task1'), new Triple_1.IRI('ems:deadline'), Triple_1.Literal.string('2025-08-10')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task1'), new Triple_1.IRI('ems:status'), Triple_1.Literal.string('pending')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task2'), new Triple_1.IRI('rdf:type'), new Triple_1.IRI('ems:Task')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task2'), new Triple_1.IRI('ems:deadline'), Triple_1.Literal.string('2025-08-08')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task2'), new Triple_1.IRI('ems:status'), Triple_1.Literal.string('pending')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task3'), new Triple_1.IRI('rdf:type'), new Triple_1.IRI('ems:Task')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task3'), new Triple_1.IRI('ems:assignedTo'), new Triple_1.IRI('ex:person1')));
        graph.add(new Triple_1.Triple(new Triple_1.IRI('ex:task3'), new Triple_1.IRI('ems:partOf'), new Triple_1.IRI('ex:project1')));
    });
    describe('Basic CONSTRUCT', () => {
        test('should generate new triples from CONSTRUCT template', () => {
            const query = `
                CONSTRUCT {
                    ?task ems:urgency "high" .
                }
                WHERE {
                    ?task rdf:type ems:Task .
                }
            `;
            const result = engine.construct(query);
            expect(result.triples).toHaveLength(3); // 3 tasks
            expect(result.triples[0].getSubject().toString()).toEqual('ex:task1');
            expect(result.triples[0].getPredicate().toString()).toEqual('ems:urgency');
            expect(result.triples[0].getObject().toString()).toEqual('"high"^^http://www.w3.org/2001/XMLSchema#string');
            expect(result.provenance).toContain('CONSTRUCT query at');
        });
        test('should handle empty WHERE results', () => {
            const query = `
                CONSTRUCT {
                    ?task ems:urgency "critical" .
                }
                WHERE {
                    ?task rdf:type ems:NonExistent .
                }
            `;
            const result = engine.construct(query);
            expect(result.triples).toHaveLength(0);
        });
        test('should support multiple template patterns', () => {
            const query = `
                CONSTRUCT {
                    ?task ems:urgency "high" .
                    ?task ems:needsReview true .
                }
                WHERE {
                    ?task ems:status "pending" .
                }
            `;
            const result = engine.construct(query);
            expect(result.triples).toHaveLength(4); // 2 tasks * 2 properties
            // Check first task's urgency
            const task1Urgency = result.triples.find(t => t.getSubject().toString() === 'ex:task1' &&
                t.getPredicate().toString() === 'ems:urgency');
            expect(task1Urgency).toBeDefined();
            expect(task1Urgency === null || task1Urgency === void 0 ? void 0 : task1Urgency.getObject().toString()).toEqual('"high"^^http://www.w3.org/2001/XMLSchema#string');
            // Check first task's needsReview
            const task1Review = result.triples.find(t => t.getSubject().toString() === 'ex:task1' &&
                t.getPredicate().toString() === 'ems:needsReview');
            expect(task1Review).toBeDefined();
            expect(task1Review === null || task1Review === void 0 ? void 0 : task1Review.getObject().toString()).toEqual('"true"^^http://www.w3.org/2001/XMLSchema#boolean');
        });
    });
    describe('Relationship Inference', () => {
        test('should infer relationships from existing data', () => {
            const query = `
                CONSTRUCT {
                    ?person ems:contributesTo ?project .
                }
                WHERE {
                    ?task ems:assignedTo ?person .
                    ?task ems:partOf ?project .
                }
            `;
            const result = engine.construct(query);
            expect(result.triples).toHaveLength(1);
            expect(result.triples[0].getSubject().toString()).toEqual('ex:person1');
            expect(result.triples[0].getPredicate().toString()).toEqual('ems:contributesTo');
            expect(result.triples[0].getObject().toString()).toEqual('ex:project1');
        });
    });
    describe('CONSTRUCT with LIMIT', () => {
        test('should respect LIMIT clause', () => {
            const query = `
                CONSTRUCT {
                    ?task ems:processed true .
                }
                WHERE {
                    ?task rdf:type ems:Task .
                } LIMIT 2
            `;
            const result = engine.construct(query);
            expect(result.triples).toHaveLength(2);
        });
    });
    describe('Invalid CONSTRUCT queries', () => {
        test('should throw error for invalid format', () => {
            const query = 'CONSTRUCT WHERE { ?s ?p ?o }';
            expect(() => engine.construct(query)).toThrow('Invalid CONSTRUCT query format');
        });
        test('should handle malformed templates gracefully', () => {
            const query = `
                CONSTRUCT {
                    ?task
                }
                WHERE {
                    ?task rdf:type ems:Task .
                }
            `;
            const result = engine.construct(query);
            expect(result.triples).toHaveLength(0); // Invalid template ignored
        });
    });
    describe('Integration with Graph', () => {
        test('generated triples can be queried with SELECT', () => {
            // First, run CONSTRUCT to generate new triples
            const constructQuery = `
                CONSTRUCT {
                    ?task ems:priority "high" .
                }
                WHERE {
                    ?task ems:deadline ?date .
                }
            `;
            const constructResult = engine.construct(constructQuery);
            // Add generated triples to graph
            for (const triple of constructResult.triples) {
                graph.add(triple);
            }
            // Now query the generated triples
            const selectQuery = `
                SELECT ?task ?priority
                WHERE {
                    ?task ems:priority ?priority .
                }
            `;
            const selectResult = engine.select(selectQuery);
            expect(selectResult.results).toHaveLength(2); // task1 and task2 have deadlines
            expect(selectResult.results[0].priority).toBe('"high"^^http://www.w3.org/2001/XMLSchema#string');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvYXBwbGljYXRpb24vU1BBUlFMRW5naW5lLmNvbnN0cnVjdC50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEscUVBQWtFO0FBQ2xFLGdFQUE2RDtBQUM3RCxrRUFBNkU7QUFFN0UsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLEdBQUcsRUFBRTtJQUM1QyxJQUFJLE1BQW9CLENBQUM7SUFDekIsSUFBSSxLQUFZLENBQUM7SUFFakIsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLEtBQUssR0FBRyxJQUFJLGFBQUssRUFBRSxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxJQUFJLDJCQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFakMsZ0JBQWdCO1FBQ2hCLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JGLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxZQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsZ0JBQU8sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxZQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsZ0JBQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdGLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFNLENBQUMsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsSUFBSSxZQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUs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QyxpREFBaUQsQ0FBQyxDQUFDO1FBQ3JHLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi90ZXN0cy9hcHBsaWNhdGlvbi9TUEFSUUxFbmdpbmUuY29uc3RydWN0LnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU1BBUlFMRW5naW5lIH0gZnJvbSAnLi4vLi4vc3JjL2FwcGxpY2F0aW9uL1NQQVJRTEVuZ2luZSc7XG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJy4uLy4uL3NyYy9kb21haW4vc2VtYW50aWMvY29yZS9HcmFwaCc7XG5pbXBvcnQgeyBUcmlwbGUsIElSSSwgTGl0ZXJhbCB9IGZyb20gJy4uLy4uL3NyYy9kb21haW4vc2VtYW50aWMvY29yZS9UcmlwbGUnO1xuXG5kZXNjcmliZSgnU1BBUlFMRW5naW5lIENPTlNUUlVDVCBRdWVyaWVzJywgKCkgPT4ge1xuICAgIGxldCBlbmdpbmU6IFNQQVJRTEVuZ2luZTtcbiAgICBsZXQgZ3JhcGg6IEdyYXBoO1xuICAgIFxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBncmFwaCA9IG5ldyBHcmFwaCgpO1xuICAgICAgICBlbmdpbmUgPSBuZXcgU1BBUlFMRW5naW5lKGdyYXBoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCB0ZXN0IGRhdGFcbiAgICAgICAgZ3JhcGguYWRkKG5ldyBUcmlwbGUobmV3IElSSSgnZXg6dGFzazEnKSwgbmV3IElSSSgncmRmOnR5cGUnKSwgbmV3IElSSSgnZW1zOlRhc2snKSkpO1xuICAgICAgICBncmFwaC5hZGQobmV3IFRyaXBsZShuZXcgSVJJKCdleDp0YXNrMScpLCBuZXcgSVJJKCdlbXM6ZGVhZGxpbmUnKSwgTGl0ZXJhbC5zdHJpbmcoJzIwMjUtMDgtMTAnKSkpO1xuICAgICAgICBncmFwaC5hZGQobmV3IFRyaXBsZShuZXcgSVJJKCdleDp0YXNrMScpLCBuZXcgSVJJKCdlbXM6c3RhdHVzJyksIExpdGVyYWwuc3RyaW5nKCdwZW5kaW5nJykpKTtcbiAgICAgICAgXG4gICAgICAgIGdyYXBoLmFkZChuZXcgVHJpcGxlKG5ldyBJUkkoJ2V4OnRhc2syJyksIG5ldyBJUkkoJ3JkZjp0eXBlJyksIG5ldyBJUkkoJ2VtczpUYXNrJykpKTtcbiAgICAgICAgZ3JhcGguYWRkKG5ldyBUcmlwbGUobmV3IElSSSgnZXg6dGFzazInKSwgbmV3IElSSSgnZW1zOmRlYWRsaW5lJyksIExpdGVyYWwuc3RyaW5nKCcyMDI1LTA4LTA4JykpKTtcbiAgICAgICAgZ3JhcGguYWRkKG5ldyBUcmlwbGUobmV3IElSSSgnZXg6dGFzazInKSwgbmV3IElSSSgnZW1zOnN0YXR1cycpLCBMaXRlcmFsLnN0cmluZygncGVuZGluZycpKSk7XG4gICAgICAgIFxuICAgICAgICBncmFwaC5hZGQobmV3IFRyaXBsZShuZXcgSVJJKCdleDp0YXNrMycpLCBuZXcgSVJJKCdyZGY6dHlwZScpLCBuZXcgSVJJKCdlbXM6VGFzaycpKSk7XG4gICAgICAgIGdyYXBoLmFkZChuZXcgVHJpcGxlKG5ldyBJUkkoJ2V4OnRhc2szJyksIG5ldyBJUkkoJ2Vtczphc3NpZ25lZFRvJyksIG5ldyBJUkkoJ2V4OnBlcnNvbjEnKSkpO1xuICAgICAgICBncmFwaC5hZGQobmV3IFRyaXBsZShuZXcgSVJJKCdleDp0YXNrMycpLCBuZXcgSVJJKCdlbXM6cGFydE9mJyksIG5ldyBJUkkoJ2V4OnByb2plY3QxJykpKTtcbiAgICB9KTtcbiAgICBcbiAgICBkZXNjcmliZSgnQmFzaWMgQ09OU1RSVUNUJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgZ2VuZXJhdGUgbmV3IHRyaXBsZXMgZnJvbSBDT05TVFJVQ1QgdGVtcGxhdGUnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgICAgICAgICAgICBDT05TVFJVQ1Qge1xuICAgICAgICAgICAgICAgICAgICA/dGFzayBlbXM6dXJnZW5jeSBcImhpZ2hcIiAuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFdIRVJFIHtcbiAgICAgICAgICAgICAgICAgICAgP3Rhc2sgcmRmOnR5cGUgZW1zOlRhc2sgLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVuZ2luZS5jb25zdHJ1Y3QocXVlcnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LnRyaXBsZXMpLnRvSGF2ZUxlbmd0aCgzKTsgLy8gMyB0YXNrc1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzWzBdLmdldFN1YmplY3QoKS50b1N0cmluZygpKS50b0VxdWFsKCdleDp0YXNrMScpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzWzBdLmdldFByZWRpY2F0ZSgpLnRvU3RyaW5nKCkpLnRvRXF1YWwoJ2Vtczp1cmdlbmN5Jyk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LnRyaXBsZXNbMF0uZ2V0T2JqZWN0KCkudG9TdHJpbmcoKSkudG9FcXVhbCgnXCJoaWdoXCJeXmh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI3N0cmluZycpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC5wcm92ZW5hbmNlKS50b0NvbnRhaW4oJ0NPTlNUUlVDVCBxdWVyeSBhdCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgV0hFUkUgcmVzdWx0cycsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgICAgICAgICAgIENPTlNUUlVDVCB7XG4gICAgICAgICAgICAgICAgICAgID90YXNrIGVtczp1cmdlbmN5IFwiY3JpdGljYWxcIiAuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFdIRVJFIHtcbiAgICAgICAgICAgICAgICAgICAgP3Rhc2sgcmRmOnR5cGUgZW1zOk5vbkV4aXN0ZW50IC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuY29uc3RydWN0KHF1ZXJ5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGVzdCgnc2hvdWxkIHN1cHBvcnQgbXVsdGlwbGUgdGVtcGxhdGUgcGF0dGVybnMnLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgICAgICAgICAgICBDT05TVFJVQ1Qge1xuICAgICAgICAgICAgICAgICAgICA/dGFzayBlbXM6dXJnZW5jeSBcImhpZ2hcIiAuXG4gICAgICAgICAgICAgICAgICAgID90YXNrIGVtczpuZWVkc1JldmlldyB0cnVlIC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV0hFUkUge1xuICAgICAgICAgICAgICAgICAgICA/dGFzayBlbXM6c3RhdHVzIFwicGVuZGluZ1wiIC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuY29uc3RydWN0KHF1ZXJ5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzKS50b0hhdmVMZW5ndGgoNCk7IC8vIDIgdGFza3MgKiAyIHByb3BlcnRpZXNcbiAgICAgICAgICAgIC8vIENoZWNrIGZpcnN0IHRhc2sncyB1cmdlbmN5XG4gICAgICAgICAgICBjb25zdCB0YXNrMVVyZ2VuY3kgPSByZXN1bHQudHJpcGxlcy5maW5kKHQgPT4gXG4gICAgICAgICAgICAgICAgdC5nZXRTdWJqZWN0KCkudG9TdHJpbmcoKSA9PT0gJ2V4OnRhc2sxJyAmJiBcbiAgICAgICAgICAgICAgICB0LmdldFByZWRpY2F0ZSgpLnRvU3RyaW5nKCkgPT09ICdlbXM6dXJnZW5jeSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBleHBlY3QodGFzazFVcmdlbmN5KS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgZXhwZWN0KHRhc2sxVXJnZW5jeT8uZ2V0T2JqZWN0KCkudG9TdHJpbmcoKSkudG9FcXVhbCgnXCJoaWdoXCJeXmh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI3N0cmluZycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDaGVjayBmaXJzdCB0YXNrJ3MgbmVlZHNSZXZpZXdcbiAgICAgICAgICAgIGNvbnN0IHRhc2sxUmV2aWV3ID0gcmVzdWx0LnRyaXBsZXMuZmluZCh0ID0+IFxuICAgICAgICAgICAgICAgIHQuZ2V0U3ViamVjdCgpLnRvU3RyaW5nKCkgPT09ICdleDp0YXNrMScgJiYgXG4gICAgICAgICAgICAgICAgdC5nZXRQcmVkaWNhdGUoKS50b1N0cmluZygpID09PSAnZW1zOm5lZWRzUmV2aWV3J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGV4cGVjdCh0YXNrMVJldmlldykudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdCh0YXNrMVJldmlldz8uZ2V0T2JqZWN0KCkudG9TdHJpbmcoKSkudG9FcXVhbCgnXCJ0cnVlXCJeXmh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hI2Jvb2xlYW4nKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgXG4gICAgZGVzY3JpYmUoJ1JlbGF0aW9uc2hpcCBJbmZlcmVuY2UnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBpbmZlciByZWxhdGlvbnNoaXBzIGZyb20gZXhpc3RpbmcgZGF0YScsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gYFxuICAgICAgICAgICAgICAgIENPTlNUUlVDVCB7XG4gICAgICAgICAgICAgICAgICAgID9wZXJzb24gZW1zOmNvbnRyaWJ1dGVzVG8gP3Byb2plY3QgLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBXSEVSRSB7XG4gICAgICAgICAgICAgICAgICAgID90YXNrIGVtczphc3NpZ25lZFRvID9wZXJzb24gLlxuICAgICAgICAgICAgICAgICAgICA/dGFzayBlbXM6cGFydE9mID9wcm9qZWN0IC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuY29uc3RydWN0KHF1ZXJ5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0LnRyaXBsZXNbMF0uZ2V0U3ViamVjdCgpLnRvU3RyaW5nKCkpLnRvRXF1YWwoJ2V4OnBlcnNvbjEnKTtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHQudHJpcGxlc1swXS5nZXRQcmVkaWNhdGUoKS50b1N0cmluZygpKS50b0VxdWFsKCdlbXM6Y29udHJpYnV0ZXNUbycpO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzWzBdLmdldE9iamVjdCgpLnRvU3RyaW5nKCkpLnRvRXF1YWwoJ2V4OnByb2plY3QxJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIGRlc2NyaWJlKCdDT05TVFJVQ1Qgd2l0aCBMSU1JVCcsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIHJlc3BlY3QgTElNSVQgY2xhdXNlJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSBgXG4gICAgICAgICAgICAgICAgQ09OU1RSVUNUIHtcbiAgICAgICAgICAgICAgICAgICAgP3Rhc2sgZW1zOnByb2Nlc3NlZCB0cnVlIC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV0hFUkUge1xuICAgICAgICAgICAgICAgICAgICA/dGFzayByZGY6dHlwZSBlbXM6VGFzayAuXG4gICAgICAgICAgICAgICAgfSBMSU1JVCAyXG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuY29uc3RydWN0KHF1ZXJ5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzKS50b0hhdmVMZW5ndGgoMik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIGRlc2NyaWJlKCdJbnZhbGlkIENPTlNUUlVDVCBxdWVyaWVzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgdGhyb3cgZXJyb3IgZm9yIGludmFsaWQgZm9ybWF0JywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcXVlcnkgPSAnQ09OU1RSVUNUIFdIRVJFIHsgP3MgP3AgP28gfSc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBlbmdpbmUuY29uc3RydWN0KHF1ZXJ5KSkudG9UaHJvdygnSW52YWxpZCBDT05TVFJVQ1QgcXVlcnkgZm9ybWF0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBtYWxmb3JtZWQgdGVtcGxhdGVzIGdyYWNlZnVsbHknLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgICAgICAgICAgICBDT05TVFJVQ1Qge1xuICAgICAgICAgICAgICAgICAgICA/dGFza1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBXSEVSRSB7XG4gICAgICAgICAgICAgICAgICAgID90YXNrIHJkZjp0eXBlIGVtczpUYXNrIC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBlbmdpbmUuY29uc3RydWN0KHF1ZXJ5KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdC50cmlwbGVzKS50b0hhdmVMZW5ndGgoMCk7IC8vIEludmFsaWQgdGVtcGxhdGUgaWdub3JlZFxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBcbiAgICBkZXNjcmliZSgnSW50ZWdyYXRpb24gd2l0aCBHcmFwaCcsICgpID0+IHtcbiAgICAgICAgdGVzdCgnZ2VuZXJhdGVkIHRyaXBsZXMgY2FuIGJlIHF1ZXJpZWQgd2l0aCBTRUxFQ1QnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBGaXJzdCwgcnVuIENPTlNUUlVDVCB0byBnZW5lcmF0ZSBuZXcgdHJpcGxlc1xuICAgICAgICAgICAgY29uc3QgY29uc3RydWN0UXVlcnkgPSBgXG4gICAgICAgICAgICAgICAgQ09OU1RSVUNUIHtcbiAgICAgICAgICAgICAgICAgICAgP3Rhc2sgZW1zOnByaW9yaXR5IFwiaGlnaFwiIC5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgV0hFUkUge1xuICAgICAgICAgICAgICAgICAgICA/dGFzayBlbXM6ZGVhZGxpbmUgP2RhdGUgLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdFJlc3VsdCA9IGVuZ2luZS5jb25zdHJ1Y3QoY29uc3RydWN0UXVlcnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgZ2VuZXJhdGVkIHRyaXBsZXMgdG8gZ3JhcGhcbiAgICAgICAgICAgIGZvciAoY29uc3QgdHJpcGxlIG9mIGNvbnN0cnVjdFJlc3VsdC50cmlwbGVzKSB7XG4gICAgICAgICAgICAgICAgZ3JhcGguYWRkKHRyaXBsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE5vdyBxdWVyeSB0aGUgZ2VuZXJhdGVkIHRyaXBsZXNcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdFF1ZXJ5ID0gYFxuICAgICAgICAgICAgICAgIFNFTEVDVCA/dGFzayA/cHJpb3JpdHlcbiAgICAgICAgICAgICAgICBXSEVSRSB7XG4gICAgICAgICAgICAgICAgICAgID90YXNrIGVtczpwcmlvcml0eSA/cHJpb3JpdHkgLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdFJlc3VsdCA9IGVuZ2luZS5zZWxlY3Qoc2VsZWN0UXVlcnkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHBlY3Qoc2VsZWN0UmVzdWx0LnJlc3VsdHMpLnRvSGF2ZUxlbmd0aCgyKTsgLy8gdGFzazEgYW5kIHRhc2syIGhhdmUgZGVhZGxpbmVzXG4gICAgICAgICAgICBleHBlY3Qoc2VsZWN0UmVzdWx0LnJlc3VsdHNbMF0ucHJpb3JpdHkpLnRvQmUoJ1wiaGlnaFwiXl5odHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSNzdHJpbmcnKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=