7f8d98c3313b008c9ea16f856d84302e
"use strict";

/* istanbul ignore next */
function cov_1dtxotlkao() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RelationOntologizer.ts";
  var hash = "5c223fbdfa7eaadd780eccf96cfeecd4adc0bda0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RelationOntologizer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 6,
          column: 70
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 46
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 36,
          column: 11
        }
      },
      "8": {
        start: {
          line: 21,
          column: 30
        },
        end: {
          line: 21,
          column: 32
        }
      },
      "9": {
        start: {
          line: 22,
          column: 26
        },
        end: {
          line: 22,
          column: 67
        }
      },
      "10": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 25,
          column: 13
        }
      },
      "11": {
        start: {
          line: 24,
          column: 16
        },
        end: {
          line: 24,
          column: 33
        }
      },
      "12": {
        start: {
          line: 26,
          column: 32
        },
        end: {
          line: 26,
          column: 49
        }
      },
      "13": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 27,
          column: 75
        }
      },
      "14": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "15": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 33,
          column: 17
        }
      },
      "16": {
        start: {
          line: 31,
          column: 46
        },
        end: {
          line: 31,
          column: 100
        }
      },
      "17": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 57
        }
      },
      "18": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 35,
          column: 29
        }
      },
      "19": {
        start: {
          line: 43,
          column: 31
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "20": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "21": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 25
        }
      },
      "22": {
        start: {
          line: 57,
          column: 39
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "23": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "24": {
        start: {
          line: 73,
          column: 51
        },
        end: {
          line: 73,
          column: 68
        }
      },
      "25": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 24
        }
      },
      "26": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "27": {
        start: {
          line: 78,
          column: 29
        },
        end: {
          line: 78,
          column: 76
        }
      },
      "28": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "29": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "30": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 21
        }
      },
      "31": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "32": {
        start: {
          line: 90,
          column: 30
        },
        end: {
          line: 90,
          column: 32
        }
      },
      "33": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 105,
          column: 13
        }
      },
      "34": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "35": {
        start: {
          line: 94,
          column: 37
        },
        end: {
          line: 94,
          column: 97
        }
      },
      "36": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "37": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 49
        }
      },
      "38": {
        start: {
          line: 101,
          column: 33
        },
        end: {
          line: 101,
          column: 94
        }
      },
      "39": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 104,
          column: 17
        }
      },
      "40": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 45
        }
      },
      "41": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 29
        }
      },
      "42": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "43": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "44": {
        start: {
          line: 116,
          column: 23
        },
        end: {
          line: 116,
          column: 37
        }
      },
      "45": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "46": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 58
        }
      },
      "47": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 9
        }
      },
      "48": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 24
        }
      },
      "49": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "50": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "51": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 137,
          column: 47
        }
      },
      "52": {
        start: {
          line: 138,
          column: 28
        },
        end: {
          line: 138,
          column: 30
        }
      },
      "53": {
        start: {
          line: 139,
          column: 27
        },
        end: {
          line: 139,
          column: 29
        }
      },
      "54": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "55": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "56": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 60
        }
      },
      "57": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 47
        }
      },
      "58": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 87
        }
      },
      "59": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 46
        }
      },
      "60": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "61": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 83
        }
      },
      "62": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "63": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 85
        }
      },
      "64": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "65": {
        start: {
          line: 164,
          column: 29
        },
        end: {
          line: 164,
          column: 91
        }
      },
      "66": {
        start: {
          line: 165,
          column: 29
        },
        end: {
          line: 165,
          column: 66
        }
      },
      "67": {
        start: {
          line: 167,
          column: 32
        },
        end: {
          line: 167,
          column: 91
        }
      },
      "68": {
        start: {
          line: 168,
          column: 36
        },
        end: {
          line: 168,
          column: 66
        }
      },
      "69": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 189,
          column: 63
        }
      },
      "70": {
        start: {
          line: 191,
          column: 25
        },
        end: {
          line: 191,
          column: 71
        }
      },
      "71": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 24
        }
      },
      "72": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "73": {
        start: {
          line: 200,
          column: 27
        },
        end: {
          line: 200,
          column: 85
        }
      },
      "74": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "75": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 72
        }
      },
      "76": {
        start: {
          line: 210,
          column: 22
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "77": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "78": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 213,
          column: 25
        }
      },
      "79": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 25
        }
      },
      "80": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "81": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 38
        }
      },
      "82": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "83": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 62
        }
      },
      "84": {
        start: {
          line: 220,
          column: 17
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "85": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 63
        }
      },
      "86": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 63
        }
      },
      "87": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 39
        }
      },
      "88": {
        start: {
          line: 233,
          column: 8
        },
        end: {
          line: 266,
          column: 11
        }
      },
      "89": {
        start: {
          line: 234,
          column: 28
        },
        end: {
          line: 234,
          column: 59
        }
      },
      "90": {
        start: {
          line: 235,
          column: 26
        },
        end: {
          line: 235,
          column: 67
        }
      },
      "91": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 237,
          column: 23
        }
      },
      "92": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 23
        }
      },
      "93": {
        start: {
          line: 239,
          column: 37
        },
        end: {
          line: 239,
          column: 75
        }
      },
      "94": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 241,
          column: 23
        }
      },
      "95": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 23
        }
      },
      "96": {
        start: {
          line: 242,
          column: 36
        },
        end: {
          line: 242,
          column: 55
        }
      },
      "97": {
        start: {
          line: 243,
          column: 26
        },
        end: {
          line: 243,
          column: 53
        }
      },
      "98": {
        start: {
          line: 244,
          column: 29
        },
        end: {
          line: 244,
          column: 31
        }
      },
      "99": {
        start: {
          line: 245,
          column: 31
        },
        end: {
          line: 245,
          column: 36
        }
      },
      "100": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "101": {
        start: {
          line: 248,
          column: 39
        },
        end: {
          line: 248,
          column: 99
        }
      },
      "102": {
        start: {
          line: 248,
          column: 71
        },
        end: {
          line: 248,
          column: 98
        }
      },
      "103": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 252,
          column: 17
        }
      },
      "104": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 40
        }
      },
      "105": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 251,
          column: 29
        }
      },
      "106": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 259,
          column: 17
        }
      },
      "107": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 29
        }
      },
      "108": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 258,
          column: 41
        }
      },
      "109": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 36
        }
      },
      "110": {
        start: {
          line: 263,
          column: 35
        },
        end: {
          line: 263,
          column: 54
        }
      },
      "111": {
        start: {
          line: 264,
          column: 31
        },
        end: {
          line: 264,
          column: 98
        }
      },
      "112": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 58
        }
      },
      "113": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "114": {
        start: {
          line: 273,
          column: 26
        },
        end: {
          line: 273,
          column: 59
        }
      },
      "115": {
        start: {
          line: 274,
          column: 27
        },
        end: {
          line: 274,
          column: 29
        }
      },
      "116": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 275,
          column: 34
        }
      },
      "117": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 299,
          column: 13
        }
      },
      "118": {
        start: {
          line: 276,
          column: 25
        },
        end: {
          line: 276,
          column: 26
        }
      },
      "119": {
        start: {
          line: 277,
          column: 29
        },
        end: {
          line: 277,
          column: 37
        }
      },
      "120": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "121": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 29
        }
      },
      "122": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 295,
          column: 17
        }
      },
      "123": {
        start: {
          line: 283,
          column: 38
        },
        end: {
          line: 283,
          column: 70
        }
      },
      "124": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 291,
          column: 21
        }
      },
      "125": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 285,
          column: 66
        }
      },
      "126": {
        start: {
          line: 287,
          column: 52
        },
        end: {
          line: 287,
          column: 97
        }
      },
      "127": {
        start: {
          line: 287,
          column: 83
        },
        end: {
          line: 287,
          column: 94
        }
      },
      "128": {
        start: {
          line: 289,
          column: 24
        },
        end: {
          line: 289,
          column: 84
        }
      },
      "129": {
        start: {
          line: 290,
          column: 24
        },
        end: {
          line: 290,
          column: 59
        }
      },
      "130": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 58
        }
      },
      "131": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 298,
          column: 17
        }
      },
      "132": {
        start: {
          line: 297,
          column: 20
        },
        end: {
          line: 297,
          column: 58
        }
      },
      "133": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 304,
          column: 14
        }
      },
      "134": {
        start: {
          line: 308,
          column: 0
        },
        end: {
          line: 308,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 21
          },
          end: {
            line: 15,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 26
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 55
          },
          end: {
            line: 20,
            column: 56
          }
        },
        loc: {
          start: {
            line: 20,
            column: 68
          },
          end: {
            line: 36,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        loc: {
          start: {
            line: 41,
            column: 33
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 41
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 73,
            column: 40
          },
          end: {
            line: 73,
            column: 41
          }
        },
        loc: {
          start: {
            line: 73,
            column: 51
          },
          end: {
            line: 73,
            column: 68
          }
        },
        line: 73
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 62
          },
          end: {
            line: 108,
            column: 5
          }
        },
        line: 88
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 55
          },
          end: {
            line: 89,
            column: 56
          }
        },
        loc: {
          start: {
            line: 89,
            column: 68
          },
          end: {
            line: 107,
            column: 9
          }
        },
        line: 89
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 112,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        loc: {
          start: {
            line: 112,
            column: 59
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 112
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 134,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        loc: {
          start: {
            line: 134,
            column: 35
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 134
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 135,
            column: 55
          },
          end: {
            line: 135,
            column: 56
          }
        },
        loc: {
          start: {
            line: 135,
            column: 68
          },
          end: {
            line: 157,
            column: 9
          }
        },
        line: 135
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 33
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 162
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 163,
            column: 55
          },
          end: {
            line: 163,
            column: 56
          }
        },
        loc: {
          start: {
            line: 163,
            column: 68
          },
          end: {
            line: 193,
            column: 9
          }
        },
        line: 163
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 198,
            column: 4
          },
          end: {
            line: 198,
            column: 5
          }
        },
        loc: {
          start: {
            line: 198,
            column: 28
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 198
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 199,
            column: 55
          },
          end: {
            line: 199,
            column: 56
          }
        },
        loc: {
          start: {
            line: 199,
            column: 68
          },
          end: {
            line: 204,
            column: 9
          }
        },
        line: 199
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 22
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 209
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 52
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 232
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 233,
            column: 55
          },
          end: {
            line: 233,
            column: 56
          }
        },
        loc: {
          start: {
            line: 233,
            column: 68
          },
          end: {
            line: 266,
            column: 9
          }
        },
        line: 233
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 248,
            column: 63
          },
          end: {
            line: 248,
            column: 64
          }
        },
        loc: {
          start: {
            line: 248,
            column: 71
          },
          end: {
            line: 248,
            column: 98
          }
        },
        line: 248
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 35
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 271
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 272,
            column: 55
          },
          end: {
            line: 272,
            column: 56
          }
        },
        loc: {
          start: {
            line: 272,
            column: 68
          },
          end: {
            line: 305,
            column: 9
          }
        },
        line: 272
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 287,
            column: 78
          },
          end: {
            line: 287,
            column: 79
          }
        },
        loc: {
          start: {
            line: 287,
            column: 83
          },
          end: {
            line: 287,
            column: 94
          }
        },
        line: 287
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 12
          },
          end: {
            line: 25,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 55
          },
          end: {
            line: 23,
            column: 61
          }
        }, {
          start: {
            line: 23,
            column: 64
          },
          end: {
            line: 23,
            column: 81
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 18
          },
          end: {
            line: 23,
            column: 32
          }
        }, {
          start: {
            line: 23,
            column: 36
          },
          end: {
            line: 23,
            column: 52
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 27,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 29
          },
          end: {
            line: 27,
            column: 58
          }
        }, {
          start: {
            line: 27,
            column: 62
          },
          end: {
            line: 27,
            column: 75
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 33,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 33,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 77,
            column: 31
          }
        }, {
          start: {
            line: 77,
            column: 35
          },
          end: {
            line: 77,
            column: 49
          }
        }],
        line: 77
      },
      "9": {
        loc: {
          start: {
            line: 78,
            column: 29
          },
          end: {
            line: 78,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 78,
            column: 52
          },
          end: {
            line: 78,
            column: 60
          }
        }, {
          start: {
            line: 78,
            column: 63
          },
          end: {
            line: 78,
            column: 76
          }
        }],
        line: 78
      },
      "10": {
        loc: {
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 12
          },
          end: {
            line: 81,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "11": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 79,
            column: 24
          }
        }, {
          start: {
            line: 79,
            column: 28
          },
          end: {
            line: 79,
            column: 56
          }
        }, {
          start: {
            line: 79,
            column: 60
          },
          end: {
            line: 79,
            column: 83
          }
        }],
        line: 79
      },
      "12": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 105,
            column: 13
          }
        }, {
          start: {
            line: 100,
            column: 17
          },
          end: {
            line: 105,
            column: 13
          }
        }],
        line: 92
      },
      "13": {
        loc: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "14": {
        loc: {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 104,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "15": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 114,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 114,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "16": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "17": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 123,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "18": {
        loc: {
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 121,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 12
          },
          end: {
            line: 121,
            column: 21
          }
        }, {
          start: {
            line: 121,
            column: 25
          },
          end: {
            line: 121,
            column: 44
          }
        }, {
          start: {
            line: 121,
            column: 48
          },
          end: {
            line: 121,
            column: 72
          }
        }],
        line: 121
      },
      "19": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "20": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "21": {
        loc: {
          start: {
            line: 181,
            column: 20
          },
          end: {
            line: 181,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 20
          },
          end: {
            line: 181,
            column: 39
          }
        }, {
          start: {
            line: 181,
            column: 43
          },
          end: {
            line: 181,
            column: 46
          }
        }],
        line: 181
      },
      "22": {
        loc: {
          start: {
            line: 183,
            column: 2
          },
          end: {
            line: 183,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 23
          },
          end: {
            line: 183,
            column: 65
          }
        }, {
          start: {
            line: 183,
            column: 68
          },
          end: {
            line: 183,
            column: 70
          }
        }],
        line: 183
      },
      "23": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "24": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 213,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 213,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "25": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 212,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 212,
            column: 35
          }
        }, {
          start: {
            line: 212,
            column: 39
          },
          end: {
            line: 212,
            column: 53
          }
        }],
        line: 212
      },
      "26": {
        loc: {
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 214,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 225,
            column: 13
          }
        }],
        line: 214
      },
      "27": {
        loc: {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: 223,
            column: 17
          },
          end: {
            line: 225,
            column: 13
          }
        }],
        line: 220
      },
      "28": {
        loc: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 237,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 237,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "29": {
        loc: {
          start: {
            line: 236,
            column: 18
          },
          end: {
            line: 236,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 55
          },
          end: {
            line: 236,
            column: 61
          }
        }, {
          start: {
            line: 236,
            column: 64
          },
          end: {
            line: 236,
            column: 81
          }
        }],
        line: 236
      },
      "30": {
        loc: {
          start: {
            line: 236,
            column: 18
          },
          end: {
            line: 236,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 18
          },
          end: {
            line: 236,
            column: 32
          }
        }, {
          start: {
            line: 236,
            column: 36
          },
          end: {
            line: 236,
            column: 52
          }
        }],
        line: 236
      },
      "31": {
        loc: {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 241,
            column: 23
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 241,
            column: 23
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 240
      },
      "32": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 252,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 252,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "33": {
        loc: {
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 259,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 16
          },
          end: {
            line: 259,
            column: 17
          }
        }, {
          start: {
            line: 257,
            column: 21
          },
          end: {
            line: 259,
            column: 17
          }
        }],
        line: 254
      },
      "34": {
        loc: {
          start: {
            line: 254,
            column: 20
          },
          end: {
            line: 254,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 20
          },
          end: {
            line: 254,
            column: 32
          }
        }, {
          start: {
            line: 254,
            column: 37
          },
          end: {
            line: 254,
            column: 60
          }
        }, {
          start: {
            line: 254,
            column: 64
          },
          end: {
            line: 254,
            column: 87
          }
        }],
        line: 254
      },
      "35": {
        loc: {
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "36": {
        loc: {
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 291,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 20
          },
          end: {
            line: 291,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "37": {
        loc: {
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 16
          },
          end: {
            line: 298,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RelationOntologizer.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RelationOntologizer.ts"],
      sourcesContent: ["import { TFile, App, Notice, TFolder } from 'obsidian';\nimport { RelationAsset, RelationAssetHelper } from '../../domain/entities/RelationAsset';\n\n/**\n * Service for converting asset properties to Relation instances\n * This implements the ontologization of relationships concept\n */\nexport class RelationOntologizer {\n    private app: App;\n    private relationsFolder: string = '99 Relations'; // Folder for relation assets\n    \n    constructor(app: App) {\n        this.app = app;\n    }\n    \n    /**\n     * Convert frontmatter object properties to Relation assets\n     */\n    async ontologizeAsset(file: TFile): Promise<RelationAsset[]> {\n        const relations: RelationAsset[] = [];\n        const cache = this.app.metadataCache.getFileCache(file);\n        \n        if (!cache?.frontmatter) {\n            return relations;\n        }\n        \n        const frontmatter = cache.frontmatter;\n        const assetUid = frontmatter['exo__Asset_uid'] || file.basename;\n        \n        // Process each frontmatter property\n        for (const [key, value] of Object.entries(frontmatter)) {\n            if (this.isObjectProperty(key, value)) {\n                const propertyRelations = await this.processProperty(\n                    assetUid,\n                    key,\n                    value,\n                    file\n                );\n                relations.push(...propertyRelations);\n            }\n        }\n        \n        return relations;\n    }\n    \n    /**\n     * Check if a property represents an object relationship\n     */\n    private isObjectProperty(key: string, value?: any): boolean {\n        // Skip meta properties\n        const metaProperties = [\n            'exo__Asset_uid',\n            'exo__Asset_createdAt',\n            'exo__Asset_modifiedAt',\n            'exo__Instance_class',\n            'tags',\n            'title',\n            'status',\n            'description'\n        ];\n        \n        if (metaProperties.includes(key)) {\n            return false;\n        }\n        \n        // Object properties typically have these patterns\n        const objectPropertyPatterns = [\n            /_relates$/,\n            /_parent$/,\n            /_children$/,\n            /_assignedTo$/,\n            /_project$/,\n            /_area$/,\n            /_partOf$/,\n            /_blocks$/,\n            /_dependsOn$/,\n            /_relatedTo$/,\n            /_isDefinedBy$/,\n            /_hasPart$/,\n            /_hasTask$/\n        ];\n        \n        // Check if it matches object property patterns\n        if (objectPropertyPatterns.some(pattern => pattern.test(key))) {\n            return true;\n        }\n        \n        // Check if value contains wiki link pattern\n        if (value !== undefined && value !== null) {\n            const valueStr = Array.isArray(value) ? value[0] : String(value);\n            if (valueStr && typeof valueStr === 'string' && valueStr.includes('[[')) {\n                return true;\n            }\n        }\n        \n        return false;\n    }\n    \n    /**\n     * Process a single property and create relations\n     */\n    private async processProperty(\n        subjectUid: string,\n        predicate: string,\n        value: any,\n        sourceFile: TFile\n    ): Promise<RelationAsset[]> {\n        const relations: RelationAsset[] = [];\n        \n        // Handle array values\n        if (Array.isArray(value)) {\n            for (const item of value) {\n                const relation = this.createRelation(\n                    subjectUid,\n                    predicate,\n                    item,\n                    sourceFile\n                );\n                if (relation) {\n                    relations.push(relation);\n                }\n            }\n        } else {\n            const relation = this.createRelation(\n                subjectUid,\n                predicate,\n                value,\n                sourceFile\n            );\n            if (relation) {\n                relations.push(relation);\n            }\n        }\n        \n        return relations;\n    }\n    \n    /**\n     * Create a single relation\n     */\n    private createRelation(\n        subject: string,\n        predicate: string,\n        object: any,\n        sourceFile: TFile\n    ): RelationAsset | null {\n        if (!object) return null;\n        \n        // Extract object identifier from wiki link\n        let objectId = String(object);\n        if (objectId.includes('[[')) {\n            objectId = objectId.replace(/\\[\\[|\\]\\]/g, '');\n        }\n        \n        // Skip empty values\n        if (!objectId || objectId === 'null' || objectId === 'undefined') {\n            return null;\n        }\n        \n        return RelationAssetHelper.create({\n            subject,\n            predicate,\n            object: objectId,\n            provenance: `ontologized from ${sourceFile.path}`\n        });\n    }\n    \n    /**\n     * Create relation files in vault\n     */\n    async createRelationFiles(relations: RelationAsset[]): Promise<void> {\n        // Ensure relations folder exists\n        await this.ensureRelationsFolder();\n        \n        const created: string[] = [];\n        const failed: string[] = [];\n        \n        for (const relation of relations) {\n            try {\n                await this.createRelationFile(relation);\n                created.push(relation.uid);\n            } catch (error) {\n                console.error(`Failed to create relation ${relation.uid}:`, error);\n                failed.push(relation.uid);\n            }\n        }\n        \n        // Show summary notification\n        if (created.length > 0) {\n            new Notice(`Created ${created.length} relation assets`);\n        }\n        if (failed.length > 0) {\n            new Notice(`Failed to create ${failed.length} relations`);\n        }\n    }\n    \n    /**\n     * Create a single relation file\n     */\n    private async createRelationFile(relation: RelationAsset): Promise<TFile> {\n        const filename = RelationAssetHelper.generateFilename(relation);\n        const filepath = `${this.relationsFolder}/${filename}`;\n        \n        // Generate frontmatter\n        const frontmatter = RelationAssetHelper.toFrontmatter(relation);\n        const frontmatterYaml = this.generateYaml(frontmatter);\n        \n        // Generate content\n        const content = `---\n${frontmatterYaml}---\n\n# Relation: ${relation.predicate}\n\n**Subject**: [[${relation.subject}]]\n**Predicate**: \\`${relation.predicate}\\`\n**Object**: [[${relation.object}]]\n\n## Metadata\n- **Created**: ${relation.createdAt.toISOString()}\n- **Confidence**: ${relation.confidence || 1.0}\n- **Provenance**: ${relation.provenance}\n${relation.inverseOf ? `- **Inverse**: [[${relation.inverseOf}]]` : ''}\n\n## Description\nThis relation represents the connection between assets using the predicate \\`${relation.predicate}\\`.\n\n---\n*This file was automatically generated by RelationOntologizer*`;\n        \n        // Create the file\n        const file = await this.app.vault.create(filepath, content);\n        return file;\n    }\n    \n    /**\n     * Ensure relations folder exists\n     */\n    private async ensureRelationsFolder(): Promise<void> {\n        const folder = this.app.vault.getAbstractFileByPath(this.relationsFolder);\n        if (!folder) {\n            await this.app.vault.createFolder(this.relationsFolder);\n        }\n    }\n    \n    /**\n     * Generate YAML from object\n     */\n    private generateYaml(obj: Record<string, any>): string {\n        const lines: string[] = [];\n        \n        for (const [key, value] of Object.entries(obj)) {\n            if (value === undefined || value === null) continue;\n            \n            if (Array.isArray(value)) {\n                lines.push(`${key}:`);\n                for (const item of value) {\n                    lines.push(`  - ${JSON.stringify(item)}`);\n                }\n            } else if (typeof value === 'object') {\n                lines.push(`${key}: ${JSON.stringify(value)}`);\n            } else {\n                lines.push(`${key}: ${JSON.stringify(value)}`);\n            }\n        }\n        \n        return lines.join('\\n') + '\\n';\n    }\n    \n    /**\n     * Clean original asset by removing converted properties\n     */\n    async cleanAssetFrontmatter(file: TFile, propertiesToRemove: string[]): Promise<void> {\n        const content = await this.app.vault.read(file);\n        const cache = this.app.metadataCache.getFileCache(file);\n        \n        if (!cache?.frontmatter) return;\n        \n        // Parse frontmatter\n        const frontmatterMatch = content.match(/^---\\n([\\s\\S]*?)\\n---/);\n        if (!frontmatterMatch) return;\n        \n        const frontmatterText = frontmatterMatch[1];\n        const lines = frontmatterText.split('\\n');\n        const newLines: string[] = [];\n        \n        let skipProperty = false;\n        for (const line of lines) {\n            // Check if this line starts a property to remove\n            const isPropertyLine = propertiesToRemove.some(prop => \n                line.startsWith(`${prop}:`)\n            );\n            \n            if (isPropertyLine) {\n                skipProperty = true;\n                continue;\n            }\n            \n            // Skip array items of removed properties\n            if (skipProperty && (line.startsWith('  - ') || line.startsWith('    '))) {\n                continue;\n            } else {\n                skipProperty = false;\n            }\n            \n            newLines.push(line);\n        }\n        \n        // Reconstruct content\n        const newFrontmatter = newLines.join('\\n');\n        const newContent = content.replace(\n            frontmatterMatch[0],\n            `---\\n${newFrontmatter}\\n---`\n        );\n        \n        await this.app.vault.modify(file, newContent);\n    }\n    \n    /**\n     * Migrate entire vault to relation-based model\n     */\n    async migrateVault(progressCallback?: (current: number, total: number) => void): Promise<{\n        assetsProcessed: number;\n        relationsCreated: number;\n        errors: string[];\n    }> {\n        const files = this.app.vault.getMarkdownFiles();\n        const errors: string[] = [];\n        let totalRelations = 0;\n        \n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            \n            // Skip relation files themselves\n            if (file.path.startsWith(this.relationsFolder)) {\n                continue;\n            }\n            \n            try {\n                const relations = await this.ontologizeAsset(file);\n                if (relations.length > 0) {\n                    await this.createRelationFiles(relations);\n                    \n                    // Get properties that were converted\n                    const convertedProperties = [...new Set(\n                        relations.map(r => r.predicate)\n                    )];\n                    \n                    // Clean the original asset\n                    await this.cleanAssetFrontmatter(file, convertedProperties);\n                    \n                    totalRelations += relations.length;\n                }\n            } catch (error) {\n                errors.push(`${file.path}: ${error}`);\n            }\n            \n            if (progressCallback) {\n                progressCallback(i + 1, files.length);\n            }\n        }\n        \n        return {\n            assetsProcessed: files.length,\n            relationsCreated: totalRelations,\n            errors\n        };\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5c223fbdfa7eaadd780eccf96cfeecd4adc0bda0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dtxotlkao = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dtxotlkao();
cov_1dtxotlkao().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1dtxotlkao().s[1]++;
exports.RelationOntologizer = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_1dtxotlkao().s[2]++, require("tslib"));
const obsidian_1 =
/* istanbul ignore next */
(cov_1dtxotlkao().s[3]++, require("obsidian"));
const RelationAsset_1 =
/* istanbul ignore next */
(cov_1dtxotlkao().s[4]++, require("../../domain/entities/RelationAsset"));
/**
 * Service for converting asset properties to Relation instances
 * This implements the ontologization of relationships concept
 */
class RelationOntologizer {
  constructor(app) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[0]++;
    cov_1dtxotlkao().s[5]++;
    this.relationsFolder = '99 Relations'; // Folder for relation assets
    /* istanbul ignore next */
    cov_1dtxotlkao().s[6]++;
    this.app = app;
  }
  /**
   * Convert frontmatter object properties to Relation assets
   */
  ontologizeAsset(file) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[1]++;
    cov_1dtxotlkao().s[7]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[2]++;
      const relations =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[8]++, []);
      const cache =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[9]++, this.app.metadataCache.getFileCache(file));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[10]++;
      if (!(
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[2][0]++, cache === null) ||
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[2][1]++, cache === void 0) ?
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[1][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[1][1]++, cache.frontmatter))) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[0][0]++;
        cov_1dtxotlkao().s[11]++;
        return relations;
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[0][1]++;
      }
      const frontmatter =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[12]++, cache.frontmatter);
      const assetUid =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[13]++,
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[3][0]++, frontmatter['exo__Asset_uid']) ||
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[3][1]++, file.basename));
      // Process each frontmatter property
      /* istanbul ignore next */
      cov_1dtxotlkao().s[14]++;
      for (const [key, value] of Object.entries(frontmatter)) {
        /* istanbul ignore next */
        cov_1dtxotlkao().s[15]++;
        if (this.isObjectProperty(key, value)) {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[4][0]++;
          const propertyRelations =
          /* istanbul ignore next */
          (cov_1dtxotlkao().s[16]++, yield this.processProperty(assetUid, key, value, file));
          /* istanbul ignore next */
          cov_1dtxotlkao().s[17]++;
          relations.push(...propertyRelations);
        } else
        /* istanbul ignore next */
        {
          cov_1dtxotlkao().b[4][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1dtxotlkao().s[18]++;
      return relations;
    });
  }
  /**
   * Check if a property represents an object relationship
   */
  isObjectProperty(key, value) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[3]++;
    // Skip meta properties
    const metaProperties =
    /* istanbul ignore next */
    (cov_1dtxotlkao().s[19]++, ['exo__Asset_uid', 'exo__Asset_createdAt', 'exo__Asset_modifiedAt', 'exo__Instance_class', 'tags', 'title', 'status', 'description']);
    /* istanbul ignore next */
    cov_1dtxotlkao().s[20]++;
    if (metaProperties.includes(key)) {
      /* istanbul ignore next */
      cov_1dtxotlkao().b[5][0]++;
      cov_1dtxotlkao().s[21]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_1dtxotlkao().b[5][1]++;
    }
    // Object properties typically have these patterns
    const objectPropertyPatterns =
    /* istanbul ignore next */
    (cov_1dtxotlkao().s[22]++, [/_relates$/, /_parent$/, /_children$/, /_assignedTo$/, /_project$/, /_area$/, /_partOf$/, /_blocks$/, /_dependsOn$/, /_relatedTo$/, /_isDefinedBy$/, /_hasPart$/, /_hasTask$/]);
    // Check if it matches object property patterns
    /* istanbul ignore next */
    cov_1dtxotlkao().s[23]++;
    if (objectPropertyPatterns.some(pattern => {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[4]++;
      cov_1dtxotlkao().s[24]++;
      return pattern.test(key);
    })) {
      /* istanbul ignore next */
      cov_1dtxotlkao().b[6][0]++;
      cov_1dtxotlkao().s[25]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1dtxotlkao().b[6][1]++;
    }
    // Check if value contains wiki link pattern
    cov_1dtxotlkao().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_1dtxotlkao().b[8][0]++, value !== undefined) &&
    /* istanbul ignore next */
    (cov_1dtxotlkao().b[8][1]++, value !== null)) {
      /* istanbul ignore next */
      cov_1dtxotlkao().b[7][0]++;
      const valueStr =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[27]++, Array.isArray(value) ?
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[9][0]++, value[0]) :
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[9][1]++, String(value)));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[28]++;
      if (
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[11][0]++, valueStr) &&
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[11][1]++, typeof valueStr === 'string') &&
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[11][2]++, valueStr.includes('[['))) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[10][0]++;
        cov_1dtxotlkao().s[29]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[10][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1dtxotlkao().b[7][1]++;
    }
    cov_1dtxotlkao().s[30]++;
    return false;
  }
  /**
   * Process a single property and create relations
   */
  processProperty(subjectUid, predicate, value, sourceFile) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[5]++;
    cov_1dtxotlkao().s[31]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[6]++;
      const relations =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[32]++, []);
      // Handle array values
      /* istanbul ignore next */
      cov_1dtxotlkao().s[33]++;
      if (Array.isArray(value)) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[12][0]++;
        cov_1dtxotlkao().s[34]++;
        for (const item of value) {
          const relation =
          /* istanbul ignore next */
          (cov_1dtxotlkao().s[35]++, this.createRelation(subjectUid, predicate, item, sourceFile));
          /* istanbul ignore next */
          cov_1dtxotlkao().s[36]++;
          if (relation) {
            /* istanbul ignore next */
            cov_1dtxotlkao().b[13][0]++;
            cov_1dtxotlkao().s[37]++;
            relations.push(relation);
          } else
          /* istanbul ignore next */
          {
            cov_1dtxotlkao().b[13][1]++;
          }
        }
      } else {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[12][1]++;
        const relation =
        /* istanbul ignore next */
        (cov_1dtxotlkao().s[38]++, this.createRelation(subjectUid, predicate, value, sourceFile));
        /* istanbul ignore next */
        cov_1dtxotlkao().s[39]++;
        if (relation) {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[14][0]++;
          cov_1dtxotlkao().s[40]++;
          relations.push(relation);
        } else
        /* istanbul ignore next */
        {
          cov_1dtxotlkao().b[14][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1dtxotlkao().s[41]++;
      return relations;
    });
  }
  /**
   * Create a single relation
   */
  createRelation(subject, predicate, object, sourceFile) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[7]++;
    cov_1dtxotlkao().s[42]++;
    if (!object) {
      /* istanbul ignore next */
      cov_1dtxotlkao().b[15][0]++;
      cov_1dtxotlkao().s[43]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1dtxotlkao().b[15][1]++;
    }
    // Extract object identifier from wiki link
    let objectId =
    /* istanbul ignore next */
    (cov_1dtxotlkao().s[44]++, String(object));
    /* istanbul ignore next */
    cov_1dtxotlkao().s[45]++;
    if (objectId.includes('[[')) {
      /* istanbul ignore next */
      cov_1dtxotlkao().b[16][0]++;
      cov_1dtxotlkao().s[46]++;
      objectId = objectId.replace(/\[\[|\]\]/g, '');
    } else
    /* istanbul ignore next */
    {
      cov_1dtxotlkao().b[16][1]++;
    }
    // Skip empty values
    cov_1dtxotlkao().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_1dtxotlkao().b[18][0]++, !objectId) ||
    /* istanbul ignore next */
    (cov_1dtxotlkao().b[18][1]++, objectId === 'null') ||
    /* istanbul ignore next */
    (cov_1dtxotlkao().b[18][2]++, objectId === 'undefined')) {
      /* istanbul ignore next */
      cov_1dtxotlkao().b[17][0]++;
      cov_1dtxotlkao().s[48]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1dtxotlkao().b[17][1]++;
    }
    cov_1dtxotlkao().s[49]++;
    return RelationAsset_1.RelationAssetHelper.create({
      subject,
      predicate,
      object: objectId,
      provenance: `ontologized from ${sourceFile.path}`
    });
  }
  /**
   * Create relation files in vault
   */
  createRelationFiles(relations) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[8]++;
    cov_1dtxotlkao().s[50]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[9]++;
      cov_1dtxotlkao().s[51]++;
      // Ensure relations folder exists
      yield this.ensureRelationsFolder();
      const created =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[52]++, []);
      const failed =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[53]++, []);
      /* istanbul ignore next */
      cov_1dtxotlkao().s[54]++;
      for (const relation of relations) {
        /* istanbul ignore next */
        cov_1dtxotlkao().s[55]++;
        try {
          /* istanbul ignore next */
          cov_1dtxotlkao().s[56]++;
          yield this.createRelationFile(relation);
          /* istanbul ignore next */
          cov_1dtxotlkao().s[57]++;
          created.push(relation.uid);
        } catch (error) {
          /* istanbul ignore next */
          cov_1dtxotlkao().s[58]++;
          console.error(`Failed to create relation ${relation.uid}:`, error);
          /* istanbul ignore next */
          cov_1dtxotlkao().s[59]++;
          failed.push(relation.uid);
        }
      }
      // Show summary notification
      /* istanbul ignore next */
      cov_1dtxotlkao().s[60]++;
      if (created.length > 0) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[19][0]++;
        cov_1dtxotlkao().s[61]++;
        new obsidian_1.Notice(`Created ${created.length} relation assets`);
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[19][1]++;
      }
      cov_1dtxotlkao().s[62]++;
      if (failed.length > 0) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[20][0]++;
        cov_1dtxotlkao().s[63]++;
        new obsidian_1.Notice(`Failed to create ${failed.length} relations`);
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[20][1]++;
      }
    });
  }
  /**
   * Create a single relation file
   */
  createRelationFile(relation) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[10]++;
    cov_1dtxotlkao().s[64]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[11]++;
      const filename =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[65]++, RelationAsset_1.RelationAssetHelper.generateFilename(relation));
      const filepath =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[66]++, `${this.relationsFolder}/${filename}`);
      // Generate frontmatter
      const frontmatter =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[67]++, RelationAsset_1.RelationAssetHelper.toFrontmatter(relation));
      const frontmatterYaml =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[68]++, this.generateYaml(frontmatter));
      // Generate content
      const content =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[69]++, `---
${frontmatterYaml}---

# Relation: ${relation.predicate}

**Subject**: [[${relation.subject}]]
**Predicate**: \`${relation.predicate}\`
**Object**: [[${relation.object}]]

## Metadata
- **Created**: ${relation.createdAt.toISOString()}
- **Confidence**: ${
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[21][0]++, relation.confidence) ||
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[21][1]++, 1.0)}
- **Provenance**: ${relation.provenance}
${relation.inverseOf ?
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[22][0]++, `- **Inverse**: [[${relation.inverseOf}]]`) :
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[22][1]++, '')}

## Description
This relation represents the connection between assets using the predicate \`${relation.predicate}\`.

---
*This file was automatically generated by RelationOntologizer*`);
      // Create the file
      const file =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[70]++, yield this.app.vault.create(filepath, content));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[71]++;
      return file;
    });
  }
  /**
   * Ensure relations folder exists
   */
  ensureRelationsFolder() {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[12]++;
    cov_1dtxotlkao().s[72]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[13]++;
      const folder =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[73]++, this.app.vault.getAbstractFileByPath(this.relationsFolder));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[74]++;
      if (!folder) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[23][0]++;
        cov_1dtxotlkao().s[75]++;
        yield this.app.vault.createFolder(this.relationsFolder);
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[23][1]++;
      }
    });
  }
  /**
   * Generate YAML from object
   */
  generateYaml(obj) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[14]++;
    const lines =
    /* istanbul ignore next */
    (cov_1dtxotlkao().s[76]++, []);
    /* istanbul ignore next */
    cov_1dtxotlkao().s[77]++;
    for (const [key, value] of Object.entries(obj)) {
      /* istanbul ignore next */
      cov_1dtxotlkao().s[78]++;
      if (
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[25][0]++, value === undefined) ||
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[25][1]++, value === null)) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[24][0]++;
        cov_1dtxotlkao().s[79]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[24][1]++;
      }
      cov_1dtxotlkao().s[80]++;
      if (Array.isArray(value)) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[26][0]++;
        cov_1dtxotlkao().s[81]++;
        lines.push(`${key}:`);
        /* istanbul ignore next */
        cov_1dtxotlkao().s[82]++;
        for (const item of value) {
          /* istanbul ignore next */
          cov_1dtxotlkao().s[83]++;
          lines.push(`  - ${JSON.stringify(item)}`);
        }
      } else {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[26][1]++;
        cov_1dtxotlkao().s[84]++;
        if (typeof value === 'object') {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[27][0]++;
          cov_1dtxotlkao().s[85]++;
          lines.push(`${key}: ${JSON.stringify(value)}`);
        } else {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[27][1]++;
          cov_1dtxotlkao().s[86]++;
          lines.push(`${key}: ${JSON.stringify(value)}`);
        }
      }
    }
    /* istanbul ignore next */
    cov_1dtxotlkao().s[87]++;
    return lines.join('\n') + '\n';
  }
  /**
   * Clean original asset by removing converted properties
   */
  cleanAssetFrontmatter(file, propertiesToRemove) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[15]++;
    cov_1dtxotlkao().s[88]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[16]++;
      const content =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[89]++, yield this.app.vault.read(file));
      const cache =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[90]++, this.app.metadataCache.getFileCache(file));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[91]++;
      if (!(
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[30][0]++, cache === null) ||
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[30][1]++, cache === void 0) ?
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[29][0]++, void 0) :
      /* istanbul ignore next */
      (cov_1dtxotlkao().b[29][1]++, cache.frontmatter))) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[28][0]++;
        cov_1dtxotlkao().s[92]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[28][1]++;
      }
      // Parse frontmatter
      const frontmatterMatch =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[93]++, content.match(/^---\n([\s\S]*?)\n---/));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[94]++;
      if (!frontmatterMatch) {
        /* istanbul ignore next */
        cov_1dtxotlkao().b[31][0]++;
        cov_1dtxotlkao().s[95]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_1dtxotlkao().b[31][1]++;
      }
      const frontmatterText =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[96]++, frontmatterMatch[1]);
      const lines =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[97]++, frontmatterText.split('\n'));
      const newLines =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[98]++, []);
      let skipProperty =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[99]++, false);
      /* istanbul ignore next */
      cov_1dtxotlkao().s[100]++;
      for (const line of lines) {
        // Check if this line starts a property to remove
        const isPropertyLine =
        /* istanbul ignore next */
        (cov_1dtxotlkao().s[101]++, propertiesToRemove.some(prop => {
          /* istanbul ignore next */
          cov_1dtxotlkao().f[17]++;
          cov_1dtxotlkao().s[102]++;
          return line.startsWith(`${prop}:`);
        }));
        /* istanbul ignore next */
        cov_1dtxotlkao().s[103]++;
        if (isPropertyLine) {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[32][0]++;
          cov_1dtxotlkao().s[104]++;
          skipProperty = true;
          /* istanbul ignore next */
          cov_1dtxotlkao().s[105]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1dtxotlkao().b[32][1]++;
        }
        // Skip array items of removed properties
        cov_1dtxotlkao().s[106]++;
        if (
        /* istanbul ignore next */
        (cov_1dtxotlkao().b[34][0]++, skipProperty) && (
        /* istanbul ignore next */
        (cov_1dtxotlkao().b[34][1]++, line.startsWith('  - ')) ||
        /* istanbul ignore next */
        (cov_1dtxotlkao().b[34][2]++, line.startsWith('    ')))) {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[33][0]++;
          cov_1dtxotlkao().s[107]++;
          continue;
        } else {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[33][1]++;
          cov_1dtxotlkao().s[108]++;
          skipProperty = false;
        }
        /* istanbul ignore next */
        cov_1dtxotlkao().s[109]++;
        newLines.push(line);
      }
      // Reconstruct content
      const newFrontmatter =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[110]++, newLines.join('\n'));
      const newContent =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[111]++, content.replace(frontmatterMatch[0], `---\n${newFrontmatter}\n---`));
      /* istanbul ignore next */
      cov_1dtxotlkao().s[112]++;
      yield this.app.vault.modify(file, newContent);
    });
  }
  /**
   * Migrate entire vault to relation-based model
   */
  migrateVault(progressCallback) {
    /* istanbul ignore next */
    cov_1dtxotlkao().f[18]++;
    cov_1dtxotlkao().s[113]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_1dtxotlkao().f[19]++;
      const files =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[114]++, this.app.vault.getMarkdownFiles());
      const errors =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[115]++, []);
      let totalRelations =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[116]++, 0);
      /* istanbul ignore next */
      cov_1dtxotlkao().s[117]++;
      for (let i =
      /* istanbul ignore next */
      (cov_1dtxotlkao().s[118]++, 0); i < files.length; i++) {
        const file =
        /* istanbul ignore next */
        (cov_1dtxotlkao().s[119]++, files[i]);
        // Skip relation files themselves
        /* istanbul ignore next */
        cov_1dtxotlkao().s[120]++;
        if (file.path.startsWith(this.relationsFolder)) {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[35][0]++;
          cov_1dtxotlkao().s[121]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_1dtxotlkao().b[35][1]++;
        }
        cov_1dtxotlkao().s[122]++;
        try {
          const relations =
          /* istanbul ignore next */
          (cov_1dtxotlkao().s[123]++, yield this.ontologizeAsset(file));
          /* istanbul ignore next */
          cov_1dtxotlkao().s[124]++;
          if (relations.length > 0) {
            /* istanbul ignore next */
            cov_1dtxotlkao().b[36][0]++;
            cov_1dtxotlkao().s[125]++;
            yield this.createRelationFiles(relations);
            // Get properties that were converted
            const convertedProperties =
            /* istanbul ignore next */
            (cov_1dtxotlkao().s[126]++, [...new Set(relations.map(r => {
              /* istanbul ignore next */
              cov_1dtxotlkao().f[20]++;
              cov_1dtxotlkao().s[127]++;
              return r.predicate;
            }))]);
            // Clean the original asset
            /* istanbul ignore next */
            cov_1dtxotlkao().s[128]++;
            yield this.cleanAssetFrontmatter(file, convertedProperties);
            /* istanbul ignore next */
            cov_1dtxotlkao().s[129]++;
            totalRelations += relations.length;
          } else
          /* istanbul ignore next */
          {
            cov_1dtxotlkao().b[36][1]++;
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_1dtxotlkao().s[130]++;
          errors.push(`${file.path}: ${error}`);
        }
        /* istanbul ignore next */
        cov_1dtxotlkao().s[131]++;
        if (progressCallback) {
          /* istanbul ignore next */
          cov_1dtxotlkao().b[37][0]++;
          cov_1dtxotlkao().s[132]++;
          progressCallback(i + 1, files.length);
        } else
        /* istanbul ignore next */
        {
          cov_1dtxotlkao().b[37][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1dtxotlkao().s[133]++;
      return {
        assetsProcessed: files.length,
        relationsCreated: totalRelations,
        errors
      };
    });
  }
}
/* istanbul ignore next */
cov_1dtxotlkao().s[134]++;
exports.RelationOntologizer = RelationOntologizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,