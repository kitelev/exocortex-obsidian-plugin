5e23863fb4e1c21b2ea9583ed0b075f1
"use strict";

/* istanbul ignore next */
function cov_1niiypvq4() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/AggregateRoot.ts";
  var hash = "ffea32d61cb6af098b88a0433ea1ebe02de9d80e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/AggregateRoot.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 31
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 21
        }
      },
      "4": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "5": {
        start: {
          line: 25,
          column: 28
        },
        end: {
          line: 25,
          column: 130
        }
      },
      "6": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 70
        }
      },
      "7": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 33
        }
      },
      "8": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 12,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 27
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 22,
            column: 5
          }
        },
        loc: {
          start: {
            line: 22,
            column: 44
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 32,
            column: 5
          }
        },
        loc: {
          start: {
            line: 32,
            column: 28
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {},
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/AggregateRoot.ts",
      mappings: ";;;AAAA,qCAAkC;AAElC;;;GAGG;AACH,MAAsB,aAAiB,SAAQ,eAAS;IAEpD,YAAsB,KAAQ;QAC1B,KAAK,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAED;;OAEG;IACI,oBAAoB;QACvB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,0BAA0B,CAAC,WAAgB;QAC/C,kEAAkE;QAClE,iDAAiD;QACjD,MAAM,WAAW,mCACV,WAAW,KACd,gBAAgB,EAAE,IAAI,IAAI,EAAE,EAC5B,WAAW,EAAE,IAAI,CAAC,GAAG,GACxB,CAAC;QAEF,4EAA4E;QAC5E,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,WAAW,CAAC,CAAC;IAClE,CAAC;IAED;;OAEG;IACI,qBAAqB;QACxB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC7B,CAAC;CACJ;AAnCD,sCAmCC",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/AggregateRoot.ts"],
      sourcesContent: ["import { Entity } from './Entity';\n\n/**\n * Aggregate Root base class for Domain-Driven Design\n * Aggregate roots are the entry points to aggregates\n */\nexport abstract class AggregateRoot<T> extends Entity<T> {\n\n    protected constructor(props: T) {\n        super(props);\n    }\n\n    /**\n     * Get all domain events (inherits from Entity)\n     */\n    public getUncommittedEvents(): any[] {\n        return this.getDomainEvents();\n    }\n\n    /**\n     * Mark domain event for dispatch\n     */\n    private markDomainEventForDispatch(domainEvent: any): void {\n        // This would integrate with an event bus in a full implementation\n        // For now, we just mark it as ready for dispatch\n        const markedEvent = {\n            ...domainEvent,\n            dateTimeOccurred: new Date(),\n            aggregateId: this._id\n        };\n        \n        // In a real implementation, this would be sent to a domain event dispatcher\n        console.log('Domain event marked for dispatch:', markedEvent);\n    }\n\n    /**\n     * Commit events\n     */\n    public markEventsAsCommitted(): void {\n        this.clearDomainEvents();\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ffea32d61cb6af098b88a0433ea1ebe02de9d80e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1niiypvq4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1niiypvq4();
cov_1niiypvq4().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1niiypvq4().s[1]++;
exports.AggregateRoot = void 0;
const Entity_1 =
/* istanbul ignore next */
(cov_1niiypvq4().s[2]++, require("./Entity"));
/**
 * Aggregate Root base class for Domain-Driven Design
 * Aggregate roots are the entry points to aggregates
 */
class AggregateRoot extends
/* istanbul ignore next */
(Entity_1.Entity) {
  constructor(props) {
    /* istanbul ignore next */
    cov_1niiypvq4().f[0]++;
    cov_1niiypvq4().s[3]++;
    super(props);
  }
  /**
   * Get all domain events (inherits from Entity)
   */
  getUncommittedEvents() {
    /* istanbul ignore next */
    cov_1niiypvq4().f[1]++;
    cov_1niiypvq4().s[4]++;
    return this.getDomainEvents();
  }
  /**
   * Mark domain event for dispatch
   */
  markDomainEventForDispatch(domainEvent) {
    /* istanbul ignore next */
    cov_1niiypvq4().f[2]++;
    // This would integrate with an event bus in a full implementation
    // For now, we just mark it as ready for dispatch
    const markedEvent =
    /* istanbul ignore next */
    (cov_1niiypvq4().s[5]++, Object.assign(Object.assign({}, domainEvent), {
      dateTimeOccurred: new Date(),
      aggregateId: this._id
    }));
    // In a real implementation, this would be sent to a domain event dispatcher
    /* istanbul ignore next */
    cov_1niiypvq4().s[6]++;
    console.log('Domain event marked for dispatch:', markedEvent);
  }
  /**
   * Commit events
   */
  markEventsAsCommitted() {
    /* istanbul ignore next */
    cov_1niiypvq4().f[3]++;
    cov_1niiypvq4().s[7]++;
    this.clearDomainEvents();
  }
}
/* istanbul ignore next */
cov_1niiypvq4().s[8]++;
exports.AggregateRoot = AggregateRoot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMW5paXlwdnE0IiwiYWN0dWFsQ292ZXJhZ2UiLCJzIiwiRW50aXR5XzEiLCJyZXF1aXJlIiwiQWdncmVnYXRlUm9vdCIsIkVudGl0eSIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJmIiwiZ2V0VW5jb21taXR0ZWRFdmVudHMiLCJnZXREb21haW5FdmVudHMiLCJtYXJrRG9tYWluRXZlbnRGb3JEaXNwYXRjaCIsImRvbWFpbkV2ZW50IiwibWFya2VkRXZlbnQiLCJPYmplY3QiLCJhc3NpZ24iLCJkYXRlVGltZU9jY3VycmVkIiwiRGF0ZSIsImFnZ3JlZ2F0ZUlkIiwiX2lkIiwiY29uc29sZSIsImxvZyIsIm1hcmtFdmVudHNBc0NvbW1pdHRlZCIsImNsZWFyRG9tYWluRXZlbnRzIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9kb21haW4vY29yZS9BZ2dyZWdhdGVSb290LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4vRW50aXR5JztcblxuLyoqXG4gKiBBZ2dyZWdhdGUgUm9vdCBiYXNlIGNsYXNzIGZvciBEb21haW4tRHJpdmVuIERlc2lnblxuICogQWdncmVnYXRlIHJvb3RzIGFyZSB0aGUgZW50cnkgcG9pbnRzIHRvIGFnZ3JlZ2F0ZXNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFnZ3JlZ2F0ZVJvb3Q8VD4gZXh0ZW5kcyBFbnRpdHk8VD4ge1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3BzOiBUKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGRvbWFpbiBldmVudHMgKGluaGVyaXRzIGZyb20gRW50aXR5KVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRVbmNvbW1pdHRlZEV2ZW50cygpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERvbWFpbkV2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hcmsgZG9tYWluIGV2ZW50IGZvciBkaXNwYXRjaFxuICAgICAqL1xuICAgIHByaXZhdGUgbWFya0RvbWFpbkV2ZW50Rm9yRGlzcGF0Y2goZG9tYWluRXZlbnQ6IGFueSk6IHZvaWQge1xuICAgICAgICAvLyBUaGlzIHdvdWxkIGludGVncmF0ZSB3aXRoIGFuIGV2ZW50IGJ1cyBpbiBhIGZ1bGwgaW1wbGVtZW50YXRpb25cbiAgICAgICAgLy8gRm9yIG5vdywgd2UganVzdCBtYXJrIGl0IGFzIHJlYWR5IGZvciBkaXNwYXRjaFxuICAgICAgICBjb25zdCBtYXJrZWRFdmVudCA9IHtcbiAgICAgICAgICAgIC4uLmRvbWFpbkV2ZW50LFxuICAgICAgICAgICAgZGF0ZVRpbWVPY2N1cnJlZDogbmV3IERhdGUoKSxcbiAgICAgICAgICAgIGFnZ3JlZ2F0ZUlkOiB0aGlzLl9pZFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGJlIHNlbnQgdG8gYSBkb21haW4gZXZlbnQgZGlzcGF0Y2hlclxuICAgICAgICBjb25zb2xlLmxvZygnRG9tYWluIGV2ZW50IG1hcmtlZCBmb3IgZGlzcGF0Y2g6JywgbWFya2VkRXZlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbW1pdCBldmVudHNcbiAgICAgKi9cbiAgICBwdWJsaWMgbWFya0V2ZW50c0FzQ29tbWl0dGVkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsZWFyRG9tYWluRXZlbnRzKCk7XG4gICAgfVxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFlVztJQUFBQSxhQUFBLFlBQUFBLENBQUE7TUFBQSxPQUFBQyxjQUFBO0lBQUE7RUFBQTtFQUFBLE9BQUFBLGNBQUE7QUFBQTtBQUFBRCxhQUFBO0FBQUFBLGFBQUEsR0FBQUUsQ0FBQTs7Ozs7OztBQWZYLE1BQUFDLFFBQUE7QUFBQTtBQUFBLENBQUFILGFBQUEsR0FBQUUsQ0FBQSxPQUFBRSxPQUFBO0FBRUE7Ozs7QUFJQSxNQUFzQkMsYUFBaUI7QUFBQTtBQUFBLENBQVFGLFFBQUEsQ0FBQUcsTUFBUztFQUVwREMsWUFBc0JDLEtBQVE7SUFBQTtJQUFBUixhQUFBLEdBQUFTLENBQUE7SUFBQVQsYUFBQSxHQUFBRSxDQUFBO0lBQzFCLEtBQUssQ0FBQ00sS0FBSyxDQUFDO0VBQ2hCO0VBRUE7OztFQUdPRSxvQkFBb0JBLENBQUE7SUFBQTtJQUFBVixhQUFBLEdBQUFTLENBQUE7SUFBQVQsYUFBQSxHQUFBRSxDQUFBO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDUyxlQUFlLEVBQUU7RUFDakM7RUFFQTs7O0VBR1FDLDBCQUEwQkEsQ0FBQ0MsV0FBZ0I7SUFBQTtJQUFBYixhQUFBLEdBQUFTLENBQUE7SUFDL0M7SUFDQTtJQUNBLE1BQU1LLFdBQVc7SUFBQTtJQUFBLENBQUFkLGFBQUEsR0FBQUUsQ0FBQSxPQUFBYSxNQUFBLENBQUFDLE1BQUEsQ0FBQUQsTUFBQSxDQUFBQyxNQUFBLEtBQ1ZILFdBQVc7TUFDZEksZ0JBQWdCLEVBQUUsSUFBSUMsSUFBSSxFQUFFO01BQzVCQyxXQUFXLEVBQUUsSUFBSSxDQUFDQztJQUFHLEVBQ3hCO0lBRUQ7SUFBQTtJQUFBcEIsYUFBQSxHQUFBRSxDQUFBO0lBQ0FtQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxtQ0FBbUMsRUFBRVIsV0FBVyxDQUFDO0VBQ2pFO0VBRUE7OztFQUdPUyxxQkFBcUJBLENBQUE7SUFBQTtJQUFBdkIsYUFBQSxHQUFBUyxDQUFBO0lBQUFULGFBQUEsR0FBQUUsQ0FBQTtJQUN4QixJQUFJLENBQUNzQixpQkFBaUIsRUFBRTtFQUM1Qjs7QUFDSDtBQUFBeEIsYUFBQSxHQUFBRSxDQUFBO0FBbkNEdUIsT0FBQSxDQUFBcEIsYUFBQSxHQUFBQSxhQUFBIiwiaWdub3JlTGlzdCI6W119