6a4a378b3123e2ae89a364c012074837
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskId = void 0;
const Result_1 = require("../core/Result");
/**
 * Value object representing a unique task identifier
 * Immutable and self-validating UUID-based identifier
 */
class TaskId {
    constructor(value) {
        this.value = value;
    }
    static create(value) {
        if (!value || value.trim().length === 0) {
            return Result_1.Result.fail("TaskId cannot be empty");
        }
        // Validate UUID format
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(value)) {
            return Result_1.Result.fail("TaskId must be a valid UUID");
        }
        return Result_1.Result.ok(new TaskId(value));
    }
    static generate() {
        const uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
            const r = (Math.random() * 16) | 0;
            const v = c === "x" ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
        return new TaskId(uuid);
    }
    toString() {
        return this.value;
    }
    equals(other) {
        return this.value === other.value;
    }
}
exports.TaskId = TaskId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL1Rhc2tJZC50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwyQ0FBd0M7QUFFeEM7OztHQUdHO0FBQ0gsTUFBYSxNQUFNO0lBR2pCLFlBQW9CLEtBQWE7UUFDL0IsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZDLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBUyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ3REO1FBRUQsdUJBQXVCO1FBQ3ZCLE1BQU0sU0FBUyxHQUNiLDRFQUE0RSxDQUFDO1FBQy9FLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBUyw2QkFBNkIsQ0FBQyxDQUFDO1NBQzNEO1FBRUQsT0FBTyxlQUFNLENBQUMsRUFBRSxDQUFTLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRO1FBQ2IsTUFBTSxJQUFJLEdBQUcsc0NBQXNDLENBQUMsT0FBTyxDQUN6RCxPQUFPLEVBQ1AsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUNKLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUMxQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUNGLENBQUM7UUFDRixPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNsQixPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7QUF6Q0Qsd0JBeUNDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9kb21haW4vdmFsdWUtb2JqZWN0cy9UYXNrSWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uL2NvcmUvUmVzdWx0XCI7XG5cbi8qKlxuICogVmFsdWUgb2JqZWN0IHJlcHJlc2VudGluZyBhIHVuaXF1ZSB0YXNrIGlkZW50aWZpZXJcbiAqIEltbXV0YWJsZSBhbmQgc2VsZi12YWxpZGF0aW5nIFVVSUQtYmFzZWQgaWRlbnRpZmllclxuICovXG5leHBvcnQgY2xhc3MgVGFza0lkIHtcbiAgcHJpdmF0ZSByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgY29uc3RydWN0b3IodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUodmFsdWU6IHN0cmluZyk6IFJlc3VsdDxUYXNrSWQ+IHtcbiAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBSZXN1bHQuZmFpbDxUYXNrSWQ+KFwiVGFza0lkIGNhbm5vdCBiZSBlbXB0eVwiKTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSBVVUlEIGZvcm1hdFxuICAgIGNvbnN0IHV1aWRSZWdleCA9XG4gICAgICAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pO1xuICAgIGlmICghdXVpZFJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWw8VGFza0lkPihcIlRhc2tJZCBtdXN0IGJlIGEgdmFsaWQgVVVJRFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVzdWx0Lm9rPFRhc2tJZD4obmV3IFRhc2tJZCh2YWx1ZSkpO1xuICB9XG5cbiAgc3RhdGljIGdlbmVyYXRlKCk6IFRhc2tJZCB7XG4gICAgY29uc3QgdXVpZCA9IFwieHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCIucmVwbGFjZShcbiAgICAgIC9beHldL2csXG4gICAgICAoYykgPT4ge1xuICAgICAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwO1xuICAgICAgICBjb25zdCB2ID0gYyA9PT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBUYXNrSWQodXVpZCk7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyOiBUYXNrSWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZSA9PT0gb3RoZXIudmFsdWU7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==