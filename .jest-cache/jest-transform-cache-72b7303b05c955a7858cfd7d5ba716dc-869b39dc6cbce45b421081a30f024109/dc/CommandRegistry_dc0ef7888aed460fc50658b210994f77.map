{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/command-controllers/CommandRegistry.ts","mappings":";;;AAGA;;;GAGG;AACH,MAAa,eAAe;IAG1B,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;QAF1B,gBAAW,GAAyB,EAAE,CAAC;IAEV,CAAC;IAE/C;;OAEG;IACH,kBAAkB,CAAC,UAA8B;QAC/C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa;QACjB,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;YACzC,IAAI;gBACF,MAAM,UAAU,CAAC,gBAAgB,EAAE,CAAC;gBACpC,OAAO,CAAC,GAAG,CAAC,2BAA2B,UAAU,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;aACxE;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CACX,mCAAmC,UAAU,CAAC,eAAe,EAAE,GAAG,EAClE,KAAK,CACN,CAAC;aACH;SACF;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACd,KAAK,MAAM,UAAU,IAAI,IAAI,CAAC,WAAW,EAAE;YACzC,IAAI;gBACF,MAAM,UAAU,CAAC,OAAO,EAAE,CAAC;gBAC3B,OAAO,CAAC,GAAG,CAAC,0BAA0B,UAAU,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;aACvE;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CACX,gCAAgC,UAAU,CAAC,eAAe,EAAE,GAAG,EAC/D,KAAK,CACN,CAAC;aACH;SACF;IACH,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;CACF;AApDD,0CAoDC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/command-controllers/CommandRegistry.ts"],"sourcesContent":["import { Plugin } from \"obsidian\";\nimport { ICommandController } from \"../../application/ports/ICommandController\";\n\n/**\n * Command Registry following Open/Closed Principle\n * Open for extension (new controllers), closed for modification\n */\nexport class CommandRegistry {\n  private readonly controllers: ICommandController[] = [];\n\n  constructor(private readonly plugin: Plugin) {}\n\n  /**\n   * Register a command controller\n   */\n  registerController(controller: ICommandController): void {\n    this.controllers.push(controller);\n  }\n\n  /**\n   * Initialize all registered controllers\n   */\n  async initializeAll(): Promise<void> {\n    for (const controller of this.controllers) {\n      try {\n        await controller.registerCommands();\n        console.log(`Initialized controller: ${controller.getControllerId()}`);\n      } catch (error) {\n        console.error(\n          `Failed to initialize controller ${controller.getControllerId()}:`,\n          error,\n        );\n      }\n    }\n  }\n\n  /**\n   * Cleanup all registered controllers\n   */\n  async cleanupAll(): Promise<void> {\n    for (const controller of this.controllers) {\n      try {\n        await controller.cleanup();\n        console.log(`Cleaned up controller: ${controller.getControllerId()}`);\n      } catch (error) {\n        console.error(\n          `Failed to cleanup controller ${controller.getControllerId()}:`,\n          error,\n        );\n      }\n    }\n  }\n\n  /**\n   * Get all registered controllers\n   */\n  getControllers(): readonly ICommandController[] {\n    return this.controllers;\n  }\n}\n"],"version":3}