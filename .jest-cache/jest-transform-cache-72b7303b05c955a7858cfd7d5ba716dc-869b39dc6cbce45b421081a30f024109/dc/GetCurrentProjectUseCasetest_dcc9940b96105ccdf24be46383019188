f681eabb29f63d88f5831e4fb7717241
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const GetCurrentProjectUseCase_1 = require("../../../../src/application/use-cases/GetCurrentProjectUseCase");
const Asset_1 = require("../../../../src/domain/entities/Asset");
const AssetId_1 = require("../../../../src/domain/value-objects/AssetId");
const ClassName_1 = require("../../../../src/domain/value-objects/ClassName");
const OntologyPrefix_1 = require("../../../../src/domain/value-objects/OntologyPrefix");
// Mock repositories and services
const mockAssetRepository = {
    save: jest.fn(),
    findById: jest.fn(),
    findAll: jest.fn(),
    delete: jest.fn(),
    findByClass: jest.fn(),
    findByTitle: jest.fn(),
    findByFilename: jest.fn(),
    update: jest.fn(),
    exists: jest.fn(),
    search: jest.fn()
};
const mockFocusService = {
    getCurrentFocus: jest.fn(),
    setFocus: jest.fn(),
    clearFocus: jest.fn(),
    getFocusHistory: jest.fn(),
    getFocusContext: jest.fn()
};
const mockGraph = {
    add: jest.fn(),
    remove: jest.fn(),
    query: jest.fn(),
    getTriples: jest.fn(),
    size: jest.fn(),
    clear: jest.fn(),
    has: jest.fn(),
    getSubjects: jest.fn(),
    getPredicates: jest.fn(),
    getObjects: jest.fn(),
    serialize: jest.fn(),
    deserialize: jest.fn()
};
describe('GetCurrentProjectUseCase', () => {
    let useCase;
    let mockProjectAssets;
    beforeEach(() => {
        jest.clearAllMocks();
        useCase = new GetCurrentProjectUseCase_1.GetCurrentProjectUseCase(mockAssetRepository, mockFocusService, mockGraph);
        // Create mock project assets
        const activeProject = Asset_1.Asset.create({
            id: AssetId_1.AssetId.create('active-project-id').getValue(),
            label: 'Active Project',
            className: ClassName_1.ClassName.create('ems__Project').getValue(),
            ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
            properties: {
                status: 'active',
                priority: 'high',
                description: 'Current active project',
                updatedAt: '2024-01-15T00:00:00Z'
            }
        }).getValue();
        const recentProject = Asset_1.Asset.create({
            id: AssetId_1.AssetId.create('recent-project-id').getValue(),
            label: 'Recent Project',
            className: ClassName_1.ClassName.create('ems__Project').getValue(),
            ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
            properties: {
                status: 'active',
                priority: 'medium',
                description: 'Recently updated project',
                updatedAt: '2024-01-10T00:00:00Z'
            }
        }).getValue();
        const completedProject = Asset_1.Asset.create({
            id: AssetId_1.AssetId.create('completed-project-id').getValue(),
            label: 'Completed Project',
            className: ClassName_1.ClassName.create('ems__Project').getValue(),
            ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
            properties: {
                status: 'completed',
                priority: 'low',
                description: 'Completed project',
                updatedAt: '2024-01-01T00:00:00Z'
            }
        }).getValue();
        mockProjectAssets = [activeProject, recentProject, completedProject];
    });
    describe('Basic Functionality', () => {
        it('should return success response with empty projects when no projects exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue([]);
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toEqual([]);
            expect(result.currentProject).toBeUndefined();
            expect(result.context.strategy).toBe('context');
        }));
        it('should return available projects sorted by activity and date', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toHaveLength(2); // Excludes completed by default
            expect(result.availableProjects[0].title).toBe('Active Project');
            expect(result.availableProjects[1].title).toBe('Recent Project');
        }));
        it('should include completed projects when requested', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
            const request = {
                preferences: {
                    includeCompleted: true
                }
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toHaveLength(3);
            expect(result.availableProjects.some(p => p.status === 'completed')).toBe(true);
        }));
        it('should limit results when maxResults is specified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
            const request = {
                preferences: {
                    maxResults: 1
                }
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toHaveLength(1);
            expect(result.availableProjects[0].title).toBe('Active Project');
        }));
        it('should handle repository errors with console warning and empty results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockRejectedValue(new Error('Repository error'));
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true); // Method still succeeds but returns empty
            expect(result.availableProjects).toEqual([]);
            expect(consoleSpy).toHaveBeenCalledWith('Failed to get available projects:', expect.any(Error));
            consoleSpy.mockRestore();
        }));
    });
    describe('Selection Strategies', () => {
        beforeEach(() => {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
        });
        describe('Context Strategy', () => {
            it('should detect project from current file when file is a project', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _a;
                const projectAsset = mockProjectAssets[0];
                mockAssetRepository.findByFilename.mockResolvedValue(projectAsset);
                const request = {
                    activeFile: 'active-project.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_a = result.currentProject) === null || _a === void 0 ? void 0 : _a.title).toBe('Active Project');
                expect(result.context.confidence).toBe(0.8);
                expect(result.context.reasoning).toContain('current file context');
            }));
            it('should detect project from asset properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _b;
                const taskAsset = Asset_1.Asset.create({
                    id: AssetId_1.AssetId.create('task-id').getValue(),
                    label: 'Task Asset',
                    className: ClassName_1.ClassName.create('ems__Task').getValue(),
                    ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                    properties: {
                        projectId: 'active-project-id'
                    }
                }).getValue();
                mockAssetRepository.findByFilename.mockResolvedValue(taskAsset);
                const request = {
                    activeFile: 'task.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_b = result.currentProject) === null || _b === void 0 ? void 0 : _b.id).toBe('active-project-id');
            }));
            it('should detect project from exo__Effort_parent property', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _c;
                const taskAsset = Asset_1.Asset.create({
                    id: AssetId_1.AssetId.create('task-id').getValue(),
                    label: 'Task Asset',
                    className: ClassName_1.ClassName.create('ems__Task').getValue(),
                    ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                    properties: {
                        exo__Effort_parent: '[[recent-project-id]]'
                    }
                }).getValue();
                mockAssetRepository.findByFilename.mockResolvedValue(taskAsset);
                const request = {
                    activeFile: 'task.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_c = result.currentProject) === null || _c === void 0 ? void 0 : _c.id).toBe('recent-project-id');
            }));
            it('should use RDF graph for project relationships', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _d;
                mockAssetRepository.findByFilename.mockResolvedValue(undefined);
                const mockTriple = {
                    getObject: jest.fn().mockReturnValue({ toString: () => 'active-project-id' })
                };
                mockGraph.query.mockReturnValue([mockTriple]);
                const request = {
                    activeFile: 'some-file.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_d = result.currentProject) === null || _d === void 0 ? void 0 : _d.id).toBe('active-project-id');
            }));
            it('should use reverse RDF relationships', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _e;
                mockAssetRepository.findByFilename.mockResolvedValue(undefined);
                mockGraph.query.mockReturnValueOnce([]); // No direct relationships
                const mockTriple = {
                    getSubject: jest.fn().mockReturnValue({ toString: () => 'recent-project-id' })
                };
                mockGraph.query.mockReturnValueOnce([mockTriple]); // Reverse relationship
                const request = {
                    activeFile: 'some-file.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_e = result.currentProject) === null || _e === void 0 ? void 0 : _e.id).toBe('recent-project-id');
            }));
            it('should fall back to recent activity when no context found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _f;
                mockAssetRepository.findByFilename.mockResolvedValue(undefined);
                mockGraph.query.mockReturnValue([]);
                const request = {
                    activeFile: 'unrelated-file.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_f = result.currentProject) === null || _f === void 0 ? void 0 : _f.title).toBe('Active Project');
                expect(result.context.confidence).toBe(0.8); // File context confidence, not fallback
                expect(result.context.reasoning).toContain('current file context');
            }));
            it('should handle graph query errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                mockAssetRepository.findByFilename.mockResolvedValue(undefined);
                mockGraph.query.mockImplementation(() => {
                    throw new Error('Graph error');
                });
                const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
                const request = {
                    activeFile: 'test.md',
                    preferences: { selectionStrategy: 'context' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect(consoleSpy).toHaveBeenCalledWith('Graph-based project detection failed:', expect.any(Error));
                consoleSpy.mockRestore();
            }));
        });
        describe('Recent Strategy', () => {
            it('should select most recently updated active project', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _a;
                const request = {
                    preferences: { selectionStrategy: 'recent' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_a = result.currentProject) === null || _a === void 0 ? void 0 : _a.title).toBe('Active Project');
                expect(result.context.strategy).toBe('recent');
                expect(result.context.confidence).toBe(0.6);
                expect(result.context.reasoning).toBe('Selected most recently updated active project');
            }));
            it('should handle no active projects gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const completedOnly = [mockProjectAssets[2]]; // Only completed project
                mockAssetRepository.findByClass.mockResolvedValue(completedOnly);
                const request = {
                    preferences: { selectionStrategy: 'recent' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect(result.currentProject).toBeUndefined();
            }));
        });
        describe('Active Strategy', () => {
            it('should select first active project', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _a;
                const request = {
                    preferences: { selectionStrategy: 'active' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_a = result.currentProject) === null || _a === void 0 ? void 0 : _a.title).toBe('Active Project');
                expect(result.context.strategy).toBe('active');
                expect(result.context.confidence).toBe(0.5);
                expect(result.context.reasoning).toBe('Selected first active project');
            }));
            it('should return undefined when no active projects exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                const completedOnly = [mockProjectAssets[2]]; // Only completed project
                mockAssetRepository.findByClass.mockResolvedValue(completedOnly);
                const request = {
                    preferences: { selectionStrategy: 'active' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect(result.currentProject).toBeUndefined();
                expect(result.context.reasoning).toBe('No suitable project found');
            }));
        });
        describe('Priority Strategy', () => {
            it('should select highest priority active project', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _a;
                const request = {
                    preferences: { selectionStrategy: 'priority' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_a = result.currentProject) === null || _a === void 0 ? void 0 : _a.title).toBe('Active Project'); // Has 'high' priority
                expect(result.context.strategy).toBe('priority');
                expect(result.context.confidence).toBe(0.7);
                expect(result.context.reasoning).toBe('Selected highest priority active project');
            }));
            it('should handle projects with no priority set', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _b;
                const noPriorityProject = Asset_1.Asset.create({
                    id: AssetId_1.AssetId.create('no-priority-id').getValue(),
                    label: 'No Priority Project',
                    className: ClassName_1.ClassName.create('ems__Project').getValue(),
                    ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                    properties: {
                        status: 'active'
                        // No priority property
                    }
                }).getValue();
                mockAssetRepository.findByClass.mockResolvedValue([noPriorityProject]);
                const request = {
                    preferences: { selectionStrategy: 'priority' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_b = result.currentProject) === null || _b === void 0 ? void 0 : _b.priority).toBe('medium'); // Default priority
            }));
            it('should sort by priority correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                var _c;
                const urgentProject = Asset_1.Asset.create({
                    id: AssetId_1.AssetId.create('urgent-project-id').getValue(),
                    label: 'Urgent Project',
                    className: ClassName_1.ClassName.create('ems__Project').getValue(),
                    ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                    properties: {
                        status: 'active',
                        priority: 'urgent'
                    }
                }).getValue();
                mockAssetRepository.findByClass.mockResolvedValue([
                    mockProjectAssets[0],
                    urgentProject,
                    mockProjectAssets[1] // medium priority
                ]);
                const request = {
                    preferences: { selectionStrategy: 'priority' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect((_c = result.currentProject) === null || _c === void 0 ? void 0 : _c.title).toBe('Urgent Project');
            }));
        });
        describe('Default Strategy Handling', () => {
            it('should default to context strategy when unspecified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                mockAssetRepository.findByFilename.mockResolvedValue(undefined);
                mockGraph.query.mockReturnValue([]);
                const request = {};
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect(result.context.strategy).toBe('context');
            }));
            it('should default to context strategy for invalid strategy', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                mockAssetRepository.findByFilename.mockResolvedValue(undefined);
                mockGraph.query.mockReturnValue([]);
                const request = {
                    preferences: { selectionStrategy: 'invalid' }
                };
                const result = yield useCase.execute(request);
                expect(result.success).toBe(true);
                expect(result.context.strategy).toBe('invalid'); // Strategy is preserved even if invalid
            }));
        });
    });
    describe('Context Information Building', () => {
        beforeEach(() => {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
        });
        it('should build context with high confidence for file-based detection', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByFilename.mockResolvedValue(mockProjectAssets[0]);
            const request = {
                activeFile: 'project.md'
            };
            const result = yield useCase.execute(request);
            expect(result.context.strategy).toBe('context');
            expect(result.context.confidence).toBe(0.8);
            expect(result.context.reasoning).toContain('current file context');
        }));
        it('should build context with low confidence for fallback detection', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByFilename.mockResolvedValue(undefined);
            mockGraph.query.mockReturnValue([]);
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.context.confidence).toBe(0.3);
            expect(result.context.reasoning).toBe('Used most recent active project');
        }));
        it('should handle no project found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue([]);
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.context.reasoning).toBe('No suitable project found');
            expect(result.context.confidence).toBe(0);
        }));
    });
    describe('Asset Conversion', () => {
        it('should convert Asset to project response format correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue([mockProjectAssets[0]]);
            const request = {};
            const result = yield useCase.execute(request);
            const project = result.availableProjects[0];
            expect(project).toMatchObject({
                id: 'active-project-id',
                title: 'Active Project',
                status: 'active',
                priority: 'high',
                description: 'Current active project',
                isActive: true,
                lastUpdated: '2024-01-15T00:00:00Z'
            });
        }));
        it('should handle assets with missing properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const minimalProject = Asset_1.Asset.create({
                id: AssetId_1.AssetId.create('minimal-id').getValue(),
                label: 'Minimal Project',
                className: ClassName_1.ClassName.create('ems__Project').getValue(),
                ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                properties: {}
            }).getValue();
            mockAssetRepository.findByClass.mockResolvedValue([minimalProject]);
            const request = {};
            const result = yield useCase.execute(request);
            const project = result.availableProjects[0];
            expect(project.status).toBe('active'); // Default
            expect(project.priority).toBe('medium'); // Default
            expect(project.isActive).toBe(false); // False because getProperty('status') returns undefined, not 'active'
            expect(project.lastUpdated).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/);
        }));
    });
    describe('Error Handling', () => {
        it('should handle asset repository findByClass failure in getAvailableProjects', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockRejectedValue(new Error('Database error'));
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true); // getAvailableProjects catches the error
            expect(result.availableProjects).toEqual([]);
            expect(consoleSpy).toHaveBeenCalledWith('Failed to get available projects:', expect.any(Error));
            consoleSpy.mockRestore();
        }));
        it('should handle asset repository findByFilename failure gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
            mockAssetRepository.findByFilename.mockRejectedValue(new Error('File not found'));
            const consoleSpy = jest.spyOn(console, 'warn').mockImplementation();
            const request = {
                activeFile: 'test.md'
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(consoleSpy).toHaveBeenCalledWith('Context-based project detection failed:', expect.any(Error));
            consoleSpy.mockRestore();
        }));
        it('should handle ClassName creation failure gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock ClassName.create to fail
            jest.spyOn(ClassName_1.ClassName, 'create').mockReturnValue({
                isFailure: true,
                isSuccess: false,
                error: 'Invalid class name',
                getValue: () => { throw new Error('No value'); }
            });
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toEqual([]);
            // Restore the mock
            jest.restoreAllMocks();
        }));
    });
    describe('Integration Scenarios', () => {
        it('should handle complete workflow with context file and project detection', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const projectFile = Asset_1.Asset.create({
                id: AssetId_1.AssetId.create('context-project-id').getValue(),
                label: 'Context Project',
                className: ClassName_1.ClassName.create('ems__Project').getValue(),
                ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                properties: {
                    status: 'active',
                    priority: 'high'
                }
            }).getValue();
            mockAssetRepository.findByClass.mockResolvedValue([...mockProjectAssets, projectFile]);
            mockAssetRepository.findByFilename.mockResolvedValue(projectFile);
            const request = {
                activeFile: 'context-project.md',
                focusId: 'focus-123',
                preferences: {
                    includeCompleted: false,
                    maxResults: 5,
                    selectionStrategy: 'context'
                }
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_a = result.currentProject) === null || _a === void 0 ? void 0 : _a.id).toBe('context-project-id');
            expect(result.availableProjects).toHaveLength(3); // Excludes completed
            expect(result.context.confidence).toBe(0.8);
            expect(result.context.reasoning).toContain('current file context');
        }));
        it('should handle empty result gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.findByClass.mockResolvedValue([]);
            const request = {
                activeFile: 'nonexistent.md',
                preferences: {
                    selectionStrategy: 'priority',
                    maxResults: 10,
                    includeCompleted: true
                }
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toEqual([]);
            expect(result.currentProject).toBeUndefined();
            expect(result.context.reasoning).toBe('No suitable project found');
        }));
    });
    describe('Edge Cases', () => {
        beforeEach(() => {
            mockAssetRepository.findByClass.mockResolvedValue(mockProjectAssets);
        });
        it('should handle null/undefined request properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                activeFile: undefined,
                focusId: null,
                preferences: undefined
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.context.strategy).toBe('context');
        }));
        it('should handle empty string activeFile', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const request = {
                activeFile: ''
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect((_a = result.currentProject) === null || _a === void 0 ? void 0 : _a.title).toBe('Active Project');
        }));
        it('should handle very large maxResults', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                preferences: { maxResults: 1000 }
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects.length).toBeLessThanOrEqual(2); // Only 2 active projects
        }));
        it('should handle zero maxResults', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                preferences: { maxResults: 0 }
            };
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toEqual([]);
        }));
        it('should handle projects with malformed dates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const malformedProject = Asset_1.Asset.create({
                id: AssetId_1.AssetId.create('malformed-id').getValue(),
                label: 'Malformed Project',
                className: ClassName_1.ClassName.create('ems__Project').getValue(),
                ontology: OntologyPrefix_1.OntologyPrefix.create('ems').getValue(),
                properties: {
                    status: 'active',
                    updatedAt: 'invalid-date'
                }
            }).getValue();
            mockAssetRepository.findByClass.mockResolvedValue([malformedProject]);
            const request = {};
            const result = yield useCase.execute(request);
            expect(result.success).toBe(true);
            expect(result.availableProjects).toHaveLength(1);
            expect(result.availableProjects[0].lastUpdated).toBe('invalid-date'); // Implementation uses original value
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9hcHBsaWNhdGlvbi91c2UtY2FzZXMvR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkdBQTBHO0FBSTFHLGlFQUE4RDtBQUM5RCwwRUFBdUU7QUFDdkUsOEVBQTJFO0FBQzNFLHdGQUFxRjtBQUlyRixpQ0FBaUM7QUFDakMsTUFBTSxtQkFBbUIsR0FBa0M7SUFDekQsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNuQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNsQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNqQixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUN0QixXQUFXLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUN0QixjQUFjLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUN6QixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNsQixDQUFDO0FBRUYsTUFBTSxnQkFBZ0IsR0FBaUM7SUFDckQsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDMUIsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDckIsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7SUFDMUIsZUFBZSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDcEIsQ0FBQztBQUVULE1BQU0sU0FBUyxHQUE4QjtJQUMzQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtJQUNkLE1BQU0sRUFBRSxJ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Q0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pELFVBQVUsRUFBRTtvQkFDVixNQUFNLEVBQUUsUUFBUTtvQkFDaEIsU0FBUyxFQUFFLGNBQWM7aUJBQzFCO2FBQ0YsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWQsbUJBQW1CLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1lBRXRFLE1BQU0sT0FBTyxHQUE2QixFQUFFLENBQUM7WUFDN0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7UUFDN0csQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9hcHBsaWNhdGlvbi91c2UtY2FzZXMvR2V0Q3VycmVudFByb2plY3RVc2VDYXNlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2V0Q3VycmVudFByb2plY3RVc2VDYXNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2FwcGxpY2F0aW9uL3VzZS1jYXNlcy9HZXRDdXJyZW50UHJvamVjdFVzZUNhc2UnO1xuaW1wb3J0IHsgSUFzc2V0UmVwb3NpdG9yeSB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9kb21haW4vcmVwb3NpdG9yaWVzL0lBc3NldFJlcG9zaXRvcnknO1xuaW1wb3J0IHsgRXhvRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2FwcGxpY2F0aW9uL3NlcnZpY2VzL0V4b0ZvY3VzU2VydmljZSc7XG5pbXBvcnQgeyBJbmRleGVkR3JhcGggfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvZG9tYWluL3NlbWFudGljL2NvcmUvSW5kZXhlZEdyYXBoJztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi9lbnRpdGllcy9Bc3NldCc7XG5pbXBvcnQgeyBBc3NldElkIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL0Fzc2V0SWQnO1xuaW1wb3J0IHsgQ2xhc3NOYW1lIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL0NsYXNzTmFtZSc7XG5pbXBvcnQgeyBPbnRvbG9neVByZWZpeCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9kb21haW4vdmFsdWUtb2JqZWN0cy9PbnRvbG9neVByZWZpeCc7XG5pbXBvcnQgeyBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QsIEdldEN1cnJlbnRQcm9qZWN0UmVzcG9uc2UgfSBmcm9tICcuLi8uLi8uLi8uLi9zcmMvYXBwbGljYXRpb24vZHRvcy9DcmVhdGVUYXNrUmVxdWVzdCc7XG5pbXBvcnQgeyBUcmlwbGUsIElSSSwgTGl0ZXJhbCB9IGZyb20gJy4uLy4uLy4uLy4uL3NyYy9kb21haW4vc2VtYW50aWMvY29yZS9UcmlwbGUnO1xuXG4vLyBNb2NrIHJlcG9zaXRvcmllcyBhbmQgc2VydmljZXNcbmNvbnN0IG1vY2tBc3NldFJlcG9zaXRvcnk6IGplc3QuTW9ja2VkPElBc3NldFJlcG9zaXRvcnk+ID0ge1xuICBzYXZlOiBqZXN0LmZuKCksXG4gIGZpbmRCeUlkOiBqZXN0LmZuKCksXG4gIGZpbmRBbGw6IGplc3QuZm4oKSxcbiAgZGVsZXRlOiBqZXN0LmZuKCksXG4gIGZpbmRCeUNsYXNzOiBqZXN0LmZuKCksXG4gIGZpbmRCeVRpdGxlOiBqZXN0LmZuKCksXG4gIGZpbmRCeUZpbGVuYW1lOiBqZXN0LmZuKCksXG4gIHVwZGF0ZTogamVzdC5mbigpLFxuICBleGlzdHM6IGplc3QuZm4oKSxcbiAgc2VhcmNoOiBqZXN0LmZuKClcbn07XG5cbmNvbnN0IG1vY2tGb2N1c1NlcnZpY2U6IGplc3QuTW9ja2VkPEV4b0ZvY3VzU2VydmljZT4gPSB7XG4gIGdldEN1cnJlbnRGb2N1czogamVzdC5mbigpLFxuICBzZXRGb2N1czogamVzdC5mbigpLFxuICBjbGVhckZvY3VzOiBqZXN0LmZuKCksXG4gIGdldEZvY3VzSGlzdG9yeTogamVzdC5mbigpLFxuICBnZXRGb2N1c0NvbnRleHQ6IGplc3QuZm4oKVxufSBhcyBhbnk7XG5cbmNvbnN0IG1vY2tHcmFwaDogamVzdC5Nb2NrZWQ8SW5kZXhlZEdyYXBoPiA9IHtcbiAgYWRkOiBqZXN0LmZuKCksXG4gIHJlbW92ZTogamVzdC5mbigpLFxuICBxdWVyeTogamVzdC5mbigpLFxuICBnZXRUcmlwbGVzOiBqZXN0LmZuKCksXG4gIHNpemU6IGplc3QuZm4oKSxcbiAgY2xlYXI6IGplc3QuZm4oKSxcbiAgaGFzOiBqZXN0LmZuKCksXG4gIGdldFN1YmplY3RzOiBqZXN0LmZuKCksXG4gIGdldFByZWRpY2F0ZXM6IGplc3QuZm4oKSxcbiAgZ2V0T2JqZWN0czogamVzdC5mbigpLFxuICBzZXJpYWxpemU6IGplc3QuZm4oKSxcbiAgZGVzZXJpYWxpemU6IGplc3QuZm4oKVxufTtcblxuZGVzY3JpYmUoJ0dldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZScsICgpID0+IHtcbiAgbGV0IHVzZUNhc2U6IEdldEN1cnJlbnRQcm9qZWN0VXNlQ2FzZTtcbiAgbGV0IG1vY2tQcm9qZWN0QXNzZXRzOiBBc3NldFtdO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIFxuICAgIHVzZUNhc2UgPSBuZXcgR2V0Q3VycmVudFByb2plY3RVc2VDYXNlKFxuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeSxcbiAgICAgIG1vY2tGb2N1c1NlcnZpY2UsXG4gICAgICBtb2NrR3JhcGhcbiAgICApO1xuXG4gICAgLy8gQ3JlYXRlIG1vY2sgcHJvamVjdCBhc3NldHNcbiAgICBjb25zdCBhY3RpdmVQcm9qZWN0ID0gQXNzZXQuY3JlYXRlKHtcbiAgICAgIGlkOiBBc3NldElkLmNyZWF0ZSgnYWN0aXZlLXByb2plY3QtaWQnKS5nZXRWYWx1ZSgpLFxuICAgICAgbGFiZWw6ICdBY3RpdmUgUHJvamVjdCcsXG4gICAgICBjbGFzc05hbWU6IENsYXNzTmFtZS5jcmVhdGUoJ2Vtc19fUHJvamVjdCcpLmdldFZhbHVlKCksXG4gICAgICBvbnRvbG9neTogT250b2xvZ3lQcmVmaXguY3JlYXRlKCdlbXMnKS5nZXRWYWx1ZSgpLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0N1cnJlbnQgYWN0aXZlIHByb2plY3QnLFxuICAgICAgICB1cGRhdGVkQXQ6ICcyMDI0LTAxLTE1VDAwOjAwOjAwWidcbiAgICAgIH1cbiAgICB9KS5nZXRWYWx1ZSgpO1xuXG4gICAgY29uc3QgcmVjZW50UHJvamVjdCA9IEFzc2V0LmNyZWF0ZSh7XG4gICAgICBpZDogQXNzZXRJZC5jcmVhdGUoJ3JlY2VudC1wcm9qZWN0LWlkJykuZ2V0VmFsdWUoKSxcbiAgICAgIGxhYmVsOiAnUmVjZW50IFByb2plY3QnLFxuICAgICAgY2xhc3NOYW1lOiBDbGFzc05hbWUuY3JlYXRlKCdlbXNfX1Byb2plY3QnKS5nZXRWYWx1ZSgpLFxuICAgICAgb250b2xvZ3k6IE9udG9sb2d5UHJlZml4LmNyZWF0ZSgnZW1zJykuZ2V0VmFsdWUoKSxcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY2VudGx5IHVwZGF0ZWQgcHJvamVjdCcsXG4gICAgICAgIHVwZGF0ZWRBdDogJzIwMjQtMDEtMTBUMDA6MDA6MDBaJ1xuICAgICAgfVxuICAgIH0pLmdldFZhbHVlKCk7XG5cbiAgICBjb25zdCBjb21wbGV0ZWRQcm9qZWN0ID0gQXNzZXQuY3JlYXRlKHtcbiAgICAgIGlkOiBBc3NldElkLmNyZWF0ZSgnY29tcGxldGVkLXByb2plY3QtaWQnKS5nZXRWYWx1ZSgpLFxuICAgICAgbGFiZWw6ICdDb21wbGV0ZWQgUHJvamVjdCcsXG4gICAgICBjbGFzc05hbWU6IENsYXNzTmFtZS5jcmVhdGUoJ2Vtc19fUHJvamVjdCcpLmdldFZhbHVlKCksXG4gICAgICBvbnRvbG9neTogT250b2xvZ3lQcmVmaXguY3JlYXRlKCdlbXMnKS5nZXRWYWx1ZSgpLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgICAgICBwcmlvcml0eTogJ2xvdycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ29tcGxldGVkIHByb2plY3QnLFxuICAgICAgICB1cGRhdGVkQXQ6ICcyMDI0LTAxLTAxVDAwOjAwOjAwWidcbiAgICAgIH1cbiAgICB9KS5nZXRWYWx1ZSgpO1xuXG4gICAgbW9ja1Byb2plY3RBc3NldHMgPSBbYWN0aXZlUHJvamVjdCwgcmVjZW50UHJvamVjdCwgY29tcGxldGVkUHJvamVjdF07XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCYXNpYyBGdW5jdGlvbmFsaXR5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHN1Y2Nlc3MgcmVzcG9uc2Ugd2l0aCBlbXB0eSBwcm9qZWN0cyB3aGVuIG5vIHByb2plY3RzIGV4aXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHt9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzKS50b0VxdWFsKFtdKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3QpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5zdHJhdGVneSkudG9CZSgnY29udGV4dCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYXZhaWxhYmxlIHByb2plY3RzIHNvcnRlZCBieSBhY3Rpdml0eSBhbmQgZGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RBc3NldHMpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7fTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmFpbGFibGVQcm9qZWN0cykudG9IYXZlTGVuZ3RoKDIpOyAvLyBFeGNsdWRlcyBjb21wbGV0ZWQgYnkgZGVmYXVsdFxuICAgICAgZXhwZWN0KHJlc3VsdC5hdmFpbGFibGVQcm9qZWN0c1swXS50aXRsZSkudG9CZSgnQWN0aXZlIFByb2plY3QnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZhaWxhYmxlUHJvamVjdHNbMV0udGl0bGUpLnRvQmUoJ1JlY2VudCBQcm9qZWN0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluY2x1ZGUgY29tcGxldGVkIHByb2plY3RzIHdoZW4gcmVxdWVzdGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUHJvamVjdEFzc2V0cyk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgcHJlZmVyZW5jZXM6IHtcbiAgICAgICAgICBpbmNsdWRlQ29tcGxldGVkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZhaWxhYmxlUHJvamVjdHMpLnRvSGF2ZUxlbmd0aCgzKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZhaWxhYmxlUHJvamVjdHMuc29tZShwID0+IHAuc3RhdHVzID09PSAnY29tcGxldGVkJykpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxpbWl0IHJlc3VsdHMgd2hlbiBtYXhSZXN1bHRzIGlzIHNwZWNpZmllZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RBc3NldHMpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgICAgbWF4UmVzdWx0czogMVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzWzBdLnRpdGxlKS50b0JlKCdBY3RpdmUgUHJvamVjdCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcmVwb3NpdG9yeSBlcnJvcnMgd2l0aCBjb25zb2xlIHdhcm5pbmcgYW5kIGVtcHR5IHJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUNsYXNzLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignUmVwb3NpdG9yeSBlcnJvcicpKTtcblxuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge307XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTsgLy8gTWV0aG9kIHN0aWxsIHN1Y2NlZWRzIGJ1dCByZXR1cm5zIGVtcHR5XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzKS50b0VxdWFsKFtdKTtcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRmFpbGVkIHRvIGdldCBhdmFpbGFibGUgcHJvamVjdHM6JywgZXhwZWN0LmFueShFcnJvcikpO1xuXG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdTZWxlY3Rpb24gU3RyYXRlZ2llcycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RBc3NldHMpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ0NvbnRleHQgU3RyYXRlZ3knLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGRldGVjdCBwcm9qZWN0IGZyb20gY3VycmVudCBmaWxlIHdoZW4gZmlsZSBpcyBhIHByb2plY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3RBc3NldCA9IG1vY2tQcm9qZWN0QXNzZXRzWzBdO1xuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKHByb2plY3RBc3NldCk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICAgIGFjdGl2ZUZpbGU6ICdhY3RpdmUtcHJvamVjdC5tZCcsXG4gICAgICAgICAgcHJlZmVyZW5jZXM6IHsgc2VsZWN0aW9uU3RyYXRlZ3k6ICdjb250ZXh0JyB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3Q/LnRpdGxlKS50b0JlKCdBY3RpdmUgUHJvamVjdCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQuY29uZmlkZW5jZSkudG9CZSgwLjgpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQucmVhc29uaW5nKS50b0NvbnRhaW4oJ2N1cnJlbnQgZmlsZSBjb250ZXh0Jyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBkZXRlY3QgcHJvamVjdCBmcm9tIGFzc2V0IHByb3BlcnRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tBc3NldCA9IEFzc2V0LmNyZWF0ZSh7XG4gICAgICAgICAgaWQ6IEFzc2V0SWQuY3JlYXRlKCd0YXNrLWlkJykuZ2V0VmFsdWUoKSxcbiAgICAgICAgICBsYWJlbDogJ1Rhc2sgQXNzZXQnLFxuICAgICAgICAgIGNsYXNzTmFtZTogQ2xhc3NOYW1lLmNyZWF0ZSgnZW1zX19UYXNrJykuZ2V0VmFsdWUoKSxcbiAgICAgICAgICBvbnRvbG9neTogT250b2xvZ3lQcmVmaXguY3JlYXRlKCdlbXMnKS5nZXRWYWx1ZSgpLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHByb2plY3RJZDogJ2FjdGl2ZS1wcm9qZWN0LWlkJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuZ2V0VmFsdWUoKTtcblxuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKHRhc2tBc3NldCk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICAgIGFjdGl2ZUZpbGU6ICd0YXNrLm1kJyxcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ2NvbnRleHQnIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdD8uaWQpLnRvQmUoJ2FjdGl2ZS1wcm9qZWN0LWlkJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBkZXRlY3QgcHJvamVjdCBmcm9tIGV4b19fRWZmb3J0X3BhcmVudCBwcm9wZXJ0eScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0Fzc2V0ID0gQXNzZXQuY3JlYXRlKHtcbiAgICAgICAgICBpZDogQXNzZXRJZC5jcmVhdGUoJ3Rhc2staWQnKS5nZXRWYWx1ZSgpLFxuICAgICAgICAgIGxhYmVsOiAnVGFzayBBc3NldCcsXG4gICAgICAgICAgY2xhc3NOYW1lOiBDbGFzc05hbWUuY3JlYXRlKCdlbXNfX1Rhc2snKS5nZXRWYWx1ZSgpLFxuICAgICAgICAgIG9udG9sb2d5OiBPbnRvbG9neVByZWZpeC5jcmVhdGUoJ2VtcycpLmdldFZhbHVlKCksXG4gICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgZXhvX19FZmZvcnRfcGFyZW50OiAnW1tyZWNlbnQtcHJvamVjdC1pZF1dJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuZ2V0VmFsdWUoKTtcblxuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKHRhc2tBc3NldCk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICAgIGFjdGl2ZUZpbGU6ICd0YXNrLm1kJyxcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ2NvbnRleHQnIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdD8uaWQpLnRvQmUoJ3JlY2VudC1wcm9qZWN0LWlkJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCB1c2UgUkRGIGdyYXBoIGZvciBwcm9qZWN0IHJlbGF0aW9uc2hpcHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5RmlsZW5hbWUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1vY2tUcmlwbGUgPSB7XG4gICAgICAgICAgZ2V0T2JqZWN0OiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHsgdG9TdHJpbmc6ICgpID0+ICdhY3RpdmUtcHJvamVjdC1pZCcgfSlcbiAgICAgICAgfTtcbiAgICAgICAgbW9ja0dyYXBoLnF1ZXJ5Lm1vY2tSZXR1cm5WYWx1ZShbbW9ja1RyaXBsZSBhcyBhbnldKTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgICAgYWN0aXZlRmlsZTogJ3NvbWUtZmlsZS5tZCcsXG4gICAgICAgICAgcHJlZmVyZW5jZXM6IHsgc2VsZWN0aW9uU3RyYXRlZ3k6ICdjb250ZXh0JyB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3Q/LmlkKS50b0JlKCdhY3RpdmUtcHJvamVjdC1pZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgdXNlIHJldmVyc2UgUkRGIHJlbGF0aW9uc2hpcHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5RmlsZW5hbWUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgbW9ja0dyYXBoLnF1ZXJ5Lm1vY2tSZXR1cm5WYWx1ZU9uY2UoW10pOyAvLyBObyBkaXJlY3QgcmVsYXRpb25zaGlwc1xuXG4gICAgICAgIGNvbnN0IG1vY2tUcmlwbGUgPSB7XG4gICAgICAgICAgZ2V0U3ViamVjdDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7IHRvU3RyaW5nOiAoKSA9PiAncmVjZW50LXByb2plY3QtaWQnIH0pXG4gICAgICAgIH07XG4gICAgICAgIG1vY2tHcmFwaC5xdWVyeS5tb2NrUmV0dXJuVmFsdWVPbmNlKFttb2NrVHJpcGxlIGFzIGFueV0pOyAvLyBSZXZlcnNlIHJlbGF0aW9uc2hpcFxuXG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBhY3RpdmVGaWxlOiAnc29tZS1maWxlLm1kJyxcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ2NvbnRleHQnIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdD8uaWQpLnRvQmUoJ3JlY2VudC1wcm9qZWN0LWlkJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBmYWxsIGJhY2sgdG8gcmVjZW50IGFjdGl2aXR5IHdoZW4gbm8gY29udGV4dCBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlGaWxlbmFtZS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgICBtb2NrR3JhcGgucXVlcnkubW9ja1JldHVyblZhbHVlKFtdKTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgICAgYWN0aXZlRmlsZTogJ3VucmVsYXRlZC1maWxlLm1kJyxcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ2NvbnRleHQnIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdD8udGl0bGUpLnRvQmUoJ0FjdGl2ZSBQcm9qZWN0Jyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5jb25maWRlbmNlKS50b0JlKDAuOCk7IC8vIEZpbGUgY29udGV4dCBjb25maWRlbmNlLCBub3QgZmFsbGJhY2tcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jb250ZXh0LnJlYXNvbmluZykudG9Db250YWluKCdjdXJyZW50IGZpbGUgY29udGV4dCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGdyYXBoIHF1ZXJ5IGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICAgIG1vY2tHcmFwaC5xdWVyeS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignR3JhcGggZXJyb3InKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgICAgYWN0aXZlRmlsZTogJ3Rlc3QubWQnLFxuICAgICAgICAgIHByZWZlcmVuY2VzOiB7IHNlbGVjdGlvblN0cmF0ZWd5OiAnY29udGV4dCcgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICAgJ0dyYXBoLWJhc2VkIHByb2plY3QgZGV0ZWN0aW9uIGZhaWxlZDonLFxuICAgICAgICAgIGV4cGVjdC5hbnkoRXJyb3IpXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnUmVjZW50IFN0cmF0ZWd5JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBzZWxlY3QgbW9zdCByZWNlbnRseSB1cGRhdGVkIGFjdGl2ZSBwcm9qZWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgICAgcHJlZmVyZW5jZXM6IHsgc2VsZWN0aW9uU3RyYXRlZ3k6ICdyZWNlbnQnIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdD8udGl0bGUpLnRvQmUoJ0FjdGl2ZSBQcm9qZWN0Jyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5zdHJhdGVneSkudG9CZSgncmVjZW50Jyk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5jb25maWRlbmNlKS50b0JlKDAuNik7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5yZWFzb25pbmcpLnRvQmUoJ1NlbGVjdGVkIG1vc3QgcmVjZW50bHkgdXBkYXRlZCBhY3RpdmUgcHJvamVjdCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIG5vIGFjdGl2ZSBwcm9qZWN0cyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBjb21wbGV0ZWRPbmx5ID0gW21vY2tQcm9qZWN0QXNzZXRzWzJdXTsgLy8gT25seSBjb21wbGV0ZWQgcHJvamVjdFxuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUNsYXNzLm1vY2tSZXNvbHZlZFZhbHVlKGNvbXBsZXRlZE9ubHkpO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ3JlY2VudCcgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnRQcm9qZWN0KS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdBY3RpdmUgU3RyYXRlZ3knLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIHNlbGVjdCBmaXJzdCBhY3RpdmUgcHJvamVjdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICAgIHByZWZlcmVuY2VzOiB7IHNlbGVjdGlvblN0cmF0ZWd5OiAnYWN0aXZlJyB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3Q/LnRpdGxlKS50b0JlKCdBY3RpdmUgUHJvamVjdCcpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQuc3RyYXRlZ3kpLnRvQmUoJ2FjdGl2ZScpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQuY29uZmlkZW5jZSkudG9CZSgwLjUpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQucmVhc29uaW5nKS50b0JlKCdTZWxlY3RlZCBmaXJzdCBhY3RpdmUgcHJvamVjdCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCB3aGVuIG5vIGFjdGl2ZSBwcm9qZWN0cyBleGlzdCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgY29tcGxldGVkT25seSA9IFttb2NrUHJvamVjdEFzc2V0c1syXV07IC8vIE9ubHkgY29tcGxldGVkIHByb2plY3RcbiAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShjb21wbGV0ZWRPbmx5KTtcblxuICAgICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgICAgcHJlZmVyZW5jZXM6IHsgc2VsZWN0aW9uU3RyYXRlZ3k6ICdhY3RpdmUnIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQucmVhc29uaW5nKS50b0JlKCdObyBzdWl0YWJsZSBwcm9qZWN0IGZvdW5kJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdQcmlvcml0eSBTdHJhdGVneScsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgc2VsZWN0IGhpZ2hlc3QgcHJpb3JpdHkgYWN0aXZlIHByb2plY3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ3ByaW9yaXR5JyB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3Q/LnRpdGxlKS50b0JlKCdBY3RpdmUgUHJvamVjdCcpOyAvLyBIYXMgJ2hpZ2gnIHByaW9yaXR5XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5zdHJhdGVneSkudG9CZSgncHJpb3JpdHknKTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jb250ZXh0LmNvbmZpZGVuY2UpLnRvQmUoMC43KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdC5jb250ZXh0LnJlYXNvbmluZykudG9CZSgnU2VsZWN0ZWQgaGlnaGVzdCBwcmlvcml0eSBhY3RpdmUgcHJvamVjdCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIHByb2plY3RzIHdpdGggbm8gcHJpb3JpdHkgc2V0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBub1ByaW9yaXR5UHJvamVjdCA9IEFzc2V0LmNyZWF0ZSh7XG4gICAgICAgICAgaWQ6IEFzc2V0SWQuY3JlYXRlKCduby1wcmlvcml0eS1pZCcpLmdldFZhbHVlKCksXG4gICAgICAgICAgbGFiZWw6ICdObyBQcmlvcml0eSBQcm9qZWN0JyxcbiAgICAgICAgICBjbGFzc05hbWU6IENsYXNzTmFtZS5jcmVhdGUoJ2Vtc19fUHJvamVjdCcpLmdldFZhbHVlKCksXG4gICAgICAgICAgb250b2xvZ3k6IE9udG9sb2d5UHJlZml4LmNyZWF0ZSgnZW1zJykuZ2V0VmFsdWUoKSxcbiAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICBzdGF0dXM6ICdhY3RpdmUnXG4gICAgICAgICAgICAvLyBObyBwcmlvcml0eSBwcm9wZXJ0eVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuZ2V0VmFsdWUoKTtcblxuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUNsYXNzLm1vY2tSZXNvbHZlZFZhbHVlKFtub1ByaW9yaXR5UHJvamVjdF0pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ3ByaW9yaXR5JyB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3Q/LnByaW9yaXR5KS50b0JlKCdtZWRpdW0nKTsgLy8gRGVmYXVsdCBwcmlvcml0eVxuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgc29ydCBieSBwcmlvcml0eSBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVyZ2VudFByb2plY3QgPSBBc3NldC5jcmVhdGUoe1xuICAgICAgICAgIGlkOiBBc3NldElkLmNyZWF0ZSgndXJnZW50LXByb2plY3QtaWQnKS5nZXRWYWx1ZSgpLFxuICAgICAgICAgIGxhYmVsOiAnVXJnZW50IFByb2plY3QnLFxuICAgICAgICAgIGNsYXNzTmFtZTogQ2xhc3NOYW1lLmNyZWF0ZSgnZW1zX19Qcm9qZWN0JykuZ2V0VmFsdWUoKSxcbiAgICAgICAgICBvbnRvbG9neTogT250b2xvZ3lQcmVmaXguY3JlYXRlKCdlbXMnKS5nZXRWYWx1ZSgpLFxuICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICAgICAgICBwcmlvcml0eTogJ3VyZ2VudCdcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmdldFZhbHVlKCk7XG5cbiAgICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShbXG4gICAgICAgICAgbW9ja1Byb2plY3RBc3NldHNbMF0sIC8vIGhpZ2ggcHJpb3JpdHlcbiAgICAgICAgICB1cmdlbnRQcm9qZWN0LCAvLyB1cmdlbnQgcHJpb3JpdHlcbiAgICAgICAgICBtb2NrUHJvamVjdEFzc2V0c1sxXSAgLy8gbWVkaXVtIHByaW9yaXR5XG4gICAgICAgIF0pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ3ByaW9yaXR5JyB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY3VycmVudFByb2plY3Q/LnRpdGxlKS50b0JlKCdVcmdlbnQgUHJvamVjdCcpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnRGVmYXVsdCBTdHJhdGVneSBIYW5kbGluZycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgZGVmYXVsdCB0byBjb250ZXh0IHN0cmF0ZWd5IHdoZW4gdW5zcGVjaWZpZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5RmlsZW5hbWUubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICAgICAgbW9ja0dyYXBoLnF1ZXJ5Lm1vY2tSZXR1cm5WYWx1ZShbXSk7XG5cbiAgICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge307XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5zdHJhdGVneSkudG9CZSgnY29udGV4dCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgZGVmYXVsdCB0byBjb250ZXh0IHN0cmF0ZWd5IGZvciBpbnZhbGlkIHN0cmF0ZWd5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICAgIG1vY2tHcmFwaC5xdWVyeS5tb2NrUmV0dXJuVmFsdWUoW10pO1xuXG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBwcmVmZXJlbmNlczogeyBzZWxlY3Rpb25TdHJhdGVneTogJ2ludmFsaWQnIGFzIGFueSB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5zdHJhdGVneSkudG9CZSgnaW52YWxpZCcpOyAvLyBTdHJhdGVneSBpcyBwcmVzZXJ2ZWQgZXZlbiBpZiBpbnZhbGlkXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbnRleHQgSW5mb3JtYXRpb24gQnVpbGRpbmcnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUNsYXNzLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0QXNzZXRzKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYnVpbGQgY29udGV4dCB3aXRoIGhpZ2ggY29uZmlkZW5jZSBmb3IgZmlsZS1iYXNlZCBkZXRlY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0QXNzZXRzWzBdKTtcblxuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICBhY3RpdmVGaWxlOiAncHJvamVjdC5tZCdcbiAgICAgIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5zdHJhdGVneSkudG9CZSgnY29udGV4dCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jb250ZXh0LmNvbmZpZGVuY2UpLnRvQmUoMC44KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5yZWFzb25pbmcpLnRvQ29udGFpbignY3VycmVudCBmaWxlIGNvbnRleHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYnVpbGQgY29udGV4dCB3aXRoIGxvdyBjb25maWRlbmNlIGZvciBmYWxsYmFjayBkZXRlY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUZpbGVuYW1lLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICBtb2NrR3JhcGgucXVlcnkubW9ja1JldHVyblZhbHVlKFtdKTtcblxuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge307XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5jb25maWRlbmNlKS50b0JlKDAuMyk7XG4gICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQucmVhc29uaW5nKS50b0JlKCdVc2VkIG1vc3QgcmVjZW50IGFjdGl2ZSBwcm9qZWN0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBubyBwcm9qZWN0IGZvdW5kJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHt9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQucmVhc29uaW5nKS50b0JlKCdObyBzdWl0YWJsZSBwcm9qZWN0IGZvdW5kJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQuY29uZmlkZW5jZSkudG9CZSgwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Fzc2V0IENvbnZlcnNpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb252ZXJ0IEFzc2V0IHRvIHByb2plY3QgcmVzcG9uc2UgZm9ybWF0IGNvcnJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MubW9ja1Jlc29sdmVkVmFsdWUoW21vY2tQcm9qZWN0QXNzZXRzWzBdXSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHt9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBjb25zdCBwcm9qZWN0ID0gcmVzdWx0LmF2YWlsYWJsZVByb2plY3RzWzBdO1xuICAgICAgZXhwZWN0KHByb2plY3QpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICBpZDogJ2FjdGl2ZS1wcm9qZWN0LWlkJyxcbiAgICAgICAgdGl0bGU6ICdBY3RpdmUgUHJvamVjdCcsXG4gICAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICAgIHByaW9yaXR5OiAnaGlnaCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ3VycmVudCBhY3RpdmUgcHJvamVjdCcsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICBsYXN0VXBkYXRlZDogJzIwMjQtMDEtMTVUMDA6MDA6MDBaJ1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBhc3NldHMgd2l0aCBtaXNzaW5nIHByb3BlcnRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtaW5pbWFsUHJvamVjdCA9IEFzc2V0LmNyZWF0ZSh7XG4gICAgICAgIGlkOiBBc3NldElkLmNyZWF0ZSgnbWluaW1hbC1pZCcpLmdldFZhbHVlKCksXG4gICAgICAgIGxhYmVsOiAnTWluaW1hbCBQcm9qZWN0JyxcbiAgICAgICAgY2xhc3NOYW1lOiBDbGFzc05hbWUuY3JlYXRlKCdlbXNfX1Byb2plY3QnKS5nZXRWYWx1ZSgpLFxuICAgICAgICBvbnRvbG9neTogT250b2xvZ3lQcmVmaXguY3JlYXRlKCdlbXMnKS5nZXRWYWx1ZSgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7fVxuICAgICAgfSkuZ2V0VmFsdWUoKTtcblxuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShbbWluaW1hbFByb2plY3RdKTtcblxuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge307XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGNvbnN0IHByb2plY3QgPSByZXN1bHQuYXZhaWxhYmxlUHJvamVjdHNbMF07XG4gICAgICBleHBlY3QocHJvamVjdC5zdGF0dXMpLnRvQmUoJ2FjdGl2ZScpOyAvLyBEZWZhdWx0XG4gICAgICBleHBlY3QocHJvamVjdC5wcmlvcml0eSkudG9CZSgnbWVkaXVtJyk7IC8vIERlZmF1bHRcbiAgICAgIGV4cGVjdChwcm9qZWN0LmlzQWN0aXZlKS50b0JlKGZhbHNlKTsgLy8gRmFsc2UgYmVjYXVzZSBnZXRQcm9wZXJ0eSgnc3RhdHVzJykgcmV0dXJucyB1bmRlZmluZWQsIG5vdCAnYWN0aXZlJ1xuICAgICAgZXhwZWN0KHByb2plY3QubGFzdFVwZGF0ZWQpLnRvTWF0Y2goL15cXGR7NH0tXFxkezJ9LVxcZHsyfVRcXGR7Mn06XFxkezJ9OlxcZHsyfS8pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRXJyb3IgSGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXNzZXQgcmVwb3NpdG9yeSBmaW5kQnlDbGFzcyBmYWlsdXJlIGluIGdldEF2YWlsYWJsZVByb2plY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0RhdGFiYXNlIGVycm9yJykpO1xuXG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnd2FybicpLm1vY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7fTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpOyAvLyBnZXRBdmFpbGFibGVQcm9qZWN0cyBjYXRjaGVzIHRoZSBlcnJvclxuICAgICAgZXhwZWN0KHJlc3VsdC5hdmFpbGFibGVQcm9qZWN0cykudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ0ZhaWxlZCB0byBnZXQgYXZhaWxhYmxlIHByb2plY3RzOicsIGV4cGVjdC5hbnkoRXJyb3IpKTtcblxuICAgICAgY29uc29sZVNweS5tb2NrUmVzdG9yZSgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXNzZXQgcmVwb3NpdG9yeSBmaW5kQnlGaWxlbmFtZSBmYWlsdXJlIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUNsYXNzLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tQcm9qZWN0QXNzZXRzKTtcbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5RmlsZW5hbWUubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdGaWxlIG5vdCBmb3VuZCcpKTtcblxuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ3dhcm4nKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICBhY3RpdmVGaWxlOiAndGVzdC5tZCdcbiAgICAgIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0NvbnRleHQtYmFzZWQgcHJvamVjdCBkZXRlY3Rpb24gZmFpbGVkOicsXG4gICAgICAgIGV4cGVjdC5hbnkoRXJyb3IpXG4gICAgICApO1xuXG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBDbGFzc05hbWUgY3JlYXRpb24gZmFpbHVyZSBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBDbGFzc05hbWUuY3JlYXRlIHRvIGZhaWxcbiAgICAgIGplc3Quc3B5T24oQ2xhc3NOYW1lLCAnY3JlYXRlJykubW9ja1JldHVyblZhbHVlKHtcbiAgICAgICAgaXNGYWlsdXJlOiB0cnVlLFxuICAgICAgICBpc1N1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogJ0ludmFsaWQgY2xhc3MgbmFtZScsXG4gICAgICAgIGdldFZhbHVlOiAoKSA9PiB7IHRocm93IG5ldyBFcnJvcignTm8gdmFsdWUnKTsgfVxuICAgICAgfSBhcyBhbnkpO1xuXG4gICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7fTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmFpbGFibGVQcm9qZWN0cykudG9FcXVhbChbXSk7XG5cbiAgICAgIC8vIFJlc3RvcmUgdGhlIG1vY2tcbiAgICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbnRlZ3JhdGlvbiBTY2VuYXJpb3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29tcGxldGUgd29ya2Zsb3cgd2l0aCBjb250ZXh0IGZpbGUgYW5kIHByb2plY3QgZGV0ZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcHJvamVjdEZpbGUgPSBBc3NldC5jcmVhdGUoe1xuICAgICAgICBpZDogQXNzZXRJZC5jcmVhdGUoJ2NvbnRleHQtcHJvamVjdC1pZCcpLmdldFZhbHVlKCksXG4gICAgICAgIGxhYmVsOiAnQ29udGV4dCBQcm9qZWN0JyxcbiAgICAgICAgY2xhc3NOYW1lOiBDbGFzc05hbWUuY3JlYXRlKCdlbXNfX1Byb2plY3QnKS5nZXRWYWx1ZSgpLFxuICAgICAgICBvbnRvbG9neTogT250b2xvZ3lQcmVmaXguY3JlYXRlKCdlbXMnKS5nZXRWYWx1ZSgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnXG4gICAgICAgIH1cbiAgICAgIH0pLmdldFZhbHVlKCk7XG5cbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MubW9ja1Jlc29sdmVkVmFsdWUoWy4uLm1vY2tQcm9qZWN0QXNzZXRzLCBwcm9qZWN0RmlsZV0pO1xuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlGaWxlbmFtZS5tb2NrUmVzb2x2ZWRWYWx1ZShwcm9qZWN0RmlsZSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgYWN0aXZlRmlsZTogJ2NvbnRleHQtcHJvamVjdC5tZCcsXG4gICAgICAgIGZvY3VzSWQ6ICdmb2N1cy0xMjMnLFxuICAgICAgICBwcmVmZXJlbmNlczoge1xuICAgICAgICAgIGluY2x1ZGVDb21wbGV0ZWQ6IGZhbHNlLFxuICAgICAgICAgIG1heFJlc3VsdHM6IDUsXG4gICAgICAgICAgc2VsZWN0aW9uU3RyYXRlZ3k6ICdjb250ZXh0J1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnRQcm9qZWN0Py5pZCkudG9CZSgnY29udGV4dC1wcm9qZWN0LWlkJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzKS50b0hhdmVMZW5ndGgoMyk7IC8vIEV4Y2x1ZGVzIGNvbXBsZXRlZFxuICAgICAgZXhwZWN0KHJlc3VsdC5jb250ZXh0LmNvbmZpZGVuY2UpLnRvQmUoMC44KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuY29udGV4dC5yZWFzb25pbmcpLnRvQ29udGFpbignY3VycmVudCBmaWxlIGNvbnRleHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHJlc3VsdCBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Fzc2V0UmVwb3NpdG9yeS5maW5kQnlDbGFzcy5tb2NrUmVzb2x2ZWRWYWx1ZShbXSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgYWN0aXZlRmlsZTogJ25vbmV4aXN0ZW50Lm1kJyxcbiAgICAgICAgcHJlZmVyZW5jZXM6IHtcbiAgICAgICAgICBzZWxlY3Rpb25TdHJhdGVneTogJ3ByaW9yaXR5JyxcbiAgICAgICAgICBtYXhSZXN1bHRzOiAxMCxcbiAgICAgICAgICBpbmNsdWRlQ29tcGxldGVkOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB1c2VDYXNlLmV4ZWN1dGUocmVxdWVzdCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuYXZhaWxhYmxlUHJvamVjdHMpLnRvRXF1YWwoW10pO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdCkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jb250ZXh0LnJlYXNvbmluZykudG9CZSgnTm8gc3VpdGFibGUgcHJvamVjdCBmb3VuZCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIG1vY2tBc3NldFJlcG9zaXRvcnkuZmluZEJ5Q2xhc3MubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Byb2plY3RBc3NldHMpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbnVsbC91bmRlZmluZWQgcmVxdWVzdCBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICBhY3RpdmVGaWxlOiB1bmRlZmluZWQsXG4gICAgICAgIGZvY3VzSWQ6IG51bGwgYXMgYW55LFxuICAgICAgICBwcmVmZXJlbmNlczogdW5kZWZpbmVkXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmNvbnRleHQuc3RyYXRlZ3kpLnRvQmUoJ2NvbnRleHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHN0cmluZyBhY3RpdmVGaWxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVxdWVzdDogR2V0Q3VycmVudFByb2plY3RSZXF1ZXN0ID0ge1xuICAgICAgICBhY3RpdmVGaWxlOiAnJ1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50UHJvamVjdD8udGl0bGUpLnRvQmUoJ0FjdGl2ZSBQcm9qZWN0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB2ZXJ5IGxhcmdlIG1heFJlc3VsdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXF1ZXN0OiBHZXRDdXJyZW50UHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgIHByZWZlcmVuY2VzOiB7IG1heFJlc3VsdHM6IDEwMDAgfVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVzZUNhc2UuZXhlY3V0ZShyZXF1ZXN0KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5hdmFpbGFibGVQcm9qZWN0cy5sZW5ndGgpLnRvQmVMZXNzVGhhbk9yRXF1YWwoMik7IC8vIE9ubHkgMiBhY3RpdmUgcHJvamVjdHNcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHplcm8gbWF4UmVzdWx0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgcHJlZmVyZW5jZXM6IHsgbWF4UmVzdWx0czogMCB9XG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzKS50b0VxdWFsKFtdKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHByb2plY3RzIHdpdGggbWFsZm9ybWVkIGRhdGVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWFsZm9ybWVkUHJvamVjdCA9IEFzc2V0LmNyZWF0ZSh7XG4gICAgICAgIGlkOiBBc3NldElkLmNyZWF0ZSgnbWFsZm9ybWVkLWlkJykuZ2V0VmFsdWUoKSxcbiAgICAgICAgbGFiZWw6ICdNYWxmb3JtZWQgUHJvamVjdCcsXG4gICAgICAgIGNsYXNzTmFtZTogQ2xhc3NOYW1lLmNyZWF0ZSgnZW1zX19Qcm9qZWN0JykuZ2V0VmFsdWUoKSxcbiAgICAgICAgb250b2xvZ3k6IE9udG9sb2d5UHJlZml4LmNyZWF0ZSgnZW1zJykuZ2V0VmFsdWUoKSxcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgICAgICAgdXBkYXRlZEF0OiAnaW52YWxpZC1kYXRlJ1xuICAgICAgICB9XG4gICAgICB9KS5nZXRWYWx1ZSgpO1xuXG4gICAgICBtb2NrQXNzZXRSZXBvc2l0b3J5LmZpbmRCeUNsYXNzLm1vY2tSZXNvbHZlZFZhbHVlKFttYWxmb3JtZWRQcm9qZWN0XSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3Q6IEdldEN1cnJlbnRQcm9qZWN0UmVxdWVzdCA9IHt9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdXNlQ2FzZS5leGVjdXRlKHJlcXVlc3QpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QocmVzdWx0LmF2YWlsYWJsZVByb2plY3RzWzBdLmxhc3RVcGRhdGVkKS50b0JlKCdpbnZhbGlkLWRhdGUnKTsgLy8gSW1wbGVtZW50YXRpb24gdXNlcyBvcmlnaW5hbCB2YWx1ZVxuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==