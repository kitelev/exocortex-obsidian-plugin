347941244e1d2bda288d4a7697519b05
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandRegistry = void 0;
/**
 * Command Registry following Open/Closed Principle
 * Open for extension (new controllers), closed for modification
 */
class CommandRegistry {
    constructor(plugin) {
        this.plugin = plugin;
        this.controllers = [];
    }
    /**
     * Register a command controller
     */
    registerController(controller) {
        this.controllers.push(controller);
    }
    /**
     * Initialize all registered controllers
     */
    async initializeAll() {
        for (const controller of this.controllers) {
            try {
                await controller.registerCommands();
                console.log(`Initialized controller: ${controller.getControllerId()}`);
            }
            catch (error) {
                console.error(`Failed to initialize controller ${controller.getControllerId()}:`, error);
            }
        }
    }
    /**
     * Cleanup all registered controllers
     */
    async cleanupAll() {
        for (const controller of this.controllers) {
            try {
                await controller.cleanup();
                console.log(`Cleaned up controller: ${controller.getControllerId()}`);
            }
            catch (error) {
                console.error(`Failed to cleanup controller ${controller.getControllerId()}:`, error);
            }
        }
    }
    /**
     * Get all registered controllers
     */
    getControllers() {
        return this.controllers;
    }
}
exports.CommandRegistry = CommandRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9jb21tYW5kLWNvbnRyb2xsZXJzL0NvbW1hbmRSZWdpc3RyeS50cyIsIm1hcHBpbmdzIjoiOzs7QUFHQTs7O0dBR0c7QUFDSCxNQUFhLGVBQWU7SUFHMUIsWUFBNkIsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFGMUIsZ0JBQVcsR0FBeUIsRUFBRSxDQUFDO0lBRVYsQ0FBQztJQUUvQzs7T0FFRztJQUNILGtCQUFrQixDQUFDLFVBQThCO1FBQy9DLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxhQUFhO1FBQ2pCLEtBQUssTUFBTSxVQUFVLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN6QyxJQUFJO2dCQUNGLE1BQU0sVUFBVSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLFVBQVUsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDeEU7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxPQUFPLENBQUMsS0FBSyxDQUNYLG1DQUFtQyxVQUFVLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFDbEUsS0FBSyxDQUNOLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCxLQUFLLE1BQU0sVUFBVSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDekMsSUFBSTtnQkFDRixNQUFNLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsVUFBVSxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUN2RTtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLFVBQVUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUMvRCxLQUFLLENBQ04sQ0FBQzthQUNIO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7Q0FDRjtBQXBERCwwQ0FvREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9jb21tYW5kLWNvbnRyb2xsZXJzL0NvbW1hbmRSZWdpc3RyeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IElDb21tYW5kQ29udHJvbGxlciB9IGZyb20gXCIuLi8uLi9hcHBsaWNhdGlvbi9wb3J0cy9JQ29tbWFuZENvbnRyb2xsZXJcIjtcblxuLyoqXG4gKiBDb21tYW5kIFJlZ2lzdHJ5IGZvbGxvd2luZyBPcGVuL0Nsb3NlZCBQcmluY2lwbGVcbiAqIE9wZW4gZm9yIGV4dGVuc2lvbiAobmV3IGNvbnRyb2xsZXJzKSwgY2xvc2VkIGZvciBtb2RpZmljYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1hbmRSZWdpc3RyeSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbGxlcnM6IElDb21tYW5kQ29udHJvbGxlcltdID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwbHVnaW46IFBsdWdpbikge31cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBjb21tYW5kIGNvbnRyb2xsZXJcbiAgICovXG4gIHJlZ2lzdGVyQ29udHJvbGxlcihjb250cm9sbGVyOiBJQ29tbWFuZENvbnRyb2xsZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbnRyb2xsZXJzLnB1c2goY29udHJvbGxlcik7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBhbGwgcmVnaXN0ZXJlZCBjb250cm9sbGVyc1xuICAgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZUFsbCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBmb3IgKGNvbnN0IGNvbnRyb2xsZXIgb2YgdGhpcy5jb250cm9sbGVycykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY29udHJvbGxlci5yZWdpc3RlckNvbW1hbmRzKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBJbml0aWFsaXplZCBjb250cm9sbGVyOiAke2NvbnRyb2xsZXIuZ2V0Q29udHJvbGxlcklkKCl9YCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gaW5pdGlhbGl6ZSBjb250cm9sbGVyICR7Y29udHJvbGxlci5nZXRDb250cm9sbGVySWQoKX06YCxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW51cCBhbGwgcmVnaXN0ZXJlZCBjb250cm9sbGVyc1xuICAgKi9cbiAgYXN5bmMgY2xlYW51cEFsbCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBmb3IgKGNvbnN0IGNvbnRyb2xsZXIgb2YgdGhpcy5jb250cm9sbGVycykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY29udHJvbGxlci5jbGVhbnVwKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBDbGVhbmVkIHVwIGNvbnRyb2xsZXI6ICR7Y29udHJvbGxlci5nZXRDb250cm9sbGVySWQoKX1gKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgYEZhaWxlZCB0byBjbGVhbnVwIGNvbnRyb2xsZXIgJHtjb250cm9sbGVyLmdldENvbnRyb2xsZXJJZCgpfTpgLFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHJlZ2lzdGVyZWQgY29udHJvbGxlcnNcbiAgICovXG4gIGdldENvbnRyb2xsZXJzKCk6IHJlYWRvbmx5IElDb21tYW5kQ29udHJvbGxlcltdIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sbGVycztcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9