f5d4dd2613d6c0692dc463124f854dd7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.moment = exports.debounce = exports.requestUrl = exports.normalizePath = exports.FileManager = exports.MarkdownRenderer = exports.Component = exports.MetadataCache = exports.Workspace = exports.Vault = exports.App = exports.WorkspaceLeaf = exports.TFile = exports.MarkdownView = exports.Notice = exports.DropdownComponent = exports.ButtonComponent = exports.ToggleComponent = exports.TextAreaComponent = exports.TextComponent = exports.Setting = exports.PluginSettingTab = exports.Modal = exports.Plugin = void 0;
const tslib_1 = require("tslib");
// Setup DOM extensions
if (typeof document !== 'undefined') {
    const proto = HTMLElement.prototype;
    if (!proto.createEl) {
        proto.createEl = function (tag, options) {
            const el = document.createElement(tag);
            if (options === null || options === void 0 ? void 0 : options.text)
                el.textContent = options.text;
            if (options === null || options === void 0 ? void 0 : options.cls)
                el.className = options.cls;
            this.appendChild(el);
            return el;
        };
    }
    if (!proto.createDiv) {
        proto.createDiv = function (options) {
            const el = document.createElement('div');
            if (options === null || options === void 0 ? void 0 : options.cls)
                el.className = options.cls;
            this.appendChild(el);
            return el;
        };
    }
    if (!proto.empty) {
        proto.empty = function () {
            while (this.firstChild) {
                this.removeChild(this.firstChild);
            }
        };
    }
}
class Plugin {
    constructor(app, manifest) {
        this.app = app;
        this.manifest = manifest;
    }
    loadData() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return {};
        });
    }
    saveData(data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { });
    }
    addCommand(command) { }
    addRibbonIcon(icon, title, callback) {
        const el = document.createElement('div');
        el.addClass = jest.fn();
        return el;
    }
    addSettingTab(settingTab) { }
    registerEvent(event) { }
    registerInterval(interval) {
        return interval;
    }
    registerMarkdownCodeBlockProcessor(language, handler) {
        // Mock implementation for SPARQL processor registration
        // Store the handler for potential testing
        this.codeBlockProcessor = handler;
    }
    registerMarkdownPostProcessor(processor) {
        this.markdownPostProcessor = processor;
    }
    registerView(type, viewCreator) {
        this.registeredViews = this.registeredViews || {};
        this.registeredViews[type] = viewCreator;
    }
    addStatusBarItem() {
        return document.createElement('div');
    }
    onload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Override in actual plugin
        });
    }
    onunload() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Override in actual plugin
        });
    }
}
exports.Plugin = Plugin;
class Modal {
    constructor(app) {
        this.app = app;
        this.contentEl = document.createElement('div');
    }
    open() { }
    close() { }
    onOpen() { }
    onClose() { }
}
exports.Modal = Modal;
class PluginSettingTab {
    constructor(app, plugin) {
        this.app = app;
        this.containerEl = document.createElement('div');
    }
    display() { }
    hide() { }
}
exports.PluginSettingTab = PluginSettingTab;
class Setting {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.nameEl = document.createElement('div');
        this.descEl = document.createElement('div');
        this.controlEl = document.createElement('div');
        // Add Obsidian-specific methods to container
        this.setupContainerMethods(containerEl);
    }
    setupContainerMethods(el) {
        if (!el.createEl) {
            el.createEl = function (tag, options) {
                const element = document.createElement(tag);
                if (options === null || options === void 0 ? void 0 : options.text)
                    element.textContent = options.text;
                if (options === null || options === void 0 ? void 0 : options.cls)
                    element.className = options.cls;
                this.appendChild(element);
                return element;
            };
        }
        if (!el.createDiv) {
            el.createDiv = function (options) {
                const element = document.createElement('div');
                if (options === null || options === void 0 ? void 0 : options.cls)
                    element.className = options.cls;
                this.appendChild(element);
                return element;
            };
        }
        if (!el.empty) {
            el.empty = function () {
                while (this.firstChild) {
                    this.removeChild(this.firstChild);
                }
            };
        }
    }
    setName(name) {
        return this;
    }
    setDesc(desc) {
        return this;
    }
    addText(cb) {
        cb(new TextComponent(this.containerEl));
        return this;
    }
    addTextArea(cb) {
        cb(new TextAreaComponent(this.containerEl));
        return this;
    }
    addToggle(cb) {
        cb(new ToggleComponent(this.containerEl));
        return this;
    }
    addButton(cb) {
        cb(new ButtonComponent(this.containerEl));
        return this;
    }
    addDropdown(cb) {
        cb(new DropdownComponent(this.containerEl));
        return this;
    }
}
exports.Setting = Setting;
class TextComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.inputEl = document.createElement('input');
    }
    setPlaceholder(placeholder) {
        return this;
    }
    setValue(value) {
        this.inputEl.value = value;
        return this;
    }
    onChange(callback) {
        return this;
    }
}
exports.TextComponent = TextComponent;
class TextAreaComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.inputEl = document.createElement('textarea');
    }
    setPlaceholder(placeholder) {
        return this;
    }
    setValue(value) {
        this.inputEl.value = value;
        return this;
    }
    onChange(callback) {
        return this;
    }
}
exports.TextAreaComponent = TextAreaComponent;
class ToggleComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.toggleEl = document.createElement('input');
    }
    setValue(value) {
        return this;
    }
    onChange(callback) {
        return this;
    }
}
exports.ToggleComponent = ToggleComponent;
class ButtonComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.buttonEl = document.createElement('button');
    }
    setButtonText(text) {
        return this;
    }
    setCta() {
        return this;
    }
    onClick(callback) {
        return this;
    }
}
exports.ButtonComponent = ButtonComponent;
class DropdownComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.selectEl = document.createElement('select');
        containerEl.appendChild(this.selectEl);
    }
    addOption(value, display) {
        const option = document.createElement('option');
        option.value = value;
        option.textContent = display || value;
        this.selectEl.appendChild(option);
        return this;
    }
    setValue(value) {
        this.selectEl.value = value;
        return this;
    }
    onChange(callback) {
        this.selectEl.addEventListener('change', () => callback(this.selectEl.value));
        return this;
    }
}
exports.DropdownComponent = DropdownComponent;
class Notice {
    constructor(message) { }
}
exports.Notice = Notice;
class MarkdownView {
    constructor() {
        this.previewMode = {
            rerender: jest.fn()
        };
    }
}
exports.MarkdownView = MarkdownView;
class TFile {
    constructor(path) {
        var _a;
        this.path = path || '';
        this.basename = path ? (((_a = path.split('/').pop()) === null || _a === void 0 ? void 0 : _a.replace(/\.[^/.]+$/, '')) || '') : '';
        this.extension = path ? (path.split('.').pop() || '') : '';
    }
}
exports.TFile = TFile;
class WorkspaceLeaf {
    constructor() {
        this.view = null;
    }
    openFile(file) {
        return Promise.resolve();
    }
}
exports.WorkspaceLeaf = WorkspaceLeaf;
class App {
    constructor() {
        this.vault = new Vault();
        this.workspace = new Workspace();
        this.metadataCache = new MetadataCache();
    }
}
exports.App = App;
class Vault {
    constructor() {
        this.mockFiles = [];
        this.adapter = {
            read: jest.fn().mockRejectedValue(new Error('File not found')),
            write: jest.fn().mockResolvedValue(undefined),
            exists: jest.fn().mockResolvedValue(false),
            mkdir: jest.fn().mockResolvedValue(undefined),
            remove: jest.fn().mockResolvedValue(undefined),
            list: jest.fn().mockResolvedValue({ files: [], folders: [] })
        };
    }
    getFiles() {
        return this.mockFiles;
    }
    getMarkdownFiles() {
        return this.mockFiles.filter(file => file.extension === 'md');
    }
    getAbstractFileByPath(path) {
        return this.mockFiles.find(file => file.path === path) || null;
    }
    create(path, content) {
        const file = new TFile(path);
        this.mockFiles.push(file);
        return Promise.resolve(file);
    }
    read(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (typeof file === 'string') {
                // Mock reading by path
                return Promise.resolve('Mock file content');
            }
            // Mock reading from TFile
            return Promise.resolve('Mock file content');
        });
    }
    modify(file, content) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Mock file modification
            return Promise.resolve();
        });
    }
    delete(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const index = this.mockFiles.indexOf(file);
            if (index > -1) {
                this.mockFiles.splice(index, 1);
            }
            return Promise.resolve();
        });
    }
    exists(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.mockFiles.some(file => file.path === path);
        });
    }
    on(event, callback) {
        // Return an EventRef-like object that registerEvent expects
        return {
            e: {
                target: this,
                fn: callback,
                event: event
            }
        };
    }
    off(event, callback) {
        // Mock implementation for removing event listeners
    }
    // Helper method for testing
    __addMockFile(path, content) {
        const file = new TFile(path);
        this.mockFiles.push(file);
        return file;
    }
    // Helper method to clear mock files for tests
    __clearMockFiles() {
        this.mockFiles = [];
    }
}
exports.Vault = Vault;
class Workspace {
    constructor() {
        this.activeFile = null;
        this.leaves = [];
    }
    getActiveFile() {
        return this.activeFile;
    }
    getLeaf(newLeaf) {
        if (newLeaf || this.leaves.length === 0) {
            const leaf = new WorkspaceLeaf();
            this.leaves.push(leaf);
            return leaf;
        }
        return this.leaves[0];
    }
    iterateAllLeaves(callback) {
        this.leaves.forEach(callback);
    }
    getActiveViewOfType(type) {
        return null;
    }
    openLinkText(linkText, sourcePath) {
        // Mock implementation for opening links
    }
    on(name, callback) {
        // Mock event listener
    }
    off(name, callback) {
        // Mock event listener removal
    }
    trigger(name, ...data) {
        // Mock event triggering
    }
    // Helper method for testing
    __setActiveFile(file) {
        this.activeFile = file;
    }
}
exports.Workspace = Workspace;
class MetadataCache {
    constructor() {
        this.cache = new Map();
    }
    getFileCache(file) {
        return this.cache.get(file.path) || {
            frontmatter: {},
            sections: [],
            headings: [],
            links: [],
            embeds: [],
            tags: []
        };
    }
    getBacklinksForFile(file) {
        return {
            data: new Map(),
            count: () => 0,
            keys: () => []
        };
    }
    getFrontmatterPropertyValue(file, property) {
        var _a;
        const cache = this.getFileCache(file);
        return (_a = cache.frontmatter) === null || _a === void 0 ? void 0 : _a[property];
    }
    on(name, callback) {
        // Mock event listener
    }
    off(name, callback) {
        // Mock event listener removal
    }
    // Helper method for testing
    __setFileCache(path, cache) {
        this.cache.set(path, cache);
    }
    // Helper method to clear cache for tests
    __clearCache() {
        this.cache.clear();
    }
}
exports.MetadataCache = MetadataCache;
class Component {
    load() { }
    onload() { }
    unload() { }
    onunload() { }
    addChild(component) {
        return component;
    }
    removeChild(component) {
        return component;
    }
}
exports.Component = Component;
class MarkdownRenderer {
    static renderMarkdown(markdown, el, sourcePath, component) {
        el.innerHTML = markdown;
        return Promise.resolve();
    }
}
exports.MarkdownRenderer = MarkdownRenderer;
class FileManager {
    generateMarkdownLink(file, sourcePath) {
        return `[[${file.basename}]]`;
    }
}
exports.FileManager = FileManager;
// Mock normalizePath function
function normalizePath(path) {
    return path.replace(/\\/g, '/');
}
exports.normalizePath = normalizePath;
// Mock requestUrl function
function requestUrl(request) {
    return Promise.resolve({
        status: 200,
        json: {},
        text: '',
        arrayBuffer: new ArrayBuffer(0)
    });
}
exports.requestUrl = requestUrl;
// Mock debounce function
function debounce(func, wait, immediate) {
    return func; // Simplified mock - just return the function as-is for testing
}
exports.debounce = debounce;
// Mock moment if needed
exports.moment = {
    now: () => Date.now(),
    unix: (timestamp) => ({
        format: (format) => new Date(timestamp * 1000).toISOString()
    })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,