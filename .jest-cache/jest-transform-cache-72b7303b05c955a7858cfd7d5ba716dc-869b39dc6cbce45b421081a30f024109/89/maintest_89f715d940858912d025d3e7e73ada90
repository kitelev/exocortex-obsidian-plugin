42b221d6e27ec4d4249b6031be852806
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock all external dependencies
jest.mock('../../src/infrastructure/container/DIContainer', () => {
    const mockContainer = {
        getCreateAssetUseCase: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue({
                success: true,
                message: 'Asset created'
            })
        }),
        getPropertyEditingUseCase: jest.fn().mockReturnValue({
            execute: jest.fn().mockResolvedValue({
                success: true,
                message: 'Property edited'
            })
        }),
        resolve: jest.fn().mockImplementation(() => ({})),
        dispose: jest.fn()
    };
    return {
        DIContainer: {
            initialize: jest.fn((app, plugin) => mockContainer),
            getInstance: jest.fn(() => mockContainer)
        }
    };
});
jest.mock('../../src/domain/semantic/core/Graph', () => ({
    Graph: jest.fn().mockImplementation(() => mockGraphMethods)
}));
// Mock SPARQLProcessor
jest.mock('../../src/presentation/processors/SPARQLProcessor', () => ({
    SPARQLProcessor: jest.fn().mockImplementation(() => ({
        processCodeBlock: jest.fn().mockResolvedValue(undefined),
        getCacheStatistics: jest.fn().mockReturnValue({
            hits: 10,
            misses: 5,
            hitRate: 66.7,
            size: 8,
            maxSize: 500,
            totalQueries: 15,
            evictions: 0
        }),
        invalidateCache: jest.fn(),
        destroy: jest.fn()
    }))
}));
// Mock GraphVisualizationProcessor
jest.mock('../../src/presentation/processors/GraphVisualizationProcessor', () => ({
    GraphVisualizationProcessor: jest.fn().mockImplementation(() => ({
        processCodeBlock: jest.fn().mockResolvedValue(undefined)
    }))
}));
// Mock RDFService
jest.mock('../../src/application/services/RDFService', () => ({
    RDFService: jest.fn().mockImplementation(() => ({
        getNamespaceManager: jest.fn().mockReturnValue({
            getPrefix: jest.fn().mockReturnValue('exo'),
            expand: jest.fn().mockReturnValue('http://example.org/exo#')
        })
    }))
}));
// Mock all modals
jest.mock('../../src/presentation/modals/CreateAssetModal', () => ({
    CreateAssetModal: jest.fn().mockImplementation(() => ({
        open: jest.fn()
    }))
}));
jest.mock('../../src/presentation/modals/ExportRDFModal', () => ({
    ExportRDFModal: jest.fn().mockImplementation(() => ({
        open: jest.fn()
    }))
}));
jest.mock('../../src/presentation/modals/ImportRDFModal', () => ({
    ImportRDFModal: jest.fn().mockImplementation(() => ({
        open: jest.fn()
    }))
}));
jest.mock('../../src/presentation/modals/QuickTaskModal', () => ({
    QuickTaskModal: jest.fn().mockImplementation(() => ({
        open: jest.fn()
    }))
}));
// Mock repositories and use cases
jest.mock('../../src/infrastructure/repositories/ObsidianTaskRepository');
jest.mock('../../src/infrastructure/repositories/ObsidianAssetRepository');
jest.mock('../../src/application/use-cases/CreateTaskFromProjectUseCase');
jest.mock('../../src/application/use-cases/GetCurrentProjectUseCase');
jest.mock('../../src/domain/semantic/core/IndexedGraph');
jest.mock('../../src/application/services/ExoFocusService');
const obsidian_1 = require("obsidian");
const main_1 = tslib_1.__importDefault(require("../../src/main"));
// Mock Graph
const mockGraphMethods = {
    add: jest.fn(),
    remove: jest.fn(),
    clear: jest.fn(),
    match: jest.fn().mockReturnValue([]),
    merge: jest.fn(),
    size: jest.fn().mockReturnValue(0)
};
describe('ExocortexPlugin - Comprehensive Tests', () => {
    let app;
    let plugin;
    let mockNotice;
    beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
        // Setup comprehensive app mock
        app = {
            vault: {
                getMarkdownFiles: jest.fn().mockReturnValue([
                    { basename: 'test-file', path: 'test-file.md', name: 'test-file.md', extension: 'md' },
                    { basename: 'project', path: 'project.md', name: 'project.md', extension: 'md' }
                ]),
                read: jest.fn().mockResolvedValue(`---
exo__Asset_uid: test-uid
exo__Asset_label: Test Asset
exo__Instance_class: "[[exo__Class]]"
tags: [project, active]
---

# Test File
This is test content with [[links]] and metadata.`),
                on: jest.fn().mockReturnValue({ event: 'mock', callback: jest.fn() }),
                create: jest.fn().mockResolvedValue(new obsidian_1.TFile('new-file.md')),
                modify: jest.fn().mockResolvedValue(undefined),
                delete: jest.fn().mockResolvedValue(undefined)
            },
            workspace: {
                openLinkText: jest.fn(),
                getActiveFile: jest.fn().mockReturnValue({
                    path: 'current-file.md',
                    basename: 'current-file',
                    name: 'current-file.md'
                }),
                on: jest.fn()
            },
            metadataCache: {
                getFileCache: jest.fn().mockReturnValue({
                    frontmatter: {
                        'exo__Asset_uid': 'test-uid',
                        'exo__Asset_label': 'Test Asset'
                    },
                    sections: [],
                    headings: [],
                    links: []
                }),
                on: jest.fn()
            }
        };
        // Mock Notice to avoid console noise
        mockNotice = jest.spyOn(require('obsidian'), 'Notice').mockImplementation(() => ({}));
        plugin = new main_1.default(app, {
            id: 'exocortex',
            name: 'Exocortex',
            version: '2.11.0',
            minAppVersion: '1.0.0',
            description: 'Knowledge management with semantic web technologies',
            author: 'M.K. Khromov',
            authorUrl: 'https://github.com/kitelev',
            isDesktopOnly: false
        });
        // Mock plugin methods for testing
        jest.spyOn(plugin, 'addCommand').mockImplementation(() => { });
        jest.spyOn(plugin, 'addRibbonIcon').mockImplementation(() => document.createElement('div'));
        jest.spyOn(plugin, 'registerEvent').mockImplementation(() => { });
        jest.spyOn(plugin, 'registerMarkdownCodeBlockProcessor').mockImplementation(() => { });
    }));
    afterEach(() => {
        if (mockNotice) {
            mockNotice.mockRestore();
        }
        jest.clearAllMocks();
    });
    describe('Plugin Lifecycle', () => {
        test('should initialize all core components during load', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Verify core components are initialized
            expect(plugin['graph']).toBeDefined();
            expect(plugin['sparqlProcessor']).toBeDefined();
            expect(plugin['graphVisualizationProcessor']).toBeDefined();
            expect(plugin['container']).toBeDefined();
            expect(plugin['rdfService']).toBeDefined();
        }));
        test('should register all markdown processors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const registerSpy = jest.spyOn(plugin, 'registerMarkdownCodeBlockProcessor');
            yield plugin.onload();
            expect(registerSpy).toHaveBeenCalledWith('sparql', expect.any(Function));
            expect(registerSpy).toHaveBeenCalledWith('graph', expect.any(Function));
        }));
        test('should register all commands during load', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commandSpy = jest.spyOn(plugin, 'addCommand');
            yield plugin.onload();
            // Verify all commands are registered
            expect(commandSpy).toHaveBeenCalledWith(expect.objectContaining({
                id: 'create-exo-asset',
                name: 'Create new ExoAsset'
            }));
            expect(commandSpy).toHaveBeenCalledWith(expect.objectContaining({
                id: 'view-sparql-cache-stats'
            }));
            expect(commandSpy).toHaveBeenCalledWith(expect.objectContaining({
                id: 'clear-sparql-cache'
            }));
            expect(commandSpy).toHaveBeenCalledWith(expect.objectContaining({
                id: 'export-knowledge-graph'
            }));
            expect(commandSpy).toHaveBeenCalledWith(expect.objectContaining({
                id: 'import-rdf-data'
            }));
            expect(commandSpy).toHaveBeenCalledWith(expect.objectContaining({
                id: 'quick-create-task'
            }));
            expect(commandSpy).toHaveBeenCalledTimes(6);
        }));
        test('should register ribbon icon', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const ribbonSpy = jest.spyOn(plugin, 'addRibbonIcon');
            yield plugin.onload();
            expect(ribbonSpy).toHaveBeenCalledWith('plus-circle', 'Create ExoAsset', expect.any(Function));
        }));
        test('should register vault event handlers', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            expect(app.vault.on).toHaveBeenCalledWith('modify', expect.any(Function));
            expect(app.vault.on).toHaveBeenCalledWith('create', expect.any(Function));
            expect(app.vault.on).toHaveBeenCalledWith('delete', expect.any(Function));
        }));
        test('should load vault data into graph', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            expect(app.vault.getMarkdownFiles).toHaveBeenCalled();
            expect(app.vault.read).toHaveBeenCalled();
        }));
        test('should handle load errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            app.vault.getMarkdownFiles = jest.fn().mockImplementation(() => {
                throw new Error('Vault access failed');
            });
            // Should not throw during plugin load - error should be caught and handled
            yield expect(plugin.onload()).rejects.toThrow('Vault access failed');
        }));
        test('should cleanup resources during unload', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const mockSparqlProcessor = plugin['sparqlProcessor'];
            const mockGraph = plugin['graph'];
            yield plugin.onunload();
            // Verify cleanup was called
            expect(mockGraph.clear).toHaveBeenCalled();
            expect(mockSparqlProcessor.destroy).toHaveBeenCalled();
        }));
        test('should handle unload when components are not initialized', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Don't call onload, test unload with uninitialized state
            yield expect(plugin.onunload()).resolves.not.toThrow();
        }));
    });
    describe('SPARQL Cache Management', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
        }));
        test('should initialize SPARQL processor with cache configuration', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const processor = plugin['sparqlProcessor'];
            expect(processor).toBeDefined();
            // Verify cache statistics are available
            const stats = processor.getCacheStatistics();
            expect(stats).toEqual(expect.objectContaining({
                hits: expect.any(Number),
                misses: expect.any(Number),
                hitRate: expect.any(Number),
                size: expect.any(Number),
                maxSize: expect.any(Number),
                totalQueries: expect.any(Number),
                evictions: expect.any(Number)
            }));
        }));
        test('should provide cache statistics through command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commands = plugin['addCommand'].mock.calls;
            const cacheStatsCommand = commands.find(call => call[0].id === 'view-sparql-cache-stats');
            expect(cacheStatsCommand).toBeDefined();
            expect(cacheStatsCommand[0].callback).toBeInstanceOf(Function);
        }));
        test('should provide cache clearing functionality', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commands = plugin['addCommand'].mock.calls;
            const clearCacheCommand = commands.find(call => call[0].id === 'clear-sparql-cache');
            expect(clearCacheCommand).toBeDefined();
            expect(clearCacheCommand[0].callback).toBeInstanceOf(Function);
            // Execute the clear cache command
            clearCacheCommand[0].callback();
            expect(plugin['sparqlProcessor'].invalidateCache).toHaveBeenCalled();
        }));
    });
    describe('File Management and Graph Updates', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
        }));
        test('should extract triples from frontmatter', () => {
            const mockFile = new obsidian_1.TFile('test.md');
            const content = `---
title: Test Note
tags: [project, active]
author: John Doe
---

# Test Content`;
            const triples = plugin['extractTriplesFromFile'](mockFile, content);
            expect(triples).toHaveLength(5); // title, 2 tags, author, file_path, file_name
            expect(triples.some(t => t.getPredicate().toString() === 'title')).toBe(true);
            expect(triples.some(t => t.getPredicate().toString() === 'author')).toBe(true);
        });
        test('should parse complex frontmatter correctly', () => {
            const mockFile = new obsidian_1.TFile('complex.md');
            const content = `---
project:
  - Project A
  - Project B
status: active
nested:
  value: test
---

# Complex Note`;
            const triples = plugin['extractTriplesFromFile'](mockFile, content);
            // Should handle array values and nested objects
            expect(triples.length).toBeGreaterThan(2);
        });
        test('should handle file without frontmatter', () => {
            const mockFile = new obsidian_1.TFile('simple.md');
            const content = `# Simple Note

Just content, no frontmatter.`;
            const triples = plugin['extractTriplesFromFile'](mockFile, content);
            // Should still create basic file metadata triples
            expect(triples).toHaveLength(2); // file_path, file_name
        });
        test('should update graph when file is modified', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('modified.md');
            const eventHandlers = app.vault.on.mock.calls;
            const modifyHandler = eventHandlers.find(call => call[0] === 'modify')[1];
            // Simulate file modification
            yield modifyHandler(mockFile);
            expect(app.vault.read).toHaveBeenCalledWith(mockFile);
            expect(plugin['sparqlProcessor'].invalidateCache).toHaveBeenCalled();
        }));
        test('should handle file creation events', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('new.md');
            const eventHandlers = app.vault.on.mock.calls;
            const createHandler = eventHandlers.find(call => call[0] === 'create')[1];
            // Simulate file creation
            yield createHandler(mockFile);
            expect(app.vault.read).toHaveBeenCalledWith(mockFile);
            expect(plugin['sparqlProcessor'].invalidateCache).toHaveBeenCalled();
        }));
        test('should handle file deletion events', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('deleted.md');
            const eventHandlers = app.vault.on.mock.calls;
            const deleteHandler = eventHandlers.find(call => call[0] === 'delete')[1];
            // Simulate file deletion
            yield deleteHandler(mockFile);
            expect(plugin['sparqlProcessor'].invalidateCache).toHaveBeenCalled();
        }));
    });
    describe('Command Integration', () => {
        beforeEach(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
        }));
        test('should execute create asset command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commands = plugin['addCommand'].mock.calls;
            const createCommand = commands.find(call => call[0].id === 'create-exo-asset');
            expect(createCommand).toBeDefined();
            expect(createCommand[0].hotkeys).toEqual([{ modifiers: ["Mod", "Shift"], key: "n" }]);
            // Execute command should open modal
            createCommand[0].callback();
            const { CreateAssetModal } = require('../../src/presentation/modals/CreateAssetModal');
            expect(CreateAssetModal).toHaveBeenCalledWith(app);
        }));
        test('should execute export graph command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commands = plugin['addCommand'].mock.calls;
            const exportCommand = commands.find(call => call[0].id === 'export-knowledge-graph');
            expect(exportCommand).toBeDefined();
            // Execute command should open modal
            exportCommand[0].callback();
            const { ExportRDFModal } = require('../../src/presentation/modals/ExportRDFModal');
            expect(ExportRDFModal).toHaveBeenCalledWith(app, plugin['graph'], expect.any(Object), expect.any(Function));
        }));
        test('should execute import RDF command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commands = plugin['addCommand'].mock.calls;
            const importCommand = commands.find(call => call[0].id === 'import-rdf-data');
            expect(importCommand).toBeDefined();
            // Execute command should open modal
            importCommand[0].callback();
            const { ImportRDFModal } = require('../../src/presentation/modals/ImportRDFModal');
            expect(ImportRDFModal).toHaveBeenCalledWith(app, plugin['graph'], expect.any(Object), expect.any(Function));
        }));
        test('should execute quick task creation command', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const commands = plugin['addCommand'].mock.calls;
            const taskCommand = commands.find(call => call[0].id === 'quick-create-task');
            expect(taskCommand).toBeDefined();
            expect(taskCommand[0].hotkeys).toEqual([{ modifiers: ["Mod", "Shift"], key: "t" }]);
            // Execute command should open task modal
            yield taskCommand[0].callback();
            const { QuickTaskModal } = require('../../src/presentation/modals/QuickTaskModal');
            expect(QuickTaskModal).toHaveBeenCalled();
        }));
    });
    describe('Error Handling', () => {
        test('should handle processor registration failures gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            plugin.registerMarkdownCodeBlockProcessor = jest.fn().mockImplementation(() => {
                throw new Error('Registration failed');
            });
            // Should not fail plugin loading
            yield expect(plugin.onload()).resolves.not.toThrow();
        }));
        test('should handle vault read failures during graph loading', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            app.vault.read = jest.fn().mockRejectedValue(new Error('Read failed'));
            // Should not fail plugin loading
            yield expect(plugin.onload()).resolves.not.toThrow();
        }));
        test('should handle quick task command errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const commands = plugin['addCommand'].mock.calls;
            const taskCommand = commands.find(call => call[0].id === 'quick-create-task');
            // Should handle error gracefully and show notice
            yield expect(taskCommand[0].callback()).resolves.not.toThrow();
        }));
    });
    describe('Integration Tests', () => {
        test('should have all components working together after load', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            // Verify all critical components are initialized and connected
            expect(plugin['graph']).toBeDefined();
            expect(plugin['sparqlProcessor']).toBeDefined();
            expect(plugin['graphVisualizationProcessor']).toBeDefined();
            expect(plugin['rdfService']).toBeDefined();
            expect(plugin['container']).toBeDefined();
            // Verify processors are connected to the graph
            const sparqlProcessor = plugin['sparqlProcessor'];
            expect(sparqlProcessor).toBeDefined();
        }));
        test('should maintain data consistency across file operations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const mockFile = new obsidian_1.TFile('consistency-test.md');
            const processor = plugin['sparqlProcessor'];
            // Reset mocks to track calls from this test specifically
            jest.clearAllMocks();
            // Mock file content for update operation
            app.vault.read = jest.fn().mockResolvedValue('# Test Content\n\nSome test content.');
            // Mock graph.match to return some triples that need to be removed
            const mockTriple = { subject: 'test', predicate: 'test', object: 'test' };
            mockGraphMethods.match.mockReturnValue([mockTriple]);
            // Simulate file update cycle
            yield plugin['updateFileInGraph'](mockFile);
            // Cache invalidation happens in event handlers, not directly in updateFileInGraph
            // So we'll test the file deletion which directly calls graph.remove
            plugin['removeFileFromGraph'](mockFile);
            expect(mockGraphMethods.remove).toHaveBeenCalled();
        }));
    });
    describe('Frontmatter Parsing', () => {
        test('should parse simple frontmatter', () => {
            const yaml = 'title: Test\nauthor: John\nstatus: active';
            const result = plugin['parseFrontmatter'](yaml);
            expect(result).toEqual({
                title: 'Test',
                author: 'John',
                status: 'active'
            });
        });
        test('should parse array frontmatter', () => {
            const yaml = 'tags:\n  - project\n  - active\nauthor: John';
            const result = plugin['parseFrontmatter'](yaml);
            expect(result).toEqual({
                tags: ['project', 'active'],
                author: 'John'
            });
        });
        test('should handle empty values', () => {
            const yaml = 'title:\nauthor: John\nempty: ""';
            const result = plugin['parseFrontmatter'](yaml);
            expect(result).toEqual({
                title: [],
                author: 'John',
                empty: ''
            });
        });
        test('should handle complex nested arrays', () => {
            const yaml = 'projects:\n  - Project A\n  - Project B\n  - Project C\nowner: Team';
            const result = plugin['parseFrontmatter'](yaml);
            expect(result).toEqual({
                projects: ['Project A', 'Project B', 'Project C'],
                owner: 'Team'
            });
        });
    });
    describe('Performance and Memory', () => {
        test('should not create memory leaks during repeated load/unload cycles', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Test multiple load/unload cycles
            for (let i = 0; i < 5; i++) {
                yield plugin.onload();
                yield plugin.onunload();
            }
            // Should complete without throwing
            expect(true).toBe(true);
        }));
        test('should handle large vault with many files', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock a large number of files
            const manyFiles = Array.from({ length: 1000 }, (_, i) => ({
                basename: `file-${i}`,
                path: `file-${i}.md`,
                name: `file-${i}.md`,
                extension: 'md'
            }));
            app.vault.getMarkdownFiles = jest.fn().mockReturnValue(manyFiles);
            // Should handle large vault without timing out
            yield expect(plugin.onload()).resolves.not.toThrow();
        }));
    });
});
// Additional test utilities for comprehensive testing
function createMockFile(path, content = '') {
    const file = new obsidian_1.TFile(path);
    return file;
}
function createMockFrontmatter(data) {
    const yaml = Object.entries(data)
        .map(([key, value]) => {
        if (Array.isArray(value)) {
            return `${key}:\n${value.map(v => `  - ${v}`).join('\n')}`;
        }
        return `${key}: ${value}`;
    })
        .join('\n');
    return `---\n${yaml}\n---`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,