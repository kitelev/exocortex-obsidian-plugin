feca03fbf0b52757aaeee3e3a71b489d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock DIContainer
jest.mock("../../../../src/infrastructure/container/DIContainer");
// Mock Notice
jest.mock("obsidian", () => {
    const actual = jest.requireActual("obsidian");
    return {
        ...actual,
        Notice: jest.fn(),
        Setting: jest.fn().mockImplementation(() => ({
            setName: jest.fn().mockReturnThis(),
            setDesc: jest.fn().mockReturnThis(),
            addText: jest.fn().mockReturnThis(),
            addDropdown: jest.fn().mockReturnThis(),
            addToggle: jest.fn().mockReturnThis(),
            addTextArea: jest.fn().mockReturnThis(),
            addButton: jest.fn().mockReturnThis(),
        })),
    };
});
const obsidian_1 = require("obsidian");
const CreateAssetModal_1 = require("../../../../src/presentation/modals/CreateAssetModal");
const DIContainer_1 = require("../../../../src/infrastructure/container/DIContainer");
// Add Obsidian DOM extensions to HTMLElement prototype
beforeAll(() => {
    HTMLElement.prototype.createEl = jest.fn().mockImplementation(function (tag, attrs) {
        const element = document.createElement(tag);
        if (attrs?.text)
            element.textContent = attrs.text;
        if (attrs?.cls)
            element.className = attrs.cls;
        // Append to parent (this) like real Obsidian createEl does
        this.appendChild(element);
        return element;
    });
    HTMLElement.prototype.createDiv = jest.fn().mockImplementation(function (attrs) {
        const element = document.createElement("div");
        if (attrs?.cls)
            element.className = attrs.cls;
        // Append to parent (this) like real Obsidian createDiv does
        this.appendChild(element);
        return element;
    });
    HTMLElement.prototype.empty = jest.fn().mockImplementation(() => {
        // Mock empty implementation - in real Obsidian this clears the element
    });
});
describe("CreateAssetModal", () => {
    let app;
    let modal;
    let mockCreateAssetUseCase;
    let mockContainer;
    beforeEach(() => {
        // Setup app mock with vault and metadataCache
        app = new obsidian_1.App();
        app.vault = {
            getMarkdownFiles: jest.fn().mockReturnValue([]),
            read: jest.fn(),
        };
        app.metadataCache = {
            getFileCache: jest.fn().mockReturnValue(null),
        };
        // Setup CreateAssetUseCase mock
        mockCreateAssetUseCase = {
            execute: jest.fn(),
        };
        // Setup DIContainer mock
        mockContainer = {
            getCreateAssetUseCase: jest.fn().mockReturnValue(mockCreateAssetUseCase),
            getInstance: jest.fn().mockReturnThis(),
            resolve: jest.fn().mockImplementation((token) => {
                // Return empty mock repositories
                return {};
            }),
        };
        DIContainer_1.DIContainer.getInstance.mockReturnValue(mockContainer);
        // Create modal instance
        modal = new CreateAssetModal_1.CreateAssetModal(app);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe("Modal Initialization", () => {
        test("should create modal with default values", () => {
            expect(modal).toBeDefined();
            expect(modal.app).toBe(app);
        });
        test("should initialize with DIContainer", () => {
            expect(DIContainer_1.DIContainer.getInstance).toHaveBeenCalled();
            expect(mockContainer.getCreateAssetUseCase).toHaveBeenCalled();
        });
        test("should have default asset values", () => {
            expect(modal.assetTitle).toBe("");
            expect(modal.assetClass).toBe("exo__Asset");
            expect(modal.assetOntology).toBe("");
            expect(modal.propertyValues).toBeInstanceOf(Map);
        });
        test("should initialize empty properties list", () => {
            expect(modal.properties).toEqual([]);
            expect(modal.propertiesContainer).toBeNull();
        });
    });
    describe("Modal Opening", () => {
        test("should setup UI elements when opened", async () => {
            const mockContentEl = document.createElement("div");
            modal.contentEl = mockContentEl;
            await modal.onOpen();
            expect(mockContentEl.createEl).toHaveBeenCalledWith("h2", {
                text: "Create ExoAsset",
            });
        });
        test("should setup all required fields", async () => {
            const mockContentEl = document.createElement("div");
            modal.contentEl = mockContentEl;
            const setupTitleFieldSpy = jest.spyOn(modal, "setupTitleField");
            const setupClassFieldSpy = jest.spyOn(modal, "setupClassField");
            const setupOntologyFieldSpy = jest.spyOn(modal, "setupOntologyField");
            const setupPropertiesSectionSpy = jest.spyOn(modal, "setupPropertiesSection");
            const setupActionButtonsSpy = jest.spyOn(modal, "setupActionButtons");
            await modal.onOpen();
            expect(setupTitleFieldSpy).toHaveBeenCalled();
            expect(setupClassFieldSpy).toHaveBeenCalled();
            expect(setupOntologyFieldSpy).toHaveBeenCalled();
            expect(setupPropertiesSectionSpy).toHaveBeenCalled();
            expect(setupActionButtonsSpy).toHaveBeenCalled();
        });
        test("should handle errors during modal opening gracefully", async () => {
            const mockContentEl = document.createElement("div");
            modal.contentEl = mockContentEl;
            // Mock setupClassField to throw error
            jest
                .spyOn(modal, "setupClassField")
                .mockRejectedValue(new Error("Setup failed"));
            await expect(modal.onOpen()).rejects.toThrow("Setup failed");
        });
    });
    describe("Title Field Setup", () => {
        test("should setup title field correctly", async () => {
            const containerEl = document.createElement("div");
            await modal.setupTitleField(containerEl);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should update assetTitle when title changes", async () => {
            const containerEl = document.createElement("div");
            await modal.setupTitleField(containerEl);
            // Simulate title change
            const testTitle = "Test Asset Title";
            modal.assetTitle = testTitle;
            expect(modal.assetTitle).toBe(testTitle);
        });
        test("should handle long titles", async () => {
            const containerEl = document.createElement("div");
            await modal.setupTitleField(containerEl);
            const longTitle = "A".repeat(1000);
            modal.assetTitle = longTitle;
            expect(modal.assetTitle).toBe(longTitle);
        });
        test("should handle special characters in titles", async () => {
            const containerEl = document.createElement("div");
            await modal.setupTitleField(containerEl);
            const specialTitle = "Test!@#$%^&*()_+{}|:\"<>?[]\\;',./ Asset";
            modal.assetTitle = specialTitle;
            expect(modal.assetTitle).toBe(specialTitle);
        });
    });
    describe("Class Field Setup", () => {
        test("should setup class field correctly", async () => {
            const containerEl = document.createElement("div");
            await modal.setupClassField(containerEl);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should have default class value", () => {
            expect(modal.assetClass).toBe("exo__Asset");
        });
        test("should discover classes from vault files", async () => {
            const mockFiles = [
                { basename: "TestClass", name: "TestClass.md" },
                { basename: "AnotherClass", name: "AnotherClass.md" },
            ];
            app.vault.getMarkdownFiles.mockReturnValue(mockFiles);
            app.metadataCache.getFileCache
                .mockReturnValueOnce({
                frontmatter: {
                    exo__Instance_class: "exo__Class",
                    rdfs__label: "Test Class",
                },
            })
                .mockReturnValueOnce({
                frontmatter: {
                    exo__Instance_class: "[[exo__Class]]",
                    rdfs__label: "Another Class",
                },
            });
            const containerEl = document.createElement("div");
            await modal.setupClassField(containerEl);
            expect(app.vault.getMarkdownFiles).toHaveBeenCalled();
            expect(app.metadataCache.getFileCache).toHaveBeenCalledTimes(2);
        });
        test("should provide default classes when none found", async () => {
            app.vault.getMarkdownFiles.mockReturnValue([]);
            const containerEl = document.createElement("div");
            await modal.setupClassField(containerEl);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should handle vault access errors", async () => {
            app.vault.getMarkdownFiles.mockImplementation(() => {
                throw new Error("Vault access error");
            });
            const containerEl = document.createElement("div");
            await expect(modal.setupClassField(containerEl)).rejects.toThrow("Vault access error");
        });
        test("should update properties when class changes", async () => {
            const containerEl = document.createElement("div");
            const updatePropertiesForClassSpy = jest
                .spyOn(modal, "updatePropertiesForClass")
                .mockResolvedValue(undefined);
            await modal.setupClassField(containerEl);
            // Simulate class change
            const newClass = "exo__Task";
            modal.assetClass = newClass;
            expect(modal.assetClass).toBe(newClass);
        });
    });
    describe("Ontology Field Setup", () => {
        test("should setup ontology field correctly", async () => {
            const containerEl = document.createElement("div");
            await modal.setupOntologyField(containerEl);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should discover ontologies from vault files", async () => {
            const mockFiles = [
                { name: "!test-ontology.md", basename: "!test-ontology" },
                { name: "!another-onto.md", basename: "!another-onto" },
            ];
            app.vault.getMarkdownFiles.mockReturnValue(mockFiles);
            app.metadataCache.getFileCache
                .mockReturnValueOnce({
                frontmatter: {
                    exo__Ontology_prefix: "test",
                    rdfs__label: "Test Ontology",
                },
            })
                .mockReturnValueOnce({
                frontmatter: {
                    exo__Ontology_prefix: "another",
                    rdfs__label: "Another Ontology",
                },
            });
            const containerEl = document.createElement("div");
            await modal.setupOntologyField(containerEl);
            expect(app.vault.getMarkdownFiles).toHaveBeenCalled();
        });
        test("should handle empty ontology list", async () => {
            app.vault.getMarkdownFiles.mockReturnValue([]);
            const containerEl = document.createElement("div");
            await modal.setupOntologyField(containerEl);
            expect(containerEl).toBeDefined();
        });
        test("should set default ontology correctly", async () => {
            app.vault.getMarkdownFiles.mockReturnValue([]);
            const containerEl = document.createElement("div");
            await modal.setupOntologyField(containerEl);
            expect(modal.assetOntology).toBe("exo");
        });
    });
    describe("Properties Section Setup", () => {
        test("should setup properties section correctly", async () => {
            const containerEl = document.createElement("div");
            await modal.setupPropertiesSection(containerEl);
            expect(containerEl.createEl).toHaveBeenCalledWith("h3", {
                text: "Properties",
                cls: "exocortex-properties-header",
            });
            expect(containerEl.createDiv).toHaveBeenCalledWith({
                cls: "exocortex-properties-container",
            });
        });
        test("should update properties for default class", async () => {
            const containerEl = document.createElement("div");
            const updatePropertiesForClassSpy = jest
                .spyOn(modal, "updatePropertiesForClass")
                .mockResolvedValue(undefined);
            await modal.setupPropertiesSection(containerEl);
            expect(updatePropertiesForClassSpy).toHaveBeenCalledWith("exo__Asset");
        });
        test("should create properties container with correct class", async () => {
            const containerEl = document.createElement("div");
            await modal.setupPropertiesSection(containerEl);
            expect(containerEl.createDiv).toHaveBeenCalledWith({
                cls: "exocortex-properties-container",
            });
        });
    });
    describe("Properties Management", () => {
        beforeEach(() => {
            const mockPropertiesContainer = document.createElement("div");
            mockPropertiesContainer.empty = jest.fn();
            mockPropertiesContainer.createEl = jest
                .fn()
                .mockReturnValue(document.createElement("p"));
            modal.propertiesContainer = mockPropertiesContainer;
        });
        test("should clear existing properties when updating for new class", async () => {
            modal.propertyValues.set("test", "value");
            app.vault.getMarkdownFiles.mockReturnValue([]);
            await modal.updatePropertiesForClass("exo__Task");
            expect(modal.propertiesContainer.empty).toHaveBeenCalled();
            expect(modal.propertyValues.size).toBe(0);
        });
        test("should add default properties for exo__Asset class", async () => {
            app.vault.getMarkdownFiles.mockReturnValue([]);
            await modal.updatePropertiesForClass("exo__Asset");
            expect(modal.properties).toHaveLength(2); // description and tags
            expect(modal.properties[0].name).toBe("description");
            expect(modal.properties[1].name).toBe("tags");
        });
        test("should discover properties from vault for specific class", async () => {
            const mockFiles = [{ basename: "propertyName", name: "propertyName.md" }];
            app.vault.getMarkdownFiles.mockReturnValue(mockFiles);
            app.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    exo__Instance_class: "exo__Property",
                    rdfs__domain: "TestClass",
                    rdfs__label: "Test Property",
                    rdfs__comment: "A test property",
                    rdfs__range: "string",
                    exo__Property_isRequired: true,
                },
            });
            await modal.updatePropertiesForClass("TestClass");
            expect(modal.properties).toHaveLength(1);
            expect(modal.properties[0].name).toBe("propertyName");
            expect(modal.properties[0].isRequired).toBe(true);
        });
        test("should handle properties with array domains", async () => {
            const mockFiles = [
                { basename: "multiDomainProp", name: "multiDomainProp.md" },
            ];
            app.vault.getMarkdownFiles.mockReturnValue(mockFiles);
            app.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    exo__Instance_class: "exo__Property",
                    rdfs__domain: ["TestClass", "AnotherClass"],
                    rdfs__label: "Multi Domain Property",
                    rdfs__range: "string",
                },
            });
            await modal.updatePropertiesForClass("TestClass");
            expect(modal.properties).toHaveLength(1);
            expect(modal.properties[0].name).toBe("multiDomainProp");
        });
        test("should map different ranges to correct types", async () => {
            const containerEl = document.createElement("div");
            modal.propertiesContainer = containerEl;
            // Test different range mappings
            expect(modal.mapRangeToType("select")).toBe("enum");
            expect(modal.mapRangeToType("boolean")).toBe("boolean");
            expect(modal.mapRangeToType("date")).toBe("date");
            expect(modal.mapRangeToType("integer")).toBe("number");
            expect(modal.mapRangeToType("string[]")).toBe("array");
            expect(modal.mapRangeToType("text")).toBe("text");
            expect(modal.mapRangeToType("unknown")).toBe("string");
        });
        test("should handle enum properties with options", async () => {
            const mockFiles = [{ basename: "statusProp", name: "statusProp.md" }];
            app.vault.getMarkdownFiles.mockReturnValue(mockFiles);
            app.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    exo__Instance_class: "exo__Property",
                    rdfs__domain: "TestClass",
                    rdfs__range: "select",
                    exo__Property_options: ["active", "inactive", "pending"],
                },
            });
            await modal.updatePropertiesForClass("TestClass");
            expect(modal.properties).toHaveLength(1);
            expect(modal.properties[0].type).toBe("enum");
            expect(modal.properties[0].options).toEqual([
                "active",
                "inactive",
                "pending",
            ]);
        });
        test("should show no properties message when none found", async () => {
            app.vault.getMarkdownFiles.mockReturnValue([]);
            await modal.updatePropertiesForClass("UnknownClass");
            expect(modal.propertiesContainer.createEl).toHaveBeenCalledWith("p", {
                text: "No specific properties for this class",
                cls: "exocortex-no-properties",
            });
        });
    });
    describe("Property Field Creation", () => {
        let mockPropertiesContainer;
        beforeEach(() => {
            mockPropertiesContainer = document.createElement("div");
            modal.propertiesContainer = mockPropertiesContainer;
        });
        test("should create text field for string property", () => {
            const property = {
                name: "description",
                label: "Description",
                type: "string",
                isRequired: false,
                description: "Asset description",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should create text area field for text property", () => {
            const property = {
                name: "notes",
                label: "Notes",
                type: "text",
                isRequired: false,
                description: "Asset notes",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should create enum field for enum property", () => {
            const property = {
                name: "status",
                label: "Status",
                type: "enum",
                options: ["active", "inactive"],
                isRequired: true,
                description: "Asset status",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should create boolean field for boolean property", () => {
            const property = {
                name: "completed",
                label: "Completed",
                type: "boolean",
                isRequired: false,
                description: "Whether task is completed",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should create date field for date property", () => {
            const property = {
                name: "dueDate",
                label: "Due Date",
                type: "date",
                isRequired: false,
                description: "Task due date",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should create number field for number property", () => {
            const property = {
                name: "effort",
                label: "Effort",
                type: "number",
                isRequired: false,
                description: "Estimated effort in hours",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should create array field for array property", () => {
            const property = {
                name: "tags",
                label: "Tags",
                type: "array",
                isRequired: false,
                description: "Asset tags",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should show required indicator for required fields", () => {
            const property = {
                name: "title",
                label: "Title",
                type: "string",
                isRequired: true,
                description: "Asset title",
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
    });
    describe("Individual Field Type Tests", () => {
        let mockSetting;
        beforeEach(() => {
            mockSetting = {
                addDropdown: jest.fn().mockImplementation((callback) => {
                    const dropdown = { addOption: jest.fn(), onChange: jest.fn() };
                    callback(dropdown);
                    return mockSetting;
                }),
                addToggle: jest.fn().mockImplementation((callback) => {
                    const toggle = { onChange: jest.fn() };
                    callback(toggle);
                    return mockSetting;
                }),
                addText: jest.fn().mockImplementation((callback) => {
                    const text = {
                        setPlaceholder: jest.fn().mockReturnThis(),
                        onChange: jest.fn(),
                        inputEl: { type: "text" },
                    };
                    callback(text);
                    return mockSetting;
                }),
                addTextArea: jest.fn().mockImplementation((callback) => {
                    const textArea = {
                        setPlaceholder: jest.fn().mockReturnThis(),
                        onChange: jest.fn(),
                    };
                    callback(textArea);
                    return mockSetting;
                }),
            };
        });
        test("should create enum field with all options", () => {
            const property = {
                name: "priority",
                label: "Priority",
                type: "enum",
                options: ["low", "medium", "high"],
                isRequired: false,
            };
            modal.createEnumField(mockSetting, property);
            expect(mockSetting.addDropdown).toHaveBeenCalled();
        });
        test("should handle enum field selection", () => {
            const property = {
                name: "priority",
                label: "Priority",
                type: "enum",
                options: ["low", "medium", "high"],
                isRequired: false,
            };
            modal.createEnumField(mockSetting, property);
            // Simulate selection
            modal.propertyValues.set("priority", "high");
            expect(modal.propertyValues.get("priority")).toBe("high");
        });
        test("should create boolean field with toggle", () => {
            const property = {
                name: "active",
                label: "Active",
                type: "boolean",
                isRequired: false,
            };
            modal.createBooleanField(mockSetting, property);
            expect(mockSetting.addToggle).toHaveBeenCalled();
        });
        test("should handle boolean field changes", () => {
            const property = {
                name: "active",
                label: "Active",
                type: "boolean",
                isRequired: false,
            };
            modal.createBooleanField(mockSetting, property);
            // Simulate toggle
            modal.propertyValues.set("active", true);
            expect(modal.propertyValues.get("active")).toBe(true);
        });
        test("should create date field with correct input type", () => {
            const property = {
                name: "dueDate",
                label: "Due Date",
                type: "date",
                isRequired: false,
            };
            modal.createDateField(mockSetting, property);
            expect(mockSetting.addText).toHaveBeenCalled();
        });
        test("should create number field with validation", () => {
            const property = {
                name: "count",
                label: "Count",
                type: "number",
                isRequired: false,
            };
            modal.createNumberField(mockSetting, property);
            expect(mockSetting.addText).toHaveBeenCalled();
        });
        test("should create text area field", () => {
            const property = {
                name: "description",
                label: "Description",
                type: "text",
                isRequired: false,
            };
            modal.createTextAreaField(mockSetting, property);
            expect(mockSetting.addTextArea).toHaveBeenCalled();
        });
        test("should create array field for tags", () => {
            const property = {
                name: "tags",
                label: "Tags",
                type: "array",
                isRequired: false,
            };
            modal.createArrayField(mockSetting, property);
            expect(mockSetting.addText).toHaveBeenCalled();
        });
        test("should create basic text field as fallback", () => {
            const property = {
                name: "generic",
                label: "Generic",
                type: "unknown",
                isRequired: false,
            };
            modal.createTextField(mockSetting, property);
            expect(mockSetting.addText).toHaveBeenCalled();
        });
    });
    describe("Action Buttons Setup", () => {
        test("should setup create button", () => {
            const containerEl = document.createElement("div");
            modal.setupActionButtons(containerEl);
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
        test("should call createAsset when create button is clicked", async () => {
            const createAssetSpy = jest
                .spyOn(modal, "createAsset")
                .mockResolvedValue(undefined);
            const containerEl = document.createElement("div");
            modal.setupActionButtons(containerEl);
            // The button click is handled through the Setting mock
            expect(obsidian_1.Setting).toHaveBeenCalled();
        });
    });
    describe("Asset Creation", () => {
        test("should call createAssetUseCase.execute when creating asset", async () => {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: true,
                assetId: "test-id",
                message: "Asset created successfully",
            });
            modal.assetTitle = "Test Asset";
            modal.assetClass = "exo__Task";
            modal.assetOntology = "exo";
            modal.propertyValues.set("priority", "high");
            const closeSpy = jest.spyOn(modal, "close").mockImplementation(() => { });
            await modal.createAsset();
            expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith({
                title: "Test Asset",
                className: "exo__Task",
                ontologyPrefix: "exo",
                properties: {
                    priority: "high",
                },
            });
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Asset created successfully");
            expect(closeSpy).toHaveBeenCalled();
        });
        test("should show error notice when asset creation fails", async () => {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: false,
                assetId: "",
                message: "Creation failed",
            });
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Failed to create asset");
        });
        test("should handle errors during asset creation", async () => {
            const error = new Error("Network error");
            mockCreateAssetUseCase.execute.mockRejectedValue(error);
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Error: Network error");
        });
        test("should convert property values to plain object", async () => {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: true,
                assetId: "test-id",
                message: "Success",
            });
            modal.assetTitle = "Test Asset";
            modal.propertyValues.set("prop1", "value1");
            modal.propertyValues.set("prop2", "value2");
            await modal.createAsset();
            expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith(expect.objectContaining({
                properties: {
                    prop1: "value1",
                    prop2: "value2",
                },
            }));
        });
        test("should handle empty property values", async () => {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: true,
                assetId: "test-id",
                message: "Success",
            });
            modal.assetTitle = "Test Asset";
            await modal.createAsset();
            expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith(expect.objectContaining({
                properties: {},
            }));
        });
    });
    describe("Modal Cleanup", () => {
        test("should clear content on close", () => {
            const mockContentEl = document.createElement("div");
            const emptySpy = jest.spyOn(mockContentEl, "empty");
            modal.contentEl = mockContentEl;
            modal.onClose();
            expect(emptySpy).toHaveBeenCalled();
        });
        test("should handle DOM cleanup fallback", () => {
            const mockContentEl = document.createElement("div");
            // Remove the empty method to test fallback
            mockContentEl.empty = undefined;
            const child = document.createElement("div");
            mockContentEl.appendChild(child);
            modal.contentEl = mockContentEl;
            modal.onClose();
            // Should still complete without error
            expect(mockContentEl.children.length).toBe(0);
        });
    });
    describe("Input Validation", () => {
        test("should handle empty title field", async () => {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error("Asset title is required"));
            modal.assetTitle = "";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Error: Asset title is required");
        });
        test("should handle missing class field", async () => {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error("Asset class is required"));
            modal.assetTitle = "Test";
            modal.assetClass = "";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Error: Asset class is required");
        });
        test("should handle missing ontology field", async () => {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error("Ontology prefix is required"));
            modal.assetTitle = "Test";
            modal.assetOntology = "";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Error: Ontology prefix is required");
        });
        test("should handle whitespace-only title", async () => {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error("Asset title is required"));
            modal.assetTitle = "   \t\n   ";
            await modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith("Error: Asset title is required");
        });
    });
    describe("Property Value Handling", () => {
        test("should handle array values correctly", () => {
            const property = {
                name: "tags",
                label: "Tags",
                type: "array",
                isRequired: false,
                description: "Asset tags",
            };
            // Simulate array input processing
            modal.propertyValues.set(property.name, [
                "tag1",
                "tag2",
                "tag3",
            ]);
            const values = modal.propertyValues.get("tags");
            expect(values).toEqual(["tag1", "tag2", "tag3"]);
        });
        test("should handle wiki link values correctly", () => {
            const property = {
                name: "relatedTasks",
                label: "Related Tasks",
                type: "array",
                isRequired: false,
                description: "Related task links",
            };
            // Simulate wiki link processing
            modal.propertyValues.set(property.name, [
                "[[Task 1]]",
                "[[Task 2]]",
            ]);
            const values = modal.propertyValues.get("relatedTasks");
            expect(values).toEqual(["[[Task 1]]", "[[Task 2]]"]);
        });
        test("should handle number parsing correctly", () => {
            const property = {
                name: "effort",
                label: "Effort",
                type: "number",
                isRequired: false,
                description: "Effort in hours",
            };
            // Simulate number input
            modal.propertyValues.set(property.name, 42);
            const value = modal.propertyValues.get("effort");
            expect(value).toBe(42);
            expect(typeof value).toBe("number");
        });
        test("should handle invalid number input", () => {
            const property = {
                name: "effort",
                label: "Effort",
                type: "number",
                isRequired: false,
            };
            // Should not set invalid numbers
            const invalidNumber = "not-a-number";
            if (isNaN(parseFloat(invalidNumber))) {
                // Property should not be set
                expect(modal.propertyValues.has("effort")).toBe(false);
            }
        });
        test("should clear property values when empty", () => {
            modal.propertyValues.set("test", "value");
            // Simulate clearing a field
            modal.propertyValues.delete("test");
            expect(modal.propertyValues.has("test")).toBe(false);
        });
        test("should handle date input validation", () => {
            const property = {
                name: "dueDate",
                label: "Due Date",
                type: "date",
                isRequired: false,
            };
            // Valid date
            modal.propertyValues.set(property.name, "2024-12-31");
            expect(modal.propertyValues.get("dueDate")).toBe("2024-12-31");
            // Invalid date should not be set
            const invalidDate = "not-a-date";
            if (isNaN(Date.parse(invalidDate))) {
                modal.propertyValues.delete("dueDate");
            }
            expect(modal.propertyValues.has("dueDate")).toBe(false);
        });
        test("should handle boolean toggle values", () => {
            const property = {
                name: "active",
                label: "Active",
                type: "boolean",
                isRequired: false,
            };
            // Test true value
            modal.propertyValues.set(property.name, true);
            expect(modal.propertyValues.get("active")).toBe(true);
            // Test false value
            modal.propertyValues.set(property.name, false);
            expect(modal.propertyValues.get("active")).toBe(false);
        });
        test("should handle complex array parsing", () => {
            const input = '[[Link 1]], [[Link 2]], simple, "quoted item"';
            const links = input.match(/\[\[([^\]]+)\]\]/g) || [];
            const items = input
                .split(",")
                .map((s) => s.trim())
                .filter((s) => s);
            if (links.length > 0) {
                modal.propertyValues.set("test", links);
            }
            else {
                modal.propertyValues.set("test", items);
            }
            expect(modal.propertyValues.get("test")).toEqual([
                "[[Link 1]]",
                "[[Link 2]]",
            ]);
        });
    });
    describe("Container Cleanup Scenarios", () => {
        test("should handle properties container cleanup with Obsidian method", async () => {
            const mockContainer = document.createElement("div");
            mockContainer.empty = jest.fn();
            modal.propertiesContainer = mockContainer;
            await modal.updatePropertiesForClass("TestClass");
            expect(mockContainer.empty).toHaveBeenCalled();
        });
        test("should handle properties container cleanup with DOM fallback", async () => {
            const mockContainer = document.createElement("div");
            const child1 = document.createElement("div");
            const child2 = document.createElement("div");
            mockContainer.appendChild(child1);
            mockContainer.appendChild(child2);
            // Remove Obsidian empty method to test fallback
            mockContainer.empty = undefined;
            modal.propertiesContainer = mockContainer;
            app.vault.getMarkdownFiles.mockReturnValue([]);
            await modal.updatePropertiesForClass("TestClass");
            expect(mockContainer.children.length).toBe(1); // Should have the "no properties" message
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,