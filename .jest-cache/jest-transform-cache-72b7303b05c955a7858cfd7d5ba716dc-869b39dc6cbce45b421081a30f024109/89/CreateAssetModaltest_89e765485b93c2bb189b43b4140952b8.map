{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/modals/CreateAssetModal.test.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/modals/CreateAssetModal.test.ts"],"sourcesContent":["import { App, Setting, Notice } from \"obsidian\";\nimport { CreateAssetModal } from \"../../../../src/presentation/modals/CreateAssetModal\";\nimport { CreateAssetUseCase } from \"../../../../src/application/use-cases/CreateAssetUseCase\";\nimport { DIContainer } from \"../../../../src/infrastructure/container/DIContainer\";\n\n// Mock DIContainer\njest.mock(\"../../../../src/infrastructure/container/DIContainer\");\n\n// Mock Notice\njest.mock(\"obsidian\", () => {\n  const actual = jest.requireActual(\"obsidian\");\n  return {\n    ...actual,\n    Notice: jest.fn(),\n    Setting: jest.fn().mockImplementation(() => ({\n      setName: jest.fn().mockReturnThis(),\n      setDesc: jest.fn().mockReturnThis(),\n      addText: jest.fn().mockReturnThis(),\n      addDropdown: jest.fn().mockReturnThis(),\n      addToggle: jest.fn().mockReturnThis(),\n      addTextArea: jest.fn().mockReturnThis(),\n      addButton: jest.fn().mockReturnThis(),\n    })),\n  };\n});\n\n// Extend HTMLElement to include Obsidian-specific methods\ndeclare global {\n  interface HTMLElement {\n    createEl(tag: string, attrs?: any): HTMLElement;\n    createDiv(attrs?: any): HTMLElement;\n    empty(): void;\n  }\n}\n\n// Add Obsidian DOM extensions to HTMLElement prototype\nbeforeAll(() => {\n  HTMLElement.prototype.createEl = jest.fn().mockImplementation(function (\n    this: HTMLElement,\n    tag: string,\n    attrs?: any,\n  ) {\n    const element = document.createElement(tag);\n    if (attrs?.text) element.textContent = attrs.text;\n    if (attrs?.cls) element.className = attrs.cls;\n    // Append to parent (this) like real Obsidian createEl does\n    this.appendChild(element);\n    return element;\n  });\n\n  HTMLElement.prototype.createDiv = jest.fn().mockImplementation(function (\n    this: HTMLElement,\n    attrs?: any,\n  ) {\n    const element = document.createElement(\"div\");\n    if (attrs?.cls) element.className = attrs.cls;\n    // Append to parent (this) like real Obsidian createDiv does\n    this.appendChild(element);\n    return element;\n  });\n\n  HTMLElement.prototype.empty = jest.fn().mockImplementation(() => {\n    // Mock empty implementation - in real Obsidian this clears the element\n  });\n});\n\ndescribe(\"CreateAssetModal\", () => {\n  let app: App;\n  let modal: CreateAssetModal;\n  let mockCreateAssetUseCase: jest.Mocked<CreateAssetUseCase>;\n  let mockContainer: jest.Mocked<DIContainer>;\n\n  beforeEach(() => {\n    // Setup app mock with vault and metadataCache\n    app = new App();\n    (app as any).vault = {\n      getMarkdownFiles: jest.fn().mockReturnValue([]),\n      read: jest.fn(),\n    };\n    (app as any).metadataCache = {\n      getFileCache: jest.fn().mockReturnValue(null),\n    };\n\n    // Setup CreateAssetUseCase mock\n    mockCreateAssetUseCase = {\n      execute: jest.fn(),\n    } as any;\n\n    // Setup DIContainer mock\n    mockContainer = {\n      getCreateAssetUseCase: jest.fn().mockReturnValue(mockCreateAssetUseCase),\n      getInstance: jest.fn().mockReturnThis(),\n      resolve: jest.fn().mockImplementation((token: string) => {\n        // Return empty mock repositories\n        return {};\n      }),\n    } as any;\n\n    (DIContainer.getInstance as jest.Mock).mockReturnValue(mockContainer);\n\n    // Create modal instance\n    modal = new CreateAssetModal(app);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe(\"Modal Initialization\", () => {\n    test(\"should create modal with default values\", () => {\n      expect(modal).toBeDefined();\n      expect(modal.app).toBe(app);\n    });\n\n    test(\"should initialize with DIContainer\", () => {\n      expect(DIContainer.getInstance).toHaveBeenCalled();\n      expect(mockContainer.getCreateAssetUseCase).toHaveBeenCalled();\n    });\n\n    test(\"should have default asset values\", () => {\n      expect((modal as any).assetTitle).toBe(\"\");\n      expect((modal as any).assetClass).toBe(\"exo__Asset\");\n      expect((modal as any).assetOntology).toBe(\"\");\n      expect((modal as any).propertyValues).toBeInstanceOf(Map);\n    });\n\n    test(\"should initialize empty properties list\", () => {\n      expect((modal as any).properties).toEqual([]);\n      expect((modal as any).propertiesContainer).toBeNull();\n    });\n  });\n\n  describe(\"Modal Opening\", () => {\n    test(\"should setup UI elements when opened\", async () => {\n      const mockContentEl = document.createElement(\"div\");\n      (modal as any).contentEl = mockContentEl;\n\n      await modal.onOpen();\n\n      expect(mockContentEl.createEl).toHaveBeenCalledWith(\"h2\", {\n        text: \"Create ExoAsset\",\n      });\n    });\n\n    test(\"should setup all required fields\", async () => {\n      const mockContentEl = document.createElement(\"div\");\n      (modal as any).contentEl = mockContentEl;\n\n      const setupTitleFieldSpy = jest.spyOn(modal as any, \"setupTitleField\");\n      const setupClassFieldSpy = jest.spyOn(modal as any, \"setupClassField\");\n      const setupOntologyFieldSpy = jest.spyOn(\n        modal as any,\n        \"setupOntologyField\",\n      );\n      const setupPropertiesSectionSpy = jest.spyOn(\n        modal as any,\n        \"setupPropertiesSection\",\n      );\n      const setupActionButtonsSpy = jest.spyOn(\n        modal as any,\n        \"setupActionButtons\",\n      );\n\n      await modal.onOpen();\n\n      expect(setupTitleFieldSpy).toHaveBeenCalled();\n      expect(setupClassFieldSpy).toHaveBeenCalled();\n      expect(setupOntologyFieldSpy).toHaveBeenCalled();\n      expect(setupPropertiesSectionSpy).toHaveBeenCalled();\n      expect(setupActionButtonsSpy).toHaveBeenCalled();\n    });\n\n    test(\"should handle errors during modal opening gracefully\", async () => {\n      const mockContentEl = document.createElement(\"div\");\n      (modal as any).contentEl = mockContentEl;\n\n      // Mock setupClassField to throw error\n      jest\n        .spyOn(modal as any, \"setupClassField\")\n        .mockRejectedValue(new Error(\"Setup failed\"));\n\n      await expect(modal.onOpen()).rejects.toThrow(\"Setup failed\");\n    });\n  });\n\n  describe(\"Title Field Setup\", () => {\n    test(\"should setup title field correctly\", async () => {\n      const containerEl = document.createElement(\"div\");\n\n      await (modal as any).setupTitleField(containerEl);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should update assetTitle when title changes\", async () => {\n      const containerEl = document.createElement(\"div\");\n\n      await (modal as any).setupTitleField(containerEl);\n\n      // Simulate title change\n      const testTitle = \"Test Asset Title\";\n      (modal as any).assetTitle = testTitle;\n\n      expect((modal as any).assetTitle).toBe(testTitle);\n    });\n\n    test(\"should handle long titles\", async () => {\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupTitleField(containerEl);\n\n      const longTitle = \"A\".repeat(1000);\n      (modal as any).assetTitle = longTitle;\n\n      expect((modal as any).assetTitle).toBe(longTitle);\n    });\n\n    test(\"should handle special characters in titles\", async () => {\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupTitleField(containerEl);\n\n      const specialTitle = \"Test!@#$%^&*()_+{}|:\\\"<>?[]\\\\;',./ Asset\";\n      (modal as any).assetTitle = specialTitle;\n\n      expect((modal as any).assetTitle).toBe(specialTitle);\n    });\n  });\n\n  describe(\"Class Field Setup\", () => {\n    test(\"should setup class field correctly\", async () => {\n      const containerEl = document.createElement(\"div\");\n\n      await (modal as any).setupClassField(containerEl);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should have default class value\", () => {\n      expect((modal as any).assetClass).toBe(\"exo__Asset\");\n    });\n\n    test(\"should discover classes from vault files\", async () => {\n      const mockFiles = [\n        { basename: \"TestClass\", name: \"TestClass.md\" },\n        { basename: \"AnotherClass\", name: \"AnotherClass.md\" },\n      ];\n\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue(mockFiles);\n      (app.metadataCache.getFileCache as jest.Mock)\n        .mockReturnValueOnce({\n          frontmatter: {\n            exo__Instance_class: \"exo__Class\",\n            rdfs__label: \"Test Class\",\n          },\n        })\n        .mockReturnValueOnce({\n          frontmatter: {\n            exo__Instance_class: \"[[exo__Class]]\",\n            rdfs__label: \"Another Class\",\n          },\n        });\n\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupClassField(containerEl);\n\n      expect(app.vault.getMarkdownFiles).toHaveBeenCalled();\n      expect(app.metadataCache.getFileCache).toHaveBeenCalledTimes(2);\n    });\n\n    test(\"should provide default classes when none found\", async () => {\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupClassField(containerEl);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should handle vault access errors\", async () => {\n      (app.vault.getMarkdownFiles as jest.Mock).mockImplementation(() => {\n        throw new Error(\"Vault access error\");\n      });\n\n      const containerEl = document.createElement(\"div\");\n      await expect((modal as any).setupClassField(containerEl)).rejects.toThrow(\n        \"Vault access error\",\n      );\n    });\n\n    test(\"should update properties when class changes\", async () => {\n      const containerEl = document.createElement(\"div\");\n      const updatePropertiesForClassSpy = jest\n        .spyOn(modal as any, \"updatePropertiesForClass\")\n        .mockResolvedValue(undefined);\n\n      await (modal as any).setupClassField(containerEl);\n\n      // Simulate class change\n      const newClass = \"exo__Task\";\n      (modal as any).assetClass = newClass;\n\n      expect((modal as any).assetClass).toBe(newClass);\n    });\n  });\n\n  describe(\"Ontology Field Setup\", () => {\n    test(\"should setup ontology field correctly\", async () => {\n      const containerEl = document.createElement(\"div\");\n\n      await (modal as any).setupOntologyField(containerEl);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should discover ontologies from vault files\", async () => {\n      const mockFiles = [\n        { name: \"!test-ontology.md\", basename: \"!test-ontology\" },\n        { name: \"!another-onto.md\", basename: \"!another-onto\" },\n      ];\n\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue(mockFiles);\n      (app.metadataCache.getFileCache as jest.Mock)\n        .mockReturnValueOnce({\n          frontmatter: {\n            exo__Ontology_prefix: \"test\",\n            rdfs__label: \"Test Ontology\",\n          },\n        })\n        .mockReturnValueOnce({\n          frontmatter: {\n            exo__Ontology_prefix: \"another\",\n            rdfs__label: \"Another Ontology\",\n          },\n        });\n\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupOntologyField(containerEl);\n\n      expect(app.vault.getMarkdownFiles).toHaveBeenCalled();\n    });\n\n    test(\"should handle empty ontology list\", async () => {\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupOntologyField(containerEl);\n\n      expect(containerEl).toBeDefined();\n    });\n\n    test(\"should set default ontology correctly\", async () => {\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupOntologyField(containerEl);\n\n      expect((modal as any).assetOntology).toBe(\"exo\");\n    });\n  });\n\n  describe(\"Properties Section Setup\", () => {\n    test(\"should setup properties section correctly\", async () => {\n      const containerEl = document.createElement(\"div\");\n\n      await (modal as any).setupPropertiesSection(containerEl);\n\n      expect(containerEl.createEl).toHaveBeenCalledWith(\"h3\", {\n        text: \"Properties\",\n        cls: \"exocortex-properties-header\",\n      });\n      expect(containerEl.createDiv).toHaveBeenCalledWith({\n        cls: \"exocortex-properties-container\",\n      });\n    });\n\n    test(\"should update properties for default class\", async () => {\n      const containerEl = document.createElement(\"div\");\n      const updatePropertiesForClassSpy = jest\n        .spyOn(modal as any, \"updatePropertiesForClass\")\n        .mockResolvedValue(undefined);\n\n      await (modal as any).setupPropertiesSection(containerEl);\n\n      expect(updatePropertiesForClassSpy).toHaveBeenCalledWith(\"exo__Asset\");\n    });\n\n    test(\"should create properties container with correct class\", async () => {\n      const containerEl = document.createElement(\"div\");\n      await (modal as any).setupPropertiesSection(containerEl);\n\n      expect(containerEl.createDiv).toHaveBeenCalledWith({\n        cls: \"exocortex-properties-container\",\n      });\n    });\n  });\n\n  describe(\"Properties Management\", () => {\n    beforeEach(() => {\n      const mockPropertiesContainer = document.createElement(\"div\");\n      mockPropertiesContainer.empty = jest.fn();\n      mockPropertiesContainer.createEl = jest\n        .fn()\n        .mockReturnValue(document.createElement(\"p\"));\n      (modal as any).propertiesContainer = mockPropertiesContainer;\n    });\n\n    test(\"should clear existing properties when updating for new class\", async () => {\n      (modal as any).propertyValues.set(\"test\", \"value\");\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      await (modal as any).updatePropertiesForClass(\"exo__Task\");\n\n      expect((modal as any).propertiesContainer.empty).toHaveBeenCalled();\n      expect((modal as any).propertyValues.size).toBe(0);\n    });\n\n    test(\"should add default properties for exo__Asset class\", async () => {\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      await (modal as any).updatePropertiesForClass(\"exo__Asset\");\n\n      expect((modal as any).properties).toHaveLength(2); // description and tags\n      expect((modal as any).properties[0].name).toBe(\"description\");\n      expect((modal as any).properties[1].name).toBe(\"tags\");\n    });\n\n    test(\"should discover properties from vault for specific class\", async () => {\n      const mockFiles = [{ basename: \"propertyName\", name: \"propertyName.md\" }];\n\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue(mockFiles);\n      (app.metadataCache.getFileCache as jest.Mock).mockReturnValue({\n        frontmatter: {\n          exo__Instance_class: \"exo__Property\",\n          rdfs__domain: \"TestClass\",\n          rdfs__label: \"Test Property\",\n          rdfs__comment: \"A test property\",\n          rdfs__range: \"string\",\n          exo__Property_isRequired: true,\n        },\n      });\n\n      await (modal as any).updatePropertiesForClass(\"TestClass\");\n\n      expect((modal as any).properties).toHaveLength(1);\n      expect((modal as any).properties[0].name).toBe(\"propertyName\");\n      expect((modal as any).properties[0].isRequired).toBe(true);\n    });\n\n    test(\"should handle properties with array domains\", async () => {\n      const mockFiles = [\n        { basename: \"multiDomainProp\", name: \"multiDomainProp.md\" },\n      ];\n\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue(mockFiles);\n      (app.metadataCache.getFileCache as jest.Mock).mockReturnValue({\n        frontmatter: {\n          exo__Instance_class: \"exo__Property\",\n          rdfs__domain: [\"TestClass\", \"AnotherClass\"],\n          rdfs__label: \"Multi Domain Property\",\n          rdfs__range: \"string\",\n        },\n      });\n\n      await (modal as any).updatePropertiesForClass(\"TestClass\");\n\n      expect((modal as any).properties).toHaveLength(1);\n      expect((modal as any).properties[0].name).toBe(\"multiDomainProp\");\n    });\n\n    test(\"should map different ranges to correct types\", async () => {\n      const containerEl = document.createElement(\"div\");\n      (modal as any).propertiesContainer = containerEl;\n\n      // Test different range mappings\n      expect((modal as any).mapRangeToType(\"select\")).toBe(\"enum\");\n      expect((modal as any).mapRangeToType(\"boolean\")).toBe(\"boolean\");\n      expect((modal as any).mapRangeToType(\"date\")).toBe(\"date\");\n      expect((modal as any).mapRangeToType(\"integer\")).toBe(\"number\");\n      expect((modal as any).mapRangeToType(\"string[]\")).toBe(\"array\");\n      expect((modal as any).mapRangeToType(\"text\")).toBe(\"text\");\n      expect((modal as any).mapRangeToType(\"unknown\")).toBe(\"string\");\n    });\n\n    test(\"should handle enum properties with options\", async () => {\n      const mockFiles = [{ basename: \"statusProp\", name: \"statusProp.md\" }];\n\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue(mockFiles);\n      (app.metadataCache.getFileCache as jest.Mock).mockReturnValue({\n        frontmatter: {\n          exo__Instance_class: \"exo__Property\",\n          rdfs__domain: \"TestClass\",\n          rdfs__range: \"select\",\n          exo__Property_options: [\"active\", \"inactive\", \"pending\"],\n        },\n      });\n\n      await (modal as any).updatePropertiesForClass(\"TestClass\");\n\n      expect((modal as any).properties).toHaveLength(1);\n      expect((modal as any).properties[0].type).toBe(\"enum\");\n      expect((modal as any).properties[0].options).toEqual([\n        \"active\",\n        \"inactive\",\n        \"pending\",\n      ]);\n    });\n\n    test(\"should show no properties message when none found\", async () => {\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      await (modal as any).updatePropertiesForClass(\"UnknownClass\");\n\n      expect((modal as any).propertiesContainer.createEl).toHaveBeenCalledWith(\n        \"p\",\n        {\n          text: \"No specific properties for this class\",\n          cls: \"exocortex-no-properties\",\n        },\n      );\n    });\n  });\n\n  describe(\"Property Field Creation\", () => {\n    let mockPropertiesContainer: HTMLElement;\n\n    beforeEach(() => {\n      mockPropertiesContainer = document.createElement(\"div\");\n      (modal as any).propertiesContainer = mockPropertiesContainer;\n    });\n\n    test(\"should create text field for string property\", () => {\n      const property = {\n        name: \"description\",\n        label: \"Description\",\n        type: \"string\",\n        isRequired: false,\n        description: \"Asset description\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should create text area field for text property\", () => {\n      const property = {\n        name: \"notes\",\n        label: \"Notes\",\n        type: \"text\",\n        isRequired: false,\n        description: \"Asset notes\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should create enum field for enum property\", () => {\n      const property = {\n        name: \"status\",\n        label: \"Status\",\n        type: \"enum\",\n        options: [\"active\", \"inactive\"],\n        isRequired: true,\n        description: \"Asset status\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should create boolean field for boolean property\", () => {\n      const property = {\n        name: \"completed\",\n        label: \"Completed\",\n        type: \"boolean\",\n        isRequired: false,\n        description: \"Whether task is completed\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should create date field for date property\", () => {\n      const property = {\n        name: \"dueDate\",\n        label: \"Due Date\",\n        type: \"date\",\n        isRequired: false,\n        description: \"Task due date\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should create number field for number property\", () => {\n      const property = {\n        name: \"effort\",\n        label: \"Effort\",\n        type: \"number\",\n        isRequired: false,\n        description: \"Estimated effort in hours\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should create array field for array property\", () => {\n      const property = {\n        name: \"tags\",\n        label: \"Tags\",\n        type: \"array\",\n        isRequired: false,\n        description: \"Asset tags\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should show required indicator for required fields\", () => {\n      const property = {\n        name: \"title\",\n        label: \"Title\",\n        type: \"string\",\n        isRequired: true,\n        description: \"Asset title\",\n      };\n\n      (modal as any).createPropertyField(property);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Individual Field Type Tests\", () => {\n    let mockSetting: any;\n\n    beforeEach(() => {\n      mockSetting = {\n        addDropdown: jest.fn().mockImplementation((callback) => {\n          const dropdown = { addOption: jest.fn(), onChange: jest.fn() };\n          callback(dropdown);\n          return mockSetting;\n        }),\n        addToggle: jest.fn().mockImplementation((callback) => {\n          const toggle = { onChange: jest.fn() };\n          callback(toggle);\n          return mockSetting;\n        }),\n        addText: jest.fn().mockImplementation((callback) => {\n          const text = {\n            setPlaceholder: jest.fn().mockReturnThis(),\n            onChange: jest.fn(),\n            inputEl: { type: \"text\" },\n          };\n          callback(text);\n          return mockSetting;\n        }),\n        addTextArea: jest.fn().mockImplementation((callback) => {\n          const textArea = {\n            setPlaceholder: jest.fn().mockReturnThis(),\n            onChange: jest.fn(),\n          };\n          callback(textArea);\n          return mockSetting;\n        }),\n      };\n    });\n\n    test(\"should create enum field with all options\", () => {\n      const property = {\n        name: \"priority\",\n        label: \"Priority\",\n        type: \"enum\",\n        options: [\"low\", \"medium\", \"high\"],\n        isRequired: false,\n      };\n\n      (modal as any).createEnumField(mockSetting, property);\n\n      expect(mockSetting.addDropdown).toHaveBeenCalled();\n    });\n\n    test(\"should handle enum field selection\", () => {\n      const property = {\n        name: \"priority\",\n        label: \"Priority\",\n        type: \"enum\",\n        options: [\"low\", \"medium\", \"high\"],\n        isRequired: false,\n      };\n\n      (modal as any).createEnumField(mockSetting, property);\n\n      // Simulate selection\n      (modal as any).propertyValues.set(\"priority\", \"high\");\n      expect((modal as any).propertyValues.get(\"priority\")).toBe(\"high\");\n    });\n\n    test(\"should create boolean field with toggle\", () => {\n      const property = {\n        name: \"active\",\n        label: \"Active\",\n        type: \"boolean\",\n        isRequired: false,\n      };\n\n      (modal as any).createBooleanField(mockSetting, property);\n\n      expect(mockSetting.addToggle).toHaveBeenCalled();\n    });\n\n    test(\"should handle boolean field changes\", () => {\n      const property = {\n        name: \"active\",\n        label: \"Active\",\n        type: \"boolean\",\n        isRequired: false,\n      };\n\n      (modal as any).createBooleanField(mockSetting, property);\n\n      // Simulate toggle\n      (modal as any).propertyValues.set(\"active\", true);\n      expect((modal as any).propertyValues.get(\"active\")).toBe(true);\n    });\n\n    test(\"should create date field with correct input type\", () => {\n      const property = {\n        name: \"dueDate\",\n        label: \"Due Date\",\n        type: \"date\",\n        isRequired: false,\n      };\n\n      (modal as any).createDateField(mockSetting, property);\n\n      expect(mockSetting.addText).toHaveBeenCalled();\n    });\n\n    test(\"should create number field with validation\", () => {\n      const property = {\n        name: \"count\",\n        label: \"Count\",\n        type: \"number\",\n        isRequired: false,\n      };\n\n      (modal as any).createNumberField(mockSetting, property);\n\n      expect(mockSetting.addText).toHaveBeenCalled();\n    });\n\n    test(\"should create text area field\", () => {\n      const property = {\n        name: \"description\",\n        label: \"Description\",\n        type: \"text\",\n        isRequired: false,\n      };\n\n      (modal as any).createTextAreaField(mockSetting, property);\n\n      expect(mockSetting.addTextArea).toHaveBeenCalled();\n    });\n\n    test(\"should create array field for tags\", () => {\n      const property = {\n        name: \"tags\",\n        label: \"Tags\",\n        type: \"array\",\n        isRequired: false,\n      };\n\n      (modal as any).createArrayField(mockSetting, property);\n\n      expect(mockSetting.addText).toHaveBeenCalled();\n    });\n\n    test(\"should create basic text field as fallback\", () => {\n      const property = {\n        name: \"generic\",\n        label: \"Generic\",\n        type: \"unknown\",\n        isRequired: false,\n      };\n\n      (modal as any).createTextField(mockSetting, property);\n\n      expect(mockSetting.addText).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Action Buttons Setup\", () => {\n    test(\"should setup create button\", () => {\n      const containerEl = document.createElement(\"div\");\n\n      (modal as any).setupActionButtons(containerEl);\n\n      expect(Setting).toHaveBeenCalled();\n    });\n\n    test(\"should call createAsset when create button is clicked\", async () => {\n      const createAssetSpy = jest\n        .spyOn(modal as any, \"createAsset\")\n        .mockResolvedValue(undefined);\n      const containerEl = document.createElement(\"div\");\n\n      (modal as any).setupActionButtons(containerEl);\n\n      // The button click is handled through the Setting mock\n      expect(Setting).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Asset Creation\", () => {\n    test(\"should call createAssetUseCase.execute when creating asset\", async () => {\n      mockCreateAssetUseCase.execute.mockResolvedValue({\n        success: true,\n        assetId: \"test-id\",\n        message: \"Asset created successfully\",\n      });\n\n      (modal as any).assetTitle = \"Test Asset\";\n      (modal as any).assetClass = \"exo__Task\";\n      (modal as any).assetOntology = \"exo\";\n      (modal as any).propertyValues.set(\"priority\", \"high\");\n\n      const closeSpy = jest.spyOn(modal, \"close\").mockImplementation(() => {});\n\n      await (modal as any).createAsset();\n\n      expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith({\n        title: \"Test Asset\",\n        className: \"exo__Task\",\n        ontologyPrefix: \"exo\",\n        properties: {\n          priority: \"high\",\n        },\n      });\n\n      expect(Notice).toHaveBeenCalledWith(\"Asset created successfully\");\n      expect(closeSpy).toHaveBeenCalled();\n    });\n\n    test(\"should show error notice when asset creation fails\", async () => {\n      mockCreateAssetUseCase.execute.mockResolvedValue({\n        success: false,\n        assetId: \"\",\n        message: \"Creation failed\",\n      });\n\n      (modal as any).assetTitle = \"Test Asset\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Failed to create asset\");\n    });\n\n    test(\"should handle errors during asset creation\", async () => {\n      const error = new Error(\"Network error\");\n      mockCreateAssetUseCase.execute.mockRejectedValue(error);\n\n      (modal as any).assetTitle = \"Test Asset\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Error: Network error\");\n    });\n\n    test(\"should convert property values to plain object\", async () => {\n      mockCreateAssetUseCase.execute.mockResolvedValue({\n        success: true,\n        assetId: \"test-id\",\n        message: \"Success\",\n      });\n\n      (modal as any).assetTitle = \"Test Asset\";\n      (modal as any).propertyValues.set(\"prop1\", \"value1\");\n      (modal as any).propertyValues.set(\"prop2\", \"value2\");\n\n      await (modal as any).createAsset();\n\n      expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith(\n        expect.objectContaining({\n          properties: {\n            prop1: \"value1\",\n            prop2: \"value2\",\n          },\n        }),\n      );\n    });\n\n    test(\"should handle empty property values\", async () => {\n      mockCreateAssetUseCase.execute.mockResolvedValue({\n        success: true,\n        assetId: \"test-id\",\n        message: \"Success\",\n      });\n\n      (modal as any).assetTitle = \"Test Asset\";\n\n      await (modal as any).createAsset();\n\n      expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith(\n        expect.objectContaining({\n          properties: {},\n        }),\n      );\n    });\n  });\n\n  describe(\"Modal Cleanup\", () => {\n    test(\"should clear content on close\", () => {\n      const mockContentEl = document.createElement(\"div\");\n      const emptySpy = jest.spyOn(mockContentEl, \"empty\");\n      (modal as any).contentEl = mockContentEl;\n\n      modal.onClose();\n\n      expect(emptySpy).toHaveBeenCalled();\n    });\n\n    test(\"should handle DOM cleanup fallback\", () => {\n      const mockContentEl = document.createElement(\"div\");\n      // Remove the empty method to test fallback\n      (mockContentEl as any).empty = undefined;\n\n      const child = document.createElement(\"div\");\n      mockContentEl.appendChild(child);\n      (modal as any).contentEl = mockContentEl;\n\n      modal.onClose();\n\n      // Should still complete without error\n      expect(mockContentEl.children.length).toBe(0);\n    });\n  });\n\n  describe(\"Input Validation\", () => {\n    test(\"should handle empty title field\", async () => {\n      mockCreateAssetUseCase.execute.mockRejectedValue(\n        new Error(\"Asset title is required\"),\n      );\n\n      (modal as any).assetTitle = \"\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Error: Asset title is required\");\n    });\n\n    test(\"should handle missing class field\", async () => {\n      mockCreateAssetUseCase.execute.mockRejectedValue(\n        new Error(\"Asset class is required\"),\n      );\n\n      (modal as any).assetTitle = \"Test\";\n      (modal as any).assetClass = \"\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Error: Asset class is required\");\n    });\n\n    test(\"should handle missing ontology field\", async () => {\n      mockCreateAssetUseCase.execute.mockRejectedValue(\n        new Error(\"Ontology prefix is required\"),\n      );\n\n      (modal as any).assetTitle = \"Test\";\n      (modal as any).assetOntology = \"\";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Error: Ontology prefix is required\");\n    });\n\n    test(\"should handle whitespace-only title\", async () => {\n      mockCreateAssetUseCase.execute.mockRejectedValue(\n        new Error(\"Asset title is required\"),\n      );\n\n      (modal as any).assetTitle = \"   \\t\\n   \";\n\n      await (modal as any).createAsset();\n\n      expect(Notice).toHaveBeenCalledWith(\"Error: Asset title is required\");\n    });\n  });\n\n  describe(\"Property Value Handling\", () => {\n    test(\"should handle array values correctly\", () => {\n      const property = {\n        name: \"tags\",\n        label: \"Tags\",\n        type: \"array\",\n        isRequired: false,\n        description: \"Asset tags\",\n      };\n\n      // Simulate array input processing\n      (modal as any).propertyValues.set(property.name, [\n        \"tag1\",\n        \"tag2\",\n        \"tag3\",\n      ]);\n\n      const values = (modal as any).propertyValues.get(\"tags\");\n      expect(values).toEqual([\"tag1\", \"tag2\", \"tag3\"]);\n    });\n\n    test(\"should handle wiki link values correctly\", () => {\n      const property = {\n        name: \"relatedTasks\",\n        label: \"Related Tasks\",\n        type: \"array\",\n        isRequired: false,\n        description: \"Related task links\",\n      };\n\n      // Simulate wiki link processing\n      (modal as any).propertyValues.set(property.name, [\n        \"[[Task 1]]\",\n        \"[[Task 2]]\",\n      ]);\n\n      const values = (modal as any).propertyValues.get(\"relatedTasks\");\n      expect(values).toEqual([\"[[Task 1]]\", \"[[Task 2]]\"]);\n    });\n\n    test(\"should handle number parsing correctly\", () => {\n      const property = {\n        name: \"effort\",\n        label: \"Effort\",\n        type: \"number\",\n        isRequired: false,\n        description: \"Effort in hours\",\n      };\n\n      // Simulate number input\n      (modal as any).propertyValues.set(property.name, 42);\n\n      const value = (modal as any).propertyValues.get(\"effort\");\n      expect(value).toBe(42);\n      expect(typeof value).toBe(\"number\");\n    });\n\n    test(\"should handle invalid number input\", () => {\n      const property = {\n        name: \"effort\",\n        label: \"Effort\",\n        type: \"number\",\n        isRequired: false,\n      };\n\n      // Should not set invalid numbers\n      const invalidNumber = \"not-a-number\";\n      if (isNaN(parseFloat(invalidNumber))) {\n        // Property should not be set\n        expect((modal as any).propertyValues.has(\"effort\")).toBe(false);\n      }\n    });\n\n    test(\"should clear property values when empty\", () => {\n      (modal as any).propertyValues.set(\"test\", \"value\");\n\n      // Simulate clearing a field\n      (modal as any).propertyValues.delete(\"test\");\n\n      expect((modal as any).propertyValues.has(\"test\")).toBe(false);\n    });\n\n    test(\"should handle date input validation\", () => {\n      const property = {\n        name: \"dueDate\",\n        label: \"Due Date\",\n        type: \"date\",\n        isRequired: false,\n      };\n\n      // Valid date\n      (modal as any).propertyValues.set(property.name, \"2024-12-31\");\n      expect((modal as any).propertyValues.get(\"dueDate\")).toBe(\"2024-12-31\");\n\n      // Invalid date should not be set\n      const invalidDate = \"not-a-date\";\n      if (isNaN(Date.parse(invalidDate))) {\n        (modal as any).propertyValues.delete(\"dueDate\");\n      }\n      expect((modal as any).propertyValues.has(\"dueDate\")).toBe(false);\n    });\n\n    test(\"should handle boolean toggle values\", () => {\n      const property = {\n        name: \"active\",\n        label: \"Active\",\n        type: \"boolean\",\n        isRequired: false,\n      };\n\n      // Test true value\n      (modal as any).propertyValues.set(property.name, true);\n      expect((modal as any).propertyValues.get(\"active\")).toBe(true);\n\n      // Test false value\n      (modal as any).propertyValues.set(property.name, false);\n      expect((modal as any).propertyValues.get(\"active\")).toBe(false);\n    });\n\n    test(\"should handle complex array parsing\", () => {\n      const input = '[[Link 1]], [[Link 2]], simple, \"quoted item\"';\n      const links = input.match(/\\[\\[([^\\]]+)\\]\\]/g) || [];\n      const items = input\n        .split(\",\")\n        .map((s) => s.trim())\n        .filter((s) => s);\n\n      if (links.length > 0) {\n        (modal as any).propertyValues.set(\"test\", links);\n      } else {\n        (modal as any).propertyValues.set(\"test\", items);\n      }\n\n      expect((modal as any).propertyValues.get(\"test\")).toEqual([\n        \"[[Link 1]]\",\n        \"[[Link 2]]\",\n      ]);\n    });\n  });\n\n  describe(\"Container Cleanup Scenarios\", () => {\n    test(\"should handle properties container cleanup with Obsidian method\", async () => {\n      const mockContainer = document.createElement(\"div\");\n      mockContainer.empty = jest.fn();\n      (modal as any).propertiesContainer = mockContainer;\n\n      await (modal as any).updatePropertiesForClass(\"TestClass\");\n\n      expect(mockContainer.empty).toHaveBeenCalled();\n    });\n\n    test(\"should handle properties container cleanup with DOM fallback\", async () => {\n      const mockContainer = document.createElement(\"div\");\n      const child1 = document.createElement(\"div\");\n      const child2 = document.createElement(\"div\");\n      mockContainer.appendChild(child1);\n      mockContainer.appendChild(child2);\n\n      // Remove Obsidian empty method to test fallback\n      (mockContainer as any).empty = undefined;\n\n      (modal as any).propertiesContainer = mockContainer;\n      (app.vault.getMarkdownFiles as jest.Mock).mockReturnValue([]);\n\n      await (modal as any).updatePropertiesForClass(\"TestClass\");\n\n      expect(mockContainer.children.length).toBe(1); // Should have the \"no properties\" message\n    });\n  });\n});\n"],"version":3}