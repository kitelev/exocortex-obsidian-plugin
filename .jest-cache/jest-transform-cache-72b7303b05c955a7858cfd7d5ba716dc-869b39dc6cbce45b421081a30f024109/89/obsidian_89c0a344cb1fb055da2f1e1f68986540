337fa50af7689711a9928d789014e03d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MobileTestUtils = exports.Platform = exports.moment = exports.debounce = exports.requestUrl = exports.normalizePath = exports.FileManager = exports.MarkdownRenderer = exports.Component = exports.MetadataCache = exports.Workspace = exports.Vault = exports.App = exports.WorkspaceLeaf = exports.TFile = exports.MarkdownView = exports.Notice = exports.DropdownComponent = exports.ButtonComponent = exports.ToggleComponent = exports.TextAreaComponent = exports.TextComponent = exports.Setting = exports.PluginSettingTab = exports.Modal = exports.Plugin = void 0;
// Setup DOM extensions
if (typeof document !== "undefined") {
    const proto = HTMLElement.prototype;
    if (!proto.createEl) {
        proto.createEl = function (tag, options) {
            const el = document.createElement(tag);
            if (options?.text)
                el.textContent = options.text;
            if (options?.cls)
                el.className = options.cls;
            if (options?.attr) {
                for (const [key, value] of Object.entries(options.attr)) {
                    el.setAttribute(key, String(value));
                }
            }
            this.appendChild(el);
            return el;
        };
    }
    if (!proto.createDiv) {
        proto.createDiv = function (options) {
            const el = document.createElement("div");
            if (options?.cls)
                el.className = options.cls;
            if (options?.text)
                el.textContent = options.text;
            this.appendChild(el);
            return el;
        };
    }
    if (!proto.empty) {
        proto.empty = function () {
            while (this.firstChild) {
                this.removeChild(this.firstChild);
            }
        };
    }
    if (!proto.addClass) {
        proto.addClass = function (cls) {
            this.classList.add(cls);
        };
    }
    if (!proto.removeClass) {
        proto.removeClass = function (cls) {
            this.classList.remove(cls);
        };
    }
    if (!proto.hasClass) {
        proto.hasClass = function (cls) {
            return this.classList.contains(cls);
        };
    }
}
class Plugin {
    constructor(app, manifest) {
        this.app = app;
        this.manifest = manifest;
    }
    async loadData() {
        return {};
    }
    async saveData(data) { }
    addCommand(command) { }
    addRibbonIcon(icon, title, callback) {
        const el = document.createElement("div");
        el.addClass = jest.fn();
        return el;
    }
    addSettingTab(settingTab) { }
    registerEvent(event) { }
    registerInterval(interval) {
        return interval;
    }
    registerMarkdownCodeBlockProcessor(language, handler) {
        // Mock implementation for SPARQL processor registration
        // Store the handler for potential testing
        this.codeBlockProcessor = handler;
    }
    registerMarkdownPostProcessor(processor) {
        this.markdownPostProcessor = processor;
    }
    registerView(type, viewCreator) {
        this.registeredViews = this.registeredViews || {};
        this.registeredViews[type] = viewCreator;
    }
    addStatusBarItem() {
        return document.createElement("div");
    }
    async onload() {
        // Override in actual plugin
    }
    async onunload() {
        // Override in actual plugin
    }
}
exports.Plugin = Plugin;
class Modal {
    constructor(app) {
        this.app = app;
        this.contentEl = document.createElement("div");
        this.modalEl = document.createElement("div");
        // Set up Obsidian-style DOM methods on modalEl
        this.setupObsidianMethods(this.contentEl);
        this.setupObsidianMethods(this.modalEl);
    }
    setupObsidianMethods(el) {
        if (!el.addClass) {
            el.addClass = function (cls) {
                this.classList.add(cls);
            };
        }
        if (!el.removeClass) {
            el.removeClass = function (cls) {
                this.classList.remove(cls);
            };
        }
        if (!el.hasClass) {
            el.hasClass = function (cls) {
                return this.classList.contains(cls);
            };
        }
        if (!el.createEl) {
            el.createEl = function (tag, options) {
                const element = document.createElement(tag);
                if (options?.text)
                    element.textContent = options.text;
                if (options?.cls)
                    element.className = options.cls;
                if (options?.attr) {
                    for (const [key, value] of Object.entries(options.attr)) {
                        element.setAttribute(key, String(value));
                    }
                }
                this.appendChild(element);
                return element;
            };
        }
        if (!el.empty) {
            el.empty = function () {
                while (this.firstChild) {
                    this.removeChild(this.firstChild);
                }
            };
        }
    }
    open() {
        // Create backdrop and add modal to DOM
        this.backdrop = document.createElement("div");
        this.backdrop.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      display: flex;
      align-items: flex-end;
      justify-content: center;
      transition: opacity 0.3s ease;
    `;
        document.body.appendChild(this.backdrop);
        this.backdrop.appendChild(this.modalEl);
        this.onOpen();
    }
    close() {
        this.onClose();
        if (this.backdrop) {
            document.body.removeChild(this.backdrop);
            this.backdrop = undefined;
        }
    }
    onOpen() { }
    onClose() { }
}
exports.Modal = Modal;
class PluginSettingTab {
    constructor(app, plugin) {
        this.app = app;
        this.containerEl = document.createElement("div");
    }
    display() { }
    hide() { }
}
exports.PluginSettingTab = PluginSettingTab;
class Setting {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.nameEl = document.createElement("div");
        this.descEl = document.createElement("div");
        this.controlEl = document.createElement("div");
        // Add Obsidian-specific methods to container
        this.setupContainerMethods(containerEl);
    }
    setupContainerMethods(el) {
        if (!el.createEl) {
            el.createEl = function (tag, options) {
                const element = document.createElement(tag);
                if (options?.text)
                    element.textContent = options.text;
                if (options?.cls)
                    element.className = options.cls;
                this.appendChild(element);
                return element;
            };
        }
        if (!el.createDiv) {
            el.createDiv = function (options) {
                const element = document.createElement("div");
                if (options?.cls)
                    element.className = options.cls;
                this.appendChild(element);
                return element;
            };
        }
        if (!el.empty) {
            el.empty = function () {
                while (this.firstChild) {
                    this.removeChild(this.firstChild);
                }
            };
        }
    }
    setName(name) {
        return this;
    }
    setDesc(desc) {
        return this;
    }
    addText(cb) {
        cb(new TextComponent(this.containerEl));
        return this;
    }
    addTextArea(cb) {
        cb(new TextAreaComponent(this.containerEl));
        return this;
    }
    addToggle(cb) {
        cb(new ToggleComponent(this.containerEl));
        return this;
    }
    addButton(cb) {
        cb(new ButtonComponent(this.containerEl));
        return this;
    }
    addDropdown(cb) {
        cb(new DropdownComponent(this.containerEl));
        return this;
    }
}
exports.Setting = Setting;
class TextComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.inputEl = document.createElement("input");
    }
    setPlaceholder(placeholder) {
        return this;
    }
    setValue(value) {
        this.inputEl.value = value;
        return this;
    }
    onChange(callback) {
        return this;
    }
}
exports.TextComponent = TextComponent;
class TextAreaComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.inputEl = document.createElement("textarea");
    }
    setPlaceholder(placeholder) {
        return this;
    }
    setValue(value) {
        this.inputEl.value = value;
        return this;
    }
    onChange(callback) {
        return this;
    }
}
exports.TextAreaComponent = TextAreaComponent;
class ToggleComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.toggleEl = document.createElement("input");
    }
    setValue(value) {
        return this;
    }
    onChange(callback) {
        return this;
    }
}
exports.ToggleComponent = ToggleComponent;
class ButtonComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.buttonEl = document.createElement("button");
        // Add Obsidian DOM extensions to button element
        if (!this.buttonEl.addClass) {
            this.buttonEl.addClass = function (cls) {
                this.classList.add(cls);
            };
        }
        if (!this.buttonEl.removeClass) {
            this.buttonEl.removeClass = function (cls) {
                this.classList.remove(cls);
            };
        }
        containerEl.appendChild(this.buttonEl);
    }
    setButtonText(text) {
        this.buttonEl.textContent = text;
        return this;
    }
    setCta() {
        this.buttonEl.addClass("mod-cta");
        return this;
    }
    onClick(callback) {
        this.buttonEl.addEventListener("click", callback);
        return this;
    }
    setTooltip(tooltip) {
        this.buttonEl.setAttribute("title", tooltip);
        return this;
    }
    setClass(cls) {
        this.buttonEl.className = cls;
        return this;
    }
}
exports.ButtonComponent = ButtonComponent;
class DropdownComponent {
    constructor(containerEl) {
        this.containerEl = containerEl;
        this.selectEl = document.createElement("select");
        containerEl.appendChild(this.selectEl);
    }
    addOption(value, display) {
        const option = document.createElement("option");
        option.value = value;
        option.textContent = display || value;
        this.selectEl.appendChild(option);
        return this;
    }
    setValue(value) {
        this.selectEl.value = value;
        return this;
    }
    onChange(callback) {
        this.selectEl.addEventListener("change", () => callback(this.selectEl.value));
        return this;
    }
}
exports.DropdownComponent = DropdownComponent;
class Notice {
    constructor(message) { }
}
exports.Notice = Notice;
class MarkdownView {
    constructor() {
        this.previewMode = {
            rerender: jest.fn(),
        };
    }
}
exports.MarkdownView = MarkdownView;
class TFile {
    constructor(path) {
        this.path = path || "";
        this.basename = path
            ? path
                .split("/")
                .pop()
                ?.replace(/\.[^/.]+$/, "") || ""
            : "";
        this.extension = path ? path.split(".").pop() || "" : "";
    }
}
exports.TFile = TFile;
class WorkspaceLeaf {
    constructor() {
        this.view = null;
    }
    openFile(file) {
        return Promise.resolve();
    }
}
exports.WorkspaceLeaf = WorkspaceLeaf;
class App {
    constructor() {
        this.vault = new Vault();
        this.workspace = new Workspace();
        this.metadataCache = new MetadataCache();
    }
}
exports.App = App;
class Vault {
    constructor() {
        this.mockFiles = [];
        this.adapter = {
            read: jest.fn().mockRejectedValue(new Error("File not found")),
            write: jest.fn().mockResolvedValue(undefined),
            exists: jest.fn().mockResolvedValue(false),
            mkdir: jest.fn().mockResolvedValue(undefined),
            remove: jest.fn().mockResolvedValue(undefined),
            list: jest.fn().mockResolvedValue({ files: [], folders: [] }),
        };
    }
    getFiles() {
        return this.mockFiles;
    }
    getMarkdownFiles() {
        return this.mockFiles.filter((file) => file.extension === "md");
    }
    getAbstractFileByPath(path) {
        return this.mockFiles.find((file) => file.path === path) || null;
    }
    create(path, content) {
        const file = new TFile(path);
        this.mockFiles.push(file);
        return Promise.resolve(file);
    }
    async read(file) {
        if (typeof file === "string") {
            // Mock reading by path
            return Promise.resolve("Mock file content");
        }
        // Mock reading from TFile
        return Promise.resolve("Mock file content");
    }
    async modify(file, content) {
        // Mock file modification
        return Promise.resolve();
    }
    async delete(file) {
        const index = this.mockFiles.indexOf(file);
        if (index > -1) {
            this.mockFiles.splice(index, 1);
        }
        return Promise.resolve();
    }
    async rename(file, newPath) {
        const targetFile = this.mockFiles.find(f => f === file);
        if (targetFile) {
            targetFile.path = newPath;
            targetFile.name = newPath.split('/').pop() || '';
        }
        return Promise.resolve();
    }
    getAllLoadedFiles() {
        return this.mockFiles;
    }
    async createFolder(path) {
        // Mock folder creation
        return Promise.resolve();
    }
    async exists(path) {
        return this.mockFiles.some((file) => file.path === path);
    }
    on(event, callback) {
        // Return an EventRef-like object that registerEvent expects
        return {
            e: {
                target: this,
                fn: callback,
                event: event,
            },
        };
    }
    off(event, callback) {
        // Mock implementation for removing event listeners
    }
    // Helper method for testing
    __addMockFile(path, content) {
        const file = new TFile(path);
        this.mockFiles.push(file);
        return file;
    }
    // Helper method to clear mock files for tests
    __clearMockFiles() {
        this.mockFiles = [];
    }
}
exports.Vault = Vault;
class Workspace {
    constructor() {
        this.activeFile = null;
        this.leaves = [];
    }
    getActiveFile() {
        return this.activeFile;
    }
    getLeaf(newLeaf) {
        if (newLeaf || this.leaves.length === 0) {
            const leaf = new WorkspaceLeaf();
            this.leaves.push(leaf);
            return leaf;
        }
        return this.leaves[0];
    }
    iterateAllLeaves(callback) {
        this.leaves.forEach(callback);
    }
    getActiveViewOfType(type) {
        return null;
    }
    openLinkText(linkText, sourcePath) {
        // Mock implementation for opening links
    }
    on(name, callback) {
        // Mock event listener
    }
    off(name, callback) {
        // Mock event listener removal
    }
    trigger(name, ...data) {
        // Mock event triggering
    }
    // Helper method for testing
    __setActiveFile(file) {
        this.activeFile = file;
    }
}
exports.Workspace = Workspace;
class MetadataCache {
    constructor() {
        this.cache = new Map();
    }
    getFileCache(file) {
        return (this.cache.get(file.path) || {
            frontmatter: {},
            sections: [],
            headings: [],
            links: [],
            embeds: [],
            tags: [],
        });
    }
    getBacklinksForFile(file) {
        return {
            data: new Map(),
            count: () => 0,
            keys: () => [],
        };
    }
    getFrontmatterPropertyValue(file, property) {
        const cache = this.getFileCache(file);
        return cache.frontmatter?.[property];
    }
    on(name, callback) {
        // Mock event listener
    }
    off(name, callback) {
        // Mock event listener removal
    }
    // Helper method for testing
    __setFileCache(path, cache) {
        this.cache.set(path, cache);
    }
    // Helper method to clear cache for tests
    __clearCache() {
        this.cache.clear();
    }
}
exports.MetadataCache = MetadataCache;
class Component {
    load() { }
    onload() { }
    unload() { }
    onunload() { }
    addChild(component) {
        return component;
    }
    removeChild(component) {
        return component;
    }
}
exports.Component = Component;
class MarkdownRenderer {
    static renderMarkdown(markdown, el, sourcePath, component) {
        el.innerHTML = markdown;
        return Promise.resolve();
    }
}
exports.MarkdownRenderer = MarkdownRenderer;
class FileManager {
    generateMarkdownLink(file, sourcePath) {
        return `[[${file.basename}]]`;
    }
}
exports.FileManager = FileManager;
// Mock normalizePath function
function normalizePath(path) {
    return path.replace(/\\/g, "/");
}
exports.normalizePath = normalizePath;
// Mock requestUrl function
function requestUrl(request) {
    return Promise.resolve({
        status: 200,
        json: {},
        text: "",
        arrayBuffer: new ArrayBuffer(0),
    });
}
exports.requestUrl = requestUrl;
// Mock debounce function
function debounce(func, wait, immediate) {
    return func; // Simplified mock - just return the function as-is for testing
}
exports.debounce = debounce;
// Mock moment if needed
exports.moment = {
    now: () => Date.now(),
    unix: (timestamp) => ({
        format: (format) => new Date(timestamp * 1000).toISOString(),
    }),
};
// Mock Platform API - Enhanced for Mobile Testing
exports.Platform = {
    isMobile: process.env.TEST_PLATFORM === "mobile" || false,
    isMobileApp: process.env.TEST_PLATFORM === "mobile" || false,
    isIosApp: process.env.TEST_PLATFORM === "ios" || false,
    isAndroidApp: process.env.TEST_PLATFORM === "android" || false,
    isTablet: process.env.TEST_PLATFORM === "tablet" || false,
    isDesktop: process.env.TEST_PLATFORM !== "mobile" &&
        process.env.TEST_PLATFORM !== "tablet",
    isWin: false,
    isMacOS: true,
    isLinux: false,
};
// Setup mobile environment mocks
if (typeof window !== "undefined" && typeof document !== "undefined") {
    // Touch Event Support
    if (!window.TouchEvent) {
        class MockTouchEvent extends Event {
            constructor(type, eventInitDict) {
                super(type, eventInitDict);
                const createTouchList = (touches) => {
                    const list = (touches || []);
                    list.item = (index) => list[index] || null;
                    return list;
                };
                this.touches = createTouchList(eventInitDict?.touches);
                this.changedTouches = createTouchList(eventInitDict?.changedTouches);
                this.targetTouches = createTouchList(eventInitDict?.targetTouches);
            }
        }
        window.TouchEvent = MockTouchEvent;
    }
    // Pointer Event Support
    if (!window.PointerEvent) {
        class MockPointerEvent extends Event {
            constructor(type, eventInitDict) {
                super(type, eventInitDict);
                this.pointerId = eventInitDict?.pointerId || 0;
                this.pointerType = eventInitDict?.pointerType || "touch";
                this.clientX = eventInitDict?.clientX || 0;
                this.clientY = eventInitDict?.clientY || 0;
            }
        }
        window.PointerEvent = MockPointerEvent;
    }
    // Touch capability detection
    if (!("ontouchstart" in window)) {
        Object.defineProperty(window, "ontouchstart", {
            value: null,
            configurable: true,
            writable: true,
        });
    }
    // Navigator enhancements for mobile testing
    Object.defineProperty(navigator, "maxTouchPoints", {
        value: process.env.TEST_PLATFORM === "mobile" ? 10 : 0,
        configurable: true,
    });
    Object.defineProperty(navigator, "msMaxTouchPoints", {
        value: process.env.TEST_PLATFORM === "mobile" ? 10 : 0,
        configurable: true,
    });
    // Vibration API mock
    if (!navigator.vibrate) {
        Object.defineProperty(navigator, "vibrate", {
            value: jest.fn((pattern) => {
                console.log(`Mock vibrate called with:`, pattern);
                return true;
            }),
            configurable: true,
            writable: true,
        });
    }
    // Device Memory API mock
    Object.defineProperty(navigator, "deviceMemory", {
        value: process.env.TEST_PLATFORM === "mobile" ? 4 : 8,
        configurable: true,
    });
    // Network Information API mock
    Object.defineProperty(navigator, "connection", {
        value: {
            effectiveType: process.env.TEST_PLATFORM === "mobile" ? "3g" : "4g",
            type: "cellular",
            downlink: process.env.TEST_PLATFORM === "mobile" ? 1.5 : 10,
        },
        configurable: true,
    });
    // Battery API mock
    Object.defineProperty(navigator, "getBattery", {
        value: () => Promise.resolve({
            level: 0.75,
            charging: false,
            chargingTime: Infinity,
            dischargingTime: 7200,
        }),
        configurable: true,
    });
    // Mock Capacitor for Obsidian mobile detection
    if (process.env.TEST_PLATFORM === "mobile") {
        window.Capacitor = {
            platform: process.env.TEST_PLATFORM === "ios" ? "ios" : "android",
            isNative: true,
        };
        window.ObsidianMobile = {
            version: "1.0.0",
            platform: process.env.TEST_PLATFORM === "ios" ? "ios" : "android",
        };
    }
    // Performance memory mock
    if (!performance.memory && process.env.TEST_PLATFORM === "mobile") {
        Object.defineProperty(performance, "memory", {
            value: {
                usedJSHeapSize: 50 * 1024 * 1024,
                totalJSHeapSize: 100 * 1024 * 1024,
                jsHeapSizeLimit: 512 * 1024 * 1024, // 512MB for mobile
            },
            configurable: true,
        });
    }
    // Mock requestAnimationFrame and cancelAnimationFrame if not present
    if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = jest.fn((callback) => {
            const id = setTimeout(() => callback(performance.now()), 16);
            return id;
        });
    }
    if (!window.cancelAnimationFrame) {
        window.cancelAnimationFrame = jest.fn((id) => {
            clearTimeout(id);
        });
    }
    // Mock screen orientation API
    if (!screen.orientation) {
        Object.defineProperty(screen, "orientation", {
            value: {
                angle: 0,
                type: "portrait-primary",
                addEventListener: jest.fn(),
                removeEventListener: jest.fn(),
            },
            configurable: true,
        });
    }
    // Mock matchMedia for responsive design tests
    if (!window.matchMedia) {
        window.matchMedia = jest.fn((query) => ({
            matches: query.includes("max-width: 768px")
                ? process.env.TEST_PLATFORM === "mobile"
                : false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn(),
        }));
    }
    // Mock CSS support detection
    if (!window.CSS) {
        Object.defineProperty(window, "CSS", {
            value: {
                supports: jest.fn((property) => {
                    // Mock support for safe-area CSS
                    return property.includes("safe-area") || property.includes("env(");
                }),
            },
            configurable: true,
        });
    }
    // Mock computed style for safe area detection
    const originalGetComputedStyle = window.getComputedStyle;
    window.getComputedStyle = jest.fn((element) => {
        const mockStyle = {
            getPropertyValue: jest.fn((prop) => {
                // Mock safe area insets for iOS
                const safeAreaMap = {
                    "env(safe-area-inset-top)": process.env.TEST_PLATFORM === "ios" ? "44px" : "0px",
                    "env(safe-area-inset-bottom)": process.env.TEST_PLATFORM === "ios" ? "34px" : "0px",
                    "env(safe-area-inset-left)": "0px",
                    "env(safe-area-inset-right)": "0px",
                };
                return safeAreaMap[prop] || "0px";
            }),
            ...(originalGetComputedStyle ? originalGetComputedStyle(element) : {}),
        };
        return mockStyle;
    });
    // Mock user agent for mobile detection
    const mobileUserAgents = {
        ios: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
        android: "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Mobile Safari/537.36",
        tablet: "Mozilla/5.0 (iPad; CPU OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1",
        desktop: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
    };
    if (process.env.TEST_PLATFORM &&
        process.env.TEST_PLATFORM in mobileUserAgents) {
        Object.defineProperty(navigator, "userAgent", {
            value: mobileUserAgents[process.env.TEST_PLATFORM],
            configurable: true,
        });
    }
    // Mock platform for mobile detection
    const platformMap = {
        ios: "iPhone",
        android: "Linux armv8l",
        tablet: "iPad",
        desktop: "MacIntel",
    };
    if (process.env.TEST_PLATFORM && process.env.TEST_PLATFORM in platformMap) {
        Object.defineProperty(navigator, "platform", {
            value: platformMap[process.env.TEST_PLATFORM],
            configurable: true,
        });
    }
    // Mock inner dimensions for different screen sizes
    const screenDimensions = {
        mobile: { width: 375, height: 667 },
        ios: { width: 375, height: 667 },
        android: { width: 412, height: 892 },
        tablet: { width: 768, height: 1024 },
        desktop: { width: 1920, height: 1080 },
    };
    if (process.env.TEST_PLATFORM &&
        process.env.TEST_PLATFORM in screenDimensions) {
        const dimensions = screenDimensions[process.env.TEST_PLATFORM];
        Object.defineProperty(window, "innerWidth", {
            value: dimensions.width,
            configurable: true,
        });
        Object.defineProperty(window, "innerHeight", {
            value: dimensions.height,
            configurable: true,
        });
        Object.defineProperty(screen, "width", {
            value: dimensions.width,
            configurable: true,
        });
        Object.defineProperty(screen, "height", {
            value: dimensions.height,
            configurable: true,
        });
    }
}
// Export mobile testing utilities
exports.MobileTestUtils = {
    /**
     * Set the test platform for mobile tests
     */
    setPlatform(platform) {
        process.env.TEST_PLATFORM = platform;
        // Force refresh of cached values
        if (typeof window !== "undefined") {
            // Trigger platform detection refresh if available
            window.__PLATFORM_REFRESH__?.();
        }
    },
    /**
     * Create a mock touch event for testing
     */
    createTouchEvent(type, touches, target) {
        const touchList = touches.map((touch, index) => ({
            identifier: touch.id || index,
            clientX: touch.x,
            clientY: touch.y,
            pageX: touch.x,
            pageY: touch.y,
            screenX: touch.x,
            screenY: touch.y,
            target: target || document.body,
        }));
        const event = new TouchEvent(type, {
            touches: type === "touchend" || type === "touchcancel" ? [] : touchList,
            changedTouches: touchList,
            targetTouches: type === "touchend" || type === "touchcancel" ? [] : touchList,
            bubbles: true,
            cancelable: true,
        });
        event.preventDefault = jest.fn();
        event.stopPropagation = jest.fn();
        return event;
    },
    /**
     * Mock device capabilities for testing
     */
    mockDeviceCapabilities(capabilities) {
        if (capabilities.vibration !== undefined) {
            Object.defineProperty(navigator, "vibrate", {
                value: capabilities.vibration ? jest.fn() : undefined,
                configurable: true,
            });
        }
        if (capabilities.geolocation !== undefined) {
            Object.defineProperty(navigator, "geolocation", {
                value: capabilities.geolocation
                    ? {
                        getCurrentPosition: jest.fn(),
                        watchPosition: jest.fn(),
                        clearWatch: jest.fn(),
                    }
                    : undefined,
                configurable: true,
            });
        }
        if (capabilities.memory !== undefined) {
            Object.defineProperty(navigator, "deviceMemory", {
                value: capabilities.memory,
                configurable: true,
            });
        }
        if (capabilities.connection !== undefined) {
            Object.defineProperty(navigator, "connection", {
                value: {
                    effectiveType: capabilities.connection,
                    type: "cellular",
                    downlink: capabilities.connection === "4g" ? 10 : 1.5,
                },
                configurable: true,
            });
        }
    },
    /**
     * Reset all mobile mocks to default state
     */
    reset() {
        delete process.env.TEST_PLATFORM;
        // Reset other mock states as needed
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,