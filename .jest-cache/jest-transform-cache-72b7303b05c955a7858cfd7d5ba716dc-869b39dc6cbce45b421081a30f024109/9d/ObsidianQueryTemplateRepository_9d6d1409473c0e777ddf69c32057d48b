e795c614de0b7080883409ff492d41a1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianQueryTemplateRepository = void 0;
const QueryTemplate_1 = require("../../domain/visual/QueryTemplate");
const BuiltInQueryTemplates_1 = require("./BuiltInQueryTemplates");
class ObsidianQueryTemplateRepository {
    constructor(app, templatesPath = ".exocortex/templates", usageDataPath = ".exocortex/template-usage.json") {
        this.app = app;
        this.templateCache = new Map();
        this.usageData = new Map();
        this.cacheLoaded = false;
        this.templatesPath = templatesPath;
        this.usageDataPath = usageDataPath;
    }
    async findAll() {
        await this.ensureCacheLoaded();
        const templates = Array.from(this.templateCache.values());
        // Sort by usage frequency and then by name
        return templates.sort((a, b) => {
            const usageA = this.usageData.get(a.getId())?.usageCount || 0;
            const usageB = this.usageData.get(b.getId())?.usageCount || 0;
            if (usageA !== usageB) {
                return usageB - usageA;
            }
            return a.getMetadata().name.localeCompare(b.getMetadata().name);
        });
    }
    async findByCriteria(criteria) {
        await this.ensureCacheLoaded();
        let templates = Array.from(this.templateCache.values());
        if (criteria.category) {
            templates = templates.filter((t) => t.getMetadata().category === criteria.category);
        }
        if (criteria.difficulty) {
            templates = templates.filter((t) => t.getMetadata().difficulty === criteria.difficulty);
        }
        if (criteria.nameContains) {
            const searchTerm = criteria.nameContains.toLowerCase();
            templates = templates.filter((t) => t.getMetadata().name.toLowerCase().includes(searchTerm) ||
                t.getMetadata().description.toLowerCase().includes(searchTerm));
        }
        if (criteria.tags && criteria.tags.length > 0) {
            templates = templates.filter((t) => {
                const templateTags = t.getMetadata().tags;
                return criteria.tags.some((tag) => templateTags.includes(tag));
            });
        }
        if (criteria.includeBuiltIn !== undefined) {
            templates = templates.filter((t) => t.isBuiltInTemplate() === criteria.includeBuiltIn);
        }
        if (criteria.includeCustom !== undefined) {
            templates = templates.filter((t) => !t.isBuiltInTemplate() === criteria.includeCustom);
        }
        return templates;
    }
    async findById(id) {
        await this.ensureCacheLoaded();
        return this.templateCache.get(id);
    }
    async findByCategory(category) {
        return this.findByCriteria({ category });
    }
    async findByTags(tags) {
        return this.findByCriteria({ tags });
    }
    async save(template) {
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot modify built-in templates");
        }
        const exists = await this.exists(template.getId());
        if (exists) {
            return this.update(template);
        }
        else {
            return this.create(template);
        }
    }
    async create(template) {
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot create built-in templates through repository");
        }
        const exists = await this.exists(template.getId());
        if (exists) {
            throw new Error(`Template with ID ${template.getId()} already exists`);
        }
        await this.ensureTemplatesDirectoryExists();
        const fileName = `${this.sanitizeFileName(template.getMetadata().name)}-${template.getId()}.json`;
        const filePath = `${this.templatesPath}/${fileName}`;
        const data = {
            id: template.getId(),
            metadata: template.getMetadata(),
            layout: template.getLayout(),
            parameters: template.getParameters(),
            sparqlTemplate: template.getSparqlTemplate(),
            isBuiltIn: template.isBuiltInTemplate(),
        };
        await this.app.vault.create(filePath, JSON.stringify(data, null, 2));
        this.templateCache.set(template.getId(), template);
        return template;
    }
    async update(template) {
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot modify built-in templates");
        }
        const exists = await this.exists(template.getId());
        if (!exists) {
            throw new Error(`Template with ID ${template.getId()} not found`);
        }
        await this.ensureTemplatesDirectoryExists();
        const fileName = await this.findTemplateFile(template.getId());
        if (!fileName) {
            throw new Error(`Template file not found for ID ${template.getId()}`);
        }
        const filePath = `${this.templatesPath}/${fileName}`;
        const file = this.app.vault.getAbstractFileByPath(filePath);
        const data = {
            id: template.getId(),
            metadata: template.getMetadata(),
            layout: template.getLayout(),
            parameters: template.getParameters(),
            sparqlTemplate: template.getSparqlTemplate(),
            isBuiltIn: template.isBuiltInTemplate(),
        };
        await this.app.vault.modify(file, JSON.stringify(data, null, 2));
        this.templateCache.set(template.getId(), template);
        return template;
    }
    async delete(id) {
        const template = await this.findById(id);
        if (!template) {
            return false;
        }
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot delete built-in templates");
        }
        const fileName = await this.findTemplateFile(id);
        if (!fileName) {
            return false;
        }
        const filePath = `${this.templatesPath}/${fileName}`;
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file) {
            await this.app.vault.delete(file);
            this.templateCache.delete(id);
            this.usageData.delete(id);
            await this.saveUsageData();
            return true;
        }
        return false;
    }
    async exists(id) {
        await this.ensureCacheLoaded();
        return this.templateCache.has(id);
    }
    async importTemplates(templatesData) {
        const imported = [];
        for (const templateData of templatesData) {
            try {
                const data = templateData;
                // Don't import if already exists and is built-in
                const existing = this.templateCache.get(data.id);
                if (existing && existing.isBuiltInTemplate()) {
                    continue;
                }
                const template = this.createTemplateFromData(data);
                await this.save(template);
                imported.push(template);
            }
            catch (error) {
                console.warn("Failed to import template:", error);
            }
        }
        return imported;
    }
    async exportTemplates(templateIds) {
        await this.ensureCacheLoaded();
        let templates;
        if (templateIds) {
            templates = templateIds
                .map((id) => this.templateCache.get(id))
                .filter((t) => t !== undefined);
        }
        else {
            templates = Array.from(this.templateCache.values());
        }
        return templates.map((template) => template.toJSON());
    }
    async getBuiltInTemplates() {
        return this.findByCriteria({ includeBuiltIn: true, includeCustom: false });
    }
    async getCustomTemplates() {
        return this.findByCriteria({ includeBuiltIn: false, includeCustom: true });
    }
    async getRecentlyUsed(limit = 10) {
        await this.ensureCacheLoaded();
        const templateUsage = Array.from(this.usageData.entries())
            .sort((a, b) => b[1].lastUsed.getTime() - a[1].lastUsed.getTime())
            .slice(0, limit);
        return templateUsage
            .map(([id]) => this.templateCache.get(id))
            .filter((t) => t !== undefined);
    }
    async recordUsage(templateId) {
        await this.ensureCacheLoaded();
        const existing = this.usageData.get(templateId);
        if (existing) {
            existing.usageCount++;
            existing.lastUsed = new Date();
        }
        else {
            this.usageData.set(templateId, {
                templateId,
                usageCount: 1,
                lastUsed: new Date(),
                parametersFilled: [],
            });
        }
        await this.saveUsageData();
    }
    async getUsageStats(templateId) {
        await this.ensureCacheLoaded();
        const usage = this.usageData.get(templateId);
        if (!usage) {
            return { usageCount: 0 };
        }
        const averageParametersFilled = usage.parametersFilled.length > 0
            ? usage.parametersFilled.reduce((sum, count) => sum + count, 0) /
                usage.parametersFilled.length
            : undefined;
        return {
            usageCount: usage.usageCount,
            lastUsed: usage.lastUsed,
            averageParametersFilled,
        };
    }
    async refresh() {
        this.templateCache.clear();
        this.usageData.clear();
        this.cacheLoaded = false;
        await this.loadBuiltInTemplates();
        await this.loadCustomTemplates();
        await this.loadUsageData();
        this.cacheLoaded = true;
    }
    async ensureCacheLoaded() {
        if (!this.cacheLoaded) {
            await this.refresh();
        }
    }
    async ensureTemplatesDirectoryExists() {
        const templatesDir = this.app.vault.getAbstractFileByPath(this.templatesPath);
        if (!templatesDir) {
            await this.app.vault.createFolder(this.templatesPath);
        }
    }
    async loadBuiltInTemplates() {
        const builtInTemplates = BuiltInQueryTemplates_1.BuiltInQueryTemplates.getAll();
        builtInTemplates.forEach((template) => {
            this.templateCache.set(template.getId(), template);
        });
    }
    async loadCustomTemplates() {
        await this.ensureTemplatesDirectoryExists();
        const templatesDir = this.app.vault.getAbstractFileByPath(this.templatesPath);
        if (!templatesDir || !templatesDir.children) {
            return;
        }
        const files = templatesDir.children.filter((file) => file.extension === "json" && file.name.endsWith(".json"));
        for (const file of files) {
            try {
                const content = await this.app.vault.read(file);
                const data = JSON.parse(content);
                const template = this.createTemplateFromData(data);
                this.templateCache.set(template.getId(), template);
            }
            catch (error) {
                console.warn(`Failed to load template from ${file.path}:`, error);
            }
        }
    }
    async loadUsageData() {
        try {
            const file = this.app.vault.getAbstractFileByPath(this.usageDataPath);
            if (file) {
                const content = await this.app.vault.read(file);
                const data = JSON.parse(content);
                this.usageData.clear();
                data.forEach((usage) => {
                    usage.lastUsed = new Date(usage.lastUsed);
                    this.usageData.set(usage.templateId, usage);
                });
            }
        }
        catch (error) {
            // Usage data file doesn't exist or is corrupted - start fresh
            this.usageData.clear();
        }
    }
    async saveUsageData() {
        const data = Array.from(this.usageData.values());
        const content = JSON.stringify(data, null, 2);
        const file = this.app.vault.getAbstractFileByPath(this.usageDataPath);
        if (file) {
            await this.app.vault.modify(file, content);
        }
        else {
            await this.app.vault.create(this.usageDataPath, content);
        }
    }
    async findTemplateFile(templateId) {
        await this.ensureTemplatesDirectoryExists();
        const templatesDir = this.app.vault.getAbstractFileByPath(this.templatesPath);
        if (!templatesDir || !templatesDir.children) {
            return null;
        }
        const files = templatesDir.children.filter((file) => file.extension === "json" && file.name.includes(templateId));
        return files.length > 0 ? files[0].name : null;
    }
    createTemplateFromData(data) {
        return new QueryTemplate_1.QueryTemplate({
            id: data.id,
            metadata: data.metadata,
            layout: data.layout,
            parameters: data.parameters,
            sparqlTemplate: data.sparqlTemplate || "SELECT * WHERE { ?s ?p ?o }",
            isBuiltIn: data.isBuiltIn,
        });
    }
    sanitizeFileName(name) {
        return name
            .toLowerCase()
            .replace(/[^\w\s-]/g, "")
            .replace(/\s+/g, "-")
            .substring(0, 50);
    }
}
exports.ObsidianQueryTemplateRepository = ObsidianQueryTemplateRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,