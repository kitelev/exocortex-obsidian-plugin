0716931e6282239f24975c1d4d21329e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TaskId_1 = require("../../../../src/domain/value-objects/TaskId");
describe('TaskId', () => {
    describe('create', () => {
        it('should create a valid TaskId with UUID', () => {
            const validUuid = '550e8400-e29b-41d4-a716-446655440000';
            const result = TaskId_1.TaskId.create(validUuid);
            expect(result.isSuccess).toBe(true);
            expect(result.getValue().toString()).toBe(validUuid);
        });
        it('should reject empty string', () => {
            const result = TaskId_1.TaskId.create('');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('TaskId cannot be empty');
        });
        it('should reject invalid UUID format', () => {
            const result = TaskId_1.TaskId.create('invalid-uuid');
            expect(result.isFailure).toBe(true);
            expect(result.error).toBe('TaskId must be a valid UUID');
        });
    });
    describe('generate', () => {
        it('should generate valid UUID', () => {
            const taskId = TaskId_1.TaskId.generate();
            expect(taskId.toString()).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);
        });
        it('should generate unique UUIDs', () => {
            const taskId1 = TaskId_1.TaskId.generate();
            const taskId2 = TaskId_1.TaskId.generate();
            expect(taskId1.equals(taskId2)).toBe(false);
        });
    });
    describe('equals', () => {
        it('should return true for equal TaskIds', () => {
            const uuid = '550e8400-e29b-41d4-a716-446655440000';
            const taskId1 = TaskId_1.TaskId.create(uuid).getValue();
            const taskId2 = TaskId_1.TaskId.create(uuid).getValue();
            expect(taskId1.equals(taskId2)).toBe(true);
        });
        it('should return false for different TaskIds', () => {
            const taskId1 = TaskId_1.TaskId.generate();
            const taskId2 = TaskId_1.TaskId.generate();
            expect(taskId1.equals(taskId2)).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvdW5pdC9kb21haW4vdmFsdWUtb2JqZWN0cy9UYXNrSWQudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLHdFQUFxRTtBQUVyRSxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtJQUN0QixRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUN0QixFQUFFLENBQUMsd0NBQXdDLEVBQUUsR0FBRyxFQUFFO1lBQ2hELE1BQU0sU0FBUyxHQUFHLHNDQUFzQyxDQUFDO1lBRXpELE1BQU0sTUFBTSxHQUFHLGVBQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7WUFDcEMsTUFBTSxNQUFNLEdBQUcsZUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUVqQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNwQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLEdBQUcsRUFBRTtZQUMzQyxNQUFNLE1BQU0sR0FBRyxlQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7WUFDcEMsTUFBTSxNQUFNLEdBQUcsZUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWpDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsNEVBQTRFLENBQUMsQ0FBQztRQUNsSCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7WUFDdEMsTUFBTSxPQUFPLEdBQUcsZUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sT0FBTyxHQUFHLGVBQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVsQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7UUFDdEIsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLEdBQUcsRUFBRTtZQUM5QyxNQUFNLElBQUksR0FBRyxzQ0FBc0MsQ0FBQztZQUNwRCxNQUFNLE9BQU8sR0FBRyxlQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9DLE1BQU0sT0FBTyxHQUFHLGVBQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsMkNBQTJDLEVBQUUsR0FBRyxFQUFFO1lBQ25ELE1BQU0sT0FBTyxHQUFHLGVBQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNsQyxNQUFNLE9BQU8sR0FBRyxlQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFbEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3Rlc3RzL3VuaXQvZG9tYWluL3ZhbHVlLW9iamVjdHMvVGFza0lkLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGFza0lkIH0gZnJvbSAnLi4vLi4vLi4vLi4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL1Rhc2tJZCc7XG5cbmRlc2NyaWJlKCdUYXNrSWQnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjcmVhdGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgYSB2YWxpZCBUYXNrSWQgd2l0aCBVVUlEJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmFsaWRVdWlkID0gJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCc7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFRhc2tJZC5jcmVhdGUodmFsaWRVdWlkKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5pc1N1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QocmVzdWx0LmdldFZhbHVlKCkudG9TdHJpbmcoKSkudG9CZSh2YWxpZFV1aWQpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgZW1wdHkgc3RyaW5nJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gVGFza0lkLmNyZWF0ZSgnJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChyZXN1bHQuaXNGYWlsdXJlKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5lcnJvcikudG9CZSgnVGFza0lkIGNhbm5vdCBiZSBlbXB0eScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWplY3QgaW52YWxpZCBVVUlEIGZvcm1hdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFRhc2tJZC5jcmVhdGUoJ2ludmFsaWQtdXVpZCcpO1xuICAgICAgXG4gICAgICBleHBlY3QocmVzdWx0LmlzRmFpbHVyZSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZXJyb3IpLnRvQmUoJ1Rhc2tJZCBtdXN0IGJlIGEgdmFsaWQgVVVJRCcpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2VuZXJhdGUnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBnZW5lcmF0ZSB2YWxpZCBVVUlEJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGFza0lkID0gVGFza0lkLmdlbmVyYXRlKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdCh0YXNrSWQudG9TdHJpbmcoKSkudG9NYXRjaCgvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2VuZXJhdGUgdW5pcXVlIFVVSURzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGFza0lkMSA9IFRhc2tJZC5nZW5lcmF0ZSgpO1xuICAgICAgY29uc3QgdGFza0lkMiA9IFRhc2tJZC5nZW5lcmF0ZSgpO1xuICAgICAgXG4gICAgICBleHBlY3QodGFza0lkMS5lcXVhbHModGFza0lkMikpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZXF1YWxzJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRydWUgZm9yIGVxdWFsIFRhc2tJZHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCB1dWlkID0gJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCc7XG4gICAgICBjb25zdCB0YXNrSWQxID0gVGFza0lkLmNyZWF0ZSh1dWlkKS5nZXRWYWx1ZSgpO1xuICAgICAgY29uc3QgdGFza0lkMiA9IFRhc2tJZC5jcmVhdGUodXVpZCkuZ2V0VmFsdWUoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KHRhc2tJZDEuZXF1YWxzKHRhc2tJZDIpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIGRpZmZlcmVudCBUYXNrSWRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGFza0lkMSA9IFRhc2tJZC5nZW5lcmF0ZSgpO1xuICAgICAgY29uc3QgdGFza0lkMiA9IFRhc2tJZC5nZW5lcmF0ZSgpO1xuICAgICAgXG4gICAgICBleHBlY3QodGFza0lkMS5lcXVhbHModGFza0lkMikpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJ2ZXJzaW9uIjozfQ==