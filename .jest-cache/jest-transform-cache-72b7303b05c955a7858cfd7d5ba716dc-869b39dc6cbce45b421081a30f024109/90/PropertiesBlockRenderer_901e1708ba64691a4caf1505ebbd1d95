52d5502ab4bf2399f6b522539f7920b6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertiesBlockRenderer = void 0;
const tslib_1 = require("tslib");
class PropertiesBlockRenderer {
    constructor(app, propertyRenderer) {
        this.app = app;
        this.propertyRenderer = propertyRenderer;
    }
    render(container, config, file, frontmatter, dv) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const propsConfig = config;
            // Determine which properties to show
            let propertiesToShow = Object.keys(frontmatter);
            // Apply included properties filter
            if (propsConfig.includedProperties && propsConfig.includedProperties.length > 0) {
                propertiesToShow = propertiesToShow.filter(prop => propsConfig.includedProperties.includes(prop));
            }
            // Apply excluded properties filter
            if (propsConfig.excludedProperties && propsConfig.excludedProperties.length > 0) {
                propertiesToShow = propertiesToShow.filter(prop => !propsConfig.excludedProperties.includes(prop));
            }
            // Get asset ID and class
            const assetId = frontmatter['exo__Asset_uid'] || file.path;
            const instanceClass = frontmatter['exo__Instance_class'];
            const cleanClassName = this.cleanClassName(instanceClass);
            // Check if properties are editable
            const editableProps = propsConfig.editableProperties || [];
            // Group properties if groupBy is specified
            if (propsConfig.groupBy) {
                this.renderGroupedProperties(container, propertiesToShow, frontmatter, propsConfig.groupBy, assetId, cleanClassName, editableProps);
            }
            else {
                this.renderFlatProperties(container, propertiesToShow, frontmatter, assetId, cleanClassName, editableProps);
            }
        });
    }
    renderFlatProperties(container, properties, frontmatter, assetId, className, editableProps) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Use PropertyRenderer for all properties (it will handle editability internally)
            const editableContainer = container.createDiv({ cls: 'exocortex-properties-editable' });
            yield this.propertyRenderer.renderPropertiesBlock(editableContainer, assetId, className, frontmatter);
            // Render non-editable properties
            const readOnlyProps = properties.filter(p => !editableProps.includes(p));
            if (readOnlyProps.length > 0) {
                const readOnlyContainer = container.createDiv({ cls: 'exocortex-properties-readonly' });
                const table = readOnlyContainer.createEl('table', { cls: 'exocortex-properties-table' });
                readOnlyProps.forEach(prop => {
                    const row = table.createEl('tr');
                    // Property name
                    const nameCell = row.createEl('td', { cls: 'property-name' });
                    nameCell.setText(this.formatPropertyName(prop));
                    // Property value
                    const valueCell = row.createEl('td', { cls: 'property-value' });
                    const value = frontmatter[prop];
                    valueCell.setText(this.formatValue(value));
                });
            }
        });
    }
    renderGroupedProperties(container, properties, frontmatter, groupBy, assetId, className, editableProps) {
        // Group properties by prefix or custom logic
        const groups = new Map();
        properties.forEach(prop => {
            const group = this.getPropertyGroup(prop, groupBy);
            if (!groups.has(group)) {
                groups.set(group, []);
            }
            groups.get(group).push(prop);
        });
        // Render each group
        groups.forEach((props, groupName) => {
            const groupContainer = container.createDiv({ cls: 'exocortex-property-group' });
            if (groupName !== 'Other') {
                groupContainer.createEl('h4', {
                    text: groupName,
                    cls: 'property-group-header'
                });
            }
            const groupContent = groupContainer.createDiv({ cls: 'property-group-content' });
            // Separate editable and readonly
            const groupEditable = props.filter(p => editableProps.includes(p));
            const groupReadOnly = props.filter(p => !editableProps.includes(p));
            // Render editable properties
            if (groupEditable.length > 0) {
                this.propertyRenderer.renderPropertiesBlock(groupContent, assetId, className, frontmatter);
            }
            // Render readonly properties
            if (groupReadOnly.length > 0) {
                const table = groupContent.createEl('table', { cls: 'exocortex-properties-table' });
                groupReadOnly.forEach(prop => {
                    const row = table.createEl('tr');
                    const nameCell = row.createEl('td', { cls: 'property-name' });
                    nameCell.setText(this.formatPropertyName(prop));
                    const valueCell = row.createEl('td', { cls: 'property-value' });
                    const value = frontmatter[prop];
                    valueCell.setText(this.formatValue(value));
                });
            }
        });
    }
    getPropertyGroup(property, groupBy) {
        if (groupBy === 'prefix') {
            const match = property.match(/^([^_]+)__/);
            if (match) {
                return match[1].toUpperCase();
            }
        }
        if (groupBy === 'category') {
            if (property.includes('status') || property.includes('Status'))
                return 'Status';
            if (property.includes('date') || property.includes('Date'))
                return 'Dates';
            if (property.includes('relate') || property.includes('link'))
                return 'Relations';
        }
        return 'Other';
    }
    formatPropertyName(prop) {
        // Remove prefix and format
        return prop
            .replace(/^[^_]+__/, '')
            .replace(/_/g, ' ')
            .replace(/\b\w/g, l => l.toUpperCase());
    }
    formatValue(value) {
        if (value === null || value === undefined)
            return '';
        if (Array.isArray(value)) {
            return value.map(v => this.cleanValue(v)).join(', ');
        }
        if (typeof value === 'boolean') {
            return value ? '✓' : '✗';
        }
        if (value instanceof Date) {
            return value.toLocaleDateString();
        }
        return this.cleanValue(value);
    }
    cleanValue(value) {
        if (!value)
            return '';
        const str = value.toString();
        return str.replace(/\[\[|\]\]/g, '');
    }
    cleanClassName(className) {
        if (!className)
            return '';
        const str = Array.isArray(className) ? className[0] : className;
        return (str === null || str === void 0 ? void 0 : str.toString().replace(/\[\[|\]\]/g, '')) || '';
    }
}
exports.PropertiesBlockRenderer = PropertiesBlockRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,