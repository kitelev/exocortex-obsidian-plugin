{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/GetCurrentProjectUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/GetCurrentProjectUseCase.ts"],"sourcesContent":["import { Asset } from \"../../domain/entities/Asset\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { IAssetRepository } from \"../../domain/repositories/IAssetRepository\";\nimport { ExoFocusService } from \"../services/ExoFocusService\";\nimport { IndexedGraph } from \"../../domain/semantic/core/IndexedGraph\";\nimport { IRI } from \"../../domain/semantic/core/Triple\";\nimport {\n  GetCurrentProjectRequest,\n  GetCurrentProjectResponse,\n} from \"../dtos/CreateTaskRequest\";\n\n/**\n * Use case for getting current project context\n * Implements intelligent project detection based on user context\n * Following TOGAF principles for business capability\n */\nexport class GetCurrentProjectUseCase {\n  constructor(\n    private readonly assetRepository: IAssetRepository,\n    private readonly focusService: ExoFocusService,\n    private readonly graph: IndexedGraph,\n  ) {}\n\n  async execute(\n    request: GetCurrentProjectRequest,\n  ): Promise<GetCurrentProjectResponse> {\n    try {\n      // Get all available projects\n      const availableProjects = await this.getAvailableProjects(\n        request.preferences?.includeCompleted ?? false,\n        request.preferences?.maxResults ?? 10,\n      );\n\n      // Detect current project based on context\n      const currentProject = await this.detectCurrentProject(\n        request,\n        availableProjects,\n      );\n\n      // Determine detection strategy and confidence\n      const context = this.buildContextInfo(request, currentProject);\n\n      return {\n        success: true,\n        currentProject,\n        availableProjects,\n        context,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        availableProjects: [],\n        context: {\n          strategy: \"error\",\n          confidence: 0,\n          reasoning: `Failed to get project context: ${error.message}`,\n        },\n        message: error.message,\n      };\n    }\n  }\n\n  /**\n   * Get all available projects from the system\n   */\n  private async getAvailableProjects(\n    includeCompleted: boolean,\n    maxResults: number,\n  ): Promise<GetCurrentProjectResponse[\"availableProjects\"]> {\n    try {\n      // Find assets with Project class\n      const projectClassName = ClassName.create(\"ems__Project\");\n      if (projectClassName.isFailure) {\n        return [];\n      }\n\n      const projectAssets = await this.assetRepository.findByClass(\n        projectClassName.getValue(),\n      );\n\n      // Convert to response format and filter\n      const projects = projectAssets\n        .filter((asset) => {\n          if (!includeCompleted) {\n            const status = asset.getPropertyValue(\"status\");\n            return status !== \"completed\" && status !== \"cancelled\";\n          }\n          return true;\n        })\n        .map((asset) => ({\n          id: asset.getId().toString(),\n          title: asset.getTitle(),\n          status: asset.getPropertyValue(\"status\") || \"active\",\n          priority: asset.getPropertyValue(\"priority\") || \"medium\",\n          description: asset.getPropertyValue(\"description\"),\n          isActive: asset.getPropertyValue(\"status\") === \"active\",\n          lastUpdated:\n            asset.getPropertyValue(\"updatedAt\") || new Date().toISOString(),\n        }))\n        .sort((a, b) => {\n          // Sort by active status first, then by last updated\n          if (a.isActive && !b.isActive) return -1;\n          if (!a.isActive && b.isActive) return 1;\n          return (\n            new Date(b.lastUpdated).getTime() -\n            new Date(a.lastUpdated).getTime()\n          );\n        })\n        .slice(0, maxResults);\n\n      return projects;\n    } catch (error) {\n      console.warn(\"Failed to get available projects:\", error);\n      return [];\n    }\n  }\n\n  /**\n   * Detect current project based on context clues\n   */\n  private async detectCurrentProject(\n    request: GetCurrentProjectRequest,\n    availableProjects: GetCurrentProjectResponse[\"availableProjects\"],\n  ): Promise<GetCurrentProjectResponse[\"currentProject\"] | undefined> {\n    const strategy = request.preferences?.selectionStrategy || \"context\";\n\n    switch (strategy) {\n      case \"context\":\n        return this.detectByContext(request, availableProjects);\n      case \"recent\":\n        return this.detectByRecentActivity(availableProjects);\n      case \"active\":\n        return this.detectByActiveStatus(availableProjects);\n      case \"priority\":\n        return this.detectByPriority(availableProjects);\n      default:\n        return this.detectByContext(request, availableProjects);\n    }\n  }\n\n  /**\n   * Detect project by analyzing current file context\n   */\n  private async detectByContext(\n    request: GetCurrentProjectRequest,\n    availableProjects: GetCurrentProjectResponse[\"availableProjects\"],\n  ): Promise<GetCurrentProjectResponse[\"currentProject\"] | undefined> {\n    if (!request.activeFile) {\n      return this.detectByRecentActivity(availableProjects);\n    }\n\n    try {\n      // Check if current file is a project file\n      const currentAsset = await this.assetRepository.findByFilename(\n        request.activeFile,\n      );\n      if (currentAsset) {\n        const className = currentAsset.getClassName().toString();\n        if (className === \"ems__Project\") {\n          return this.assetToProjectResponse(currentAsset);\n        }\n\n        // Check if current asset has project relationship\n        const projectId =\n          currentAsset.getProperty(\"projectId\") ||\n          currentAsset.getProperty(\"exo__Effort_parent\");\n        if (projectId) {\n          const cleanProjectId = projectId.toString().replace(/\\[\\[|\\]\\]/g, \"\");\n          const project = availableProjects.find(\n            (p) => p.id === cleanProjectId,\n          );\n          if (project) {\n            return project;\n          }\n        }\n      }\n\n      // Use RDF graph to find project relationships\n      const projectFromGraph = await this.findProjectFromGraph(\n        request.activeFile,\n        availableProjects,\n      );\n      if (projectFromGraph) {\n        return projectFromGraph;\n      }\n\n      // Fallback to recent activity\n      return this.detectByRecentActivity(availableProjects);\n    } catch (error) {\n      console.warn(\"Context-based project detection failed:\", error);\n      return this.detectByRecentActivity(availableProjects);\n    }\n  }\n\n  /**\n   * Detect project using RDF graph relationships\n   */\n  private async findProjectFromGraph(\n    activeFile: string,\n    availableProjects: GetCurrentProjectResponse[\"availableProjects\"],\n  ): Promise<GetCurrentProjectResponse[\"currentProject\"] | undefined> {\n    try {\n      // Clean file path for IRI\n      const fileIRI = activeFile.replace(/\\.md$/, \"\").replace(/\\s+/g, \"_\");\n\n      // Query for project relationships\n      const projectTriples = this.graph.query(fileIRI, \"exo__Effort_parent\");\n\n      if (projectTriples.length > 0) {\n        const projectIRI = projectTriples[0].getObject().toString();\n        const project = availableProjects.find(\n          (p) =>\n            p.id === projectIRI || p.title.replace(/\\s+/g, \"_\") === projectIRI,\n        );\n        if (project) {\n          return project;\n        }\n      }\n\n      // Check reverse relationships (project -> task)\n      const taskTriples = this.graph.query(\n        undefined,\n        \"exo__Effort_parent\",\n        fileIRI,\n      );\n\n      for (const triple of taskTriples) {\n        const potentialProject = triple.getSubject().toString();\n        const project = availableProjects.find(\n          (p) =>\n            p.id === potentialProject ||\n            p.title.replace(/\\s+/g, \"_\") === potentialProject,\n        );\n        if (project) {\n          return project;\n        }\n      }\n\n      return undefined;\n    } catch (error) {\n      console.warn(\"Graph-based project detection failed:\", error);\n      return undefined;\n    }\n  }\n\n  /**\n   * Detect project by recent activity\n   */\n  private detectByRecentActivity(\n    availableProjects: GetCurrentProjectResponse[\"availableProjects\"],\n  ): GetCurrentProjectResponse[\"currentProject\"] | undefined {\n    const recentProjects = availableProjects\n      .filter((p) => p.isActive)\n      .sort(\n        (a, b) =>\n          new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime(),\n      );\n\n    return recentProjects[0];\n  }\n\n  /**\n   * Detect project by active status\n   */\n  private detectByActiveStatus(\n    availableProjects: GetCurrentProjectResponse[\"availableProjects\"],\n  ): GetCurrentProjectResponse[\"currentProject\"] | undefined {\n    return availableProjects.find((p) => p.isActive);\n  }\n\n  /**\n   * Detect project by priority\n   */\n  private detectByPriority(\n    availableProjects: GetCurrentProjectResponse[\"availableProjects\"],\n  ): GetCurrentProjectResponse[\"currentProject\"] | undefined {\n    const priorityOrder: Record<string, number> = {\n      urgent: 4,\n      high: 3,\n      medium: 2,\n      low: 1,\n    };\n\n    return availableProjects\n      .filter((p) => p.isActive)\n      .sort(\n        (a, b) =>\n          (priorityOrder[b.priority] || 2) - (priorityOrder[a.priority] || 2),\n      )[0];\n  }\n\n  /**\n   * Build context information for response\n   */\n  private buildContextInfo(\n    request: GetCurrentProjectRequest,\n    currentProject?: GetCurrentProjectResponse[\"currentProject\"],\n  ): GetCurrentProjectResponse[\"context\"] {\n    const strategy = request.preferences?.selectionStrategy || \"context\";\n\n    let confidence = 0;\n    let reasoning = \"\";\n\n    if (currentProject) {\n      switch (strategy) {\n        case \"context\":\n          confidence = request.activeFile ? 0.8 : 0.3;\n          reasoning = request.activeFile\n            ? `Detected from current file context: ${request.activeFile}`\n            : \"Used most recent active project\";\n          break;\n        case \"recent\":\n          confidence = 0.6;\n          reasoning = \"Selected most recently updated active project\";\n          break;\n        case \"active\":\n          confidence = 0.5;\n          reasoning = \"Selected first active project\";\n          break;\n        case \"priority\":\n          confidence = 0.7;\n          reasoning = \"Selected highest priority active project\";\n          break;\n      }\n    } else {\n      reasoning = \"No suitable project found\";\n    }\n\n    return {\n      strategy,\n      confidence,\n      reasoning,\n    };\n  }\n\n  /**\n   * Convert Asset to project response format\n   */\n  private assetToProjectResponse(\n    asset: Asset,\n  ): GetCurrentProjectResponse[\"currentProject\"] {\n    return {\n      id: asset.getId().toString(),\n      title: asset.getTitle(),\n      status: asset.getPropertyValue(\"status\") || \"active\",\n      priority: asset.getPropertyValue(\"priority\") || \"medium\",\n      description: asset.getPropertyValue(\"description\"),\n    };\n  }\n}\n"],"version":3}