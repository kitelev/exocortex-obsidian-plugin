{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/Priority.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/Priority.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\n\nexport enum PriorityLevel {\n  LOW = \"low\",\n  MEDIUM = \"medium\",\n  HIGH = \"high\",\n  URGENT = \"urgent\",\n}\n\ntype PriorityInput = string | PriorityLevel | null | undefined;\n\n/**\n * Value object representing task priority\n * Immutable and self-validating with business rules\n * Follows Clean Architecture principles with comprehensive validation\n */\nexport class Priority {\n  private static readonly VALID_LEVELS = new Set(Object.values(PriorityLevel));\n  private static readonly LEVEL_CACHE = new Map<PriorityLevel, Priority>();\n  private static readonly NUMERIC_VALUES = new Map<PriorityLevel, number>([\n    [PriorityLevel.LOW, 1],\n    [PriorityLevel.MEDIUM, 2],\n    [PriorityLevel.HIGH, 3],\n    [PriorityLevel.URGENT, 4],\n  ]);\n\n  private readonly level: PriorityLevel;\n\n  private constructor(level: PriorityLevel) {\n    this.level = level;\n  }\n\n  static create(value: PriorityInput): Result<Priority> {\n    const validationResult = this.validateInput(value);\n    if (!validationResult.isSuccess) {\n      return Result.fail<Priority>(validationResult.getError());\n    }\n\n    const normalizedLevel = this.normalizeValue(\n      value as string | PriorityLevel,\n    );\n    if (!this.isValidLevel(normalizedLevel)) {\n      return Result.fail<Priority>(\n        `Priority must be one of: ${Array.from(this.VALID_LEVELS).join(\", \")}`,\n      );\n    }\n\n    return Result.ok<Priority>(this.getOrCreateInstance(normalizedLevel));\n  }\n\n  private static validateInput(value: PriorityInput): Result<void> {\n    if (value === null || value === undefined || value === \"\") {\n      return Result.fail<void>(\"Priority cannot be empty\");\n    }\n    return Result.ok<void>(undefined);\n  }\n\n  private static normalizeValue(value: string | PriorityLevel): string {\n    return typeof value === \"string\" ? value.toLowerCase().trim() : value;\n  }\n\n  private static isValidLevel(value: string): value is PriorityLevel {\n    return this.VALID_LEVELS.has(value as PriorityLevel);\n  }\n\n  private static getOrCreateInstance(level: PriorityLevel): Priority {\n    if (!this.LEVEL_CACHE.has(level)) {\n      this.LEVEL_CACHE.set(level, new Priority(level));\n    }\n    return this.LEVEL_CACHE.get(level)!;\n  }\n\n  static low(): Priority {\n    return this.getOrCreateInstance(PriorityLevel.LOW);\n  }\n\n  static medium(): Priority {\n    return this.getOrCreateInstance(PriorityLevel.MEDIUM);\n  }\n\n  static high(): Priority {\n    return this.getOrCreateInstance(PriorityLevel.HIGH);\n  }\n\n  static urgent(): Priority {\n    return this.getOrCreateInstance(PriorityLevel.URGENT);\n  }\n\n  static getAllLevels(): readonly PriorityLevel[] {\n    return Object.values(PriorityLevel);\n  }\n\n  getLevel(): PriorityLevel {\n    return this.level;\n  }\n\n  toString(): string {\n    return this.level;\n  }\n\n  equals(other: Priority | null | undefined): boolean {\n    return other !== null && other !== undefined && this.level === other.level;\n  }\n\n  /**\n   * Returns hash code for use in collections\n   */\n  hashCode(): number {\n    return this.getNumericValue();\n  }\n\n  /**\n   * Returns numeric value for sorting (higher number = higher priority)\n   * Uses cached values for optimal performance\n   */\n  getNumericValue(): number {\n    return Priority.NUMERIC_VALUES.get(this.level)!;\n  }\n\n  /**\n   * Compares priorities for sorting\n   * Returns negative if this < other, positive if this > other, 0 if equal\n   */\n  compare(other: Priority): number {\n    return this.getNumericValue() - other.getNumericValue();\n  }\n\n  isHigherThan(other: Priority): boolean {\n    return this.getNumericValue() > other.getNumericValue();\n  }\n\n  isLowerThan(other: Priority): boolean {\n    return this.getNumericValue() < other.getNumericValue();\n  }\n}\n"],"version":3}