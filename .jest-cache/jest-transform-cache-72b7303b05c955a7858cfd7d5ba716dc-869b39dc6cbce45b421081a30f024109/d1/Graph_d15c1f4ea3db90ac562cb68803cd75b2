046d38f7b1529cf7d42297e361111b27
"use strict";
/**
 * RDF Graph implementation for managing collections of triples
 * Provides efficient querying and manipulation of semantic data
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graph = void 0;
/**
 * RDF Graph - A collection of RDF triples
 */
class Graph {
    constructor(triples = []) {
        this.triples = new Set();
        this.spo = new Map();
        this.pos = new Map();
        this.osp = new Map();
        for (const triple of triples) {
            this.add(triple);
        }
    }
    /**
     * Add a triple to the graph
     */
    add(triple) {
        if (this.has(triple))
            return;
        this.triples.add(triple);
        const s = triple.getSubject().toString();
        const p = triple.getPredicate().toString();
        const o = triple.getObject().toString();
        // Update SPO index
        if (!this.spo.has(s))
            this.spo.set(s, new Map());
        if (!this.spo.get(s).has(p))
            this.spo.get(s).set(p, new Set());
        this.spo.get(s).get(p).add(o);
        // Update POS index
        if (!this.pos.has(p))
            this.pos.set(p, new Map());
        if (!this.pos.get(p).has(o))
            this.pos.get(p).set(o, new Set());
        this.pos.get(p).get(o).add(s);
        // Update OSP index
        if (!this.osp.has(o))
            this.osp.set(o, new Map());
        if (!this.osp.get(o).has(s))
            this.osp.get(o).set(s, new Set());
        this.osp.get(o).get(s).add(p);
    }
    /**
     * Remove a triple from the graph
     */
    remove(triple) {
        if (!this.has(triple))
            return;
        this.triples.delete(triple);
        const s = triple.getSubject().toString();
        const p = triple.getPredicate().toString();
        const o = triple.getObject().toString();
        // Update SPO index
        this.spo.get(s)?.get(p)?.delete(o);
        if (this.spo.get(s)?.get(p)?.size === 0) {
            this.spo.get(s)?.delete(p);
        }
        if (this.spo.get(s)?.size === 0) {
            this.spo.delete(s);
        }
        // Update POS index
        this.pos.get(p)?.get(o)?.delete(s);
        if (this.pos.get(p)?.get(o)?.size === 0) {
            this.pos.get(p)?.delete(o);
        }
        if (this.pos.get(p)?.size === 0) {
            this.pos.delete(p);
        }
        // Update OSP index
        this.osp.get(o)?.get(s)?.delete(p);
        if (this.osp.get(o)?.get(s)?.size === 0) {
            this.osp.get(o)?.delete(s);
        }
        if (this.osp.get(o)?.size === 0) {
            this.osp.delete(o);
        }
    }
    /**
     * Check if the graph contains a triple
     */
    has(triple) {
        const s = triple.getSubject().toString();
        const p = triple.getPredicate().toString();
        const o = triple.getObject().toString();
        return this.spo.get(s)?.get(p)?.has(o) ?? false;
    }
    /**
     * Get all triples matching a pattern
     * null values act as wildcards
     */
    match(subject = null, predicate = null, object = null) {
        const results = [];
        if (subject && predicate && object) {
            // Exact match
            for (const triple of this.triples) {
                if (triple.getSubject().toString() === subject.toString() &&
                    triple.getPredicate().toString() === predicate.toString() &&
                    triple.getObject().toString() === object.toString()) {
                    results.push(triple);
                }
            }
        }
        else if (subject && predicate) {
            // S P ?
            const objects = this.spo
                .get(subject.toString())
                ?.get(predicate.toString());
            if (objects) {
                for (const triple of this.triples) {
                    if (triple.getSubject().toString() === subject.toString() &&
                        triple.getPredicate().toString() === predicate.toString()) {
                        results.push(triple);
                    }
                }
            }
        }
        else if (predicate && object) {
            // ? P O
            const subjects = this.pos
                .get(predicate.toString())
                ?.get(object.toString());
            if (subjects) {
                for (const triple of this.triples) {
                    if (triple.getPredicate().toString() === predicate.toString() &&
                        triple.getObject().toString() === object.toString()) {
                        results.push(triple);
                    }
                }
            }
        }
        else if (subject && object) {
            // S ? O
            const predicates = this.osp
                .get(object.toString())
                ?.get(subject.toString());
            if (predicates) {
                for (const triple of this.triples) {
                    if (triple.getSubject().toString() === subject.toString() &&
                        triple.getObject().toString() === object.toString()) {
                        results.push(triple);
                    }
                }
            }
        }
        else if (subject) {
            // S ? ?
            for (const triple of this.triples) {
                if (triple.getSubject().toString() === subject.toString()) {
                    results.push(triple);
                }
            }
        }
        else if (predicate) {
            // ? P ?
            for (const triple of this.triples) {
                if (triple.getPredicate().toString() === predicate.toString()) {
                    results.push(triple);
                }
            }
        }
        else if (object) {
            // ? ? O
            for (const triple of this.triples) {
                if (triple.getObject().toString() === object.toString()) {
                    results.push(triple);
                }
            }
        }
        else {
            // ? ? ? - return all
            return Array.from(this.triples);
        }
        return results;
    }
    /**
     * Get all subjects in the graph
     */
    subjects() {
        const subjects = new Set();
        for (const triple of this.triples) {
            subjects.add(triple.getSubject());
        }
        return subjects;
    }
    /**
     * Get all predicates in the graph
     */
    predicates() {
        const predicates = new Set();
        for (const triple of this.triples) {
            predicates.add(triple.getPredicate());
        }
        return predicates;
    }
    /**
     * Get all objects in the graph
     */
    objects() {
        const objects = new Set();
        for (const triple of this.triples) {
            objects.add(triple.getObject());
        }
        return objects;
    }
    /**
     * Get the size of the graph (number of triples)
     */
    size() {
        return this.triples.size;
    }
    /**
     * Check if the graph is empty
     */
    isEmpty() {
        return this.triples.size === 0;
    }
    /**
     * Clear all triples from the graph
     */
    clear() {
        this.triples.clear();
        this.spo.clear();
        this.pos.clear();
        this.osp.clear();
    }
    /**
     * Merge another graph into this one
     */
    merge(other) {
        for (const triple of other.toArray()) {
            this.add(triple);
        }
    }
    /**
     * Create a new graph with triples matching a pattern
     */
    filter(subject = null, predicate = null, object = null) {
        return new Graph(this.match(subject, predicate, object));
    }
    /**
     * Convert the graph to an array of triples
     */
    toArray() {
        return Array.from(this.triples);
    }
    /**
     * Create a human-readable string representation
     */
    toString() {
        return Array.from(this.triples)
            .map((t) => t.toString())
            .join("\n");
    }
    /**
     * Create a copy of this graph
     */
    clone() {
        return new Graph(this.toArray());
    }
    /**
     * Check if two graphs are equal
     */
    equals(other) {
        if (this.size() !== other.size())
            return false;
        for (const triple of this.triples) {
            if (!other.has(triple))
                return false;
        }
        return true;
    }
    /**
     * Alias for add method - used by some services
     */
    addTriple(triple) {
        this.add(triple);
    }
    /**
     * Get all triples (alias for toArray)
     */
    getTriples() {
        return this.toArray();
    }
    /**
     * Alias for has method - used by some services
     */
    hasTriple(triple) {
        return this.has(triple);
    }
}
exports.Graph = Graph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,