{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/QueryTemplateUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/QueryTemplateUseCase.ts"],"sourcesContent":["import {\n  IQueryTemplateRepository,\n  TemplateSearchCriteria,\n} from \"../../domain/repositories/IQueryTemplateRepository\";\nimport {\n  QueryTemplate,\n  TemplateCategory,\n  TemplateDifficulty,\n} from \"../../domain/visual/QueryTemplate\";\nimport { VisualQueryNode, NodeType } from \"../../domain/visual/VisualQueryNode\";\nimport { VisualQueryEdge, EdgeType } from \"../../domain/visual/VisualQueryEdge\";\n\nexport class QueryTemplateUseCase {\n  constructor(private readonly templateRepository: IQueryTemplateRepository) {}\n\n  getTemplateRepository(): IQueryTemplateRepository {\n    return this.templateRepository;\n  }\n\n  async getAllTemplates(): Promise<QueryTemplate[]> {\n    return await this.templateRepository.findAll();\n  }\n\n  async getTemplateById(id: string): Promise<QueryTemplate | undefined> {\n    return await this.templateRepository.findById(id);\n  }\n\n  async searchTemplates(\n    criteria: TemplateSearchCriteria,\n  ): Promise<QueryTemplate[]> {\n    return await this.templateRepository.findByCriteria(criteria);\n  }\n\n  async getTemplatesByCategory(\n    category: TemplateCategory,\n  ): Promise<QueryTemplate[]> {\n    return await this.templateRepository.findByCategory(category);\n  }\n\n  async getBuiltInTemplates(): Promise<QueryTemplate[]> {\n    return await this.templateRepository.getBuiltInTemplates();\n  }\n\n  async getCustomTemplates(): Promise<QueryTemplate[]> {\n    return await this.templateRepository.getCustomTemplates();\n  }\n\n  async getRecentTemplates(limit?: number): Promise<QueryTemplate[]> {\n    return await this.templateRepository.getRecentlyUsed(limit);\n  }\n\n  async saveTemplate(template: QueryTemplate): Promise<QueryTemplate> {\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot save built-in templates\");\n    }\n    return await this.templateRepository.save(template);\n  }\n\n  async createCustomTemplate(\n    nodes: Map<string, VisualQueryNode>,\n    edges: Map<string, VisualQueryEdge>,\n    viewport: { x: number; y: number; zoom: number },\n    name: string,\n    description: string,\n    category: TemplateCategory = TemplateCategory.CUSTOM,\n    tags: string[] = [],\n  ): Promise<QueryTemplate> {\n    const metadata = {\n      name,\n      description,\n      category,\n      tags: [...tags, \"custom\"],\n      difficulty: \"intermediate\" as const,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      version: \"1.0.0\",\n    };\n\n    const template = QueryTemplate.fromCanvas(nodes, edges, viewport, {\n      name,\n      description,\n      category,\n      difficulty: TemplateDifficulty.INTERMEDIATE,\n      tags,\n    });\n    return await this.templateRepository.create(template);\n  }\n\n  async cloneTemplate(\n    templateId: string,\n    newName?: string,\n  ): Promise<QueryTemplate> {\n    const template = await this.templateRepository.findById(templateId);\n    if (!template) {\n      throw new Error(`Template with ID ${templateId} not found`);\n    }\n\n    let cloned = template.clone();\n    if (newName) {\n      cloned = cloned.updateMetadata({\n        name: newName,\n      });\n    }\n\n    return await this.templateRepository.create(cloned);\n  }\n\n  async deleteTemplate(id: string): Promise<boolean> {\n    const template = await this.templateRepository.findById(id);\n    if (!template) {\n      return false;\n    }\n\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot delete built-in templates\");\n    }\n\n    return await this.templateRepository.delete(id);\n  }\n\n  async instantiateTemplate(template: QueryTemplate): Promise<{\n    nodes: VisualQueryNode[];\n    edges: VisualQueryEdge[];\n  }> {\n    const validation = template.validateParameters();\n    if (!validation.isValid) {\n      throw new Error(\n        `Template parameters are invalid: ${validation.errors.join(\", \")}`,\n      );\n    }\n\n    await this.templateRepository.recordUsage(template.getId());\n    const instantiated = template.instantiate({});\n    return {\n      nodes:\n        instantiated.layout?.nodes?.map((node) => {\n          // Convert serialized nodes back to VisualQueryNode instances\n          return new VisualQueryNode({\n            id: node.id,\n            type: node.type as NodeType,\n            label: node.label,\n            position: node.position,\n            variableName: node.variableName,\n            uri: node.uri,\n            dimensions: node.dimensions,\n          });\n        }) || [],\n      edges:\n        instantiated.layout?.edges?.map((edge) => {\n          // Convert serialized edges back to VisualQueryEdge instances\n          return new VisualQueryEdge({\n            id: edge.id,\n            sourceNodeId: edge.sourceNodeId,\n            targetNodeId: edge.targetNodeId,\n            type: edge.type as EdgeType,\n            label: edge.label,\n            propertyUri: edge.propertyUri,\n          });\n        }) || [],\n    };\n  }\n\n  async exportTemplates(templateIds?: string[]): Promise<string> {\n    const templates =\n      await this.templateRepository.exportTemplates(templateIds);\n    return JSON.stringify(templates, null, 2);\n  }\n\n  async importTemplates(jsonData: string): Promise<QueryTemplate[]> {\n    try {\n      const templatesData = JSON.parse(jsonData);\n\n      if (!Array.isArray(templatesData)) {\n        throw new Error(\"Invalid JSON format: expected array of templates\");\n      }\n\n      return await this.templateRepository.importTemplates(templatesData);\n    } catch (error) {\n      throw new Error(`Failed to import templates: ${error.message}`);\n    }\n  }\n\n  async getUsageStatistics(templateId: string): Promise<{\n    usageCount: number;\n    lastUsed?: Date;\n    averageParametersFilled?: number;\n  }> {\n    return await this.templateRepository.getUsageStats(templateId);\n  }\n\n  async updateTemplateMetadata(\n    templateId: string,\n    updates: Partial<{\n      name: string;\n      description: string;\n      category: TemplateCategory;\n      tags: string[];\n      difficulty: TemplateDifficulty;\n    }>,\n  ): Promise<QueryTemplate> {\n    const template = await this.templateRepository.findById(templateId);\n    if (!template) {\n      throw new Error(`Template with ID ${templateId} not found`);\n    }\n\n    if (template.isBuiltInTemplate()) {\n      throw new Error(\"Cannot modify built-in templates\");\n    }\n\n    const updatedTemplate = template.updateMetadata(updates);\n    return await this.templateRepository.update(updatedTemplate);\n  }\n\n  async validateTemplateParameters(template: QueryTemplate): Promise<{\n    isValid: boolean;\n    errors: string[];\n    missingParameters: string[];\n    invalidParameters: string[];\n  }> {\n    const validation = template.validateParameters();\n    const parameters = template.getParameters();\n    const parameterValues = template.getParameterValues();\n\n    const missingParameters: string[] = [];\n    const invalidParameters: string[] = [];\n\n    parameters.forEach((param) => {\n      const paramId = param.id || `param_${param.name}`;\n      if (param.required && !parameterValues.has(paramId)) {\n        missingParameters.push(param.name);\n      }\n\n      const value = parameterValues.get(paramId);\n      if (value && param.constraints) {\n        // Additional validation could be added here\n      }\n    });\n\n    return {\n      isValid: validation.isValid,\n      errors: validation.errors,\n      missingParameters,\n      invalidParameters,\n    };\n  }\n\n  async getTemplatePreview(templateId: string): Promise<{\n    sparqlQuery: string;\n    nodeCount: number;\n    edgeCount: number;\n    parameterCount: number;\n    complexity: \"simple\" | \"moderate\" | \"complex\";\n  }> {\n    const template = await this.templateRepository.findById(templateId);\n    if (!template) {\n      throw new Error(`Template with ID ${templateId} not found`);\n    }\n\n    const layout = template.getLayout();\n    const parameters = template.getParameters();\n    const nodeCount = layout.nodes.length;\n    const edgeCount = layout.edges.length;\n\n    // Determine complexity based on various factors\n    let complexity: \"simple\" | \"moderate\" | \"complex\" = \"simple\";\n    const totalElements = nodeCount + edgeCount + parameters.length;\n\n    if (totalElements <= 5) {\n      complexity = \"simple\";\n    } else if (totalElements <= 10) {\n      complexity = \"moderate\";\n    } else {\n      complexity = \"complex\";\n    }\n\n    // Generate example SPARQL if pattern is available\n    let sparqlQuery = template.getMetadata().sparqlPattern || \"\";\n\n    // Replace parameter placeholders with example values\n    parameters.forEach((param) => {\n      const paramId = param.id || `param_${param.name}`;\n      const placeholder = `{${paramId.toUpperCase()}}`;\n      const exampleValue = param.defaultValue || `{${param.name}}`;\n      sparqlQuery = sparqlQuery.replace(\n        new RegExp(placeholder, \"g\"),\n        exampleValue,\n      );\n    });\n\n    return {\n      sparqlQuery,\n      nodeCount,\n      edgeCount,\n      parameterCount: parameters.length,\n      complexity,\n    };\n  }\n\n  async refreshTemplateCache(): Promise<void> {\n    await this.templateRepository.refresh();\n  }\n}\n"],"version":3}