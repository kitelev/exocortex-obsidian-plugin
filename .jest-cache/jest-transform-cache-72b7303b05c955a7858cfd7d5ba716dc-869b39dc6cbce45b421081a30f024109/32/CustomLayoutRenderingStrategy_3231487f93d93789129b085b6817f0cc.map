{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/strategies/CustomLayoutRenderingStrategy.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/strategies/CustomLayoutRenderingStrategy.ts"],"sourcesContent":["import { Result } from \"../../domain/core/Result\";\nimport { ClassLayout } from \"../../domain/entities/ClassLayout\";\nimport {\n  ILayoutRenderingStrategy,\n  LayoutRenderingContext,\n} from \"./ILayoutRenderingStrategy\";\nimport {\n  IBlockRendererFactory,\n  BlockRenderingContext,\n} from \"../factories/IBlockRendererFactory\";\n\nexport class CustomLayoutRenderingStrategy implements ILayoutRenderingStrategy {\n  constructor(private readonly blockRendererFactory: IBlockRendererFactory) {}\n\n  canHandle(layout: ClassLayout | null): boolean {\n    return layout !== null && layout !== undefined;\n  }\n\n  async render(\n    context: LayoutRenderingContext,\n    layout?: ClassLayout,\n  ): Promise<Result<void>> {\n    if (!layout) {\n      return Result.fail(\"Layout is required for custom rendering strategy\");\n    }\n\n    if (!context.container) {\n      return Result.fail(\"Container is required for rendering\");\n    }\n\n    if (!context.metadata?.frontmatter) {\n      this.renderError(\n        context.container,\n        \"No metadata available for this file\",\n      );\n      return Result.fail(\"No metadata available\");\n    }\n\n    try {\n      // Add layout info (hidden metadata)\n      this.addLayoutInfo(context.container, layout);\n\n      // Render each visible block\n      const visibleBlocks = layout.getVisibleBlocks();\n\n      for (const block of visibleBlocks) {\n        const blockResult = await this.renderBlock(context, block, layout);\n        if (blockResult.isFailure) {\n          console.error(\n            `Failed to render block ${block.id}:`,\n            blockResult.error,\n          );\n          // Continue with other blocks rather than failing completely\n        }\n      }\n\n      return Result.ok();\n    } catch (error) {\n      return Result.fail(`Custom layout rendering failed: ${error}`);\n    }\n  }\n\n  private addLayoutInfo(container: HTMLElement, layout: ClassLayout): void {\n    const layoutInfo = document.createElement(\"div\");\n    layoutInfo.className = \"exocortex-layout-info\";\n    layoutInfo.style.display = \"none\";\n    layoutInfo.setAttribute(\"data-layout-id\", layout.id.toString());\n    layoutInfo.setAttribute(\"data-layout-class\", layout.targetClass.value);\n    container.appendChild(layoutInfo);\n  }\n\n  private async renderBlock(\n    context: LayoutRenderingContext,\n    block: any,\n    layout: ClassLayout,\n  ): Promise<Result<void>> {\n    try {\n      // Create block container structure\n      const blockContainer = document.createElement(\"div\");\n      blockContainer.className = `exocortex-block exocortex-block-${block.type}`;\n      blockContainer.setAttribute(\"data-block-id\", block.id);\n      context.container.appendChild(blockContainer);\n\n      // Add block header if title exists\n      if (block.title) {\n        const header = document.createElement(\"h3\");\n        header.textContent = block.title;\n        header.className = \"exocortex-block-header\";\n        blockContainer.appendChild(header);\n\n        // Add collapse toggle if collapsible\n        if (block.isCollapsible) {\n          header.classList.add(\"is-collapsible\");\n          header.addEventListener(\"click\", () => {\n            blockContainer.classList.toggle(\n              \"is-collapsed\",\n              !blockContainer.classList.contains(\"is-collapsed\"),\n            );\n          });\n        }\n      }\n\n      // Create content container\n      const contentContainer = document.createElement(\"div\");\n      contentContainer.className = \"exocortex-block-content\";\n      blockContainer.appendChild(contentContainer);\n\n      // Get appropriate renderer for block type\n      const rendererResult = this.blockRendererFactory.createRenderer(\n        block.type,\n      );\n      if (rendererResult.isFailure) {\n        return this.renderBlockError(\n          contentContainer,\n          `Unknown block type: ${block.type}`,\n        );\n      }\n\n      const renderer = rendererResult.getValue();\n\n      // Create block rendering context\n      const blockContext: BlockRenderingContext = {\n        container: contentContainer,\n        config: block.config,\n        file: context.file,\n        frontmatter: context.metadata.frontmatter,\n        dataviewApi: context.dataviewApi,\n      };\n\n      // Render block content\n      const renderResult = await renderer.render(blockContext);\n      if (renderResult.isFailure) {\n        return this.renderBlockError(\n          contentContainer,\n          `Error rendering block: ${renderResult.error}`,\n        );\n      }\n\n      return Result.ok();\n    } catch (error) {\n      return Result.fail(`Block rendering failed: ${error}`);\n    }\n  }\n\n  private renderError(container: HTMLElement, error: string): void {\n    const errorDiv = document.createElement(\"div\");\n    errorDiv.textContent = `Layout Error: ${error}`;\n    errorDiv.className = \"exocortex-error notice-error\";\n    container.appendChild(errorDiv);\n  }\n\n  private renderBlockError(\n    container: HTMLElement,\n    error: string,\n  ): Result<void> {\n    const errorP = document.createElement(\"p\");\n    errorP.textContent = error;\n    errorP.className = \"exocortex-error\";\n    container.appendChild(errorP);\n    return Result.ok(); // Return ok since we handled the error gracefully\n  }\n}\n"],"version":3}