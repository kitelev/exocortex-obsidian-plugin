{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/container/DIContainer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/container/DIContainer.ts"],"sourcesContent":["import { App } from \"obsidian\";\nimport { Container } from \"../../application/core/Container\";\n\n// Port Interfaces\nimport { INotificationService } from \"../../application/ports/INotificationService\";\nimport { IFileSystemAdapter } from \"../../application/ports/IFileSystemAdapter\";\nimport { IUIAdapter } from \"../../application/ports/IUIAdapter\";\nimport { IVaultAdapter } from \"../../application/ports/IVaultAdapter\";\n\n// Infrastructure Adapters\nimport { ObsidianNotificationService } from \"../adapters/ObsidianNotificationService\";\nimport { ObsidianFileSystemAdapter } from \"../adapters/ObsidianFileSystemAdapter\";\nimport { ObsidianUIAdapter } from \"../adapters/ObsidianUIAdapter\";\nimport { ObsidianVaultAdapter } from \"../adapters/ObsidianVaultAdapter\";\n\n// Repositories\nimport { IAssetRepository } from \"../../domain/repositories/IAssetRepository\";\nimport { IOntologyRepository } from \"../../domain/repositories/IOntologyRepository\";\nimport { IClassViewRepository } from \"../../domain/repositories/IClassViewRepository\";\nimport { IButtonRepository } from \"../../domain/repositories/IButtonRepository\";\nimport { IClassLayoutRepository } from \"../../domain/repositories/IClassLayoutRepository\";\nimport { ObsidianAssetRepository } from \"../repositories/ObsidianAssetRepository\";\nimport { ObsidianOntologyRepository } from \"../repositories/ObsidianOntologyRepository\";\nimport { ObsidianClassViewRepository } from \"../repositories/ObsidianClassViewRepository\";\nimport { ObsidianButtonRepository } from \"../repositories/ObsidianButtonRepository\";\nimport { ObsidianClassLayoutRepository } from \"../repositories/ObsidianClassLayoutRepository\";\n\n// Use Cases\nimport { CreateAssetUseCase } from \"../../application/use-cases/CreateAssetUseCase\";\nimport { CreateChildTaskUseCase } from \"../../application/use-cases/CreateChildTaskUseCase\";\nimport { CreateChildAreaUseCase } from \"../../application/use-cases/CreateChildAreaUseCase\";\nimport { RenderClassButtonsUseCase } from \"../../application/use-cases/RenderClassButtonsUseCase\";\nimport { ExecuteButtonCommandUseCase } from \"../../application/use-cases/ExecuteButtonCommandUseCase\";\nimport { PropertyEditingUseCase } from \"../../application/use-cases/PropertyEditingUseCase\";\nimport { QueryTemplateUseCase } from \"../../application/use-cases/QueryTemplateUseCase\";\n\n// Services\nimport { ICommandExecutor } from \"../../application/services/ICommandExecutor\";\nimport { ObsidianCommandExecutor } from \"../services/ObsidianCommandExecutor\";\nimport { ErrorHandlerService } from \"../../application/services/ErrorHandlerService\";\nimport { SPARQLAutocompleteService } from \"../../application/services/SPARQLAutocompleteService\";\nimport { OntologyProvisioningService } from \"../../domain/services/OntologyProvisioningService\";\nimport { PropertyCacheService } from \"../../domain/services/PropertyCacheService\";\nimport { CircuitBreakerService } from \"../resilience/CircuitBreakerService\";\nimport { ISuggestionRepository } from \"../../domain/repositories/ISuggestionRepository\";\nimport { GraphSuggestionRepository } from \"../repositories/GraphSuggestionRepository\";\nimport { IQueryTemplateRepository } from \"../../domain/repositories/IQueryTemplateRepository\";\nimport { ObsidianQueryTemplateRepository } from \"../repositories/ObsidianQueryTemplateRepository\";\nimport { QueryEngineFactory } from \"../query-engines/QueryEngineFactory\";\nimport { QueryEngineService } from \"../../application/services/QueryEngineService\";\nimport { QueryEngineConfig } from \"../../domain/entities/QueryEngineConfig\";\nimport { RDFService } from \"../../application/services/RDFService\";\n\n// Presentation\nimport { ButtonRenderer } from \"../../presentation/components/ButtonRenderer\";\nimport { PropertyRenderer } from \"../../presentation/components/PropertyRenderer\";\nimport { LayoutRenderer } from \"../../presentation/renderers/LayoutRenderer\";\n\n// Mobile Components\nimport { MobileUIComponents } from \"../../presentation/components/MobileUIComponents\";\nimport { TouchGraphController } from \"../../presentation/mobile/TouchGraphController\";\nimport { MobileModalAdapter } from \"../../presentation/mobile/MobileModalAdapter\";\nimport { MobilePerformanceOptimizer } from \"../optimizers/MobilePerformanceOptimizer\";\nimport { OfflineDataManager } from \"../offline/OfflineDataManager\";\nimport { PlatformDetector } from \"../utils/PlatformDetector\";\n\n/**\n * Dependency Injection Container Setup\n * Following Clean Architecture - wires up all dependencies\n */\nexport class DIContainer {\n  private static instance: DIContainer;\n  private container: Container;\n\n  private plugin: any;\n\n  private constructor(private app: App) {\n    this.container = Container.getInstance();\n    this.registerDependencies();\n  }\n\n  public static initialize(app: App, plugin?: any): DIContainer {\n    if (!DIContainer.instance) {\n      DIContainer.instance = new DIContainer(app);\n    } else {\n      // Always update app and plugin references\n      DIContainer.instance.app = app;\n      if (plugin) {\n        DIContainer.instance.plugin = plugin;\n      }\n      // Re-register dependencies to ensure they use the new app instance\n      DIContainer.instance.container.clear();\n      DIContainer.instance.registerDependencies();\n    }\n    if (plugin && !DIContainer.instance.plugin) {\n      DIContainer.instance.plugin = plugin;\n    }\n    return DIContainer.instance;\n  }\n\n  public static getInstance(): DIContainer {\n    if (!DIContainer.instance) {\n      throw new Error(\n        \"DIContainer not initialized. Call initialize(app) first.\",\n      );\n    }\n    return DIContainer.instance;\n  }\n\n  /**\n   * Async initialize method for backward compatibility\n   */\n  public async initialize(app: App): Promise<void> {\n    // Already initialized in constructor, this is for backward compatibility\n    return Promise.resolve();\n  }\n\n  /**\n   * Reset the container instance (for testing purposes)\n   */\n  public static reset(): void {\n    DIContainer.instance = null as any;\n  }\n\n  private registerDependencies(): void {\n    // Register Obsidian App\n    this.container.register(\"App\", () => this.app);\n\n    // Register Port Implementations\n    this.container.register<INotificationService>(\n      \"INotificationService\",\n      () => new ObsidianNotificationService(),\n    );\n\n    this.container.register<IFileSystemAdapter>(\n      \"IFileSystemAdapter\",\n      () => new ObsidianFileSystemAdapter(this.app),\n    );\n\n    this.container.register<IUIAdapter>(\n      \"IUIAdapter\",\n      () => new ObsidianUIAdapter(this.app),\n    );\n\n    this.container.register<IVaultAdapter>(\n      \"IVaultAdapter\",\n      () => new ObsidianVaultAdapter(this.app.vault, this.app.metadataCache),\n    );\n\n    // Register Repositories\n    this.container.register<IAssetRepository>(\n      \"IAssetRepository\",\n      () => new ObsidianAssetRepository(this.app),\n    );\n\n    this.container.register<IOntologyRepository>(\n      \"IOntologyRepository\",\n      () => new ObsidianOntologyRepository(this.app),\n    );\n\n    this.container.register<IClassViewRepository>(\n      \"IClassViewRepository\",\n      () => new ObsidianClassViewRepository(this.app),\n    );\n\n    this.container.register<IButtonRepository>(\n      \"IButtonRepository\",\n      () => new ObsidianButtonRepository(this.app),\n    );\n\n    this.container.register<IClassLayoutRepository>(\n      \"IClassLayoutRepository\",\n      () =>\n        new ObsidianClassLayoutRepository(\n          this.app,\n          this.plugin?.settings?.layoutsFolderPath || \"layouts\",\n        ),\n    );\n\n    this.container.register<IQueryTemplateRepository>(\n      \"IQueryTemplateRepository\",\n      () =>\n        new ObsidianQueryTemplateRepository(\n          this.app,\n          this.plugin?.settings?.templatesPath || \".exocortex/templates\",\n          this.plugin?.settings?.templateUsageDataPath ||\n            \".exocortex/template-usage.json\",\n        ),\n    );\n\n    // Register Services\n    this.container.register<ICommandExecutor>(\n      \"ICommandExecutor\",\n      () =>\n        new ObsidianCommandExecutor(\n          this.app,\n          this.container.resolve<IAssetRepository>(\"IAssetRepository\"),\n          this.container.resolve<CreateChildTaskUseCase>(\n            \"CreateChildTaskUseCase\",\n          ),\n        ),\n    );\n\n    // Register Error Handler Service\n    this.container.register<ErrorHandlerService>(\n      \"ErrorHandlerService\",\n      () =>\n        new ErrorHandlerService(\n          {\n            showUserNotification: true,\n            logToConsole: true,\n            trackMetrics: true,\n            autoRecover: false,\n          },\n          this.container.resolve<INotificationService>(\"INotificationService\"),\n        ),\n    );\n\n    // Register Autocomplete Services\n    this.container.register<ISuggestionRepository>(\n      \"ISuggestionRepository\",\n      () => {\n        // Need to get graph instance - will be provided by plugin\n        const graph = (this.plugin as any)?.graph || null;\n        return new GraphSuggestionRepository(graph);\n      },\n    );\n\n    this.container.register<SPARQLAutocompleteService>(\n      \"SPARQLAutocompleteService\",\n      () =>\n        new SPARQLAutocompleteService(\n          this.container.resolve<ISuggestionRepository>(\n            \"ISuggestionRepository\",\n          ),\n          (this.plugin as any)?.graph || null,\n        ),\n    );\n\n    // Register Query Engine Services\n    this.container.register<QueryEngineFactory>(\"QueryEngineFactory\", () => {\n      const factory = new QueryEngineFactory(this.app);\n\n      // Try to get Dataview and Datacore APIs if available\n      const plugins = (this.app as any).plugins;\n      const dataviewApi = plugins?.plugins?.dataview?.api;\n      const datacoreApi = plugins?.plugins?.datacore?.api;\n\n      factory.updateApis(dataviewApi, datacoreApi);\n      return factory;\n    });\n\n    this.container.register<QueryEngineConfig>(\"QueryEngineConfig\", () => {\n      // Create default config, could be overridden by plugin settings\n      const configResult = QueryEngineConfig.createDefault();\n      return configResult.getValue()!;\n    });\n\n    this.container.register<QueryEngineService>(\n      \"QueryEngineService\",\n      () =>\n        new QueryEngineService(\n          this.container.resolve<QueryEngineFactory>(\"QueryEngineFactory\"),\n          this.container.resolve<QueryEngineConfig>(\"QueryEngineConfig\"),\n        ),\n    );\n\n    // Register RDF Service - Must be before any dependencies that use it\n    this.container.register<RDFService>(\n      \"RDFService\",\n      () =>\n        new RDFService(\n          this.container.resolve<INotificationService>(\"INotificationService\"),\n          this.container.resolve<IFileSystemAdapter>(\"IFileSystemAdapter\"),\n        ),\n    );\n\n    // Register Domain Services\n    this.container.register<OntologyProvisioningService>(\n      \"OntologyProvisioningService\",\n      () =>\n        new OntologyProvisioningService(\n          this.container.resolve<IOntologyRepository>(\"IOntologyRepository\"),\n          this.container.resolve<IVaultAdapter>(\"IVaultAdapter\"),\n        ),\n    );\n\n    this.container.register<PropertyCacheService>(\n      \"PropertyCacheService\",\n      () => PropertyCacheService.getInstance(),\n    );\n\n    this.container.register<CircuitBreakerService>(\n      \"CircuitBreakerService\",\n      () => CircuitBreakerService.getInstance(),\n    );\n\n    // Register Use Cases\n    this.container.register<CreateAssetUseCase>(\n      \"CreateAssetUseCase\",\n      () =>\n        new CreateAssetUseCase(\n          this.container.resolve<IAssetRepository>(\"IAssetRepository\"),\n          this.container.resolve<IOntologyRepository>(\"IOntologyRepository\"),\n          this.container.resolve<OntologyProvisioningService>(\"OntologyProvisioningService\"),\n        ),\n    );\n\n    this.container.register<CreateChildTaskUseCase>(\n      \"CreateChildTaskUseCase\",\n      () =>\n        new CreateChildTaskUseCase(\n          this.container.resolve<IAssetRepository>(\"IAssetRepository\"),\n          this.container.resolve<CreateAssetUseCase>(\"CreateAssetUseCase\"),\n        ),\n    );\n\n    this.container.register<CreateChildAreaUseCase>(\n      \"CreateChildAreaUseCase\",\n      () =>\n        new CreateChildAreaUseCase(\n          this.container.resolve<IAssetRepository>(\"IAssetRepository\"),\n          this.container.resolve<CreateAssetUseCase>(\"CreateAssetUseCase\"),\n        ),\n    );\n\n    this.container.register<RenderClassButtonsUseCase>(\n      \"RenderClassButtonsUseCase\",\n      () =>\n        new RenderClassButtonsUseCase(\n          this.container.resolve<IClassViewRepository>(\"IClassViewRepository\"),\n          this.container.resolve<IButtonRepository>(\"IButtonRepository\"),\n        ),\n    );\n\n    this.container.register<ExecuteButtonCommandUseCase>(\n      \"ExecuteButtonCommandUseCase\",\n      () =>\n        new ExecuteButtonCommandUseCase(\n          this.container.resolve<IButtonRepository>(\"IButtonRepository\"),\n          this.container.resolve<ICommandExecutor>(\"ICommandExecutor\"),\n        ),\n    );\n\n    this.container.register<PropertyEditingUseCase>(\n      \"PropertyEditingUseCase\",\n      () =>\n        new PropertyEditingUseCase(\n          this.container.resolve<IAssetRepository>(\"IAssetRepository\"),\n          this.plugin || this.app, // Use plugin if available, otherwise app\n        ),\n    );\n\n    this.container.register<QueryTemplateUseCase>(\n      \"QueryTemplateUseCase\",\n      () =>\n        new QueryTemplateUseCase(\n          this.container.resolve<IQueryTemplateRepository>(\n            \"IQueryTemplateRepository\",\n          ),\n        ),\n    );\n\n    // Register Presentation Components\n    this.container.register<ButtonRenderer>(\n      \"ButtonRenderer\",\n      () =>\n        new ButtonRenderer(\n          this.app,\n          this.container.resolve<RenderClassButtonsUseCase>(\n            \"RenderClassButtonsUseCase\",\n          ),\n          this.container.resolve<ExecuteButtonCommandUseCase>(\n            \"ExecuteButtonCommandUseCase\",\n          ),\n        ),\n    );\n\n    this.container.register<PropertyRenderer>(\n      \"PropertyRenderer\",\n      () =>\n        new PropertyRenderer(\n          this.app,\n          this.container.resolve<PropertyEditingUseCase>(\n            \"PropertyEditingUseCase\",\n          ),\n        ),\n    );\n\n    this.container.register<LayoutRenderer>(\n      \"LayoutRenderer\",\n      () =>\n        new LayoutRenderer(\n          this.app,\n          this.container.resolve<IClassLayoutRepository>(\n            \"IClassLayoutRepository\",\n          ),\n        ),\n    );\n\n    // Register Mobile Components\n    this.container.register<MobilePerformanceOptimizer>(\n      \"MobilePerformanceOptimizer\",\n      () =>\n        MobilePerformanceOptimizer.getInstance({\n          maxMemoryMB: PlatformDetector.isMobile() ? 50 : 200,\n          maxCacheEntries: PlatformDetector.isMobile() ? 100 : 500,\n          batchSize: PlatformDetector.isMobile() ? 10 : 50,\n          debounceMs: PlatformDetector.isMobile() ? 500 : 200,\n          enableGCHints: PlatformDetector.isMobile(),\n          enableLazyLoading: true,\n          virtualScrollThreshold: 100,\n        }),\n    );\n\n    this.container.register<OfflineDataManager>(\n      \"OfflineDataManager\",\n      () =>\n        new OfflineDataManager({\n          strategy: \"indexeddb\",\n          maxStorageMB: PlatformDetector.isMobile() ? 50 : 200,\n          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n          autoSync: true,\n          syncIntervalMs: 30000,\n          enableConflictResolution: true,\n          enableCompression: PlatformDetector.isMobile(),\n        }),\n    );\n\n    this.container.register<MobileUIComponents>(\n      \"MobileUIComponents\",\n      () =>\n        new MobileUIComponents(\n          this.container.resolve<MobilePerformanceOptimizer>(\n            \"MobilePerformanceOptimizer\",\n          ),\n        ),\n    );\n\n    // TouchGraphController is typically created per graph instance,\n    // so we register a factory function\n    this.container.register<typeof TouchGraphController>(\n      \"TouchGraphControllerClass\",\n      () => TouchGraphController,\n    );\n\n    // MobileModalAdapter is typically created per modal,\n    // so we register a factory function\n    this.container.register<typeof MobileModalAdapter>(\n      \"MobileModalAdapterClass\",\n      () => MobileModalAdapter,\n    );\n  }\n\n  /**\n   * Resolve a dependency from the container\n   */\n  public resolve<T>(token: string): T {\n    return this.container.resolve<T>(token);\n  }\n\n  /**\n   * Get specific use cases for common operations\n   */\n  public getCreateAssetUseCase(): CreateAssetUseCase {\n    return this.resolve<CreateAssetUseCase>(\"CreateAssetUseCase\");\n  }\n\n  public getRenderButtonsUseCase(): RenderClassButtonsUseCase {\n    return this.resolve<RenderClassButtonsUseCase>(\"RenderClassButtonsUseCase\");\n  }\n\n  public getExecuteButtonCommandUseCase(): ExecuteButtonCommandUseCase {\n    return this.resolve<ExecuteButtonCommandUseCase>(\n      \"ExecuteButtonCommandUseCase\",\n    );\n  }\n\n  public getButtonRenderer(): ButtonRenderer {\n    return this.resolve<ButtonRenderer>(\"ButtonRenderer\");\n  }\n\n  public getPropertyRenderer(): PropertyRenderer {\n    return this.resolve<PropertyRenderer>(\"PropertyRenderer\");\n  }\n\n  public getLayoutRenderer(): LayoutRenderer {\n    return this.resolve<LayoutRenderer>(\"LayoutRenderer\");\n  }\n\n  public getPropertyEditingUseCase(): PropertyEditingUseCase {\n    return this.resolve<PropertyEditingUseCase>(\"PropertyEditingUseCase\");\n  }\n\n  public getQueryTemplateUseCase(): QueryTemplateUseCase {\n    return this.resolve<QueryTemplateUseCase>(\"QueryTemplateUseCase\");\n  }\n\n  public getQueryTemplateRepository(): IQueryTemplateRepository {\n    return this.resolve<IQueryTemplateRepository>(\"IQueryTemplateRepository\");\n  }\n\n  public getQueryEngineService(): QueryEngineService {\n    return this.resolve<QueryEngineService>(\"QueryEngineService\");\n  }\n\n  public getQueryEngineFactory(): QueryEngineFactory {\n    return this.resolve<QueryEngineFactory>(\"QueryEngineFactory\");\n  }\n\n  public getRDFService(): RDFService {\n    return this.resolve<RDFService>(\"RDFService\");\n  }\n\n  // Mobile Components Getters\n  public getMobilePerformanceOptimizer(): MobilePerformanceOptimizer {\n    return this.resolve<MobilePerformanceOptimizer>(\n      \"MobilePerformanceOptimizer\",\n    );\n  }\n\n  public getOfflineDataManager(): OfflineDataManager {\n    return this.resolve<OfflineDataManager>(\"OfflineDataManager\");\n  }\n\n  public getMobileUIComponents(): MobileUIComponents {\n    return this.resolve<MobileUIComponents>(\"MobileUIComponents\");\n  }\n\n  public getTouchGraphControllerClass(): typeof TouchGraphController {\n    return this.resolve<typeof TouchGraphController>(\n      \"TouchGraphControllerClass\",\n    );\n  }\n\n  public getMobileModalAdapterClass(): typeof MobileModalAdapter {\n    return this.resolve<typeof MobileModalAdapter>(\"MobileModalAdapterClass\");\n  }\n\n  /**\n   * Clean up resources\n   */\n  public dispose(): void {\n    // Clean up any resources if needed\n    this.container.clear();\n  }\n}\n"],"version":3}