ab0daabd188f324a2a17e92ed58e2a74
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DIContainer = void 0;
const Container_1 = require("../../application/core/Container");
// Infrastructure Adapters
const ObsidianNotificationService_1 = require("../adapters/ObsidianNotificationService");
const ObsidianFileSystemAdapter_1 = require("../adapters/ObsidianFileSystemAdapter");
const ObsidianUIAdapter_1 = require("../adapters/ObsidianUIAdapter");
const ObsidianVaultAdapter_1 = require("../adapters/ObsidianVaultAdapter");
const ObsidianAssetRepository_1 = require("../repositories/ObsidianAssetRepository");
const ObsidianOntologyRepository_1 = require("../repositories/ObsidianOntologyRepository");
const ObsidianClassViewRepository_1 = require("../repositories/ObsidianClassViewRepository");
const ObsidianButtonRepository_1 = require("../repositories/ObsidianButtonRepository");
const ObsidianClassLayoutRepository_1 = require("../repositories/ObsidianClassLayoutRepository");
// Use Cases
const CreateAssetUseCase_1 = require("../../application/use-cases/CreateAssetUseCase");
const CreateChildTaskUseCase_1 = require("../../application/use-cases/CreateChildTaskUseCase");
const CreateChildAreaUseCase_1 = require("../../application/use-cases/CreateChildAreaUseCase");
const RenderClassButtonsUseCase_1 = require("../../application/use-cases/RenderClassButtonsUseCase");
const ExecuteButtonCommandUseCase_1 = require("../../application/use-cases/ExecuteButtonCommandUseCase");
const PropertyEditingUseCase_1 = require("../../application/use-cases/PropertyEditingUseCase");
const QueryTemplateUseCase_1 = require("../../application/use-cases/QueryTemplateUseCase");
const ObsidianCommandExecutor_1 = require("../services/ObsidianCommandExecutor");
const ErrorHandlerService_1 = require("../../application/services/ErrorHandlerService");
const SPARQLAutocompleteService_1 = require("../../application/services/SPARQLAutocompleteService");
const OntologyProvisioningService_1 = require("../../domain/services/OntologyProvisioningService");
const PropertyCacheService_1 = require("../../domain/services/PropertyCacheService");
const CircuitBreakerService_1 = require("../resilience/CircuitBreakerService");
const GraphSuggestionRepository_1 = require("../repositories/GraphSuggestionRepository");
const ObsidianQueryTemplateRepository_1 = require("../repositories/ObsidianQueryTemplateRepository");
const QueryEngineFactory_1 = require("../query-engines/QueryEngineFactory");
const QueryEngineService_1 = require("../../application/services/QueryEngineService");
const QueryEngineConfig_1 = require("../../domain/entities/QueryEngineConfig");
const RDFService_1 = require("../../application/services/RDFService");
// Presentation
const ButtonRenderer_1 = require("../../presentation/components/ButtonRenderer");
const PropertyRenderer_1 = require("../../presentation/components/PropertyRenderer");
const LayoutRenderer_1 = require("../../presentation/renderers/LayoutRenderer");
// Mobile Components
const MobileUIComponents_1 = require("../../presentation/components/MobileUIComponents");
const TouchGraphController_1 = require("../../presentation/mobile/TouchGraphController");
const MobileModalAdapter_1 = require("../../presentation/mobile/MobileModalAdapter");
const MobilePerformanceOptimizer_1 = require("../optimizers/MobilePerformanceOptimizer");
const OfflineDataManager_1 = require("../offline/OfflineDataManager");
const PlatformDetector_1 = require("../utils/PlatformDetector");
/**
 * Dependency Injection Container Setup
 * Following Clean Architecture - wires up all dependencies
 */
class DIContainer {
    constructor(app) {
        this.app = app;
        this.container = Container_1.Container.getInstance();
        this.registerDependencies();
    }
    static initialize(app, plugin) {
        if (!DIContainer.instance) {
            DIContainer.instance = new DIContainer(app);
        }
        else {
            // Always update app and plugin references
            DIContainer.instance.app = app;
            if (plugin) {
                DIContainer.instance.plugin = plugin;
            }
            // Re-register dependencies to ensure they use the new app instance
            DIContainer.instance.container.clear();
            DIContainer.instance.registerDependencies();
        }
        if (plugin && !DIContainer.instance.plugin) {
            DIContainer.instance.plugin = plugin;
        }
        return DIContainer.instance;
    }
    static getInstance() {
        if (!DIContainer.instance) {
            throw new Error("DIContainer not initialized. Call initialize(app) first.");
        }
        return DIContainer.instance;
    }
    /**
     * Async initialize method for backward compatibility
     */
    async initialize(app) {
        // Already initialized in constructor, this is for backward compatibility
        return Promise.resolve();
    }
    /**
     * Reset the container instance (for testing purposes)
     */
    static reset() {
        DIContainer.instance = null;
    }
    registerDependencies() {
        // Register Obsidian App
        this.container.register("App", () => this.app);
        // Register Port Implementations
        this.container.register("INotificationService", () => new ObsidianNotificationService_1.ObsidianNotificationService());
        this.container.register("IFileSystemAdapter", () => new ObsidianFileSystemAdapter_1.ObsidianFileSystemAdapter(this.app));
        this.container.register("IUIAdapter", () => new ObsidianUIAdapter_1.ObsidianUIAdapter(this.app));
        this.container.register("IVaultAdapter", () => new ObsidianVaultAdapter_1.ObsidianVaultAdapter(this.app.vault, this.app.metadataCache));
        // Register Repositories
        this.container.register("IAssetRepository", () => new ObsidianAssetRepository_1.ObsidianAssetRepository(this.app));
        this.container.register("IOntologyRepository", () => new ObsidianOntologyRepository_1.ObsidianOntologyRepository(this.app));
        this.container.register("IClassViewRepository", () => new ObsidianClassViewRepository_1.ObsidianClassViewRepository(this.app));
        this.container.register("IButtonRepository", () => new ObsidianButtonRepository_1.ObsidianButtonRepository(this.app));
        this.container.register("IClassLayoutRepository", () => new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(this.app, this.plugin?.settings?.layoutsFolderPath || "layouts"));
        this.container.register("IQueryTemplateRepository", () => new ObsidianQueryTemplateRepository_1.ObsidianQueryTemplateRepository(this.app, this.plugin?.settings?.templatesPath || ".exocortex/templates", this.plugin?.settings?.templateUsageDataPath ||
            ".exocortex/template-usage.json"));
        // Register Services
        this.container.register("ICommandExecutor", () => new ObsidianCommandExecutor_1.ObsidianCommandExecutor(this.app, this.container.resolve("IAssetRepository"), this.container.resolve("CreateChildTaskUseCase")));
        // Register Error Handler Service
        this.container.register("ErrorHandlerService", () => new ErrorHandlerService_1.ErrorHandlerService({
            showUserNotification: true,
            logToConsole: true,
            trackMetrics: true,
            autoRecover: false,
        }, this.container.resolve("INotificationService")));
        // Register Autocomplete Services
        this.container.register("ISuggestionRepository", () => {
            // Need to get graph instance - will be provided by plugin
            const graph = this.plugin?.graph || null;
            return new GraphSuggestionRepository_1.GraphSuggestionRepository(graph);
        });
        this.container.register("SPARQLAutocompleteService", () => new SPARQLAutocompleteService_1.SPARQLAutocompleteService(this.container.resolve("ISuggestionRepository"), this.plugin?.graph || null));
        // Register Query Engine Services
        this.container.register("QueryEngineFactory", () => {
            const factory = new QueryEngineFactory_1.QueryEngineFactory(this.app);
            // Try to get Dataview and Datacore APIs if available
            const plugins = this.app.plugins;
            const dataviewApi = plugins?.plugins?.dataview?.api;
            const datacoreApi = plugins?.plugins?.datacore?.api;
            factory.updateApis(dataviewApi, datacoreApi);
            return factory;
        });
        this.container.register("QueryEngineConfig", () => {
            // Create default config, could be overridden by plugin settings
            const configResult = QueryEngineConfig_1.QueryEngineConfig.createDefault();
            return configResult.getValue();
        });
        this.container.register("QueryEngineService", () => new QueryEngineService_1.QueryEngineService(this.container.resolve("QueryEngineFactory"), this.container.resolve("QueryEngineConfig")));
        // Register RDF Service - Must be before any dependencies that use it
        this.container.register("RDFService", () => new RDFService_1.RDFService(this.container.resolve("INotificationService"), this.container.resolve("IFileSystemAdapter")));
        // Register Domain Services
        this.container.register("OntologyProvisioningService", () => new OntologyProvisioningService_1.OntologyProvisioningService(this.container.resolve("IOntologyRepository"), this.container.resolve("IVaultAdapter")));
        this.container.register("PropertyCacheService", () => PropertyCacheService_1.PropertyCacheService.getInstance());
        this.container.register("CircuitBreakerService", () => CircuitBreakerService_1.CircuitBreakerService.getInstance());
        // Register Use Cases
        this.container.register("CreateAssetUseCase", () => new CreateAssetUseCase_1.CreateAssetUseCase(this.container.resolve("IAssetRepository"), this.container.resolve("IOntologyRepository"), this.container.resolve("OntologyProvisioningService")));
        this.container.register("CreateChildTaskUseCase", () => new CreateChildTaskUseCase_1.CreateChildTaskUseCase(this.container.resolve("IAssetRepository"), this.container.resolve("CreateAssetUseCase")));
        this.container.register("CreateChildAreaUseCase", () => new CreateChildAreaUseCase_1.CreateChildAreaUseCase(this.container.resolve("IAssetRepository"), this.container.resolve("CreateAssetUseCase")));
        this.container.register("RenderClassButtonsUseCase", () => new RenderClassButtonsUseCase_1.RenderClassButtonsUseCase(this.container.resolve("IClassViewRepository"), this.container.resolve("IButtonRepository")));
        this.container.register("ExecuteButtonCommandUseCase", () => new ExecuteButtonCommandUseCase_1.ExecuteButtonCommandUseCase(this.container.resolve("IButtonRepository"), this.container.resolve("ICommandExecutor")));
        this.container.register("PropertyEditingUseCase", () => new PropertyEditingUseCase_1.PropertyEditingUseCase(this.container.resolve("IAssetRepository"), this.plugin || this.app));
        this.container.register("QueryTemplateUseCase", () => new QueryTemplateUseCase_1.QueryTemplateUseCase(this.container.resolve("IQueryTemplateRepository")));
        // Register Presentation Components
        this.container.register("ButtonRenderer", () => new ButtonRenderer_1.ButtonRenderer(this.app, this.container.resolve("RenderClassButtonsUseCase"), this.container.resolve("ExecuteButtonCommandUseCase")));
        this.container.register("PropertyRenderer", () => new PropertyRenderer_1.PropertyRenderer(this.app, this.container.resolve("PropertyEditingUseCase")));
        this.container.register("LayoutRenderer", () => new LayoutRenderer_1.LayoutRenderer(this.app, this.container.resolve("IClassLayoutRepository")));
        // Register Mobile Components
        this.container.register("MobilePerformanceOptimizer", () => MobilePerformanceOptimizer_1.MobilePerformanceOptimizer.getInstance({
            maxMemoryMB: PlatformDetector_1.PlatformDetector.isMobile() ? 50 : 200,
            maxCacheEntries: PlatformDetector_1.PlatformDetector.isMobile() ? 100 : 500,
            batchSize: PlatformDetector_1.PlatformDetector.isMobile() ? 10 : 50,
            debounceMs: PlatformDetector_1.PlatformDetector.isMobile() ? 500 : 200,
            enableGCHints: PlatformDetector_1.PlatformDetector.isMobile(),
            enableLazyLoading: true,
            virtualScrollThreshold: 100,
        }));
        this.container.register("OfflineDataManager", () => new OfflineDataManager_1.OfflineDataManager({
            strategy: "indexeddb",
            maxStorageMB: PlatformDetector_1.PlatformDetector.isMobile() ? 50 : 200,
            maxAge: 7 * 24 * 60 * 60 * 1000,
            autoSync: true,
            syncIntervalMs: 30000,
            enableConflictResolution: true,
            enableCompression: PlatformDetector_1.PlatformDetector.isMobile(),
        }));
        this.container.register("MobileUIComponents", () => new MobileUIComponents_1.MobileUIComponents(this.container.resolve("MobilePerformanceOptimizer")));
        // TouchGraphController is typically created per graph instance,
        // so we register a factory function
        this.container.register("TouchGraphControllerClass", () => TouchGraphController_1.TouchGraphController);
        // MobileModalAdapter is typically created per modal,
        // so we register a factory function
        this.container.register("MobileModalAdapterClass", () => MobileModalAdapter_1.MobileModalAdapter);
    }
    /**
     * Resolve a dependency from the container
     */
    resolve(token) {
        return this.container.resolve(token);
    }
    /**
     * Get specific use cases for common operations
     */
    getCreateAssetUseCase() {
        return this.resolve("CreateAssetUseCase");
    }
    getRenderButtonsUseCase() {
        return this.resolve("RenderClassButtonsUseCase");
    }
    getExecuteButtonCommandUseCase() {
        return this.resolve("ExecuteButtonCommandUseCase");
    }
    getButtonRenderer() {
        return this.resolve("ButtonRenderer");
    }
    getPropertyRenderer() {
        return this.resolve("PropertyRenderer");
    }
    getLayoutRenderer() {
        return this.resolve("LayoutRenderer");
    }
    getPropertyEditingUseCase() {
        return this.resolve("PropertyEditingUseCase");
    }
    getQueryTemplateUseCase() {
        return this.resolve("QueryTemplateUseCase");
    }
    getQueryTemplateRepository() {
        return this.resolve("IQueryTemplateRepository");
    }
    getQueryEngineService() {
        return this.resolve("QueryEngineService");
    }
    getQueryEngineFactory() {
        return this.resolve("QueryEngineFactory");
    }
    getRDFService() {
        return this.resolve("RDFService");
    }
    // Mobile Components Getters
    getMobilePerformanceOptimizer() {
        return this.resolve("MobilePerformanceOptimizer");
    }
    getOfflineDataManager() {
        return this.resolve("OfflineDataManager");
    }
    getMobileUIComponents() {
        return this.resolve("MobileUIComponents");
    }
    getTouchGraphControllerClass() {
        return this.resolve("TouchGraphControllerClass");
    }
    getMobileModalAdapterClass() {
        return this.resolve("MobileModalAdapterClass");
    }
    /**
     * Clean up resources
     */
    dispose() {
        // Clean up any resources if needed
        this.container.clear();
    }
}
exports.DIContainer = DIContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,