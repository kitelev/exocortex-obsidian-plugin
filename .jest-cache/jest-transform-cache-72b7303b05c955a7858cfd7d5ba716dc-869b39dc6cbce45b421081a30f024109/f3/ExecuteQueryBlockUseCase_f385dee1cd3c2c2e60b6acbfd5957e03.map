{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/ExecuteQueryBlockUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/ExecuteQueryBlockUseCase.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { QueryBlockConfig } from \"../../domain/entities/LayoutBlockStubs\";\nimport { Result } from \"../../domain/core/Result\";\n\nexport interface ExecuteQueryBlockRequest {\n  blockConfig: QueryBlockConfig;\n  currentAssetPath: string;\n  currentAssetFrontmatter: any;\n}\n\nexport interface ExecuteQueryBlockResponse {\n  results: TFile[];\n  totalCount: number;\n  executionTime: number;\n}\n\nexport class ExecuteQueryBlockUseCase {\n  constructor(private app: App) {}\n\n  async execute(\n    request: ExecuteQueryBlockRequest,\n  ): Promise<Result<ExecuteQueryBlockResponse>> {\n    const startTime = Date.now();\n\n    try {\n      // Get all files\n      let files = this.app.vault.getFiles();\n\n      // Filter by class if specified\n      if (request.blockConfig.className) {\n        files = this.filterByClass(files, request.blockConfig.className);\n      }\n\n      // Apply property filters\n      if (\n        request.blockConfig.propertyFilters &&\n        request.blockConfig.propertyFilters.length > 0\n      ) {\n        files = this.applyPropertyFilters(\n          files,\n          request.blockConfig.propertyFilters,\n          request.currentAssetPath,\n          request.currentAssetFrontmatter,\n        );\n      }\n\n      // Apply relation filter if specified\n      if (request.blockConfig.relationProperty) {\n        files = this.filterByRelation(\n          files,\n          request.blockConfig.relationProperty,\n          request.currentAssetPath,\n        );\n      }\n\n      const totalCount = files.length;\n\n      // Sort results\n      if (request.blockConfig.sortBy) {\n        files = this.sortFiles(\n          files,\n          request.blockConfig.sortBy,\n          request.blockConfig.sortOrder || \"asc\",\n        );\n      }\n\n      // Limit results\n      if (\n        request.blockConfig.maxResults &&\n        request.blockConfig.maxResults > 0\n      ) {\n        files = files.slice(0, request.blockConfig.maxResults);\n      }\n\n      const executionTime = Date.now() - startTime;\n\n      return Result.ok<ExecuteQueryBlockResponse>({\n        results: files,\n        totalCount,\n        executionTime,\n      });\n    } catch (error) {\n      return Result.fail<ExecuteQueryBlockResponse>(\n        `Failed to execute query block: ${error}`,\n      );\n    }\n  }\n\n  private filterByClass(files: TFile[], className: string): TFile[] {\n    const cleanClassName = this.cleanClassName(className);\n\n    return files.filter((file) => {\n      const metadata = this.app.metadataCache.getFileCache(file);\n      if (!metadata?.frontmatter) return false;\n\n      const instanceClass = metadata.frontmatter[\"exo__Instance_class\"];\n      const fileClassName = this.cleanClassName(instanceClass);\n\n      return fileClassName === cleanClassName;\n    });\n  }\n\n  private applyPropertyFilters(\n    files: TFile[],\n    filters: any[],\n    currentAssetPath: string,\n    currentAssetFrontmatter: any,\n  ): TFile[] {\n    return files.filter((file) => {\n      const metadata = this.app.metadataCache.getFileCache(file);\n      if (!metadata?.frontmatter) return false;\n\n      // Check all filters\n      for (const filter of filters) {\n        if (\n          !this.evaluateFilter(\n            metadata.frontmatter,\n            filter,\n            currentAssetPath,\n            currentAssetFrontmatter,\n            file,\n          )\n        ) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  private evaluateFilter(\n    frontmatter: any,\n    filter: any,\n    currentAssetPath: string,\n    currentAssetFrontmatter: any,\n    file: TFile,\n  ): boolean {\n    const propertyValue = frontmatter[filter.property];\n    let filterValue = filter.value;\n\n    // Replace template variables\n    if (typeof filterValue === \"string\") {\n      filterValue = filterValue\n        .replace(\"{{current_asset}}\", `[[${currentAssetPath}]]`)\n        .replace(\"{{current_file}}\", `[[${currentAssetPath}]]`);\n\n      // Replace frontmatter variables\n      const varMatch = filterValue.match(/\\{\\{fm\\.(.+?)\\}\\}/g);\n      if (varMatch) {\n        varMatch.forEach((match: string) => {\n          const prop = match.replace(/\\{\\{fm\\.|}\\}/g, \"\");\n          const value = currentAssetFrontmatter[prop];\n          if (value) {\n            filterValue = filterValue.replace(match, value);\n          }\n        });\n      }\n    }\n\n    // Clean values for comparison\n    const cleanPropValue = this.cleanValue(propertyValue);\n    const cleanFilterValue = this.cleanValue(filterValue);\n\n    switch (filter.operator) {\n      case \"equals\":\n        return this.valuesEqual(cleanPropValue, cleanFilterValue);\n\n      case \"notEquals\":\n        return !this.valuesEqual(cleanPropValue, cleanFilterValue);\n\n      case \"contains\":\n        return this.valueContains(cleanPropValue, cleanFilterValue);\n\n      case \"startsWith\":\n        return this.valueStartsWith(cleanPropValue, cleanFilterValue);\n\n      case \"endsWith\":\n        return this.valueEndsWith(cleanPropValue, cleanFilterValue);\n\n      case \"exists\":\n        return propertyValue !== undefined && propertyValue !== null;\n\n      case \"notExists\":\n        return propertyValue === undefined || propertyValue === null;\n\n      default:\n        return false;\n    }\n  }\n\n  private valuesEqual(value1: any, value2: any): boolean {\n    // Handle arrays\n    if (Array.isArray(value1)) {\n      return value1.some((v) => this.valuesEqual(v, value2));\n    }\n\n    // Handle wikilinks\n    const clean1 = this.cleanClassName(value1);\n    const clean2 = this.cleanClassName(value2);\n\n    return clean1 === clean2;\n  }\n\n  private valueContains(value: any, searchValue: string): boolean {\n    if (Array.isArray(value)) {\n      return value.some((v) => this.valueContains(v, searchValue));\n    }\n\n    const str = this.cleanClassName(value).toLowerCase();\n    const search = this.cleanClassName(searchValue).toLowerCase();\n\n    return str.includes(search);\n  }\n\n  private valueStartsWith(value: any, searchValue: string): boolean {\n    if (Array.isArray(value)) {\n      return value.some((v) => this.valueStartsWith(v, searchValue));\n    }\n\n    const str = this.cleanClassName(value).toLowerCase();\n    const search = this.cleanClassName(searchValue).toLowerCase();\n\n    return str.startsWith(search);\n  }\n\n  private valueEndsWith(value: any, searchValue: string): boolean {\n    if (Array.isArray(value)) {\n      return value.some((v) => this.valueEndsWith(v, searchValue));\n    }\n\n    const str = this.cleanClassName(value).toLowerCase();\n    const search = this.cleanClassName(searchValue).toLowerCase();\n\n    return str.endsWith(search);\n  }\n\n  private filterByRelation(\n    files: TFile[],\n    relationProperty: string,\n    currentAssetPath: string,\n  ): TFile[] {\n    const currentLink = `[[${currentAssetPath}]]`;\n\n    return files.filter((file) => {\n      const metadata = this.app.metadataCache.getFileCache(file);\n      if (!metadata?.frontmatter) return false;\n\n      const relationValue = metadata.frontmatter[relationProperty];\n      if (!relationValue) return false;\n\n      if (Array.isArray(relationValue)) {\n        return relationValue.some(\n          (v) => this.cleanClassName(v) === this.cleanClassName(currentLink),\n        );\n      }\n\n      return (\n        this.cleanClassName(relationValue) === this.cleanClassName(currentLink)\n      );\n    });\n  }\n\n  private sortFiles(\n    files: TFile[],\n    sortBy: string,\n    order: \"asc\" | \"desc\",\n  ): TFile[] {\n    return files.sort((a, b) => {\n      const aMetadata = this.app.metadataCache.getFileCache(a);\n      const bMetadata = this.app.metadataCache.getFileCache(b);\n\n      const aValue = aMetadata?.frontmatter?.[sortBy] || \"\";\n      const bValue = bMetadata?.frontmatter?.[sortBy] || \"\";\n\n      let comparison = 0;\n\n      if (aValue < bValue) comparison = -1;\n      if (aValue > bValue) comparison = 1;\n\n      return order === \"asc\" ? comparison : -comparison;\n    });\n  }\n\n  private cleanClassName(value: any): string {\n    if (!value) return \"\";\n    const str = Array.isArray(value) ? value[0] : value;\n    return (\n      str\n        ?.toString()\n        .replace(/\\[\\[|\\]\\]/g, \"\")\n        .trim() || \"\"\n    );\n  }\n\n  private cleanValue(value: any): any {\n    if (Array.isArray(value)) {\n      return value.map((v) => this.cleanValue(v));\n    }\n\n    if (typeof value === \"string\") {\n      return value.replace(/\\[\\[|\\]\\]/g, \"\").trim();\n    }\n\n    return value;\n  }\n}\n"],"version":3}