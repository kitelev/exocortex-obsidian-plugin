445ea0be2de7a805eef9294e20cc7af9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteQueryBlockUseCase = void 0;
const Result_1 = require("../../domain/core/Result");
class ExecuteQueryBlockUseCase {
    constructor(app) {
        this.app = app;
    }
    async execute(request) {
        const startTime = Date.now();
        try {
            // Get all files
            let files = this.app.vault.getFiles();
            // Filter by class if specified
            if (request.blockConfig.className) {
                files = this.filterByClass(files, request.blockConfig.className);
            }
            // Apply property filters
            if (request.blockConfig.propertyFilters &&
                request.blockConfig.propertyFilters.length > 0) {
                files = this.applyPropertyFilters(files, request.blockConfig.propertyFilters, request.currentAssetPath, request.currentAssetFrontmatter);
            }
            // Apply relation filter if specified
            if (request.blockConfig.relationProperty) {
                files = this.filterByRelation(files, request.blockConfig.relationProperty, request.currentAssetPath);
            }
            const totalCount = files.length;
            // Sort results
            if (request.blockConfig.sortBy) {
                files = this.sortFiles(files, request.blockConfig.sortBy, request.blockConfig.sortOrder || "asc");
            }
            // Limit results
            if (request.blockConfig.maxResults &&
                request.blockConfig.maxResults > 0) {
                files = files.slice(0, request.blockConfig.maxResults);
            }
            const executionTime = Date.now() - startTime;
            return Result_1.Result.ok({
                results: files,
                totalCount,
                executionTime,
            });
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to execute query block: ${error}`);
        }
    }
    filterByClass(files, className) {
        const cleanClassName = this.cleanClassName(className);
        return files.filter((file) => {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter)
                return false;
            const instanceClass = metadata.frontmatter["exo__Instance_class"];
            const fileClassName = this.cleanClassName(instanceClass);
            return fileClassName === cleanClassName;
        });
    }
    applyPropertyFilters(files, filters, currentAssetPath, currentAssetFrontmatter) {
        return files.filter((file) => {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter)
                return false;
            // Check all filters
            for (const filter of filters) {
                if (!this.evaluateFilter(metadata.frontmatter, filter, currentAssetPath, currentAssetFrontmatter, file)) {
                    return false;
                }
            }
            return true;
        });
    }
    evaluateFilter(frontmatter, filter, currentAssetPath, currentAssetFrontmatter, file) {
        const propertyValue = frontmatter[filter.property];
        let filterValue = filter.value;
        // Replace template variables
        if (typeof filterValue === "string") {
            filterValue = filterValue
                .replace("{{current_asset}}", `[[${currentAssetPath}]]`)
                .replace("{{current_file}}", `[[${currentAssetPath}]]`);
            // Replace frontmatter variables
            const varMatch = filterValue.match(/\{\{fm\.(.+?)\}\}/g);
            if (varMatch) {
                varMatch.forEach((match) => {
                    const prop = match.replace(/\{\{fm\.|}\}/g, "");
                    const value = currentAssetFrontmatter[prop];
                    if (value) {
                        filterValue = filterValue.replace(match, value);
                    }
                });
            }
        }
        // Clean values for comparison
        const cleanPropValue = this.cleanValue(propertyValue);
        const cleanFilterValue = this.cleanValue(filterValue);
        switch (filter.operator) {
            case "equals":
                return this.valuesEqual(cleanPropValue, cleanFilterValue);
            case "notEquals":
                return !this.valuesEqual(cleanPropValue, cleanFilterValue);
            case "contains":
                return this.valueContains(cleanPropValue, cleanFilterValue);
            case "startsWith":
                return this.valueStartsWith(cleanPropValue, cleanFilterValue);
            case "endsWith":
                return this.valueEndsWith(cleanPropValue, cleanFilterValue);
            case "exists":
                return propertyValue !== undefined && propertyValue !== null;
            case "notExists":
                return propertyValue === undefined || propertyValue === null;
            default:
                return false;
        }
    }
    valuesEqual(value1, value2) {
        // Handle arrays
        if (Array.isArray(value1)) {
            return value1.some((v) => this.valuesEqual(v, value2));
        }
        // Handle wikilinks
        const clean1 = this.cleanClassName(value1);
        const clean2 = this.cleanClassName(value2);
        return clean1 === clean2;
    }
    valueContains(value, searchValue) {
        if (Array.isArray(value)) {
            return value.some((v) => this.valueContains(v, searchValue));
        }
        const str = this.cleanClassName(value).toLowerCase();
        const search = this.cleanClassName(searchValue).toLowerCase();
        return str.includes(search);
    }
    valueStartsWith(value, searchValue) {
        if (Array.isArray(value)) {
            return value.some((v) => this.valueStartsWith(v, searchValue));
        }
        const str = this.cleanClassName(value).toLowerCase();
        const search = this.cleanClassName(searchValue).toLowerCase();
        return str.startsWith(search);
    }
    valueEndsWith(value, searchValue) {
        if (Array.isArray(value)) {
            return value.some((v) => this.valueEndsWith(v, searchValue));
        }
        const str = this.cleanClassName(value).toLowerCase();
        const search = this.cleanClassName(searchValue).toLowerCase();
        return str.endsWith(search);
    }
    filterByRelation(files, relationProperty, currentAssetPath) {
        const currentLink = `[[${currentAssetPath}]]`;
        return files.filter((file) => {
            const metadata = this.app.metadataCache.getFileCache(file);
            if (!metadata?.frontmatter)
                return false;
            const relationValue = metadata.frontmatter[relationProperty];
            if (!relationValue)
                return false;
            if (Array.isArray(relationValue)) {
                return relationValue.some((v) => this.cleanClassName(v) === this.cleanClassName(currentLink));
            }
            return (this.cleanClassName(relationValue) === this.cleanClassName(currentLink));
        });
    }
    sortFiles(files, sortBy, order) {
        return files.sort((a, b) => {
            const aMetadata = this.app.metadataCache.getFileCache(a);
            const bMetadata = this.app.metadataCache.getFileCache(b);
            const aValue = aMetadata?.frontmatter?.[sortBy] || "";
            const bValue = bMetadata?.frontmatter?.[sortBy] || "";
            let comparison = 0;
            if (aValue < bValue)
                comparison = -1;
            if (aValue > bValue)
                comparison = 1;
            return order === "asc" ? comparison : -comparison;
        });
    }
    cleanClassName(value) {
        if (!value)
            return "";
        const str = Array.isArray(value) ? value[0] : value;
        return (str
            ?.toString()
            .replace(/\[\[|\]\]/g, "")
            .trim() || "");
    }
    cleanValue(value) {
        if (Array.isArray(value)) {
            return value.map((v) => this.cleanValue(v));
        }
        if (typeof value === "string") {
            return value.replace(/\[\[|\]\]/g, "").trim();
        }
        return value;
    }
}
exports.ExecuteQueryBlockUseCase = ExecuteQueryBlockUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,