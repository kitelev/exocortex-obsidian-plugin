52fe5c136fe662c784dc8773364bce00
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianClassViewRepository = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const ClassView_1 = require("../../domain/aggregates/ClassView");
const ClassName_1 = require("../../domain/value-objects/ClassName");
const AssetId_1 = require("../../domain/value-objects/AssetId");
const Result_1 = require("../../domain/core/Result");
const UIButton_1 = require("../../domain/entities/UIButton");
/**
 * Obsidian implementation of ClassView repository
 * Maps between domain entities and Obsidian vault files
 */
class ObsidianClassViewRepository {
    constructor(app) {
        this.app = app;
    }
    findByClassName(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const files = this.app.vault.getMarkdownFiles();
                for (const file of files) {
                    const metadata = this.app.metadataCache.getFileCache(file);
                    if (!(metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter))
                        continue;
                    const instanceClass = metadata.frontmatter['exo__Instance_class'];
                    if (instanceClass !== '[[ui__ClassView]]')
                        continue;
                    const targetClass = metadata.frontmatter['ui__ClassView_targetClass'];
                    if (!targetClass)
                        continue;
                    const cleanTargetClass = this.cleanAssetReference(targetClass);
                    if (cleanTargetClass !== className.value)
                        continue;
                    // Found the ClassView for this class
                    return this.buildClassViewFromFile(file);
                }
                return Result_1.Result.ok(null);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to find ClassView: ${error.message}`);
            }
        });
    }
    findById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(id.toString() + '.md');
                if (!file || !(file instanceof obsidian_1.TFile)) {
                    return Result_1.Result.ok(null);
                }
                return this.buildClassViewFromFile(file);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to find ClassView by ID: ${error.message}`);
            }
        });
    }
    save(classView) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const filePath = `${classView.id.toString()}.md`;
                const content = this.serializeClassView(classView);
                const existingFile = this.app.vault.getAbstractFileByPath(filePath);
                if (existingFile instanceof obsidian_1.TFile) {
                    yield this.app.vault.modify(existingFile, content);
                }
                else {
                    yield this.app.vault.create(filePath, content);
                }
                return Result_1.Result.ok();
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to save ClassView: ${error.message}`);
            }
        });
    }
    delete(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(id.toString() + '.md');
                if (file instanceof obsidian_1.TFile) {
                    yield this.app.vault.delete(file);
                }
                return Result_1.Result.ok();
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to delete ClassView: ${error.message}`);
            }
        });
    }
    findAll() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const classViews = [];
                const files = this.app.vault.getMarkdownFiles();
                for (const file of files) {
                    const metadata = this.app.metadataCache.getFileCache(file);
                    if (!(metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter))
                        continue;
                    const instanceClass = metadata.frontmatter['exo__Instance_class'];
                    if (instanceClass !== '[[ui__ClassView]]')
                        continue;
                    const result = yield this.buildClassViewFromFile(file);
                    if (result.isSuccess && result.getValue()) {
                        classViews.push(result.getValue());
                    }
                }
                return Result_1.Result.ok(classViews);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to find all ClassViews: ${error.message}`);
            }
        });
    }
    exists(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const result = yield this.findByClassName(className);
            if (result.isFailure) {
                return Result_1.Result.fail(result.error);
            }
            return Result_1.Result.ok(result.getValue() !== null);
        });
    }
    buildClassViewFromFile(file) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const metadata = this.app.metadataCache.getFileCache(file);
                if (!(metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter)) {
                    return Result_1.Result.ok(null);
                }
                const fm = metadata.frontmatter;
                // Parse target class
                const targetClass = fm['ui__ClassView_targetClass'];
                if (!targetClass) {
                    return Result_1.Result.ok(null);
                }
                const classNameResult = ClassName_1.ClassName.create(this.cleanAssetReference(targetClass));
                if (classNameResult.isFailure) {
                    return Result_1.Result.fail(classNameResult.error);
                }
                // Parse buttons
                const buttonRefs = fm['ui__ClassView_buttons'] || [];
                const buttons = [];
                for (const buttonRef of this.ensureArray(buttonRefs)) {
                    const buttonResult = yield this.loadButton(this.cleanAssetReference(buttonRef));
                    if (buttonResult.isSuccess && buttonResult.getValue()) {
                        buttons.push(buttonResult.getValue());
                    }
                }
                // Parse display options
                const displayOptions = {
                    showProperties: fm['ui__ClassView_showProperties'] !== false,
                    showRelations: fm['ui__ClassView_showRelations'] !== false,
                    showBacklinks: fm['ui__ClassView_showBacklinks'] !== false,
                    showButtons: fm['ui__ClassView_showButtons'] !== false,
                    buttonPosition: fm['ui__ClassView_buttonPosition'] || 'top'
                };
                // Create ClassView
                const idResult = AssetId_1.AssetId.create(file.basename);
                if (idResult.isFailure) {
                    return Result_1.Result.fail(idResult.error);
                }
                const classViewResult = ClassView_1.ClassView.create({
                    id: idResult.getValue(),
                    className: classNameResult.getValue(),
                    buttons: buttons,
                    layoutTemplate: fm['ui__ClassView_template'],
                    displayOptions: displayOptions
                });
                if (classViewResult.isFailure) {
                    return Result_1.Result.fail(classViewResult.error);
                }
                return Result_1.Result.ok(classViewResult.getValue());
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to build ClassView: ${error.message}`);
            }
        });
    }
    loadButton(buttonName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const file = this.app.vault.getAbstractFileByPath(buttonName + '.md');
                if (!file || !(file instanceof obsidian_1.TFile)) {
                    return Result_1.Result.ok(null);
                }
                const metadata = this.app.metadataCache.getFileCache(file);
                if (!(metadata === null || metadata === void 0 ? void 0 : metadata.frontmatter)) {
                    return Result_1.Result.ok(null);
                }
                const fm = metadata.frontmatter;
                const idResult = AssetId_1.AssetId.create(file.basename);
                const commandIdResult = AssetId_1.AssetId.create(this.cleanAssetReference(fm['ui__Button_command'] || ''));
                if (idResult.isFailure || commandIdResult.isFailure) {
                    return Result_1.Result.ok(null);
                }
                const buttonResult = UIButton_1.UIButton.create({
                    id: idResult.getValue(),
                    label: fm['ui__Button_label'] || file.basename,
                    commandId: commandIdResult.getValue(),
                    order: fm['ui__Button_order'] || 0,
                    isEnabled: fm['ui__Button_enabled'] !== false,
                    tooltip: fm['ui__Button_tooltip']
                });
                if (buttonResult.isFailure) {
                    return Result_1.Result.fail(buttonResult.error);
                }
                return Result_1.Result.ok(buttonResult.getValue());
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to load button: ${error.message}`);
            }
        });
    }
    serializeClassView(classView) {
        const frontmatter = {
            'exo__Instance_class': '[[ui__ClassView]]',
            'ui__ClassView_targetClass': `[[${classView.className.value}]]`,
            'ui__ClassView_buttons': classView.buttons.map(b => `[[${b.id.toString()}]]`),
            'ui__ClassView_showProperties': classView.displayOptions.showProperties,
            'ui__ClassView_showRelations': classView.displayOptions.showRelations,
            'ui__ClassView_showBacklinks': classView.displayOptions.showBacklinks,
            'ui__ClassView_showButtons': classView.displayOptions.showButtons,
            'ui__ClassView_buttonPosition': classView.displayOptions.buttonPosition
        };
        const yamlContent = this.toYaml(frontmatter);
        return `---\n${yamlContent}---\n\n# ClassView: ${classView.className.value}\n`;
    }
    cleanAssetReference(ref) {
        if (typeof ref !== 'string')
            return '';
        return ref.replace(/\[\[|\]\]/g, '').trim();
    }
    ensureArray(value) {
        if (Array.isArray(value))
            return value;
        if (value)
            return [value];
        return [];
    }
    toYaml(obj) {
        // Simple YAML serialization
        return Object.entries(obj)
            .map(([key, value]) => {
            if (Array.isArray(value)) {
                return `${key}:\n${value.map(v => `  - ${v}`).join('\n')}`;
            }
            return `${key}: ${value}`;
        })
            .join('\n') + '\n';
    }
}
exports.ObsidianClassViewRepository = ObsidianClassViewRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,