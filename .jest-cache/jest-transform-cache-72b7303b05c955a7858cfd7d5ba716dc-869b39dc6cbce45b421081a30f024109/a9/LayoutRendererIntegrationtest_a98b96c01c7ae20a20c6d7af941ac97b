da5643032d298cbbc4ed08da34d9b26e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const main_1 = tslib_1.__importDefault(require("../../src/main"));
describe.skip('LayoutRenderer Integration (deprecated)', () => {
    let plugin;
    let mockApp;
    beforeEach(() => {
        // Create mock app
        mockApp = {
            vault: {
                getMarkdownFiles: jest.fn().mockReturnValue([]),
                read: jest.fn(),
                create: jest.fn(),
                modify: jest.fn(),
                on: jest.fn().mockReturnValue({ unload: jest.fn() }),
                getAbstractFileByPath: jest.fn()
            },
            workspace: {
                getActiveFile: jest.fn(),
                on: jest.fn().mockReturnValue({ unload: jest.fn() })
            },
            metadataCache: {
                getFileCache: jest.fn(),
                on: jest.fn().mockReturnValue({ unload: jest.fn() })
            }
        };
        plugin = new main_1.default(mockApp, {});
    });
    describe('Layout Renderer Registration', () => {
        test('should register exo-layout code block processor', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const registerSpy = jest.fn();
            plugin.registerMarkdownCodeBlockProcessor = registerSpy;
            yield plugin.onload();
            // Check that exo-layout processor was registered
            const calls = registerSpy.mock.calls;
            const layoutCall = calls.find(call => call[0] === 'exo-layout');
            expect(layoutCall).toBeDefined();
            expect(layoutCall[0]).toBe('exo-layout');
            expect(typeof layoutCall[1]).toBe('function');
        }));
        test('should render layout when exo-layout block is processed', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            let layoutProcessor;
            plugin.registerMarkdownCodeBlockProcessor = jest.fn((type, processor) => {
                if (type === 'exo-layout') {
                    layoutProcessor = processor;
                }
            });
            yield plugin.onload();
            // Mock active file with frontmatter
            const mockFile = {
                path: 'test.md',
                basename: 'test',
                name: 'test.md'
            };
            mockApp.workspace.getActiveFile.mockReturnValue(mockFile);
            mockApp.metadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Instance_class': '[[ems__Task]]',
                    'title': 'Test Task',
                    'status': 'active'
                }
            });
            // Create mock element
            const mockEl = {
                empty: jest.fn(),
                createDiv: jest.fn().mockReturnValue({
                    createEl: jest.fn(),
                    createDiv: jest.fn(),
                    style: {},
                    setAttribute: jest.fn(),
                    addClass: jest.fn()
                }),
                createEl: jest.fn()
            };
            // Process the block
            yield layoutProcessor('', mockEl, {});
            expect(mockEl.empty).toHaveBeenCalled();
            expect(mockApp.workspace.getActiveFile).toHaveBeenCalled();
            expect(mockApp.metadataCache.getFileCache).toHaveBeenCalledWith(mockFile);
        }));
        test('should not render if no active file', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            let layoutProcessor;
            plugin.registerMarkdownCodeBlockProcessor = jest.fn((type, processor) => {
                if (type === 'exo-layout') {
                    layoutProcessor = processor;
                }
            });
            yield plugin.onload();
            mockApp.workspace.getActiveFile.mockReturnValue(null);
            const mockEl = {
                empty: jest.fn()
            };
            yield layoutProcessor('', mockEl, {});
            expect(mockEl.empty).not.toHaveBeenCalled();
        }));
        test('should not render if no frontmatter', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            let layoutProcessor;
            plugin.registerMarkdownCodeBlockProcessor = jest.fn((type, processor) => {
                if (type === 'exo-layout') {
                    layoutProcessor = processor;
                }
            });
            yield plugin.onload();
            const mockFile = {
                path: 'test.md'
            };
            mockApp.workspace.getActiveFile.mockReturnValue(mockFile);
            mockApp.metadataCache.getFileCache.mockReturnValue(null);
            const mockEl = {
                empty: jest.fn()
            };
            yield layoutProcessor('', mockEl, {});
            expect(mockEl.empty).not.toHaveBeenCalled();
        }));
    });
    describe('Layout Rendering Types', () => {
        test('should support query blocks in layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const layoutRenderer = plugin.layoutRenderer;
            expect(layoutRenderer).toBeDefined();
            // Verify renderer has query block support
            expect(layoutRenderer.queryRenderer).toBeDefined();
        }));
        test('should support properties blocks in layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const layoutRenderer = plugin.layoutRenderer;
            expect(layoutRenderer).toBeDefined();
            // Verify renderer has properties block support
            expect(layoutRenderer.propertiesRenderer).toBeDefined();
        }));
        test('should support backlinks blocks in layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const layoutRenderer = plugin.layoutRenderer;
            expect(layoutRenderer).toBeDefined();
            // Verify renderer has backlinks block support
            expect(layoutRenderer.backlinksRenderer).toBeDefined();
        }));
        test('should support custom blocks in layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield plugin.onload();
            const layoutRenderer = plugin.layoutRenderer;
            expect(layoutRenderer).toBeDefined();
            // Verify renderer has custom block support
            expect(layoutRenderer.customRenderer).toBeDefined();
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,