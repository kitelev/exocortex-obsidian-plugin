{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/test-cleanup.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/test-cleanup.ts"],"sourcesContent":["/**\n * Global Test Cleanup System\n * Prevents memory leaks and ensures proper test isolation\n */\n\n// Track global state for cleanup\ninterface GlobalTestState {\n  timers: Set<NodeJS.Timeout>;\n  intervals: Set<NodeJS.Timeout>;\n  eventListeners: Map<\n    EventTarget,\n    Array<{ type: string; listener: EventListener }>\n  >;\n  domNodes: Set<Element>;\n  mockInstances: Set<any>;\n}\n\nconst globalTestState: GlobalTestState = {\n  timers: new Set(),\n  intervals: new Set(),\n  eventListeners: new Map(),\n  domNodes: new Set(),\n  mockInstances: new Set(),\n};\n\n// Override setTimeout to track timers\nconst originalSetTimeout = global.setTimeout;\nglobal.setTimeout = ((...args: any[]) => {\n  const timer = originalSetTimeout.apply(global, args as [Function, number]);\n  globalTestState.timers.add(timer);\n  return timer;\n}) as typeof setTimeout;\n\n// Override setInterval to track intervals\nconst originalSetInterval = global.setInterval;\nglobal.setInterval = ((...args: any[]) => {\n  const interval = originalSetInterval.apply(\n    global,\n    args as [Function, number],\n  );\n  globalTestState.intervals.add(interval);\n  return interval;\n}) as typeof setInterval;\n\n// Override clearTimeout\nconst originalClearTimeout = global.clearTimeout;\nglobal.clearTimeout = ((timer: NodeJS.Timeout) => {\n  globalTestState.timers.delete(timer);\n  return originalClearTimeout(timer);\n}) as typeof clearTimeout;\n\n// Override clearInterval\nconst originalClearInterval = global.clearInterval;\nglobal.clearInterval = ((interval: NodeJS.Timeout) => {\n  globalTestState.intervals.delete(interval);\n  return originalClearInterval(interval);\n}) as typeof clearInterval;\n\n// Track DOM event listeners\nif (\n  typeof EventTarget !== \"undefined\" &&\n  EventTarget.prototype.addEventListener\n) {\n  const originalAddEventListener = EventTarget.prototype.addEventListener;\n  EventTarget.prototype.addEventListener = function (\n    type: string,\n    listener: EventListener,\n    options?: boolean | AddEventListenerOptions,\n  ) {\n    if (!globalTestState.eventListeners.has(this)) {\n      globalTestState.eventListeners.set(this, []);\n    }\n    globalTestState.eventListeners.get(this)!.push({ type, listener });\n    return originalAddEventListener.call(this, type, listener, options);\n  };\n}\n\n// Track DOM nodes created during tests\nif (typeof document !== \"undefined\" && document.createElement) {\n  const originalCreateElement = document.createElement;\n  document.createElement = function <K extends keyof HTMLElementTagNameMap>(\n    tagName: K,\n    options?: ElementCreationOptions,\n  ): HTMLElementTagNameMap[K] {\n    const element = originalCreateElement.call(this, tagName, options);\n    globalTestState.domNodes.add(element);\n    return element;\n  };\n}\n\n/**\n * Memory-safe mock factory\n */\nexport class MemorySafeMockFactory {\n  private static instances = new Map<string, any>();\n\n  static createMock<T>(identifier: string, mockImplementation: () => T): T {\n    if (this.instances.has(identifier)) {\n      return this.instances.get(identifier);\n    }\n\n    const mock = mockImplementation();\n    this.instances.set(identifier, mock);\n    globalTestState.mockInstances.add(mock);\n    return mock;\n  }\n\n  static clearMock(identifier: string): void {\n    if (this.instances.has(identifier)) {\n      const mock = this.instances.get(identifier);\n      globalTestState.mockInstances.delete(mock);\n      this.instances.delete(identifier);\n    }\n  }\n\n  static clearAllMocks(): void {\n    this.instances.clear();\n    globalTestState.mockInstances.clear();\n  }\n}\n\n/**\n * Force cleanup of all test resources\n */\nexport function forceCleanupTestResources(): void {\n  // Clear all timers\n  globalTestState.timers.forEach((timer) => {\n    try {\n      clearTimeout(timer);\n    } catch (e) {\n      // Ignore cleanup errors\n    }\n  });\n  globalTestState.timers.clear();\n\n  // Clear all intervals\n  globalTestState.intervals.forEach((interval) => {\n    try {\n      clearInterval(interval);\n    } catch (e) {\n      // Ignore cleanup errors\n    }\n  });\n  globalTestState.intervals.clear();\n\n  // Remove all event listeners\n  globalTestState.eventListeners.forEach((listeners, target) => {\n    listeners.forEach(({ type, listener }) => {\n      try {\n        target.removeEventListener(type, listener);\n      } catch (e) {\n        // Ignore cleanup errors\n      }\n    });\n  });\n  globalTestState.eventListeners.clear();\n\n  // Clean up DOM nodes\n  if (typeof document !== \"undefined\") {\n    globalTestState.domNodes.forEach((node) => {\n      try {\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n      } catch (e) {\n        // Ignore cleanup errors\n      }\n    });\n    globalTestState.domNodes.clear();\n\n    // Clear document body\n    if (document.body) {\n      document.body.innerHTML = \"\";\n    }\n  }\n\n  // Clear mock instances\n  MemorySafeMockFactory.clearAllMocks();\n\n  // Force garbage collection if available\n  if (typeof global.gc === \"function\") {\n    try {\n      global.gc();\n    } catch (e) {\n      // Ignore GC errors\n    }\n  }\n}\n\n/**\n * Memory usage tracker for tests\n */\nexport class MemoryTracker {\n  private static snapshots: Array<{\n    test: string;\n    memory: NodeJS.MemoryUsage;\n    timestamp: number;\n  }> = [];\n\n  static takeSnapshot(testName: string): NodeJS.MemoryUsage {\n    const memory = process.memoryUsage();\n    this.snapshots.push({\n      test: testName,\n      memory,\n      timestamp: Date.now(),\n    });\n\n    // Keep only last 10 snapshots to prevent memory buildup\n    if (this.snapshots.length > 10) {\n      this.snapshots.shift();\n    }\n\n    return memory;\n  }\n\n  static getMemoryIncrease(from: string, to: string): number {\n    const fromSnapshot = this.snapshots.find((s) => s.test === from);\n    const toSnapshot = this.snapshots.find((s) => s.test === to);\n\n    if (!fromSnapshot || !toSnapshot) {\n      return 0;\n    }\n\n    return toSnapshot.memory.heapUsed - fromSnapshot.memory.heapUsed;\n  }\n\n  static reportMemoryUsage(): void {\n    if (process.env.JEST_VERBOSE || process.env.MEMORY_DEBUG) {\n      console.log(\"Memory Usage Report:\");\n      this.snapshots.forEach((snapshot) => {\n        const mb = (snapshot.memory.heapUsed / 1024 / 1024).toFixed(2);\n        console.log(`  ${snapshot.test}: ${mb}MB`);\n      });\n    }\n  }\n\n  static clearSnapshots(): void {\n    this.snapshots.length = 0;\n  }\n}\n\n// Global setup and teardown\nbeforeEach(() => {\n  // Clear any hanging resources before each test\n  forceCleanupTestResources();\n\n  // Take memory snapshot\n  const testName = expect.getState()?.currentTestName || \"unknown\";\n  MemoryTracker.takeSnapshot(`before-${testName}`);\n});\n\nafterEach(() => {\n  // Clear all resources after each test\n  forceCleanupTestResources();\n\n  // Take memory snapshot\n  const testName = expect.getState()?.currentTestName || \"unknown\";\n  MemoryTracker.takeSnapshot(`after-${testName}`);\n\n  // Report excessive memory usage\n  const increase = MemoryTracker.getMemoryIncrease(\n    `before-${testName}`,\n    `after-${testName}`,\n  );\n  const warningThreshold = process.env.CI ? 10 * 1024 * 1024 : 50 * 1024 * 1024; // 10MB in CI, 50MB locally\n\n  if (increase > warningThreshold) {\n    console.warn(\n      `Warning: Test \"${testName}\" used ${(increase / 1024 / 1024).toFixed(2)}MB of memory`,\n    );\n  }\n});\n\nafterAll(() => {\n  // Final cleanup and memory report\n  forceCleanupTestResources();\n  MemoryTracker.reportMemoryUsage();\n  MemoryTracker.clearSnapshots();\n});\n\n// Export utilities for use in tests\nexport { globalTestState, forceCleanupTestResources };\n"],"version":3}