{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFSerializer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFSerializer.ts"],"sourcesContent":["/**\n * RDF Serializer for converting Graph instances to various RDF formats\n * Supports Turtle (.ttl), N-Triples (.nt), JSON-LD (.jsonld), and RDF/XML (.rdf)\n */\n\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport {\n  Triple,\n  IRI,\n  BlankNode,\n  Literal,\n} from \"../../domain/semantic/core/Triple\";\nimport { Result } from \"../../domain/core/Result\";\nimport { NamespaceManager } from \"./NamespaceManager\";\n\nexport type RDFFormat = \"turtle\" | \"n-triples\" | \"json-ld\" | \"rdf-xml\";\n\nexport interface SerializationOptions {\n  format: RDFFormat;\n  includeComments?: boolean;\n  prettyPrint?: boolean;\n  baseIRI?: string;\n  namespaceManager?: NamespaceManager;\n}\n\nexport interface SerializationResult {\n  content: string;\n  format: RDFFormat;\n  tripleCount: number;\n  metadata?: {\n    namespaces: Record<string, string>;\n    warnings?: string[];\n  };\n}\n\nexport class RDFSerializer {\n  private namespaceManager: NamespaceManager;\n\n  constructor(namespaceManager?: NamespaceManager) {\n    this.namespaceManager = namespaceManager || new NamespaceManager();\n  }\n\n  /**\n   * Serialize a graph to the specified RDF format\n   */\n  serialize(\n    graph: Graph,\n    options: SerializationOptions,\n  ): Result<SerializationResult> {\n    try {\n      // Validate baseIRI if provided\n      if (options.baseIRI) {\n        try {\n          new URL(options.baseIRI);\n        } catch {\n          return Result.fail(`Invalid base IRI: ${options.baseIRI}`);\n        }\n      }\n\n      const nm = options.namespaceManager || this.namespaceManager;\n\n      let content: string;\n      const warnings: string[] = [];\n\n      switch (options.format) {\n        case \"turtle\":\n          content = this.serializeToTurtle(graph, nm, options);\n          break;\n\n        case \"n-triples\":\n          content = this.serializeToNTriples(graph, warnings);\n          break;\n\n        case \"json-ld\":\n          content = this.serializeToJSONLD(graph, nm, options);\n          break;\n\n        case \"rdf-xml\":\n          content = this.serializeToRDFXML(graph, nm, options);\n          break;\n\n        default:\n          return Result.fail(`Unsupported format: ${options.format}`);\n      }\n\n      const result: SerializationResult = {\n        content,\n        format: options.format,\n        tripleCount: graph.size(),\n        metadata: {\n          namespaces: this.extractNamespaces(nm),\n          warnings: warnings.length > 0 ? warnings : undefined,\n        },\n      };\n\n      return Result.ok(result);\n    } catch (error) {\n      return Result.fail(`Serialization failed: ${error.message}`);\n    }\n  }\n\n  /**\n   * Serialize graph to Turtle format\n   */\n  private serializeToTurtle(\n    graph: Graph,\n    nm: NamespaceManager,\n    options: SerializationOptions,\n  ): string {\n    const lines: string[] = [];\n    const { includeComments = true, prettyPrint = true } = options;\n\n    // Add header comment\n    if (includeComments) {\n      lines.push(\"# RDF Graph exported from Exocortex\");\n      lines.push(`# Generated on ${new Date().toISOString()}`);\n      lines.push(`# Triple count: ${graph.size()}`);\n      lines.push(\"\");\n    }\n\n    // Add namespace prefixes\n    const prefixDeclarations = nm.generatePrefixDeclarations(\"turtle\");\n    if (prefixDeclarations) {\n      lines.push(prefixDeclarations);\n      lines.push(\"\");\n    }\n\n    // Group triples by subject for prettier output\n    const subjectGroups = this.groupTriplesBySubject(graph);\n\n    for (const [subject, triples] of subjectGroups) {\n      if (triples.length === 0) continue;\n\n      const subjectStr = this.formatNode(subject, nm);\n\n      if (triples.length === 1) {\n        // Single triple on one line\n        const triple = triples[0];\n        const predicateStr = this.formatNode(triple.getPredicate(), nm);\n        const objectStr = this.formatNode(triple.getObject(), nm);\n        lines.push(`${subjectStr} ${predicateStr} ${objectStr} .`);\n      } else {\n        // Multiple triples with same subject - pretty print\n        lines.push(`${subjectStr}`);\n\n        // Group by predicate\n        const predicateGroups = this.groupTriplesByPredicate(triples);\n        const predicateEntries = Array.from(predicateGroups.entries());\n\n        for (let i = 0; i < predicateEntries.length; i++) {\n          const [predicate, objects] = predicateEntries[i];\n          const predicateStr = this.formatNode(predicate, nm);\n          const isLast = i === predicateEntries.length - 1;\n\n          if (objects.length === 1) {\n            const objectStr = this.formatNode(objects[0], nm);\n            lines.push(\n              `    ${predicateStr} ${objectStr}${isLast ? \" .\" : \" ;\"}`,\n            );\n          } else {\n            lines.push(`    ${predicateStr}`);\n            for (let j = 0; j < objects.length; j++) {\n              const objectStr = this.formatNode(objects[j], nm);\n              const isLastObject = j === objects.length - 1;\n              const suffix = isLastObject ? (isLast ? \" .\" : \" ;\") : \" ,\";\n              lines.push(`        ${objectStr}${suffix}`);\n            }\n          }\n        }\n      }\n\n      if (prettyPrint) {\n        lines.push(\"\"); // Empty line between subject groups\n      }\n    }\n\n    return lines.join(\"\\n\");\n  }\n\n  /**\n   * Serialize graph to N-Triples format\n   */\n  private serializeToNTriples(graph: Graph, warnings: string[]): string {\n    const lines: string[] = [];\n\n    for (const triple of graph.toArray()) {\n      try {\n        const subjectStr = this.formatNodeNTriples(triple.getSubject());\n        const predicateStr = this.formatNodeNTriples(triple.getPredicate());\n        const objectStr = this.formatNodeNTriples(triple.getObject());\n\n        lines.push(`${subjectStr} ${predicateStr} ${objectStr} .`);\n      } catch (error) {\n        warnings.push(`Failed to serialize triple: ${error.message}`);\n      }\n    }\n\n    return lines.join(\"\\n\");\n  }\n\n  /**\n   * Serialize graph to JSON-LD format\n   */\n  private serializeToJSONLD(\n    graph: Graph,\n    nm: NamespaceManager,\n    options: SerializationOptions,\n  ): string {\n    const context: Record<string, string> = {};\n\n    // Build context from namespace manager\n    for (const binding of nm.getAllBindings()) {\n      context[binding.prefix] = binding.namespace.toString();\n    }\n\n    // Add base IRI if specified\n    if (options.baseIRI) {\n      context[\"@base\"] = options.baseIRI;\n    }\n\n    // Group triples by subject\n    const subjects: Record<string, any> = {};\n\n    for (const triple of graph.toArray()) {\n      const subjectId = this.formatNodeJSONLD(triple.getSubject(), nm);\n      const predicate = this.formatNodeJSONLD(triple.getPredicate(), nm);\n      const object = this.formatObjectJSONLD(triple.getObject(), nm);\n\n      if (!subjects[subjectId]) {\n        subjects[subjectId] = { \"@id\": subjectId };\n      }\n\n      // Handle multiple values for same predicate\n      if (subjects[subjectId][predicate]) {\n        if (!Array.isArray(subjects[subjectId][predicate])) {\n          subjects[subjectId][predicate] = [subjects[subjectId][predicate]];\n        }\n        subjects[subjectId][predicate].push(object);\n      } else {\n        subjects[subjectId][predicate] = object;\n      }\n    }\n\n    const jsonLD = {\n      \"@context\": context,\n      \"@graph\": Object.values(subjects),\n    };\n\n    return JSON.stringify(jsonLD, null, options.prettyPrint ? 2 : 0);\n  }\n\n  /**\n   * Serialize graph to RDF/XML format\n   */\n  private serializeToRDFXML(\n    graph: Graph,\n    nm: NamespaceManager,\n    options: SerializationOptions,\n  ): string {\n    const lines: string[] = [];\n\n    // XML header\n    lines.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>');\n\n    // RDF root element with namespace declarations\n    let rdfElement = \"<rdf:RDF\";\n    rdfElement += ' xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"';\n\n    for (const binding of nm.getAllBindings()) {\n      if (binding.prefix !== \"rdf\") {\n        rdfElement += ` xmlns:${binding.prefix}=\"${binding.namespace.toString()}\"`;\n      }\n    }\n\n    if (options.baseIRI) {\n      rdfElement += ` xml:base=\"${options.baseIRI}\"`;\n    }\n\n    rdfElement += \">\";\n    lines.push(rdfElement);\n\n    // Group triples by subject\n    const subjectGroups = this.groupTriplesBySubject(graph);\n\n    for (const [subject, triples] of subjectGroups) {\n      if (triples.length === 0) continue;\n\n      // Determine RDF Description or typed resource\n      const rdfTypeTriples = triples.filter(\n        (t) =>\n          t.getPredicate().toString() ===\n          \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\",\n      );\n\n      if (rdfTypeTriples.length > 0) {\n        // Use typed element\n        const type = rdfTypeTriples[0].getObject();\n        const typeStr = this.formatNodeRDFXML(type, nm);\n        lines.push(\n          `  <${typeStr} rdf:about=\"${this.escapeXML(subject.toString())}\">`,\n        );\n      } else {\n        // Use rdf:Description\n        lines.push(\n          `  <rdf:Description rdf:about=\"${this.escapeXML(subject.toString())}\">`,\n        );\n      }\n\n      // Add properties\n      for (const triple of triples) {\n        const predicate = triple.getPredicate();\n        const object = triple.getObject();\n\n        // Skip rdf:type as it's handled above\n        if (\n          predicate.toString() ===\n          \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n        ) {\n          continue;\n        }\n\n        const predicateStr = this.formatNodeRDFXML(predicate, nm);\n\n        if (object instanceof Literal) {\n          let literalElement = `    <${predicateStr}`;\n\n          if (object.getDatatype()) {\n            literalElement += ` rdf:datatype=\"${this.escapeXML(object.getDatatype()!.toString())}\"`;\n          }\n\n          if (object.getLanguage()) {\n            literalElement += ` xml:lang=\"${object.getLanguage()}\"`;\n          }\n\n          literalElement += `>${this.escapeXML(object.getValue())}</${predicateStr}>`;\n          lines.push(literalElement);\n        } else {\n          // IRI or BlankNode\n          const objectAttr =\n            object instanceof BlankNode\n              ? `rdf:nodeID=\"${object.toString().substring(2)}\"`\n              : `rdf:resource=\"${this.escapeXML(object.toString())}\"`;\n\n          lines.push(`    <${predicateStr} ${objectAttr}/>`);\n        }\n      }\n\n      // Close element\n      if (rdfTypeTriples.length > 0) {\n        const type = rdfTypeTriples[0].getObject();\n        const typeStr = this.formatNodeRDFXML(type, nm);\n        lines.push(`  </${typeStr}>`);\n      } else {\n        lines.push(\"  </rdf:Description>\");\n      }\n    }\n\n    lines.push(\"</rdf:RDF>\");\n\n    return lines.join(\"\\n\");\n  }\n\n  /**\n   * Group triples by subject\n   */\n  private groupTriplesBySubject(graph: Graph): Map<IRI | BlankNode, Triple[]> {\n    const groups = new Map<IRI | BlankNode, Triple[]>();\n\n    for (const triple of graph.toArray()) {\n      const subject = triple.getSubject();\n      const subjectKey = subject.toString();\n\n      if (!groups.has(subject)) {\n        groups.set(subject, []);\n      }\n\n      groups.get(subject)!.push(triple);\n    }\n\n    return groups;\n  }\n\n  /**\n   * Group triples by predicate\n   */\n  private groupTriplesByPredicate(\n    triples: Triple[],\n  ): Map<IRI, (IRI | BlankNode | Literal)[]> {\n    const groups = new Map<IRI, (IRI | BlankNode | Literal)[]>();\n\n    for (const triple of triples) {\n      const predicate = triple.getPredicate();\n\n      if (!groups.has(predicate)) {\n        groups.set(predicate, []);\n      }\n\n      groups.get(predicate)!.push(triple.getObject());\n    }\n\n    return groups;\n  }\n\n  /**\n   * Format a node for Turtle/N3 output\n   */\n  private formatNode(\n    node: IRI | BlankNode | Literal,\n    nm: NamespaceManager,\n  ): string {\n    if (node instanceof IRI) {\n      return nm.compressIRI(node);\n    } else if (node instanceof BlankNode) {\n      return node.toString();\n    } else if (node instanceof Literal) {\n      return node.toString();\n    }\n\n    throw new Error(`Unknown node type: ${typeof node}`);\n  }\n\n  /**\n   * Format a node for N-Triples output (no prefixes)\n   */\n  private formatNodeNTriples(node: IRI | BlankNode | Literal): string {\n    if (node instanceof IRI) {\n      return `<${node.toString()}>`;\n    } else if (node instanceof BlankNode) {\n      return node.toString();\n    } else if (node instanceof Literal) {\n      return node.toString();\n    }\n\n    throw new Error(`Unknown node type: ${typeof node}`);\n  }\n\n  /**\n   * Format a node for JSON-LD output\n   */\n  private formatNodeJSONLD(\n    node: IRI | BlankNode,\n    nm: NamespaceManager,\n  ): string {\n    if (node instanceof IRI) {\n      const compressed = nm.compressIRI(node);\n      return compressed.startsWith(\"<\") && compressed.endsWith(\">\")\n        ? compressed.slice(1, -1) // Remove angle brackets\n        : compressed;\n    } else if (node instanceof BlankNode) {\n      return node.toString();\n    }\n\n    throw new Error(`Invalid node type for JSON-LD ID: ${typeof node}`);\n  }\n\n  /**\n   * Format an object for JSON-LD output\n   */\n  private formatObjectJSONLD(\n    object: IRI | BlankNode | Literal,\n    nm: NamespaceManager,\n  ): any {\n    if (object instanceof IRI) {\n      return { \"@id\": this.formatNodeJSONLD(object, nm) };\n    } else if (object instanceof BlankNode) {\n      return { \"@id\": object.toString() };\n    } else if (object instanceof Literal) {\n      const result: any = { \"@value\": object.getValue() };\n\n      if (object.getDatatype()) {\n        result[\"@type\"] = this.formatNodeJSONLD(object.getDatatype()!, nm);\n      }\n\n      if (object.getLanguage()) {\n        result[\"@language\"] = object.getLanguage();\n      }\n\n      return result;\n    }\n\n    throw new Error(`Unknown object type: ${typeof object}`);\n  }\n\n  /**\n   * Format a node for RDF/XML output\n   */\n  private formatNodeRDFXML(\n    node: IRI | BlankNode | Literal,\n    nm: NamespaceManager,\n  ): string {\n    if (node instanceof IRI) {\n      const compressed = nm.compressIRI(node);\n      return compressed.startsWith(\"<\") && compressed.endsWith(\">\")\n        ? node.toString() // Use full IRI if compression failed\n        : compressed;\n    } else if (node instanceof BlankNode) {\n      return node.toString();\n    } else if (node instanceof Literal) {\n      return node.toString();\n    }\n\n    throw new Error(`Unknown node type: ${typeof node}`);\n  }\n\n  /**\n   * Escape special XML characters\n   */\n  private escapeXML(text: string): string {\n    return text\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#39;\");\n  }\n\n  /**\n   * Extract namespaces from namespace manager\n   */\n  private extractNamespaces(nm: NamespaceManager): Record<string, string> {\n    const namespaces: Record<string, string> = {};\n\n    for (const binding of nm.getAllBindings()) {\n      namespaces[binding.prefix] = binding.namespace.toString();\n    }\n\n    return namespaces;\n  }\n\n  /**\n   * Get file extension for format\n   */\n  static getFileExtension(format: RDFFormat): string {\n    switch (format) {\n      case \"turtle\":\n        return \".ttl\";\n      case \"n-triples\":\n        return \".nt\";\n      case \"json-ld\":\n        return \".jsonld\";\n      case \"rdf-xml\":\n        return \".rdf\";\n      default:\n        return \".rdf\";\n    }\n  }\n\n  /**\n   * Get MIME type for format\n   */\n  static getMimeType(format: RDFFormat): string {\n    switch (format) {\n      case \"turtle\":\n        return \"text/turtle\";\n      case \"n-triples\":\n        return \"application/n-triples\";\n      case \"json-ld\":\n        return \"application/ld+json\";\n      case \"rdf-xml\":\n        return \"application/rdf+xml\";\n      default:\n        return \"application/rdf+xml\";\n    }\n  }\n}\n"],"version":3}