{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/ExecuteButtonCommandUseCase.ts","mappings":";;;AACA,qDAAkD;AAGlD,gEAA6D;AAyB7D,MAAa,2BAA2B;IAGtC,YACU,gBAAmC,EACnC,eAAiC;QADjC,qBAAgB,GAAhB,gBAAgB,CAAmB;QACnC,oBAAe,GAAf,eAAe,CAAkB;IACxC,CAAC;IAEJ,KAAK,CAAC,OAAO,CACX,OAAoC;QAEpC,mBAAmB;QACnB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YACrB,OAAO,eAAM,CAAC,IAAI,CAA+B,uBAAuB,CAAC,CAAC;SAC3E;QAED,kBAAkB;QAClB,MAAM,cAAc,GAAG,iBAAO,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,cAAc,CAAC,SAAS,EAAE;YAC5B,OAAO,eAAM,CAAC,IAAI,CAA+B,mBAAmB,CAAC,CAAC;SACvE;QACD,MAAM,QAAQ,GAAG,cAAc,CAAC,QAAQ,EAAE,CAAC;QAE3C,kBAAkB;QAClB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC1E,IAAI,YAAY,CAAC,SAAS,EAAE;YAC1B,OAAO,eAAM,CAAC,IAAI,CAChB,0BAA0B,YAAY,CAAC,KAAK,EAAE,CAC/C,CAAC;SACH;QAED,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,EAAE,CAAC;QACvC,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,eAAM,CAAC,IAAI,CAA+B,kBAAkB,CAAC,CAAC;SACtE;QAED,kCAAkC;QAClC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE;YACxB,OAAO,eAAM,CAAC,IAAI,CAA+B,oBAAoB,CAAC,CAAC;SACxE;QAED,mBAAmB;QACnB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAC/D,MAAM,CAAC,SAAS,CACjB,CAAC;QACF,IAAI,aAAa,CAAC,SAAS,EAAE;YAC3B,OAAO,eAAM,CAAC,IAAI,CAChB,2BAA2B,aAAa,CAAC,KAAK,EAAE,CACjD,CAAC;SACH;QAED,MAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QACzC,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,eAAM,CAAC,IAAI,CAA+B,mBAAmB,CAAC,CAAC;SACvE;QAED,oDAAoD;QACpD,IAAI,OAAO,CAAC,aAAa,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;YACrD,qCAAqC;YACrC,OAAO,eAAM,CAAC,EAAE,CAA+B;gBAC7C,OAAO,EAAE,KAAK;gBACd,aAAa,EAAE,IAAI;gBACnB,WAAW,EAAE;oBACX,KAAK,EAAE,OAAO,CAAC,IAAI;oBACnB,WAAW,EAAE,OAAO,CAAC,WAAW;oBAChC,UAAU,EAAE,OAAO,CAAC,UAAU;iBAC/B;aACF,CAAC,CAAC;SACJ;QAED,yCAAyC;QACzC,MAAM,aAAa,GAAG,OAAO,CAAC,qBAAqB,CACjD,OAAO,CAAC,eAAe,IAAI,EAAE,CAC9B,CAAC;QAEF,IAAI,aAAa,CAAC,SAAS,EAAE;YAC3B,OAAO,eAAM,CAAC,IAAI,CAChB,uBAAuB,aAAa,CAAC,KAAK,EAAE,CAC7C,CAAC;SACH;QAED,MAAM,gBAAgB,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;QAElD,2DAA2D;QAC3D,IAAI;YACF,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;gBACzD,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE;oBACP,GAAG,gBAAgB;oBACnB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,WAAW,EAAE,OAAO,CAAC,OAAO,EAAE,WAAW;oBACzC,YAAY,EAAE,OAAO,CAAC,OAAO,EAAE,YAAY;oBAC3C,SAAS,EAAE,OAAO,CAAC,OAAO,EAAE,SAAS;iBACtC;aACF,CAAC,CAAC;YAEH,IAAI,eAAe,CAAC,SAAS,EAAE;gBAC7B,OAAO,eAAM,CAAC,IAAI,CAChB,6BAA6B,eAAe,CAAC,KAAK,EAAE,CACrD,CAAC;aACH;YAED,MAAM,MAAM,GAAG,eAAe,CAAC,QAAQ,EAAE,CAAC;YAE1C,4BAA4B;YAC5B,MAAM,CAAC,KAAK,EAAE,CAAC;YAEf,OAAO,eAAM,CAAC,EAAE,CAA+B;gBAC7C,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,YAAY,OAAO,CAAC,IAAI,yBAAyB;gBAC1D,MAAM,EAAE,MAAM;aACf,CAAC,CAAC;SACJ;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,eAAM,CAAC,IAAI,CAChB,8CAA8C,KAAK,CAAC,OAAO,EAAE,CAC9D,CAAC;SACH;IACH,CAAC;CACF;AAtHD,kEAsHC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/ExecuteButtonCommandUseCase.ts"],"sourcesContent":["import { UseCase } from \"../core/UseCase\";\nimport { Result } from \"../../domain/core/Result\";\nimport { IButtonRepository } from \"../../domain/repositories/IButtonRepository\";\nimport { ICommandExecutor } from \"../services/ICommandExecutor\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport { CommandType } from \"../../domain/entities/ButtonCommand\";\n\n/**\n * Use Case for executing a button command\n */\nexport interface ExecuteButtonCommandRequest {\n  buttonId: string;\n  assetId?: string;\n  inputParameters?: Record<string, any>;\n  context?: {\n    currentView?: string;\n    currentClass?: string;\n    selection?: string[];\n  };\n}\n\nexport interface ExecuteButtonCommandResponse {\n  success: boolean;\n  message?: string;\n  result?: any;\n  requiresInput?: boolean;\n  inputSchema?: any;\n}\n\nexport class ExecuteButtonCommandUseCase\n  implements UseCase<ExecuteButtonCommandRequest, ExecuteButtonCommandResponse>\n{\n  constructor(\n    private buttonRepository: IButtonRepository,\n    private commandExecutor: ICommandExecutor,\n  ) {}\n\n  async execute(\n    request: ExecuteButtonCommandRequest,\n  ): Promise<Result<ExecuteButtonCommandResponse>> {\n    // Validate request\n    if (!request.buttonId) {\n      return Result.fail<ExecuteButtonCommandResponse>(\"Button ID is required\");\n    }\n\n    // Parse button ID\n    const buttonIdResult = AssetId.create(request.buttonId);\n    if (buttonIdResult.isFailure) {\n      return Result.fail<ExecuteButtonCommandResponse>(\"Invalid button ID\");\n    }\n    const buttonId = buttonIdResult.getValue();\n\n    // Find the button\n    const buttonResult = await this.buttonRepository.findButtonById(buttonId);\n    if (buttonResult.isFailure) {\n      return Result.fail<ExecuteButtonCommandResponse>(\n        `Failed to load button: ${buttonResult.error}`,\n      );\n    }\n\n    const button = buttonResult.getValue();\n    if (!button) {\n      return Result.fail<ExecuteButtonCommandResponse>(\"Button not found\");\n    }\n\n    // Check if button can be executed\n    if (!button.canExecute()) {\n      return Result.fail<ExecuteButtonCommandResponse>(\"Button is disabled\");\n    }\n\n    // Load the command\n    const commandResult = await this.buttonRepository.findCommandById(\n      button.commandId,\n    );\n    if (commandResult.isFailure) {\n      return Result.fail<ExecuteButtonCommandResponse>(\n        `Failed to load command: ${commandResult.error}`,\n      );\n    }\n\n    const command = commandResult.getValue();\n    if (!command) {\n      return Result.fail<ExecuteButtonCommandResponse>(\"Command not found\");\n    }\n\n    // Check if command requires input but none provided\n    if (command.requiresInput && !request.inputParameters) {\n      // Return schema for input collection\n      return Result.ok<ExecuteButtonCommandResponse>({\n        success: false,\n        requiresInput: true,\n        inputSchema: {\n          title: command.name,\n          description: command.description,\n          parameters: command.parameters,\n        },\n      });\n    }\n\n    // Validate and prepare execution context\n    const contextResult = command.buildExecutionContext(\n      request.inputParameters || {},\n    );\n\n    if (contextResult.isFailure) {\n      return Result.fail<ExecuteButtonCommandResponse>(\n        `Invalid parameters: ${contextResult.error}`,\n      );\n    }\n\n    const executionContext = contextResult.getValue();\n\n    // Execute the command through the command executor service\n    try {\n      const executionResult = await this.commandExecutor.execute({\n        command: command,\n        context: {\n          ...executionContext,\n          assetId: request.assetId,\n          currentView: request.context?.currentView,\n          currentClass: request.context?.currentClass,\n          selection: request.context?.selection,\n        },\n      });\n\n      if (executionResult.isFailure) {\n        return Result.fail<ExecuteButtonCommandResponse>(\n          `Command execution failed: ${executionResult.error}`,\n        );\n      }\n\n      const result = executionResult.getValue();\n\n      // Record button click event\n      button.click();\n\n      return Result.ok<ExecuteButtonCommandResponse>({\n        success: true,\n        message: `Command '${command.name}' executed successfully`,\n        result: result,\n      });\n    } catch (error) {\n      return Result.fail<ExecuteButtonCommandResponse>(\n        `Unexpected error during command execution: ${error.message}`,\n      );\n    }\n  }\n}\n"],"version":3}