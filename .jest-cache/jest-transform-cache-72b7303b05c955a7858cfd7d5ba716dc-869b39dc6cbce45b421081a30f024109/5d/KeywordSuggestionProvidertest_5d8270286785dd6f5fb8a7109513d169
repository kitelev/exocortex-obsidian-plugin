ab50b9cec8af14daf0bcc9e28a33d410
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const KeywordSuggestionProvider_1 = require("../../../../src/infrastructure/autocomplete/KeywordSuggestionProvider");
const QueryContext_1 = require("../../../../src/domain/autocomplete/QueryContext");
const SPARQLSuggestion_1 = require("../../../../src/domain/autocomplete/SPARQLSuggestion");
describe('KeywordSuggestionProvider', () => {
    let provider;
    beforeEach(() => {
        provider = new KeywordSuggestionProvider_1.KeywordSuggestionProvider();
    });
    describe('getSuggestions()', () => {
        it('should return query type keywords at start of query', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0,
                currentToken: '',
                previousTokens: [],
                queryType: null,
                currentClause: null,
                clauses: []
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
            const keywordTexts = suggestions.map(s => s.getText());
            expect(keywordTexts).toContain('SELECT');
            expect(keywordTexts).toContain('ASK');
            expect(keywordTexts).toContain('CONSTRUCT');
            expect(keywordTexts).toContain('DESCRIBE');
            expect(keywordTexts).toContain('PREFIX');
        });
        it('should filter suggestions by current token', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SEL',
                cursorPosition: 3,
                currentToken: 'SEL',
                previousTokens: [],
                queryType: null,
                currentClause: null,
                clauses: []
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions).toHaveLength(1);
            expect(suggestions[0].getText()).toBe('SELECT');
        });
        it('should return WHERE after SELECT query type', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * ',
                cursorPosition: 9,
                currentToken: '',
                previousTokens: ['SELECT', '*'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null,
                clauses: []
            });
            const suggestions = provider.getSuggestions(context);
            const whereKeyword = suggestions.find(s => s.getText() === 'WHERE');
            expect(whereKeyword).toBeDefined();
            expect(whereKeyword === null || whereKeyword === void 0 ? void 0 : whereKeyword.getContextualScore()).toBeGreaterThan(0.8);
        });
        it('should return clause keywords in WHERE context', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o . ',
                cursorPosition: 28,
                currentToken: '',
                previousTokens: ['SELECT', '*', 'WHERE', '{', '?s', '?p', '?o', '.'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: QueryContext_1.ClauseType.WHERE,
                clauses: []
            });
            const suggestions = provider.getSuggestions(context);
            const keywordTexts = suggestions.map(s => s.getText());
            expect(keywordTexts).toContain('FILTER');
            expect(keywordTexts).toContain('OPTIONAL');
            expect(keywordTexts).toContain('UNION');
            expect(keywordTexts).toContain('BIND');
        });
        it('should return result modifiers after WHERE clause', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o } ',
                cursorPosition: 30,
                currentToken: '',
                previousTokens: ['SELECT', '*', 'WHERE', '{', '?s', '?p', '?o', '}'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null,
                clauses: [{
                        type: QueryContext_1.ClauseType.WHERE,
                        startPosition: 9,
                        endPosition: 28,
                        variables: ['s', 'p', 'o'],
                        content: 'WHERE { ?s ?p ?o }'
                    }]
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
            // Just verify we get suggestions - the specific ones depend on internal logic
        });
        it('should not suggest WHERE when already present', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o } ORDER BY ',
                cursorPosition: 39,
                currentToken: '',
                previousTokens: ['SELECT', '*', 'WHERE', '{', '?s', '?p', '?o', '}', 'ORDER', 'BY'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null,
                clauses: [
                    {
                        type: QueryContext_1.ClauseType.WHERE,
                        startPosition: 9,
                        endPosition: 29,
                        variables: ['s', 'p', 'o'],
                        content: 'WHERE { ?s ?p ?o }'
                    }
                ]
            });
            const suggestions = provider.getSuggestions(context);
            const keywordTexts = suggestions.map(s => s.getText());
            expect(keywordTexts).not.toContain('WHERE');
        });
        it('should suggest DISTINCT after SELECT', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT ',
                cursorPosition: 7,
                currentToken: '',
                previousTokens: ['SELECT'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null,
                clauses: []
            });
            const suggestions = provider.getSuggestions(context);
            const keywordTexts = suggestions.map(s => s.getText());
            // Should include DISTINCT as it's in after_select context
            expect(keywordTexts).toContain('DISTINCT');
        });
        it('should suggest HAVING after GROUP BY', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT ?type (COUNT(?s) as ?count) WHERE { ?s rdf:type ?type } GROUP BY ?type ',
                cursorPosition: 80,
                currentToken: '',
                previousTokens: ['SELECT', '?type', '(COUNT(?s)', 'as', '?count)', 'WHERE', '{', '?s', 'rdf:type', '?type', '}', 'GROUP', 'BY', '?type'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: QueryContext_1.ClauseType.GROUP_BY,
                clauses: []
            });
            const suggestions = provider.getSuggestions(context);
            const havingKeyword = suggestions.find(s => s.getText() === 'HAVING');
            expect(havingKeyword).toBeDefined();
        });
        it('should suggest OFFSET after LIMIT', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o } LIMIT 10 ',
                cursorPosition: 36,
                currentToken: '',
                previousTokens: ['SELECT', '*', 'WHERE', '{', '?s', '?p', '?o', '}', 'LIMIT', '10'],
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null,
                clauses: [
                    {
                        type: QueryContext_1.ClauseType.WHERE,
                        startPosition: 9,
                        endPosition: 25,
                        variables: [],
                        content: 'WHERE { ?s ?p ?o }'
                    },
                    {
                        type: QueryContext_1.ClauseType.LIMIT,
                        startPosition: 26,
                        endPosition: 34,
                        variables: [],
                        content: 'LIMIT 10'
                    }
                ]
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
            // Just verify we get suggestions
        });
    });
    describe('Context Type Detection', () => {
        it('should detect start context for empty query', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            // Should include start keywords like SELECT, PREFIX
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            const prefixKeyword = suggestions.find(s => s.getText() === 'PREFIX');
            expect(selectKeyword).toBeDefined();
            expect(prefixKeyword).toBeDefined();
        });
        it('should detect after_select context', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * ',
                cursorPosition: 9,
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null
            });
            const suggestions = provider.getSuggestions(context);
            const distinctKeyword = suggestions.find(s => s.getText() === 'DISTINCT');
            expect(distinctKeyword).toBeDefined();
        });
        it('should detect in_where context', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ',
                cursorPosition: 17,
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: QueryContext_1.ClauseType.WHERE
            });
            const suggestions = provider.getSuggestions(context);
            const filterKeyword = suggestions.find(s => s.getText() === 'FILTER');
            const optionalKeyword = suggestions.find(s => s.getText() === 'OPTIONAL');
            expect(filterKeyword).toBeDefined();
            expect(optionalKeyword).toBeDefined();
        });
        it('should detect after_where context', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o } ',
                cursorPosition: 30,
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null,
                clauses: [{
                        type: QueryContext_1.ClauseType.WHERE,
                        startPosition: 9,
                        endPosition: 28,
                        variables: [],
                        content: 'WHERE { ?s ?p ?o }'
                    }]
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
        });
    });
    describe('Contextual Scoring', () => {
        it('should give high score to logical next keywords', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * ',
                cursorPosition: 9,
                queryType: QueryContext_1.QueryType.SELECT,
                currentClause: null
            });
            const suggestions = provider.getSuggestions(context);
            const whereKeyword = suggestions.find(s => s.getText() === 'WHERE');
            expect(whereKeyword).toBeDefined();
            expect(whereKeyword === null || whereKeyword === void 0 ? void 0 : whereKeyword.getContextualScore()).toBeGreaterThan(0.8);
        });
        it('should give lower score to less relevant keywords', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o } ',
                cursorPosition: 30,
                queryType: QueryContext_1.QueryType.SELECT
            });
            const suggestions = provider.getSuggestions(context);
            // FILTER should be less relevant after WHERE clause ends
            const filterKeyword = suggestions.find(s => s.getText() === 'FILTER');
            if (filterKeyword) {
                expect(filterKeyword.getContextualScore()).toBeLessThan(0.8);
            }
        });
        it('should boost start keywords at query beginning', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            expect(selectKeyword).toBeDefined();
            expect(selectKeyword === null || selectKeyword === void 0 ? void 0 : selectKeyword.getContextualScore()).toBe(1.0);
        });
    });
    describe('Suggestion Properties', () => {
        it('should create suggestions with correct type', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            suggestions.forEach(suggestion => {
                expect(suggestion.getType()).toBe(SPARQLSuggestion_1.SuggestionType.KEYWORD);
            });
        });
        it('should create suggestions with insertText', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            expect(selectKeyword).toBeDefined();
            expect(selectKeyword === null || selectKeyword === void 0 ? void 0 : selectKeyword.getInsertText()).toBe('SELECT ');
        });
        it('should create suggestions with metadata', () => {
            var _a;
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            expect(selectKeyword).toBeDefined();
            expect(selectKeyword === null || selectKeyword === void 0 ? void 0 : selectKeyword.getMetadata()).toBeDefined();
            expect((_a = selectKeyword === null || selectKeyword === void 0 ? void 0 : selectKeyword.getMetadata()) === null || _a === void 0 ? void 0 : _a.description).toContain('Retrieve');
        });
        it('should create suggestions with examples', () => {
            var _a, _b, _c;
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            expect(selectKeyword).toBeDefined();
            expect((_a = selectKeyword === null || selectKeyword === void 0 ? void 0 : selectKeyword.getMetadata()) === null || _a === void 0 ? void 0 : _a.examples).toBeDefined();
            expect((_c = (_b = selectKeyword === null || selectKeyword === void 0 ? void 0 : selectKeyword.getMetadata()) === null || _b === void 0 ? void 0 : _b.examples) === null || _c === void 0 ? void 0 : _c.length).toBeGreaterThan(0);
        });
        it('should create structured suggestions for complex keywords', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'CONS',
                cursorPosition: 4,
                currentToken: 'CONS'
            });
            const suggestions = provider.getSuggestions(context);
            const constructKeyword = suggestions.find(s => s.getText() === 'CONSTRUCT');
            expect(constructKeyword).toBeDefined();
            expect(constructKeyword === null || constructKeyword === void 0 ? void 0 : constructKeyword.getInsertText()).toContain('CONSTRUCT');
            expect(constructKeyword === null || constructKeyword === void 0 ? void 0 : constructKeyword.getInsertText()).toContain('WHERE');
            expect(constructKeyword === null || constructKeyword === void 0 ? void 0 : constructKeyword.getInsertText()).toContain('{');
        });
    });
    describe('Pattern Recognition', () => {
        it('should recognize common SELECT-WHERE pattern', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * ',
                cursorPosition: 9,
                previousTokens: ['SELECT', '*'],
                queryType: QueryContext_1.QueryType.SELECT
            });
            const suggestions = provider.getSuggestions(context);
            const whereKeyword = suggestions.find(s => s.getText() === 'WHERE');
            expect(whereKeyword).toBeDefined();
            expect(whereKeyword === null || whereKeyword === void 0 ? void 0 : whereKeyword.getContextualScore()).toBeGreaterThan(0.8);
        });
        it('should recognize WHERE-FILTER pattern', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o . ',
                cursorPosition: 28,
                previousTokens: ['SELECT', '*', 'WHERE', '{', '?s', '?p', '?o', '.'],
                currentClause: QueryContext_1.ClauseType.WHERE
            });
            const suggestions = provider.getSuggestions(context);
            const filterKeyword = suggestions.find(s => s.getText() === 'FILTER');
            expect(filterKeyword).toBeDefined();
            expect(filterKeyword === null || filterKeyword === void 0 ? void 0 : filterKeyword.getContextualScore()).toBeGreaterThan(0.7);
        });
        it('should recognize ORDER BY-LIMIT pattern', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ?s ?p ?o } ORDER BY ?s ',
                cursorPosition: 39,
                previousTokens: ['SELECT', '*', 'WHERE', '{', '?s', '?p', '?o', '}', 'ORDER', 'BY', '?s'],
                queryType: QueryContext_1.QueryType.SELECT,
                clauses: [
                    {
                        type: QueryContext_1.ClauseType.WHERE,
                        startPosition: 9,
                        endPosition: 25,
                        variables: [],
                        content: 'WHERE { ?s ?p ?o }'
                    },
                    {
                        type: QueryContext_1.ClauseType.ORDER_BY,
                        startPosition: 26,
                        endPosition: 37,
                        variables: [],
                        content: 'ORDER BY ?s'
                    }
                ]
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
        });
        it('should recognize GROUP BY-HAVING pattern', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'HAV',
                cursorPosition: 3,
                currentToken: 'HAV'
            });
            const suggestions = provider.getSuggestions(context);
            const havingKeyword = suggestions.find(s => s.getText() === 'HAVING');
            expect(havingKeyword).toBeDefined();
        });
    });
    describe('Case Sensitivity', () => {
        it('should handle lowercase input', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'sel',
                cursorPosition: 3,
                currentToken: 'sel'
            });
            const suggestions = provider.getSuggestions(context);
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            expect(selectKeyword).toBeDefined();
        });
        it('should handle mixed case input', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SeLeCt',
                cursorPosition: 6,
                currentToken: 'SeLeCt'
            });
            const suggestions = provider.getSuggestions(context);
            const selectKeyword = suggestions.find(s => s.getText() === 'SELECT');
            expect(selectKeyword).toBeDefined();
        });
        it('should return keywords in standard uppercase', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            suggestions.forEach(suggestion => {
                expect(suggestion.getText()).toMatch(/^[A-Z\s]+$/);
            });
        });
    });
    describe('Edge Cases', () => {
        it('should handle empty current token', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT * WHERE { ',
                cursorPosition: 17,
                currentToken: '',
                currentClause: QueryContext_1.ClauseType.WHERE
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
        });
        it('should handle whitespace-only tokens', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT   ',
                cursorPosition: 9,
                currentToken: '',
                queryType: QueryContext_1.QueryType.SELECT
            });
            const suggestions = provider.getSuggestions(context);
            expect(suggestions.length).toBeGreaterThan(0);
        });
        it('should handle partial matches at word boundaries', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'ORD',
                cursorPosition: 3,
                currentToken: 'ORD'
            });
            const suggestions = provider.getSuggestions(context);
            const orderByKeyword = suggestions.find(s => s.getText().startsWith('ORDER'));
            expect(orderByKeyword).toBeDefined();
        });
        it('should handle unknown query contexts gracefully', () => {
            const context = QueryContext_1.QueryContext.create({
                query: '',
                cursorPosition: 0
            });
            const suggestions = provider.getSuggestions(context);
            // Should provide start-of-query suggestions
            expect(suggestions.length).toBeGreaterThan(0);
        });
    });
    describe('Performance', () => {
        it('should return suggestions quickly for simple contexts', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SELECT',
                cursorPosition: 6,
                currentToken: 'SELECT'
            });
            const startTime = performance.now();
            provider.getSuggestions(context);
            const duration = performance.now() - startTime;
            expect(duration).toBeLessThan(10); // Should be very fast
        });
        it('should handle many repeated calls efficiently', () => {
            const context = QueryContext_1.QueryContext.create({
                query: 'SEL',
                cursorPosition: 3,
                currentToken: 'SEL'
            });
            const startTime = performance.now();
            for (let i = 0; i < 100; i++) {
                provider.getSuggestions(context);
            }
            const duration = performance.now() - startTime;
            expect(duration).toBeLessThan(100); // Should handle repeated calls efficiently
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,