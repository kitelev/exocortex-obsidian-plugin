2057da5349a2c8cf27230c95ae4a0c72
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Result will be mocked through the SPARQLSanitizer mock
// Mock dependencies
jest.mock('../../../../src/application/SPARQLEngine');
jest.mock('../../../../src/domain/semantic/core/Graph');
jest.mock('../../../../src/application/services/ExoFocusService');
jest.mock('../../../../src/application/services/RDFService');
jest.mock('../../../../src/application/services/SPARQLSanitizer');
jest.mock('../../../../src/presentation/modals/ExportRDFModal');
const SPARQLProcessor_1 = require("../../../../src/presentation/processors/SPARQLProcessor");
const Graph_1 = require("../../../../src/domain/semantic/core/Graph");
const SPARQLEngine_1 = require("../../../../src/application/SPARQLEngine");
const ExoFocusService_1 = require("../../../../src/application/services/ExoFocusService");
const RDFService_1 = require("../../../../src/application/services/RDFService");
const SPARQLSanitizer_1 = require("../../../../src/application/services/SPARQLSanitizer");
describe('SPARQLProcessor', () => {
    let processor;
    let mockPlugin;
    let mockGraph;
    let mockEngine;
    let mockFocusService;
    let mockRDFService;
    let mockSanitizer;
    let mockApp;
    let container;
    let context;
    beforeEach(() => {
        // Setup DOM environment
        document.body.innerHTML = '<div id="test-container"></div>';
        container = document.getElementById('test-container');
        // Mock app
        mockApp = {
            workspace: {
                openLinkText: jest.fn()
            }
        };
        // Mock plugin
        mockPlugin = {
            app: mockApp
        };
        // Mock graph
        mockGraph = new Graph_1.Graph();
        // Create default mock responses
        const defaultSelectResult = {
            results: [
                { s: 'subject1', p: 'predicate1', o: 'object1' },
                { s: 'subject2', p: 'predicate2', o: 'object2' }
            ],
            cached: false
        };
        const defaultConstructResult = {
            triples: [],
            cached: false,
            provenance: 'test'
        };
        // Create mock engine instance
        mockEngine = {
            select: jest.fn().mockReturnValue(defaultSelectResult),
            construct: jest.fn().mockReturnValue(defaultConstructResult),
            getCacheStatistics: jest.fn().mockReturnValue({
                hits: 0,
                misses: 0,
                hitRate: 0,
                size: 0,
                maxSize: 100,
                totalQueries: 0,
                evictions: 0
            }),
            invalidateCache: jest.fn(),
            cleanupCache: jest.fn().mockReturnValue(0),
            destroy: jest.fn()
        };
        // Mock the SPARQLEngine constructor to return our mock instance
        SPARQLEngine_1.SPARQLEngine.mockImplementation(() => {
            console.log('SPARQLEngine constructor called, returning mock engine');
            return mockEngine;
        });
        // Mock services
        mockFocusService = new ExoFocusService_1.ExoFocusService(mockApp, mockGraph);
        mockRDFService = new RDFService_1.RDFService(mockApp);
        mockSanitizer = new SPARQLSanitizer_1.SPARQLSanitizer();
        // Setup service mocks
        RDFService_1.RDFService.mockImplementation(() => mockRDFService);
        SPARQLSanitizer_1.SPARQLSanitizer.mockImplementation(() => mockSanitizer);
        mockRDFService.getNamespaceManager = jest.fn().mockReturnValue({
            getPrefix: jest.fn().mockReturnValue('exo'),
            expand: jest.fn().mockReturnValue('http://example.org/exo#')
        });
        // Mock sanitizer - should return the input query as sanitized
        mockSanitizer.sanitize = jest.fn().mockImplementation((input) => ({
            isSuccess: true,
            isFailure: false,
            getValue: () => ({
                query: input,
                warnings: []
            }),
            errorValue: () => null
        }));
        // Create processor
        processor = new SPARQLProcessor_1.SPARQLProcessor(mockPlugin, mockGraph, mockFocusService);
        // Mock context
        context = {
            sourcePath: 'test.md',
            frontmatter: {},
            addChild: jest.fn(),
            getSectionInfo: jest.fn()
        };
        // Mock Notice
        jest.spyOn(require('obsidian'), 'Notice').mockImplementation(() => ({}));
    });
    afterEach(() => {
        jest.clearAllMocks();
        document.body.innerHTML = '';
    });
    describe('Initialization', () => {
        test('should initialize with all required dependencies', () => {
            expect(processor).toBeDefined();
            expect(processor['plugin']).toBe(mockPlugin);
            expect(processor['graph']).toBe(mockGraph);
            expect(processor['engine']).toBe(mockEngine);
            expect(processor['focusService']).toBe(mockFocusService);
        });
        test('should initialize without focus service', () => {
            const processorNoFocus = new SPARQLProcessor_1.SPARQLProcessor(mockPlugin, mockGraph);
            expect(processorNoFocus).toBeDefined();
            expect(processorNoFocus['focusService']).toBeUndefined();
        });
        test('should initialize with cache configuration', () => {
            const cacheConfig = {
                maxSize: 100,
                defaultTTL: 60000,
                enabled: true
            };
            const processorWithCache = new SPARQLProcessor_1.SPARQLProcessor(mockPlugin, mockGraph, mockFocusService, cacheConfig);
            expect(processorWithCache).toBeDefined();
            expect(SPARQLEngine_1.SPARQLEngine).toHaveBeenCalledWith(mockGraph, cacheConfig);
        });
    });
    describe('processCodeBlock', () => {
        test('should process simple SELECT query successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const selectResults = [
                { s: 'subject1', p: 'predicate1', o: 'object1' },
                { s: 'subject2', p: 'predicate2', o: 'object2' }
            ];
            // Set up the mock engine for this specific test
            mockEngine.select.mockReturnValue({
                results: selectResults,
                cached: false
            });
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10';
            // Debug: Test the mock directly before processing
            console.log('Testing mock engine directly:');
            console.log('mockEngine.select call result:', mockEngine.select(source));
            yield processor.processCodeBlock(source, container, context);
            // Debug: Log the HTML content to understand the structure
            console.log('HTML content after processing:', container.innerHTML);
            console.log('Mock call history:', mockEngine.select.mock.calls);
            expect(mockSanitizer.sanitize).toHaveBeenCalledWith(source);
            expect(mockEngine.select).toHaveBeenCalledWith(source);
            // Check DOM structure
            const sparqlContainer = container.querySelector('.exocortex-sparql-container');
            expect(sparqlContainer).toBeTruthy();
            expect((_a = sparqlContainer === null || sparqlContainer === void 0 ? void 0 : sparqlContainer.querySelector('h3')) === null || _a === void 0 ? void 0 : _a.textContent).toBe('SPARQL Query Results');
            expect((_b = sparqlContainer === null || sparqlContainer === void 0 ? void 0 : sparqlContainer.querySelector('pre')) === null || _b === void 0 ? void 0 : _b.textContent).toBe(source);
            expect(sparqlContainer === null || sparqlContainer === void 0 ? void 0 : sparqlContainer.querySelector('table')).toBeTruthy();
        }));
        test('should process CONSTRUCT query successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _c;
            const mockTriples = [
                {
                    getSubject: () => ({ toString: () => 'http://example.org/s1' }),
                    getPredicate: () => ({ toString: () => 'http://example.org/p1' }),
                    getObject: () => ({ toString: () => 'http://example.org/o1' })
                },
                {
                    getSubject: () => ({ toString: () => 'http://example.org/s2' }),
                    getPredicate: () => ({ toString: () => 'http://example.org/p2' }),
                    getObject: () => ({ toString: () => 'http://example.org/o2' })
                }
            ];
            mockEngine.construct = jest.fn().mockReturnValue({
                triples: mockTriples,
                cached: false,
                provenance: 'test-query'
            });
            mockGraph.add = jest.fn();
            const source = 'CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(mockSanitizer.sanitize).toHaveBeenCalledWith(source);
            expect(mockEngine.construct).toHaveBeenCalledWith(source);
            expect(mockGraph.add).toHaveBeenCalledTimes(2);
            // Check results formatting
            expect(container.querySelector('table')).toBeTruthy();
            expect((_c = container.querySelector('td')) === null || _c === void 0 ? void 0 : _c.textContent).toContain('http://example.org/');
        }));
        test('should handle empty results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _d;
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(container.querySelector('.sparql-empty-result')).toBeTruthy();
            expect((_d = container.querySelector('.sparql-empty-result')) === null || _d === void 0 ? void 0 : _d.textContent).toBe('No results found');
        }));
        test('should handle cached results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _e;
            const selectResults = [
                { s: 'cached1', p: 'cached2', o: 'cached3' }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: selectResults,
                cached: true
            });
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(container.querySelector('.sparql-cache-indicator')).toBeTruthy();
            expect((_e = container.querySelector('.sparql-cache-indicator')) === null || _e === void 0 ? void 0 : _e.textContent).toContain('Cached Result');
        }));
        test('should display loading indicator', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _f;
            let resolvePromise;
            const slowPromise = new Promise(resolve => {
                resolvePromise = resolve;
            });
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            // Mock processCodeBlock to be slow
            const originalExecuteQuery = processor.executeQuery;
            processor.executeQuery = jest.fn().mockImplementation(() => slowPromise);
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const processPromise = processor.processCodeBlock(source, container, context);
            // Check loading indicator appears
            yield new Promise(resolve => setTimeout(resolve, 10));
            expect(container.querySelector('.sparql-loading')).toBeTruthy();
            expect((_f = container.querySelector('.sparql-loading')) === null || _f === void 0 ? void 0 : _f.textContent).toBe('Executing query...');
            // Complete the promise
            resolvePromise({ results: [], cached: false });
            yield processPromise;
            // Loading indicator should be removed
            expect(container.querySelector('.sparql-loading')).toBeFalsy();
            processor.executeQuery = originalExecuteQuery;
        }));
        test('should handle query execution errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _g;
            const source = 'INVALID SPARQL QUERY';
            // Mock sanitizer to return error
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: false,
                isFailure: true,
                getValue: () => null,
                errorValue: () => 'Invalid SPARQL syntax'
            });
            yield processor.processCodeBlock(source, container, context);
            expect(container.querySelector('.sparql-error')).toBeTruthy();
            expect((_g = container.querySelector('.sparql-error')) === null || _g === void 0 ? void 0 : _g.textContent).toContain('Query validation failed');
        }));
        test('should apply ExoFocus filtering when available', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const originalResults = [
                { s: 'subject1', p: 'predicate1', o: 'object1' },
                { s: 'subject2', p: 'predicate2', o: 'object2' },
                { s: 'subject3', p: 'predicate3', o: 'object3' }
            ];
            const filteredResults = [
                { s: 'subject1', p: 'predicate1', o: 'object1' }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: originalResults,
                cached: false
            });
            mockFocusService.filterSPARQLResults = jest.fn().mockReturnValue(filteredResults);
            const source = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            yield processor.processCodeBlock(source, container, context);
            expect(mockFocusService.filterSPARQLResults).toHaveBeenCalledWith(originalResults);
            // Check that filtered results are displayed
            const rows = container.querySelectorAll('tbody tr');
            expect(rows).toHaveLength(1);
        }));
    });
    describe('executeQuery', () => {
        test('should reject empty queries', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield expect(processor.executeQuery('')).rejects.toThrow('Empty query');
            yield expect(processor.executeQuery('   ')).rejects.toThrow('Empty query');
        }));
        test('should handle query sanitization failures', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: false,
                isFailure: true,
                getValue: () => null,
                errorValue: () => 'Malicious query detected'
            });
            yield expect(processor.executeQuery('DROP TABLE users;')).rejects.toThrow('Query validation failed');
        }));
        test('should show warnings from sanitizer', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockNotice = jest.spyOn(require('obsidian'), 'Notice');
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: true,
                isFailure: false,
                getValue: () => ({
                    query: 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }',
                    warnings: ['Query contains deprecated syntax']
                }),
                errorValue: () => null
            });
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            yield processor.executeQuery('SELECT ?s ?p ?o WHERE { ?s ?p ?o }');
            expect(mockNotice).toHaveBeenCalledWith('Query executed with warnings: Query contains deprecated syntax');
        }));
        test('should reject unsupported query types', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockSanitizer.sanitize = jest.fn().mockReturnValue({
                isSuccess: true,
                isFailure: false,
                getValue: () => ({
                    query: 'DELETE WHERE { ?s ?p ?o }',
                    warnings: []
                }),
                errorValue: () => null
            });
            yield expect(processor.executeQuery('DELETE WHERE { ?s ?p ?o }')).rejects.toThrow('Only SELECT and CONSTRUCT queries are currently supported');
        }));
        test('should handle CONSTRUCT query with duplicate prevention', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTriples = [
                {
                    getSubject: () => ({ toString: () => 'http://example.org/s1' }),
                    getPredicate: () => ({ toString: () => 'http://example.org/p1' }),
                    getObject: () => ({ toString: () => 'http://example.org/o1' })
                }
            ];
            // Test cached result - should not add to graph
            mockEngine.construct = jest.fn().mockReturnValue({
                triples: mockTriples,
                cached: true,
                provenance: 'test-query'
            });
            const result = yield processor.executeQuery('CONSTRUCT { ?s ?p ?o } WHERE { ?s ?p ?o }');
            expect(mockGraph.add).not.toHaveBeenCalled();
            expect(result.cached).toBe(true);
            expect(result.results).toHaveLength(1);
        }));
    });
    describe('Table Creation', () => {
        test('should create table with headers', () => {
            const results = [
                { name: 'John', age: '25', city: 'New York' },
                { name: 'Jane', age: '30', city: 'Boston' }
            ];
            const table = processor['createResultTable'](results);
            expect(table.tagName).toBe('TABLE');
            expect(table.className).toBe('sparql-results-table');
            // Check headers
            const headers = table.querySelectorAll('th');
            expect(headers).toHaveLength(3);
            expect(headers[0].textContent).toBe('name');
            expect(headers[1].textContent).toBe('age');
            expect(headers[2].textContent).toBe('city');
            // Check data rows
            const dataRows = table.querySelectorAll('tbody tr');
            expect(dataRows).toHaveLength(2);
            expect(dataRows[0].cells[0].textContent).toBe('John');
            expect(dataRows[1].cells[0].textContent).toBe('Jane');
        });
        test('should create empty table for no results', () => {
            const table = processor['createResultTable']([]);
            expect(table.tagName).toBe('TABLE');
            expect(table.querySelectorAll('tr')).toHaveLength(0);
        });
        test('should handle file links in results', () => {
            const results = [
                { file: 'file://test-note.md', content: 'some content' },
                { file: '/path/to/note.md', content: 'more content' }
            ];
            const table = processor['createResultTable'](results);
            const links = table.querySelectorAll('a.internal-link');
            expect(links).toHaveLength(2);
            expect(links[0].textContent).toBe('test-note.md');
            expect(links[1].textContent).toBe('note.md');
        });
        test('should handle click events on note links', () => {
            const results = [{ file: 'file://test-note.md' }];
            const table = processor['createResultTable'](results);
            const link = table.querySelector('a.internal-link');
            expect(link).toBeTruthy();
            // Mock click event
            const clickEvent = new Event('click');
            jest.spyOn(clickEvent, 'preventDefault');
            link.dispatchEvent(clickEvent);
            expect(clickEvent.preventDefault).toHaveBeenCalled();
            expect(mockApp.workspace.openLinkText).toHaveBeenCalledWith('test-note.md', '');
        });
    });
    describe('Cache Management', () => {
        test('should return cache statistics', () => {
            const mockStats = {
                hits: 15,
                misses: 8,
                hitRate: 65.2,
                size: 12,
                maxSize: 100,
                totalQueries: 23,
                evictions: 2
            };
            mockEngine.getCacheStatistics = jest.fn().mockReturnValue(mockStats);
            const stats = processor.getCacheStatistics();
            expect(stats).toEqual(mockStats);
            expect(mockEngine.getCacheStatistics).toHaveBeenCalled();
        });
        test('should invalidate cache', () => {
            mockEngine.invalidateCache = jest.fn();
            processor.invalidateCache();
            expect(mockEngine.invalidateCache).toHaveBeenCalled();
        });
        test('should cleanup cache', () => {
            mockEngine.cleanupCache = jest.fn().mockReturnValue(5);
            const result = processor.cleanupCache();
            expect(result).toBe(5);
            expect(mockEngine.cleanupCache).toHaveBeenCalled();
        });
        test('should destroy resources', () => {
            mockEngine.destroy = jest.fn();
            processor.destroy();
            expect(mockEngine.destroy).toHaveBeenCalled();
        });
    });
    describe('UI Elements', () => {
        test('should create loading indicator', () => {
            const loading = processor['createLoadingIndicator']();
            expect(loading.className).toBe('sparql-loading');
            expect(loading.textContent).toBe('Executing query...');
        });
        test('should create error message', () => {
            const error = new Error('Test error message');
            const errorEl = processor['createErrorMessage'](error);
            expect(errorEl.className).toBe('sparql-error');
            expect(errorEl.textContent).toContain('Query Error:');
            expect(errorEl.textContent).toContain('Test error message');
        });
        test('should create stats element without cache info', () => {
            const stats = processor['createStatsElement'](5, 150);
            expect(stats.className).toBe('sparql-stats');
            expect(stats.textContent).toBe('Executed in 150ms - 5 results');
        });
        test('should create stats element with cache info', () => {
            const stats = processor['createStatsElement'](5, 150, true);
            expect(stats.textContent).toBe('Executed in 150ms - 5 results (cached result)');
        });
        test('should create cache indicator for cached results', () => {
            const indicator = processor['createCacheIndicator'](true);
            expect(indicator.className).toBe('sparql-cache-indicator');
            expect(indicator.textContent).toBe('📋 Cached Result');
            expect(indicator.style.background).toContain('rgb(232, 245, 232)');
        });
        test('should create cache indicator for fresh results', () => {
            const indicator = processor['createCacheIndicator'](false);
            expect(indicator.textContent).toBe('🔄 Fresh Result');
            expect(indicator.style.background).toContain('rgb(227, 242, 253)');
        });
    });
    describe('Export Controls', () => {
        test('should create export controls with format buttons', () => {
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            expect(controls.className).toBe('sparql-export-controls');
            expect(controls.textContent).toContain('Export results:');
            // Check format buttons
            const buttons = controls.querySelectorAll('.sparql-export-button');
            expect(buttons).toHaveLength(4); // Turtle, JSON-LD, N-Triples, RDF/XML
            expect(buttons[0].textContent).toBe('Turtle');
            expect(buttons[1].textContent).toBe('JSON-LD');
            expect(buttons[2].textContent).toBe('N-Triples');
            expect(buttons[3].textContent).toBe('RDF/XML');
        });
        test('should create advanced export button', () => {
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            const advancedButton = controls.querySelector('.sparql-export-advanced');
            expect(advancedButton).toBeTruthy();
            expect(advancedButton.textContent).toBe('Advanced...');
        });
        test('should handle export button clicks', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRDFService.exportQueryResults = jest.fn().mockResolvedValue({
                isSuccess: true,
                isFailure: false,
                getValue: () => ({
                    tripleCount: 10,
                    fileName: 'test-export.ttl',
                    content: 'mock turtle content'
                }),
                errorValue: () => null
            });
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            const turtleButton = controls.querySelector('.sparql-export-button');
            // Simulate click
            turtleButton.click();
            // Wait for async operation
            yield new Promise(resolve => setTimeout(resolve, 10));
            expect(mockRDFService.exportQueryResults).toHaveBeenCalledWith(results, 'turtle', expect.any(String));
        }));
        test('should handle export errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockRDFService.exportQueryResults = jest.fn().mockResolvedValue({
                isSuccess: false,
                isFailure: true,
                getValue: () => null,
                errorValue: () => 'Export failed'
            });
            const mockNotice = jest.spyOn(require('obsidian'), 'Notice');
            const results = [{ s: 'test', p: 'test', o: 'test' }];
            const query = 'SELECT ?s ?p ?o WHERE { ?s ?p ?o }';
            const controls = processor['createExportControls'](results, query);
            const turtleButton = controls.querySelector('.sparql-export-button');
            // Simulate click
            turtleButton.click();
            // Wait for async operation
            yield new Promise(resolve => setTimeout(resolve, 10));
            expect(mockNotice).toHaveBeenCalledWith('Export failed: Export failed');
        }));
    });
    describe('Performance Tests', () => {
        test('should handle large result sets efficiently', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const largeResults = Array.from({ length: 1000 }, (_, i) => ({
                id: `item-${i}`,
                name: `Name ${i}`,
                value: `Value ${i}`
            }));
            mockEngine.select = jest.fn().mockReturnValue({
                results: largeResults,
                cached: false
            });
            const source = 'SELECT ?id ?name ?value WHERE { ?id ?name ?value }';
            const startTime = Date.now();
            yield processor.processCodeBlock(source, container, context);
            const endTime = Date.now();
            expect(endTime - startTime).toBeLessThan(1000); // Should complete within 1 second
            // Verify table was created
            const table = container.querySelector('table');
            expect(table).toBeTruthy();
            const rows = table.querySelectorAll('tbody tr');
            expect(rows).toHaveLength(1000);
        }));
        test('should handle complex queries with multiple variables', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const complexResults = [
                {
                    subject: 'http://example.org/person1',
                    name: 'John Doe',
                    age: '30',
                    email: 'john@example.org',
                    department: 'Engineering',
                    manager: 'http://example.org/person2',
                    projects: 'Project A, Project B',
                    skills: 'JavaScript, TypeScript, React'
                }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: complexResults,
                cached: false
            });
            const source = `
        SELECT ?subject ?name ?age ?email ?department ?manager ?projects ?skills
        WHERE {
          ?subject foaf:name ?name ;
                   foaf:age ?age ;
                   foaf:mbox ?email ;
                   org:department ?department ;
                   org:manager ?manager ;
                   proj:projects ?projects ;
                   skill:has ?skills .
        }
      `;
            yield processor.processCodeBlock(source, container, context);
            const table = container.querySelector('table');
            expect(table).toBeTruthy();
            const headers = table.querySelectorAll('th');
            expect(headers).toHaveLength(8);
            const dataRow = table.querySelector('tbody tr');
            expect(dataRow).toBeTruthy();
            expect(dataRow.cells).toHaveLength(8);
        }));
    });
    describe('Edge Cases', () => {
        test('should handle null and undefined values in results', () => {
            const results = [
                { name: 'John', age: null, city: undefined },
                { name: null, age: '25', city: '' },
                { name: undefined, age: undefined, city: 'Boston' }
            ];
            const table = processor['createResultTable'](results);
            const cells = table.querySelectorAll('td');
            // Should display empty string for null/undefined
            expect(cells[1].textContent).toBe(''); // null age
            expect(cells[2].textContent).toBe(''); // undefined city
            expect(cells[3].textContent).toBe(''); // null name
            expect(cells[5].textContent).toBe(''); // empty city
        });
        test('should handle results with inconsistent column structure', () => {
            const results = [
                { name: 'John', age: '30' },
                { name: 'Jane', city: 'Boston' },
                { age: '25', city: 'New York', country: 'USA' }
            ];
            // Should use columns from first result
            const table = processor['createResultTable'](results);
            const headers = table.querySelectorAll('th');
            expect(headers).toHaveLength(2);
            expect(headers[0].textContent).toBe('name');
            expect(headers[1].textContent).toBe('age');
        });
        test('should handle very long query strings', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const longQuery = `
        SELECT ?s ?p ?o WHERE {
          ?s ?p ?o .
          ${Array.from({ length: 100 }, (_, i) => `OPTIONAL { ?s ex:prop${i} ?val${i} }`).join(' ')}
        }
      `.trim();
            mockEngine.select = jest.fn().mockReturnValue({
                results: [],
                cached: false
            });
            yield processor.processCodeBlock(longQuery, container, context);
            expect((_a = container.querySelector('pre')) === null || _a === void 0 ? void 0 : _a.textContent).toBe(longQuery);
            expect(mockEngine.select).toHaveBeenCalledWith(longQuery);
        }));
        test('should handle special characters in query and results', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const results = [
                { name: 'Jöhn Döe', description: 'Special chars: àáâãäå' },
                { name: 'Смит', description: 'Cyrillic: русский текст' },
                { name: '田中太郎', description: 'Japanese: こんにちは' }
            ];
            mockEngine.select = jest.fn().mockReturnValue({
                results: results,
                cached: false
            });
            const query = 'SELECT ?name ?description WHERE { ?person rdfs:label ?name ; dc:description ?description }';
            yield processor.processCodeBlock(query, container, context);
            const table = container.querySelector('table');
            const cells = table.querySelectorAll('td');
            expect(cells[0].textContent).toBe('Jöhn Döe');
            expect(cells[1].textContent).toBe('Special chars: àáâãäå');
            expect(cells[2].textContent).toBe('Смит');
            expect(cells[4].textContent).toBe('田中太郎');
        }));
    });
});
// Test utilities
function createMockTriple(s, p, o) {
    return {
        getSubject: () => ({ toString: () => s }),
        getPredicate: () => ({ toString: () => p }),
        getObject: () => ({ toString: () => o })
    };
}
function createMockContext(sourcePath = 'test.md') {
    return {
        sourcePath,
        frontmatter: {},
        addChild: jest.fn(),
        getSectionInfo: jest.fn()
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,