{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/integration/LayoutRendererIntegration.test.ts","mappings":";;;AACA,kEAA6C;AAE7C,QAAQ,CAAC,IAAI,CAAC,yCAAyC,EAAE,GAAG,EAAE;IAC5D,IAAI,MAAuB,CAAC;IAC5B,IAAI,OAAY,CAAC;IAEjB,UAAU,CAAC,GAAG,EAAE;QACd,kBAAkB;QAClB,OAAO,GAAG;YACR,KAAK,EAAE;gBACL,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC;gBAC/C,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE;gBACf,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;gBACjB,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE;gBACjB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;gBACpD,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;aACjC;YACD,SAAS,EAAE;gBACT,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE;gBACxB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;aACrD;YACD,aAAa,EAAE;gBACb,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;gBACvB,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;aACrD;SACF,CAAC;QAEF,MAAM,GAAG,IAAI,cAAe,CAAC,OAAO,EAAE,EAAS,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YACjE,MAAM,WAAW,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;YAC9B,MAAM,CAAC,kCAAkC,GAAG,WAAW,CAAC;YAExD,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YAEtB,iDAAiD;YACjD,MAAM,KAAK,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC;YACrC,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,YAAY,CAAC,CAAC;YAElE,MAAM,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,CAAC;YACjC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACzC,MAAM,CAAC,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yDAAyD,EAAE,KAAK,IAAI,EAAE;YACzE,IAAI,eAAoB,CAAC;YACzB,MAAM,CAAC,kCAAkC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;gBACtE,IAAI,IAAI,KAAK,YAAY,EAAE;oBACzB,eAAe,GAAG,SAAS,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YAEtB,oCAAoC;YACpC,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,MAAM;gBAChB,IAAI,EAAE,SAAS;aACP,CAAC;YAEX,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC;gBACjD,WAAW,EAAE;oBACX,mBAAmB,EAAE,eAAe;oBACpC,KAAK,EAAE,WAAW;oBAClB,MAAM,EAAE,QAAQ;iBACjB;aACF,CAAC,CAAC;YAEH,sBAAsB;YACtB,MAAM,MAAM,GAAG;gBACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;gBAChB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC;oBACnC,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;oBACnB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;oBACpB,KAAK,EAAE,EAAE;oBACT,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;oBACvB,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;iBACpB,CAAC;gBACF,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE;aACpB,CAAC;YAEF,oBAAoB;YACpB,MAAM,eAAe,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;YAEtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,CAAC;YACxC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,IAAI,eAAoB,CAAC;YACzB,MAAM,CAAC,kCAAkC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;gBACtE,IAAI,IAAI,KAAK,YAAY,EAAE;oBACzB,eAAe,GAAG,SAAS,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YAEtB,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAEtD,MAAM,MAAM,GAAG;gBACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;aACjB,CAAC;YAEF,MAAM,eAAe,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;YAEtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;YACrD,IAAI,eAAoB,CAAC;YACzB,MAAM,CAAC,kCAAkC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,EAAE;gBACtE,IAAI,IAAI,KAAK,YAAY,EAAE;oBACzB,eAAe,GAAG,SAAS,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YAEtB,MAAM,QAAQ,GAAG;gBACf,IAAI,EAAE,SAAS;aACP,CAAC;YAEX,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAEzD,MAAM,MAAM,GAAG;gBACb,KAAK,EAAE,IAAI,CAAC,EAAE,EAAE;aACjB,CAAC;YAEF,MAAM,eAAe,CAAC,EAAE,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;YAEtC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YACtB,MAAM,cAAc,GAAI,MAAc,CAAC,cAAc,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YAErC,0CAA0C;YAC1C,MAAM,CAAE,cAAsB,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YACtB,MAAM,cAAc,GAAI,MAAc,CAAC,cAAc,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YAErC,+CAA+C;YAC/C,MAAM,CAAE,cAAsB,CAAC,kBAAkB,CAAC,CAAC,WAAW,EAAE,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC5D,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YACtB,MAAM,cAAc,GAAI,MAAc,CAAC,cAAc,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YAErC,8CAA8C;YAC9C,MAAM,CAAE,cAAsB,CAAC,iBAAiB,CAAC,CAAC,WAAW,EAAE,CAAC;QAClE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,MAAM,CAAC,MAAM,EAAE,CAAC;YACtB,MAAM,cAAc,GAAI,MAAc,CAAC,cAAc,CAAC;YACtD,MAAM,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YAErC,2CAA2C;YAC3C,MAAM,CAAE,cAAsB,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QAC/D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/integration/LayoutRendererIntegration.test.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport ExocortexPlugin from \"../../src/main\";\n\ndescribe.skip(\"LayoutRenderer Integration (deprecated)\", () => {\n  let plugin: ExocortexPlugin;\n  let mockApp: any;\n\n  beforeEach(() => {\n    // Create mock app\n    mockApp = {\n      vault: {\n        getMarkdownFiles: jest.fn().mockReturnValue([]),\n        read: jest.fn(),\n        create: jest.fn(),\n        modify: jest.fn(),\n        on: jest.fn().mockReturnValue({ unload: jest.fn() }),\n        getAbstractFileByPath: jest.fn(),\n      },\n      workspace: {\n        getActiveFile: jest.fn(),\n        on: jest.fn().mockReturnValue({ unload: jest.fn() }),\n      },\n      metadataCache: {\n        getFileCache: jest.fn(),\n        on: jest.fn().mockReturnValue({ unload: jest.fn() }),\n      },\n    };\n\n    plugin = new ExocortexPlugin(mockApp, {} as any);\n  });\n\n  describe(\"Layout Renderer Registration\", () => {\n    test(\"should register exo-layout code block processor\", async () => {\n      const registerSpy = jest.fn();\n      plugin.registerMarkdownCodeBlockProcessor = registerSpy;\n\n      await plugin.onload();\n\n      // Check that exo-layout processor was registered\n      const calls = registerSpy.mock.calls;\n      const layoutCall = calls.find((call) => call[0] === \"exo-layout\");\n\n      expect(layoutCall).toBeDefined();\n      expect(layoutCall[0]).toBe(\"exo-layout\");\n      expect(typeof layoutCall[1]).toBe(\"function\");\n    });\n\n    test(\"should render layout when exo-layout block is processed\", async () => {\n      let layoutProcessor: any;\n      plugin.registerMarkdownCodeBlockProcessor = jest.fn((type, processor) => {\n        if (type === \"exo-layout\") {\n          layoutProcessor = processor;\n        }\n      });\n\n      await plugin.onload();\n\n      // Mock active file with frontmatter\n      const mockFile = {\n        path: \"test.md\",\n        basename: \"test\",\n        name: \"test.md\",\n      } as TFile;\n\n      mockApp.workspace.getActiveFile.mockReturnValue(mockFile);\n      mockApp.metadataCache.getFileCache.mockReturnValue({\n        frontmatter: {\n          exo__Instance_class: \"[[ems__Task]]\",\n          title: \"Test Task\",\n          status: \"active\",\n        },\n      });\n\n      // Create mock element\n      const mockEl = {\n        empty: jest.fn(),\n        createDiv: jest.fn().mockReturnValue({\n          createEl: jest.fn(),\n          createDiv: jest.fn(),\n          style: {},\n          setAttribute: jest.fn(),\n          addClass: jest.fn(),\n        }),\n        createEl: jest.fn(),\n      };\n\n      // Process the block\n      await layoutProcessor(\"\", mockEl, {});\n\n      expect(mockEl.empty).toHaveBeenCalled();\n      expect(mockApp.workspace.getActiveFile).toHaveBeenCalled();\n      expect(mockApp.metadataCache.getFileCache).toHaveBeenCalledWith(mockFile);\n    });\n\n    test(\"should not render if no active file\", async () => {\n      let layoutProcessor: any;\n      plugin.registerMarkdownCodeBlockProcessor = jest.fn((type, processor) => {\n        if (type === \"exo-layout\") {\n          layoutProcessor = processor;\n        }\n      });\n\n      await plugin.onload();\n\n      mockApp.workspace.getActiveFile.mockReturnValue(null);\n\n      const mockEl = {\n        empty: jest.fn(),\n      };\n\n      await layoutProcessor(\"\", mockEl, {});\n\n      expect(mockEl.empty).not.toHaveBeenCalled();\n    });\n\n    test(\"should not render if no frontmatter\", async () => {\n      let layoutProcessor: any;\n      plugin.registerMarkdownCodeBlockProcessor = jest.fn((type, processor) => {\n        if (type === \"exo-layout\") {\n          layoutProcessor = processor;\n        }\n      });\n\n      await plugin.onload();\n\n      const mockFile = {\n        path: \"test.md\",\n      } as TFile;\n\n      mockApp.workspace.getActiveFile.mockReturnValue(mockFile);\n      mockApp.metadataCache.getFileCache.mockReturnValue(null);\n\n      const mockEl = {\n        empty: jest.fn(),\n      };\n\n      await layoutProcessor(\"\", mockEl, {});\n\n      expect(mockEl.empty).not.toHaveBeenCalled();\n    });\n  });\n\n  describe(\"Layout Rendering Types\", () => {\n    test(\"should support query blocks in layouts\", async () => {\n      await plugin.onload();\n      const layoutRenderer = (plugin as any).layoutRenderer;\n      expect(layoutRenderer).toBeDefined();\n\n      // Verify renderer has query block support\n      expect((layoutRenderer as any).queryRenderer).toBeDefined();\n    });\n\n    test(\"should support properties blocks in layouts\", async () => {\n      await plugin.onload();\n      const layoutRenderer = (plugin as any).layoutRenderer;\n      expect(layoutRenderer).toBeDefined();\n\n      // Verify renderer has properties block support\n      expect((layoutRenderer as any).propertiesRenderer).toBeDefined();\n    });\n\n    test(\"should support backlinks blocks in layouts\", async () => {\n      await plugin.onload();\n      const layoutRenderer = (plugin as any).layoutRenderer;\n      expect(layoutRenderer).toBeDefined();\n\n      // Verify renderer has backlinks block support\n      expect((layoutRenderer as any).backlinksRenderer).toBeDefined();\n    });\n\n    test(\"should support custom blocks in layouts\", async () => {\n      await plugin.onload();\n      const layoutRenderer = (plugin as any).layoutRenderer;\n      expect(layoutRenderer).toBeDefined();\n\n      // Verify renderer has custom block support\n      expect((layoutRenderer as any).customRenderer).toBeDefined();\n    });\n  });\n});\n"],"version":3}