{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/errors/ExocortexError.ts","mappings":";;;AAAA,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,sCAAqB,CAAA;IACrB,gCAAe,CAAA;IACf,oCAAmB,CAAA;IACnB,8BAAa,CAAA;AACf,CAAC,EALW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAKxB;AAED,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,kCAAiB,CAAA;IACjB,sCAAqB,CAAA;IACrB,0CAAyB,CAAA;IACzB,kCAAiB,CAAA;IACjB,oCAAmB,CAAA;IACnB,0CAAyB,CAAA;AAC3B,CAAC,EAPW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAOxB;AA8CD,MAAa,YAAY;IAAzB;QACU,UAAK,GAA4B,EAAE,CAAC;IAiG9C,CAAC;IA/FC,MAAM,CAAC,MAAM;QACX,OAAO,IAAI,YAAY,EAAE,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,YAAY,CAAC,QAAuB;QAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,YAAY,CAAC,QAAuB;QAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,KAAa;QACrB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,WAAW,CAAC,OAAe;QACzB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,WAAW,CAAC,OAAqB;QAC/B,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,YAAY,CAAC,QAAuB;QAClC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG;gBACnB,SAAS,EAAE,SAAS;gBACpB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;SACH;QACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACvC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oBAAoB,CAAC,OAAe;QAClC,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,OAAO,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,eAAe,CAAC,WAA4B;QAC1C,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,eAAe,CAAC,WAAoB;QAClC,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,UAAkB;QAC/B,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,UAA0B;QACvC,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;YAClB,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,SAAS,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;SAClF;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC;SAC3C;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,aAAa,CAAC,MAAM,CAAC;SAC5C;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;SAC5B;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,mBAAmB,CAAC;SAC1C;QACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG;gBACnB,SAAS,EAAE,SAAS;gBACpB,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;SACH;QAED,OAAO,IAAI,CAAC,KAAuB,CAAC;IACtC,CAAC;CACF;AAlGD,oCAkGC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/errors/ExocortexError.ts"],"sourcesContent":["export enum ErrorSeverity {\n  CRITICAL = \"critical\",\n  ERROR = \"error\",\n  WARNING = \"warning\",\n  INFO = \"info\",\n}\n\nexport enum ErrorCategory {\n  SYNTAX = \"syntax\",\n  SEMANTIC = \"semantic\",\n  VALIDATION = \"validation\",\n  SYSTEM = \"system\",\n  NETWORK = \"network\",\n  PERMISSION = \"permission\",\n}\n\nexport interface ErrorLocation {\n  line?: number;\n  column?: number;\n  file?: string;\n  context?: string;\n}\n\nexport interface ErrorContext {\n  operation: string;\n  timestamp: Date;\n  location?: ErrorLocation | string;\n  userId?: string;\n  sessionId?: string;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface FixSuggestion {\n  title: string;\n  description: string;\n  confidence?: number;\n  action?: {\n    label: string;\n    handler: () => void | Promise<void>;\n  };\n  learnMore?: {\n    url: string;\n    title: string;\n  };\n}\n\nexport interface ExocortexError {\n  id: string;\n  severity: ErrorSeverity;\n  category: ErrorCategory;\n  title: string;\n  message: string;\n  context: ErrorContext;\n  technicalDetails?: string;\n  suggestions?: FixSuggestion[];\n  recoverable?: boolean;\n  stackTrace?: string;\n  innerError?: ExocortexError;\n}\n\nexport class ErrorBuilder {\n  private error: Partial<ExocortexError> = {};\n\n  static create(): ErrorBuilder {\n    return new ErrorBuilder();\n  }\n\n  withId(id: string): ErrorBuilder {\n    this.error.id = id;\n    return this;\n  }\n\n  withSeverity(severity: ErrorSeverity): ErrorBuilder {\n    this.error.severity = severity;\n    return this;\n  }\n\n  withCategory(category: ErrorCategory): ErrorBuilder {\n    this.error.category = category;\n    return this;\n  }\n\n  withTitle(title: string): ErrorBuilder {\n    this.error.title = title;\n    return this;\n  }\n\n  withMessage(message: string): ErrorBuilder {\n    this.error.message = message;\n    return this;\n  }\n\n  withContext(context: ErrorContext): ErrorBuilder {\n    this.error.context = context;\n    return this;\n  }\n\n  withLocation(location: ErrorLocation): ErrorBuilder {\n    if (!this.error.context) {\n      this.error.context = {\n        operation: \"Unknown\",\n        timestamp: new Date(),\n      };\n    }\n    this.error.context.location = location;\n    return this;\n  }\n\n  withTechnicalDetails(details: string): ErrorBuilder {\n    this.error.technicalDetails = details;\n    return this;\n  }\n\n  withSuggestions(suggestions: FixSuggestion[]): ErrorBuilder {\n    this.error.suggestions = suggestions;\n    return this;\n  }\n\n  withRecoverable(recoverable: boolean): ErrorBuilder {\n    this.error.recoverable = recoverable;\n    return this;\n  }\n\n  withStackTrace(stackTrace: string): ErrorBuilder {\n    this.error.stackTrace = stackTrace;\n    return this;\n  }\n\n  withInnerError(innerError: ExocortexError): ErrorBuilder {\n    this.error.innerError = innerError;\n    return this;\n  }\n\n  build(): ExocortexError {\n    if (!this.error.id) {\n      this.error.id = `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    if (!this.error.severity) {\n      this.error.severity = ErrorSeverity.ERROR;\n    }\n    if (!this.error.category) {\n      this.error.category = ErrorCategory.SYSTEM;\n    }\n    if (!this.error.title) {\n      this.error.title = \"Error\";\n    }\n    if (!this.error.message) {\n      this.error.message = \"An error occurred\";\n    }\n    if (!this.error.context) {\n      this.error.context = {\n        operation: \"Unknown\",\n        timestamp: new Date(),\n      };\n    }\n\n    return this.error as ExocortexError;\n  }\n}\n"],"version":3}