11e86a32275ac316c5faaaec86224ebb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorBuilder = exports.ErrorCategory = exports.ErrorSeverity = void 0;
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["CRITICAL"] = "critical";
    ErrorSeverity["ERROR"] = "error";
    ErrorSeverity["WARNING"] = "warning";
    ErrorSeverity["INFO"] = "info";
})(ErrorSeverity = exports.ErrorSeverity || (exports.ErrorSeverity = {}));
var ErrorCategory;
(function (ErrorCategory) {
    ErrorCategory["SYNTAX"] = "syntax";
    ErrorCategory["SEMANTIC"] = "semantic";
    ErrorCategory["VALIDATION"] = "validation";
    ErrorCategory["SYSTEM"] = "system";
    ErrorCategory["NETWORK"] = "network";
    ErrorCategory["PERMISSION"] = "permission";
})(ErrorCategory = exports.ErrorCategory || (exports.ErrorCategory = {}));
class ErrorBuilder {
    constructor() {
        this.error = {};
    }
    static create() {
        return new ErrorBuilder();
    }
    withId(id) {
        this.error.id = id;
        return this;
    }
    withSeverity(severity) {
        this.error.severity = severity;
        return this;
    }
    withCategory(category) {
        this.error.category = category;
        return this;
    }
    withTitle(title) {
        this.error.title = title;
        return this;
    }
    withMessage(message) {
        this.error.message = message;
        return this;
    }
    withContext(context) {
        this.error.context = context;
        return this;
    }
    withLocation(location) {
        if (!this.error.context) {
            this.error.context = {
                operation: "Unknown",
                timestamp: new Date(),
            };
        }
        this.error.context.location = location;
        return this;
    }
    withTechnicalDetails(details) {
        this.error.technicalDetails = details;
        return this;
    }
    withSuggestions(suggestions) {
        this.error.suggestions = suggestions;
        return this;
    }
    withRecoverable(recoverable) {
        this.error.recoverable = recoverable;
        return this;
    }
    withStackTrace(stackTrace) {
        this.error.stackTrace = stackTrace;
        return this;
    }
    withInnerError(innerError) {
        this.error.innerError = innerError;
        return this;
    }
    build() {
        if (!this.error.id) {
            this.error.id = `error-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        }
        if (!this.error.severity) {
            this.error.severity = ErrorSeverity.ERROR;
        }
        if (!this.error.category) {
            this.error.category = ErrorCategory.SYSTEM;
        }
        if (!this.error.title) {
            this.error.title = "Error";
        }
        if (!this.error.message) {
            this.error.message = "An error occurred";
        }
        if (!this.error.context) {
            this.error.context = {
                operation: "Unknown",
                timestamp: new Date(),
            };
        }
        return this.error;
    }
}
exports.ErrorBuilder = ErrorBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,