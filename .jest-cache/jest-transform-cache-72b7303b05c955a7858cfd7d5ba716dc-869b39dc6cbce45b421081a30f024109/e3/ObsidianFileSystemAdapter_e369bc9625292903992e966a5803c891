86a0272bade42bdb10ee31eda370c7ca
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianFileSystemAdapter = void 0;
const obsidian_1 = require("obsidian");
const Result_1 = require("../../domain/core/Result");
/**
 * Obsidian implementation of file system adapter
 */
class ObsidianFileSystemAdapter {
    constructor(app) {
        this.app = app;
    }
    async readFile(path) {
        try {
            const file = this.app.vault.getAbstractFileByPath(path);
            if (!file || !(file instanceof obsidian_1.TFile)) {
                return Result_1.Result.fail(`File not found: ${path}`);
            }
            const content = await this.app.vault.read(file);
            return Result_1.Result.ok(content);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to read file ${path}: ${error.message}`);
        }
    }
    async writeFile(path, content) {
        try {
            const file = this.app.vault.getAbstractFileByPath(path);
            if (file instanceof obsidian_1.TFile) {
                await this.app.vault.modify(file, content);
            }
            else {
                await this.app.vault.create(path, content);
            }
            return Result_1.Result.ok(undefined);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to write file ${path}: ${error.message}`);
        }
    }
    async fileExists(path) {
        const file = this.app.vault.getAbstractFileByPath(path);
        return file instanceof obsidian_1.TFile;
    }
    async listFiles(directory, extension) {
        try {
            let files = this.app.vault.getFiles();
            if (directory) {
                files = files.filter((file) => file.path.startsWith(directory));
            }
            if (extension) {
                files = files.filter((file) => file.extension === extension);
            }
            return Result_1.Result.ok(files);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to list files: ${error.message}`);
        }
    }
    generateFileName(baseName, extension) {
        const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
        const name = baseName || `export-${timestamp}`;
        return extension ? `${name}.${extension}` : name;
    }
    detectFormatFromExtension(fileName) {
        const extension = fileName.split(".").pop()?.toLowerCase();
        const formatMap = {
            ttl: "turtle",
            nt: "n-triples",
            jsonld: "json-ld",
            rdf: "rdf-xml",
            xml: "rdf-xml",
        };
        return formatMap[extension || ""] || "turtle";
    }
    async ensureDirectory(path) {
        try {
            const exists = await this.app.vault.adapter.exists(path);
            if (!exists) {
                await this.app.vault.adapter.mkdir(path);
            }
            return Result_1.Result.ok(undefined);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to create directory ${path}: ${error.message}`);
        }
    }
}
exports.ObsidianFileSystemAdapter = ObsidianFileSystemAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,