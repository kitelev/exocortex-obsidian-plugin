7251550095565f8c11daa9334d706d35
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetId = void 0;
const Result_1 = require("../core/Result");
/**
 * Value object representing a unique asset identifier
 * Immutable and self-validating
 */
class AssetId {
    constructor(value) {
        this.value = value;
    }
    static create(value) {
        if (!value || value.trim().length === 0) {
            return Result_1.Result.fail("AssetId cannot be empty");
        }
        // Validate UUID format for asset IDs
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(value.trim())) {
            return Result_1.Result.fail("AssetId must be a valid UUID format");
        }
        return Result_1.Result.ok(new AssetId(value.trim()));
    }
    static generate() {
        const uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
            const r = (Math.random() * 16) | 0;
            const v = c === "x" ? r : (r & 0x3) | 0x8;
            return v.toString(16);
        });
        return new AssetId(uuid);
    }
    toString() {
        return this.value;
    }
    equals(other) {
        if (!other || !(other instanceof AssetId)) {
            return false;
        }
        return this.value === other.value;
    }
    /**
     * Get the UUID value
     */
    getValue() {
        return this.value;
    }
    /**
     * Validate that this is a proper UUID
     */
    isValid() {
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        return uuidRegex.test(this.value);
    }
}
exports.AssetId = AssetId;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL0Fzc2V0SWQudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXdDO0FBRXhDOzs7R0FHRztBQUNILE1BQWEsT0FBTztJQUdsQixZQUFvQixLQUFhO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWE7UUFDekIsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QyxPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQVUseUJBQXlCLENBQUMsQ0FBQztTQUN4RDtRQUVELHFDQUFxQztRQUNyQyxNQUFNLFNBQVMsR0FDYiw0RUFBNEUsQ0FBQztRQUMvRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRTtZQUNqQyxPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQVUscUNBQXFDLENBQUMsQ0FBQztTQUNwRTtRQUVELE9BQU8sZUFBTSxDQUFDLEVBQUUsQ0FBVSxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUTtRQUNiLE1BQU0sSUFBSSxHQUFHLHNDQUFzQyxDQUFDLE9BQU8sQ0FDekQsT0FBTyxFQUNQLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDSixNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDMUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FDRixDQUFDO1FBQ0YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQWM7UUFDbkIsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLE9BQU8sQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTCxNQUFNLFNBQVMsR0FDYiw0RUFBNEUsQ0FBQztRQUMvRSxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDRjtBQTVERCwwQkE0REMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi92YWx1ZS1vYmplY3RzL0Fzc2V0SWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uL2NvcmUvUmVzdWx0XCI7XG5cbi8qKlxuICogVmFsdWUgb2JqZWN0IHJlcHJlc2VudGluZyBhIHVuaXF1ZSBhc3NldCBpZGVudGlmaWVyXG4gKiBJbW11dGFibGUgYW5kIHNlbGYtdmFsaWRhdGluZ1xuICovXG5leHBvcnQgY2xhc3MgQXNzZXRJZCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdmFsdWU6IHN0cmluZztcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKHZhbHVlOiBzdHJpbmcpOiBSZXN1bHQ8QXNzZXRJZD4ge1xuICAgIGlmICghdmFsdWUgfHwgdmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPEFzc2V0SWQ+KFwiQXNzZXRJZCBjYW5ub3QgYmUgZW1wdHlcIik7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgVVVJRCBmb3JtYXQgZm9yIGFzc2V0IElEc1xuICAgIGNvbnN0IHV1aWRSZWdleCA9XG4gICAgICAvXlswLTlhLWZdezh9LVswLTlhLWZdezR9LVsxLTVdWzAtOWEtZl17M30tWzg5YWJdWzAtOWEtZl17M30tWzAtOWEtZl17MTJ9JC9pO1xuICAgIGlmICghdXVpZFJlZ2V4LnRlc3QodmFsdWUudHJpbSgpKSkge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsPEFzc2V0SWQ+KFwiQXNzZXRJZCBtdXN0IGJlIGEgdmFsaWQgVVVJRCBmb3JtYXRcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlc3VsdC5vazxBc3NldElkPihuZXcgQXNzZXRJZCh2YWx1ZS50cmltKCkpKTtcbiAgfVxuXG4gIHN0YXRpYyBnZW5lcmF0ZSgpOiBBc3NldElkIHtcbiAgICBjb25zdCB1dWlkID0gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKFxuICAgICAgL1t4eV0vZyxcbiAgICAgIChjKSA9PiB7XG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDA7XG4gICAgICAgIGNvbnN0IHYgPSBjID09PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICAgIH0sXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IEFzc2V0SWQodXVpZCk7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyOiBBc3NldElkKTogYm9vbGVhbiB7XG4gICAgaWYgKCFvdGhlciB8fCAhKG90aGVyIGluc3RhbmNlb2YgQXNzZXRJZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsdWUgPT09IG90aGVyLnZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgVVVJRCB2YWx1ZVxuICAgKi9cbiAgZ2V0VmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSB0aGF0IHRoaXMgaXMgYSBwcm9wZXIgVVVJRFxuICAgKi9cbiAgaXNWYWxpZCgpOiBib29sZWFuIHtcbiAgICBjb25zdCB1dWlkUmVnZXggPVxuICAgICAgL15bMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfSQvaTtcbiAgICByZXR1cm4gdXVpZFJlZ2V4LnRlc3QodGhpcy52YWx1ZSk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==