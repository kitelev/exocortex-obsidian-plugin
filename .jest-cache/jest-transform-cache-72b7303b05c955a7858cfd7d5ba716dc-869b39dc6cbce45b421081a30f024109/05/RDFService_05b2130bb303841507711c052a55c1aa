60a1353bae34a8f52a957f798b11034a
"use strict";
/**
 * RDF Service - Coordinates RDF operations using specialized services
 * Follows Single Responsibility Principle by delegating to specific services
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDFService = void 0;
const Graph_1 = require("../../domain/semantic/core/Graph");
const Triple_1 = require("../../domain/semantic/core/Triple");
const Result_1 = require("../../domain/core/Result");
const RDFSerializer_1 = require("./RDFSerializer");
const RDFParser_1 = require("./RDFParser");
const NamespaceManager_1 = require("./NamespaceManager");
const RDFValidator_1 = require("./RDFValidator");
const MemoryOptimizedImporter_1 = require("../../infrastructure/performance/MemoryOptimizedImporter");
const IndexedGraph_1 = require("../../domain/semantic/core/IndexedGraph");
class RDFService {
    constructor(notificationService, fileSystemAdapter, namespaceManager) {
        this.notificationService = notificationService;
        this.fileSystemAdapter = fileSystemAdapter;
        this.namespaceManager = namespaceManager || new NamespaceManager_1.NamespaceManager();
        this.serializer = new RDFSerializer_1.RDFSerializer(this.namespaceManager);
        this.parser = new RDFParser_1.RDFParser(this.namespaceManager);
        this.validator = new RDFValidator_1.RDFValidator();
        this.optimizedImporter = new MemoryOptimizedImporter_1.MemoryOptimizedImporter();
    }
    /**
     * Export graph to RDF format
     */
    async exportGraph(graph, options) {
        try {
            const validationResult = this.validator.validateExportOptions(options);
            if (validationResult.isFailure) {
                return Result_1.Result.fail(validationResult.errorValue());
            }
            const serializationOptions = {
                format: options.format,
                includeComments: options.includeComments ?? true,
                prettyPrint: options.prettyPrint ?? true,
                baseIRI: options.baseIRI,
                namespaceManager: this.namespaceManager,
            };
            const result = this.serializer.serialize(graph, serializationOptions);
            if (result.isFailure) {
                return result;
            }
            const serializedData = result.getValue();
            if (options.saveToVault) {
                const fileName = this.fileSystemAdapter.generateFileName(options.fileName, this.getFormatInfo(options.format).extension.slice(1));
                const filePath = options.targetFolder
                    ? `${options.targetFolder}/${fileName}`
                    : fileName;
                const saveResult = await this.fileSystemAdapter.writeFile(filePath, serializedData.content);
                if (saveResult.isFailure) {
                    return Result_1.Result.fail(saveResult.errorValue());
                }
                this.notificationService.showSuccess(`Exported ${serializedData.tripleCount} triples to ${filePath}`);
            }
            return result;
        }
        catch (error) {
            return Result_1.Result.fail(`Export failed: ${error.message}`);
        }
    }
    /**
     * Import RDF data and merge with existing graph
     */
    async importRDF(content, graph, options) {
        try {
            const validationResult = this.validator.validateImportOptions(options);
            if (validationResult.isFailure) {
                return Result_1.Result.fail(validationResult.errorValue());
            }
            const parseOptions = {
                format: options.format,
                baseIRI: options.baseIRI,
                namespaceManager: this.namespaceManager,
                validateInput: options.validateInput ?? true,
                strictMode: options.strictMode ?? false,
            };
            const parseResult = this.parser.parse(content, parseOptions);
            if (parseResult.isFailure) {
                return Result_1.Result.fail(`Import parsing failed: ${parseResult.errorValue()}`);
            }
            const imported = parseResult.getValue();
            if (options.validateInput) {
                const validationOptions = {
                    strictMode: options.strictMode,
                    checkDuplicates: true,
                    checkNamespaces: true,
                    checkLiterals: true,
                };
                const graphValidation = this.validator.validateGraph(imported.graph, validationOptions);
                if (graphValidation.isFailure) {
                    return Result_1.Result.fail(graphValidation.errorValue());
                }
                const validation = graphValidation.getValue();
                if (!validation.isValid && options.strictMode) {
                    const errorMessages = validation.errors
                        .map((e) => e.message)
                        .join("; ");
                    return Result_1.Result.fail(`Import validation failed: ${errorMessages}`);
                }
                if (validation.warnings.length > 0) {
                    this.notificationService.showWarning(`Import completed with ${validation.warnings.length} warnings`);
                }
            }
            let finalGraph;
            // Use optimized importer for large files
            const useOptimized = options.useOptimizedImporter !== false &&
                (content.length > 50000 || options.chunkSize);
            if (useOptimized && graph instanceof IndexedGraph_1.IndexedGraph) {
                // Use optimized batch processing
                if (options.mergeMode === "replace") {
                    graph.clear();
                }
                graph.beginBatch();
                for (const triple of imported.graph.toArray()) {
                    graph.add(triple);
                }
                graph.commitBatch();
                finalGraph = graph;
            }
            else {
                // Standard merge
                if (options.mergeMode === "replace") {
                    finalGraph = imported.graph;
                }
                else {
                    finalGraph = graph.clone();
                    if (finalGraph instanceof IndexedGraph_1.IndexedGraph) {
                        finalGraph.beginBatch();
                        finalGraph.merge(imported.graph);
                        finalGraph.commitBatch();
                    }
                    else {
                        finalGraph.merge(imported.graph);
                    }
                }
            }
            for (const [prefix, namespace] of Object.entries(imported.namespaces)) {
                if (!this.namespaceManager.hasPrefix(prefix)) {
                    this.namespaceManager.addBinding(prefix, namespace);
                }
            }
            return Result_1.Result.ok({ graph: finalGraph, imported });
        }
        catch (error) {
            return Result_1.Result.fail(`Import failed: ${error.message}`);
        }
    }
    /**
     * Import RDF from vault file
     */
    async importFromVaultFile(filePath, graph, options) {
        try {
            const contentResult = await this.fileSystemAdapter.readFile(filePath);
            if (contentResult.isFailure) {
                return Result_1.Result.fail(contentResult.errorValue());
            }
            if (!options.format) {
                const fileName = filePath.split("/").pop() || filePath;
                options.format = this.fileSystemAdapter.detectFormatFromExtension(fileName);
            }
            return await this.importRDF(contentResult.getValue(), graph, options);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to import from vault file: ${error.message}`);
        }
    }
    /**
     * Export SPARQL query results
     */
    async exportQueryResults(results, format, fileName, saveToVault = true) {
        try {
            const graph = this.convertQueryResultsToGraph(results);
            const options = {
                format,
                fileName: fileName || "sparql-results",
                saveToVault,
                includeComments: true,
                prettyPrint: true,
                targetFolder: "exports",
            };
            return await this.exportGraph(graph, options);
        }
        catch (error) {
            return Result_1.Result.fail(`Query results export failed: ${error.message}`);
        }
    }
    /**
     * Validate a graph
     */
    async validateGraph(graph, options) {
        return this.validator.validateGraph(graph, options);
    }
    /**
     * List RDF files in vault
     */
    async listRDFFiles(folder) {
        return this.fileSystemAdapter.listFiles(folder, "ttl");
    }
    /**
     * Convert SPARQL query results to graph
     */
    convertQueryResultsToGraph(results) {
        const graph = new Graph_1.Graph();
        for (const result of results) {
            if (result.subject && result.predicate && result.object) {
                try {
                    const subject = this.createNodeFromValue(result.subject);
                    const predicate = this.createNodeFromValue(result.predicate);
                    const object = this.createNodeFromValue(result.object);
                    if (subject && predicate && object) {
                        const triple = new Triple_1.Triple(subject, predicate, object);
                        graph.add(triple);
                    }
                }
                catch (error) {
                    console.warn("Failed to convert query result to triple:", error);
                }
            }
        }
        return graph;
    }
    /**
     * Create RDF node from query result value
     */
    createNodeFromValue(value) {
        if (typeof value === "string") {
            if (value.startsWith("_:")) {
                return new Triple_1.BlankNode(value);
            }
            else if (value.startsWith("http://") ||
                value.startsWith("https://") ||
                value.includes(":")) {
                try {
                    return new Triple_1.IRI(value);
                }
                catch {
                    return Triple_1.Literal.string(value);
                }
            }
            else {
                return Triple_1.Literal.string(value);
            }
        }
        else if (typeof value === "number") {
            return Number.isInteger(value)
                ? Triple_1.Literal.integer(value)
                : Triple_1.Literal.double(value);
        }
        else if (typeof value === "boolean") {
            return Triple_1.Literal.boolean(value);
        }
        else if (value && typeof value === "object") {
            if (value.type === "uri" || value.type === "iri") {
                return new Triple_1.IRI(value.value);
            }
            else if (value.type === "bnode") {
                return new Triple_1.BlankNode(value.value);
            }
            else if (value.type === "literal") {
                if (value.datatype) {
                    return new Triple_1.Literal(value.value, new Triple_1.IRI(value.datatype));
                }
                else if (value.lang) {
                    return new Triple_1.Literal(value.value, undefined, value.lang);
                }
                else {
                    return new Triple_1.Literal(value.value);
                }
            }
        }
        return null;
    }
    /**
     * Get namespace manager instance
     */
    getNamespaceManager() {
        return this.namespaceManager;
    }
    /**
     * Get supported export formats
     */
    getSupportedFormats() {
        return ["turtle", "n-triples", "json-ld", "rdf-xml"];
    }
    /**
     * Get format information
     */
    getFormatInfo(format) {
        const formatMap = {
            turtle: { extension: ".ttl", mimeType: "text/turtle", name: "Turtle" },
            "n-triples": {
                extension: ".nt",
                mimeType: "application/n-triples",
                name: "N-Triples",
            },
            "json-ld": {
                extension: ".jsonld",
                mimeType: "application/ld+json",
                name: "JSON-LD",
            },
            "rdf-xml": {
                extension: ".rdf",
                mimeType: "application/rdf+xml",
                name: "RDF/XML",
            },
        };
        return formatMap[format];
    }
}
exports.RDFService = RDFService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,