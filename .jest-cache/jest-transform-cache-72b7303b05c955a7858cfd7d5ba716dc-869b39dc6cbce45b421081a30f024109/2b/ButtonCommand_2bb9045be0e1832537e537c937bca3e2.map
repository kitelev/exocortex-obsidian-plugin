{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/ButtonCommand.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/entities/ButtonCommand.ts"],"sourcesContent":["import { Entity } from \"../core/Entity\";\nimport { AssetId } from \"../value-objects/AssetId\";\nimport { Result } from \"../core/Result\";\n\n/**\n * Types of commands that can be executed\n */\nexport enum CommandType {\n  CREATE_ASSET = \"CREATE_ASSET\",\n  CREATE_CHILD_TASK = \"CREATE_CHILD_TASK\",\n  OPEN_ASSET = \"OPEN_ASSET\",\n  DELETE_ASSET = \"DELETE_ASSET\",\n  RUN_TEMPLATE = \"RUN_TEMPLATE\",\n  EXECUTE_SEARCH = \"EXECUTE_SEARCH\",\n  TRIGGER_WORKFLOW = \"TRIGGER_WORKFLOW\",\n  CUSTOM = \"CUSTOM\",\n}\n\n/**\n * Parameter definition for command inputs\n */\nexport interface CommandParameter {\n  name: string;\n  type: \"string\" | \"number\" | \"boolean\" | \"asset\" | \"date\" | \"array\";\n  required: boolean;\n  defaultValue?: any;\n  label?: string;\n  description?: string;\n  validation?: string; // Regex or validation rule\n}\n\n/**\n * Domain Entity representing a Button Command\n */\nexport interface ButtonCommandProps {\n  id: AssetId;\n  type: CommandType;\n  name: string;\n  description?: string;\n  requiresInput: boolean;\n  parameters: CommandParameter[];\n  targetClass?: string; // For commands that operate on specific classes\n  template?: string; // For template-based commands\n  script?: string; // For custom script commands\n}\n\nexport class ButtonCommand extends Entity<ButtonCommandProps> {\n  private constructor(props: ButtonCommandProps) {\n    super(props, props.id.toString());\n  }\n\n  protected generateId(): string {\n    return this.props.id.toString();\n  }\n\n  protected validate(): void {\n    if (!this.props.id) {\n      throw new Error(\"ButtonCommand must have a valid ID\");\n    }\n\n    if (!this.props.name || this.props.name.trim().length === 0) {\n      throw new Error(\"ButtonCommand must have a non-empty name\");\n    }\n\n    if (!this.props.type) {\n      throw new Error(\"ButtonCommand must have a valid type\");\n    }\n  }\n\n  /**\n   * Factory method with validation\n   */\n  public static create(props: ButtonCommandProps): Result<ButtonCommand> {\n    // Validate command name\n    if (!props.name || props.name.trim().length === 0) {\n      return Result.fail<ButtonCommand>(\"Command name cannot be empty\");\n    }\n\n    // Validate parameters if input is required\n    if (\n      props.requiresInput &&\n      (!props.parameters || props.parameters.length === 0)\n    ) {\n      return Result.fail<ButtonCommand>(\n        \"Commands requiring input must define parameters\",\n      );\n    }\n\n    // Validate each parameter\n    for (const param of props.parameters) {\n      if (!param.name || param.name.trim().length === 0) {\n        return Result.fail<ButtonCommand>(\"Parameter name cannot be empty\");\n      }\n\n      if (param.validation) {\n        try {\n          new RegExp(param.validation);\n        } catch (e) {\n          return Result.fail<ButtonCommand>(\n            `Invalid validation regex for parameter ${param.name}`,\n          );\n        }\n      }\n    }\n\n    // Validate command-specific requirements\n    if (props.type === CommandType.RUN_TEMPLATE && !props.template) {\n      return Result.fail<ButtonCommand>(\n        \"Template commands must specify a template\",\n      );\n    }\n\n    if (props.type === CommandType.CUSTOM && !props.script) {\n      return Result.fail<ButtonCommand>(\n        \"Custom commands must specify a script\",\n      );\n    }\n\n    return Result.ok<ButtonCommand>(new ButtonCommand(props));\n  }\n\n  // Getters\n  get id(): AssetId {\n    return this.props.id;\n  }\n\n  get type(): CommandType {\n    return this.props.type;\n  }\n\n  get name(): string {\n    return this.props.name;\n  }\n\n  get description(): string | undefined {\n    return this.props.description;\n  }\n\n  get requiresInput(): boolean {\n    return this.props.requiresInput;\n  }\n\n  get parameters(): CommandParameter[] {\n    return this.props.parameters;\n  }\n\n  get targetClass(): string | undefined {\n    return this.props.targetClass;\n  }\n\n  get template(): string | undefined {\n    return this.props.template;\n  }\n\n  get script(): string | undefined {\n    return this.props.script;\n  }\n\n  /**\n   * Validate input parameters against command definition\n   */\n  public validateInput(\n    input: Record<string, any>,\n  ): Result<Record<string, any>> {\n    const validated: Record<string, any> = {};\n    const errors: string[] = [];\n\n    for (const param of this.parameters) {\n      const value = input[param.name];\n\n      // Check required parameters\n      if (\n        param.required &&\n        (value === undefined || value === null || value === \"\")\n      ) {\n        errors.push(`Required parameter '${param.name}' is missing`);\n        continue;\n      }\n\n      // Skip optional parameters if not provided\n      if (!param.required && (value === undefined || value === null)) {\n        if (param.defaultValue !== undefined) {\n          validated[param.name] = param.defaultValue;\n        }\n        continue;\n      }\n\n      // Type validation\n      if (!this.validateParameterType(value, param.type)) {\n        errors.push(`Parameter '${param.name}' must be of type ${param.type}`);\n        continue;\n      }\n\n      // Custom validation\n      if (param.validation) {\n        const regex = new RegExp(param.validation);\n        if (!regex.test(String(value))) {\n          errors.push(\n            `Parameter '${param.name}' does not match validation pattern`,\n          );\n          continue;\n        }\n      }\n\n      validated[param.name] = value;\n    }\n\n    if (errors.length > 0) {\n      return Result.fail<Record<string, any>>(errors.join(\"; \"));\n    }\n\n    return Result.ok<Record<string, any>>(validated);\n  }\n\n  /**\n   * Check if command can be executed in current context\n   */\n  public canExecute(context: {\n    currentClass?: string;\n    hasSelection?: boolean;\n  }): boolean {\n    // Check if command is applicable to current class\n    if (this.targetClass && context.currentClass !== this.targetClass) {\n      return false;\n    }\n\n    // Check if command requires selection\n    if (this.type === CommandType.DELETE_ASSET && !context.hasSelection) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Build execution context for the command\n   */\n  public buildExecutionContext(\n    input: Record<string, any>,\n  ): Result<CommandExecutionContext> {\n    const validationResult = this.validateInput(input);\n\n    if (validationResult.isFailure) {\n      return Result.fail<CommandExecutionContext>(validationResult.error);\n    }\n\n    const context: CommandExecutionContext = {\n      commandId: this.id.toString(),\n      commandType: this.type,\n      parameters: validationResult.getValue(),\n      timestamp: new Date(),\n      template: this.props.template,\n      script: this.props.script,\n      targetClass: this.props.targetClass,\n    };\n\n    return Result.ok<CommandExecutionContext>(context);\n  }\n\n  private validateParameterType(value: any, type: string): boolean {\n    switch (type) {\n      case \"string\":\n        return typeof value === \"string\";\n      case \"number\":\n        return typeof value === \"number\" || !isNaN(Number(value));\n      case \"boolean\":\n        return (\n          typeof value === \"boolean\" || value === \"true\" || value === \"false\"\n        );\n      case \"date\":\n        return !isNaN(Date.parse(String(value)));\n      case \"asset\":\n        return (\n          typeof value === \"string\" &&\n          value.startsWith(\"[[\") &&\n          value.endsWith(\"]]\")\n        );\n      case \"array\":\n        return Array.isArray(value) || typeof value === \"string\";\n      default:\n        return true;\n    }\n  }\n}\n\n/**\n * Context for command execution\n */\nexport interface CommandExecutionContext {\n  commandId: string;\n  commandType: CommandType;\n  parameters: Record<string, any>;\n  timestamp: Date;\n  template?: string;\n  script?: string;\n  targetClass?: string;\n}\n"],"version":3}