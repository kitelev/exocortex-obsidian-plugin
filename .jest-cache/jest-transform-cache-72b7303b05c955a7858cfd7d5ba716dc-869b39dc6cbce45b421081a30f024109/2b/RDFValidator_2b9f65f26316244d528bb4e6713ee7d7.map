{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFValidator.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/RDFValidator.ts"],"sourcesContent":["import { Result } from \"../../domain/core/Result\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport {\n  Triple,\n  IRI,\n  BlankNode,\n  Literal,\n} from \"../../domain/semantic/core/Triple\";\nimport { RDFFormat } from \"./RDFSerializer\";\n\nexport interface ValidationError {\n  type: \"error\" | \"warning\";\n  message: string;\n  triple?: Triple;\n  location?: { line?: number; column?: number };\n}\n\nexport interface ValidationOptions {\n  strictMode?: boolean;\n  checkDuplicates?: boolean;\n  checkNamespaces?: boolean;\n  checkLiterals?: boolean;\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n  warnings: ValidationError[];\n  stats: {\n    tripleCount: number;\n    duplicateCount: number;\n    invalidIRICount: number;\n    invalidLiteralCount: number;\n  };\n}\n\nexport class RDFValidator {\n  constructor() {}\n\n  validateGraph(\n    graph: Graph,\n    options: ValidationOptions = {},\n  ): Result<ValidationResult> {\n    const errors: ValidationError[] = [];\n    const warnings: ValidationError[] = [];\n    const stats = {\n      tripleCount: 0,\n      duplicateCount: 0,\n      invalidIRICount: 0,\n      invalidLiteralCount: 0,\n    };\n\n    try {\n      const triples = graph.toArray();\n      stats.tripleCount = triples.length;\n\n      const seenTriples = new Set<string>();\n\n      for (const triple of triples) {\n        const validationErrors = this.validateTriple(triple, options);\n        errors.push(...validationErrors.filter((e) => e.type === \"error\"));\n        warnings.push(...validationErrors.filter((e) => e.type === \"warning\"));\n\n        if (validationErrors.some((e) => e.message.includes(\"Invalid IRI\"))) {\n          stats.invalidIRICount++;\n        }\n        if (\n          validationErrors.some((e) => e.message.includes(\"Invalid literal\"))\n        ) {\n          stats.invalidLiteralCount++;\n        }\n\n        if (options.checkDuplicates) {\n          const tripleKey = this.getTripleKey(triple);\n          if (seenTriples.has(tripleKey)) {\n            stats.duplicateCount++;\n            warnings.push({\n              type: \"warning\",\n              message: \"Duplicate triple detected\",\n              triple,\n            });\n          } else {\n            seenTriples.add(tripleKey);\n          }\n        }\n      }\n\n      const result: ValidationResult = {\n        isValid: errors.length === 0,\n        errors,\n        warnings,\n        stats,\n      };\n\n      return Result.ok(result);\n    } catch (error) {\n      return Result.fail(`Validation failed: ${error.message}`);\n    }\n  }\n\n  validateTriple(\n    triple: Triple,\n    options: ValidationOptions = {},\n  ): ValidationError[] {\n    const errors: ValidationError[] = [];\n\n    const subject = triple.getSubject();\n    const predicate = triple.getPredicate();\n    const object = triple.getObject();\n\n    if (!subject || !predicate || !object) {\n      errors.push({\n        type: \"error\",\n        message: \"Triple is missing required components\",\n        triple,\n      });\n      return errors;\n    }\n\n    if (subject instanceof IRI) {\n      const iriErrors = this.validateIRI(subject.toString());\n      if (iriErrors.length > 0) {\n        errors.push({\n          type: options.strictMode ? \"error\" : \"warning\",\n          message: `Invalid IRI in subject: ${iriErrors.join(\", \")}`,\n          triple,\n        });\n      }\n    }\n\n    if (predicate instanceof IRI) {\n      const iriErrors = this.validateIRI(predicate.toString());\n      if (iriErrors.length > 0) {\n        errors.push({\n          type: \"error\",\n          message: `Invalid IRI in predicate: ${iriErrors.join(\", \")}`,\n          triple,\n        });\n      }\n    }\n\n    if (object instanceof IRI) {\n      const iriErrors = this.validateIRI(object.toString());\n      if (iriErrors.length > 0) {\n        errors.push({\n          type: options.strictMode ? \"error\" : \"warning\",\n          message: `Invalid IRI in object: ${iriErrors.join(\", \")}`,\n          triple,\n        });\n      }\n    }\n\n    if (options.checkLiterals && object instanceof Literal) {\n      const literalErrors = this.validateLiteral(object);\n      errors.push(...literalErrors);\n    }\n\n    return errors;\n  }\n\n  validateIRI(iri: string): string[] {\n    const errors: string[] = [];\n\n    if (!iri || iri.trim() === \"\") {\n      errors.push(\"IRI cannot be empty\");\n      return errors;\n    }\n\n    if (!/^[a-zA-Z][a-zA-Z0-9+.-]*:/.test(iri)) {\n      errors.push(\"IRI must start with a valid scheme\");\n    }\n\n    const invalidChars = /[\\s<>\"{}|\\\\^`]/;\n    if (invalidChars.test(iri)) {\n      errors.push(\"IRI contains invalid characters\");\n    }\n\n    if (iri.length > 2048) {\n      errors.push(\"IRI exceeds maximum length\");\n    }\n\n    return errors;\n  }\n\n  validateLiteral(literal: Literal): ValidationError[] {\n    const errors: ValidationError[] = [];\n\n    const datatype = literal.getDatatype();\n    const language = literal.getLanguage();\n    const value = literal.getValue();\n\n    if (datatype) {\n      const datatypeErrors = this.validateIRI(datatype.toString());\n      if (datatypeErrors.length > 0) {\n        errors.push({\n          type: \"warning\",\n          message: `Invalid datatype IRI: ${datatypeErrors.join(\", \")}`,\n        });\n      }\n\n      const isValid = this.validateLiteralValue(value, datatype.toString());\n      if (!isValid) {\n        errors.push({\n          type: \"warning\",\n          message: `Literal value does not match declared datatype ${datatype.toString()}`,\n        });\n      }\n    }\n\n    if (language) {\n      if (!/^[a-z]{2,3}(-[A-Z]{2})?$/.test(language)) {\n        errors.push({\n          type: \"warning\",\n          message: `Invalid language tag: ${language}`,\n        });\n      }\n    }\n\n    return errors;\n  }\n\n  private validateLiteralValue(value: string, datatypeIRI: string): boolean {\n    const xsdNamespace = \"http://www.w3.org/2001/XMLSchema#\";\n\n    if (datatypeIRI === `${xsdNamespace}integer`) {\n      return /^-?\\d+$/.test(value);\n    }\n    if (datatypeIRI === `${xsdNamespace}decimal`) {\n      return /^-?\\d+(\\.\\d+)?$/.test(value);\n    }\n    if (datatypeIRI === `${xsdNamespace}boolean`) {\n      return value === \"true\" || value === \"false\";\n    }\n    if (datatypeIRI === `${xsdNamespace}dateTime`) {\n      return /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/.test(value);\n    }\n    if (datatypeIRI === `${xsdNamespace}date`) {\n      return /^\\d{4}-\\d{2}-\\d{2}$/.test(value);\n    }\n\n    return true;\n  }\n\n  validateExportOptions(options: any): Result<void> {\n    if (!options.format) {\n      return Result.fail(\"Export format is required\");\n    }\n\n    const validFormats: RDFFormat[] = [\n      \"turtle\",\n      \"n-triples\",\n      \"json-ld\",\n      \"rdf-xml\",\n    ];\n    if (!validFormats.includes(options.format)) {\n      return Result.fail(`Unsupported export format: ${options.format}`);\n    }\n\n    if (options.targetFolder && typeof options.targetFolder !== \"string\") {\n      return Result.fail(\"Target folder must be a string\");\n    }\n\n    if (options.fileName && typeof options.fileName !== \"string\") {\n      return Result.fail(\"File name must be a string\");\n    }\n\n    return Result.ok();\n  }\n\n  validateImportOptions(options: any): Result<void> {\n    if (!options.mergeMode) {\n      return Result.fail(\"Merge mode is required\");\n    }\n\n    if (options.mergeMode !== \"merge\" && options.mergeMode !== \"replace\") {\n      return Result.fail(`Invalid merge mode: ${options.mergeMode}`);\n    }\n\n    if (options.format) {\n      const validFormats: RDFFormat[] = [\n        \"turtle\",\n        \"n-triples\",\n        \"json-ld\",\n        \"rdf-xml\",\n      ];\n      if (!validFormats.includes(options.format)) {\n        return Result.fail(`Unsupported import format: ${options.format}`);\n      }\n    }\n\n    return Result.ok();\n  }\n\n  private getTripleKey(triple: Triple): string {\n    const subject = triple.getSubject();\n    const predicate = triple.getPredicate();\n    const object = triple.getObject();\n\n    const subjectStr =\n      subject instanceof IRI\n        ? subject.toString()\n        : subject instanceof BlankNode\n          ? `_:${subject.toString()}`\n          : \"\";\n    const predicateStr = predicate.toString();\n    const objectStr =\n      object instanceof IRI\n        ? object.toString()\n        : object instanceof BlankNode\n          ? `_:${object.toString()}`\n          : object instanceof Literal\n            ? `\"${object.toString()}\"`\n            : \"\";\n\n    return `${subjectStr}|${predicateStr}|${objectStr}`;\n  }\n}\n"],"version":3}