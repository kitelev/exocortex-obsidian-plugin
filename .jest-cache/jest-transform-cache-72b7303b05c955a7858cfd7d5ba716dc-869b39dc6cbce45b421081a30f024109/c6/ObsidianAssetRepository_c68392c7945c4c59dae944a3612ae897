84e71c879b7baccddfa7647ca28a0c43
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObsidianAssetRepository = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const Asset_1 = require("../../domain/entities/Asset");
/**
 * Obsidian implementation of IAssetRepository
 * Handles asset persistence using Obsidian vault
 */
class ObsidianAssetRepository {
    constructor(app) {
        this.app = app;
    }
    findById(id) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const files = this.app.vault.getMarkdownFiles();
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (((_a = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _a === void 0 ? void 0 : _a['exo__Asset_uid']) === id.toString()) {
                    const content = yield this.app.vault.read(file);
                    return Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                }
            }
            return null;
        });
    }
    findByClass(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const files = this.app.vault.getMarkdownFiles();
            const assets = [];
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    const classes = cache.frontmatter['exo__Instance_class'];
                    const classArray = Array.isArray(classes) ? classes : [classes];
                    if (classArray.some(c => c === className.toWikiLink() || c === className.toString())) {
                        const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                        if (asset) {
                            assets.push(asset);
                        }
                    }
                }
            }
            return assets;
        });
    }
    findByOntology(prefix) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const files = this.app.vault.getMarkdownFiles();
            const assets = [];
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    const ontology = cache.frontmatter['exo__Asset_isDefinedBy'];
                    const ontologyValue = ontology === null || ontology === void 0 ? void 0 : ontology.replace(/\[\[!?|\]\]/g, '');
                    if (ontologyValue === prefix.toString()) {
                        const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                        if (asset) {
                            assets.push(asset);
                        }
                    }
                }
            }
            return assets;
        });
    }
    save(asset) {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const frontmatter = asset.toFrontmatter();
            // Try to find the existing file by asset ID, stored path, or filename
            let targetFile = null;
            // First check if asset has a stored file path
            const storedPath = (_a = asset.props) === null || _a === void 0 ? void 0 : _a.filePath;
            if (storedPath) {
                const file = this.app.vault.getAbstractFileByPath(storedPath);
                if (file instanceof obsidian_1.TFile) {
                    targetFile = file;
                }
            }
            // If not found by stored path, try by asset ID
            if (!targetFile) {
                const assetId = frontmatter['exo__Asset_uid'];
                if (assetId) {
                    const files = this.app.vault.getMarkdownFiles();
                    for (const file of files) {
                        const cache = this.app.metadataCache.getFileCache(file);
                        if (((_b = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _b === void 0 ? void 0 : _b['exo__Asset_uid']) === assetId) {
                            targetFile = file;
                            break;
                        }
                    }
                }
            }
            // If not found by ID, try by filename
            if (!targetFile) {
                const fileName = `${asset.getTitle()}.md`;
                const file = this.app.vault.getAbstractFileByPath(fileName);
                if (file instanceof obsidian_1.TFile) {
                    targetFile = file;
                }
            }
            // Build YAML frontmatter
            const yamlLines = ['---'];
            for (const [key, value] of Object.entries(frontmatter)) {
                if (Array.isArray(value)) {
                    yamlLines.push(`${key}:`);
                    for (const item of value) {
                        // Check if item contains wikilinks that need quotes
                        const itemStr = String(item);
                        if (itemStr.includes('[[') && itemStr.includes(']]')) {
                            yamlLines.push(`  - "${itemStr}"`);
                        }
                        else {
                            yamlLines.push(`  - ${itemStr}`);
                        }
                    }
                }
                else if (typeof value === 'object' && value !== null) {
                    yamlLines.push(`${key}: ${JSON.stringify(value)}`);
                }
                else {
                    // Check if value contains wikilinks that need quotes
                    const valueStr = String(value);
                    if (valueStr.includes('[[') && valueStr.includes(']]')) {
                        yamlLines.push(`${key}: "${valueStr}"`);
                    }
                    else {
                        yamlLines.push(`${key}: ${valueStr}`);
                    }
                }
            }
            yamlLines.push('---');
            if (targetFile) {
                // Preserve existing content after frontmatter
                const existingContent = yield this.app.vault.read(targetFile);
                const contentMatch = existingContent.match(/^---\n[\s\S]*?\n---\n([\s\S]*)$/);
                const bodyContent = contentMatch ? contentMatch[1] : '';
                const newContent = yamlLines.join('\n') + '\n' + bodyContent;
                yield this.app.vault.modify(targetFile, newContent);
            }
            else {
                // Create new file if it doesn't exist
                const fileName = `${asset.getTitle()}.md`;
                const content = yamlLines.join('\n') + '\n';
                yield this.app.vault.create(fileName, content);
            }
        });
    }
    delete(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const asset = yield this.findById(id);
            if (asset) {
                const fileName = `${asset.getTitle()}.md`;
                const file = this.app.vault.getAbstractFileByPath(fileName);
                if (file) {
                    yield this.app.vault.delete(file);
                }
            }
        });
    }
    exists(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const asset = yield this.findById(id);
            return asset !== null;
        });
    }
    findAll() {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const files = this.app.vault.getMarkdownFiles();
            const assets = [];
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if ((_a = cache === null || cache === void 0 ? void 0 : cache.frontmatter) === null || _a === void 0 ? void 0 : _a['exo__Asset_uid']) {
                    const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                    if (asset) {
                        assets.push(asset);
                    }
                }
            }
            return assets;
        });
    }
    findByFilename(filename) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Handle different filename formats
            let searchPath = filename;
            // Add .md extension if not present
            if (!searchPath.endsWith('.md')) {
                searchPath = `${searchPath}.md`;
            }
            // Try to find by path first
            let file = this.app.vault.getAbstractFileByPath(searchPath);
            // If not found, search all files by basename
            if (!file) {
                const files = this.app.vault.getMarkdownFiles();
                file = files.find(f => f.path === searchPath || f.name === searchPath) || null;
            }
            if (file instanceof obsidian_1.TFile) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    const asset = Asset_1.Asset.fromFrontmatter(cache.frontmatter, file.basename);
                    if (asset) {
                        // Store the file path for later use in save
                        asset.props.filePath = file.path;
                        return asset;
                    }
                }
            }
            return null;
        });
    }
    /**
     * Update only the frontmatter of a file by path
     */
    updateFrontmatterByPath(filePath, updates) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const file = this.app.vault.getAbstractFileByPath(filePath);
            if (!(file instanceof obsidian_1.TFile)) {
                throw new Error(`File not found: ${filePath}`);
            }
            const content = yield this.app.vault.read(file);
            const cache = this.app.metadataCache.getFileCache(file);
            const currentFrontmatter = (cache === null || cache === void 0 ? void 0 : cache.frontmatter) || {};
            // Merge updates with current frontmatter
            const newFrontmatter = Object.assign(Object.assign({}, currentFrontmatter), updates);
            // Build new YAML frontmatter
            const yamlLines = ['---'];
            for (const [key, value] of Object.entries(newFrontmatter)) {
                if (value === undefined || value === null)
                    continue; // Skip undefined/null values
                if (Array.isArray(value)) {
                    yamlLines.push(`${key}:`);
                    for (const item of value) {
                        const itemStr = String(item);
                        if (itemStr.includes('[[') && itemStr.includes(']]')) {
                            yamlLines.push(`  - "${itemStr}"`);
                        }
                        else {
                            yamlLines.push(`  - ${itemStr}`);
                        }
                    }
                }
                else if (typeof value === 'object' && value !== null) {
                    yamlLines.push(`${key}: ${JSON.stringify(value)}`);
                }
                else if (typeof value === 'boolean') {
                    yamlLines.push(`${key}: ${value}`);
                }
                else if (typeof value === 'number') {
                    yamlLines.push(`${key}: ${value}`);
                }
                else {
                    const valueStr = String(value);
                    // Check if value needs quoting
                    if (valueStr.includes(':') || valueStr.includes('#') ||
                        valueStr.includes('[') || valueStr.includes(']') ||
                        valueStr.includes('{') || valueStr.includes('}') ||
                        valueStr.includes('|') || valueStr.includes('>') ||
                        valueStr.includes('@') || valueStr.includes('`') ||
                        valueStr.includes('"') || valueStr.includes("'") ||
                        valueStr.startsWith(' ') || valueStr.endsWith(' ')) {
                        // Escape quotes and wrap in quotes
                        yamlLines.push(`${key}: "${valueStr.replace(/"/g, '\\"')}"`);
                    }
                    else {
                        yamlLines.push(`${key}: ${valueStr}`);
                    }
                }
            }
            yamlLines.push('---');
            // Extract body content - handle multiple cases
            let bodyContent = '';
            // Check if content has frontmatter
            if (content.startsWith('---\n')) {
                // Find the end of frontmatter
                const endOfFrontmatter = content.indexOf('\n---\n', 4);
                if (endOfFrontmatter !== -1) {
                    // Extract content after frontmatter
                    bodyContent = content.substring(endOfFrontmatter + 5);
                }
                else {
                    // Malformed frontmatter, preserve original content
                    bodyContent = content;
                }
            }
            else {
                // No frontmatter, entire content is body
                bodyContent = content;
            }
            const newContent = yamlLines.join('\n') + '\n' + bodyContent;
            yield this.app.vault.modify(file, newContent);
        });
    }
}
exports.ObsidianAssetRepository = ObsidianAssetRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,