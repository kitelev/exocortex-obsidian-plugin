{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/ClassName.ts","mappings":";;;AAAA,2CAAwC;AAExC;;;GAGG;AACH,MAAa,SAAS;IAGpB,YAAoB,KAAa;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,KAAa;QACzB,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC,OAAO,eAAM,CAAC,IAAI,CAAY,2BAA2B,CAAC,CAAC;SAC5D;QAED,uCAAuC;QACvC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;QAEhD,IAAI,CAAC,sDAAsD,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACzE,OAAO,eAAM,CAAC,IAAI,CAAY,8BAA8B,KAAK,EAAE,CAAC,CAAC;SACtE;QAED,OAAO,eAAM,CAAC,EAAE,CAAY,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,UAAU;QACR,OAAO,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC;IAC7B,CAAC;IAED,SAAS;QACP,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1C,CAAC;IAED,OAAO;QACL,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACrC,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,CAAC,KAAgB;QACrB,OAAO,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC;IACpC,CAAC;CACF;AA3CD,8BA2CC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/value-objects/ClassName.ts"],"sourcesContent":["import { Result } from \"../core/Result\";\n\n/**\n * Value object representing an asset class name\n * Ensures valid class naming conventions\n */\nexport class ClassName {\n  public readonly value: string;\n\n  private constructor(value: string) {\n    this.value = value;\n  }\n\n  static create(value: string): Result<ClassName> {\n    if (!value || value.trim().length === 0) {\n      return Result.fail<ClassName>(\"ClassName cannot be empty\");\n    }\n\n    // Remove wiki link brackets if present\n    const cleaned = value.replace(/\\[\\[|\\]\\]/g, \"\");\n\n    if (!/^[a-zA-Z_][a-zA-Z0-9_]*(?:__[a-zA-Z][a-zA-Z0-9_]*)?$/.test(cleaned)) {\n      return Result.fail<ClassName>(`Invalid class name format: ${value}`);\n    }\n\n    return Result.ok<ClassName>(new ClassName(cleaned));\n  }\n\n  toString(): string {\n    return this.value;\n  }\n\n  toWikiLink(): string {\n    return `[[${this.value}]]`;\n  }\n\n  getPrefix(): string {\n    const parts = this.value.split(\"__\");\n    return parts.length > 1 ? parts[0] : \"\";\n  }\n\n  getName(): string {\n    const parts = this.value.split(\"__\");\n    return parts.length > 1 ? parts[1] : parts[0];\n  }\n\n  equals(other: ClassName): boolean {\n    return this.value === other.value;\n  }\n}\n"],"version":3}