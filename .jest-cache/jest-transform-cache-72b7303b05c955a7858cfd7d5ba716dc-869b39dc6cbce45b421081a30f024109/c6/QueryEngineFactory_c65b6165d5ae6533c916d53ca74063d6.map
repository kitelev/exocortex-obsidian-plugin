{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/QueryEngineFactory.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/QueryEngineFactory.ts"],"sourcesContent":["import {\n  IQueryEngine,\n  IQueryEngineFactory,\n  QueryEngineType,\n} from \"../../domain/ports/IQueryEngine\";\nimport { Result } from \"../../domain/core/Result\";\nimport { DataviewQueryEngine } from \"./DataviewQueryEngine\";\nimport { DatacoreQueryEngine } from \"./DatacoreQueryEngine\";\nimport { NativeQueryEngine } from \"./NativeQueryEngine\";\nimport { PlatformDetector } from \"../utils/PlatformDetector\";\nimport {\n  MobilePerformanceOptimizer,\n  MobilePerformanceOptimizerConfig,\n} from \"../optimizers/MobilePerformanceOptimizer\";\nimport { App } from \"obsidian\";\n\n/**\n * Query Engine Factory Implementation\n * Creates and manages query engine instances based on availability and preference\n */\nexport class QueryEngineFactory implements IQueryEngineFactory {\n  private dataviewApi: any = null;\n  private datacoreApi: any = null;\n  private cachedEngines: Map<QueryEngineType, IQueryEngine> = new Map();\n  private performanceOptimizer?: MobilePerformanceOptimizer;\n  private platformInfo = PlatformDetector.getPlatformInfo();\n\n  constructor(private app: App) {\n    this.detectAvailableEngines();\n    this.initializeMobileOptimizations();\n  }\n\n  public async createQueryEngine(\n    preferred?: QueryEngineType,\n  ): Promise<Result<IQueryEngine>> {\n    // If no preference specified, use auto-detection\n    if (!preferred) {\n      return this.createAutoDetectedEngine();\n    }\n\n    // Try to create the preferred engine\n    const preferredResult = await this.createSpecificEngine(preferred);\n    if (preferredResult.isSuccess) {\n      return preferredResult;\n    }\n\n    // Fallback to any available engine\n    console.warn(\n      `Preferred query engine '${preferred}' not available, falling back to auto-detection`,\n    );\n    return this.createAutoDetectedEngine();\n  }\n\n  public getAvailableEngines(): QueryEngineType[] {\n    const available: QueryEngineType[] = [];\n\n    if (this.isEngineAvailable(\"dataview\")) {\n      available.push(\"dataview\");\n    }\n\n    if (this.isEngineAvailable(\"datacore\")) {\n      available.push(\"datacore\");\n    }\n\n    // Native engine is always available\n    available.push(\"native\");\n\n    return available;\n  }\n\n  public isEngineAvailable(type: QueryEngineType): boolean {\n    switch (type) {\n      case \"dataview\":\n        return this.dataviewApi != null;\n      case \"datacore\":\n        return this.datacoreApi != null;\n      case \"native\":\n        return true; // Native engine is always available\n      default:\n        return false;\n    }\n  }\n\n  public updateApis(dataviewApi?: any, datacoreApi?: any): void {\n    this.dataviewApi = dataviewApi;\n    this.datacoreApi = datacoreApi;\n\n    // Clear cached engines when APIs change\n    this.cachedEngines.clear();\n\n    console.log(\"Query Engine Factory: APIs updated\", {\n      dataview: !!this.dataviewApi,\n      datacore: !!this.datacoreApi,\n    });\n  }\n\n  private async createAutoDetectedEngine(): Promise<Result<IQueryEngine>> {\n    const availableEngines = this.getAvailableEngines();\n\n    if (availableEngines.length === 0) {\n      return Result.fail<IQueryEngine>(\"No query engines available\");\n    }\n\n    // Mobile-first engine selection for iOS/mobile devices\n    let preferredOrder: QueryEngineType[];\n\n    if (this.platformInfo.isObsidianMobile || this.platformInfo.isMobile) {\n      // On mobile, prefer native engine for better performance and compatibility\n      preferredOrder = [\"native\", \"dataview\", \"datacore\"];\n      console.log(\"Mobile platform detected, preferring native query engine\");\n    } else {\n      // On desktop, prefer Dataview/Datacore for full feature support\n      preferredOrder = [\"dataview\", \"datacore\", \"native\"];\n    }\n\n    for (const engineType of preferredOrder) {\n      if (availableEngines.includes(engineType)) {\n        const result = await this.createSpecificEngine(engineType);\n        if (result.isSuccess) {\n          return result;\n        }\n      }\n    }\n\n    // Final fallback to native engine (always available)\n    return this.createSpecificEngine(\"native\");\n  }\n\n  private async createSpecificEngine(\n    type: QueryEngineType,\n  ): Promise<Result<IQueryEngine>> {\n    // Return cached instance if available\n    if (this.cachedEngines.has(type)) {\n      const cached = this.cachedEngines.get(type)!;\n      if (cached.isAvailable()) {\n        return Result.ok<IQueryEngine>(cached);\n      } else {\n        // Remove invalid cached engine\n        this.cachedEngines.delete(type);\n      }\n    }\n\n    let engine: IQueryEngine;\n\n    switch (type) {\n      case \"dataview\":\n        if (!this.dataviewApi) {\n          return Result.fail<IQueryEngine>(\"Dataview API not available\");\n        }\n        engine = new DataviewQueryEngine(this.dataviewApi);\n        break;\n\n      case \"datacore\":\n        if (!this.datacoreApi) {\n          return Result.fail<IQueryEngine>(\"Datacore API not available\");\n        }\n        engine = new DatacoreQueryEngine(this.datacoreApi);\n        break;\n\n      case \"native\":\n        engine = new NativeQueryEngine(this.app);\n        break;\n\n      default:\n        return Result.fail<IQueryEngine>(`Unknown query engine type: ${type}`);\n    }\n\n    // Verify the engine is actually available\n    if (!engine.isAvailable()) {\n      return Result.fail<IQueryEngine>(\n        `Query engine '${type}' is not available`,\n      );\n    }\n\n    // Cache the engine\n    this.cachedEngines.set(type, engine);\n\n    return Result.ok<IQueryEngine>(engine);\n  }\n\n  private detectAvailableEngines(): void {\n    // Try to detect and initialize available query engines\n    this.detectDataview();\n    this.detectDatacore();\n  }\n\n  private detectDataview(): void {\n    try {\n      // Check if Dataview plugin is loaded\n      const plugins = (this.app as any).plugins;\n      if (plugins && plugins.plugins && plugins.plugins.dataview) {\n        const dataviewPlugin = plugins.plugins.dataview;\n        if (dataviewPlugin && dataviewPlugin.api) {\n          this.dataviewApi = dataviewPlugin.api;\n          console.log(\"Query Engine Factory: Dataview API detected\");\n        }\n      }\n    } catch (error) {\n      console.warn(\"Query Engine Factory: Failed to detect Dataview\", error);\n    }\n  }\n\n  private detectDatacore(): void {\n    try {\n      // Check if Datacore plugin is loaded\n      const plugins = (this.app as any).plugins;\n      if (plugins && plugins.plugins && plugins.plugins.datacore) {\n        const datacorePlugin = plugins.plugins.datacore;\n        if (datacorePlugin && datacorePlugin.api) {\n          this.datacoreApi = datacorePlugin.api;\n          console.log(\"Query Engine Factory: Datacore API detected\");\n        }\n      }\n    } catch (error) {\n      console.warn(\"Query Engine Factory: Failed to detect Datacore\", error);\n    }\n  }\n\n  /**\n   * Refresh engine detection - useful when plugins are loaded dynamically\n   */\n  public refresh(): void {\n    this.detectAvailableEngines();\n  }\n\n  /**\n   * Clear all cached engines - forces recreation on next request\n   */\n  public clearCache(): void {\n    this.cachedEngines.clear();\n  }\n\n  /**\n   * Get diagnostic information about available engines\n   */\n  public getDiagnostics(): Record<string, any> {\n    return {\n      availableEngines: this.getAvailableEngines(),\n      dataviewAvailable: this.isEngineAvailable(\"dataview\"),\n      datacoreAvailable: this.isEngineAvailable(\"datacore\"),\n      nativeAvailable: this.isEngineAvailable(\"native\"),\n      cachedEngines: Array.from(this.cachedEngines.keys()),\n      dataviewApi: !!this.dataviewApi,\n      datacoreApi: !!this.datacoreApi,\n      platformInfo: this.platformInfo,\n      performanceOptimizer: !!this.performanceOptimizer,\n    };\n  }\n\n  /**\n   * Initialize mobile-specific optimizations\n   */\n  private initializeMobileOptimizations(): void {\n    if (PlatformDetector.shouldUseMobileOptimizations()) {\n      const config: MobilePerformanceOptimizerConfig = {\n        maxMemoryMB: PlatformDetector.hasLimitedMemory() ? 50 : 100,\n        maxCacheEntries: PlatformDetector.getRecommendedCacheSize(),\n        batchSize: PlatformDetector.getRecommendedBatchSize(),\n        debounceMs: this.platformInfo.isMobile ? 500 : 300,\n        enableGCHints: true,\n        enableLazyLoading: true,\n        virtualScrollThreshold: this.platformInfo.isMobile ? 50 : 100,\n      };\n      this.performanceOptimizer = new MobilePerformanceOptimizer(config);\n\n      console.log(\"Mobile optimizations enabled:\", {\n        platform: this.platformInfo.os,\n        isMobile: this.platformInfo.isMobile,\n        isObsidianMobile: this.platformInfo.isObsidianMobile,\n        batchSize: PlatformDetector.getRecommendedBatchSize(),\n        cacheSize: PlatformDetector.getRecommendedCacheSize(),\n      });\n    }\n  }\n\n  /**\n   * Get the performance optimizer (if mobile optimizations are enabled)\n   */\n  public getPerformanceOptimizer(): MobilePerformanceOptimizer | undefined {\n    return this.performanceOptimizer;\n  }\n\n  /**\n   * Force refresh platform detection and reinitialize optimizations\n   */\n  public refreshPlatformDetection(): void {\n    PlatformDetector.refresh();\n    this.platformInfo = PlatformDetector.getPlatformInfo();\n\n    // Reinitialize mobile optimizations if needed\n    if (\n      PlatformDetector.shouldUseMobileOptimizations() &&\n      !this.performanceOptimizer\n    ) {\n      this.initializeMobileOptimizations();\n    } else if (\n      !PlatformDetector.shouldUseMobileOptimizations() &&\n      this.performanceOptimizer\n    ) {\n      this.performanceOptimizer.destroy();\n      this.performanceOptimizer = undefined;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  public destroy(): void {\n    this.clearCache();\n    if (this.performanceOptimizer) {\n      this.performanceOptimizer.destroy();\n      this.performanceOptimizer = undefined;\n    }\n  }\n}\n"],"version":3}