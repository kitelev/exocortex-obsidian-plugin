9a6e39cef3eab403c4c8b996565558fc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryEngineFactory = void 0;
const Result_1 = require("../../domain/core/Result");
const DataviewQueryEngine_1 = require("./DataviewQueryEngine");
const DatacoreQueryEngine_1 = require("./DatacoreQueryEngine");
const NativeQueryEngine_1 = require("./NativeQueryEngine");
const PlatformDetector_1 = require("../utils/PlatformDetector");
const MobilePerformanceOptimizer_1 = require("../optimizers/MobilePerformanceOptimizer");
/**
 * Query Engine Factory Implementation
 * Creates and manages query engine instances based on availability and preference
 */
class QueryEngineFactory {
    constructor(app) {
        this.app = app;
        this.dataviewApi = null;
        this.datacoreApi = null;
        this.cachedEngines = new Map();
        this.platformInfo = PlatformDetector_1.PlatformDetector.getPlatformInfo();
        this.detectAvailableEngines();
        this.initializeMobileOptimizations();
    }
    async createQueryEngine(preferred) {
        // If no preference specified, use auto-detection
        if (!preferred) {
            return this.createAutoDetectedEngine();
        }
        // Try to create the preferred engine
        const preferredResult = await this.createSpecificEngine(preferred);
        if (preferredResult.isSuccess) {
            return preferredResult;
        }
        // Fallback to any available engine
        console.warn(`Preferred query engine '${preferred}' not available, falling back to auto-detection`);
        return this.createAutoDetectedEngine();
    }
    getAvailableEngines() {
        const available = [];
        if (this.isEngineAvailable("dataview")) {
            available.push("dataview");
        }
        if (this.isEngineAvailable("datacore")) {
            available.push("datacore");
        }
        // Native engine is always available
        available.push("native");
        return available;
    }
    isEngineAvailable(type) {
        switch (type) {
            case "dataview":
                return this.dataviewApi != null;
            case "datacore":
                return this.datacoreApi != null;
            case "native":
                return true; // Native engine is always available
            default:
                return false;
        }
    }
    updateApis(dataviewApi, datacoreApi) {
        this.dataviewApi = dataviewApi;
        this.datacoreApi = datacoreApi;
        // Clear cached engines when APIs change
        this.cachedEngines.clear();
        console.log("Query Engine Factory: APIs updated", {
            dataview: !!this.dataviewApi,
            datacore: !!this.datacoreApi,
        });
    }
    async createAutoDetectedEngine() {
        const availableEngines = this.getAvailableEngines();
        if (availableEngines.length === 0) {
            return Result_1.Result.fail("No query engines available");
        }
        // Mobile-first engine selection for iOS/mobile devices
        let preferredOrder;
        if (this.platformInfo.isObsidianMobile || this.platformInfo.isMobile) {
            // On mobile, prefer native engine for better performance and compatibility
            preferredOrder = ["native", "dataview", "datacore"];
            console.log("Mobile platform detected, preferring native query engine");
        }
        else {
            // On desktop, prefer Dataview/Datacore for full feature support
            preferredOrder = ["dataview", "datacore", "native"];
        }
        for (const engineType of preferredOrder) {
            if (availableEngines.includes(engineType)) {
                const result = await this.createSpecificEngine(engineType);
                if (result.isSuccess) {
                    return result;
                }
            }
        }
        // Final fallback to native engine (always available)
        return this.createSpecificEngine("native");
    }
    async createSpecificEngine(type) {
        // Return cached instance if available
        if (this.cachedEngines.has(type)) {
            const cached = this.cachedEngines.get(type);
            if (cached.isAvailable()) {
                return Result_1.Result.ok(cached);
            }
            else {
                // Remove invalid cached engine
                this.cachedEngines.delete(type);
            }
        }
        let engine;
        switch (type) {
            case "dataview":
                if (!this.dataviewApi) {
                    return Result_1.Result.fail("Dataview API not available");
                }
                engine = new DataviewQueryEngine_1.DataviewQueryEngine(this.dataviewApi);
                break;
            case "datacore":
                if (!this.datacoreApi) {
                    return Result_1.Result.fail("Datacore API not available");
                }
                engine = new DatacoreQueryEngine_1.DatacoreQueryEngine(this.datacoreApi);
                break;
            case "native":
                engine = new NativeQueryEngine_1.NativeQueryEngine(this.app);
                break;
            default:
                return Result_1.Result.fail(`Unknown query engine type: ${type}`);
        }
        // Verify the engine is actually available
        if (!engine.isAvailable()) {
            return Result_1.Result.fail(`Query engine '${type}' is not available`);
        }
        // Cache the engine
        this.cachedEngines.set(type, engine);
        return Result_1.Result.ok(engine);
    }
    detectAvailableEngines() {
        // Try to detect and initialize available query engines
        this.detectDataview();
        this.detectDatacore();
    }
    detectDataview() {
        try {
            // Check if Dataview plugin is loaded
            const plugins = this.app.plugins;
            if (plugins && plugins.plugins && plugins.plugins.dataview) {
                const dataviewPlugin = plugins.plugins.dataview;
                if (dataviewPlugin && dataviewPlugin.api) {
                    this.dataviewApi = dataviewPlugin.api;
                    console.log("Query Engine Factory: Dataview API detected");
                }
            }
        }
        catch (error) {
            console.warn("Query Engine Factory: Failed to detect Dataview", error);
        }
    }
    detectDatacore() {
        try {
            // Check if Datacore plugin is loaded
            const plugins = this.app.plugins;
            if (plugins && plugins.plugins && plugins.plugins.datacore) {
                const datacorePlugin = plugins.plugins.datacore;
                if (datacorePlugin && datacorePlugin.api) {
                    this.datacoreApi = datacorePlugin.api;
                    console.log("Query Engine Factory: Datacore API detected");
                }
            }
        }
        catch (error) {
            console.warn("Query Engine Factory: Failed to detect Datacore", error);
        }
    }
    /**
     * Refresh engine detection - useful when plugins are loaded dynamically
     */
    refresh() {
        this.detectAvailableEngines();
    }
    /**
     * Clear all cached engines - forces recreation on next request
     */
    clearCache() {
        this.cachedEngines.clear();
    }
    /**
     * Get diagnostic information about available engines
     */
    getDiagnostics() {
        return {
            availableEngines: this.getAvailableEngines(),
            dataviewAvailable: this.isEngineAvailable("dataview"),
            datacoreAvailable: this.isEngineAvailable("datacore"),
            nativeAvailable: this.isEngineAvailable("native"),
            cachedEngines: Array.from(this.cachedEngines.keys()),
            dataviewApi: !!this.dataviewApi,
            datacoreApi: !!this.datacoreApi,
            platformInfo: this.platformInfo,
            performanceOptimizer: !!this.performanceOptimizer,
        };
    }
    /**
     * Initialize mobile-specific optimizations
     */
    initializeMobileOptimizations() {
        if (PlatformDetector_1.PlatformDetector.shouldUseMobileOptimizations()) {
            const config = {
                maxMemoryMB: PlatformDetector_1.PlatformDetector.hasLimitedMemory() ? 50 : 100,
                maxCacheEntries: PlatformDetector_1.PlatformDetector.getRecommendedCacheSize(),
                batchSize: PlatformDetector_1.PlatformDetector.getRecommendedBatchSize(),
                debounceMs: this.platformInfo.isMobile ? 500 : 300,
                enableGCHints: true,
                enableLazyLoading: true,
                virtualScrollThreshold: this.platformInfo.isMobile ? 50 : 100,
            };
            this.performanceOptimizer = new MobilePerformanceOptimizer_1.MobilePerformanceOptimizer(config);
            console.log("Mobile optimizations enabled:", {
                platform: this.platformInfo.os,
                isMobile: this.platformInfo.isMobile,
                isObsidianMobile: this.platformInfo.isObsidianMobile,
                batchSize: PlatformDetector_1.PlatformDetector.getRecommendedBatchSize(),
                cacheSize: PlatformDetector_1.PlatformDetector.getRecommendedCacheSize(),
            });
        }
    }
    /**
     * Get the performance optimizer (if mobile optimizations are enabled)
     */
    getPerformanceOptimizer() {
        return this.performanceOptimizer;
    }
    /**
     * Force refresh platform detection and reinitialize optimizations
     */
    refreshPlatformDetection() {
        PlatformDetector_1.PlatformDetector.refresh();
        this.platformInfo = PlatformDetector_1.PlatformDetector.getPlatformInfo();
        // Reinitialize mobile optimizations if needed
        if (PlatformDetector_1.PlatformDetector.shouldUseMobileOptimizations() &&
            !this.performanceOptimizer) {
            this.initializeMobileOptimizations();
        }
        else if (!PlatformDetector_1.PlatformDetector.shouldUseMobileOptimizations() &&
            this.performanceOptimizer) {
            this.performanceOptimizer.destroy();
            this.performanceOptimizer = undefined;
        }
    }
    /**
     * Clean up resources
     */
    destroy() {
        this.clearCache();
        if (this.performanceOptimizer) {
            this.performanceOptimizer.destroy();
            this.performanceOptimizer = undefined;
        }
    }
}
exports.QueryEngineFactory = QueryEngineFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,