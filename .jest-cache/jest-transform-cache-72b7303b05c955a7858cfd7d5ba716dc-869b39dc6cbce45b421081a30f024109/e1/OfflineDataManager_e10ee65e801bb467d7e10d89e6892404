59ed7d48f12f21e3c46f5c4eb6d3e6f5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfflineDataManager = void 0;
const Result_1 = require("../../domain/core/Result");
const PlatformDetector_1 = require("../utils/PlatformDetector");
/**
 * IndexedDB Storage Implementation
 */
class IndexedDBStorage {
    constructor() {
        this.dbName = "ExocortexOfflineDB";
        this.version = 1;
        this.storeName = "offlineData";
    }
    async getDB() {
        if (this.db)
            return this.db;
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(this.dbName, this.version);
            request.onerror = () => reject(request.error);
            request.onsuccess = () => {
                this.db = request.result;
                resolve(this.db);
            };
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains(this.storeName)) {
                    const store = db.createObjectStore(this.storeName, { keyPath: "id" });
                    store.createIndex("timestamp", "timestamp");
                    store.createIndex("syncStatus", "syncStatus");
                }
            };
        });
    }
    async get(key) {
        const db = await this.getDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction([this.storeName], "readonly");
            const store = transaction.objectStore(this.storeName);
            const request = store.get(key);
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result || null);
        });
    }
    async set(key, entry) {
        const db = await this.getDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction([this.storeName], "readwrite");
            const store = transaction.objectStore(this.storeName);
            const request = store.put({ ...entry, id: key });
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve();
        });
    }
    async delete(key) {
        const db = await this.getDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction([this.storeName], "readwrite");
            const store = transaction.objectStore(this.storeName);
            const request = store.delete(key);
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve();
        });
    }
    async clear() {
        const db = await this.getDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction([this.storeName], "readwrite");
            const store = transaction.objectStore(this.storeName);
            const request = store.clear();
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve();
        });
    }
    async keys() {
        const db = await this.getDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction([this.storeName], "readonly");
            const store = transaction.objectStore(this.storeName);
            const request = store.getAllKeys();
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
        });
    }
    async size() {
        const db = await this.getDB();
        return new Promise((resolve, reject) => {
            const transaction = db.transaction([this.storeName], "readonly");
            const store = transaction.objectStore(this.storeName);
            const request = store.count();
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
        });
    }
}
/**
 * LocalStorage Implementation (fallback)
 */
class LocalStorageStorage {
    constructor() {
        this.prefix = "exocortex_offline_";
    }
    async get(key) {
        try {
            const stored = localStorage.getItem(this.prefix + key);
            return stored ? JSON.parse(stored) : null;
        }
        catch {
            return null;
        }
    }
    async set(key, entry) {
        try {
            localStorage.setItem(this.prefix + key, JSON.stringify(entry));
        }
        catch (error) {
            throw new Error(`LocalStorage quota exceeded: ${error}`);
        }
    }
    async delete(key) {
        localStorage.removeItem(this.prefix + key);
    }
    async clear() {
        const keys = Object.keys(localStorage).filter((k) => k.startsWith(this.prefix));
        keys.forEach((key) => localStorage.removeItem(key));
    }
    async keys() {
        return Object.keys(localStorage)
            .filter((k) => k.startsWith(this.prefix))
            .map((k) => k.substring(this.prefix.length));
    }
    async size() {
        return (await this.keys()).length;
    }
}
/**
 * Memory Storage Implementation (for testing)
 */
class MemoryStorage {
    constructor() {
        this.data = new Map();
    }
    async get(key) {
        return this.data.get(key) || null;
    }
    async set(key, entry) {
        this.data.set(key, entry);
    }
    async delete(key) {
        this.data.delete(key);
    }
    async clear() {
        this.data.clear();
    }
    async keys() {
        return Array.from(this.data.keys());
    }
    async size() {
        return this.data.size;
    }
}
/**
 * Offline Data Manager
 * Provides offline-first data storage with automatic synchronization
 */
class OfflineDataManager {
    constructor(config) {
        this.syncQueue = [];
        this.isOnline = navigator.onLine;
        this.listeners = new Map();
        this.config = {
            strategy: this.detectBestStrategy(),
            maxStorageMB: PlatformDetector_1.PlatformDetector.isMobile() ? 50 : 200,
            maxAge: 7 * 24 * 60 * 60 * 1000,
            autoSync: true,
            syncIntervalMs: 30000,
            enableConflictResolution: true,
            enableCompression: false,
            ...config,
        };
        this.storage = this.createStorage(this.config.strategy);
        this.setupNetworkListeners();
        this.setupAutoSync();
    }
    /**
     * Store data offline
     */
    async store(collection, id, data, metadata) {
        try {
            const now = Date.now();
            const key = `${collection}:${id}`;
            // Check if entry exists to determine version
            const existing = await this.storage.get(key);
            const version = existing ? existing.version + 1 : 1;
            const entry = {
                id: key,
                data,
                timestamp: now,
                version,
                syncStatus: "pending",
                checksum: this.calculateChecksum(data),
                metadata,
            };
            await this.storage.set(key, entry);
            // Add to sync queue if auto-sync is enabled
            if (this.config.autoSync) {
                this.addToSyncQueue({
                    id: key,
                    type: existing ? "update" : "create",
                    collection,
                    data,
                    timestamp: now,
                    retryCount: 0,
                    maxRetries: 3,
                });
            }
            // Notify listeners
            this.notifyListeners(collection, data);
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to store offline data: ${error}`);
        }
    }
    /**
     * Retrieve data from offline storage
     */
    async retrieve(collection, id) {
        try {
            const key = `${collection}:${id}`;
            const entry = await this.storage.get(key);
            if (!entry) {
                return Result_1.Result.ok(null);
            }
            // Check if data is too old
            if (Date.now() - entry.timestamp > this.config.maxAge) {
                await this.storage.delete(key);
                return Result_1.Result.ok(null);
            }
            return Result_1.Result.ok(entry.data);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to retrieve offline data: ${error}`);
        }
    }
    /**
     * List all items in a collection
     */
    async list(collection) {
        try {
            const keys = await this.storage.keys();
            const collectionKeys = keys.filter((k) => k.startsWith(`${collection}:`));
            const items = [];
            for (const key of collectionKeys) {
                const entry = await this.storage.get(key);
                if (entry && Date.now() - entry.timestamp <= this.config.maxAge) {
                    items.push(entry.data);
                }
            }
            return Result_1.Result.ok(items);
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to list offline data: ${error}`);
        }
    }
    /**
     * Delete data from offline storage
     */
    async delete(collection, id) {
        try {
            const key = `${collection}:${id}`;
            await this.storage.delete(key);
            // Add delete operation to sync queue
            if (this.config.autoSync) {
                this.addToSyncQueue({
                    id: key,
                    type: "delete",
                    collection,
                    data: null,
                    timestamp: Date.now(),
                    retryCount: 0,
                    maxRetries: 3,
                });
            }
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to delete offline data: ${error}`);
        }
    }
    /**
     * Force synchronization with server
     */
    async sync() {
        if (!this.isOnline) {
            return Result_1.Result.fail("Cannot sync while offline");
        }
        try {
            const operations = [...this.syncQueue];
            const results = [];
            for (const operation of operations) {
                try {
                    // Here you would implement actual sync with your backend
                    // For now, we'll simulate successful sync
                    await this.simulateServerSync(operation);
                    // Mark as synced
                    if (operation.type !== "delete") {
                        const entry = await this.storage.get(operation.id);
                        if (entry) {
                            entry.syncStatus = "synced";
                            entry.lastSyncAttempt = Date.now();
                            await this.storage.set(operation.id, entry);
                        }
                    }
                    // Remove from sync queue
                    this.removeSyncOperation(operation.id);
                    results.push({ success: true, operation });
                }
                catch (error) {
                    operation.retryCount++;
                    if (operation.retryCount >= operation.maxRetries) {
                        // Mark as error and remove from queue
                        const entry = await this.storage.get(operation.id);
                        if (entry) {
                            entry.syncStatus = "error";
                            entry.lastSyncAttempt = Date.now();
                            await this.storage.set(operation.id, entry);
                        }
                        this.removeSyncOperation(operation.id);
                    }
                    results.push({ success: false, operation, error: String(error) });
                }
            }
            console.log("Sync completed:", results);
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Sync failed: ${error}`);
        }
    }
    /**
     * Get sync status for debugging
     */
    async getSyncStatus() {
        const totalItems = await this.storage.size();
        return {
            pendingOperations: this.syncQueue.length,
            totalItems,
            lastSync: null,
            isOnline: this.isOnline,
        };
    }
    /**
     * Clear all offline data
     */
    async clearAll() {
        try {
            await this.storage.clear();
            this.syncQueue.length = 0;
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Failed to clear offline data: ${error}`);
        }
    }
    /**
     * Subscribe to data changes in a collection
     */
    subscribe(collection, listener) {
        if (!this.listeners.has(collection)) {
            this.listeners.set(collection, new Set());
        }
        this.listeners.get(collection).add(listener);
        // Return unsubscribe function
        return () => {
            const collectionListeners = this.listeners.get(collection);
            if (collectionListeners) {
                collectionListeners.delete(listener);
                if (collectionListeners.size === 0) {
                    this.listeners.delete(collection);
                }
            }
        };
    }
    /**
     * Get storage usage statistics
     */
    async getStorageStats() {
        const keys = await this.storage.keys();
        let usedBytes = 0;
        let oldestTimestamp = null;
        let newestTimestamp = null;
        for (const key of keys) {
            const entry = await this.storage.get(key);
            if (entry) {
                usedBytes += this.estimateSize(entry);
                if (!oldestTimestamp || entry.timestamp < oldestTimestamp) {
                    oldestTimestamp = entry.timestamp;
                }
                if (!newestTimestamp || entry.timestamp > newestTimestamp) {
                    newestTimestamp = entry.timestamp;
                }
            }
        }
        return {
            usedBytes,
            totalItems: keys.length,
            oldestItem: oldestTimestamp,
            newestItem: newestTimestamp,
        };
    }
    detectBestStrategy() {
        // Check IndexedDB support
        if (typeof indexedDB !== "undefined") {
            return "indexeddb";
        }
        // Fallback to localStorage
        if (typeof localStorage !== "undefined") {
            return "localstorage";
        }
        // Final fallback to memory
        return "memory";
    }
    createStorage(strategy) {
        switch (strategy) {
            case "indexeddb":
                return new IndexedDBStorage();
            case "localstorage":
                return new LocalStorageStorage();
            case "memory":
                return new MemoryStorage();
            default:
                throw new Error(`Unknown storage strategy: ${strategy}`);
        }
    }
    setupNetworkListeners() {
        window.addEventListener("online", () => {
            this.isOnline = true;
            console.log("Back online - triggering sync");
            if (this.config.autoSync) {
                this.sync();
            }
        });
        window.addEventListener("offline", () => {
            this.isOnline = false;
            console.log("Gone offline - entering offline mode");
        });
    }
    setupAutoSync() {
        if (this.config.autoSync) {
            this.syncInterval = setInterval(() => {
                if (this.isOnline && this.syncQueue.length > 0) {
                    this.sync();
                }
            }, this.config.syncIntervalMs);
        }
    }
    addToSyncQueue(operation) {
        // Remove any existing operation for the same item
        this.removeSyncOperation(operation.id);
        this.syncQueue.push(operation);
    }
    removeSyncOperation(id) {
        const index = this.syncQueue.findIndex((op) => op.id === id);
        if (index !== -1) {
            this.syncQueue.splice(index, 1);
        }
    }
    async simulateServerSync(operation) {
        // Simulate network delay
        await new Promise((resolve) => setTimeout(resolve, 100 + Math.random() * 200));
        // Simulate occasional failures for testing
        if (Math.random() < 0.1) {
            throw new Error("Simulated server error");
        }
        console.log(`Simulated sync: ${operation.type} ${operation.id}`);
    }
    calculateChecksum(data) {
        // Simple checksum implementation
        const str = JSON.stringify(data);
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = (hash << 5) - hash + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash.toString(36);
    }
    estimateSize(entry) {
        return new Blob([JSON.stringify(entry)]).size;
    }
    notifyListeners(collection, data) {
        const collectionListeners = this.listeners.get(collection);
        if (collectionListeners) {
            collectionListeners.forEach((listener) => {
                try {
                    listener(data);
                }
                catch (error) {
                    console.warn("Error in offline data listener:", error);
                }
            });
        }
    }
    /**
     * Cleanup resources
     */
    destroy() {
        if (this.syncInterval) {
            clearInterval(this.syncInterval);
        }
        window.removeEventListener("online", this.setupNetworkListeners);
        window.removeEventListener("offline", this.setupNetworkListeners);
        this.listeners.clear();
    }
}
exports.OfflineDataManager = OfflineDataManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,