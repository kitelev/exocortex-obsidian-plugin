805867a6d71a0def6cabd4c012b2c65a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractFileRepository = void 0;
const obsidian_1 = require("obsidian");
const FileOperationUtils_1 = require("./utils/FileOperationUtils");
const ErrorHandlingUtils_1 = require("./utils/ErrorHandlingUtils");
/**
 * Abstract base class for file-based repositories
 * Implements DRY principle for common file operations across repositories
 */
class AbstractFileRepository {
    constructor(app) {
        this.app = app;
    }
    /**
     * Find file using multiple fallback strategies
     */
    findFileWithFallback(criteria) {
        return FileOperationUtils_1.FileOperationUtils.findFileWithFallback(this.app, criteria);
    }
    /**
     * Get all files filtered by frontmatter property
     */
    getFilesWithProperty(propertyKey, propertyValue) {
        return FileOperationUtils_1.FileOperationUtils.getFilesWithProperty(this.app, propertyKey, propertyValue);
    }
    /**
     * Update file frontmatter while preserving body content
     */
    async updateFileFrontmatter(file, frontmatter) {
        try {
            await FileOperationUtils_1.FileOperationUtils.updateFileWithFrontmatter(this.app, file, frontmatter);
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError("Update file frontmatter", error, { filePath: file.path, frontmatter });
            throw error;
        }
    }
    /**
     * Create new file with frontmatter
     */
    async createFileWithFrontmatter(filename, frontmatter) {
        try {
            await FileOperationUtils_1.FileOperationUtils.createFileWithFrontmatter(this.app, filename, frontmatter);
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError("Create file with frontmatter", error, { filename, frontmatter });
            throw error;
        }
    }
    /**
     * Update frontmatter by file path
     */
    async updateFrontmatterByPath(filePath, updates) {
        try {
            const file = this.app.vault.getAbstractFileByPath(filePath);
            if (!(file instanceof obsidian_1.TFile)) {
                throw ErrorHandlingUtils_1.ErrorHandlingUtils.createError("FILE_NOT_FOUND", `File not found: ${filePath}`);
            }
            const content = await this.app.vault.read(file);
            const cache = this.app.metadataCache.getFileCache(file);
            const currentFrontmatter = cache?.frontmatter || {};
            // Merge updates with current frontmatter
            const newFrontmatter = FileOperationUtils_1.FileOperationUtils.mergeFrontmatter(currentFrontmatter, updates);
            await this.updateFileFrontmatter(file, newFrontmatter);
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError("Update frontmatter by path", error, { filePath, updates });
            throw error;
        }
    }
    /**
     * Extract entity from frontmatter with error handling
     */
    extractEntityFromFrontmatter(file, extractorFn, entityType) {
        try {
            const cache = this.app.metadataCache.getFileCache(file);
            if (!cache?.frontmatter) {
                return null;
            }
            return extractorFn(cache.frontmatter, file.basename);
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError(`Extract ${entityType} from frontmatter`, error, { filePath: file.path });
            return null;
        }
    }
    /**
     * Save entity with consistent error handling
     */
    async saveEntityWithFrontmatter(entity, getTitle, toFrontmatter, findExistingFile, entityType) {
        try {
            const frontmatter = toFrontmatter(entity);
            const existingFile = findExistingFile(entity);
            if (existingFile) {
                await this.updateFileFrontmatter(existingFile, frontmatter);
            }
            else {
                const fileName = `${getTitle(entity)}.md`;
                await this.createFileWithFrontmatter(fileName, frontmatter);
            }
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError(`Save ${entityType}`, error, {
                entity,
            });
            throw error;
        }
    }
    /**
     * Delete file by entity with consistent error handling
     */
    async deleteFileByEntity(entity, getTitle, entityType) {
        try {
            const fileName = `${getTitle(entity)}.md`;
            const file = this.app.vault.getAbstractFileByPath(fileName);
            if (file) {
                await this.app.vault.delete(file);
            }
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError(`Delete ${entityType}`, error, {
                entity,
            });
            throw error;
        }
    }
    /**
     * Check if entity exists with consistent error handling
     */
    async entityExists(entity, findEntity, entityType) {
        try {
            const found = await findEntity(entity);
            return found !== null;
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError(`Check ${entityType} existence`, error, { entity });
            return false;
        }
    }
    /**
     * Find all entities of a type with consistent error handling
     */
    async findAllEntities(propertyKey, extractorFn, entityType, additionalFilter) {
        try {
            const files = this.getFilesWithProperty(propertyKey);
            const entities = [];
            for (const file of files) {
                if (additionalFilter && !additionalFilter(file)) {
                    continue;
                }
                const entity = this.extractEntityFromFrontmatter(file, extractorFn, entityType);
                if (entity) {
                    entities.push(entity);
                }
            }
            return entities;
        }
        catch (error) {
            ErrorHandlingUtils_1.ErrorHandlingUtils.handleRepositoryError(`Find all ${entityType}s`, error, { propertyKey });
            return [];
        }
    }
    /**
     * Check if reference value matches target asset
     */
    isReferencingAsset(referenceValue, assetName) {
        return FileOperationUtils_1.FileOperationUtils.isReferencingAsset(referenceValue, assetName);
    }
}
exports.AbstractFileRepository = AbstractFileRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,