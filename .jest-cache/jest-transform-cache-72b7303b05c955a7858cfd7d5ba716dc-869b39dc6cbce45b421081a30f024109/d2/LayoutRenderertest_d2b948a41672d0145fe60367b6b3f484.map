{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/renderers/LayoutRenderer.test.ts","mappings":";;AAAA,0FAAuF;AACvF,0DAAyD;AACzD,6EAA0E;AAC1E,+DAA4D;AAE5D,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;IAC9B,IAAI,QAAwB,CAAC;IAC7B,IAAI,SAAgB,CAAC;IACrB,IAAI,OAAY,CAAC;IAEjB,UAAU,CAAC,GAAG,EAAE;QACd,SAAS,GAAG,IAAI,gBAAK,EAAE,CAAC;QACxB,OAAO,GAAG,IAAI,cAAG,EAAE,CAAC;QACpB,MAAM,oBAAoB,GAAG;YAC3B,eAAe,EAAE,IAAI;iBAClB,EAAE,EAAE;iBACJ,iBAAiB,CAAC,eAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpD,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,eAAM,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;YACvD,OAAO,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,iBAAiB,CAAC,eAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SACpD,CAAC;QACF,MAAM,oBAAoB,GAAG;YAC3B,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;SACjC,CAAC;QACF,QAAQ,GAAG,IAAI,+BAAc,CAC3B,OAAc,EACd,oBAA2B,EAC3B,oBAA2B,CAC5B,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAEhD,QAAQ,CAAC,YAAY,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAEvC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN;4BACE,EAAE,EAAE,QAAQ;4BACZ,IAAI,EAAE,YAAY;4BAClB,KAAK,EAAE,YAAY;4BACnB,MAAM,EAAE,EAAE;yBACX;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACrD,MAAM,CACJ,SAAS,CAAC,aAAa,CAAC,0BAA0B,CAAC,CACpD,CAAC,UAAU,EAAE,CAAC;aAChB;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN;4BACE,EAAE,EAAE,OAAO;4BACX,IAAI,EAAE,YAAY;4BAClB,KAAK,EAAE,YAAY;4BACnB,MAAM,EAAE,EAAE;yBACX;wBACD;4BACE,EAAE,EAAE,WAAW;4BACf,IAAI,EAAE,WAAW;4BACjB,KAAK,EAAE,WAAW;4BAClB,MAAM,EAAE,EAAE;yBACX;wBACD;4BACE,EAAE,EAAE,OAAO;4BACX,IAAI,EAAE,OAAO;4BACb,KAAK,EAAE,OAAO;4BACd,MAAM,EAAE,EAAE,KAAK,EAAE,6BAA6B,EAAE;yBACjD;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;gBACxE,MAAM,CACJ,SAAS,CAAC,aAAa,CAAC,6BAA6B,CAAC,CACvD,CAAC,UAAU,EAAE,CAAC;gBACf,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;aACzE;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN;4BACE,EAAE,EAAE,eAAe;4BACnB,IAAI,EAAE,kBAAyB;4BAC/B,KAAK,EAAE,SAAS;4BAChB,MAAM,EAAE,EAAE;yBACX;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,MAAM,CAAC,GAAG,EAAE;oBACV,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;gBAEjB,sEAAsE;gBACtE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;aACtD;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,QAAQ,EAAE,qBAAqB;oBAC/B,MAAM,EAAE,EAAE;iBACX;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxE;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kCAAkC,EAAE,GAAG,EAAE;YAC1C,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE,EAAE;iBACX;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aAC3C;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;YACxC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN;4BACE,EAAE,EAAE,OAAO;4BACX,IAAI,EAAE,YAAY;4BAClB,KAAK,EAAE,iBAAiB;4BACxB,MAAM,EAAE;gCACN,UAAU,EAAE,CAAC,MAAM,EAAE,aAAa,EAAE,MAAM,CAAC;6BAC5C;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,YAAY,GAAG,SAAS,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;gBACxE,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;gBAClC,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC;aAChE;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;YACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN;4BACE,EAAE,EAAE,WAAW;4BACf,IAAI,EAAE,WAAW;4BACjB,KAAK,EAAE,eAAe;4BACtB,MAAM,EAAE,EAAE;yBACX;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,YAAY,GAAG,SAAS,CAAC,aAAa,CAC1C,6BAA6B,CAC9B,CAAC;gBACF,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;gBAClC,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;aAC9D;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE;oBACN,MAAM,EAAE;wBACN;4BACE,EAAE,EAAE,OAAO;4BACX,IAAI,EAAE,OAAO;4BACb,KAAK,EAAE,gBAAgB;4BACvB,MAAM,EAAE;gCACN,KAAK,EAAE,6CAA6C;6BACrD;yBACF;qBACF;iBACF;aACF,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAE/C,MAAM,YAAY,GAAG,SAAS,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;gBACxE,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;gBAClC,MAAM,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;aAC/D;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAC3C,MAAM,MAAM,GAAG,yBAAW,CAAC,MAAM,CAAC;gBAChC,EAAE,EAAE,aAAa;gBACjB,SAAS,EAAE,WAAW;gBACtB,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE;aACvB,CAAC,CAAC;YAEH,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,MAAM,CAAC,GAAG,EAAE;oBACV,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,SAAgB,CAAC,CAAC;gBACxD,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAEhD,MAAM,CAAC,GAAG,EAAE;gBACV,QAAQ,CAAC,YAAY,CAAC,EAAS,EAAE,SAAS,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/tests/unit/presentation/renderers/LayoutRenderer.test.ts"],"sourcesContent":["import { LayoutRenderer } from \"../../../../src/presentation/renderers/LayoutRenderer\";\nimport { Vault, App } from \"../../../__mocks__/obsidian\";\nimport { ClassLayout } from \"../../../../src/domain/entities/ClassLayout\";\nimport { Result } from \"../../../../src/domain/core/Result\";\n\ndescribe(\"LayoutRenderer\", () => {\n  let renderer: LayoutRenderer;\n  let mockVault: Vault;\n  let mockApp: App;\n\n  beforeEach(() => {\n    mockVault = new Vault();\n    mockApp = new App();\n    const mockLayoutRepository = {\n      findByClassName: jest\n        .fn()\n        .mockResolvedValue(Result.fail(\"No layout found\")),\n      save: jest.fn().mockResolvedValue(Result.ok(undefined)),\n      findAll: jest.fn().mockResolvedValue(Result.ok([])),\n    };\n    const mockPropertyRenderer = {\n      renderPropertiesBlock: jest.fn(),\n    };\n    renderer = new LayoutRenderer(\n      mockApp as any,\n      mockLayoutRepository as any,\n      mockPropertyRenderer as any,\n    );\n  });\n\n  describe(\"renderLayout\", () => {\n    it(\"should render empty layout for null input\", () => {\n      const container = document.createElement(\"div\");\n\n      renderer.renderLayout(null, container);\n\n      expect(container.children.length).toBe(0);\n    });\n\n    it(\"should render basic layout structure\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [\n            {\n              id: \"block1\",\n              type: \"properties\",\n              title: \"Properties\",\n              config: {},\n            },\n          ],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        expect(container.children.length).toBeGreaterThan(0);\n        expect(\n          container.querySelector('[data-block-id=\"block1\"]'),\n        ).toBeTruthy();\n      }\n    });\n\n    it(\"should handle blocks with different types\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [\n            {\n              id: \"props\",\n              type: \"properties\",\n              title: \"Properties\",\n              config: {},\n            },\n            {\n              id: \"backlinks\",\n              type: \"backlinks\",\n              title: \"Backlinks\",\n              config: {},\n            },\n            {\n              id: \"query\",\n              type: \"query\",\n              title: \"Query\",\n              config: { query: \"SELECT * WHERE { ?s ?p ?o }\" },\n            },\n          ],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        expect(container.querySelector('[data-block-id=\"props\"]')).toBeTruthy();\n        expect(\n          container.querySelector('[data-block-id=\"backlinks\"]'),\n        ).toBeTruthy();\n        expect(container.querySelector('[data-block-id=\"query\"]')).toBeTruthy();\n      }\n    });\n\n    it(\"should handle block rendering errors gracefully\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [\n            {\n              id: \"invalid-block\",\n              type: \"nonexistent-type\" as any,\n              title: \"Invalid\",\n              config: {},\n            },\n          ],\n        },\n      });\n\n      if (layout.isSuccess) {\n        expect(() => {\n          renderer.renderLayout(layout.value, container);\n        }).not.toThrow();\n\n        // Should still create container for the block even if rendering fails\n        expect(container.children.length).toBeGreaterThan(0);\n      }\n    });\n\n    it(\"should apply custom CSS classes\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          cssClass: \"custom-layout-class\",\n          blocks: [],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        expect(container.classList.contains(\"custom-layout-class\")).toBe(true);\n      }\n    });\n\n    it(\"should handle empty blocks array\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        expect(container.children.length).toBe(0);\n      }\n    });\n  });\n\n  describe(\"block rendering\", () => {\n    it(\"should render properties block\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [\n            {\n              id: \"props\",\n              type: \"properties\",\n              title: \"Test Properties\",\n              config: {\n                properties: [\"name\", \"description\", \"type\"],\n              },\n            },\n          ],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        const blockElement = container.querySelector('[data-block-id=\"props\"]');\n        expect(blockElement).toBeTruthy();\n        expect(blockElement?.textContent).toContain(\"Test Properties\");\n      }\n    });\n\n    it(\"should render backlinks block\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [\n            {\n              id: \"backlinks\",\n              type: \"backlinks\",\n              title: \"Related Notes\",\n              config: {},\n            },\n          ],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        const blockElement = container.querySelector(\n          '[data-block-id=\"backlinks\"]',\n        );\n        expect(blockElement).toBeTruthy();\n        expect(blockElement?.textContent).toContain(\"Related Notes\");\n      }\n    });\n\n    it(\"should render query block with SPARQL\", () => {\n      const container = document.createElement(\"div\");\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: {\n          blocks: [\n            {\n              id: \"query\",\n              type: \"query\",\n              title: \"SPARQL Results\",\n              config: {\n                query: \"SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10\",\n              },\n            },\n          ],\n        },\n      });\n\n      if (layout.isSuccess) {\n        renderer.renderLayout(layout.value, container);\n\n        const blockElement = container.querySelector('[data-block-id=\"query\"]');\n        expect(blockElement).toBeTruthy();\n        expect(blockElement?.textContent).toContain(\"SPARQL Results\");\n      }\n    });\n  });\n\n  describe(\"error handling\", () => {\n    it(\"should handle undefined container\", () => {\n      const layout = ClassLayout.create({\n        id: \"test-layout\",\n        className: \"TestClass\",\n        config: { blocks: [] },\n      });\n\n      if (layout.isSuccess) {\n        expect(() => {\n          renderer.renderLayout(layout.value, undefined as any);\n        }).not.toThrow();\n      }\n    });\n\n    it(\"should handle malformed layout config\", () => {\n      const container = document.createElement(\"div\");\n\n      expect(() => {\n        renderer.renderLayout({} as any, container);\n      }).not.toThrow();\n    });\n  });\n});\n"],"version":3}