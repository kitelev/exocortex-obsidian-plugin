{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/DynamicBacklinksBlockRenderer.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/DynamicBacklinksBlockRenderer.ts"],"sourcesContent":["import { App, TFile } from \"obsidian\";\nimport { DynamicBacklinksBlockConfig } from \"../../domain/entities/LayoutBlock\";\nimport {\n  DynamicBacklinksService,\n  PropertyBasedBacklink,\n} from \"../../application/services/DynamicBacklinksService\";\nimport { ObsidianVaultAdapter } from \"../../infrastructure/adapters/ObsidianVaultAdapter\";\nimport { ObsidianUIAdapter } from \"../../infrastructure/adapters/ObsidianUIAdapter\";\n\nexport class DynamicBacklinksBlockRenderer {\n  private dynamicBacklinksService: DynamicBacklinksService;\n\n  constructor(private app: App) {\n    const vaultAdapter = new ObsidianVaultAdapter(\n      this.app.vault,\n      this.app.metadataCache,\n    );\n    const uiAdapter = new ObsidianUIAdapter(this.app);\n    this.dynamicBacklinksService = new DynamicBacklinksService(\n      vaultAdapter,\n      uiAdapter,\n    );\n  }\n\n  async render(\n    container: HTMLElement,\n    config: DynamicBacklinksBlockConfig,\n    file: TFile,\n    dv: any,\n  ): Promise<void> {\n    // Discover property-based backlinks\n    const backlinkResult =\n      await this.dynamicBacklinksService.discoverPropertyBasedBacklinks(file, {\n        excludeProperties: config.excludeProperties || [\n          \"exo__Asset_id\",\n          \"exo__Instance_class\",\n        ],\n        maxResultsPerProperty: config.maxResultsPerProperty,\n        filterByClass: config.filterByClass,\n      });\n\n    if (backlinkResult.isFailure) {\n      container.createEl(\"p\", {\n        text: `Error discovering backlinks: ${backlinkResult.getError()}`,\n        cls: \"exocortex-error\",\n      });\n      return;\n    }\n\n    const propertyBacklinks = backlinkResult.getValue();\n\n    if (propertyBacklinks.length === 0) {\n      container.createEl(\"p\", {\n        text: \"No property-based backlinks found\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    // Render each property group as a separate section\n    for (const propertyGroup of propertyBacklinks) {\n      if (\n        !config.showEmptyProperties &&\n        propertyGroup.referencingFiles.length === 0\n      ) {\n        continue;\n      }\n\n      await this.renderPropertyGroup(container, propertyGroup, config);\n    }\n  }\n\n  private async renderPropertyGroup(\n    container: HTMLElement,\n    propertyGroup: PropertyBasedBacklink,\n    config: DynamicBacklinksBlockConfig,\n  ): Promise<void> {\n    const groupContainer = container.createDiv({\n      cls: \"exocortex-dynamic-backlinks-group\",\n    });\n\n    // Property header\n    const header = groupContainer.createEl(\"h4\", {\n      text: `${this.formatPropertyName(propertyGroup.propertyName)} (${propertyGroup.referencingFiles.length})`,\n      cls: \"exocortex-property-backlinks-header\",\n    });\n\n    if (propertyGroup.referencingFiles.length === 0) {\n      groupContainer.createEl(\"p\", {\n        text: \"No files reference this asset via this property\",\n        cls: \"exocortex-empty\",\n      });\n      return;\n    }\n\n    // Render backlinks list\n    const list = groupContainer.createEl(\"ul\", {\n      cls: \"exocortex-property-backlinks-list\",\n    });\n\n    for (const backlinkFile of propertyGroup.referencingFiles) {\n      await this.renderBacklinkItem(list, backlinkFile);\n    }\n  }\n\n  private async renderBacklinkItem(\n    list: HTMLElement,\n    file: TFile,\n  ): Promise<void> {\n    const metadata = this.app.metadataCache.getFileCache(file);\n    const frontmatter = metadata?.frontmatter || {};\n\n    const item = list.createEl(\"li\", { cls: \"exocortex-backlink-item\" });\n\n    // File link\n    const link = item.createEl(\"a\", {\n      text: frontmatter[\"exo__Asset_label\"] || file.basename,\n      href: file.path,\n      cls: \"internal-link\",\n    });\n\n    // Class info (if available)\n    const instanceClass = frontmatter[\"exo__Instance_class\"];\n    if (instanceClass) {\n      const classSpan = item.createEl(\"span\", {\n        text: ` (${this.cleanClassName(instanceClass)})`,\n        cls: \"exocortex-class-info\",\n      });\n    }\n\n    // File path (for disambiguation)\n    if (file.path !== `${file.basename}.md`) {\n      const pathSpan = item.createEl(\"span\", {\n        text: ` - ${file.path}`,\n        cls: \"exocortex-path-info\",\n      });\n    }\n  }\n\n  private formatPropertyName(propertyName: string): string {\n    // Convert property names to more readable format\n    return propertyName\n      .replace(/^ems__/, \"\") // Remove ems__ prefix\n      .replace(/^exo__/, \"\") // Remove exo__ prefix\n      .replace(/_/g, \" \") // Replace underscores with spaces\n      .replace(/\\b\\w/g, (l) => l.toUpperCase()); // Capitalize words\n  }\n\n  private cleanClassName(className: any): string {\n    if (!className) return \"\";\n    const str = Array.isArray(className) ? className[0] : className;\n    return str?.toString().replace(/\\[\\[|\\]\\]/g, \"\") || \"\";\n  }\n}\n"],"version":3}