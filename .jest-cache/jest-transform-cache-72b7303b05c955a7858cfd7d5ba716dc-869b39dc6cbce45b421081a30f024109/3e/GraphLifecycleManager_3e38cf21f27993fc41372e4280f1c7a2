70699be4bdefd7ac6c0348ce7d72fac1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphLifecycleManager = void 0;
const obsidian_1 = require("obsidian");
const Graph_1 = require("../../domain/semantic/core/Graph");
const Triple_1 = require("../../domain/semantic/core/Triple");
/**
 * Graph Lifecycle Manager following Pure Fabrication Pattern (GRASP)
 * Single Responsibility: Manage knowledge graph lifecycle and file synchronization
 */
class GraphLifecycleManager {
    constructor(plugin) {
        this.plugin = plugin;
        this.graph = new Graph_1.Graph();
    }
    async initialize() {
        // Load vault data into graph
        try {
            await this.loadVaultIntoGraph();
        }
        catch (error) {
            // Vault loading failed - plugin should still function
            console.warn("Failed to load vault into graph:", error);
        }
        // Register file modification handlers
        this.registerFileHandlers();
        new obsidian_1.Notice("🔍 Exocortex: Knowledge graph loaded!");
    }
    async cleanup() {
        if (this.graph) {
            this.graph.clear();
        }
    }
    getManagerId() {
        return "GraphLifecycleManager";
    }
    getGraph() {
        return this.graph;
    }
    /**
     * Set callback for cache invalidation when graph changes
     */
    setCacheInvalidationCallback(callback) {
        this.cacheInvalidationCallback = callback;
    }
    async loadVaultIntoGraph() {
        // Loading vault data
        const startTime = Date.now();
        let triplesCount = 0;
        try {
            const files = this.plugin.app.vault.getMarkdownFiles();
            for (const file of files) {
                try {
                    const content = await this.plugin.app.vault.read(file);
                    const triples = this.extractTriplesFromFile(file, content);
                    for (const triple of triples) {
                        this.graph.add(triple);
                        triplesCount++;
                    }
                }
                catch (err) {
                    // File processing failed - continue with next file
                }
            }
        }
        catch (err) {
            // Vault access failed - plugin should still function
            console.warn("Failed to access vault files during graph initialization:", err);
            new obsidian_1.Notice("Exocortex: Unable to load vault files into graph");
            return;
        }
        const loadTime = Date.now() - startTime;
        // Vault data loaded
    }
    registerFileHandlers() {
        // Register file modification handler to update graph
        this.plugin.registerEvent(this.plugin.app.vault.on("modify", async (file) => {
            if (file instanceof obsidian_1.TFile && file.extension === "md") {
                await this.updateFileInGraph(file);
            }
        }));
        // Register file creation handler
        this.plugin.registerEvent(this.plugin.app.vault.on("create", async (file) => {
            if (file instanceof obsidian_1.TFile && file.extension === "md") {
                await this.updateFileInGraph(file);
            }
        }));
        // Register file deletion handler
        this.plugin.registerEvent(this.plugin.app.vault.on("delete", async (file) => {
            if (file instanceof obsidian_1.TFile && file.extension === "md") {
                this.removeFileFromGraph(file);
            }
        }));
    }
    async updateFileInGraph(file) {
        try {
            // Remove old triples for this file
            this.removeFileFromGraph(file);
            // Add new triples
            const content = await this.plugin.app.vault.read(file);
            const triples = this.extractTriplesFromFile(file, content);
            for (const triple of triples) {
                this.graph.add(triple);
            }
            // Invalidate cache when graph changes
            this.cacheInvalidationCallback?.();
        }
        catch (err) {
            // File update failed
        }
    }
    removeFileFromGraph(file) {
        const subject = new Triple_1.IRI(`file://${file.basename}`);
        const triplesToRemove = this.graph.match(subject, null, null);
        for (const triple of triplesToRemove) {
            this.graph.remove(triple);
        }
        // Invalidate cache when graph changes
        this.cacheInvalidationCallback?.();
    }
    extractTriplesFromFile(file, content) {
        const triples = [];
        const subject = new Triple_1.IRI(`file://${file.basename}`);
        // Extract frontmatter
        const frontmatterMatch = content.match(/^---\n([\s\S]*?)\n---/);
        if (frontmatterMatch) {
            const frontmatter = this.parseFrontmatter(frontmatterMatch[1]);
            for (const [key, value] of Object.entries(frontmatter)) {
                if (Array.isArray(value)) {
                    for (const v of value) {
                        triples.push(new Triple_1.Triple(subject, new Triple_1.IRI(key), Triple_1.Literal.string(String(v))));
                    }
                }
                else if (value !== null && value !== undefined) {
                    triples.push(new Triple_1.Triple(subject, new Triple_1.IRI(key), Triple_1.Literal.string(String(value))));
                }
            }
        }
        // Add basic file metadata
        triples.push(new Triple_1.Triple(subject, new Triple_1.IRI("file_path"), Triple_1.Literal.string(file.path)));
        triples.push(new Triple_1.Triple(subject, new Triple_1.IRI("file_name"), Triple_1.Literal.string(file.name)));
        return triples;
    }
    parseFrontmatter(yaml) {
        const result = {};
        const lines = yaml.split("\n");
        let currentKey = null;
        let currentValue = null;
        let inArray = false;
        for (const line of lines) {
            const trimmed = line.trim();
            if (!trimmed)
                continue;
            // Check for array item
            if (line.startsWith("  - ") || line.startsWith("    - ")) {
                if (currentKey && inArray) {
                    const value = line.substring(line.indexOf("- ") + 2).trim();
                    const cleanValue = value
                        .replace(/^["']|["']$/g, "")
                        .replace(/\[\[|\]\]/g, "");
                    if (!Array.isArray(currentValue)) {
                        currentValue = [];
                    }
                    currentValue.push(cleanValue);
                }
                continue;
            }
            // Check for key:value pair
            if (trimmed.includes(":")) {
                // Save previous key-value if exists
                if (currentKey !== null && currentValue !== null) {
                    result[currentKey] = currentValue;
                }
                const colonIndex = trimmed.indexOf(":");
                currentKey = trimmed.substring(0, colonIndex).trim();
                const valueStr = trimmed.substring(colonIndex + 1).trim();
                if (!valueStr) {
                    // Value will be on next lines (array)
                    inArray = true;
                    currentValue = [];
                }
                else {
                    // Single value
                    inArray = false;
                    currentValue = valueStr
                        .replace(/^["']|["']$/g, "")
                        .replace(/\[\[|\]\]/g, "");
                }
            }
        }
        // Save last key-value
        if (currentKey !== null && currentValue !== null) {
            result[currentKey] = currentValue;
        }
        return result;
    }
}
exports.GraphLifecycleManager = GraphLifecycleManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,