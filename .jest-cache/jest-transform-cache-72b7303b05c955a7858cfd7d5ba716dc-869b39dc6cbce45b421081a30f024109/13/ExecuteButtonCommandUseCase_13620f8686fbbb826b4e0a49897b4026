1c61ea79133eae1ccbbd062ed61da1dc
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecuteButtonCommandUseCase = void 0;
const tslib_1 = require("tslib");
const Result_1 = require("../../domain/core/Result");
const AssetId_1 = require("../../domain/value-objects/AssetId");
class ExecuteButtonCommandUseCase {
    constructor(buttonRepository, commandExecutor) {
        this.buttonRepository = buttonRepository;
        this.commandExecutor = commandExecutor;
    }
    execute(request) {
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Validate request
            if (!request.buttonId) {
                return Result_1.Result.fail('Button ID is required');
            }
            // Parse button ID
            const buttonIdResult = AssetId_1.AssetId.create(request.buttonId);
            if (buttonIdResult.isFailure) {
                return Result_1.Result.fail('Invalid button ID');
            }
            const buttonId = buttonIdResult.getValue();
            // Find the button
            const buttonResult = yield this.buttonRepository.findButtonById(buttonId);
            if (buttonResult.isFailure) {
                return Result_1.Result.fail(`Failed to load button: ${buttonResult.error}`);
            }
            const button = buttonResult.getValue();
            if (!button) {
                return Result_1.Result.fail('Button not found');
            }
            // Check if button can be executed
            if (!button.canExecute()) {
                return Result_1.Result.fail('Button is disabled');
            }
            // Load the command
            const commandResult = yield this.buttonRepository.findCommandById(button.commandId);
            if (commandResult.isFailure) {
                return Result_1.Result.fail(`Failed to load command: ${commandResult.error}`);
            }
            const command = commandResult.getValue();
            if (!command) {
                return Result_1.Result.fail('Command not found');
            }
            // Check if command requires input but none provided
            if (command.requiresInput && !request.inputParameters) {
                // Return schema for input collection
                return Result_1.Result.ok({
                    success: false,
                    requiresInput: true,
                    inputSchema: {
                        title: command.name,
                        description: command.description,
                        parameters: command.parameters
                    }
                });
            }
            // Validate and prepare execution context
            const contextResult = command.buildExecutionContext(request.inputParameters || {});
            if (contextResult.isFailure) {
                return Result_1.Result.fail(`Invalid parameters: ${contextResult.error}`);
            }
            const executionContext = contextResult.getValue();
            // Execute the command through the command executor service
            try {
                const executionResult = yield this.commandExecutor.execute({
                    command: command,
                    context: Object.assign(Object.assign({}, executionContext), { assetId: request.assetId, currentView: (_a = request.context) === null || _a === void 0 ? void 0 : _a.currentView, currentClass: (_b = request.context) === null || _b === void 0 ? void 0 : _b.currentClass, selection: (_c = request.context) === null || _c === void 0 ? void 0 : _c.selection })
                });
                if (executionResult.isFailure) {
                    return Result_1.Result.fail(`Command execution failed: ${executionResult.error}`);
                }
                const result = executionResult.getValue();
                // Record button click event
                button.click();
                return Result_1.Result.ok({
                    success: true,
                    message: `Command '${command.name}' executed successfully`,
                    result: result
                });
            }
            catch (error) {
                return Result_1.Result.fail(`Unexpected error during command execution: ${error.message}`);
            }
        });
    }
}
exports.ExecuteButtonCommandUseCase = ExecuteButtonCommandUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,