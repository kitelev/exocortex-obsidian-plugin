{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/ErrorHandlerService.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/services/ErrorHandlerService.ts"],"sourcesContent":["import {\n  ExocortexError,\n  ErrorSeverity,\n  ErrorCategory,\n  FixSuggestion,\n  ErrorBuilder,\n} from \"../../domain/errors/ExocortexError\";\nimport { ErrorAnalyzer } from \"../../domain/errors/ErrorAnalyzer\";\nimport { EnhancedResult } from \"../../domain/core/EnhancedResult\";\nimport { INotificationService } from \"../ports/INotificationService\";\n\nexport interface ErrorHandlerOptions {\n  showUserNotification?: boolean;\n  logToConsole?: boolean;\n  trackMetrics?: boolean;\n  autoRecover?: boolean;\n}\n\nexport interface ErrorMetrics {\n  totalErrors: number;\n  errorsBySeverity: Record<ErrorSeverity, number>;\n  errorsByCategory: Record<ErrorCategory, number>;\n  averageResolutionTime: number;\n  lastError?: ExocortexError;\n}\n\nexport class ErrorHandlerService {\n  private errorHistory: ExocortexError[] = [];\n  private errorMetrics: ErrorMetrics = {\n    totalErrors: 0,\n    errorsBySeverity: {\n      [ErrorSeverity.CRITICAL]: 0,\n      [ErrorSeverity.ERROR]: 0,\n      [ErrorSeverity.WARNING]: 0,\n      [ErrorSeverity.INFO]: 0,\n    },\n    errorsByCategory: {\n      [ErrorCategory.SYNTAX]: 0,\n      [ErrorCategory.SEMANTIC]: 0,\n      [ErrorCategory.VALIDATION]: 0,\n      [ErrorCategory.SYSTEM]: 0,\n      [ErrorCategory.NETWORK]: 0,\n      [ErrorCategory.PERMISSION]: 0,\n    },\n    averageResolutionTime: 0,\n  };\n  private resolutionTimes: number[] = [];\n  private maxHistorySize = 100;\n  private errorStartTimes = new Map<string, number>();\n\n  constructor(\n    private options: ErrorHandlerOptions = {},\n    private notificationService?: INotificationService,\n  ) {\n    this.options = {\n      showUserNotification: true,\n      logToConsole: true,\n      trackMetrics: true,\n      autoRecover: false,\n      ...options,\n    };\n  }\n\n  async handleError(\n    error: Error | ExocortexError | string,\n    context?: Partial<ExocortexError[\"context\"]>,\n  ): Promise<EnhancedResult<void>> {\n    const startTime = Date.now();\n\n    try {\n      let exoError: ExocortexError;\n\n      if (typeof error === \"string\") {\n        exoError = ErrorAnalyzer.analyze(error);\n      } else if (error instanceof Error) {\n        exoError = ErrorAnalyzer.analyze(error);\n      } else {\n        exoError = error;\n      }\n\n      if (context) {\n        exoError = {\n          ...exoError,\n          context: {\n            ...exoError.context,\n            ...context,\n          },\n        };\n      }\n\n      this.errorStartTimes.set(exoError.id, startTime);\n\n      if (this.options.trackMetrics) {\n        this.updateMetrics(exoError);\n      }\n\n      if (this.options.logToConsole) {\n        this.logError(exoError);\n      }\n\n      if (this.options.showUserNotification) {\n        this.showUserNotification(exoError);\n      }\n\n      this.addToHistory(exoError);\n\n      if (this.options.autoRecover && exoError.recoverable) {\n        await this.attemptRecovery(exoError);\n      }\n\n      return EnhancedResult.okEnhanced();\n    } catch (handlingError) {\n      console.error(\"Error in error handler:\", handlingError);\n      return EnhancedResult.failEnhanced(\n        ErrorBuilder.create()\n          .withTitle(\"Error Handler Failed\")\n          .withMessage(\"Failed to handle the error properly\")\n          .withSeverity(ErrorSeverity.CRITICAL)\n          .withCategory(ErrorCategory.SYSTEM)\n          .withContext({\n            operation: \"Error Handling\",\n            timestamp: new Date(),\n          })\n          .withTechnicalDetails(\n            handlingError instanceof Error\n              ? handlingError.message\n              : String(handlingError),\n          )\n          .build(),\n      );\n    }\n  }\n\n  markErrorResolved(errorId: string): void {\n    const startTime = this.errorStartTimes.get(errorId);\n    if (startTime) {\n      const resolutionTime = Date.now() - startTime;\n      this.resolutionTimes.push(resolutionTime);\n\n      if (this.resolutionTimes.length > 100) {\n        this.resolutionTimes.shift();\n      }\n\n      this.errorMetrics.averageResolutionTime =\n        this.resolutionTimes.reduce((a, b) => a + b, 0) /\n        this.resolutionTimes.length;\n\n      this.errorStartTimes.delete(errorId);\n    }\n  }\n\n  private updateMetrics(error: ExocortexError): void {\n    this.errorMetrics.totalErrors++;\n    this.errorMetrics.errorsBySeverity[error.severity]++;\n    this.errorMetrics.errorsByCategory[error.category]++;\n    this.errorMetrics.lastError = error;\n  }\n\n  private logError(error: ExocortexError): void {\n    const logLevel = this.getLogLevel(error.severity);\n    const logMessage = this.formatErrorForConsole(error);\n\n    switch (logLevel) {\n      case \"error\":\n        console.error(logMessage, error);\n        break;\n      case \"warn\":\n        console.warn(logMessage, error);\n        break;\n      case \"info\":\n        console.info(logMessage, error);\n        break;\n      default:\n        console.log(logMessage, error);\n    }\n  }\n\n  private getLogLevel(\n    severity: ErrorSeverity,\n  ): \"error\" | \"warn\" | \"info\" | \"log\" {\n    switch (severity) {\n      case ErrorSeverity.CRITICAL:\n      case ErrorSeverity.ERROR:\n        return \"error\";\n      case ErrorSeverity.WARNING:\n        return \"warn\";\n      case ErrorSeverity.INFO:\n        return \"info\";\n      default:\n        return \"log\";\n    }\n  }\n\n  private formatErrorForConsole(error: ExocortexError): string {\n    const parts = [\n      `[${error.severity.toUpperCase()}]`,\n      `[${error.category}]`,\n      error.title,\n      \"-\",\n      error.message,\n    ];\n\n    if (error.context.location) {\n      if (\n        typeof error.context.location === \"object\" &&\n        \"line\" in error.context.location\n      ) {\n        parts.push(\n          `(Line ${error.context.location.line}:${error.context.location.column})`,\n        );\n      }\n    }\n\n    return parts.join(\" \");\n  }\n\n  private showUserNotification(error: ExocortexError): void {\n    const duration = this.getNotificationDuration(error.severity);\n    const message = this.formatErrorForUser(error);\n\n    this.notificationService?.showError(message, duration);\n  }\n\n  private getNotificationDuration(severity: ErrorSeverity): number {\n    switch (severity) {\n      case ErrorSeverity.CRITICAL:\n        return 10000;\n      case ErrorSeverity.ERROR:\n        return 7000;\n      case ErrorSeverity.WARNING:\n        return 5000;\n      case ErrorSeverity.INFO:\n        return 3000;\n      default:\n        return 5000;\n    }\n  }\n\n  private formatErrorForUser(error: ExocortexError): string {\n    let message = `${error.title}: ${error.message}`;\n\n    if (error.suggestions && error.suggestions.length > 0) {\n      const topSuggestion = error.suggestions[0];\n      message += `\\n\\n💡 ${topSuggestion.title}`;\n    }\n\n    return message;\n  }\n\n  private addToHistory(error: ExocortexError): void {\n    this.errorHistory.unshift(error);\n\n    if (this.errorHistory.length > this.maxHistorySize) {\n      this.errorHistory.pop();\n    }\n  }\n\n  private async attemptRecovery(error: ExocortexError): Promise<void> {\n    if (!error.suggestions || error.suggestions.length === 0) {\n      return;\n    }\n\n    const autoFixSuggestion = error.suggestions.find(\n      (s) => s.confidence && s.confidence > 0.9 && s.action,\n    );\n\n    if (autoFixSuggestion && autoFixSuggestion.action) {\n      try {\n        await autoFixSuggestion.action.handler();\n        this.notificationService?.showSuccess(\n          `Auto-recovery: ${autoFixSuggestion.title}`,\n          3000,\n        );\n      } catch (recoveryError) {\n        console.error(\"Auto-recovery failed:\", recoveryError);\n      }\n    }\n  }\n\n  getMetrics(): ErrorMetrics {\n    return { ...this.errorMetrics };\n  }\n\n  getErrorHistory(): ExocortexError[] {\n    return [...this.errorHistory];\n  }\n\n  clearHistory(): void {\n    this.errorHistory = [];\n    this.errorStartTimes.clear();\n  }\n\n  getSuggestions(error: Error | string): FixSuggestion[] {\n    const exoError = ErrorAnalyzer.analyze(error);\n    return exoError.suggestions || [];\n  }\n\n  analyzeError(error: Error | string): ExocortexError {\n    return ErrorAnalyzer.analyze(error);\n  }\n}\n"],"version":3}