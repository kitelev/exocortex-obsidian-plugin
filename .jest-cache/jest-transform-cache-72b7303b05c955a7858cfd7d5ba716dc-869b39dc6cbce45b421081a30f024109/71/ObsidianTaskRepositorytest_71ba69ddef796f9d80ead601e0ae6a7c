307afe955f57af4cf10d78d678de1baa
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock Notice to prevent actual UI notifications during tests
jest.mock('obsidian', () => (Object.assign(Object.assign({}, jest.requireActual('obsidian')), { Notice: jest.fn() })));
const ObsidianTaskRepository_1 = require("../../../src/infrastructure/repositories/ObsidianTaskRepository");
const Task_1 = require("../../../src/domain/entities/Task");
const TaskId_1 = require("../../../src/domain/value-objects/TaskId");
const AssetId_1 = require("../../../src/domain/value-objects/AssetId");
const Priority_1 = require("../../../src/domain/value-objects/Priority");
const TaskStatus_1 = require("../../../src/domain/value-objects/TaskStatus");
const obsidian_1 = require("obsidian");
describe('ObsidianTaskRepository', () => {
    let repository;
    let mockApp;
    let mockVault;
    let mockMetadataCache;
    beforeEach(() => {
        jest.clearAllMocks();
        mockVault = {
            getMarkdownFiles: jest.fn(),
            getAbstractFileByPath: jest.fn(),
            read: jest.fn(),
            modify: jest.fn(),
            create: jest.fn(),
            delete: jest.fn(),
            createFolder: jest.fn()
        };
        mockMetadataCache = {
            getFileCache: jest.fn()
        };
        mockApp = {
            vault: mockVault,
            metadataCache: mockMetadataCache
        };
        repository = new ObsidianTaskRepository_1.ObsidianTaskRepository(mockApp);
    });
    describe('findById', () => {
        it('should find task by ID from cache', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440000';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            const mockTask = Task_1.Task.create({
                title: 'Test Task'
            }).getValue();
            // Pre-populate cache
            repository.taskCache.set(validUuid, mockTask);
            const result = yield repository.findById(taskId);
            expect(result).toBe(mockTask);
            expect(mockVault.getMarkdownFiles).not.toHaveBeenCalled();
        }));
        it('should find task by ID from file system', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440000';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            const mockFile = new obsidian_1.TFile('Tasks/test-task.md');
            const mockFrontmatter = {
                id: validUuid,
                title: 'Test Task',
                status: 'todo',
                priority: 'medium',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue(`---
id: ${validUuid}
title: Test Task
status: todo
priority: medium
---

# Test Task

This is a test task description.`);
            const result = yield repository.findById(taskId);
            expect(result).not.toBeNull();
            expect(result === null || result === void 0 ? void 0 : result.getTitle()).toBe('Test Task');
            // Cache should use the frontmatter ID as key, but contains the generated task
            expect(repository.taskCache.has(validUuid)).toBe(true);
        }));
        it('should return null if task not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440001';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            mockVault.getMarkdownFiles.mockReturnValue([]);
            const result = yield repository.findById(taskId);
            expect(result).toBeNull();
        }));
        it('should skip files outside Tasks folder', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440002';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            const mockFile = new obsidian_1.TFile('Notes/not-a-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            const result = yield repository.findById(taskId);
            expect(result).toBeNull();
            expect(mockMetadataCache.getFileCache).not.toHaveBeenCalled();
        }));
        it('should skip files without matching ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440003';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            const mockFile = new obsidian_1.TFile('Tasks/other-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: { id: '550e8400-e29b-41d4-a716-446655440099' }
            });
            const result = yield repository.findById(taskId);
            expect(result).toBeNull();
        }));
    });
    describe('findAll', () => {
        it('should return all tasks from Tasks folder', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFiles = [
                new obsidian_1.TFile('Tasks/task1.md'),
                new obsidian_1.TFile('Tasks/task2.md'),
                new obsidian_1.TFile('Notes/not-a-task.md') // Should be ignored
            ];
            const mockFrontmatter1 = {
                id: '550e8400-e29b-41d4-a716-446655440010',
                title: 'Task 1',
                status: 'todo',
                priority: 'high',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            const mockFrontmatter2 = {
                id: '550e8400-e29b-41d4-a716-446655440011',
                title: 'Task 2',
                status: 'done',
                priority: 'low',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue(mockFiles);
            mockMetadataCache.getFileCache.mockImplementation((file) => {
                if (file.path === 'Tasks/task1.md') {
                    return { frontmatter: mockFrontmatter1 };
                }
                if (file.path === 'Tasks/task2.md') {
                    return { frontmatter: mockFrontmatter2 };
                }
                return null;
            });
            mockVault.read.mockImplementation((file) => {
                if (file.path === 'Tasks/task1.md') {
                    return Promise.resolve('---\nid: 550e8400-e29b-41d4-a716-446655440010\n---\n# Task 1\nDescription 1');
                }
                if (file.path === 'Tasks/task2.md') {
                    return Promise.resolve('---\nid: 550e8400-e29b-41d4-a716-446655440011\n---\n# Task 2\nDescription 2');
                }
                return Promise.resolve('');
            });
            const result = yield repository.findAll();
            expect(result).toHaveLength(2);
            expect(result[0].getTitle()).toBe('Task 1');
            expect(result[1].getTitle()).toBe('Task 2');
            // Note: Task entity generates new IDs, not using frontmatter IDs
        }));
        it('should return empty array when no tasks exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getMarkdownFiles.mockReturnValue([]);
            const result = yield repository.findAll();
            expect(result).toEqual([]);
        }));
        it('should skip files with invalid task data', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/invalid-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: { invalid: 'data' }
            });
            mockVault.read.mockResolvedValue('invalid content');
            const result = yield repository.findAll();
            expect(result).toEqual([]);
        }));
    });
    describe('findByProject', () => {
        it('should find tasks by project ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const projectId = AssetId_1.AssetId.create('550e8400-e29b-41d4-a716-446655440020').getValue();
            const mockFile = new obsidian_1.TFile('Tasks/project-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440021',
                title: 'Project Task',
                projectId: '550e8400-e29b-41d4-a716-446655440020',
                status: 'todo',
                priority: 'medium',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nprojectId: 550e8400-e29b-41d4-a716-446655440020\n---\nContent');
            const result = yield repository.findByProject(projectId);
            expect(result).toHaveLength(1);
            expect((_a = result[0].getProjectId()) === null || _a === void 0 ? void 0 : _a.toString()).toBe('550e8400-e29b-41d4-a716-446655440020');
        }));
        it('should return empty array when no tasks match project', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const projectId = AssetId_1.AssetId.create('550e8400-e29b-41d4-a716-446655440022').getValue();
            mockVault.getMarkdownFiles.mockReturnValue([]);
            const result = yield repository.findByProject(projectId);
            expect(result).toEqual([]);
        }));
    });
    describe('findByStatus', () => {
        it('should find tasks by status', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const status = TaskStatus_1.TaskStatus.create('done').getValue();
            const mockFile = new obsidian_1.TFile('Tasks/done-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440030',
                title: 'Completed Task',
                status: 'done',
                priority: 'medium',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440030\nstatus: done\n---\nContent');
            const result = yield repository.findByStatus(status);
            expect(result).toHaveLength(1);
            expect(result[0].getStatus().toString()).toBe('done');
        }));
        it('should return empty array when no tasks match status', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const status = TaskStatus_1.TaskStatus.create('cancelled').getValue();
            mockVault.getMarkdownFiles.mockReturnValue([]);
            const result = yield repository.findByStatus(status);
            expect(result).toEqual([]);
        }));
    });
    describe('findByPriority', () => {
        it('should find tasks by priority', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const priority = Priority_1.Priority.create('high').getValue();
            const mockFile = new obsidian_1.TFile('Tasks/high-priority-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440040',
                title: 'High Priority Task',
                status: 'todo',
                priority: 'high',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440040\npriority: high\n---\nContent');
            const result = yield repository.findByPriority(priority);
            expect(result).toHaveLength(1);
            expect(result[0].getPriority().toString()).toBe('high');
        }));
    });
    describe('findByTag', () => {
        it('should find tasks by tag', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const tag = 'urgent';
            const mockFile = new obsidian_1.TFile('Tasks/tagged-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440050',
                title: 'Tagged Task',
                status: 'todo',
                priority: 'medium',
                tags: ['urgent', 'important'],
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440050\ntags: [urgent, important]\n---\nContent');
            const result = yield repository.findByTag(tag);
            expect(result).toHaveLength(1);
            expect(result[0].getTags()).toContain('urgent');
        }));
        it('should handle tasks without tags', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const tag = 'nonexistent';
            const mockFile = new obsidian_1.TFile('Tasks/no-tags-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: '550e8400-e29b-41d4-a716-446655440051',
                    title: 'No Tags Task'
                }
            });
            const result = yield repository.findByTag(tag);
            expect(result).toEqual([]);
        }));
    });
    describe('findOverdue', () => {
        it('should find overdue tasks', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const mockFile = new obsidian_1.TFile('Tasks/overdue-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440060',
                title: 'Overdue Task',
                status: 'todo',
                priority: 'medium',
                dueDate: yesterday.toISOString(),
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440060\ndueDate: ' + yesterday.toISOString() + '\n---\nContent');
            const result = yield repository.findOverdue();
            expect(result).toHaveLength(1);
            expect((_a = result[0].getDueDate()) === null || _a === void 0 ? void 0 : _a.getTime()).toBe(yesterday.getTime());
        }));
        it('should not include completed overdue tasks', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const mockFile = new obsidian_1.TFile('Tasks/completed-overdue-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: '550e8400-e29b-41d4-a716-446655440061',
                    dueDate: yesterday.toISOString(),
                    status: 'done'
                }
            });
            const result = yield repository.findOverdue();
            expect(result).toEqual([]);
        }));
    });
    describe('findDueToday', () => {
        it('should find tasks due today', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const today = new Date();
            today.setHours(12, 0, 0, 0); // Midday today
            const mockFile = new obsidian_1.TFile('Tasks/due-today-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440070',
                title: 'Due Today Task',
                status: 'todo',
                priority: 'medium',
                dueDate: today.toISOString(),
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440070\ndueDate: ' + today.toISOString() + '\n---\nContent');
            const result = yield repository.findDueToday();
            expect(result).toHaveLength(1);
        }));
    });
    describe('findDueBetween', () => {
        it('should find tasks due within date range', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const startDate = new Date();
            const endDate = new Date();
            endDate.setDate(endDate.getDate() + 7);
            const dueDate = new Date();
            dueDate.setDate(dueDate.getDate() + 3);
            const mockFile = new obsidian_1.TFile('Tasks/due-in-range-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440080',
                title: 'Due In Range Task',
                status: 'todo',
                priority: 'medium',
                dueDate: dueDate.toISOString(),
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440080\ndueDate: ' + dueDate.toISOString() + '\n---\nContent');
            const result = yield repository.findDueBetween(startDate, endDate);
            expect(result).toHaveLength(1);
        }));
        it('should exclude tasks outside date range', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const startDate = new Date();
            const endDate = new Date();
            endDate.setDate(endDate.getDate() + 7);
            const outsideDate = new Date();
            outsideDate.setDate(outsideDate.getDate() + 10);
            const mockFile = new obsidian_1.TFile('Tasks/outside-range-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: '550e8400-e29b-41d4-a716-446655440081',
                    dueDate: outsideDate.toISOString()
                }
            });
            const result = yield repository.findDueBetween(startDate, endDate);
            expect(result).toEqual([]);
        }));
    });
    describe('findByCriteria', () => {
        it('should find tasks matching all criteria', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const status = TaskStatus_1.TaskStatus.create('todo').getValue();
            const priority = Priority_1.Priority.create('high').getValue();
            const projectId = AssetId_1.AssetId.create('test-project').getValue();
            // Mock findAll to return test data
            const mockTask = Task_1.Task.create({
                title: 'Test Task',
                priority: priority,
                tags: ['urgent', 'test']
            }).getValue();
            // Set additional properties that would be set by the task
            jest.spyOn(mockTask, 'getStatus').mockReturnValue(status);
            jest.spyOn(mockTask, 'getProjectId').mockReturnValue(projectId);
            jest.spyOn(repository, 'findAll').mockResolvedValue([mockTask]);
            const result = yield repository.findByCriteria({
                status,
                priority,
                projectId,
                tags: ['urgent']
            });
            expect(result).toHaveLength(1);
            expect(result[0]).toBe(mockTask);
        }));
        it('should return empty array when no tasks match criteria', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(repository, 'findAll').mockResolvedValue([]);
            const result = yield repository.findByCriteria({
                status: TaskStatus_1.TaskStatus.create('cancelled').getValue()
            });
            expect(result).toEqual([]);
        }));
    });
    describe('save', () => {
        it('should create new task file', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const task = Task_1.Task.create({
                title: 'New Task',
                description: 'A new test task'
            }).getValue();
            mockVault.getAbstractFileByPath.mockReturnValue(null);
            mockVault.create.mockResolvedValue(new obsidian_1.TFile('Tasks/New Task.md'));
            yield repository.save(task);
            expect(mockVault.createFolder).toHaveBeenCalledWith('Tasks');
            expect(mockVault.create).toHaveBeenCalledWith('Tasks/New Task.md', '');
            expect(mockVault.modify).toHaveBeenCalled();
            expect(repository.taskCache.has(task.getId().toString())).toBe(true);
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Task "New Task" saved successfully');
        }));
        it('should update existing task file', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const task = Task_1.Task.create({
                title: 'Existing Task'
            }).getValue();
            const existingFile = new obsidian_1.TFile('Tasks/Existing Task.md');
            mockVault.getAbstractFileByPath.mockReturnValue(existingFile);
            yield repository.save(task);
            expect(mockVault.create).not.toHaveBeenCalled();
            expect(mockVault.modify).toHaveBeenCalledWith(existingFile, expect.stringContaining('# Existing Task'));
        }));
        it('should handle file path conflicts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const task = Task_1.Task.create({
                title: 'Test Task'
            }).getValue();
            // Mock folder exists at the path
            const mockFolder = { isFile: () => false };
            mockVault.getAbstractFileByPath.mockReturnValue(mockFolder);
            yield expect(repository.save(task)).rejects.toThrow('File path exists but is not a file');
        }));
        it('should handle save errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const task = Task_1.Task.create({
                title: 'Error Task'
            }).getValue();
            mockVault.getAbstractFileByPath.mockReturnValue(null);
            mockVault.create.mockRejectedValue(new Error('Disk full'));
            yield expect(repository.save(task)).rejects.toThrow('Disk full');
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Failed to save task: Disk full');
        }));
        it('should sanitize filename with special characters', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const task = Task_1.Task.create({
                title: 'Task: With / Special * Characters?'
            }).getValue();
            mockVault.getAbstractFileByPath.mockReturnValue(null);
            mockVault.create.mockResolvedValue(new obsidian_1.TFile('Tasks/sanitized.md'));
            yield repository.save(task);
            expect(mockVault.create).toHaveBeenCalledWith(expect.stringMatching(/Tasks\/Task- With - Special - Characters-.md/), '');
        }));
    });
    describe('delete', () => {
        it('should delete existing task', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440100';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            const mockFile = new obsidian_1.TFile('Tasks/test-task.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: { id: validUuid }
            });
            yield repository.delete(taskId);
            expect(mockVault.delete).toHaveBeenCalledWith(mockFile);
            expect(repository.taskCache.has(validUuid)).toBe(false);
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Task deleted successfully');
        }));
        it('should throw error when task not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440101';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            mockVault.getMarkdownFiles.mockReturnValue([]);
            yield expect(repository.delete(taskId)).rejects.toThrow('Task with id ' + validUuid + ' not found');
        }));
    });
    describe('exists', () => {
        it('should return true when task exists', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440110';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            jest.spyOn(repository, 'findById').mockResolvedValue(Task_1.Task.create({ title: 'Test' }).getValue());
            const result = yield repository.exists(taskId);
            expect(result).toBe(true);
        }));
        it('should return false when task does not exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const validUuid = '550e8400-e29b-41d4-a716-446655440111';
            const taskId = TaskId_1.TaskId.create(validUuid).getValue();
            jest.spyOn(repository, 'findById').mockResolvedValue(null);
            const result = yield repository.exists(taskId);
            expect(result).toBe(false);
        }));
    });
    describe('findByFilename', () => {
        it('should find task by filename', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const filename = 'test-task.md';
            const mockFile = new obsidian_1.TFile('Tasks/test-task.md');
            const mockFrontmatter = {
                id: '550e8400-e29b-41d4-a716-446655440120',
                title: 'Test Task',
                status: 'todo',
                priority: 'medium',
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString()
            };
            mockVault.getAbstractFileByPath.mockReturnValue(mockFile);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: mockFrontmatter
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440120\n---\nContent');
            const result = yield repository.findByFilename(filename);
            expect(result).not.toBeNull();
            expect(result === null || result === void 0 ? void 0 : result.getTitle()).toBe('Test Task');
        }));
        it('should return null when file not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getAbstractFileByPath.mockReturnValue(null);
            const result = yield repository.findByFilename('nonexistent.md');
            expect(result).toBeNull();
        }));
        it('should return null when file is not a TFile', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getAbstractFileByPath.mockReturnValue({ isFile: () => false });
            const result = yield repository.findByFilename('folder');
            expect(result).toBeNull();
        }));
    });
    describe('getStatistics', () => {
        it('should return comprehensive task statistics', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const now = new Date();
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const tomorrow = new Date();
            tomorrow.setDate(tomorrow.getDate() + 1);
            const nextWeek = new Date();
            nextWeek.setDate(nextWeek.getDate() + 5);
            const mockTasks = [
                // Completed task
                Task_1.Task.create({ title: 'Done Task' }).getValue(),
                // Overdue task
                Task_1.Task.create({ title: 'Overdue Task' }).getValue(),
                // Due today task
                Task_1.Task.create({ title: 'Today Task' }).getValue(),
                // Due this week task
                Task_1.Task.create({ title: 'Week Task' }).getValue()
            ];
            // Mock task properties
            jest.spyOn(mockTasks[0], 'getStatus').mockReturnValue(TaskStatus_1.TaskStatus.create('done').getValue());
            jest.spyOn(mockTasks[0], 'getPriority').mockReturnValue(Priority_1.Priority.create('high').getValue());
            jest.spyOn(mockTasks[0], 'getDueDate').mockReturnValue(undefined);
            jest.spyOn(mockTasks[0], 'getCreatedAt').mockReturnValue(yesterday);
            jest.spyOn(mockTasks[0], 'getUpdatedAt').mockReturnValue(now);
            jest.spyOn(mockTasks[1], 'getStatus').mockReturnValue(TaskStatus_1.TaskStatus.create('todo').getValue());
            jest.spyOn(mockTasks[1], 'getPriority').mockReturnValue(Priority_1.Priority.create('medium').getValue());
            jest.spyOn(mockTasks[1], 'getDueDate').mockReturnValue(undefined); // No due date, so not overdue
            jest.spyOn(mockTasks[1], 'getCreatedAt').mockReturnValue(yesterday);
            jest.spyOn(mockTasks[1], 'getUpdatedAt').mockReturnValue(yesterday);
            jest.spyOn(mockTasks[2], 'getStatus').mockReturnValue(TaskStatus_1.TaskStatus.create('in-progress').getValue());
            jest.spyOn(mockTasks[2], 'getPriority').mockReturnValue(Priority_1.Priority.create('low').getValue());
            // Set due date to later today so it's not overdue
            const laterToday = new Date(now);
            laterToday.setHours(23, 59, 59, 999);
            jest.spyOn(mockTasks[2], 'getDueDate').mockReturnValue(laterToday);
            jest.spyOn(mockTasks[2], 'getCreatedAt').mockReturnValue(yesterday);
            jest.spyOn(mockTasks[2], 'getUpdatedAt').mockReturnValue(now);
            jest.spyOn(mockTasks[3], 'getStatus').mockReturnValue(TaskStatus_1.TaskStatus.create('todo').getValue());
            jest.spyOn(mockTasks[3], 'getPriority').mockReturnValue(Priority_1.Priority.create('medium').getValue());
            jest.spyOn(mockTasks[3], 'getDueDate').mockReturnValue(nextWeek);
            jest.spyOn(mockTasks[3], 'getCreatedAt').mockReturnValue(yesterday);
            jest.spyOn(mockTasks[3], 'getUpdatedAt').mockReturnValue(now);
            jest.spyOn(repository, 'findAll').mockResolvedValue(mockTasks);
            const result = yield repository.getStatistics();
            expect(result.total).toBe(4);
            expect(result.byStatus.done).toBe(1);
            expect(result.byStatus.todo).toBe(2);
            expect(result.byStatus['in-progress']).toBe(1);
            expect(result.byPriority.high).toBe(1);
            expect(result.byPriority.medium).toBe(2);
            expect(result.byPriority.low).toBe(1);
            expect(result.completed).toBe(1);
            expect(result.overdue).toBe(0); // Only task with due date < now and not done counts as overdue
            expect(result.dueToday).toBe(1);
            expect(result.dueThisWeek).toBeGreaterThan(0);
            expect(result.averageCompletionTime).toBeGreaterThan(0);
        }));
        it('should handle empty task list', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            jest.spyOn(repository, 'findAll').mockResolvedValue([]);
            const result = yield repository.getStatistics();
            expect(result.total).toBe(0);
            expect(result.completed).toBe(0);
            expect(result.overdue).toBe(0);
            expect(result.dueToday).toBe(0);
            expect(result.averageCompletionTime).toBeUndefined();
        }));
    });
    describe('search', () => {
        it('should search tasks by title', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTasks = [
                Task_1.Task.create({ title: 'Important Task' }).getValue(),
                Task_1.Task.create({ title: 'Regular Task' }).getValue(),
                Task_1.Task.create({ title: 'Another Important Item' }).getValue()
            ];
            jest.spyOn(repository, 'findAll').mockResolvedValue(mockTasks);
            const result = yield repository.search('important');
            expect(result).toHaveLength(2);
            expect(result[0].getTitle()).toBe('Important Task');
            expect(result[1].getTitle()).toBe('Another Important Item');
        }));
        it('should search tasks by description', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTask = Task_1.Task.create({
                title: 'Task',
                description: 'This has important content'
            }).getValue();
            jest.spyOn(repository, 'findAll').mockResolvedValue([mockTask]);
            const result = yield repository.search('important');
            expect(result).toHaveLength(1);
        }));
        it('should search tasks by tags', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTask = Task_1.Task.create({
                title: 'Task',
                tags: ['important', 'urgent']
            }).getValue();
            jest.spyOn(repository, 'findAll').mockResolvedValue([mockTask]);
            const result = yield repository.search('urgent');
            expect(result).toHaveLength(1);
        }));
        it('should be case insensitive', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTask = Task_1.Task.create({ title: 'Important Task' }).getValue();
            jest.spyOn(repository, 'findAll').mockResolvedValue([mockTask]);
            const result = yield repository.search('IMPORTANT');
            expect(result).toHaveLength(1);
        }));
    });
    describe('findRecentlyUpdated', () => {
        it('should return tasks sorted by update date', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const now = new Date();
            const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
            const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            const mockTasks = [
                Task_1.Task.create({ title: 'Old Task' }).getValue(),
                Task_1.Task.create({ title: 'Recent Task' }).getValue(),
                Task_1.Task.create({ title: 'Latest Task' }).getValue()
            ];
            jest.spyOn(mockTasks[0], 'getUpdatedAt').mockReturnValue(dayAgo);
            jest.spyOn(mockTasks[1], 'getUpdatedAt').mockReturnValue(hourAgo);
            jest.spyOn(mockTasks[2], 'getUpdatedAt').mockReturnValue(now);
            jest.spyOn(repository, 'findAll').mockResolvedValue(mockTasks);
            const result = yield repository.findRecentlyUpdated(2);
            expect(result).toHaveLength(2);
            expect(result[0].getTitle()).toBe('Latest Task');
            expect(result[1].getTitle()).toBe('Recent Task');
        }));
        it('should default to 10 items limit', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTasks = Array.from({ length: 15 }, (_, i) => Task_1.Task.create({ title: `Task ${i}` }).getValue());
            jest.spyOn(repository, 'findAll').mockResolvedValue(mockTasks);
            const result = yield repository.findRecentlyUpdated();
            expect(result).toHaveLength(10);
        }));
    });
    describe('findRecentlyCreated', () => {
        it('should return tasks sorted by creation date', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const now = new Date();
            const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);
            const dayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            const mockTasks = [
                Task_1.Task.create({ title: 'Old Task' }).getValue(),
                Task_1.Task.create({ title: 'Recent Task' }).getValue(),
                Task_1.Task.create({ title: 'Latest Task' }).getValue()
            ];
            jest.spyOn(mockTasks[0], 'getCreatedAt').mockReturnValue(dayAgo);
            jest.spyOn(mockTasks[1], 'getCreatedAt').mockReturnValue(hourAgo);
            jest.spyOn(mockTasks[2], 'getCreatedAt').mockReturnValue(now);
            jest.spyOn(repository, 'findAll').mockResolvedValue(mockTasks);
            const result = yield repository.findRecentlyCreated(2);
            expect(result).toHaveLength(2);
            expect(result[0].getTitle()).toBe('Latest Task');
            expect(result[1].getTitle()).toBe('Recent Task');
        }));
    });
    describe('loadTaskFromFile - error handling', () => {
        it('should return null for file without frontmatter ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/invalid-task.md');
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: { title: 'No ID Task' }
            });
            mockVault.read.mockResolvedValue('---\ntitle: No ID Task\n---\nContent');
            const result = yield repository.loadTaskFromFile(mockFile);
            expect(result).toBeNull();
        }));
        it('should return null for invalid priority', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/invalid-priority.md');
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: 'task-1',
                    priority: 'invalid-priority'
                }
            });
            mockVault.read.mockResolvedValue('---\nid: task-1\n---\nContent');
            const result = yield repository.loadTaskFromFile(mockFile);
            expect(result).toBeNull();
        }));
        it('should return null for invalid status', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/invalid-status.md');
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: 'task-1',
                    status: 'invalid-status'
                }
            });
            mockVault.read.mockResolvedValue('---\nid: task-1\n---\nContent');
            const result = yield repository.loadTaskFromFile(mockFile);
            expect(result).toBeNull();
        }));
        it('should handle vault read errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/error-task.md');
            mockVault.read.mockRejectedValue(new Error('File read error'));
            const result = yield repository.loadTaskFromFile(mockFile);
            expect(result).toBeNull();
        }));
    });
    describe('generateTaskContent', () => {
        it('should generate proper markdown content', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const task = Task_1.Task.create({
                title: 'Test Task',
                description: 'Test description',
                tags: ['tag1', 'tag2']
            }).getValue();
            const content = repository.generateTaskContent(task);
            expect(content).toContain('---');
            expect(content).toContain('# Test Task');
            expect(content).toContain('Test description');
            expect(content).toContain('## Details');
            expect(content).toContain('## Tags');
            expect(content).toContain('#tag1 #tag2');
            expect(content).toContain('## Notes');
        }));
    });
    describe('ensureTasksFolder', () => {
        it('should create Tasks folder if it does not exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getAbstractFileByPath.mockReturnValue(null);
            yield repository.ensureTasksFolder();
            expect(mockVault.createFolder).toHaveBeenCalledWith('Tasks');
        }));
        it('should not create Tasks folder if it already exists', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getAbstractFileByPath.mockReturnValue({ exists: true });
            yield repository.ensureTasksFolder();
            expect(mockVault.createFolder).not.toHaveBeenCalled();
        }));
    });
    describe('sanitizeFileName', () => {
        it('should replace invalid characters', () => {
            const result = repository.sanitizeFileName('Invalid/\\:*?"<>|Name');
            expect(result).toBe('Invalid---------Name');
        });
        it('should trim and limit length', () => {
            const longName = 'a'.repeat(150);
            const result = repository.sanitizeFileName(longName);
            expect(result.length).toBeLessThanOrEqual(100);
        });
        it('should handle empty string', () => {
            const result = repository.sanitizeFileName('');
            expect(result).toBe('');
        });
    });
    describe('edge cases', () => {
        it('should handle null metadata cache response', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/null-metadata.md');
            mockVault.getMarkdownFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue(null);
            const result = yield repository.findAll();
            expect(result).toEqual([]);
        }));
        it('should handle malformed dates in frontmatter', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/bad-date.md');
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: '550e8400-e29b-41d4-a716-446655440200',
                    dueDate: 'not-a-date',
                    createdAt: 'also-not-a-date'
                }
            });
            mockVault.read.mockResolvedValue('content');
            const result = yield repository.loadTaskFromFile(mockFile);
            // Task creation should fail with invalid task ID
            expect(result).toBeNull();
        }));
        it('should handle tasks with no content body', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('Tasks/no-body.md');
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    id: '550e8400-e29b-41d4-a716-446655440210',
                    title: 'No Body Task',
                    status: 'todo',
                    priority: 'medium',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString()
                }
            });
            mockVault.read.mockResolvedValue('---\nid: 550e8400-e29b-41d4-a716-446655440210\n---');
            const result = yield repository.loadTaskFromFile(mockFile);
            expect(result).not.toBeNull();
            expect(result === null || result === void 0 ? void 0 : result.getTitle()).toBe('No Body Task');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,