65d1759ac3687e3f3518258b235b36d6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const QueryTemplateUseCase_1 = require("../../../../src/application/use-cases/QueryTemplateUseCase");
const QueryTemplate_1 = require("../../../../src/domain/visual/QueryTemplate");
const VisualQueryNode_1 = require("../../../../src/domain/visual/VisualQueryNode");
// Mock repository
const mockTemplateRepository = {
    findAll: jest.fn(),
    findByCriteria: jest.fn(),
    findById: jest.fn(),
    findByCategory: jest.fn(),
    findByTags: jest.fn(),
    save: jest.fn(),
    create: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
    exists: jest.fn(),
    importTemplates: jest.fn(),
    exportTemplates: jest.fn(),
    getBuiltInTemplates: jest.fn(),
    getCustomTemplates: jest.fn(),
    getRecentlyUsed: jest.fn(),
    recordUsage: jest.fn(),
    getUsageStats: jest.fn(),
    refresh: jest.fn()
};
describe('QueryTemplateUseCase', () => {
    let useCase;
    let mockTemplate;
    beforeEach(() => {
        jest.clearAllMocks();
        useCase = new QueryTemplateUseCase_1.QueryTemplateUseCase(mockTemplateRepository);
        // Create a mock template
        const mockMetadata = {
            name: 'Test Template',
            description: 'A test template',
            category: QueryTemplate_1.TemplateCategory.EXPLORATION,
            tags: ['test'],
            difficulty: 'beginner',
            createdAt: new Date('2024-01-01'),
            updatedAt: new Date('2024-01-01'),
            version: '1.0.0'
        };
        mockTemplate = new QueryTemplate_1.QueryTemplate({
            id: 'test-template',
            metadata: mockMetadata,
            layout: {
                nodes: [{
                        id: 'node1',
                        type: VisualQueryNode_1.NodeType.ENTITY,
                        label: 'Test Entity',
                        position: { x: 100, y: 100 }
                    }],
                edges: [],
                viewport: { x: 0, y: 0, zoom: 1 }
            }
        });
    });
    describe('Template Retrieval', () => {
        it('should get all templates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.findAll.mockResolvedValue(mockTemplates);
            const result = yield useCase.getAllTemplates();
            expect(mockTemplateRepository.findAll).toHaveBeenCalledTimes(1);
            expect(result).toEqual(mockTemplates);
        }));
        it('should get template by ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.findById.mockResolvedValue(mockTemplate);
            const result = yield useCase.getTemplateById('test-template');
            expect(mockTemplateRepository.findById).toHaveBeenCalledWith('test-template');
            expect(result).toBe(mockTemplate);
        }));
        it('should search templates with criteria', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const criteria = { category: QueryTemplate_1.TemplateCategory.EXPLORATION };
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.findByCriteria.mockResolvedValue(mockTemplates);
            const result = yield useCase.searchTemplates(criteria);
            expect(mockTemplateRepository.findByCriteria).toHaveBeenCalledWith(criteria);
            expect(result).toEqual(mockTemplates);
        }));
        it('should get templates by category', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.findByCategory.mockResolvedValue(mockTemplates);
            const result = yield useCase.getTemplatesByCategory(QueryTemplate_1.TemplateCategory.EXPLORATION);
            expect(mockTemplateRepository.findByCategory).toHaveBeenCalledWith(QueryTemplate_1.TemplateCategory.EXPLORATION);
            expect(result).toEqual(mockTemplates);
        }));
        it('should get built-in templates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.getBuiltInTemplates.mockResolvedValue(mockTemplates);
            const result = yield useCase.getBuiltInTemplates();
            expect(mockTemplateRepository.getBuiltInTemplates).toHaveBeenCalledTimes(1);
            expect(result).toEqual(mockTemplates);
        }));
        it('should get custom templates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.getCustomTemplates.mockResolvedValue(mockTemplates);
            const result = yield useCase.getCustomTemplates();
            expect(mockTemplateRepository.getCustomTemplates).toHaveBeenCalledTimes(1);
            expect(result).toEqual(mockTemplates);
        }));
        it('should get recent templates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.getRecentlyUsed.mockResolvedValue(mockTemplates);
            const result = yield useCase.getRecentTemplates(5);
            expect(mockTemplateRepository.getRecentlyUsed).toHaveBeenCalledWith(5);
            expect(result).toEqual(mockTemplates);
        }));
    });
    describe('Template Management', () => {
        it('should save a template', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.save.mockResolvedValue(mockTemplate);
            const result = yield useCase.saveTemplate(mockTemplate);
            expect(mockTemplateRepository.save).toHaveBeenCalledWith(mockTemplate);
            expect(result).toBe(mockTemplate);
        }));
        it('should prevent saving built-in templates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const builtInTemplate = new QueryTemplate_1.QueryTemplate({
                id: 'builtin-test',
                metadata: mockTemplate.getMetadata(),
                layout: mockTemplate.getLayout(),
                isBuiltIn: true
            });
            yield expect(useCase.saveTemplate(builtInTemplate))
                .rejects.toThrow('Cannot save built-in templates');
        }));
        it('should create a custom template', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const nodes = new Map();
            const edges = new Map();
            const viewport = { x: 0, y: 0, zoom: 1 };
            mockTemplateRepository.create.mockResolvedValue(mockTemplate);
            const result = yield useCase.createCustomTemplate(nodes, edges, viewport, 'Custom Template', 'A custom template', QueryTemplate_1.TemplateCategory.CUSTOM, ['custom', 'test']);
            expect(mockTemplateRepository.create).toHaveBeenCalledTimes(1);
            expect(result).toBe(mockTemplate);
        }));
        it('should clone a template', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const clonedTemplate = mockTemplate.clone('cloned-id');
            mockTemplateRepository.findById.mockResolvedValue(mockTemplate);
            mockTemplateRepository.create.mockResolvedValue(clonedTemplate);
            const result = yield useCase.cloneTemplate('test-template', 'Cloned Template');
            expect(mockTemplateRepository.findById).toHaveBeenCalledWith('test-template');
            expect(mockTemplateRepository.create).toHaveBeenCalledTimes(1);
            expect(result).toBe(clonedTemplate);
        }));
        it('should throw error when cloning non-existent template', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.findById.mockResolvedValue(undefined);
            yield expect(useCase.cloneTemplate('nonexistent'))
                .rejects.toThrow('Template with ID nonexistent not found');
        }));
        it('should delete a template', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.findById.mockResolvedValue(mockTemplate);
            mockTemplateRepository.delete.mockResolvedValue(true);
            const result = yield useCase.deleteTemplate('test-template');
            expect(mockTemplateRepository.findById).toHaveBeenCalledWith('test-template');
            expect(mockTemplateRepository.delete).toHaveBeenCalledWith('test-template');
            expect(result).toBe(true);
        }));
        it('should prevent deleting built-in templates', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const builtInTemplate = new QueryTemplate_1.QueryTemplate({
                id: 'builtin-test',
                metadata: mockTemplate.getMetadata(),
                layout: mockTemplate.getLayout(),
                isBuiltIn: true
            });
            mockTemplateRepository.findById.mockResolvedValue(builtInTemplate);
            yield expect(useCase.deleteTemplate('builtin-test'))
                .rejects.toThrow('Cannot delete built-in templates');
        }));
    });
    describe('Template Instantiation', () => {
        it('should instantiate a template with valid parameters', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock a template with parameters
            const parameterizedTemplate = new QueryTemplate_1.QueryTemplate({
                id: 'param-template',
                metadata: mockTemplate.getMetadata(),
                layout: mockTemplate.getLayout(),
                parameters: [{
                        id: 'param1',
                        name: 'Test Param',
                        description: 'A test parameter',
                        type: 'entity',
                        required: true
                    }]
            });
            parameterizedTemplate.setParameterValue('param1', 'test-value');
            mockTemplateRepository.recordUsage.mockResolvedValue();
            const result = yield useCase.instantiateTemplate(parameterizedTemplate);
            expect(mockTemplateRepository.recordUsage).toHaveBeenCalledWith('param-template');
            expect(result).toHaveProperty('nodes');
            expect(result).toHaveProperty('edges');
        }));
        it('should throw error when instantiating template with invalid parameters', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const parameterizedTemplate = new QueryTemplate_1.QueryTemplate({
                id: 'param-template',
                metadata: mockTemplate.getMetadata(),
                layout: mockTemplate.getLayout(),
                parameters: [{
                        id: 'param1',
                        name: 'Test Param',
                        description: 'A test parameter',
                        type: 'entity',
                        required: true
                    }]
            });
            // Don't set the required parameter
            yield expect(useCase.instantiateTemplate(parameterizedTemplate))
                .rejects.toThrow('Template parameters are invalid');
        }));
    });
    describe('Import/Export', () => {
        it('should export templates as JSON', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockExportData = [{ id: 'test', name: 'Test' }];
            mockTemplateRepository.exportTemplates.mockResolvedValue(mockExportData);
            const result = yield useCase.exportTemplates(['test-template']);
            expect(mockTemplateRepository.exportTemplates).toHaveBeenCalledWith(['test-template']);
            expect(result).toBe(JSON.stringify(mockExportData, null, 2));
        }));
        it('should import templates from JSON', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const jsonData = JSON.stringify([{ id: 'test', name: 'Test' }]);
            const mockTemplates = [mockTemplate];
            mockTemplateRepository.importTemplates.mockResolvedValue(mockTemplates);
            const result = yield useCase.importTemplates(jsonData);
            expect(mockTemplateRepository.importTemplates).toHaveBeenCalledWith([{ id: 'test', name: 'Test' }]);
            expect(result).toEqual(mockTemplates);
        }));
        it('should throw error for invalid JSON in import', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const invalidJson = 'invalid json';
            yield expect(useCase.importTemplates(invalidJson))
                .rejects.toThrow('Failed to import templates');
        }));
        it('should throw error for non-array JSON in import', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const nonArrayJson = JSON.stringify({ not: 'array' });
            yield expect(useCase.importTemplates(nonArrayJson))
                .rejects.toThrow('Invalid JSON format: expected array of templates');
        }));
    });
    describe('Statistics and Analytics', () => {
        it('should get usage statistics', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockStats = {
                usageCount: 5,
                lastUsed: new Date(),
                averageParametersFilled: 2.5
            };
            mockTemplateRepository.getUsageStats.mockResolvedValue(mockStats);
            const result = yield useCase.getUsageStatistics('test-template');
            expect(mockTemplateRepository.getUsageStats).toHaveBeenCalledWith('test-template');
            expect(result).toEqual(mockStats);
        }));
        it('should get template preview information', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.findById.mockResolvedValue(mockTemplate);
            const result = yield useCase.getTemplatePreview('test-template');
            expect(result).toHaveProperty('sparqlQuery');
            expect(result).toHaveProperty('nodeCount');
            expect(result).toHaveProperty('edgeCount');
            expect(result).toHaveProperty('parameterCount');
            expect(result).toHaveProperty('complexity');
            expect(result.nodeCount).toBe(1);
            expect(result.edgeCount).toBe(0);
            expect(result.parameterCount).toBe(0);
        }));
        it('should throw error when previewing non-existent template', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.findById.mockResolvedValue(undefined);
            yield expect(useCase.getTemplatePreview('nonexistent'))
                .rejects.toThrow('Template with ID nonexistent not found');
        }));
    });
    describe('Template Validation', () => {
        it('should validate template parameters comprehensively', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const parameterizedTemplate = new QueryTemplate_1.QueryTemplate({
                id: 'param-template',
                metadata: mockTemplate.getMetadata(),
                layout: mockTemplate.getLayout(),
                parameters: [
                    {
                        id: 'required-param',
                        name: 'Required Parameter',
                        description: 'A required parameter',
                        type: 'entity',
                        required: true
                    },
                    {
                        id: 'optional-param',
                        name: 'Optional Parameter',
                        description: 'An optional parameter',
                        type: 'literal',
                        required: false
                    }
                ]
            });
            const result = yield useCase.validateTemplateParameters(parameterizedTemplate);
            expect(result.isValid).toBe(false);
            expect(result.errors).toContain('Parameter Required Parameter is required');
            expect(result.missingParameters).toContain('Required Parameter');
            expect(result.invalidParameters).toHaveLength(0);
        }));
    });
    describe('Cache Management', () => {
        it('should refresh template cache', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockTemplateRepository.refresh.mockResolvedValue();
            yield useCase.refreshTemplateCache();
            expect(mockTemplateRepository.refresh).toHaveBeenCalledTimes(1);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,