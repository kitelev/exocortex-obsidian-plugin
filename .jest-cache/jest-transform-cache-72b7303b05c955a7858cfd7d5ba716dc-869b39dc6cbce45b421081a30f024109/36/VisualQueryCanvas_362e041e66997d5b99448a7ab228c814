24cf7f1028c56bd190bfe5bf606df154
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisualQueryCanvas = void 0;
const tslib_1 = require("tslib");
const VisualQueryNode_1 = require("../../domain/visual/VisualQueryNode");
const VisualQueryEdge_1 = require("../../domain/visual/VisualQueryEdge");
const obsidian_1 = require("obsidian");
const TemplateSelectionPanel_1 = require("./TemplateSelectionPanel");
const TemplateParameterModal_1 = require("../modals/TemplateParameterModal");
const SaveTemplateModal_1 = require("../modals/SaveTemplateModal");
class VisualQueryCanvas {
    constructor(parentElement, optionsOrSparqlProcessor, sparqlProcessorOrOptions) {
        this.parentElement = parentElement;
        this.nodes = new Map();
        this.edges = new Map();
        this.selectedNodes = new Set();
        this.selectedEdges = new Set();
        this.isDragging = false;
        this.isPanning = false;
        this.isConnecting = false;
        this.currentMousePosition = { x: 0, y: 0 };
        this.viewportX = 0;
        this.viewportY = 0;
        this.zoom = 1;
        this.defaultOptions = {
            width: 800,
            height: 600,
            gridSize: 20,
            showGrid: true,
            zoomMin: 0.1,
            zoomMax: 5,
            zoomStep: 0.1,
            onQueryChange: () => { },
            onExecute: () => { },
            enableTemplates: true,
            templateUseCase: undefined,
            appInstance: undefined,
            allowPan: true,
            minZoom: 0.1,
            maxZoom: 5,
            onNodeSelect: () => { },
            onEdgeSelect: () => { },
            onNodeEdit: () => { },
            onEdgeEdit: () => { },
            onQueryGenerated: () => { },
            onExecuteQuery: () => { }
        };
        // Handle multiple constructor signatures for backward compatibility
        let options = {};
        let sparqlProcessor;
        if (optionsOrSparqlProcessor) {
            // Check if first param is SPARQLProcessor (old signature)
            if (typeof optionsOrSparqlProcessor === 'object' && 'executeQuery' in optionsOrSparqlProcessor) {
                sparqlProcessor = optionsOrSparqlProcessor;
                options = sparqlProcessorOrOptions || {};
            }
            // Check if first param is options (new signature: parentElement, options, sparqlProcessor)
            else if (typeof optionsOrSparqlProcessor === 'object') {
                options = optionsOrSparqlProcessor;
                if (sparqlProcessorOrOptions && 'executeQuery' in sparqlProcessorOrOptions) {
                    sparqlProcessor = sparqlProcessorOrOptions;
                }
            }
        }
        this.options = Object.assign(Object.assign({}, this.defaultOptions), options);
        this.sparqlProcessor = sparqlProcessor;
        this.createCanvas();
        this.attachEventListeners();
        this.render();
    }
    createCanvas() {
        this.container = document.createElement('div');
        this.container.className = 'exocortex-visual-query-canvas';
        this.container.style.cssText = `
            position: relative;
            width: ${this.options.width}px;
            height: ${this.options.height}px;
            border: 2px solid var(--background-modifier-border);
            border-radius: var(--radius-m);
            background: var(--background-primary);
            overflow: hidden;
            user-select: none;
        `;
        const svgNS = 'http://www.w3.org/2000/svg';
        this.svg = document.createElementNS(svgNS, 'svg');
        this.svg.setAttribute('width', '100%');
        this.svg.setAttribute('height', '100%');
        this.svg.style.cssText = 'cursor: grab;';
        this.gridGroup = document.createElementNS(svgNS, 'g');
        this.gridGroup.setAttribute('class', 'grid-group');
        this.svg.appendChild(this.gridGroup);
        this.edgesGroup = document.createElementNS(svgNS, 'g');
        this.edgesGroup.setAttribute('class', 'edges-group');
        this.svg.appendChild(this.edgesGroup);
        this.nodesGroup = document.createElementNS(svgNS, 'g');
        this.nodesGroup.setAttribute('class', 'nodes-group');
        this.svg.appendChild(this.nodesGroup);
        this.overlayGroup = document.createElementNS(svgNS, 'g');
        this.overlayGroup.setAttribute('class', 'overlay-group');
        this.svg.appendChild(this.overlayGroup);
        this.container.appendChild(this.svg);
        this.createControls();
        this.parentElement.appendChild(this.container);
        if (this.options.showGrid) {
            this.drawGrid();
        }
    }
    createControls() {
        const controls = document.createElement('div');
        controls.className = 'canvas-toolbar';
        controls.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 8px;
            padding: 8px;
            background: var(--background-secondary);
            border-radius: var(--radius-s);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            flex-wrap: wrap;
            max-width: 300px;
        `;
        // Template controls (if enabled)
        if (this.options.enableTemplates && this.options.templateUseCase) {
            const templatesBtn = this.createControlButton('Templates', () => this.showTemplateSelection());
            const saveTemplateBtn = this.createControlButton('Save Template', () => this.showSaveTemplateModal());
            controls.appendChild(templatesBtn);
            controls.appendChild(saveTemplateBtn);
            const templateSeparator = document.createElement('div');
            templateSeparator.style.cssText = 'width: 1px; background: var(--background-modifier-border); margin: 0 4px;';
            controls.appendChild(templateSeparator);
        }
        const addEntityBtn = this.createControlButton('Entity', () => this.addNode(VisualQueryNode_1.NodeType.ENTITY));
        const addVariableBtn = this.createControlButton('Variable', () => this.addNode(VisualQueryNode_1.NodeType.VARIABLE));
        const addLiteralBtn = this.createControlButton('Literal', () => this.addNode(VisualQueryNode_1.NodeType.LITERAL));
        const addFilterBtn = this.createControlButton('Filter', () => this.addNode(VisualQueryNode_1.NodeType.FILTER));
        const generateBtn = this.createControlButton('Generate', () => this.generateSPARQL());
        const executeBtn = this.createControlButton('Execute', () => this.executeQuery(), true);
        const clearBtn = this.createControlButton('Clear', () => this.clearCanvas());
        controls.appendChild(addEntityBtn);
        controls.appendChild(addVariableBtn);
        controls.appendChild(addLiteralBtn);
        controls.appendChild(addFilterBtn);
        controls.appendChild(generateBtn);
        controls.appendChild(executeBtn);
        controls.appendChild(clearBtn);
        this.container.appendChild(controls);
        const zoomControls = document.createElement('div');
        zoomControls.className = 'zoom-controls';
        zoomControls.style.cssText = `
            position: absolute;
            bottom: 10px;
            right: 10px;
            display: flex;
            gap: 4px;
            padding: 4px;
            background: var(--background-secondary);
            border-radius: var(--radius-s);
        `;
        const zoomInBtn = this.createZoomButton('+', () => this.zoomIn());
        const zoomOutBtn = this.createZoomButton('-', () => this.zoomOut());
        const zoomResetBtn = this.createZoomButton('âŸ²', () => this.resetZoom());
        zoomControls.appendChild(zoomOutBtn);
        zoomControls.appendChild(zoomResetBtn);
        zoomControls.appendChild(zoomInBtn);
        this.container.appendChild(zoomControls);
    }
    createControlButton(label, onClick, primary = false) {
        const button = document.createElement('button');
        button.textContent = label;
        button.className = primary ? 'mod-cta' : '';
        button.style.cssText = `
            padding: 6px 12px;
            border: none;
            border-radius: var(--radius-s);
            background: ${primary ? 'var(--interactive-accent)' : 'var(--interactive-normal)'};
            color: ${primary ? 'var(--text-on-accent)' : 'var(--text-normal)'};
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: background-color 0.15s ease;
        `;
        button.addEventListener('mouseenter', () => {
            button.style.background = primary ? 'var(--interactive-accent-hover)' : 'var(--interactive-hover)';
        });
        button.addEventListener('mouseleave', () => {
            button.style.background = primary ? 'var(--interactive-accent)' : 'var(--interactive-normal)';
        });
        button.addEventListener('click', onClick);
        return button;
    }
    createZoomButton(label, onClick) {
        const button = document.createElement('button');
        button.textContent = label;
        button.style.cssText = `
            width: 24px;
            height: 24px;
            border: none;
            border-radius: var(--radius-s);
            background: var(--interactive-normal);
            color: var(--text-normal);
            cursor: pointer;
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.15s ease;
        `;
        button.addEventListener('mouseenter', () => {
            button.style.background = 'var(--interactive-hover)';
        });
        button.addEventListener('mouseleave', () => {
            button.style.background = 'var(--interactive-normal)';
        });
        button.addEventListener('click', onClick);
        return button;
    }
    drawGrid() {
        const svgNS = 'http://www.w3.org/2000/svg';
        this.gridGroup.innerHTML = '';
        const pattern = document.createElementNS(svgNS, 'pattern');
        pattern.setAttribute('id', 'grid-pattern');
        pattern.setAttribute('width', this.options.gridSize.toString());
        pattern.setAttribute('height', this.options.gridSize.toString());
        pattern.setAttribute('patternUnits', 'userSpaceOnUse');
        const line1 = document.createElementNS(svgNS, 'line');
        line1.setAttribute('x1', '0');
        line1.setAttribute('y1', '0');
        line1.setAttribute('x2', this.options.gridSize.toString());
        line1.setAttribute('y2', '0');
        line1.setAttribute('stroke', 'var(--background-modifier-border)');
        line1.setAttribute('stroke-width', '0.5');
        line1.setAttribute('opacity', '0.3');
        const line2 = document.createElementNS(svgNS, 'line');
        line2.setAttribute('x1', '0');
        line2.setAttribute('y1', '0');
        line2.setAttribute('x2', '0');
        line2.setAttribute('y2', this.options.gridSize.toString());
        line2.setAttribute('stroke', 'var(--background-modifier-border)');
        line2.setAttribute('stroke-width', '0.5');
        line2.setAttribute('opacity', '0.3');
        pattern.appendChild(line1);
        pattern.appendChild(line2);
        const defs = document.createElementNS(svgNS, 'defs');
        defs.appendChild(pattern);
        this.svg.insertBefore(defs, this.svg.firstChild);
        const rect = document.createElementNS(svgNS, 'rect');
        rect.setAttribute('width', '100%');
        rect.setAttribute('height', '100%');
        rect.setAttribute('fill', 'url(#grid-pattern)');
        this.gridGroup.appendChild(rect);
    }
    attachEventListeners() {
        this.svg.addEventListener('mousedown', this.handleMouseDown.bind(this));
        this.svg.addEventListener('mousemove', this.handleMouseMove.bind(this));
        this.svg.addEventListener('mouseup', this.handleMouseUp.bind(this));
        this.svg.addEventListener('wheel', this.handleWheel.bind(this));
        this.svg.addEventListener('contextmenu', this.handleContextMenu.bind(this));
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
    }
    handleMouseDown(e) {
        e.preventDefault();
        const point = this.getMousePosition(e);
        this.dragStartPosition = point;
        if (e.button === 1 || (e.button === 0 && e.shiftKey)) {
            this.isPanning = true;
            this.svg.style.cursor = 'grabbing';
            return;
        }
        const clickedNode = this.getNodeAt(point);
        const clickedEdge = this.getEdgeAt(point);
        if (e.button === 0) {
            if (clickedNode) {
                if (e.ctrlKey) {
                    this.toggleNodeSelection(clickedNode);
                }
                else if (e.altKey) {
                    this.startConnection(clickedNode);
                }
                else {
                    if (!this.selectedNodes.has(clickedNode)) {
                        this.clearSelection();
                        this.selectNode(clickedNode);
                    }
                    this.isDragging = true;
                }
            }
            else if (clickedEdge) {
                this.clearSelection();
                this.selectEdge(clickedEdge);
            }
            else {
                this.clearSelection();
            }
        }
    }
    handleMouseMove(e) {
        const point = this.getMousePosition(e);
        this.currentMousePosition = point;
        if (this.isPanning && this.dragStartPosition) {
            const dx = point.x - this.dragStartPosition.x;
            const dy = point.y - this.dragStartPosition.y;
            this.viewportX += dx / this.zoom;
            this.viewportY += dy / this.zoom;
            this.dragStartPosition = point;
            this.updateTransform();
        }
        else if (this.isDragging && this.dragStartPosition) {
            const dx = (point.x - this.dragStartPosition.x) / this.zoom;
            const dy = (point.y - this.dragStartPosition.y) / this.zoom;
            this.selectedNodes.forEach(nodeId => {
                const node = this.nodes.get(nodeId);
                if (node) {
                    const pos = node.getPosition();
                    node.setPosition({
                        x: pos.x + dx,
                        y: pos.y + dy
                    });
                }
            });
            this.dragStartPosition = point;
            this.render();
        }
        else if (this.isConnecting && this.tempConnectionLine) {
            const svgPoint = this.getSVGPoint(point);
            this.tempConnectionLine.setAttribute('x2', svgPoint.x.toString());
            this.tempConnectionLine.setAttribute('y2', svgPoint.y.toString());
        }
    }
    handleMouseUp(e) {
        if (this.isConnecting) {
            const point = this.getMousePosition(e);
            const targetNode = this.getNodeAt(point);
            if (targetNode && targetNode !== this.connectionSourceNode) {
                this.createEdge(this.connectionSourceNode, targetNode);
            }
            this.endConnection();
        }
        this.isDragging = false;
        this.isPanning = false;
        this.dragStartPosition = undefined;
        this.svg.style.cursor = 'grab';
    }
    handleWheel(e) {
        e.preventDefault();
        const delta = e.deltaY > 0 ? -this.options.zoomStep : this.options.zoomStep;
        const newZoom = Math.max(this.options.zoomMin, Math.min(this.options.zoomMax, this.zoom + delta));
        if (newZoom !== this.zoom) {
            const point = this.getMousePosition(e);
            const scaleFactor = newZoom / this.zoom;
            this.viewportX = point.x - (point.x - this.viewportX) * scaleFactor;
            this.viewportY = point.y - (point.y - this.viewportY) * scaleFactor;
            this.zoom = newZoom;
            this.updateTransform();
        }
    }
    handleContextMenu(e) {
        e.preventDefault();
        const point = this.getMousePosition(e);
        const clickedNode = this.getNodeAt(point);
        const clickedEdge = this.getEdgeAt(point);
        if (clickedNode) {
            this.showNodeContextMenu(clickedNode, point);
        }
        else if (clickedEdge) {
            this.showEdgeContextMenu(clickedEdge, point);
        }
    }
    handleKeyDown(e) {
        if (!this.container.contains(document.activeElement))
            return;
        if (e.key === 'Delete' || e.key === 'Backspace') {
            e.preventDefault();
            this.deleteSelected();
        }
        else if (e.key === 'a' && e.ctrlKey) {
            e.preventDefault();
            this.selectAll();
        }
        else if (e.key === 'Escape') {
            this.clearSelection();
        }
    }
    getMousePosition(e) {
        const rect = this.svg.getBoundingClientRect();
        return {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
    }
    getSVGPoint(point) {
        return {
            x: (point.x - this.viewportX) / this.zoom,
            y: (point.y - this.viewportY) / this.zoom
        };
    }
    getNodeAt(point) {
        const svgPoint = this.getSVGPoint(point);
        for (const [id, node] of this.nodes) {
            if (node.containsPoint(svgPoint.x, svgPoint.y)) {
                return id;
            }
        }
        return null;
    }
    getEdgeAt(point) {
        const svgPoint = this.getSVGPoint(point);
        const threshold = 5;
        for (const [id, edge] of this.edges) {
            const source = this.nodes.get(edge.getSourceNodeId());
            const target = this.nodes.get(edge.getTargetNodeId());
            if (source && target) {
                const labelPos = edge.getLabelPosition(source, target);
                const distance = Math.sqrt(Math.pow(svgPoint.x - labelPos.x, 2) +
                    Math.pow(svgPoint.y - labelPos.y, 2));
                if (distance < threshold) {
                    return id;
                }
            }
        }
        return null;
    }
    startConnection(nodeId) {
        this.isConnecting = true;
        this.connectionSourceNode = nodeId;
        const node = this.nodes.get(nodeId);
        if (!node)
            return;
        const svgNS = 'http://www.w3.org/2000/svg';
        this.tempConnectionLine = document.createElementNS(svgNS, 'line');
        const sourcePoint = node.getConnectionPoints().right;
        this.tempConnectionLine.setAttribute('x1', sourcePoint.x.toString());
        this.tempConnectionLine.setAttribute('y1', sourcePoint.y.toString());
        this.tempConnectionLine.setAttribute('x2', sourcePoint.x.toString());
        this.tempConnectionLine.setAttribute('y2', sourcePoint.y.toString());
        this.tempConnectionLine.setAttribute('stroke', 'var(--text-accent)');
        this.tempConnectionLine.setAttribute('stroke-width', '2');
        this.tempConnectionLine.setAttribute('stroke-dasharray', '5,5');
        this.tempConnectionLine.setAttribute('opacity', '0.6');
        this.overlayGroup.appendChild(this.tempConnectionLine);
    }
    endConnection() {
        this.isConnecting = false;
        this.connectionSourceNode = undefined;
        if (this.tempConnectionLine) {
            this.tempConnectionLine.remove();
            this.tempConnectionLine = undefined;
        }
    }
    createEdge(sourceId, targetId) {
        const edge = VisualQueryEdge_1.VisualQueryEdge.createProperty(sourceId, targetId, 'property', undefined);
        this.edges.set(edge.getId(), edge);
        this.render();
        this.updateQuery();
    }
    selectNode(nodeId) {
        this.selectedNodes.add(nodeId);
        const node = this.nodes.get(nodeId);
        if (node) {
            node.setSelected(true);
        }
        this.render();
    }
    selectEdge(edgeId) {
        this.selectedEdges.add(edgeId);
        const edge = this.edges.get(edgeId);
        if (edge) {
            edge.setSelected(true);
        }
        this.render();
    }
    toggleNodeSelection(nodeId) {
        if (this.selectedNodes.has(nodeId)) {
            this.selectedNodes.delete(nodeId);
            const node = this.nodes.get(nodeId);
            if (node) {
                node.setSelected(false);
            }
        }
        else {
            this.selectNode(nodeId);
        }
        this.render();
    }
    clearSelection() {
        this.selectedNodes.forEach(id => {
            const node = this.nodes.get(id);
            if (node)
                node.setSelected(false);
        });
        this.selectedEdges.forEach(id => {
            const edge = this.edges.get(id);
            if (edge)
                edge.setSelected(false);
        });
        this.selectedNodes.clear();
        this.selectedEdges.clear();
        this.render();
    }
    selectAll() {
        this.nodes.forEach((node, id) => {
            this.selectedNodes.add(id);
            node.setSelected(true);
        });
        this.edges.forEach((edge, id) => {
            this.selectedEdges.add(id);
            edge.setSelected(true);
        });
        this.render();
    }
    deleteSelected() {
        this.selectedEdges.forEach(id => {
            this.edges.delete(id);
        });
        this.selectedNodes.forEach(id => {
            this.edges.forEach((edge, edgeId) => {
                if (edge.getSourceNodeId() === id || edge.getTargetNodeId() === id) {
                    this.edges.delete(edgeId);
                }
            });
            this.nodes.delete(id);
        });
        this.clearSelection();
        this.render();
        this.updateQuery();
    }
    showNodeContextMenu(nodeId, position) {
        const node = this.nodes.get(nodeId);
        if (!node)
            return;
        const menu = document.createElement('div');
        menu.className = 'context-menu';
        menu.style.cssText = `
            position: absolute;
            left: ${position.x}px;
            top: ${position.y}px;
            background: var(--background-secondary);
            border: 1px solid var(--background-modifier-border);
            border-radius: var(--radius-s);
            padding: 4px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            z-index: 1000;
        `;
        const editOption = this.createMenuOption('Edit Label', () => {
            const newLabel = prompt('Enter new label:', node.getLabel());
            if (newLabel) {
                node.setLabel(newLabel);
                this.render();
                this.updateQuery();
            }
            menu.remove();
        });
        const deleteOption = this.createMenuOption('Delete', () => {
            this.nodes.delete(nodeId);
            this.edges.forEach((edge, id) => {
                if (edge.getSourceNodeId() === nodeId || edge.getTargetNodeId() === nodeId) {
                    this.edges.delete(id);
                }
            });
            this.render();
            this.updateQuery();
            menu.remove();
        });
        menu.appendChild(editOption);
        menu.appendChild(deleteOption);
        this.container.appendChild(menu);
        setTimeout(() => {
            document.addEventListener('click', () => menu.remove(), { once: true });
        }, 10);
    }
    showEdgeContextMenu(edgeId, position) {
        const edge = this.edges.get(edgeId);
        if (!edge)
            return;
        const menu = document.createElement('div');
        menu.className = 'context-menu';
        menu.style.cssText = `
            position: absolute;
            left: ${position.x}px;
            top: ${position.y}px;
            background: var(--background-secondary);
            border: 1px solid var(--background-modifier-border);
            border-radius: var(--radius-s);
            padding: 4px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
            z-index: 1000;
        `;
        const editOption = this.createMenuOption('Edit Property', () => {
            const newLabel = prompt('Enter property name:', edge.getLabel());
            if (newLabel) {
                edge.setLabel(newLabel);
                this.render();
                this.updateQuery();
            }
            menu.remove();
        });
        const toggleOptionalOption = this.createMenuOption(edge.isOptional() ? 'Make Required' : 'Make Optional', () => {
            const newEdge = edge.isOptional()
                ? VisualQueryEdge_1.VisualQueryEdge.createProperty(edge.getSourceNodeId(), edge.getTargetNodeId(), edge.getLabel(), edge.getPropertyUri())
                : VisualQueryEdge_1.VisualQueryEdge.createOptional(edge.getSourceNodeId(), edge.getTargetNodeId(), edge.getLabel(), edge.getPropertyUri());
            this.edges.delete(edgeId);
            this.edges.set(newEdge.getId(), newEdge);
            this.render();
            this.updateQuery();
            menu.remove();
        });
        const deleteOption = this.createMenuOption('Delete', () => {
            this.edges.delete(edgeId);
            this.render();
            this.updateQuery();
            menu.remove();
        });
        menu.appendChild(editOption);
        menu.appendChild(toggleOptionalOption);
        menu.appendChild(deleteOption);
        this.container.appendChild(menu);
        setTimeout(() => {
            document.addEventListener('click', () => menu.remove(), { once: true });
        }, 10);
    }
    createMenuOption(label, onClick) {
        const option = document.createElement('div');
        option.textContent = label;
        option.style.cssText = `
            padding: 6px 12px;
            cursor: pointer;
            border-radius: var(--radius-s);
            font-size: 12px;
            transition: background-color 0.15s ease;
        `;
        option.addEventListener('mouseenter', () => {
            option.style.background = 'var(--background-modifier-hover)';
        });
        option.addEventListener('mouseleave', () => {
            option.style.background = '';
        });
        option.addEventListener('click', onClick);
        return option;
    }
    updateTransform() {
        const transform = `translate(${this.viewportX}px, ${this.viewportY}px) scale(${this.zoom})`;
        this.nodesGroup.style.transform = transform;
        this.edgesGroup.style.transform = transform;
        this.gridGroup.style.transform = transform;
    }
    render() {
        this.renderEdges();
        this.renderNodes();
    }
    renderNodes() {
        const svgNS = 'http://www.w3.org/2000/svg';
        this.nodesGroup.innerHTML = '';
        this.nodes.forEach(node => {
            const g = document.createElementNS(svgNS, 'g');
            g.setAttribute('class', 'query-node');
            const pos = node.getPosition();
            const dims = node.getDimensions();
            const rect = document.createElementNS(svgNS, 'rect');
            rect.setAttribute('x', pos.x.toString());
            rect.setAttribute('y', pos.y.toString());
            rect.setAttribute('width', dims.width.toString());
            rect.setAttribute('height', dims.height.toString());
            rect.setAttribute('rx', '4');
            rect.setAttribute('ry', '4');
            const colors = this.getNodeColors(node.getType());
            rect.setAttribute('fill', colors.fill);
            rect.setAttribute('stroke', node.isSelected() ? 'var(--text-accent)' : colors.stroke);
            rect.setAttribute('stroke-width', node.isSelected() ? '2' : '1');
            const text = document.createElementNS(svgNS, 'text');
            text.setAttribute('x', (pos.x + dims.width / 2).toString());
            text.setAttribute('y', (pos.y + dims.height / 2 + 4).toString());
            text.setAttribute('text-anchor', 'middle');
            text.setAttribute('fill', colors.text);
            text.setAttribute('font-size', '12');
            text.setAttribute('font-weight', '500');
            text.textContent = node.getLabel();
            g.appendChild(rect);
            g.appendChild(text);
            this.nodesGroup.appendChild(g);
        });
    }
    renderEdges() {
        const svgNS = 'http://www.w3.org/2000/svg';
        this.edgesGroup.innerHTML = '';
        this.edges.forEach(edge => {
            const source = this.nodes.get(edge.getSourceNodeId());
            const target = this.nodes.get(edge.getTargetNodeId());
            if (!source || !target)
                return;
            const g = document.createElementNS(svgNS, 'g');
            g.setAttribute('class', 'query-edge');
            const path = document.createElementNS(svgNS, 'path');
            path.setAttribute('d', edge.calculatePath(source, target));
            path.setAttribute('fill', 'none');
            path.setAttribute('stroke', edge.isSelected() ? 'var(--text-accent)' : 'var(--text-muted)');
            path.setAttribute('stroke-width', edge.isSelected() ? '2' : '1');
            if (edge.isOptional()) {
                path.setAttribute('stroke-dasharray', '5,5');
            }
            const labelPos = edge.getLabelPosition(source, target);
            const labelBg = document.createElementNS(svgNS, 'rect');
            const labelText = document.createElementNS(svgNS, 'text');
            labelText.setAttribute('x', labelPos.x.toString());
            labelText.setAttribute('y', labelPos.y.toString());
            labelText.setAttribute('text-anchor', 'middle');
            labelText.setAttribute('fill', 'var(--text-normal)');
            labelText.setAttribute('font-size', '10');
            labelText.textContent = edge.getLabel();
            const bbox = { width: edge.getLabel().length * 6 + 8, height: 16 };
            labelBg.setAttribute('x', (labelPos.x - bbox.width / 2).toString());
            labelBg.setAttribute('y', (labelPos.y - bbox.height / 2).toString());
            labelBg.setAttribute('width', bbox.width.toString());
            labelBg.setAttribute('height', bbox.height.toString());
            labelBg.setAttribute('fill', 'var(--background-primary)');
            labelBg.setAttribute('rx', '2');
            g.appendChild(path);
            g.appendChild(labelBg);
            g.appendChild(labelText);
            this.edgesGroup.appendChild(g);
        });
    }
    getNodeColors(type) {
        const isDark = document.body.classList.contains('theme-dark');
        const lightColors = {
            [VisualQueryNode_1.NodeType.ENTITY]: { fill: '#e3f2fd', stroke: '#1976d2', text: '#0d47a1' },
            [VisualQueryNode_1.NodeType.VARIABLE]: { fill: '#fff3e0', stroke: '#f57c00', text: '#e65100' },
            [VisualQueryNode_1.NodeType.LITERAL]: { fill: '#f3e5f5', stroke: '#7b1fa2', text: '#4a148c' },
            [VisualQueryNode_1.NodeType.FILTER]: { fill: '#e8f5e8', stroke: '#388e3c', text: '#1b5e20' }
        };
        const darkColors = {
            [VisualQueryNode_1.NodeType.ENTITY]: { fill: 'rgba(33, 150, 243, 0.2)', stroke: '#2196f3', text: '#90caf9' },
            [VisualQueryNode_1.NodeType.VARIABLE]: { fill: 'rgba(255, 152, 0, 0.2)', stroke: '#ff9800', text: '#ffb74d' },
            [VisualQueryNode_1.NodeType.LITERAL]: { fill: 'rgba(156, 39, 176, 0.2)', stroke: '#9c27b0', text: '#ce93d8' },
            [VisualQueryNode_1.NodeType.FILTER]: { fill: 'rgba(76, 175, 80, 0.2)', stroke: '#4caf50', text: '#81c784' }
        };
        return isDark ? darkColors[type] : lightColors[type];
    }
    addNode(nodeOrType) {
        var _a, _b;
        if (typeof nodeOrType === 'object' && 'getId' in nodeOrType) {
            // Direct node addition for testing/programmatic use
            const node = nodeOrType;
            this.nodes.set(node.getId(), node);
            (_b = (_a = this.options).onNodeSelect) === null || _b === void 0 ? void 0 : _b.call(_a, node);
            this.render();
            this.updateQuery();
            return;
        }
        // Interactive node creation
        const type = nodeOrType;
        const centerX = (this.options.width / 2 - this.viewportX) / this.zoom;
        const centerY = (this.options.height / 2 - this.viewportY) / this.zoom;
        let node;
        switch (type) {
            case VisualQueryNode_1.NodeType.ENTITY:
                const entityName = prompt('Enter entity name:');
                if (!entityName)
                    return;
                node = VisualQueryNode_1.VisualQueryNode.createEntity(entityName, undefined, { x: centerX, y: centerY });
                break;
            case VisualQueryNode_1.NodeType.VARIABLE:
                const varName = prompt('Enter variable name (without ?):');
                if (!varName)
                    return;
                node = VisualQueryNode_1.VisualQueryNode.createVariable(varName, { x: centerX, y: centerY });
                break;
            case VisualQueryNode_1.NodeType.LITERAL:
                const literalValue = prompt('Enter literal value:');
                if (!literalValue)
                    return;
                node = VisualQueryNode_1.VisualQueryNode.createLiteral(literalValue, { x: centerX, y: centerY });
                break;
            case VisualQueryNode_1.NodeType.FILTER:
                const filterExpr = prompt('Enter filter expression:');
                if (!filterExpr)
                    return;
                node = VisualQueryNode_1.VisualQueryNode.createFilter(filterExpr, { x: centerX, y: centerY });
                break;
            default:
                return;
        }
        this.nodes.set(node.getId(), node);
        this.render();
        this.updateQuery();
    }
    addEdge(edge) {
        var _a, _b;
        // Validate that both source and target nodes exist
        const sourceExists = this.nodes.has(edge.getSourceNodeId());
        const targetExists = this.nodes.has(edge.getTargetNodeId());
        if (!sourceExists || !targetExists) {
            console.warn('Cannot add edge: source or target node not found');
            return;
        }
        this.edges.set(edge.getId(), edge);
        (_b = (_a = this.options).onEdgeSelect) === null || _b === void 0 ? void 0 : _b.call(_a, edge);
        this.render();
        this.updateQuery();
    }
    getSelectedNodes() {
        return Array.from(this.selectedNodes);
    }
    getSelectedEdges() {
        return Array.from(this.selectedEdges);
    }
    exportToSVG() {
        const serializer = new XMLSerializer();
        return serializer.serializeToString(this.svg);
    }
    updateQuery() {
        const sparql = this.generateSPARQL();
        this.options.onQueryChange(sparql);
        if (this.options.onQueryGenerated) {
            this.options.onQueryGenerated(sparql);
        }
    }
    generateSPARQL() {
        var _a, _b, _c, _d;
        if (this.nodes.size === 0) {
            const query = 'SELECT *\nWHERE {\n  ?s ?p ?o .\n}';
            (_b = (_a = this.options).onQueryGenerated) === null || _b === void 0 ? void 0 : _b.call(_a, query);
            return query;
        }
        const variables = new Set();
        const patterns = [];
        const filters = [];
        const optionalPatterns = [];
        this.nodes.forEach(node => {
            if (node.getType() === VisualQueryNode_1.NodeType.VARIABLE) {
                variables.add(node.toSPARQLElement());
            }
            else if (node.getType() === VisualQueryNode_1.NodeType.FILTER) {
                filters.push(`FILTER (${node.getLabel()})`);
            }
        });
        this.edges.forEach(edge => {
            const source = this.nodes.get(edge.getSourceNodeId());
            const target = this.nodes.get(edge.getTargetNodeId());
            if (source && target) {
                const pattern = `${source.toSPARQLElement()} ${edge.toSPARQLPredicate()} ${target.toSPARQLElement()}`;
                if (edge.isOptional()) {
                    optionalPatterns.push(pattern);
                }
                else {
                    patterns.push(pattern);
                }
                if (source.getType() === VisualQueryNode_1.NodeType.VARIABLE) {
                    variables.add(source.toSPARQLElement());
                }
                if (target.getType() === VisualQueryNode_1.NodeType.VARIABLE) {
                    variables.add(target.toSPARQLElement());
                }
            }
        });
        if (variables.size === 0 && patterns.length === 0) {
            return '';
        }
        let query = `SELECT ${variables.size > 0 ? Array.from(variables).join(' ') : '*'}\n`;
        query += 'WHERE {\n';
        patterns.forEach(pattern => {
            query += `  ${pattern} .\n`;
        });
        optionalPatterns.forEach(pattern => {
            query += `  OPTIONAL { ${pattern} }\n`;
        });
        filters.forEach(filter => {
            query += `  ${filter}\n`;
        });
        query += '}';
        (_d = (_c = this.options).onQueryGenerated) === null || _d === void 0 ? void 0 : _d.call(_c, query);
        return query;
    }
    executeQuery() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const sparql = this.generateSPARQL();
            if (!sparql) {
                new obsidian_1.Notice('Please create a query first');
                return;
            }
            // Call the execute query callback
            (_b = (_a = this.options).onExecuteQuery) === null || _b === void 0 ? void 0 : _b.call(_a);
            if (this.sparqlProcessor) {
                try {
                    const result = yield this.sparqlProcessor.executeQuery(sparql);
                    this.options.onExecute(sparql);
                    new obsidian_1.Notice(`Query executed: ${result.results.length} results`);
                }
                catch (error) {
                    new obsidian_1.Notice(`Query error: ${error.message}`);
                }
            }
            else {
                this.options.onExecute(sparql);
            }
        });
    }
    clearCanvas() {
        this.nodes.clear();
        this.edges.clear();
        this.clearSelection();
        this.render();
        this.updateQuery();
    }
    zoomIn() {
        this.zoom = Math.min(this.options.zoomMax, this.zoom + this.options.zoomStep);
        this.updateTransform();
    }
    zoomOut() {
        this.zoom = Math.max(this.options.zoomMin, this.zoom - this.options.zoomStep);
        this.updateTransform();
    }
    resetZoom() {
        this.zoom = 1;
        this.viewportX = 0;
        this.viewportY = 0;
        this.updateTransform();
    }
    showTemplateSelection() {
        if (!this.options.templateUseCase) {
            new obsidian_1.Notice('Template functionality not available');
            return;
        }
        const modalContainer = document.createElement('div');
        modalContainer.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        `;
        const templatePanel = new TemplateSelectionPanel_1.TemplateSelectionPanel(modalContainer, this.options.templateUseCase.getTemplateRepository(), {
            showPreview: true,
            allowCustomTemplates: true,
            onTemplateSelect: (template) => {
                this.loadTemplate(template);
                modalContainer.remove();
            },
            onClose: () => {
                modalContainer.remove();
            }
        });
        document.body.appendChild(modalContainer);
        // Close on background click
        modalContainer.addEventListener('click', (e) => {
            if (e.target === modalContainer) {
                modalContainer.remove();
            }
        });
    }
    loadTemplate(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                if (template.getParameters().length > 0) {
                    // Show parameter input modal
                    if (!this.options.appInstance) {
                        new obsidian_1.Notice('Cannot configure template parameters - app instance not available');
                        return;
                    }
                    const parameterModal = new TemplateParameterModal_1.TemplateParameterModal(this.options.appInstance, template, {
                        onSubmit: (configuredTemplate, parameterValues) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                            yield this.instantiateTemplate(configuredTemplate);
                        }),
                        onCancel: () => {
                            // User cancelled parameter configuration
                        }
                    });
                    parameterModal.open();
                }
                else {
                    // Template has no parameters, instantiate directly
                    yield this.instantiateTemplate(template);
                }
            }
            catch (error) {
                console.error('Failed to load template:', error);
                new obsidian_1.Notice(`Failed to load template: ${error.message}`);
            }
        });
    }
    instantiateTemplate(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const { nodes, edges } = yield this.options.templateUseCase.instantiateTemplate(template);
                // Clear current canvas
                this.clearCanvas();
                // Add nodes to canvas
                nodes.forEach(node => {
                    this.nodes.set(node.getId(), node);
                });
                // Add edges to canvas
                edges.forEach(edge => {
                    this.edges.set(edge.getId(), edge);
                });
                // Update display
                this.render();
                this.updateQuery();
                new obsidian_1.Notice(`Template "${template.getMetadata().name}" loaded successfully`);
            }
            catch (error) {
                console.error('Failed to instantiate template:', error);
                new obsidian_1.Notice(`Failed to apply template: ${error.message}`);
            }
        });
    }
    showSaveTemplateModal() {
        if (!this.options.templateUseCase || !this.options.appInstance) {
            new obsidian_1.Notice('Template functionality not available');
            return;
        }
        if (this.nodes.size === 0) {
            new obsidian_1.Notice('Create a query first before saving as template');
            return;
        }
        const saveModal = new SaveTemplateModal_1.SaveTemplateModal(this.options.appInstance, {
            nodes: this.nodes,
            edges: this.edges,
            viewport: {
                x: this.viewportX,
                y: this.viewportY,
                zoom: this.zoom
            },
            sparqlQuery: this.generateSPARQL(),
            onSave: (templateData) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                try {
                    const template = yield this.options.templateUseCase.createCustomTemplate(this.nodes, this.edges, {
                        x: this.viewportX,
                        y: this.viewportY,
                        zoom: this.zoom
                    }, templateData.name, templateData.description, templateData.category, templateData.tags);
                    new obsidian_1.Notice(`Template "${template.getMetadata().name}" saved successfully`);
                }
                catch (error) {
                    console.error('Failed to save template:', error);
                    new obsidian_1.Notice(`Failed to save template: ${error.message}`);
                }
            }),
            onCancel: () => {
                // User cancelled save
            }
        });
        saveModal.open();
    }
    loadFromTemplate(template) {
        this.loadTemplate(template);
    }
    getCurrentCanvasState() {
        return {
            nodes: new Map(this.nodes),
            edges: new Map(this.edges),
            viewport: {
                x: this.viewportX,
                y: this.viewportY,
                zoom: this.zoom
            }
        };
    }
    // Public getters for testing and external access
    getNodes() {
        return new Map(this.nodes);
    }
    getEdges() {
        return new Map(this.edges);
    }
    removeNode(nodeId) {
        // Remove associated edges first
        this.edges.forEach((edge, edgeId) => {
            if (edge.getSourceNodeId() === nodeId || edge.getTargetNodeId() === nodeId) {
                this.edges.delete(edgeId);
            }
        });
        // Remove the node
        this.nodes.delete(nodeId);
        // Update selection
        this.selectedNodes.delete(nodeId);
        // Re-render and update query
        this.render();
        this.updateQuery();
    }
    removeEdge(edgeId) {
        this.edges.delete(edgeId);
        this.selectedEdges.delete(edgeId);
        this.render();
        this.updateQuery();
    }
    zoomToFit() {
        if (this.nodes.size === 0) {
            this.resetZoom();
            return;
        }
        let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
        this.nodes.forEach(node => {
            const pos = node.getPosition();
            const dims = node.getDimensions();
            minX = Math.min(minX, pos.x);
            minY = Math.min(minY, pos.y);
            maxX = Math.max(maxX, pos.x + dims.width);
            maxY = Math.max(maxY, pos.y + dims.height);
        });
        const contentWidth = maxX - minX;
        const contentHeight = maxY - minY;
        const centerX = minX + contentWidth / 2;
        const centerY = minY + contentHeight / 2;
        // Calculate zoom to fit with padding
        const padding = 50;
        const availableWidth = this.options.width - 2 * padding;
        const availableHeight = this.options.height - 2 * padding;
        const scaleX = availableWidth / contentWidth;
        const scaleY = availableHeight / contentHeight;
        const newZoom = Math.min(scaleX, scaleY, this.options.zoomMax);
        // Set new zoom and center viewport
        this.zoom = Math.max(this.options.zoomMin, newZoom);
        this.viewportX = this.options.width / 2 - centerX * this.zoom;
        this.viewportY = this.options.height / 2 - centerY * this.zoom;
        this.updateTransform();
    }
    exportToJSON() {
        const canvasData = {
            version: '1.0',
            nodes: Array.from(this.nodes.entries()).map(([id, node]) => ({
                id,
                type: node.getType(),
                label: node.getLabel(),
                position: node.getPosition(),
                uri: node.getEntityUri ? node.getEntityUri() : undefined
            })),
            edges: Array.from(this.edges.entries()).map(([id, edge]) => ({
                id,
                sourceNodeId: edge.getSourceNodeId(),
                targetNodeId: edge.getTargetNodeId(),
                label: edge.getLabel(),
                type: edge.getType(),
                optional: edge.isOptional(),
                propertyUri: edge.getPropertyUri()
            })),
            viewport: {
                x: this.viewportX,
                y: this.viewportY,
                zoom: this.zoom
            }
        };
        return JSON.stringify(canvasData, null, 2);
    }
    importFromJSON(jsonString) {
        try {
            const data = JSON.parse(jsonString);
            // Validate format
            if (!data.nodes || !data.edges) {
                console.warn('Invalid canvas data format');
                return false;
            }
            // Clear current content
            this.clearCanvas();
            // Import nodes
            data.nodes.forEach((nodeData) => {
                try {
                    let node;
                    switch (nodeData.type) {
                        case VisualQueryNode_1.NodeType.ENTITY:
                            node = VisualQueryNode_1.VisualQueryNode.createEntity(nodeData.label, nodeData.uri, nodeData.position);
                            break;
                        case VisualQueryNode_1.NodeType.VARIABLE:
                            node = VisualQueryNode_1.VisualQueryNode.createVariable(nodeData.label, nodeData.position);
                            break;
                        case VisualQueryNode_1.NodeType.LITERAL:
                            node = VisualQueryNode_1.VisualQueryNode.createLiteral(nodeData.label, nodeData.position);
                            break;
                        case VisualQueryNode_1.NodeType.FILTER:
                            node = VisualQueryNode_1.VisualQueryNode.createFilter(nodeData.label, nodeData.position);
                            break;
                        default:
                            console.warn(`Unknown node type: ${nodeData.type}`);
                            return;
                    }
                    this.nodes.set(nodeData.id, node);
                }
                catch (error) {
                    console.warn(`Failed to import node ${nodeData.id}:`, error);
                }
            });
            // Import edges
            data.edges.forEach((edgeData) => {
                try {
                    let edge;
                    if (edgeData.optional) {
                        edge = VisualQueryEdge_1.VisualQueryEdge.createOptional(edgeData.sourceNodeId, edgeData.targetNodeId, edgeData.label, edgeData.propertyUri);
                    }
                    else {
                        edge = VisualQueryEdge_1.VisualQueryEdge.createProperty(edgeData.sourceNodeId, edgeData.targetNodeId, edgeData.label, edgeData.propertyUri);
                    }
                    this.edges.set(edgeData.id, edge);
                }
                catch (error) {
                    console.warn(`Failed to import edge ${edgeData.id}:`, error);
                }
            });
            // Restore viewport
            if (data.viewport) {
                this.viewportX = data.viewport.x || 0;
                this.viewportY = data.viewport.y || 0;
                this.zoom = data.viewport.zoom || 1;
                this.updateTransform();
            }
            // Re-render
            this.render();
            this.updateQuery();
            return true;
        }
        catch (error) {
            console.warn('Failed to import canvas data:', error);
            return false;
        }
    }
    destroy() {
        this.svg.removeEventListener('mousedown', this.handleMouseDown.bind(this));
        this.svg.removeEventListener('mousemove', this.handleMouseMove.bind(this));
        this.svg.removeEventListener('mouseup', this.handleMouseUp.bind(this));
        this.svg.removeEventListener('wheel', this.handleWheel.bind(this));
        this.svg.removeEventListener('contextmenu', this.handleContextMenu.bind(this));
        document.removeEventListener('keydown', this.handleKeyDown.bind(this));
        // Clear all nodes and edges to ensure cleanup
        this.nodes.clear();
        this.edges.clear();
        this.clearSelection();
        if (this.container && this.container.parentNode) {
            this.container.parentNode.removeChild(this.container);
        }
    }
}
exports.VisualQueryCanvas = VisualQueryCanvas;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,