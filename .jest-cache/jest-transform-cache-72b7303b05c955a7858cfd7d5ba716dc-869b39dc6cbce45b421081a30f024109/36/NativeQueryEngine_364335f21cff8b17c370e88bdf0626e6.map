{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/NativeQueryEngine.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/query-engines/NativeQueryEngine.ts"],"sourcesContent":["import {\n  IQueryEngine,\n  QueryResult,\n  QueryEngineType,\n  QueryContext,\n} from \"../../domain/ports/IQueryEngine\";\nimport { App, TFile, TFolder, MetadataCache, Vault } from \"obsidian\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Native query engine that works without Dataview/Datacore dependencies.\n * Optimized for iOS and mobile environments with limited resources.\n */\nexport class NativeQueryEngine implements IQueryEngine {\n  private app: App;\n  private metadataCache: MetadataCache;\n  private vault: Vault;\n  private queryCache: Map<string, { result: QueryResult; timestamp: number }>;\n  private cacheTimeout: number = 5000; // 5 seconds cache\n\n  constructor(app: App) {\n    this.app = app;\n    this.metadataCache = app?.metadataCache;\n    this.vault = app?.vault;\n    this.queryCache = new Map();\n  }\n\n  getName(): string {\n    return \"native\";\n  }\n\n  getType(): QueryEngineType {\n    return \"native\";\n  }\n\n  isAvailable(): boolean {\n    // Native engine is available when app is provided\n    return this.app != null;\n  }\n\n  async executeQuery(\n    query: string,\n    context?: any,\n  ): Promise<Result<QueryResult>> {\n    try {\n      // Check cache first\n      const cached = this.getCachedResult(query);\n      if (cached) {\n        return Result.ok(cached);\n      }\n\n      // Parse query type\n      const queryType = this.parseQueryType(query);\n      let result: QueryResult;\n\n      switch (queryType.type) {\n        case \"table\":\n          result = await this.executeTableQuery(queryType.query, context);\n          break;\n        case \"list\":\n          result = await this.executeListQuery(queryType.query, context);\n          break;\n        case \"task\":\n          result = await this.executeTaskQuery(queryType.query, context);\n          break;\n        case \"calendar\":\n          result = await this.executeCalendarQuery(queryType.query, context);\n          break;\n        default:\n          result = await this.executeCustomQuery(query, context);\n      }\n\n      // Cache the result\n      this.cacheResult(query, result);\n      return Result.ok(result);\n    } catch (error) {\n      return Result.fail(`Native query execution failed: ${error.message}`);\n    }\n  }\n\n  private parseQueryType(query: string): { type: string; query: string } {\n    const lowerQuery = query.toLowerCase().trim();\n\n    if (lowerQuery.startsWith(\"table\")) {\n      return { type: \"table\", query: query.substring(5).trim() };\n    } else if (lowerQuery.startsWith(\"list\")) {\n      return { type: \"list\", query: query.substring(4).trim() };\n    } else if (lowerQuery.startsWith(\"task\")) {\n      return { type: \"task\", query: query.substring(4).trim() };\n    } else if (lowerQuery.startsWith(\"calendar\")) {\n      return { type: \"calendar\", query: query.substring(8).trim() };\n    }\n\n    return { type: \"custom\", query };\n  }\n\n  private async executeTableQuery(\n    query: string,\n    context?: any,\n  ): Promise<QueryResult> {\n    // Parse table query: \"columns FROM source WHERE conditions\"\n    const tableRegex = /^(.+?)\\s+from\\s+\"([^\"]+)\"(?:\\s+where\\s+(.+))?$/i;\n    const match = query.match(tableRegex);\n\n    if (!match) {\n      throw new Error(\"Invalid table query format: missing FROM clause\");\n    }\n\n    const [, columns, source, conditions] = match;\n    const files = await this.getFilesFromSource(source, conditions);\n    const columnList = columns.split(\",\").map((c) => c.trim());\n\n    const rows = await Promise.all(\n      files.map(async (file) => {\n        const metadata = this.metadataCache.getFileCache(file);\n        const row: any = {};\n\n        for (const col of columnList) {\n          row[col] = await this.extractProperty(file, metadata, col);\n        }\n\n        return row;\n      }),\n    );\n\n    return {\n      type: \"table\",\n      data: rows,\n      columns: columnList,\n      metadata: {\n        renderHtml: this.renderTable(columnList, rows),\n        where: conditions || undefined,\n      },\n    };\n  }\n\n  private async executeListQuery(\n    query: string,\n    context?: any,\n  ): Promise<QueryResult> {\n    // Parse list query: \"FROM source WHERE conditions\"\n    const listRegex = /^from\\s+\"([^\"]+)\"(?:\\s+where\\s+(.+))?$/i;\n    const match = query.match(listRegex);\n\n    if (!match) {\n      throw new Error(\"Invalid list query format: missing FROM clause\");\n    }\n\n    const [, source, conditions] = match;\n    const files = await this.getFilesFromSource(source, conditions);\n\n    const items = files.map((file) => ({\n      text: file.basename,\n      link: `[[${file.path}]]`,\n    }));\n\n    return {\n      type: \"list\",\n      data: items,\n      metadata: { renderHtml: this.renderList(items) },\n    };\n  }\n\n  private async executeTaskQuery(\n    query: string,\n    context?: any,\n  ): Promise<QueryResult> {\n    // Find all tasks in vault\n    const tasks: any[] = [];\n\n    if (!this.vault) {\n      return {\n        type: \"task\",\n        data: [],\n        metadata: { renderHtml: this.renderTasks([]) },\n      };\n    }\n\n    // Parse query to determine which files to check\n    let targetFiles: TFile[] = [];\n\n    if (query.includes('from \"')) {\n      // Extract source from query\n      const sourceMatch = query.match(/from\\s+\"([^\"]+)\"/);\n      if (sourceMatch) {\n        const source = sourceMatch[1];\n        targetFiles = await this.getFilesFromSource(source);\n      }\n    } else {\n      // Check all files if no source specified\n      targetFiles = this.vault.getMarkdownFiles();\n    }\n\n    for (const file of targetFiles) {\n      try {\n        const content = await this.vault.cachedRead(file);\n        const taskRegex = /^[\\s]*- \\[(.)\\] (.+)$/gm;\n        let match;\n\n        while ((match = taskRegex.exec(content)) !== null) {\n          const [, status, text] = match;\n          tasks.push({\n            status: status === \"x\" ? \"completed\" : \"pending\",\n            completed: status === \"x\",\n            text,\n            file: file.path,\n          });\n        }\n      } catch (error) {\n        // Skip files that can't be read and return empty tasks for that file\n        console.warn(`Failed to read file ${file.path} for task query:`, error);\n        continue;\n      }\n    }\n\n    // Apply filters if specified in query\n    const filteredTasks = this.filterTasks(tasks, query);\n\n    return {\n      type: \"task\",\n      data: filteredTasks,\n      metadata: { renderHtml: this.renderTasks(filteredTasks) },\n    };\n  }\n\n  private async executeCalendarQuery(\n    query: string,\n    context?: any,\n  ): Promise<QueryResult> {\n    // Find all files with dates\n    const events: any[] = [];\n\n    if (!this.vault || !this.metadataCache) {\n      return {\n        type: \"calendar\",\n        data: events,\n        metadata: { renderHtml: this.renderCalendar(events) },\n      };\n    }\n\n    const files = this.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      const metadata = this.metadataCache.getFileCache(file);\n      if (metadata?.frontmatter?.date || metadata?.frontmatter?.dueDate) {\n        events.push({\n          title: file.basename,\n          date: metadata.frontmatter.date || metadata.frontmatter.dueDate,\n          file: file.path,\n        });\n      }\n    }\n\n    return {\n      type: \"calendar\",\n      data: events,\n      metadata: { renderHtml: this.renderCalendar(events) },\n    };\n  }\n\n  private async executeCustomQuery(\n    query: string,\n    context?: any,\n  ): Promise<QueryResult> {\n    // Handle custom queries with basic pattern matching\n    const files = this.vault.getMarkdownFiles();\n    const results: any[] = [];\n\n    for (const file of files) {\n      const metadata = this.metadataCache.getFileCache(file);\n      if (this.matchesQuery(file, metadata, query)) {\n        results.push({\n          file: file.path,\n          title: file.basename,\n        });\n      }\n    }\n\n    return {\n      type: \"raw\",\n      data: results,\n      metadata: { renderHtml: this.renderCustom(results) },\n    };\n  }\n\n  private async getFilesFromSource(\n    source: string,\n    conditions?: string,\n  ): Promise<TFile[]> {\n    let files: TFile[] = [];\n\n    if (!this.vault) {\n      return files;\n    }\n\n    if (source === \"\" || source === \"#\" || source === \"/\") {\n      // All files in vault\n      files = this.vault.getMarkdownFiles();\n    } else if (source.startsWith(\"#\")) {\n      // Files with tag\n      const tag = source.substring(1);\n      files = this.getFilesWithTag(tag);\n    } else {\n      // Files in folder - check both exact match and folder contains file\n      const allFiles = this.vault.getMarkdownFiles();\n      files = allFiles.filter((file) => {\n        return file.path.startsWith(source) || file.path.includes(source);\n      });\n\n      // If no files found with folder logic, try direct folder lookup\n      if (files.length === 0) {\n        const folder = this.vault.getAbstractFileByPath(source);\n        if (folder instanceof TFolder) {\n          files = this.getFilesInFolder(folder);\n        }\n      }\n    }\n\n    // Apply conditions if present\n    if (conditions) {\n      files = await this.filterFiles(files, conditions);\n    }\n\n    return files;\n  }\n\n  private getFilesWithTag(tag: string): TFile[] {\n    const files: TFile[] = [];\n\n    if (!this.vault || !this.metadataCache) {\n      return files;\n    }\n\n    const allFiles = this.vault.getMarkdownFiles();\n\n    for (const file of allFiles) {\n      const metadata = this.metadataCache.getFileCache(file);\n      // Check both explicit tags and hashtags in metadata\n      const hasTag =\n        metadata?.tags?.some((t) => t.tag === `#${tag}` || t.tag === tag) ||\n        false;\n\n      // Also check frontmatter tags\n      const frontmatterTags = metadata?.frontmatter?.tags || [];\n      const hasFrontmatterTag = Array.isArray(frontmatterTags)\n        ? frontmatterTags.includes(tag) || frontmatterTags.includes(`#${tag}`)\n        : false;\n\n      if (hasTag || hasFrontmatterTag) {\n        files.push(file);\n      }\n    }\n\n    return files;\n  }\n\n  private getFilesInFolder(folder: TFolder): TFile[] {\n    const files: TFile[] = [];\n\n    const traverse = (abstractFile: TFolder) => {\n      for (const child of abstractFile.children) {\n        if (child instanceof TFile && child.extension === \"md\") {\n          files.push(child);\n        } else if (child instanceof TFolder) {\n          traverse(child);\n        }\n      }\n    };\n\n    traverse(folder);\n    return files;\n  }\n\n  private async filterFiles(\n    files: TFile[],\n    conditions: string,\n  ): Promise<TFile[]> {\n    // Simple condition parsing for common patterns\n    const filtered: TFile[] = [];\n\n    for (const file of files) {\n      const metadata = this.metadataCache.getFileCache(file);\n      if (await this.evaluateCondition(file, metadata, conditions)) {\n        filtered.push(file);\n      }\n    }\n\n    return filtered;\n  }\n\n  private async evaluateCondition(\n    file: TFile,\n    metadata: any,\n    condition: string,\n  ): Promise<boolean> {\n    // Basic condition evaluation\n    // Support patterns like: \"status = 'active'\", \"priority > 3\", etc.\n\n    const comparisonRegex = /(\\w+)\\s*(=|!=|>|<|>=|<=)\\s*['\"]?([^'\"]+)['\"]?/;\n    const match = condition.match(comparisonRegex);\n\n    if (!match) return true;\n\n    const [, property, operator, value] = match;\n    const actualValue = await this.extractProperty(file, metadata, property);\n\n    return this.compareValues(actualValue, operator, value);\n  }\n\n  private compareValues(\n    actual: any,\n    operator: string,\n    expected: string,\n  ): boolean {\n    switch (operator) {\n      case \"=\":\n      case \"==\":\n        return String(actual) === expected;\n      case \"!=\":\n        return String(actual) !== expected;\n      case \">\":\n        return Number(actual) > Number(expected);\n      case \"<\":\n        return Number(actual) < Number(expected);\n      case \">=\":\n        return Number(actual) >= Number(expected);\n      case \"<=\":\n        return Number(actual) <= Number(expected);\n      default:\n        return false;\n    }\n  }\n\n  private async extractProperty(\n    file: TFile,\n    metadata: any,\n    property: string,\n  ): Promise<any> {\n    // Extract property from file or metadata\n    const lowerProp = property.toLowerCase();\n\n    switch (lowerProp) {\n      case \"file.name\":\n      case \"name\":\n        return file.basename;\n      case \"file.path\":\n      case \"path\":\n        return file.path;\n      case \"file.size\":\n      case \"size\":\n        return file.stat.size;\n      case \"file.mtime\":\n      case \"modified\":\n        return file.stat.mtime;\n      case \"file.ctime\":\n      case \"created\":\n        return file.stat.ctime;\n      default:\n        // Check frontmatter\n        if (metadata?.frontmatter?.[property]) {\n          return metadata.frontmatter[property];\n        }\n        return \"\"; // Return empty string instead of null for better compatibility\n    }\n  }\n\n  private filterTasks(tasks: any[], query: string): any[] {\n    // Filter tasks based on query parameters\n    if (query.includes(\"not done\")) {\n      return tasks.filter((t) => t.status !== \"completed\");\n    } else if (query.includes(\"done\")) {\n      return tasks.filter((t) => t.status === \"completed\");\n    }\n    // By default, return only incomplete tasks\n    return tasks.filter((t) => t.status !== \"completed\");\n  }\n\n  private matchesQuery(file: TFile, metadata: any, query: string): boolean {\n    // Basic pattern matching for custom queries\n    const searchTerm = query.toLowerCase();\n\n    // Check filename\n    if (file.basename.toLowerCase().includes(searchTerm)) {\n      return true;\n    }\n\n    // Check tags\n    if (\n      metadata?.tags?.some((t: any) => t.tag.toLowerCase().includes(searchTerm))\n    ) {\n      return true;\n    }\n\n    // Check frontmatter\n    if (metadata?.frontmatter) {\n      for (const value of Object.values(metadata.frontmatter)) {\n        if (String(value).toLowerCase().includes(searchTerm)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  // Rendering methods for different query types\n  private renderTable(headers: string[], rows: any[]): string {\n    let html = '<table class=\"exo-native-table\"><thead><tr>';\n\n    for (const header of headers) {\n      html += `<th>${header}</th>`;\n    }\n\n    html += \"</tr></thead><tbody>\";\n\n    for (const row of rows) {\n      html += \"<tr>\";\n      for (const header of headers) {\n        html += `<td>${row[header] || \"\"}</td>`;\n      }\n      html += \"</tr>\";\n    }\n\n    html += \"</tbody></table>\";\n    return html;\n  }\n\n  private renderList(items: any[]): string {\n    let html = '<ul class=\"exo-native-list\">';\n\n    for (const item of items) {\n      html += `<li>${item.link || item.text}</li>`;\n    }\n\n    html += \"</ul>\";\n    return html;\n  }\n\n  private renderTasks(tasks: any[]): string {\n    let html = '<div class=\"exo-native-tasks\">';\n\n    for (const task of tasks) {\n      const checked = task.status === \"completed\" ? \"checked\" : \"\";\n      html += `\n                <div class=\"task-item\">\n                    <input type=\"checkbox\" ${checked} disabled>\n                    <span>${task.text}</span>\n                    <small>(${task.file})</small>\n                </div>\n            `;\n    }\n\n    html += \"</div>\";\n    return html;\n  }\n\n  private renderCalendar(events: any[]): string {\n    let html = '<div class=\"exo-native-calendar\">';\n\n    // Sort events by date\n    events.sort(\n      (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime(),\n    );\n\n    for (const event of events) {\n      html += `\n                <div class=\"calendar-event\">\n                    <span class=\"event-date\">${event.date}</span>\n                    <span class=\"event-title\">${event.title}</span>\n                </div>\n            `;\n    }\n\n    html += \"</div>\";\n    return html;\n  }\n\n  private renderCustom(results: any[]): string {\n    let html = '<div class=\"exo-native-custom\">';\n\n    for (const result of results) {\n      html += `<div class=\"custom-result\">[[${result.file}|${result.title}]]</div>`;\n    }\n\n    html += \"</div>\";\n    return html;\n  }\n\n  // Cache management\n  private getCachedResult(query: string): QueryResult | null {\n    const cached = this.queryCache.get(query);\n\n    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {\n      return cached.result;\n    }\n\n    return null;\n  }\n\n  private cacheResult(query: string, result: QueryResult): void {\n    this.queryCache.set(query, {\n      result,\n      timestamp: Date.now(),\n    });\n\n    // Clean old cache entries\n    if (this.queryCache.size > 100) {\n      const oldestKey = this.queryCache.keys().next().value;\n      this.queryCache.delete(oldestKey);\n    }\n  }\n\n  /**\n   * Executes a query and renders the result to a container\n   */\n  async renderQuery(\n    container: HTMLElement,\n    query: string,\n    context?: QueryContext,\n  ): Promise<Result<void>> {\n    try {\n      const result = await this.executeQuery(query, context);\n      if (!result.isSuccess) {\n        return Result.fail(result.getErrorMessage());\n      }\n\n      const queryResult = result.getValue();\n\n      // Check if result is empty and render appropriate message\n      if (\n        !queryResult ||\n        !queryResult.data ||\n        (Array.isArray(queryResult.data) && queryResult.data.length === 0)\n      ) {\n        container.innerHTML =\n          '<div class=\"exo-native-empty\">No results found</div>';\n        return Result.ok();\n      }\n\n      if (queryResult?.metadata?.renderHtml) {\n        container.innerHTML = queryResult.metadata.renderHtml;\n      } else {\n        // Fallback rendering\n        container.innerHTML = this.renderFallback(queryResult);\n      }\n\n      return Result.ok();\n    } catch (error) {\n      return Result.fail(`Failed to render query: ${error.message}`);\n    }\n  }\n\n  /**\n   * Gets pages/files matching the given source expression\n   */\n  async getPages(source: string): Promise<Result<any[]>> {\n    try {\n      const cleanSource = source.replace(/['\"]/g, \"\"); // Remove quotes\n      const files = await this.getFilesFromSource(cleanSource);\n      const pages = await Promise.all(\n        files.map(async (file) => {\n          const metadata = this.metadataCache?.getFileCache(file);\n          return {\n            file: {\n              path: file.path,\n              name: file.basename,\n              size: file.stat.size,\n              mtime: file.stat.mtime,\n              ctime: file.stat.ctime,\n            },\n            ...metadata?.frontmatter,\n          };\n        }),\n      );\n\n      return Result.ok(pages);\n    } catch (error) {\n      return Result.fail(`Failed to get pages: ${error.message}`);\n    }\n  }\n\n  /**\n   * Gets metadata for a specific page/file\n   */\n  async getPageMetadata(path: string): Promise<Result<Record<string, any>>> {\n    try {\n      const file = this.vault?.getAbstractFileByPath(path);\n      if (!file || !(file instanceof TFile)) {\n        return Result.fail(`File not found: ${path}`);\n      }\n\n      const metadata = this.metadataCache?.getFileCache(file);\n      const result = {\n        file: {\n          path: file.path,\n          name: file.basename,\n          size: file.stat.size,\n          mtime: file.stat.mtime,\n          ctime: file.stat.ctime,\n          extension: file.extension,\n        },\n        frontmatter: metadata?.frontmatter || {},\n        tags: metadata?.tags?.map((t) => t.tag) || [],\n        links: metadata?.links?.map((l) => l.link) || [],\n        headings:\n          metadata?.headings?.map((h) => ({\n            level: h.level,\n            heading: h.heading,\n          })) || [],\n      };\n\n      return Result.ok(result);\n    } catch (error) {\n      return Result.fail(`Failed to get page metadata: ${error.message}`);\n    }\n  }\n\n  /**\n   * Validates if a query string is syntactically correct\n   */\n  validateQuery(query: string): Result<boolean> {\n    try {\n      if (!query || typeof query !== \"string\") {\n        return Result.fail(\"Query must be a non-empty string\");\n      }\n\n      const trimmed = query.trim();\n      if (trimmed.length === 0) {\n        return Result.fail(\"Query cannot be empty\");\n      }\n\n      // Basic validation - check for dangerous patterns\n      const dangerousPatterns = [/<script/i, /javascript:/i, /on\\w+\\s*=/i];\n\n      for (const pattern of dangerousPatterns) {\n        if (pattern.test(trimmed)) {\n          return Result.fail(\"Query contains potentially unsafe content\");\n        }\n      }\n\n      // Check for valid query keywords\n      const lowerQuery = trimmed.toLowerCase();\n      const validKeywords = [\"table\", \"list\", \"task\", \"calendar\"];\n      const hasValidKeyword = validKeywords.some((keyword) =>\n        lowerQuery.startsWith(keyword),\n      );\n\n      if (!hasValidKeyword) {\n        return Result.fail(\n          \"Query must start with a valid keyword (table, list, task, calendar)\",\n        );\n      }\n\n      return Result.ok(true);\n    } catch (error) {\n      return Result.fail(`Query validation failed: ${error.message}`);\n    }\n  }\n\n  private renderFallback(queryResult: QueryResult | null): string {\n    if (\n      !queryResult ||\n      !queryResult.data ||\n      (Array.isArray(queryResult.data) && queryResult.data.length === 0)\n    ) {\n      return '<div class=\"exo-native-empty\">No results found</div>';\n    }\n\n    const items = Array.isArray(queryResult.data)\n      ? queryResult.data\n      : [queryResult.data];\n\n    if (items.length === 0) {\n      return '<div class=\"exo-native-empty\">No results found</div>';\n    }\n\n    return `\n            <div class=\"exo-native-fallback\">\n                ${items.map((item) => `<div class=\"result-item\">${JSON.stringify(item)}</div>`).join(\"\")}\n            </div>\n        `;\n  }\n\n  /**\n   * Clear the query cache\n   */\n  public clearCache(): void {\n    this.queryCache.clear();\n  }\n\n  /**\n   * Clear all caches (alias for compatibility)\n   */\n  public clearCaches(): void {\n    this.queryCache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { queryCache: number; metadataCache: number } {\n    return {\n      queryCache: this.queryCache.size,\n      metadataCache: 0, // Metadata cache is managed by Obsidian\n    };\n  }\n}\n"],"version":3}