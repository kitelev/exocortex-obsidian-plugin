2d51f1fd2dba68833b662963db70b903
"use strict";

/* istanbul ignore next */
function cov_1n1dj0zc9o() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/SPARQLEngine.ts";
  var hash = "85d4fa6b59025ef599aae79073c6fe69b00b630b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/SPARQLEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 30
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 58
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 53
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 27
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 67
        }
      },
      "6": {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 77
        }
      },
      "7": {
        start: {
          line: 17,
          column: 29
        },
        end: {
          line: 17,
          column: 58
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 20,
          column: 9
        }
      },
      "9": {
        start: {
          line: 19,
          column: 12
        },
        end: {
          line: 19,
          column: 84
        }
      },
      "10": {
        start: {
          line: 22,
          column: 31
        },
        end: {
          line: 22,
          column: 89
        }
      },
      "11": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "12": {
        start: {
          line: 24,
          column: 12
        },
        end: {
          line: 24,
          column: 62
        }
      },
      "13": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 26,
          column: 71
        }
      },
      "14": {
        start: {
          line: 27,
          column: 25
        },
        end: {
          line: 27,
          column: 62
        }
      },
      "15": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 30,
          column: 9
        }
      },
      "16": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 29,
          column: 97
        }
      },
      "17": {
        start: {
          line: 31,
          column: 33
        },
        end: {
          line: 31,
          column: 35
        }
      },
      "18": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "19": {
        start: {
          line: 35,
          column: 28
        },
        end: {
          line: 35,
          column: 39
        }
      },
      "20": {
        start: {
          line: 37,
          column: 28
        },
        end: {
          line: 38,
          column: 71
        }
      },
      "21": {
        start: {
          line: 39,
          column: 30
        },
        end: {
          line: 40,
          column: 73
        }
      },
      "22": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 110
        }
      },
      "23": {
        start: {
          line: 42,
          column: 35
        },
        end: {
          line: 42,
          column: 79
        }
      },
      "24": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "25": {
        start: {
          line: 44,
          column: 32
        },
        end: {
          line: 44,
          column: 67
        }
      },
      "26": {
        start: {
          line: 45,
          column: 35
        },
        end: {
          line: 45,
          column: 78
        }
      },
      "27": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 53
        }
      },
      "28": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 62
        }
      },
      "29": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "30": {
        start: {
          line: 53,
          column: 35
        },
        end: {
          line: 53,
          column: 78
        }
      },
      "31": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 53
        }
      },
      "32": {
        start: {
          line: 58,
          column: 27
        },
        end: {
          line: 58,
          column: 56
        }
      },
      "33": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "34": {
        start: {
          line: 61,
          column: 26
        },
        end: {
          line: 61,
          column: 49
        }
      },
      "35": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 66,
          column: 14
        }
      },
      "36": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "37": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 46
        }
      },
      "38": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 22
        }
      },
      "39": {
        start: {
          line: 80,
          column: 26
        },
        end: {
          line: 80,
          column: 28
        }
      },
      "40": {
        start: {
          line: 82,
          column: 22
        },
        end: {
          line: 82,
          column: 69
        }
      },
      "41": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "42": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 84,
          column: 39
        }
      },
      "43": {
        start: {
          line: 85,
          column: 12
        },
        end: {
          line: 86,
          column: 25
        }
      },
      "44": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 25
        }
      },
      "45": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 46
        }
      },
      "46": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "47": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 53
        }
      },
      "48": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 95,
          column: 19
        }
      },
      "49": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 25
        }
      },
      "50": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 101,
          column: 26
        }
      },
      "51": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "52": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 95
        }
      },
      "53": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "54": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 99
        }
      },
      "55": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "56": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 93
        }
      },
      "57": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 23
        }
      },
      "58": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 31
        }
      },
      "59": {
        start: {
          line: 118,
          column: 24
        },
        end: {
          line: 118,
          column: 26
        }
      },
      "60": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "61": {
        start: {
          line: 120,
          column: 31
        },
        end: {
          line: 120,
          column: 68
        }
      },
      "62": {
        start: {
          line: 121,
          column: 33
        },
        end: {
          line: 121,
          column: 72
        }
      },
      "63": {
        start: {
          line: 122,
          column: 30
        },
        end: {
          line: 122,
          column: 66
        }
      },
      "64": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "65": {
        start: {
          line: 125,
          column: 32
        },
        end: {
          line: 125,
          column: 149
        }
      },
      "66": {
        start: {
          line: 126,
          column: 34
        },
        end: {
          line: 126,
          column: 86
        }
      },
      "67": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "68": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 86
        }
      },
      "69": {
        start: {
          line: 133,
          column: 21
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "70": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 135,
          column: 76
        }
      },
      "71": {
        start: {
          line: 137,
          column: 21
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "72": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 63
        }
      },
      "73": {
        start: {
          line: 141,
          column: 21
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "74": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 75
        }
      },
      "75": {
        start: {
          line: 145,
          column: 21
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "76": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 76
        }
      },
      "77": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 79
        }
      },
      "78": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 78
        }
      },
      "79": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 23
        }
      },
      "80": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "81": {
        start: {
          line: 160,
          column: 28
        },
        end: {
          line: 160,
          column: 46
        }
      },
      "82": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 161,
          column: 44
        }
      },
      "83": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 21
        }
      },
      "84": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 167,
          column: 22
        }
      },
      "85": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 167,
          column: 22
        }
      },
      "86": {
        start: {
          line: 169,
          column: 29
        },
        end: {
          line: 169,
          column: 40
        }
      },
      "87": {
        start: {
          line: 170,
          column: 29
        },
        end: {
          line: 173,
          column: 77
        }
      },
      "88": {
        start: {
          line: 174,
          column: 23
        },
        end: {
          line: 174,
          column: 25
        }
      },
      "89": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "90": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 68
        }
      },
      "91": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "92": {
        start: {
          line: 179,
          column: 21
        },
        end: {
          line: 179,
          column: 22
        }
      },
      "93": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 180,
          column: 39
        }
      },
      "94": {
        start: {
          line: 181,
          column: 32
        },
        end: {
          line: 181,
          column: 34
        }
      },
      "95": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 213,
          column: 13
        }
      },
      "96": {
        start: {
          line: 184,
          column: 35
        },
        end: {
          line: 186,
          column: 37
        }
      },
      "97": {
        start: {
          line: 187,
          column: 37
        },
        end: {
          line: 189,
          column: 39
        }
      },
      "98": {
        start: {
          line: 190,
          column: 34
        },
        end: {
          line: 192,
          column: 36
        }
      },
      "99": {
        start: {
          line: 194,
          column: 32
        },
        end: {
          line: 194,
          column: 102
        }
      },
      "100": {
        start: {
          line: 195,
          column: 34
        },
        end: {
          line: 195,
          column: 108
        }
      },
      "101": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 196,
          column: 88
        }
      },
      "102": {
        start: {
          line: 198,
          column: 32
        },
        end: {
          line: 198,
          column: 76
        }
      },
      "103": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 212,
          column: 17
        }
      },
      "104": {
        start: {
          line: 200,
          column: 44
        },
        end: {
          line: 200,
          column: 70
        }
      },
      "105": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 204,
          column: 21
        }
      },
      "106": {
        start: {
          line: 203,
          column: 24
        },
        end: {
          line: 203,
          column: 115
        }
      },
      "107": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 207,
          column: 21
        }
      },
      "108": {
        start: {
          line: 206,
          column: 24
        },
        end: {
          line: 206,
          column: 119
        }
      },
      "109": {
        start: {
          line: 208,
          column: 20
        },
        end: {
          line: 210,
          column: 21
        }
      },
      "110": {
        start: {
          line: 209,
          column: 24
        },
        end: {
          line: 209,
          column: 113
        }
      },
      "111": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 54
        }
      },
      "112": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 35
        }
      },
      "113": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 24
        }
      },
      "114": {
        start: {
          line: 220,
          column: 25
        },
        end: {
          line: 220,
          column: 74
        }
      },
      "115": {
        start: {
          line: 221,
          column: 29
        },
        end: {
          line: 221,
          column: 58
        }
      },
      "116": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "117": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 84
        }
      },
      "118": {
        start: {
          line: 226,
          column: 28
        },
        end: {
          line: 226,
          column: 79
        }
      },
      "119": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "120": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 59
        }
      },
      "121": {
        start: {
          line: 230,
          column: 26
        },
        end: {
          line: 230,
          column: 61
        }
      },
      "122": {
        start: {
          line: 231,
          column: 25
        },
        end: {
          line: 231,
          column: 59
        }
      },
      "123": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "124": {
        start: {
          line: 233,
          column: 32
        },
        end: {
          line: 233,
          column: 62
        }
      },
      "125": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 55
        }
      },
      "126": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 31
        }
      },
      "127": {
        start: {
          line: 237,
          column: 22
        },
        end: {
          line: 237,
          column: 24
        }
      },
      "128": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 287,
          column: 9
        }
      },
      "129": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 39
        }
      },
      "130": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 242,
          column: 124
        }
      },
      "131": {
        start: {
          line: 243,
          column: 30
        },
        end: {
          line: 243,
          column: 130
        }
      },
      "132": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 110
        }
      },
      "133": {
        start: {
          line: 245,
          column: 28
        },
        end: {
          line: 245,
          column: 72
        }
      },
      "134": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 270,
          column: 13
        }
      },
      "135": {
        start: {
          line: 248,
          column: 32
        },
        end: {
          line: 248,
          column: 34
        }
      },
      "136": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 254,
          column: 17
        }
      },
      "137": {
        start: {
          line: 250,
          column: 36
        },
        end: {
          line: 250,
          column: 64
        }
      },
      "138": {
        start: {
          line: 251,
          column: 20
        },
        end: {
          line: 253,
          column: 21
        }
      },
      "139": {
        start: {
          line: 252,
          column: 24
        },
        end: {
          line: 252,
          column: 86
        }
      },
      "140": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 260,
          column: 17
        }
      },
      "141": {
        start: {
          line: 256,
          column: 36
        },
        end: {
          line: 256,
          column: 66
        }
      },
      "142": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 259,
          column: 21
        }
      },
      "143": {
        start: {
          line: 258,
          column: 24
        },
        end: {
          line: 258,
          column: 88
        }
      },
      "144": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 266,
          column: 17
        }
      },
      "145": {
        start: {
          line: 262,
          column: 36
        },
        end: {
          line: 262,
          column: 63
        }
      },
      "146": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 265,
          column: 21
        }
      },
      "147": {
        start: {
          line: 264,
          column: 24
        },
        end: {
          line: 264,
          column: 85
        }
      },
      "148": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 269,
          column: 17
        }
      },
      "149": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 268,
          column: 42
        }
      },
      "150": {
        start: {
          line: 274,
          column: 29
        },
        end: {
          line: 274,
          column: 71
        }
      },
      "151": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "152": {
        start: {
          line: 276,
          column: 40
        },
        end: {
          line: 276,
          column: 42
        }
      },
      "153": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 282,
          column: 17
        }
      },
      "154": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 281,
          column: 21
        }
      },
      "155": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 280,
          column: 53
        }
      },
      "156": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 285,
          column: 17
        }
      },
      "157": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 284,
          column: 50
        }
      },
      "158": {
        start: {
          line: 289,
          column: 27
        },
        end: {
          line: 289,
          column: 56
        }
      },
      "159": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "160": {
        start: {
          line: 292,
          column: 26
        },
        end: {
          line: 292,
          column: 49
        }
      },
      "161": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 73
        }
      },
      "162": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 48
        }
      },
      "163": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 46
        }
      },
      "164": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 22
        }
      },
      "165": {
        start: {
          line: 303,
          column: 24
        },
        end: {
          line: 303,
          column: 43
        }
      },
      "166": {
        start: {
          line: 304,
          column: 8
        },
        end: {
          line: 306,
          column: 9
        }
      },
      "167": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 25
        }
      },
      "168": {
        start: {
          line: 307,
          column: 26
        },
        end: {
          line: 307,
          column: 28
        }
      },
      "169": {
        start: {
          line: 308,
          column: 27
        },
        end: {
          line: 308,
          column: 37
        }
      },
      "170": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 312,
          column: 9
        }
      },
      "171": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 37
        }
      },
      "172": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 25
        }
      },
      "173": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "174": {
        start: {
          line: 318,
          column: 28
        },
        end: {
          line: 318,
          column: 59
        }
      },
      "175": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 52
        }
      },
      "176": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 323,
          column: 69
        }
      },
      "177": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 328,
          column: 22
        }
      },
      "178": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 22
        }
      },
      "179": {
        start: {
          line: 330,
          column: 29
        },
        end: {
          line: 330,
          column: 40
        }
      },
      "180": {
        start: {
          line: 331,
          column: 29
        },
        end: {
          line: 331,
          column: 360
        }
      },
      "181": {
        start: {
          line: 332,
          column: 23
        },
        end: {
          line: 332,
          column: 25
        }
      },
      "182": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "183": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 68
        }
      },
      "184": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "185": {
        start: {
          line: 337,
          column: 21
        },
        end: {
          line: 337,
          column: 22
        }
      },
      "186": {
        start: {
          line: 338,
          column: 28
        },
        end: {
          line: 338,
          column: 39
        }
      },
      "187": {
        start: {
          line: 339,
          column: 32
        },
        end: {
          line: 339,
          column: 34
        }
      },
      "188": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "189": {
        start: {
          line: 342,
          column: 35
        },
        end: {
          line: 344,
          column: 37
        }
      },
      "190": {
        start: {
          line: 345,
          column: 37
        },
        end: {
          line: 347,
          column: 39
        }
      },
      "191": {
        start: {
          line: 348,
          column: 34
        },
        end: {
          line: 350,
          column: 36
        }
      },
      "192": {
        start: {
          line: 352,
          column: 32
        },
        end: {
          line: 352,
          column: 102
        }
      },
      "193": {
        start: {
          line: 353,
          column: 34
        },
        end: {
          line: 353,
          column: 108
        }
      },
      "194": {
        start: {
          line: 354,
          column: 31
        },
        end: {
          line: 354,
          column: 88
        }
      },
      "195": {
        start: {
          line: 356,
          column: 32
        },
        end: {
          line: 356,
          column: 76
        }
      },
      "196": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 370,
          column: 17
        }
      },
      "197": {
        start: {
          line: 358,
          column: 44
        },
        end: {
          line: 358,
          column: 70
        }
      },
      "198": {
        start: {
          line: 360,
          column: 20
        },
        end: {
          line: 362,
          column: 21
        }
      },
      "199": {
        start: {
          line: 361,
          column: 24
        },
        end: {
          line: 361,
          column: 115
        }
      },
      "200": {
        start: {
          line: 363,
          column: 20
        },
        end: {
          line: 365,
          column: 21
        }
      },
      "201": {
        start: {
          line: 364,
          column: 24
        },
        end: {
          line: 364,
          column: 119
        }
      },
      "202": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 368,
          column: 21
        }
      },
      "203": {
        start: {
          line: 367,
          column: 24
        },
        end: {
          line: 367,
          column: 113
        }
      },
      "204": {
        start: {
          line: 369,
          column: 20
        },
        end: {
          line: 369,
          column: 54
        }
      },
      "205": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 35
        }
      },
      "206": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 24
        }
      },
      "207": {
        start: {
          line: 377,
          column: 25
        },
        end: {
          line: 377,
          column: 27
        }
      },
      "208": {
        start: {
          line: 380,
          column: 22
        },
        end: {
          line: 380,
          column: 66
        }
      },
      "209": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 394,
          column: 9
        }
      },
      "210": {
        start: {
          line: 382,
          column: 28
        },
        end: {
          line: 382,
          column: 39
        }
      },
      "211": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 384,
          column: 25
        }
      },
      "212": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 25
        }
      },
      "213": {
        start: {
          line: 386,
          column: 26
        },
        end: {
          line: 386,
          column: 46
        }
      },
      "214": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 393,
          column: 13
        }
      },
      "215": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 392,
          column: 19
        }
      },
      "216": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 395,
          column: 24
        }
      },
      "217": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 47
        }
      },
      "218": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 407,
          column: 40
        }
      },
      "219": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 413,
          column: 45
        }
      },
      "220": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 419,
          column: 43
        }
      },
      "221": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 41
        }
      },
      "222": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 431,
          column: 34
        }
      },
      "223": {
        start: {
          line: 434,
          column: 0
        },
        end: {
          line: 434,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 36
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 21
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 14
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        loc: {
          start: {
            line: 79,
            column: 43
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 79
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 35
          },
          end: {
            line: 112,
            column: 5
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        loc: {
          start: {
            line: 113,
            column: 27
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 113
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 43
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 117
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 158,
            column: 4
          },
          end: {
            line: 158,
            column: 5
          }
        },
        loc: {
          start: {
            line: 158,
            column: 33
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 158
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 33
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 165
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 18
          },
          end: {
            line: 301,
            column: 5
          }
        },
        line: 218
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 302,
            column: 4
          },
          end: {
            line: 302,
            column: 5
          }
        },
        loc: {
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 314,
            column: 5
          }
        },
        line: 302
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 315,
            column: 4
          },
          end: {
            line: 315,
            column: 5
          }
        },
        loc: {
          start: {
            line: 315,
            column: 38
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 315
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 42
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 326
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 376,
            column: 4
          },
          end: {
            line: 376,
            column: 5
          }
        },
        loc: {
          start: {
            line: 376,
            column: 31
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 376
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 400,
            column: 4
          },
          end: {
            line: 400,
            column: 5
          }
        },
        loc: {
          start: {
            line: 400,
            column: 25
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 400
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 22
          },
          end: {
            line: 408,
            column: 5
          }
        },
        line: 406
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 30
          },
          end: {
            line: 414,
            column: 5
          }
        },
        line: 412
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 21
          },
          end: {
            line: 420,
            column: 5
          }
        },
        line: 418
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 19
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 424
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 430,
            column: 4
          },
          end: {
            line: 430,
            column: 5
          }
        },
        loc: {
          start: {
            line: 430,
            column: 14
          },
          end: {
            line: 432,
            column: 5
          }
        },
        line: 430
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 20,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 8
          },
          end: {
            line: 25,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: 49,
            column: 13
          },
          end: {
            line: 56,
            column: 9
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 28
          },
          end: {
            line: 38,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 37,
            column: 62
          },
          end: {
            line: 37,
            column: 66
          }
        }, {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 71
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 39,
            column: 30
          },
          end: {
            line: 40,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 39,
            column: 66
          },
          end: {
            line: 39,
            column: 70
          }
        }, {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 40,
            column: 73
          }
        }],
        line: 39
      },
      "6": {
        loc: {
          start: {
            line: 41,
            column: 27
          },
          end: {
            line: 41,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 41,
            column: 60
          },
          end: {
            line: 41,
            column: 64
          }
        }, {
          start: {
            line: 41,
            column: 67
          },
          end: {
            line: 41,
            column: 110
          }
        }],
        line: 41
      },
      "7": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 74,
            column: 9
          }
        }, {
          start: {
            line: 68,
            column: 13
          },
          end: {
            line: 74,
            column: 9
          }
        }],
        line: 60
      },
      "8": {
        loc: {
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 12
          },
          end: {
            line: 86,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "13": {
        loc: {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 123
      },
      "14": {
        loc: {
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 123,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 16
          },
          end: {
            line: 123,
            column: 26
          }
        }, {
          start: {
            line: 123,
            column: 30
          },
          end: {
            line: 123,
            column: 42
          }
        }, {
          start: {
            line: 123,
            column: 46
          },
          end: {
            line: 123,
            column: 55
          }
        }],
        line: 123
      },
      "15": {
        loc: {
          start: {
            line: 125,
            column: 32
          },
          end: {
            line: 125,
            column: 149
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 62
          },
          end: {
            line: 125,
            column: 96
          }
        }, {
          start: {
            line: 125,
            column: 99
          },
          end: {
            line: 125,
            column: 149
          }
        }],
        line: 125
      },
      "16": {
        loc: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 133,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }],
        line: 129
      },
      "17": {
        loc: {
          start: {
            line: 133,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 137,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }],
        line: 133
      },
      "18": {
        loc: {
          start: {
            line: 133,
            column: 25
          },
          end: {
            line: 133,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 25
          },
          end: {
            line: 133,
            column: 45
          }
        }, {
          start: {
            line: 133,
            column: 49
          },
          end: {
            line: 133,
            column: 70
          }
        }],
        line: 133
      },
      "19": {
        loc: {
          start: {
            line: 137,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }],
        line: 137
      },
      "20": {
        loc: {
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 145,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }],
        line: 141
      },
      "21": {
        loc: {
          start: {
            line: 145,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: 149,
            column: 21
          },
          end: {
            line: 152,
            column: 17
          }
        }],
        line: 145
      },
      "22": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 162,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "23": {
        loc: {
          start: {
            line: 161,
            column: 19
          },
          end: {
            line: 161,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 19
          },
          end: {
            line: 161,
            column: 35
          }
        }, {
          start: {
            line: 161,
            column: 39
          },
          end: {
            line: 161,
            column: 43
          }
        }],
        line: 161
      },
      "24": {
        loc: {
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 167,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 8
          },
          end: {
            line: 167,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "25": {
        loc: {
          start: {
            line: 170,
            column: 46
          },
          end: {
            line: 170,
            column: 152
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 85
          },
          end: {
            line: 170,
            column: 89
          }
        }, {
          start: {
            line: 170,
            column: 92
          },
          end: {
            line: 170,
            column: 152
          }
        }],
        line: 170
      },
      "26": {
        loc: {
          start: {
            line: 170,
            column: 154
          },
          end: {
            line: 170,
            column: 264
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 195
          },
          end: {
            line: 170,
            column: 199
          }
        }, {
          start: {
            line: 170,
            column: 202
          },
          end: {
            line: 170,
            column: 264
          }
        }],
        line: 170
      },
      "27": {
        loc: {
          start: {
            line: 170,
            column: 266
          },
          end: {
            line: 173,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 170,
            column: 304
          },
          end: {
            line: 170,
            column: 308
          }
        }, {
          start: {
            line: 171,
            column: 13
          },
          end: {
            line: 173,
            column: 75
          }
        }],
        line: 170
      },
      "28": {
        loc: {
          start: {
            line: 171,
            column: 13
          },
          end: {
            line: 173,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 79
          }
        }, {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 75
          }
        }],
        line: 171
      },
      "29": {
        loc: {
          start: {
            line: 184,
            column: 35
          },
          end: {
            line: 186,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 23
          },
          end: {
            line: 185,
            column: 68
          }
        }, {
          start: {
            line: 186,
            column: 22
          },
          end: {
            line: 186,
            column: 37
          }
        }],
        line: 184
      },
      "30": {
        loc: {
          start: {
            line: 185,
            column: 23
          },
          end: {
            line: 185,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 23
          },
          end: {
            line: 185,
            column: 60
          }
        }, {
          start: {
            line: 185,
            column: 64
          },
          end: {
            line: 185,
            column: 68
          }
        }],
        line: 185
      },
      "31": {
        loc: {
          start: {
            line: 187,
            column: 37
          },
          end: {
            line: 189,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 23
          },
          end: {
            line: 188,
            column: 70
          }
        }, {
          start: {
            line: 189,
            column: 22
          },
          end: {
            line: 189,
            column: 39
          }
        }],
        line: 187
      },
      "32": {
        loc: {
          start: {
            line: 188,
            column: 23
          },
          end: {
            line: 188,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 23
          },
          end: {
            line: 188,
            column: 62
          }
        }, {
          start: {
            line: 188,
            column: 66
          },
          end: {
            line: 188,
            column: 70
          }
        }],
        line: 188
      },
      "33": {
        loc: {
          start: {
            line: 190,
            column: 34
          },
          end: {
            line: 192,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 23
          },
          end: {
            line: 191,
            column: 67
          }
        }, {
          start: {
            line: 192,
            column: 22
          },
          end: {
            line: 192,
            column: 36
          }
        }],
        line: 190
      },
      "34": {
        loc: {
          start: {
            line: 191,
            column: 23
          },
          end: {
            line: 191,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 23
          },
          end: {
            line: 191,
            column: 59
          }
        }, {
          start: {
            line: 191,
            column: 63
          },
          end: {
            line: 191,
            column: 67
          }
        }],
        line: 191
      },
      "35": {
        loc: {
          start: {
            line: 194,
            column: 32
          },
          end: {
            line: 194,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 45
          },
          end: {
            line: 194,
            column: 95
          }
        }, {
          start: {
            line: 194,
            column: 98
          },
          end: {
            line: 194,
            column: 102
          }
        }],
        line: 194
      },
      "36": {
        loc: {
          start: {
            line: 195,
            column: 34
          },
          end: {
            line: 195,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 49
          },
          end: {
            line: 195,
            column: 101
          }
        }, {
          start: {
            line: 195,
            column: 104
          },
          end: {
            line: 195,
            column: 108
          }
        }],
        line: 195
      },
      "37": {
        loc: {
          start: {
            line: 196,
            column: 31
          },
          end: {
            line: 196,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 43
          },
          end: {
            line: 196,
            column: 81
          }
        }, {
          start: {
            line: 196,
            column: 84
          },
          end: {
            line: 196,
            column: 88
          }
        }],
        line: 196
      },
      "38": {
        loc: {
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 204,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 20
          },
          end: {
            line: 204,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "39": {
        loc: {
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 202,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 24
          },
          end: {
            line: 202,
            column: 55
          }
        }, {
          start: {
            line: 202,
            column: 59
          },
          end: {
            line: 202,
            column: 70
          }
        }],
        line: 202
      },
      "40": {
        loc: {
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 207,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 20
          },
          end: {
            line: 207,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "41": {
        loc: {
          start: {
            line: 205,
            column: 24
          },
          end: {
            line: 205,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 205,
            column: 24
          },
          end: {
            line: 205,
            column: 57
          }
        }, {
          start: {
            line: 205,
            column: 61
          },
          end: {
            line: 205,
            column: 74
          }
        }],
        line: 205
      },
      "42": {
        loc: {
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 210,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 210,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "43": {
        loc: {
          start: {
            line: 208,
            column: 24
          },
          end: {
            line: 208,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 208,
            column: 24
          },
          end: {
            line: 208,
            column: 54
          }
        }, {
          start: {
            line: 208,
            column: 58
          },
          end: {
            line: 208,
            column: 68
          }
        }],
        line: 208
      },
      "44": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "45": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "46": {
        loc: {
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 8
          },
          end: {
            line: 236,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "47": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 287,
            column: 9
          }
        }, {
          start: {
            line: 272,
            column: 13
          },
          end: {
            line: 287,
            column: 9
          }
        }],
        line: 238
      },
      "48": {
        loc: {
          start: {
            line: 242,
            column: 28
          },
          end: {
            line: 242,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 62
          },
          end: {
            line: 242,
            column: 66
          }
        }, {
          start: {
            line: 242,
            column: 69
          },
          end: {
            line: 242,
            column: 124
          }
        }],
        line: 242
      },
      "49": {
        loc: {
          start: {
            line: 243,
            column: 30
          },
          end: {
            line: 243,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 243,
            column: 66
          },
          end: {
            line: 243,
            column: 70
          }
        }, {
          start: {
            line: 243,
            column: 73
          },
          end: {
            line: 243,
            column: 130
          }
        }],
        line: 243
      },
      "50": {
        loc: {
          start: {
            line: 244,
            column: 27
          },
          end: {
            line: 244,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 60
          },
          end: {
            line: 244,
            column: 64
          }
        }, {
          start: {
            line: 244,
            column: 67
          },
          end: {
            line: 244,
            column: 110
          }
        }],
        line: 244
      },
      "51": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 254,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 254,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "52": {
        loc: {
          start: {
            line: 251,
            column: 20
          },
          end: {
            line: 253,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 20
          },
          end: {
            line: 253,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "53": {
        loc: {
          start: {
            line: 251,
            column: 24
          },
          end: {
            line: 251,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 24
          },
          end: {
            line: 251,
            column: 47
          }
        }, {
          start: {
            line: 251,
            column: 51
          },
          end: {
            line: 251,
            column: 78
          }
        }],
        line: 251
      },
      "54": {
        loc: {
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "55": {
        loc: {
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 259,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 20
          },
          end: {
            line: 259,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "56": {
        loc: {
          start: {
            line: 257,
            column: 24
          },
          end: {
            line: 257,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 24
          },
          end: {
            line: 257,
            column: 47
          }
        }, {
          start: {
            line: 257,
            column: 51
          },
          end: {
            line: 257,
            column: 78
          }
        }],
        line: 257
      },
      "57": {
        loc: {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 266,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 266,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "58": {
        loc: {
          start: {
            line: 263,
            column: 20
          },
          end: {
            line: 265,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 20
          },
          end: {
            line: 265,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "59": {
        loc: {
          start: {
            line: 263,
            column: 24
          },
          end: {
            line: 263,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 24
          },
          end: {
            line: 263,
            column: 47
          }
        }, {
          start: {
            line: 263,
            column: 51
          },
          end: {
            line: 263,
            column: 78
          }
        }],
        line: 263
      },
      "60": {
        loc: {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 269,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 269,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "61": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 281,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 281,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "62": {
        loc: {
          start: {
            line: 279,
            column: 24
          },
          end: {
            line: 279,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 279,
            column: 24
          },
          end: {
            line: 279,
            column: 47
          }
        }, {
          start: {
            line: 279,
            column: 51
          },
          end: {
            line: 279,
            column: 74
          }
        }],
        line: 279
      },
      "63": {
        loc: {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 285,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 285,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "64": {
        loc: {
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: 295,
            column: 13
          },
          end: {
            line: 297,
            column: 9
          }
        }],
        line: 291
      },
      "65": {
        loc: {
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 8
          },
          end: {
            line: 306,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "66": {
        loc: {
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: 321,
            column: 13
          },
          end: {
            line: 324,
            column: 9
          }
        }],
        line: 316
      },
      "67": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 328,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 328,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "68": {
        loc: {
          start: {
            line: 331,
            column: 46
          },
          end: {
            line: 331,
            column: 152
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 85
          },
          end: {
            line: 331,
            column: 89
          }
        }, {
          start: {
            line: 331,
            column: 92
          },
          end: {
            line: 331,
            column: 152
          }
        }],
        line: 331
      },
      "69": {
        loc: {
          start: {
            line: 331,
            column: 154
          },
          end: {
            line: 331,
            column: 264
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 195
          },
          end: {
            line: 331,
            column: 199
          }
        }, {
          start: {
            line: 331,
            column: 202
          },
          end: {
            line: 331,
            column: 264
          }
        }],
        line: 331
      },
      "70": {
        loc: {
          start: {
            line: 331,
            column: 266
          },
          end: {
            line: 331,
            column: 359
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 304
          },
          end: {
            line: 331,
            column: 308
          }
        }, {
          start: {
            line: 331,
            column: 311
          },
          end: {
            line: 331,
            column: 359
          }
        }],
        line: 331
      },
      "71": {
        loc: {
          start: {
            line: 342,
            column: 35
          },
          end: {
            line: 344,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 23
          },
          end: {
            line: 343,
            column: 68
          }
        }, {
          start: {
            line: 344,
            column: 22
          },
          end: {
            line: 344,
            column: 37
          }
        }],
        line: 342
      },
      "72": {
        loc: {
          start: {
            line: 343,
            column: 23
          },
          end: {
            line: 343,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 23
          },
          end: {
            line: 343,
            column: 60
          }
        }, {
          start: {
            line: 343,
            column: 64
          },
          end: {
            line: 343,
            column: 68
          }
        }],
        line: 343
      },
      "73": {
        loc: {
          start: {
            line: 345,
            column: 37
          },
          end: {
            line: 347,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 346,
            column: 23
          },
          end: {
            line: 346,
            column: 70
          }
        }, {
          start: {
            line: 347,
            column: 22
          },
          end: {
            line: 347,
            column: 39
          }
        }],
        line: 345
      },
      "74": {
        loc: {
          start: {
            line: 346,
            column: 23
          },
          end: {
            line: 346,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 23
          },
          end: {
            line: 346,
            column: 62
          }
        }, {
          start: {
            line: 346,
            column: 66
          },
          end: {
            line: 346,
            column: 70
          }
        }],
        line: 346
      },
      "75": {
        loc: {
          start: {
            line: 348,
            column: 34
          },
          end: {
            line: 350,
            column: 36
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 349,
            column: 67
          }
        }, {
          start: {
            line: 350,
            column: 22
          },
          end: {
            line: 350,
            column: 36
          }
        }],
        line: 348
      },
      "76": {
        loc: {
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 349,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 23
          },
          end: {
            line: 349,
            column: 59
          }
        }, {
          start: {
            line: 349,
            column: 63
          },
          end: {
            line: 349,
            column: 67
          }
        }],
        line: 349
      },
      "77": {
        loc: {
          start: {
            line: 352,
            column: 32
          },
          end: {
            line: 352,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 352,
            column: 45
          },
          end: {
            line: 352,
            column: 95
          }
        }, {
          start: {
            line: 352,
            column: 98
          },
          end: {
            line: 352,
            column: 102
          }
        }],
        line: 352
      },
      "78": {
        loc: {
          start: {
            line: 353,
            column: 34
          },
          end: {
            line: 353,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 353,
            column: 49
          },
          end: {
            line: 353,
            column: 101
          }
        }, {
          start: {
            line: 353,
            column: 104
          },
          end: {
            line: 353,
            column: 108
          }
        }],
        line: 353
      },
      "79": {
        loc: {
          start: {
            line: 354,
            column: 31
          },
          end: {
            line: 354,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 354,
            column: 43
          },
          end: {
            line: 354,
            column: 81
          }
        }, {
          start: {
            line: 354,
            column: 84
          },
          end: {
            line: 354,
            column: 88
          }
        }],
        line: 354
      },
      "80": {
        loc: {
          start: {
            line: 360,
            column: 20
          },
          end: {
            line: 362,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 20
          },
          end: {
            line: 362,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "81": {
        loc: {
          start: {
            line: 360,
            column: 24
          },
          end: {
            line: 360,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 24
          },
          end: {
            line: 360,
            column: 55
          }
        }, {
          start: {
            line: 360,
            column: 59
          },
          end: {
            line: 360,
            column: 70
          }
        }],
        line: 360
      },
      "82": {
        loc: {
          start: {
            line: 363,
            column: 20
          },
          end: {
            line: 365,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 20
          },
          end: {
            line: 365,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "83": {
        loc: {
          start: {
            line: 363,
            column: 24
          },
          end: {
            line: 363,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 24
          },
          end: {
            line: 363,
            column: 57
          }
        }, {
          start: {
            line: 363,
            column: 61
          },
          end: {
            line: 363,
            column: 74
          }
        }],
        line: 363
      },
      "84": {
        loc: {
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 368,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 368,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "85": {
        loc: {
          start: {
            line: 366,
            column: 24
          },
          end: {
            line: 366,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 24
          },
          end: {
            line: 366,
            column: 54
          }
        }, {
          start: {
            line: 366,
            column: 58
          },
          end: {
            line: 366,
            column: 68
          }
        }],
        line: 366
      },
      "86": {
        loc: {
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 384,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 12
          },
          end: {
            line: 384,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "87": {
        loc: {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 393,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 387
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/SPARQLEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/SPARQLEngine.ts"],
      sourcesContent: ["import { Graph } from '../domain/semantic/core/Graph';\nimport { Triple, IRI, Literal, BlankNode } from '../domain/semantic/core/Triple';\nimport { QueryCache, QueryCacheConfig } from './services/QueryCache';\n\nexport interface ConstructResult {\n    triples: Triple[];\n    provenance: string;\n    cached?: boolean;\n}\n\nexport interface SelectResult {\n    results: any[];\n    cached?: boolean;\n}\n\nexport class SPARQLEngine {\n    private queryCache: QueryCache;\n\n    constructor(private graph: Graph, cacheConfig?: Partial<QueryCacheConfig>) {\n        this.queryCache = new QueryCache(cacheConfig);\n    }\n    \n    /**\n     * Execute CONSTRUCT query to generate new triples\n     */\n    construct(query: string): ConstructResult {\n        // Check cache first\n        const cacheKey = this.queryCache.createCacheKey(`CONSTRUCT:${query}`);\n        const cachedResult = this.queryCache.get<ConstructResult>(cacheKey);\n        \n        if (cachedResult) {\n            return { ...cachedResult, cached: true };\n        }\n        // Parse CONSTRUCT query\n        const constructMatch = query.match(/CONSTRUCT\\s*\\{(.*?)\\}\\s*WHERE\\s*\\{(.*?)\\}/is);\n        if (!constructMatch) {\n            throw new Error('Invalid CONSTRUCT query format');\n        }\n        \n        const template = this.parseConstructTemplate(constructMatch[1]);\n        const patterns = this.parsePatterns(constructMatch[2]);\n        \n        if (patterns.length === 0) {\n            return { triples: [], provenance: `CONSTRUCT query at ${new Date().toISOString()}` };\n        }\n        \n        const generatedTriples: Triple[] = [];\n        \n        // Handle multiple patterns by joining results\n        if (patterns.length === 1) {\n            // Single pattern - simple case\n            const pattern = patterns[0];\n            \n            // Convert pattern strings to proper types, stripping angle brackets from IRIs\n            const subject = pattern.subject.startsWith('?') ? null : \n                new IRI(pattern.subject.replace(/^<|>$/g, ''));\n            const predicate = pattern.predicate.startsWith('?') ? null : \n                new IRI(pattern.predicate.replace(/^<|>$/g, ''));\n            const object = pattern.object.startsWith('?') ? null : this.parseObjectForMatching(pattern.object);\n            \n            const matchedTriples = this.graph.match(subject, predicate, object);\n            \n            for (const triple of matchedTriples) {\n                const binding = this.createBinding(pattern, triple);\n                const newTriples = this.instantiateTemplate(template, binding);\n                generatedTriples.push(...newTriples);\n            }\n        } else {\n            // Multiple patterns - need to join bindings\n            const bindings = this.executeWhereClause(patterns);\n            \n            for (const binding of bindings) {\n                const newTriples = this.instantiateTemplate(template, binding);\n                generatedTriples.push(...newTriples);\n            }\n        }\n        \n        // Apply LIMIT if present\n        const limitMatch = query.match(/LIMIT\\s+(\\d+)/i);\n        let result: ConstructResult;\n        \n        if (limitMatch) {\n            const limit = parseInt(limitMatch[1]);\n            result = {\n                triples: generatedTriples.slice(0, limit),\n                provenance: `CONSTRUCT query at ${new Date().toISOString()}`,\n                cached: false\n            };\n        } else {\n            result = {\n                triples: generatedTriples,\n                provenance: `CONSTRUCT query at ${new Date().toISOString()}`,\n                cached: false\n            };\n        }\n        \n        // Cache the result\n        this.queryCache.set(cacheKey, result);\n        \n        return result;\n    }\n    \n    private parseConstructTemplate(templateClause: string): any[] {\n        const templates: any[] = [];\n        // Split by period followed by whitespace or newline, not just any period\n        const lines = templateClause.trim().split(/\\.\\s*(?:\\n|\\s|$)/);\n        \n        for (const line of lines) {\n            const trimmed = line.trim();\n            if (!trimmed) continue;\n            \n            const parts = trimmed.split(/\\s+/);\n            if (parts.length >= 3) {\n                // Preserve quotes for literals\n                let object = parts.slice(2).join(' ');\n                templates.push({\n                    subject: parts[0],\n                    predicate: parts[1],\n                    object: object\n                });\n            }\n        }\n        \n        return templates;\n    }\n    \n    private createBinding(pattern: any, triple: Triple): Record<string, string> {\n        const binding: Record<string, string> = {};\n        \n        if (pattern.subject.startsWith('?')) {\n            binding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());\n        }\n        if (pattern.predicate.startsWith('?')) {\n            binding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());\n        }\n        if (pattern.object.startsWith('?')) {\n            binding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());\n        }\n        \n        return binding;\n    }\n    \n    private formatForBinding(node: any): string {\n        // For SELECT query results, return full typed representation\n        return node.toString();\n    }\n    \n    private instantiateTemplate(template: any[], binding: Record<string, string>): Triple[] {\n        const triples: Triple[] = [];\n        \n        for (const t of template) {\n            const subjectStr = this.resolveValue(t.subject, binding);\n            const predicateStr = this.resolveValue(t.predicate, binding);\n            const objectStr = this.resolveValue(t.object, binding);\n            \n            if (subjectStr && predicateStr && objectStr) {\n                // Create proper Triple objects\n                const subject = subjectStr.startsWith('_:') ? new BlankNode(subjectStr) : new IRI(subjectStr.replace(/^<|>$/g, ''));\n                const predicate = new IRI(predicateStr.replace(/^<|>$/g, ''));\n                \n                // Handle different object types\n                let object: IRI | BlankNode | Literal;\n                if (objectStr.startsWith('\"')) {\n                    // It's a string literal - create typed literal with datatype\n                    object = Literal.string(objectStr.replace(/^\"|\"$/g, ''));\n                } else if (objectStr === 'true' || objectStr === 'false') {\n                    // Boolean literal\n                    object = Literal.boolean(objectStr === 'true');\n                } else if (objectStr.startsWith('_:')) {\n                    // Blank node\n                    object = new BlankNode(objectStr);\n                } else if (/^\\d+$/.test(objectStr)) {\n                    // Integer literal\n                    object = Literal.integer(parseInt(objectStr));\n                } else if (/^\\d+\\.\\d+$/.test(objectStr)) {\n                    // Double literal\n                    object = Literal.double(parseFloat(objectStr));\n                } else {\n                    // IRI\n                    object = new IRI(objectStr.replace(/^<|>$/g, ''));\n                }\n                \n                triples.push(new Triple(subject, predicate, object));\n            }\n        }\n        \n        return triples;\n    }\n    \n    private resolveValue(value: string, binding: Record<string, string>): string | null {\n        if (value.startsWith('?')) {\n            const varName = value.substring(1);\n            return binding[varName] || null;\n        }\n        return value;\n    }\n    \n    private executeWhereClause(patterns: any[]): Record<string, string>[] {\n        if (patterns.length === 0) return [];\n        \n        // Start with first pattern\n        const firstPattern = patterns[0];\n        const firstTriples = this.graph.match(\n            firstPattern.subject.startsWith('?') ? null : new IRI(firstPattern.subject.replace(/^<|>$/g, '')),\n            firstPattern.predicate.startsWith('?') ? null : new IRI(firstPattern.predicate.replace(/^<|>$/g, '')),\n            firstPattern.object.startsWith('?') ? null : \n                (firstPattern.object.startsWith('\"') ? \n                    new Literal(firstPattern.object.replace(/^\"|\"$/g, '')) : \n                    new IRI(firstPattern.object.replace(/^<|>$/g, '')))\n        );\n        \n        let bindings: Record<string, string>[] = [];\n        for (const triple of firstTriples) {\n            bindings.push(this.createBinding(firstPattern, triple));\n        }\n        \n        // Join with subsequent patterns\n        for (let i = 1; i < patterns.length; i++) {\n            const pattern = patterns[i];\n            const newBindings: Record<string, string>[] = [];\n            \n            for (const binding of bindings) {\n                // Resolve pattern with current binding\n                const subjectStr = pattern.subject.startsWith('?') \n                    ? (binding[pattern.subject.substring(1)] || null)\n                    : pattern.subject;\n                const predicateStr = pattern.predicate.startsWith('?')\n                    ? (binding[pattern.predicate.substring(1)] || null)\n                    : pattern.predicate;\n                const objectStr = pattern.object.startsWith('?')\n                    ? (binding[pattern.object.substring(1)] || null)\n                    : pattern.object;\n                \n                // Convert strings to proper types for match\n                const subject = subjectStr ? new IRI(subjectStr.replace(/^<|>$/g, '')) : null;\n                const predicate = predicateStr ? new IRI(predicateStr.replace(/^<|>$/g, '')) : null;\n                const object = objectStr ? this.parseObjectForMatching(objectStr) : null;\n                \n                // Find matching triples\n                const matches = this.graph.match(subject, predicate, object);\n                \n                for (const triple of matches) {\n                    const extendedBinding = { ...binding };\n                    \n                    // Add new variable bindings\n                    if (pattern.subject.startsWith('?') && !subjectStr) {\n                        extendedBinding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());\n                    }\n                    if (pattern.predicate.startsWith('?') && !predicateStr) {\n                        extendedBinding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());\n                    }\n                    if (pattern.object.startsWith('?') && !objectStr) {\n                        extendedBinding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());\n                    }\n                    \n                    newBindings.push(extendedBinding);\n                }\n            }\n            \n            bindings = newBindings;\n        }\n        \n        return bindings;\n    }\n    \n    select(query: string): SelectResult {\n        // Check cache first\n        const cacheKey = this.queryCache.createCacheKey(`SELECT:${query}`);\n        const cachedResult = this.queryCache.get<SelectResult>(cacheKey);\n        \n        if (cachedResult) {\n            return { ...cachedResult, cached: true };\n        }\n\n        // Parse basic SELECT ?var WHERE { ?s ?p ?o } pattern\n        const selectMatch = query.match(/SELECT\\s+(.*?)\\s+WHERE\\s*\\{(.*?)\\}/is);\n        if (!selectMatch) {\n            throw new Error('Invalid SPARQL query format');\n        }\n        \n        const variables = this.parseVariables(selectMatch[1]);\n        const patterns = this.parsePatterns(selectMatch[2]);\n        \n        if (patterns.length === 0) {\n            const emptyResult: SelectResult = { results: [], cached: false };\n            this.queryCache.set(cacheKey, emptyResult);\n            return emptyResult;\n        }\n        \n        let results: any[] = [];\n        \n        if (patterns.length === 1) {\n            // Single pattern - simple case\n            const pattern = patterns[0];\n            \n            // Convert string patterns to proper types for match\n            const subject = pattern.subject.startsWith('?') ? null : new IRI(pattern.subject.replace(/^<|>$/g, ''));\n            const predicate = pattern.predicate.startsWith('?') ? null : new IRI(pattern.predicate.replace(/^<|>$/g, ''));\n            const object = pattern.object.startsWith('?') ? null : this.parseObjectForMatching(pattern.object);\n            \n            const triples = this.graph.match(subject, predicate, object);\n            \n            // Bind variables\n            for (const triple of triples) {\n                const binding: any = {};\n                \n                if (pattern.subject.startsWith('?')) {\n                    const varName = pattern.subject.substring(1);\n                    if (variables.includes('*') || variables.includes(varName)) {\n                        binding[varName] = this.formatForBinding(triple.getSubject());\n                    }\n                }\n                \n                if (pattern.predicate.startsWith('?')) {\n                    const varName = pattern.predicate.substring(1);\n                    if (variables.includes('*') || variables.includes(varName)) {\n                        binding[varName] = this.formatForBinding(triple.getPredicate());\n                    }\n                }\n                \n                if (pattern.object.startsWith('?')) {\n                    const varName = pattern.object.substring(1);\n                    if (variables.includes('*') || variables.includes(varName)) {\n                        binding[varName] = this.formatForBinding(triple.getObject());\n                    }\n                }\n                \n                if (Object.keys(binding).length > 0) {\n                    results.push(binding);\n                }\n            }\n        } else {\n            // Multiple patterns - need to join bindings\n            const bindings = this.executeWhereClauseForSelect(patterns);\n            \n            for (const binding of bindings) {\n                const filteredBinding: any = {};\n                \n                // Only include requested variables\n                for (const [key, value] of Object.entries(binding)) {\n                    if (variables.includes('*') || variables.includes(key)) {\n                        filteredBinding[key] = value;\n                    }\n                }\n                \n                if (Object.keys(filteredBinding).length > 0) {\n                    results.push(filteredBinding);\n                }\n            }\n        }\n        \n        // Apply LIMIT if present\n        const limitMatch = query.match(/LIMIT\\s+(\\d+)/i);\n        let result: SelectResult;\n        \n        if (limitMatch) {\n            const limit = parseInt(limitMatch[1]);\n            result = { results: results.slice(0, limit), cached: false };\n        } else {\n            result = { results, cached: false };\n        }\n        \n        // Cache the result\n        this.queryCache.set(cacheKey, result);\n        \n        return result;\n    }\n    \n    private parseVariables(selectClause: string): string[] {\n        const trimmed = selectClause.trim();\n        if (trimmed === '*') {\n            return ['*'];\n        }\n        \n        const variables: string[] = [];\n        const varPattern = /\\?(\\w+)/g;\n        let match;\n        while ((match = varPattern.exec(trimmed)) !== null) {\n            variables.push(match[1]);\n        }\n        return variables;\n    }\n    \n    private parseObjectForMatching(objectStr: string): IRI | Literal | null {\n        if (objectStr.startsWith('\"')) {\n            // It's a string literal - create proper Literal for matching\n            const content = objectStr.replace(/^\"|\"$/g, '');\n            return Literal.string(content);\n        } else {\n            // It's an IRI\n            return new IRI(objectStr.replace(/^<|>$/g, ''));\n        }\n    }\n    \n    private executeWhereClauseForSelect(patterns: any[]): Record<string, string>[] {\n        if (patterns.length === 0) return [];\n        \n        // Start with first pattern\n        const firstPattern = patterns[0];\n        const firstTriples = this.graph.match(\n            firstPattern.subject.startsWith('?') ? null : new IRI(firstPattern.subject.replace(/^<|>$/g, '')),\n            firstPattern.predicate.startsWith('?') ? null : new IRI(firstPattern.predicate.replace(/^<|>$/g, '')),\n            firstPattern.object.startsWith('?') ? null : this.parseObjectForMatching(firstPattern.object)\n        );\n        \n        let bindings: Record<string, string>[] = [];\n        for (const triple of firstTriples) {\n            bindings.push(this.createBinding(firstPattern, triple));\n        }\n        \n        // Join with subsequent patterns\n        for (let i = 1; i < patterns.length; i++) {\n            const pattern = patterns[i];\n            const newBindings: Record<string, string>[] = [];\n            \n            for (const binding of bindings) {\n                // Resolve pattern with current binding\n                const subjectStr = pattern.subject.startsWith('?') \n                    ? (binding[pattern.subject.substring(1)] || null)\n                    : pattern.subject;\n                const predicateStr = pattern.predicate.startsWith('?')\n                    ? (binding[pattern.predicate.substring(1)] || null)\n                    : pattern.predicate;\n                const objectStr = pattern.object.startsWith('?')\n                    ? (binding[pattern.object.substring(1)] || null)\n                    : pattern.object;\n                \n                // Convert strings to proper types for match\n                const subject = subjectStr ? new IRI(subjectStr.replace(/^<|>$/g, '')) : null;\n                const predicate = predicateStr ? new IRI(predicateStr.replace(/^<|>$/g, '')) : null;\n                const object = objectStr ? this.parseObjectForMatching(objectStr) : null;\n                \n                // Find matching triples\n                const matches = this.graph.match(subject, predicate, object);\n                \n                for (const triple of matches) {\n                    const extendedBinding = { ...binding };\n                    \n                    // Add new variable bindings\n                    if (pattern.subject.startsWith('?') && !subjectStr) {\n                        extendedBinding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());\n                    }\n                    if (pattern.predicate.startsWith('?') && !predicateStr) {\n                        extendedBinding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());\n                    }\n                    if (pattern.object.startsWith('?') && !objectStr) {\n                        extendedBinding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());\n                    }\n                    \n                    newBindings.push(extendedBinding);\n                }\n            }\n            \n            bindings = newBindings;\n        }\n        \n        return bindings;\n    }\n    \n    private parsePatterns(whereClause: string): any[] {\n        const patterns: any[] = [];\n        \n        // Simple triple pattern: ?s ?p ?o or with literals\n        // Split by period followed by whitespace/newline, not dots inside quotes\n        const lines = whereClause.trim().split(/\\.\\s*(?:\\n|\\s|$)/);\n        \n        for (const line of lines) {\n            const trimmed = line.trim();\n            if (!trimmed) continue;\n            \n            // Match triple pattern (very basic)\n            const parts = trimmed.split(/\\s+/);\n            if (parts.length >= 3) {\n                patterns.push({\n                    subject: parts[0],\n                    predicate: parts[1],\n                    object: parts.slice(2).join(' ')  // Keep quotes for proper matching\n                });\n            }\n        }\n        \n        return patterns;\n    }\n\n    /**\n     * Get cache statistics\n     */\n    getCacheStatistics() {\n        return this.queryCache.getStatistics();\n    }\n\n    /**\n     * Invalidate all cached queries\n     */\n    invalidateCache(): void {\n        this.queryCache.invalidateAll();\n    }\n\n    /**\n     * Update cache configuration\n     */\n    updateCacheConfig(config: Partial<QueryCacheConfig>): void {\n        this.queryCache.updateConfig(config);\n    }\n\n    /**\n     * Get current cache configuration\n     */\n    getCacheConfig(): QueryCacheConfig {\n        return this.queryCache.getConfig();\n    }\n\n    /**\n     * Cleanup expired cache entries\n     */\n    cleanupCache(): number {\n        return this.queryCache.cleanup();\n    }\n\n    /**\n     * Destroy cache and cleanup resources\n     */\n    destroy(): void {\n        this.queryCache.destroy();\n    }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "85d4fa6b59025ef599aae79073c6fe69b00b630b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1n1dj0zc9o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1n1dj0zc9o();
cov_1n1dj0zc9o().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1n1dj0zc9o().s[1]++;
exports.SPARQLEngine = void 0;
const Triple_1 =
/* istanbul ignore next */
(cov_1n1dj0zc9o().s[2]++, require("../domain/semantic/core/Triple"));
const QueryCache_1 =
/* istanbul ignore next */
(cov_1n1dj0zc9o().s[3]++, require("./services/QueryCache"));
class SPARQLEngine {
  constructor(graph, cacheConfig) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[0]++;
    cov_1n1dj0zc9o().s[4]++;
    this.graph = graph;
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[5]++;
    this.queryCache = new QueryCache_1.QueryCache(cacheConfig);
  }
  /**
   * Execute CONSTRUCT query to generate new triples
   */
  construct(query) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[1]++;
    // Check cache first
    const cacheKey =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[6]++, this.queryCache.createCacheKey(`CONSTRUCT:${query}`));
    const cachedResult =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[7]++, this.queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[8]++;
    if (cachedResult) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[0][0]++;
      cov_1n1dj0zc9o().s[9]++;
      return Object.assign(Object.assign({}, cachedResult), {
        cached: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[0][1]++;
    }
    // Parse CONSTRUCT query
    const constructMatch =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[10]++, query.match(/CONSTRUCT\s*\{(.*?)\}\s*WHERE\s*\{(.*?)\}/is));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[11]++;
    if (!constructMatch) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[1][0]++;
      cov_1n1dj0zc9o().s[12]++;
      throw new Error('Invalid CONSTRUCT query format');
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[1][1]++;
    }
    const template =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[13]++, this.parseConstructTemplate(constructMatch[1]));
    const patterns =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[14]++, this.parsePatterns(constructMatch[2]));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[15]++;
    if (patterns.length === 0) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[2][0]++;
      cov_1n1dj0zc9o().s[16]++;
      return {
        triples: [],
        provenance: `CONSTRUCT query at ${new Date().toISOString()}`
      };
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[2][1]++;
    }
    const generatedTriples =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[17]++, []);
    // Handle multiple patterns by joining results
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[18]++;
    if (patterns.length === 1) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[3][0]++;
      // Single pattern - simple case
      const pattern =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[19]++, patterns[0]);
      // Convert pattern strings to proper types, stripping angle brackets from IRIs
      const subject =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[20]++, pattern.subject.startsWith('?') ?
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[4][0]++, null) :
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[4][1]++, new Triple_1.IRI(pattern.subject.replace(/^<|>$/g, ''))));
      const predicate =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[21]++, pattern.predicate.startsWith('?') ?
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[5][0]++, null) :
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[5][1]++, new Triple_1.IRI(pattern.predicate.replace(/^<|>$/g, ''))));
      const object =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[22]++, pattern.object.startsWith('?') ?
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[6][0]++, null) :
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[6][1]++, this.parseObjectForMatching(pattern.object)));
      const matchedTriples =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[23]++, this.graph.match(subject, predicate, object));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[24]++;
      for (const triple of matchedTriples) {
        const binding =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[25]++, this.createBinding(pattern, triple));
        const newTriples =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[26]++, this.instantiateTemplate(template, binding));
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[27]++;
        generatedTriples.push(...newTriples);
      }
    } else {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[3][1]++;
      // Multiple patterns - need to join bindings
      const bindings =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[28]++, this.executeWhereClause(patterns));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[29]++;
      for (const binding of bindings) {
        const newTriples =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[30]++, this.instantiateTemplate(template, binding));
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[31]++;
        generatedTriples.push(...newTriples);
      }
    }
    // Apply LIMIT if present
    const limitMatch =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[32]++, query.match(/LIMIT\s+(\d+)/i));
    let result;
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[33]++;
    if (limitMatch) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[7][0]++;
      const limit =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[34]++, parseInt(limitMatch[1]));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[35]++;
      result = {
        triples: generatedTriples.slice(0, limit),
        provenance: `CONSTRUCT query at ${new Date().toISOString()}`,
        cached: false
      };
    } else {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[7][1]++;
      cov_1n1dj0zc9o().s[36]++;
      result = {
        triples: generatedTriples,
        provenance: `CONSTRUCT query at ${new Date().toISOString()}`,
        cached: false
      };
    }
    // Cache the result
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[37]++;
    this.queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[38]++;
    return result;
  }
  parseConstructTemplate(templateClause) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[2]++;
    const templates =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[39]++, []);
    // Split by period followed by whitespace or newline, not just any period
    const lines =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[40]++, templateClause.trim().split(/\.\s*(?:\n|\s|$)/));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[41]++;
    for (const line of lines) {
      const trimmed =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[42]++, line.trim());
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[43]++;
      if (!trimmed) {
        /* istanbul ignore next */
        cov_1n1dj0zc9o().b[8][0]++;
        cov_1n1dj0zc9o().s[44]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1n1dj0zc9o().b[8][1]++;
      }
      const parts =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[45]++, trimmed.split(/\s+/));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[46]++;
      if (parts.length >= 3) {
        /* istanbul ignore next */
        cov_1n1dj0zc9o().b[9][0]++;
        // Preserve quotes for literals
        let object =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[47]++, parts.slice(2).join(' '));
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[48]++;
        templates.push({
          subject: parts[0],
          predicate: parts[1],
          object: object
        });
      } else
      /* istanbul ignore next */
      {
        cov_1n1dj0zc9o().b[9][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[49]++;
    return templates;
  }
  createBinding(pattern, triple) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[3]++;
    const binding =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[50]++, {});
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[51]++;
    if (pattern.subject.startsWith('?')) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[10][0]++;
      cov_1n1dj0zc9o().s[52]++;
      binding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[10][1]++;
    }
    cov_1n1dj0zc9o().s[53]++;
    if (pattern.predicate.startsWith('?')) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[11][0]++;
      cov_1n1dj0zc9o().s[54]++;
      binding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[11][1]++;
    }
    cov_1n1dj0zc9o().s[55]++;
    if (pattern.object.startsWith('?')) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[12][0]++;
      cov_1n1dj0zc9o().s[56]++;
      binding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[12][1]++;
    }
    cov_1n1dj0zc9o().s[57]++;
    return binding;
  }
  formatForBinding(node) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[4]++;
    cov_1n1dj0zc9o().s[58]++;
    // For SELECT query results, return full typed representation
    return node.toString();
  }
  instantiateTemplate(template, binding) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[5]++;
    const triples =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[59]++, []);
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[60]++;
    for (const t of template) {
      const subjectStr =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[61]++, this.resolveValue(t.subject, binding));
      const predicateStr =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[62]++, this.resolveValue(t.predicate, binding));
      const objectStr =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[63]++, this.resolveValue(t.object, binding));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[64]++;
      if (
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[14][0]++, subjectStr) &&
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[14][1]++, predicateStr) &&
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[14][2]++, objectStr)) {
        /* istanbul ignore next */
        cov_1n1dj0zc9o().b[13][0]++;
        // Create proper Triple objects
        const subject =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[65]++, subjectStr.startsWith('_:') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[15][0]++, new Triple_1.BlankNode(subjectStr)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[15][1]++, new Triple_1.IRI(subjectStr.replace(/^<|>$/g, ''))));
        const predicate =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[66]++, new Triple_1.IRI(predicateStr.replace(/^<|>$/g, '')));
        // Handle different object types
        let object;
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[67]++;
        if (objectStr.startsWith('"')) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[16][0]++;
          cov_1n1dj0zc9o().s[68]++;
          // It's a string literal - create typed literal with datatype
          object = Triple_1.Literal.string(objectStr.replace(/^"|"$/g, ''));
        } else {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[16][1]++;
          cov_1n1dj0zc9o().s[69]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[18][0]++, objectStr === 'true') ||
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[18][1]++, objectStr === 'false')) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[17][0]++;
            cov_1n1dj0zc9o().s[70]++;
            // Boolean literal
            object = Triple_1.Literal.boolean(objectStr === 'true');
          } else {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[17][1]++;
            cov_1n1dj0zc9o().s[71]++;
            if (objectStr.startsWith('_:')) {
              /* istanbul ignore next */
              cov_1n1dj0zc9o().b[19][0]++;
              cov_1n1dj0zc9o().s[72]++;
              // Blank node
              object = new Triple_1.BlankNode(objectStr);
            } else {
              /* istanbul ignore next */
              cov_1n1dj0zc9o().b[19][1]++;
              cov_1n1dj0zc9o().s[73]++;
              if (/^\d+$/.test(objectStr)) {
                /* istanbul ignore next */
                cov_1n1dj0zc9o().b[20][0]++;
                cov_1n1dj0zc9o().s[74]++;
                // Integer literal
                object = Triple_1.Literal.integer(parseInt(objectStr));
              } else {
                /* istanbul ignore next */
                cov_1n1dj0zc9o().b[20][1]++;
                cov_1n1dj0zc9o().s[75]++;
                if (/^\d+\.\d+$/.test(objectStr)) {
                  /* istanbul ignore next */
                  cov_1n1dj0zc9o().b[21][0]++;
                  cov_1n1dj0zc9o().s[76]++;
                  // Double literal
                  object = Triple_1.Literal.double(parseFloat(objectStr));
                } else {
                  /* istanbul ignore next */
                  cov_1n1dj0zc9o().b[21][1]++;
                  cov_1n1dj0zc9o().s[77]++;
                  // IRI
                  object = new Triple_1.IRI(objectStr.replace(/^<|>$/g, ''));
                }
              }
            }
          }
        }
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[78]++;
        triples.push(new Triple_1.Triple(subject, predicate, object));
      } else
      /* istanbul ignore next */
      {
        cov_1n1dj0zc9o().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[79]++;
    return triples;
  }
  resolveValue(value, binding) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[6]++;
    cov_1n1dj0zc9o().s[80]++;
    if (value.startsWith('?')) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[22][0]++;
      const varName =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[81]++, value.substring(1));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[82]++;
      return /* istanbul ignore next */(cov_1n1dj0zc9o().b[23][0]++, binding[varName]) ||
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[23][1]++, null);
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[22][1]++;
    }
    cov_1n1dj0zc9o().s[83]++;
    return value;
  }
  executeWhereClause(patterns) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[7]++;
    cov_1n1dj0zc9o().s[84]++;
    if (patterns.length === 0) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[24][0]++;
      cov_1n1dj0zc9o().s[85]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[24][1]++;
    }
    // Start with first pattern
    const firstPattern =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[86]++, patterns[0]);
    const firstTriples =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[87]++, this.graph.match(firstPattern.subject.startsWith('?') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[25][0]++, null) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[25][1]++, new Triple_1.IRI(firstPattern.subject.replace(/^<|>$/g, ''))), firstPattern.predicate.startsWith('?') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[26][0]++, null) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[26][1]++, new Triple_1.IRI(firstPattern.predicate.replace(/^<|>$/g, ''))), firstPattern.object.startsWith('?') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[27][0]++, null) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[27][1]++, firstPattern.object.startsWith('"') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[28][0]++, new Triple_1.Literal(firstPattern.object.replace(/^"|"$/g, ''))) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[28][1]++, new Triple_1.IRI(firstPattern.object.replace(/^<|>$/g, ''))))));
    let bindings =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[88]++, []);
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[89]++;
    for (const triple of firstTriples) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[90]++;
      bindings.push(this.createBinding(firstPattern, triple));
    }
    // Join with subsequent patterns
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[91]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[92]++, 1); i < patterns.length; i++) {
      const pattern =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[93]++, patterns[i]);
      const newBindings =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[94]++, []);
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[95]++;
      for (const binding of bindings) {
        // Resolve pattern with current binding
        const subjectStr =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[96]++, pattern.subject.startsWith('?') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[29][0]++,
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[30][0]++, binding[pattern.subject.substring(1)]) ||
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[30][1]++, null)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[29][1]++, pattern.subject));
        const predicateStr =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[97]++, pattern.predicate.startsWith('?') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[31][0]++,
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[32][0]++, binding[pattern.predicate.substring(1)]) ||
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[32][1]++, null)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[31][1]++, pattern.predicate));
        const objectStr =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[98]++, pattern.object.startsWith('?') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[33][0]++,
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[34][0]++, binding[pattern.object.substring(1)]) ||
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[34][1]++, null)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[33][1]++, pattern.object));
        // Convert strings to proper types for match
        const subject =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[99]++, subjectStr ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[35][0]++, new Triple_1.IRI(subjectStr.replace(/^<|>$/g, ''))) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[35][1]++, null));
        const predicate =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[100]++, predicateStr ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[36][0]++, new Triple_1.IRI(predicateStr.replace(/^<|>$/g, ''))) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[36][1]++, null));
        const object =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[101]++, objectStr ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[37][0]++, this.parseObjectForMatching(objectStr)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[37][1]++, null));
        // Find matching triples
        const matches =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[102]++, this.graph.match(subject, predicate, object));
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[103]++;
        for (const triple of matches) {
          const extendedBinding =
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().s[104]++, Object.assign({}, binding));
          // Add new variable bindings
          /* istanbul ignore next */
          cov_1n1dj0zc9o().s[105]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[39][0]++, pattern.subject.startsWith('?')) &&
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[39][1]++, !subjectStr)) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[38][0]++;
            cov_1n1dj0zc9o().s[106]++;
            extendedBinding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[38][1]++;
          }
          cov_1n1dj0zc9o().s[107]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[41][0]++, pattern.predicate.startsWith('?')) &&
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[41][1]++, !predicateStr)) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[40][0]++;
            cov_1n1dj0zc9o().s[108]++;
            extendedBinding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[40][1]++;
          }
          cov_1n1dj0zc9o().s[109]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[43][0]++, pattern.object.startsWith('?')) &&
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[43][1]++, !objectStr)) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[42][0]++;
            cov_1n1dj0zc9o().s[110]++;
            extendedBinding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[42][1]++;
          }
          cov_1n1dj0zc9o().s[111]++;
          newBindings.push(extendedBinding);
        }
      }
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[112]++;
      bindings = newBindings;
    }
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[113]++;
    return bindings;
  }
  select(query) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[8]++;
    // Check cache first
    const cacheKey =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[114]++, this.queryCache.createCacheKey(`SELECT:${query}`));
    const cachedResult =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[115]++, this.queryCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[116]++;
    if (cachedResult) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[44][0]++;
      cov_1n1dj0zc9o().s[117]++;
      return Object.assign(Object.assign({}, cachedResult), {
        cached: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[44][1]++;
    }
    // Parse basic SELECT ?var WHERE { ?s ?p ?o } pattern
    const selectMatch =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[118]++, query.match(/SELECT\s+(.*?)\s+WHERE\s*\{(.*?)\}/is));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[119]++;
    if (!selectMatch) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[45][0]++;
      cov_1n1dj0zc9o().s[120]++;
      throw new Error('Invalid SPARQL query format');
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[45][1]++;
    }
    const variables =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[121]++, this.parseVariables(selectMatch[1]));
    const patterns =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[122]++, this.parsePatterns(selectMatch[2]));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[123]++;
    if (patterns.length === 0) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[46][0]++;
      const emptyResult =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[124]++, {
        results: [],
        cached: false
      });
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[125]++;
      this.queryCache.set(cacheKey, emptyResult);
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[126]++;
      return emptyResult;
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[46][1]++;
    }
    let results =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[127]++, []);
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[128]++;
    if (patterns.length === 1) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[47][0]++;
      // Single pattern - simple case
      const pattern =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[129]++, patterns[0]);
      // Convert string patterns to proper types for match
      const subject =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[130]++, pattern.subject.startsWith('?') ?
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[48][0]++, null) :
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[48][1]++, new Triple_1.IRI(pattern.subject.replace(/^<|>$/g, ''))));
      const predicate =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[131]++, pattern.predicate.startsWith('?') ?
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[49][0]++, null) :
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[49][1]++, new Triple_1.IRI(pattern.predicate.replace(/^<|>$/g, ''))));
      const object =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[132]++, pattern.object.startsWith('?') ?
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[50][0]++, null) :
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().b[50][1]++, this.parseObjectForMatching(pattern.object)));
      const triples =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[133]++, this.graph.match(subject, predicate, object));
      // Bind variables
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[134]++;
      for (const triple of triples) {
        const binding =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[135]++, {});
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[136]++;
        if (pattern.subject.startsWith('?')) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[51][0]++;
          const varName =
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().s[137]++, pattern.subject.substring(1));
          /* istanbul ignore next */
          cov_1n1dj0zc9o().s[138]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[53][0]++, variables.includes('*')) ||
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[53][1]++, variables.includes(varName))) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[52][0]++;
            cov_1n1dj0zc9o().s[139]++;
            binding[varName] = this.formatForBinding(triple.getSubject());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[52][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n1dj0zc9o().b[51][1]++;
        }
        cov_1n1dj0zc9o().s[140]++;
        if (pattern.predicate.startsWith('?')) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[54][0]++;
          const varName =
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().s[141]++, pattern.predicate.substring(1));
          /* istanbul ignore next */
          cov_1n1dj0zc9o().s[142]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[56][0]++, variables.includes('*')) ||
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[56][1]++, variables.includes(varName))) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[55][0]++;
            cov_1n1dj0zc9o().s[143]++;
            binding[varName] = this.formatForBinding(triple.getPredicate());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[55][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n1dj0zc9o().b[54][1]++;
        }
        cov_1n1dj0zc9o().s[144]++;
        if (pattern.object.startsWith('?')) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[57][0]++;
          const varName =
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().s[145]++, pattern.object.substring(1));
          /* istanbul ignore next */
          cov_1n1dj0zc9o().s[146]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[59][0]++, variables.includes('*')) ||
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[59][1]++, variables.includes(varName))) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[58][0]++;
            cov_1n1dj0zc9o().s[147]++;
            binding[varName] = this.formatForBinding(triple.getObject());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[58][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1n1dj0zc9o().b[57][1]++;
        }
        cov_1n1dj0zc9o().s[148]++;
        if (Object.keys(binding).length > 0) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[60][0]++;
          cov_1n1dj0zc9o().s[149]++;
          results.push(binding);
        } else
        /* istanbul ignore next */
        {
          cov_1n1dj0zc9o().b[60][1]++;
        }
      }
    } else {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[47][1]++;
      // Multiple patterns - need to join bindings
      const bindings =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[150]++, this.executeWhereClauseForSelect(patterns));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[151]++;
      for (const binding of bindings) {
        const filteredBinding =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[152]++, {});
        // Only include requested variables
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[153]++;
        for (const [key, value] of Object.entries(binding)) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().s[154]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[62][0]++, variables.includes('*')) ||
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[62][1]++, variables.includes(key))) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[61][0]++;
            cov_1n1dj0zc9o().s[155]++;
            filteredBinding[key] = value;
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[61][1]++;
          }
        }
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[156]++;
        if (Object.keys(filteredBinding).length > 0) {
          /* istanbul ignore next */
          cov_1n1dj0zc9o().b[63][0]++;
          cov_1n1dj0zc9o().s[157]++;
          results.push(filteredBinding);
        } else
        /* istanbul ignore next */
        {
          cov_1n1dj0zc9o().b[63][1]++;
        }
      }
    }
    // Apply LIMIT if present
    const limitMatch =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[158]++, query.match(/LIMIT\s+(\d+)/i));
    let result;
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[159]++;
    if (limitMatch) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[64][0]++;
      const limit =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[160]++, parseInt(limitMatch[1]));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[161]++;
      result = {
        results: results.slice(0, limit),
        cached: false
      };
    } else {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[64][1]++;
      cov_1n1dj0zc9o().s[162]++;
      result = {
        results,
        cached: false
      };
    }
    // Cache the result
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[163]++;
    this.queryCache.set(cacheKey, result);
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[164]++;
    return result;
  }
  parseVariables(selectClause) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[9]++;
    const trimmed =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[165]++, selectClause.trim());
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[166]++;
    if (trimmed === '*') {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[65][0]++;
      cov_1n1dj0zc9o().s[167]++;
      return ['*'];
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[65][1]++;
    }
    const variables =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[168]++, []);
    const varPattern =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[169]++, /\?(\w+)/g);
    let match;
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[170]++;
    while ((match = varPattern.exec(trimmed)) !== null) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[171]++;
      variables.push(match[1]);
    }
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[172]++;
    return variables;
  }
  parseObjectForMatching(objectStr) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[10]++;
    cov_1n1dj0zc9o().s[173]++;
    if (objectStr.startsWith('"')) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[66][0]++;
      // It's a string literal - create proper Literal for matching
      const content =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[174]++, objectStr.replace(/^"|"$/g, ''));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[175]++;
      return Triple_1.Literal.string(content);
    } else {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[66][1]++;
      cov_1n1dj0zc9o().s[176]++;
      // It's an IRI
      return new Triple_1.IRI(objectStr.replace(/^<|>$/g, ''));
    }
  }
  executeWhereClauseForSelect(patterns) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[11]++;
    cov_1n1dj0zc9o().s[177]++;
    if (patterns.length === 0) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().b[67][0]++;
      cov_1n1dj0zc9o().s[178]++;
      return [];
    } else
    /* istanbul ignore next */
    {
      cov_1n1dj0zc9o().b[67][1]++;
    }
    // Start with first pattern
    const firstPattern =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[179]++, patterns[0]);
    const firstTriples =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[180]++, this.graph.match(firstPattern.subject.startsWith('?') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[68][0]++, null) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[68][1]++, new Triple_1.IRI(firstPattern.subject.replace(/^<|>$/g, ''))), firstPattern.predicate.startsWith('?') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[69][0]++, null) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[69][1]++, new Triple_1.IRI(firstPattern.predicate.replace(/^<|>$/g, ''))), firstPattern.object.startsWith('?') ?
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[70][0]++, null) :
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().b[70][1]++, this.parseObjectForMatching(firstPattern.object))));
    let bindings =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[181]++, []);
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[182]++;
    for (const triple of firstTriples) {
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[183]++;
      bindings.push(this.createBinding(firstPattern, triple));
    }
    // Join with subsequent patterns
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[184]++;
    for (let i =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[185]++, 1); i < patterns.length; i++) {
      const pattern =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[186]++, patterns[i]);
      const newBindings =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[187]++, []);
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[188]++;
      for (const binding of bindings) {
        // Resolve pattern with current binding
        const subjectStr =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[189]++, pattern.subject.startsWith('?') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[71][0]++,
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[72][0]++, binding[pattern.subject.substring(1)]) ||
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[72][1]++, null)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[71][1]++, pattern.subject));
        const predicateStr =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[190]++, pattern.predicate.startsWith('?') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[73][0]++,
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[74][0]++, binding[pattern.predicate.substring(1)]) ||
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[74][1]++, null)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[73][1]++, pattern.predicate));
        const objectStr =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[191]++, pattern.object.startsWith('?') ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[75][0]++,
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[76][0]++, binding[pattern.object.substring(1)]) ||
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[76][1]++, null)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[75][1]++, pattern.object));
        // Convert strings to proper types for match
        const subject =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[192]++, subjectStr ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[77][0]++, new Triple_1.IRI(subjectStr.replace(/^<|>$/g, ''))) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[77][1]++, null));
        const predicate =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[193]++, predicateStr ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[78][0]++, new Triple_1.IRI(predicateStr.replace(/^<|>$/g, ''))) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[78][1]++, null));
        const object =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[194]++, objectStr ?
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[79][0]++, this.parseObjectForMatching(objectStr)) :
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().b[79][1]++, null));
        // Find matching triples
        const matches =
        /* istanbul ignore next */
        (cov_1n1dj0zc9o().s[195]++, this.graph.match(subject, predicate, object));
        /* istanbul ignore next */
        cov_1n1dj0zc9o().s[196]++;
        for (const triple of matches) {
          const extendedBinding =
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().s[197]++, Object.assign({}, binding));
          // Add new variable bindings
          /* istanbul ignore next */
          cov_1n1dj0zc9o().s[198]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[81][0]++, pattern.subject.startsWith('?')) &&
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[81][1]++, !subjectStr)) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[80][0]++;
            cov_1n1dj0zc9o().s[199]++;
            extendedBinding[pattern.subject.substring(1)] = this.formatForBinding(triple.getSubject());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[80][1]++;
          }
          cov_1n1dj0zc9o().s[200]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[83][0]++, pattern.predicate.startsWith('?')) &&
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[83][1]++, !predicateStr)) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[82][0]++;
            cov_1n1dj0zc9o().s[201]++;
            extendedBinding[pattern.predicate.substring(1)] = this.formatForBinding(triple.getPredicate());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[82][1]++;
          }
          cov_1n1dj0zc9o().s[202]++;
          if (
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[85][0]++, pattern.object.startsWith('?')) &&
          /* istanbul ignore next */
          (cov_1n1dj0zc9o().b[85][1]++, !objectStr)) {
            /* istanbul ignore next */
            cov_1n1dj0zc9o().b[84][0]++;
            cov_1n1dj0zc9o().s[203]++;
            extendedBinding[pattern.object.substring(1)] = this.formatForBinding(triple.getObject());
          } else
          /* istanbul ignore next */
          {
            cov_1n1dj0zc9o().b[84][1]++;
          }
          cov_1n1dj0zc9o().s[204]++;
          newBindings.push(extendedBinding);
        }
      }
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[205]++;
      bindings = newBindings;
    }
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[206]++;
    return bindings;
  }
  parsePatterns(whereClause) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[12]++;
    const patterns =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[207]++, []);
    // Simple triple pattern: ?s ?p ?o or with literals
    // Split by period followed by whitespace/newline, not dots inside quotes
    const lines =
    /* istanbul ignore next */
    (cov_1n1dj0zc9o().s[208]++, whereClause.trim().split(/\.\s*(?:\n|\s|$)/));
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[209]++;
    for (const line of lines) {
      const trimmed =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[210]++, line.trim());
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[211]++;
      if (!trimmed) {
        /* istanbul ignore next */
        cov_1n1dj0zc9o().b[86][0]++;
        cov_1n1dj0zc9o().s[212]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_1n1dj0zc9o().b[86][1]++;
      }
      // Match triple pattern (very basic)
      const parts =
      /* istanbul ignore next */
      (cov_1n1dj0zc9o().s[213]++, trimmed.split(/\s+/));
      /* istanbul ignore next */
      cov_1n1dj0zc9o().s[214]++;
      if (parts.length >= 3) {
        /* istanbul ignore next */
        cov_1n1dj0zc9o().b[87][0]++;
        cov_1n1dj0zc9o().s[215]++;
        patterns.push({
          subject: parts[0],
          predicate: parts[1],
          object: parts.slice(2).join(' ') // Keep quotes for proper matching
        });
      } else
      /* istanbul ignore next */
      {
        cov_1n1dj0zc9o().b[87][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1n1dj0zc9o().s[216]++;
    return patterns;
  }
  /**
   * Get cache statistics
   */
  getCacheStatistics() {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[13]++;
    cov_1n1dj0zc9o().s[217]++;
    return this.queryCache.getStatistics();
  }
  /**
   * Invalidate all cached queries
   */
  invalidateCache() {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[14]++;
    cov_1n1dj0zc9o().s[218]++;
    this.queryCache.invalidateAll();
  }
  /**
   * Update cache configuration
   */
  updateCacheConfig(config) {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[15]++;
    cov_1n1dj0zc9o().s[219]++;
    this.queryCache.updateConfig(config);
  }
  /**
   * Get current cache configuration
   */
  getCacheConfig() {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[16]++;
    cov_1n1dj0zc9o().s[220]++;
    return this.queryCache.getConfig();
  }
  /**
   * Cleanup expired cache entries
   */
  cleanupCache() {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[17]++;
    cov_1n1dj0zc9o().s[221]++;
    return this.queryCache.cleanup();
  }
  /**
   * Destroy cache and cleanup resources
   */
  destroy() {
    /* istanbul ignore next */
    cov_1n1dj0zc9o().f[18]++;
    cov_1n1dj0zc9o().s[222]++;
    this.queryCache.destroy();
  }
}
/* istanbul ignore next */
cov_1n1dj0zc9o().s[223]++;
exports.SPARQLEngine = SPARQLEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,