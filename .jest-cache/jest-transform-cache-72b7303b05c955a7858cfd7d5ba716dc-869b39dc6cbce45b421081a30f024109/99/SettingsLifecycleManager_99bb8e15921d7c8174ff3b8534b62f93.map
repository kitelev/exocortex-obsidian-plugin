{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/SettingsLifecycleManager.ts","mappings":";;;AAAA,uCAA0C;AAE1C,+EAGiD;AACjD,yFAAsF;AAEtF;;;GAGG;AACH,MAAa,wBAAwB;IAGnC,YAA6B,MAAc;QAAd,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAE/C,KAAK,CAAC,UAAU;QACd,gBAAgB;QAChB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAE1B,mBAAmB;QACnB,IAAI,CAAC,MAAM,CAAC,aAAa,CACvB,IAAI,yCAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAa,CAAC,CAC7D,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,OAAO;QACX,wDAAwD;IAC1D,CAAC;IAED,YAAY;QACV,OAAO,0BAA0B,CAAC;IACpC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,YAAY;QACxB,IAAI;YACF,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC1C,MAAM,cAAc,GAAG,qCAAiB,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;YAE5D,IAAI,cAAc,CAAC,SAAS,EAAE;gBAC5B,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,cAAc,CAAC,QAAQ,EAAE,CAAC,CAAC;gBACrE,IAAI,CAAC,QAAQ,GAAG,IAAI,qCAAiB,CAAC,oCAAgB,CAAC,CAAC;aACzD;iBAAM;gBACL,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,EAAG,CAAC;aAC5C;SACF;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,yBAAyB,EAAE,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,GAAG,IAAI,qCAAiB,CAAC,oCAAgB,CAAC,CAAC;SACzD;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY;QAChB,IAAI;YACF,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;SACpD;QAAC,OAAO,KAAK,EAAE;YACd,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;YAC/C,IAAI,iBAAM,CAAC,yBAAyB,CAAC,CAAC;SACvC;IACH,CAAC;CACF;AA1DD,4DA0DC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/SettingsLifecycleManager.ts"],"sourcesContent":["import { Plugin, Notice } from \"obsidian\";\nimport { ILifecycleManager } from \"../../application/ports/ILifecycleManager\";\nimport {\n  ExocortexSettings,\n  DEFAULT_SETTINGS,\n} from \"../../domain/entities/ExocortexSettings\";\nimport { ExocortexSettingTab } from \"../../presentation/settings/ExocortexSettingTab\";\n\n/**\n * Settings Lifecycle Manager following Pure Fabrication Pattern (GRASP)\n * Single Responsibility: Manage plugin settings lifecycle\n */\nexport class SettingsLifecycleManager implements ILifecycleManager {\n  private settings: ExocortexSettings;\n\n  constructor(private readonly plugin: Plugin) {}\n\n  async initialize(): Promise<void> {\n    // Load settings\n    await this.loadSettings();\n\n    // Add settings tab\n    this.plugin.addSettingTab(\n      new ExocortexSettingTab(this.plugin.app, this.plugin as any),\n    );\n  }\n\n  async cleanup(): Promise<void> {\n    // Settings cleanup is handled by Obsidian automatically\n  }\n\n  getManagerId(): string {\n    return \"SettingsLifecycleManager\";\n  }\n\n  getSettings(): ExocortexSettings {\n    return this.settings;\n  }\n\n  /**\n   * Load plugin settings from data.json\n   */\n  private async loadSettings(): Promise<void> {\n    try {\n      const data = await this.plugin.loadData();\n      const settingsResult = ExocortexSettings.create(data || {});\n\n      if (settingsResult.isFailure) {\n        console.error(\"Failed to load settings:\", settingsResult.getError());\n        this.settings = new ExocortexSettings(DEFAULT_SETTINGS);\n      } else {\n        this.settings = settingsResult.getValue()!;\n      }\n    } catch (error) {\n      console.error(\"Error loading settings:\", error);\n      this.settings = new ExocortexSettings(DEFAULT_SETTINGS);\n    }\n  }\n\n  /**\n   * Save plugin settings to data.json\n   */\n  async saveSettings(): Promise<void> {\n    try {\n      await this.plugin.saveData(this.settings.toJSON());\n    } catch (error) {\n      console.error(\"Error saving settings:\", error);\n      new Notice(\"Failed to save settings\");\n    }\n  }\n}\n"],"version":3}