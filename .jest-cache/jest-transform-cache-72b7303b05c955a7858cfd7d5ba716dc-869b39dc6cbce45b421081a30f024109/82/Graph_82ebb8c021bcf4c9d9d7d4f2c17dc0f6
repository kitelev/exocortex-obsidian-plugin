ab97a18da88105494eb07186c7ebd1e0
"use strict";
/**
 * RDF Graph implementation for managing collections of triples
 * Provides efficient querying and manipulation of semantic data
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Graph = void 0;
/**
 * RDF Graph - A collection of RDF triples
 */
class Graph {
    constructor(triples = []) {
        this.triples = new Set();
        this.spo = new Map();
        this.pos = new Map();
        this.osp = new Map();
        for (const triple of triples) {
            this.add(triple);
        }
    }
    /**
     * Add a triple to the graph
     */
    add(triple) {
        if (this.has(triple))
            return;
        this.triples.add(triple);
        const s = triple.getSubject().toString();
        const p = triple.getPredicate().toString();
        const o = triple.getObject().toString();
        // Update SPO index
        if (!this.spo.has(s))
            this.spo.set(s, new Map());
        if (!this.spo.get(s).has(p))
            this.spo.get(s).set(p, new Set());
        this.spo.get(s).get(p).add(o);
        // Update POS index
        if (!this.pos.has(p))
            this.pos.set(p, new Map());
        if (!this.pos.get(p).has(o))
            this.pos.get(p).set(o, new Set());
        this.pos.get(p).get(o).add(s);
        // Update OSP index
        if (!this.osp.has(o))
            this.osp.set(o, new Map());
        if (!this.osp.get(o).has(s))
            this.osp.get(o).set(s, new Set());
        this.osp.get(o).get(s).add(p);
    }
    /**
     * Remove a triple from the graph
     */
    remove(triple) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        if (!this.has(triple))
            return;
        this.triples.delete(triple);
        const s = triple.getSubject().toString();
        const p = triple.getPredicate().toString();
        const o = triple.getObject().toString();
        // Update SPO index
        (_b = (_a = this.spo.get(s)) === null || _a === void 0 ? void 0 : _a.get(p)) === null || _b === void 0 ? void 0 : _b.delete(o);
        if (((_d = (_c = this.spo.get(s)) === null || _c === void 0 ? void 0 : _c.get(p)) === null || _d === void 0 ? void 0 : _d.size) === 0) {
            (_e = this.spo.get(s)) === null || _e === void 0 ? void 0 : _e.delete(p);
        }
        if (((_f = this.spo.get(s)) === null || _f === void 0 ? void 0 : _f.size) === 0) {
            this.spo.delete(s);
        }
        // Update POS index
        (_h = (_g = this.pos.get(p)) === null || _g === void 0 ? void 0 : _g.get(o)) === null || _h === void 0 ? void 0 : _h.delete(s);
        if (((_k = (_j = this.pos.get(p)) === null || _j === void 0 ? void 0 : _j.get(o)) === null || _k === void 0 ? void 0 : _k.size) === 0) {
            (_l = this.pos.get(p)) === null || _l === void 0 ? void 0 : _l.delete(o);
        }
        if (((_m = this.pos.get(p)) === null || _m === void 0 ? void 0 : _m.size) === 0) {
            this.pos.delete(p);
        }
        // Update OSP index
        (_p = (_o = this.osp.get(o)) === null || _o === void 0 ? void 0 : _o.get(s)) === null || _p === void 0 ? void 0 : _p.delete(p);
        if (((_r = (_q = this.osp.get(o)) === null || _q === void 0 ? void 0 : _q.get(s)) === null || _r === void 0 ? void 0 : _r.size) === 0) {
            (_s = this.osp.get(o)) === null || _s === void 0 ? void 0 : _s.delete(s);
        }
        if (((_t = this.osp.get(o)) === null || _t === void 0 ? void 0 : _t.size) === 0) {
            this.osp.delete(o);
        }
    }
    /**
     * Check if the graph contains a triple
     */
    has(triple) {
        var _a, _b, _c;
        const s = triple.getSubject().toString();
        const p = triple.getPredicate().toString();
        const o = triple.getObject().toString();
        return (_c = (_b = (_a = this.spo.get(s)) === null || _a === void 0 ? void 0 : _a.get(p)) === null || _b === void 0 ? void 0 : _b.has(o)) !== null && _c !== void 0 ? _c : false;
    }
    /**
     * Get all triples matching a pattern
     * null values act as wildcards
     */
    match(subject = null, predicate = null, object = null) {
        var _a, _b, _c;
        const results = [];
        if (subject && predicate && object) {
            // Exact match
            for (const triple of this.triples) {
                if (triple.getSubject().toString() === subject.toString() &&
                    triple.getPredicate().toString() === predicate.toString() &&
                    triple.getObject().toString() === object.toString()) {
                    results.push(triple);
                }
            }
        }
        else if (subject && predicate) {
            // S P ?
            const objects = (_a = this.spo.get(subject.toString())) === null || _a === void 0 ? void 0 : _a.get(predicate.toString());
            if (objects) {
                for (const triple of this.triples) {
                    if (triple.getSubject().toString() === subject.toString() &&
                        triple.getPredicate().toString() === predicate.toString()) {
                        results.push(triple);
                    }
                }
            }
        }
        else if (predicate && object) {
            // ? P O
            const subjects = (_b = this.pos.get(predicate.toString())) === null || _b === void 0 ? void 0 : _b.get(object.toString());
            if (subjects) {
                for (const triple of this.triples) {
                    if (triple.getPredicate().toString() === predicate.toString() &&
                        triple.getObject().toString() === object.toString()) {
                        results.push(triple);
                    }
                }
            }
        }
        else if (subject && object) {
            // S ? O
            const predicates = (_c = this.osp.get(object.toString())) === null || _c === void 0 ? void 0 : _c.get(subject.toString());
            if (predicates) {
                for (const triple of this.triples) {
                    if (triple.getSubject().toString() === subject.toString() &&
                        triple.getObject().toString() === object.toString()) {
                        results.push(triple);
                    }
                }
            }
        }
        else if (subject) {
            // S ? ?
            for (const triple of this.triples) {
                if (triple.getSubject().toString() === subject.toString()) {
                    results.push(triple);
                }
            }
        }
        else if (predicate) {
            // ? P ?
            for (const triple of this.triples) {
                if (triple.getPredicate().toString() === predicate.toString()) {
                    results.push(triple);
                }
            }
        }
        else if (object) {
            // ? ? O
            for (const triple of this.triples) {
                if (triple.getObject().toString() === object.toString()) {
                    results.push(triple);
                }
            }
        }
        else {
            // ? ? ? - return all
            return Array.from(this.triples);
        }
        return results;
    }
    /**
     * Get all subjects in the graph
     */
    subjects() {
        const subjects = new Set();
        for (const triple of this.triples) {
            subjects.add(triple.getSubject());
        }
        return subjects;
    }
    /**
     * Get all predicates in the graph
     */
    predicates() {
        const predicates = new Set();
        for (const triple of this.triples) {
            predicates.add(triple.getPredicate());
        }
        return predicates;
    }
    /**
     * Get all objects in the graph
     */
    objects() {
        const objects = new Set();
        for (const triple of this.triples) {
            objects.add(triple.getObject());
        }
        return objects;
    }
    /**
     * Get the size of the graph (number of triples)
     */
    size() {
        return this.triples.size;
    }
    /**
     * Check if the graph is empty
     */
    isEmpty() {
        return this.triples.size === 0;
    }
    /**
     * Clear all triples from the graph
     */
    clear() {
        this.triples.clear();
        this.spo.clear();
        this.pos.clear();
        this.osp.clear();
    }
    /**
     * Merge another graph into this one
     */
    merge(other) {
        for (const triple of other.toArray()) {
            this.add(triple);
        }
    }
    /**
     * Create a new graph with triples matching a pattern
     */
    filter(subject = null, predicate = null, object = null) {
        return new Graph(this.match(subject, predicate, object));
    }
    /**
     * Convert the graph to an array of triples
     */
    toArray() {
        return Array.from(this.triples);
    }
    /**
     * Create a human-readable string representation
     */
    toString() {
        return Array.from(this.triples)
            .map(t => t.toString())
            .join('\n');
    }
    /**
     * Create a copy of this graph
     */
    clone() {
        return new Graph(this.toArray());
    }
    /**
     * Check if two graphs are equal
     */
    equals(other) {
        if (this.size() !== other.size())
            return false;
        for (const triple of this.triples) {
            if (!other.has(triple))
                return false;
        }
        return true;
    }
}
exports.Graph = Graph;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,