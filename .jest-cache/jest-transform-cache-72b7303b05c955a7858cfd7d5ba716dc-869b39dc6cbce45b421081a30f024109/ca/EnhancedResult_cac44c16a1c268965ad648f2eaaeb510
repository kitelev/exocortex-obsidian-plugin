d7a38320a940d7f728ecba3b99fb971c
"use strict";

/* istanbul ignore next */
function cov_2klko5o51k() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/EnhancedResult.ts";
  var hash = "474a15be2e8f096a1647be8769fdb1eb55f8b9d5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/EnhancedResult.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 32
        }
      },
      "2": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 25
        },
        end: {
          line: 5,
          column: 60
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 30
        }
      },
      "5": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 42
        }
      },
      "6": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 38
        }
      },
      "8": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 34
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 39
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 41
        }
      },
      "11": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 34
        }
      },
      "12": {
        start: {
          line: 30,
          column: 23
        },
        end: {
          line: 30,
          column: 48
        }
      },
      "13": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "15": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 33
        }
      },
      "16": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "17": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 41
        }
      },
      "18": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 33
        }
      },
      "19": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 57
        }
      },
      "20": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 56
        }
      },
      "21": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "22": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 24
        }
      },
      "23": {
        start: {
          line: 60,
          column: 29
        },
        end: {
          line: 68,
          column: 20
        }
      },
      "24": {
        start: {
          line: 69,
          column: 28
        },
        end: {
          line: 69,
          column: 44
        }
      },
      "25": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 56
        }
      },
      "26": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 75,
          column: 9
        }
      },
      "27": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 81
        }
      },
      "28": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 35
        }
      },
      "29": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 25
        }
      },
      "30": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 87,
          column: 9
        }
      },
      "31": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "32": {
        start: {
          line: 82,
          column: 37
        },
        end: {
          line: 82,
          column: 61
        }
      },
      "33": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 85,
          column: 17
        }
      },
      "34": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 84,
          column: 46
        }
      },
      "35": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "36": {
        start: {
          line: 89,
          column: 34
        },
        end: {
          line: 103,
          column: 24
        }
      },
      "37": {
        start: {
          line: 99,
          column: 45
        },
        end: {
          line: 99,
          column: 73
        }
      },
      "38": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 104,
          column: 62
        }
      },
      "39": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 43
        }
      },
      "40": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "41": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 24
        }
      },
      "42": {
        start: {
          line: 112,
          column: 29
        },
        end: {
          line: 112,
          column: 47
        }
      },
      "43": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "44": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "45": {
        start: {
          line: 116,
          column: 29
        },
        end: {
          line: 116,
          column: 153
        }
      },
      "46": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 117,
          column: 57
        }
      },
      "47": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 120,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 38
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 20
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 20
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 17
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 29
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 29
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 31
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 33
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 17
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 56
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 14
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 72
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 78
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 99,
            column: 39
          },
          end: {
            line: 99,
            column: 40
          }
        },
        loc: {
          start: {
            line: 99,
            column: 45
          },
          end: {
            line: 99,
            column: 73
          }
        },
        line: 99
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        loc: {
          start: {
            line: 108,
            column: 25
          },
          end: {
            line: 118,
            column: 5
          }
        },
        line: 108
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: 49,
            column: 13
          },
          end: {
            line: 52,
            column: 9
          }
        }],
        line: 36
      },
      "1": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 68,
            column: 20
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 60,
            column: 29
          },
          end: {
            line: 60,
            column: 47
          }
        }, {
          start: {
            line: 60,
            column: 51
          },
          end: {
            line: 68,
            column: 20
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 75,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 47
          },
          end: {
            line: 74,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 47
          },
          end: {
            line: 74,
            column: 65
          }
        }, {
          start: {
            line: 74,
            column: 69
          },
          end: {
            line: 74,
            column: 79
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 81,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 105,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/EnhancedResult.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/EnhancedResult.ts"],
      sourcesContent: ["import { Result } from './Result';\nimport { ExocortexError, ErrorBuilder, ErrorSeverity, ErrorCategory } from '../errors/ExocortexError';\n\nexport class EnhancedResult<T> {\n    private _result: Result<T>;\n    private _errorDetails?: ExocortexError;\n\n    private constructor(result: Result<T>, errorDetails?: ExocortexError) {\n        this._result = result;\n        this._errorDetails = errorDetails;\n    }\n\n    get isSuccess(): boolean {\n        return this._result.isSuccess;\n    }\n\n    get isFailure(): boolean {\n        return this._result.isFailure;\n    }\n\n    get error(): string {\n        return this._result.error;\n    }\n\n    public getValue(): T {\n        return this._result.getValue();\n    }\n\n    public errorValue(): string {\n        return this._result.errorValue();\n    }\n\n    public getErrorDetails(): ExocortexError | undefined {\n        return this._errorDetails;\n    }\n\n    public static okEnhanced<U>(value?: U): EnhancedResult<U> {\n        const result = Result.ok<U>(value);\n        return new EnhancedResult(result);\n    }\n\n    public static failEnhanced<U>(error: string | ExocortexError): EnhancedResult<U> {\n        let errorMessage: string;\n        let errorDetails: ExocortexError | undefined;\n\n        if (typeof error === 'string') {\n            errorMessage = error;\n            errorDetails = ErrorBuilder.create()\n                .withTitle('Operation Failed')\n                .withMessage(error)\n                .withSeverity(ErrorSeverity.ERROR)\n                .withCategory(ErrorCategory.SYSTEM)\n                .withContext({\n                    operation: 'Unknown',\n                    timestamp: new Date()\n                })\n                .build();\n        } else {\n            errorMessage = error.message;\n            errorDetails = error;\n        }\n\n        const result = Result.fail<U>(errorMessage);\n        return new EnhancedResult(result, errorDetails);\n    }\n\n    public mapError(fn: (error: ExocortexError) => ExocortexError): EnhancedResult<T> {\n        if (this.isSuccess) {\n            return this;\n        }\n\n        const currentError = this._errorDetails || ErrorBuilder.create()\n            .withMessage(this.error)\n            .withSeverity(ErrorSeverity.ERROR)\n            .withCategory(ErrorCategory.SYSTEM)\n            .withContext({\n                operation: 'Unknown',\n                timestamp: new Date()\n            })\n            .build();\n\n        const mappedError = fn(currentError);\n        return EnhancedResult.failEnhanced<T>(mappedError);\n    }\n\n    public chain<U>(fn: (value: T) => EnhancedResult<U>): EnhancedResult<U> {\n        if (this.isFailure) {\n            return EnhancedResult.failEnhanced<U>(this._errorDetails || this.error);\n        }\n        return fn(this.getValue());\n    }\n\n    public static combineEnhanced(results: EnhancedResult<any>[]): EnhancedResult<any> {\n        const errors: ExocortexError[] = [];\n        \n        for (const result of results) {\n            if (result.isFailure) {\n                const errorDetails = result.getErrorDetails();\n                if (errorDetails) {\n                    errors.push(errorDetails);\n                }\n            }\n        }\n\n        if (errors.length > 0) {\n            const combinedError = ErrorBuilder.create()\n                .withTitle('Multiple Errors Occurred')\n                .withMessage(`${errors.length} error(s) occurred during operation`)\n                .withSeverity(ErrorSeverity.ERROR)\n                .withCategory(ErrorCategory.SYSTEM)\n                .withContext({\n                    operation: 'Combined Operation',\n                    timestamp: new Date(),\n                    metadata: {\n                        errorCount: errors.length,\n                        errors: errors.map(e => ({ id: e.id, title: e.title }))\n                    }\n                })\n                .withInnerError(errors[0])\n                .build();\n\n            return EnhancedResult.failEnhanced(combinedError);\n        }\n\n        return EnhancedResult.okEnhanced();\n    }\n\n    public withContext(context: Partial<ExocortexError['context']>): EnhancedResult<T> {\n        if (this.isSuccess) {\n            return this;\n        }\n\n        const currentError = this._errorDetails;\n        if (!currentError) {\n            return this;\n        }\n\n        const updatedError = {\n            ...currentError,\n            context: {\n                ...currentError.context,\n                ...context\n            }\n        };\n\n        return EnhancedResult.failEnhanced<T>(updatedError);\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "474a15be2e8f096a1647be8769fdb1eb55f8b9d5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2klko5o51k = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2klko5o51k();
cov_2klko5o51k().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2klko5o51k().s[1]++;
exports.EnhancedResult = void 0;
const Result_1 =
/* istanbul ignore next */
(cov_2klko5o51k().s[2]++, require("./Result"));
const ExocortexError_1 =
/* istanbul ignore next */
(cov_2klko5o51k().s[3]++, require("../errors/ExocortexError"));
class EnhancedResult {
  constructor(result, errorDetails) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[0]++;
    cov_2klko5o51k().s[4]++;
    this._result = result;
    /* istanbul ignore next */
    cov_2klko5o51k().s[5]++;
    this._errorDetails = errorDetails;
  }
  get isSuccess() {
    /* istanbul ignore next */
    cov_2klko5o51k().f[1]++;
    cov_2klko5o51k().s[6]++;
    return this._result.isSuccess;
  }
  get isFailure() {
    /* istanbul ignore next */
    cov_2klko5o51k().f[2]++;
    cov_2klko5o51k().s[7]++;
    return this._result.isFailure;
  }
  get error() {
    /* istanbul ignore next */
    cov_2klko5o51k().f[3]++;
    cov_2klko5o51k().s[8]++;
    return this._result.error;
  }
  getValue() {
    /* istanbul ignore next */
    cov_2klko5o51k().f[4]++;
    cov_2klko5o51k().s[9]++;
    return this._result.getValue();
  }
  errorValue() {
    /* istanbul ignore next */
    cov_2klko5o51k().f[5]++;
    cov_2klko5o51k().s[10]++;
    return this._result.errorValue();
  }
  getErrorDetails() {
    /* istanbul ignore next */
    cov_2klko5o51k().f[6]++;
    cov_2klko5o51k().s[11]++;
    return this._errorDetails;
  }
  static okEnhanced(value) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[7]++;
    const result =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[12]++, Result_1.Result.ok(value));
    /* istanbul ignore next */
    cov_2klko5o51k().s[13]++;
    return new EnhancedResult(result);
  }
  static failEnhanced(error) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[8]++;
    let errorMessage;
    let errorDetails;
    /* istanbul ignore next */
    cov_2klko5o51k().s[14]++;
    if (typeof error === 'string') {
      /* istanbul ignore next */
      cov_2klko5o51k().b[0][0]++;
      cov_2klko5o51k().s[15]++;
      errorMessage = error;
      /* istanbul ignore next */
      cov_2klko5o51k().s[16]++;
      errorDetails = ExocortexError_1.ErrorBuilder.create().withTitle('Operation Failed').withMessage(error).withSeverity(ExocortexError_1.ErrorSeverity.ERROR).withCategory(ExocortexError_1.ErrorCategory.SYSTEM).withContext({
        operation: 'Unknown',
        timestamp: new Date()
      }).build();
    } else {
      /* istanbul ignore next */
      cov_2klko5o51k().b[0][1]++;
      cov_2klko5o51k().s[17]++;
      errorMessage = error.message;
      /* istanbul ignore next */
      cov_2klko5o51k().s[18]++;
      errorDetails = error;
    }
    const result =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[19]++, Result_1.Result.fail(errorMessage));
    /* istanbul ignore next */
    cov_2klko5o51k().s[20]++;
    return new EnhancedResult(result, errorDetails);
  }
  mapError(fn) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[9]++;
    cov_2klko5o51k().s[21]++;
    if (this.isSuccess) {
      /* istanbul ignore next */
      cov_2klko5o51k().b[1][0]++;
      cov_2klko5o51k().s[22]++;
      return this;
    } else
    /* istanbul ignore next */
    {
      cov_2klko5o51k().b[1][1]++;
    }
    const currentError =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[23]++,
    /* istanbul ignore next */
    (cov_2klko5o51k().b[2][0]++, this._errorDetails) ||
    /* istanbul ignore next */
    (cov_2klko5o51k().b[2][1]++, ExocortexError_1.ErrorBuilder.create().withMessage(this.error).withSeverity(ExocortexError_1.ErrorSeverity.ERROR).withCategory(ExocortexError_1.ErrorCategory.SYSTEM).withContext({
      operation: 'Unknown',
      timestamp: new Date()
    }).build()));
    const mappedError =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[24]++, fn(currentError));
    /* istanbul ignore next */
    cov_2klko5o51k().s[25]++;
    return EnhancedResult.failEnhanced(mappedError);
  }
  chain(fn) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[10]++;
    cov_2klko5o51k().s[26]++;
    if (this.isFailure) {
      /* istanbul ignore next */
      cov_2klko5o51k().b[3][0]++;
      cov_2klko5o51k().s[27]++;
      return EnhancedResult.failEnhanced(
      /* istanbul ignore next */
      (cov_2klko5o51k().b[4][0]++, this._errorDetails) ||
      /* istanbul ignore next */
      (cov_2klko5o51k().b[4][1]++, this.error));
    } else
    /* istanbul ignore next */
    {
      cov_2klko5o51k().b[3][1]++;
    }
    cov_2klko5o51k().s[28]++;
    return fn(this.getValue());
  }
  static combineEnhanced(results) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[11]++;
    const errors =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[29]++, []);
    /* istanbul ignore next */
    cov_2klko5o51k().s[30]++;
    for (const result of results) {
      /* istanbul ignore next */
      cov_2klko5o51k().s[31]++;
      if (result.isFailure) {
        /* istanbul ignore next */
        cov_2klko5o51k().b[5][0]++;
        const errorDetails =
        /* istanbul ignore next */
        (cov_2klko5o51k().s[32]++, result.getErrorDetails());
        /* istanbul ignore next */
        cov_2klko5o51k().s[33]++;
        if (errorDetails) {
          /* istanbul ignore next */
          cov_2klko5o51k().b[6][0]++;
          cov_2klko5o51k().s[34]++;
          errors.push(errorDetails);
        } else
        /* istanbul ignore next */
        {
          cov_2klko5o51k().b[6][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2klko5o51k().b[5][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2klko5o51k().s[35]++;
    if (errors.length > 0) {
      /* istanbul ignore next */
      cov_2klko5o51k().b[7][0]++;
      const combinedError =
      /* istanbul ignore next */
      (cov_2klko5o51k().s[36]++, ExocortexError_1.ErrorBuilder.create().withTitle('Multiple Errors Occurred').withMessage(`${errors.length} error(s) occurred during operation`).withSeverity(ExocortexError_1.ErrorSeverity.ERROR).withCategory(ExocortexError_1.ErrorCategory.SYSTEM).withContext({
        operation: 'Combined Operation',
        timestamp: new Date(),
        metadata: {
          errorCount: errors.length,
          errors: errors.map(e => {
            /* istanbul ignore next */
            cov_2klko5o51k().f[12]++;
            cov_2klko5o51k().s[37]++;
            return {
              id: e.id,
              title: e.title
            };
          })
        }
      }).withInnerError(errors[0]).build());
      /* istanbul ignore next */
      cov_2klko5o51k().s[38]++;
      return EnhancedResult.failEnhanced(combinedError);
    } else
    /* istanbul ignore next */
    {
      cov_2klko5o51k().b[7][1]++;
    }
    cov_2klko5o51k().s[39]++;
    return EnhancedResult.okEnhanced();
  }
  withContext(context) {
    /* istanbul ignore next */
    cov_2klko5o51k().f[13]++;
    cov_2klko5o51k().s[40]++;
    if (this.isSuccess) {
      /* istanbul ignore next */
      cov_2klko5o51k().b[8][0]++;
      cov_2klko5o51k().s[41]++;
      return this;
    } else
    /* istanbul ignore next */
    {
      cov_2klko5o51k().b[8][1]++;
    }
    const currentError =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[42]++, this._errorDetails);
    /* istanbul ignore next */
    cov_2klko5o51k().s[43]++;
    if (!currentError) {
      /* istanbul ignore next */
      cov_2klko5o51k().b[9][0]++;
      cov_2klko5o51k().s[44]++;
      return this;
    } else
    /* istanbul ignore next */
    {
      cov_2klko5o51k().b[9][1]++;
    }
    const updatedError =
    /* istanbul ignore next */
    (cov_2klko5o51k().s[45]++, Object.assign(Object.assign({}, currentError), {
      context: Object.assign(Object.assign({}, currentError.context), context)
    }));
    /* istanbul ignore next */
    cov_2klko5o51k().s[46]++;
    return EnhancedResult.failEnhanced(updatedError);
  }
}
/* istanbul ignore next */
cov_2klko5o51k().s[47]++;
exports.EnhancedResult = EnhancedResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,