{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianTaskRepository.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/repositories/ObsidianTaskRepository.ts"],"sourcesContent":["import { App, TFile, Notice } from \"obsidian\";\nimport { ITaskRepository } from \"../../domain/repositories/ITaskRepository\";\nimport { Task } from \"../../domain/entities/Task\";\nimport { TaskId } from \"../../domain/value-objects/TaskId\";\nimport { AssetId } from \"../../domain/value-objects/AssetId\";\nimport {\n  TaskStatus,\n  TaskStatusType,\n} from \"../../domain/value-objects/TaskStatus\";\nimport { Priority, PriorityLevel } from \"../../domain/value-objects/Priority\";\nimport { Result } from \"../../domain/core/Result\";\n\n/**\n * Obsidian-specific implementation of ITaskRepository\n * Manages task persistence using Obsidian vault files\n */\nexport class ObsidianTaskRepository implements ITaskRepository {\n  private readonly tasksFolder = \"Tasks\";\n  private taskCache: Map<string, Task> = new Map();\n\n  constructor(private readonly app: App) {}\n\n  async findById(id: TaskId): Promise<Task | null> {\n    // Check cache first\n    const cached = this.taskCache.get(id.toString());\n    if (cached) {\n      return cached;\n    }\n\n    // Search for task file\n    const files = this.app.vault.getMarkdownFiles();\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.id === id.toString()) {\n          const task = await this.loadTaskFromFile(file);\n          if (task) {\n            this.taskCache.set(id.toString(), task);\n            return task;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  async findByProject(projectId: AssetId): Promise<Task[]> {\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.projectId === projectId.toString()) {\n          const task = await this.loadTaskFromFile(file);\n          if (task) {\n            tasks.push(task);\n          }\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findByStatus(status: TaskStatus): Promise<Task[]> {\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.status === status.toString()) {\n          const task = await this.loadTaskFromFile(file);\n          if (task) {\n            tasks.push(task);\n          }\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findByPriority(priority: Priority): Promise<Task[]> {\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.priority === priority.toString()) {\n          const task = await this.loadTaskFromFile(file);\n          if (task) {\n            tasks.push(task);\n          }\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findByTag(tag: string): Promise<Task[]> {\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        const tags = metadata?.frontmatter?.tags || [];\n        if (Array.isArray(tags) && tags.includes(tag)) {\n          const task = await this.loadTaskFromFile(file);\n          if (task) {\n            tasks.push(task);\n          }\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findOverdue(): Promise<Task[]> {\n    const now = new Date();\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.dueDate) {\n          const dueDate = new Date(metadata.frontmatter.dueDate);\n          if (dueDate < now && metadata.frontmatter.status !== \"done\") {\n            const task = await this.loadTaskFromFile(file);\n            if (task) {\n              tasks.push(task);\n            }\n          }\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findDueToday(): Promise<Task[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return this.findDueBetween(today, tomorrow);\n  }\n\n  async findDueBetween(startDate: Date, endDate: Date): Promise<Task[]> {\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.dueDate) {\n          const dueDate = new Date(metadata.frontmatter.dueDate);\n          if (dueDate >= startDate && dueDate <= endDate) {\n            const task = await this.loadTaskFromFile(file);\n            if (task) {\n              tasks.push(task);\n            }\n          }\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findAll(): Promise<Task[]> {\n    const tasks: Task[] = [];\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const task = await this.loadTaskFromFile(file);\n        if (task) {\n          tasks.push(task);\n        }\n      }\n    }\n\n    return tasks;\n  }\n\n  async findByCriteria(criteria: {\n    status?: TaskStatus;\n    priority?: Priority;\n    projectId?: AssetId;\n    tags?: string[];\n  }): Promise<Task[]> {\n    let tasks = await this.findAll();\n\n    if (criteria.status) {\n      tasks = tasks.filter((t) => t.getStatus().equals(criteria.status!));\n    }\n\n    if (criteria.priority) {\n      tasks = tasks.filter((t) => t.getPriority().equals(criteria.priority!));\n    }\n\n    if (criteria.projectId) {\n      tasks = tasks.filter((t) =>\n        t.getProjectId()?.equals(criteria.projectId!),\n      );\n    }\n\n    if (criteria.tags && criteria.tags.length > 0) {\n      tasks = tasks.filter((t) => {\n        const taskTags = t.getTags();\n        return criteria.tags!.some((tag) => taskTags.includes(tag));\n      });\n    }\n\n    return tasks;\n  }\n\n  async save(task: Task): Promise<void> {\n    try {\n      // Ensure tasks folder exists\n      await this.ensureTasksFolder();\n\n      // Generate file path\n      const fileName = this.sanitizeFileName(task.getTitle());\n      const filePath = `${this.tasksFolder}/${fileName}.md`;\n\n      // Check if file already exists\n      let file = this.app.vault.getAbstractFileByPath(filePath);\n\n      if (!file) {\n        // Create new file\n        file = await this.app.vault.create(filePath, \"\");\n      }\n\n      if (!(file instanceof TFile)) {\n        throw new Error(\"File path exists but is not a file\");\n      }\n\n      // Generate content\n      const content = this.generateTaskContent(task);\n\n      // Save file\n      await this.app.vault.modify(file, content);\n\n      // Update cache\n      this.taskCache.set(task.getId().toString(), task);\n\n      // Show success notice\n      new Notice(`Task \"${task.getTitle()}\" saved successfully`);\n    } catch (error) {\n      console.error(\"Failed to save task:\", error);\n      new Notice(`Failed to save task: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async delete(id: TaskId): Promise<void> {\n    const files = this.app.vault.getMarkdownFiles();\n\n    for (const file of files) {\n      if (file.path.startsWith(this.tasksFolder)) {\n        const metadata = this.app.metadataCache.getFileCache(file);\n        if (metadata?.frontmatter?.id === id.toString()) {\n          await this.app.vault.delete(file);\n          this.taskCache.delete(id.toString());\n          new Notice(\"Task deleted successfully\");\n          return;\n        }\n      }\n    }\n\n    throw new Error(`Task with id ${id.toString()} not found`);\n  }\n\n  async exists(id: TaskId): Promise<boolean> {\n    const task = await this.findById(id);\n    return task !== null;\n  }\n\n  async findByFilename(filename: string): Promise<Task | null> {\n    const file = this.app.vault.getAbstractFileByPath(\n      `${this.tasksFolder}/${filename}`,\n    );\n\n    if (file instanceof TFile) {\n      return await this.loadTaskFromFile(file);\n    }\n\n    return null;\n  }\n\n  async getStatistics(): Promise<{\n    total: number;\n    byStatus: Record<string, number>;\n    byPriority: Record<string, number>;\n    overdue: number;\n    dueToday: number;\n    dueThisWeek: number;\n    completed: number;\n    averageCompletionTime?: number;\n  }> {\n    const tasks = await this.findAll();\n    const now = new Date();\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const weekEnd = new Date(today);\n    weekEnd.setDate(weekEnd.getDate() + 7);\n\n    const stats = {\n      total: tasks.length,\n      byStatus: {} as Record<string, number>,\n      byPriority: {} as Record<string, number>,\n      overdue: 0,\n      dueToday: 0,\n      dueThisWeek: 0,\n      completed: 0,\n      averageCompletionTime: undefined as number | undefined,\n    };\n\n    let completionTimes: number[] = [];\n\n    for (const task of tasks) {\n      // Status statistics\n      const status = task.getStatus().toString();\n      stats.byStatus[status] = (stats.byStatus[status] || 0) + 1;\n\n      // Count completed tasks\n      if (status === \"done\") {\n        stats.completed++;\n\n        // Calculate completion time if we have both created and updated dates\n        const createdAt = task.getCreatedAt();\n        const updatedAt = task.getUpdatedAt();\n        if (createdAt && updatedAt) {\n          const completionTime = updatedAt.getTime() - createdAt.getTime();\n          completionTimes.push(completionTime);\n        }\n      }\n\n      // Priority statistics\n      const priority = task.getPriority().toString();\n      stats.byPriority[priority] = (stats.byPriority[priority] || 0) + 1;\n\n      // Due date statistics\n      const dueDate = task.getDueDate();\n      if (dueDate) {\n        if (dueDate < now && task.getStatus().toString() !== \"done\") {\n          stats.overdue++;\n        }\n        if (dueDate >= today && dueDate < tomorrow) {\n          stats.dueToday++;\n        }\n        if (dueDate >= today && dueDate < weekEnd) {\n          stats.dueThisWeek++;\n        }\n      }\n    }\n\n    // Calculate average completion time\n    if (completionTimes.length > 0) {\n      const totalTime = completionTimes.reduce((sum, time) => sum + time, 0);\n      stats.averageCompletionTime = totalTime / completionTimes.length;\n    }\n\n    return stats;\n  }\n\n  async search(query: string): Promise<Task[]> {\n    const tasks = await this.findAll();\n    const lowerQuery = query.toLowerCase();\n\n    return tasks.filter((task) => {\n      const title = task.getTitle().toLowerCase();\n      const description = task.getDescription()?.toLowerCase() || \"\";\n      const tags = task.getTags().join(\" \").toLowerCase();\n\n      return (\n        title.includes(lowerQuery) ||\n        description.includes(lowerQuery) ||\n        tags.includes(lowerQuery)\n      );\n    });\n  }\n\n  async findRecentlyUpdated(limit: number = 10): Promise<Task[]> {\n    const tasks = await this.findAll();\n\n    return tasks\n      .sort((a, b) => b.getUpdatedAt().getTime() - a.getUpdatedAt().getTime())\n      .slice(0, limit);\n  }\n\n  async findRecentlyCreated(limit: number = 10): Promise<Task[]> {\n    const tasks = await this.findAll();\n\n    return tasks\n      .sort((a, b) => b.getCreatedAt().getTime() - a.getCreatedAt().getTime())\n      .slice(0, limit);\n  }\n\n  /**\n   * Load task from Obsidian file\n   */\n  private async loadTaskFromFile(file: TFile): Promise<Task | null> {\n    try {\n      const content = await this.app.vault.read(file);\n      const metadata = this.app.metadataCache.getFileCache(file);\n\n      if (!metadata?.frontmatter?.id) {\n        return null;\n      }\n\n      const fm = metadata.frontmatter;\n\n      // Parse priority\n      const priorityResult = Priority.create(fm.priority || \"medium\");\n      if (priorityResult.isFailure) {\n        console.warn(`Invalid priority in task ${fm.id}: ${fm.priority}`);\n        return null;\n      }\n\n      // Parse status\n      const statusResult = TaskStatus.create(fm.status || \"todo\");\n      if (statusResult.isFailure) {\n        console.warn(`Invalid status in task ${fm.id}: ${fm.status}`);\n        return null;\n      }\n\n      // Parse project ID\n      let projectId: AssetId | undefined;\n      if (fm.projectId) {\n        const projectIdResult = AssetId.create(fm.projectId);\n        if (projectIdResult.isSuccess) {\n          projectId = projectIdResult.getValue();\n        }\n      }\n\n      // Parse dates\n      const dueDate = fm.dueDate ? new Date(fm.dueDate) : undefined;\n      const createdAt = fm.createdAt ? new Date(fm.createdAt) : file.stat.ctime;\n      const updatedAt = fm.updatedAt ? new Date(fm.updatedAt) : file.stat.mtime;\n\n      // Create task ID\n      const taskIdResult = TaskId.create(fm.id);\n      if (taskIdResult.isFailure) {\n        console.warn(`Invalid task ID: ${fm.id}`);\n        return null;\n      }\n\n      // Extract description from content (everything after frontmatter)\n      const contentLines = content.split(\"\\n\");\n      let inFrontmatter = false;\n      let description = \"\";\n\n      for (const line of contentLines) {\n        if (line === \"---\") {\n          inFrontmatter = !inFrontmatter;\n          continue;\n        }\n        if (!inFrontmatter && line.trim() && !line.startsWith(\"#\")) {\n          description += line + \"\\n\";\n        }\n      }\n\n      // Create task\n      const taskResult = Task.create({\n        title: fm.title || file.basename,\n        description: description.trim() || fm.description,\n        priority: priorityResult.getValue(),\n        status: statusResult.getValue(),\n        projectId,\n        dueDate,\n        estimatedHours: fm.estimatedHours,\n        tags: fm.tags || [],\n      });\n\n      if (taskResult.isFailure) {\n        console.warn(\n          `Failed to create task from file ${file.path}: ${taskResult.error}`,\n        );\n        return null;\n      }\n\n      return taskResult.getValue();\n    } catch (error) {\n      console.error(`Failed to load task from file ${file.path}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Generate markdown content for task\n   */\n  private generateTaskContent(task: Task): string {\n    const frontmatter = task.toFrontmatter();\n    const description = task.getDescription() || \"\";\n\n    // Build frontmatter YAML\n    let content = \"---\\n\";\n    for (const [key, value] of Object.entries(frontmatter)) {\n      if (value !== undefined && value !== null) {\n        if (Array.isArray(value)) {\n          if (value.length > 0) {\n            content += `${key}:\\n`;\n            for (const item of value) {\n              content += `  - ${item}\\n`;\n            }\n          }\n        } else if (typeof value === \"object\") {\n          content += `${key}: ${JSON.stringify(value)}\\n`;\n        } else {\n          content += `${key}: ${value}\\n`;\n        }\n      }\n    }\n    content += \"---\\n\\n\";\n\n    // Add title\n    content += `# ${task.getTitle()}\\n\\n`;\n\n    // Add description\n    if (description) {\n      content += `${description}\\n\\n`;\n    }\n\n    // Add task details section\n    content += \"## Details\\n\\n\";\n    content += `- **Status**: ${task.getStatus().toString()}\\n`;\n    content += `- **Priority**: ${task.getPriority().toString()}\\n`;\n\n    if (task.getProjectId()) {\n      content += `- **Project**: [[${task.getProjectId()?.toString()}]]\\n`;\n    }\n\n    if (task.getDueDate()) {\n      content += `- **Due Date**: ${task.getDueDate()?.toISOString().split(\"T\")[0]}\\n`;\n    }\n\n    if (task.getEstimatedHours()) {\n      content += `- **Estimated Hours**: ${task.getEstimatedHours()}\\n`;\n    }\n\n    // Add tags section\n    const tags = task.getTags();\n    if (tags.length > 0) {\n      content += \"\\n## Tags\\n\\n\";\n      content += tags.map((tag) => `#${tag}`).join(\" \") + \"\\n\";\n    }\n\n    // Add notes section\n    content += \"\\n## Notes\\n\\n\";\n    content += \"_Add your notes here..._\\n\";\n\n    return content;\n  }\n\n  /**\n   * Ensure tasks folder exists\n   */\n  private async ensureTasksFolder(): Promise<void> {\n    const folder = this.app.vault.getAbstractFileByPath(this.tasksFolder);\n    if (!folder) {\n      await this.app.vault.createFolder(this.tasksFolder);\n    }\n  }\n\n  /**\n   * Sanitize filename for safe file creation\n   */\n  private sanitizeFileName(title: string): string {\n    return title\n      .replace(/[\\\\/:*?\"<>|]/g, \"-\")\n      .replace(/\\s+/g, \" \")\n      .trim()\n      .substring(0, 100); // Limit length\n  }\n}\n"],"version":3}