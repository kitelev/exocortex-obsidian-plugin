eb756452fd85080a9638270f8dea4d14
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeLayoutCoordinator = void 0;
const Result_1 = require("../../src/domain/core/Result");
class FakeLayoutCoordinator {
    constructor() {
        this.rendered = [];
        this.shouldFailLayout = false;
        this.shouldFailDefault = false;
        this.customResult = null;
    }
    // Configuration methods for test setup
    setLayoutRenderingFailure(shouldFail) {
        this.shouldFailLayout = shouldFail;
    }
    setDefaultRenderingFailure(shouldFail) {
        this.shouldFailDefault = shouldFail;
    }
    setCustomResult(result) {
        this.customResult = result;
    }
    // Test inspection methods
    getRenderedLayouts() {
        return [...this.rendered];
    }
    getLastRenderContext() {
        return this.rendered.length > 0
            ? this.rendered[this.rendered.length - 1].context
            : null;
    }
    wasLayoutRendered(layoutId) {
        return this.rendered.some((r) => r.layout?.id.toString() === layoutId);
    }
    wasDefaultLayoutRendered() {
        return this.rendered.some((r) => r.layout === null);
    }
    clear() {
        this.rendered = [];
        this.shouldFailLayout = false;
        this.shouldFailDefault = false;
        this.customResult = null;
    }
    // ILayoutCoordinator implementation
    async coordinateLayout(layout, context) {
        this.rendered.push({ layout, context });
        if (this.shouldFailLayout) {
            return Result_1.Result.fail("Fake layout rendering failure");
        }
        if (this.customResult) {
            return Result_1.Result.ok(this.customResult);
        }
        // Create a successful result
        const blockResults = layout
            .getVisibleBlocks()
            .map((block) => ({
            blockId: block.id,
            renderTime: 10,
            success: true,
        }));
        const result = {
            layoutId: layout.id.toString(),
            blocksRendered: blockResults,
            totalRenderTime: blockResults.length * 10,
            fallbackUsed: false,
        };
        return Result_1.Result.ok(result);
    }
    async coordinateDefaultLayout(context) {
        this.rendered.push({ layout: null, context });
        if (this.shouldFailDefault) {
            return Result_1.Result.fail("Fake default layout rendering failure");
        }
        if (this.customResult) {
            return Result_1.Result.ok(this.customResult);
        }
        // Create a successful default result
        const blockResults = [
            { blockId: "default-properties", renderTime: 5, success: true },
            { blockId: "default-children-efforts", renderTime: 8, success: true },
            { blockId: "default-backlinks", renderTime: 12, success: true },
        ];
        const result = {
            layoutId: "default",
            blocksRendered: blockResults,
            totalRenderTime: 25,
            fallbackUsed: true,
        };
        return Result_1.Result.ok(result);
    }
}
exports.FakeLayoutCoordinator = FakeLayoutCoordinator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,