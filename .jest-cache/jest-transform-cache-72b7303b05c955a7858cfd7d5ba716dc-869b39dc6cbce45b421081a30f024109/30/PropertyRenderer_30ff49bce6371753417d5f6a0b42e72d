8ba91440779ba922f8ed970b8d22b5d2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyRenderer = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
/**
 * Component for rendering editable properties in asset views
 * Following the same patterns as the asset creation form
 */
class PropertyRenderer {
    constructor(app, propertyEditingUseCase) {
        this.app = app;
        this.propertyEditingUseCase = propertyEditingUseCase;
        this.editingProperty = null;
        this.originalValues = new Map();
        this.propertyInputs = new Map();
    }
    /**
     * Render properties block with inline editing capability
     */
    renderPropertiesBlock(container, assetId, className, currentProperties) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Get property definitions for the class
            const propertiesResult = yield this.propertyEditingUseCase.getPropertiesForClass(className);
            if (propertiesResult.isFailure) {
                container.createEl('div', {
                    text: 'Failed to load properties',
                    cls: 'exocortex-error-message'
                });
                return;
            }
            const properties = propertiesResult.getValue();
            // Create properties container
            const propertiesEl = container.createDiv({ cls: 'exocortex-properties-editable' });
            // Render each property
            for (const prop of properties) {
                this.renderProperty(propertiesEl, assetId, prop, currentProperties[prop.propertyName]);
            }
            // Add custom properties not in schema
            const schemaPropertyNames = new Set(properties.map(p => p.propertyName));
            for (const [key, value] of Object.entries(currentProperties)) {
                if (!schemaPropertyNames.has(key) && !key.startsWith('exo__')) {
                    this.renderCustomProperty(propertiesEl, assetId, key, value);
                }
            }
        });
    }
    /**
     * Render individual property with edit capability
     */
    renderProperty(container, assetId, property, currentValue) {
        const propertyEl = container.createDiv({ cls: 'exocortex-property-item' });
        // Property label
        const labelEl = propertyEl.createDiv({ cls: 'exocortex-property-label' });
        labelEl.createSpan({ text: property.label || property.propertyName });
        if (property.isRequired) {
            labelEl.createSpan({ text: ' *', cls: 'required-indicator' });
        }
        // Property value container
        const valueContainer = propertyEl.createDiv({ cls: 'exocortex-property-value' });
        if (this.editingProperty === property.propertyName) {
            // Render edit control
            this.renderEditControl(valueContainer, assetId, property, currentValue);
        }
        else {
            // Render read-only value with click to edit
            this.renderReadOnlyValue(valueContainer, assetId, property, currentValue);
        }
        // Property description
        if (property.description) {
            propertyEl.createDiv({
                text: property.description,
                cls: 'exocortex-property-description'
            });
        }
    }
    /**
     * Render read-only value that becomes editable on click
     */
    renderReadOnlyValue(container, assetId, property, value) {
        const valueEl = container.createDiv({
            cls: 'exocortex-property-value-readonly'
        });
        // Display formatted value
        const displayValue = this.formatDisplayValue(value, property.type || property.range);
        valueEl.createSpan({ text: displayValue || '(empty)' });
        // Add edit icon
        const editIcon = valueEl.createSpan({
            cls: 'exocortex-edit-icon',
            text: '✏️'
        });
        // Click handler to enter edit mode
        valueEl.addEventListener('click', () => {
            this.enterEditMode(container, assetId, property, value);
        });
        // Keyboard navigation
        valueEl.tabIndex = 0;
        valueEl.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.enterEditMode(container, assetId, property, value);
            }
        });
    }
    /**
     * Enter edit mode for a property
     */
    enterEditMode(container, assetId, property, currentValue) {
        // Save original value for cancel
        this.originalValues.set(property.propertyName, currentValue);
        this.editingProperty = property.propertyName;
        // Clear container and render edit control
        container.empty();
        this.renderEditControl(container, assetId, property, currentValue);
    }
    /**
     * Render appropriate edit control based on property type
     */
    renderEditControl(container, assetId, property, currentValue) {
        var _a;
        const controlContainer = container.createDiv({ cls: 'exocortex-edit-control' });
        // Handle different property types
        if (property.isObjectProperty) {
            this.renderObjectPropertyDropdown(controlContainer, assetId, property, currentValue);
        }
        else if ((_a = property.range) === null || _a === void 0 ? void 0 : _a.startsWith('enum:')) {
            this.renderEnumDropdown(controlContainer, assetId, property, currentValue);
        }
        else if (property.range === 'boolean') {
            this.renderBooleanToggle(controlContainer, assetId, property, currentValue);
        }
        else if (property.range === 'date') {
            this.renderDateInput(controlContainer, assetId, property, currentValue);
        }
        else if (property.range === 'number') {
            this.renderNumberInput(controlContainer, assetId, property, currentValue);
        }
        else if (property.range === 'text' || property.range === 'description') {
            this.renderTextArea(controlContainer, assetId, property, currentValue);
        }
        else if (property.range === 'array') {
            this.renderArrayInput(controlContainer, assetId, property, currentValue);
        }
        else {
            // Default to text input
            this.renderTextInput(controlContainer, assetId, property, currentValue);
        }
        // Add save/cancel buttons
        this.renderEditActions(controlContainer, assetId, property);
    }
    /**
     * Render dropdown for object properties
     */
    renderObjectPropertyDropdown(container, assetId, property, currentValue) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const dropdown = new obsidian_1.DropdownComponent(container);
            // Get assets of the range class
            const rangeClass = (_a = property.range) === null || _a === void 0 ? void 0 : _a.replace(/\[\[|\]\]/g, '');
            if (rangeClass) {
                const assetsResult = yield this.propertyEditingUseCase.getAssetsForClass(rangeClass);
                if (assetsResult.isSuccess) {
                    const assets = assetsResult.getValue();
                    dropdown.addOption('', '-- Select --');
                    for (const asset of assets) {
                        const wikiLink = `[[${asset.fileName}]]`;
                        const displayName = asset.label !== asset.fileName
                            ? `${asset.label} (${asset.fileName})`
                            : asset.fileName;
                        dropdown.addOption(wikiLink, displayName);
                    }
                }
            }
            // Set current value
            if (currentValue) {
                dropdown.setValue(currentValue);
            }
            // Store reference for saving
            this.propertyInputs.set(property.propertyName, dropdown);
            // Focus the dropdown
            dropdown.selectEl.focus();
        });
    }
    /**
     * Render enum dropdown
     */
    renderEnumDropdown(container, assetId, property, currentValue) {
        const dropdown = new obsidian_1.DropdownComponent(container);
        const options = property.range.substring(5).split(',');
        dropdown.addOption('', '-- Select --');
        for (const option of options) {
            dropdown.addOption(option.trim(), option.trim());
        }
        if (currentValue) {
            dropdown.setValue(currentValue);
        }
        this.propertyInputs.set(property.propertyName, dropdown);
        dropdown.selectEl.focus();
    }
    /**
     * Render text input
     */
    renderTextInput(container, assetId, property, currentValue) {
        const textInput = new obsidian_1.TextComponent(container);
        textInput.setValue(currentValue || '');
        this.propertyInputs.set(property.propertyName, textInput);
        textInput.inputEl.focus();
        textInput.inputEl.select();
        // Handle keyboard shortcuts
        textInput.inputEl.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.saveProperty(assetId, property);
            }
            else if (e.key === 'Escape') {
                e.preventDefault();
                this.cancelEdit(container, assetId, property);
            }
        });
    }
    /**
     * Render edit action buttons
     */
    renderEditActions(container, assetId, property) {
        const actionsEl = container.createDiv({ cls: 'exocortex-edit-actions' });
        // Save button
        new obsidian_1.ButtonComponent(actionsEl)
            .setIcon('check')
            .setTooltip('Save (Enter)')
            .onClick(() => this.saveProperty(assetId, property));
        // Cancel button
        new obsidian_1.ButtonComponent(actionsEl)
            .setIcon('x')
            .setTooltip('Cancel (Escape)')
            .onClick(() => this.cancelEdit(container, assetId, property));
    }
    /**
     * Save property value
     */
    saveProperty(assetId, property) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const input = this.propertyInputs.get(property.propertyName);
            if (!input)
                return;
            let value;
            if (input instanceof obsidian_1.TextComponent) {
                value = input.getValue();
            }
            else if (input instanceof obsidian_1.DropdownComponent) {
                value = input.getValue();
            }
            else if (input instanceof obsidian_1.ToggleComponent) {
                value = input.getValue();
            }
            // Validate and save
            const result = yield this.propertyEditingUseCase.execute({
                assetId,
                propertyName: property.propertyName,
                value,
                propertyDefinition: property
            });
            if (result.isSuccess) {
                // Exit edit mode and refresh display
                this.editingProperty = null;
                this.propertyInputs.delete(property.propertyName);
                this.originalValues.delete(property.propertyName);
                // Show success indicator
                new obsidian_1.Notice('Property updated', 1000);
            }
            else {
                // Show error
                new obsidian_1.Notice(`Error: ${result.error}`, 3000);
            }
        });
    }
    /**
     * Cancel edit and restore original value
     */
    cancelEdit(container, assetId, property) {
        const originalValue = this.originalValues.get(property.propertyName);
        this.editingProperty = null;
        this.propertyInputs.delete(property.propertyName);
        this.originalValues.delete(property.propertyName);
        // Re-render as read-only
        container.empty();
        this.renderReadOnlyValue(container, assetId, property, originalValue);
    }
    /**
     * Format value for display
     */
    formatDisplayValue(value, type) {
        if (value === null || value === undefined) {
            return '';
        }
        if (Array.isArray(value)) {
            return value.join(', ');
        }
        if (typeof value === 'boolean') {
            return value ? '✓' : '✗';
        }
        return String(value);
    }
    /**
     * Render custom property not in schema
     */
    renderCustomProperty(container, assetId, propertyName, value) {
        const property = {
            propertyName,
            label: propertyName,
            range: 'string',
            isRequired: false,
            description: 'Custom property'
        };
        this.renderProperty(container, assetId, property, value);
    }
    // Additional methods for other input types...
    renderBooleanToggle(container, assetId, property, currentValue) {
        const toggle = new obsidian_1.ToggleComponent(container);
        toggle.setValue(currentValue || false);
        this.propertyInputs.set(property.propertyName, toggle);
    }
    renderDateInput(container, assetId, property, currentValue) {
        const dateInput = new obsidian_1.TextComponent(container);
        dateInput.inputEl.type = 'date';
        dateInput.setValue(currentValue || '');
        this.propertyInputs.set(property.propertyName, dateInput);
        dateInput.inputEl.focus();
    }
    renderNumberInput(container, assetId, property, currentValue) {
        const numberInput = new obsidian_1.TextComponent(container);
        numberInput.inputEl.type = 'number';
        numberInput.setValue(String(currentValue || ''));
        this.propertyInputs.set(property.propertyName, numberInput);
        numberInput.inputEl.focus();
    }
    renderTextArea(container, assetId, property, currentValue) {
        const textArea = new obsidian_1.TextAreaComponent(container);
        textArea.setValue(currentValue || '');
        this.propertyInputs.set(property.propertyName, textArea);
        textArea.inputEl.focus();
    }
    renderArrayInput(container, assetId, property, currentValue) {
        const arrayContainer = container.createDiv({ cls: 'exocortex-array-input' });
        const values = Array.isArray(currentValue) ? currentValue : [];
        // Render existing values
        values.forEach((val, index) => {
            const itemEl = arrayContainer.createDiv({ cls: 'array-item' });
            const input = new obsidian_1.TextComponent(itemEl);
            input.setValue(val);
            new obsidian_1.ButtonComponent(itemEl)
                .setIcon('x')
                .onClick(() => {
                values.splice(index, 1);
                this.renderArrayInput(container, assetId, property, values);
            });
        });
        // Add new item button
        new obsidian_1.ButtonComponent(arrayContainer)
            .setButtonText('Add item')
            .onClick(() => {
            values.push('');
            this.renderArrayInput(container, assetId, property, values);
        });
        this.propertyInputs.set(property.propertyName, { values });
    }
}
exports.PropertyRenderer = PropertyRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,