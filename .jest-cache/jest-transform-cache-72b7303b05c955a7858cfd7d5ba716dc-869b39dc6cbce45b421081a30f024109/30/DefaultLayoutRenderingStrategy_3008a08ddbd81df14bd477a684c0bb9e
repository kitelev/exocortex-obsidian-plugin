22f5464bf4e96dc8725a1bf4e661a93b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultLayoutRenderingStrategy = void 0;
const Result_1 = require("../../domain/core/Result");
class DefaultLayoutRenderingStrategy {
    constructor(blockRendererFactory) {
        this.blockRendererFactory = blockRendererFactory;
    }
    canHandle(layout) {
        return layout === null || layout === undefined;
    }
    async render(context) {
        if (!context.container) {
            return Result_1.Result.fail("Container is required for rendering");
        }
        if (!context.metadata?.frontmatter) {
            return this.renderError(context.container, "No metadata available for this file");
        }
        try {
            const frontmatter = context.metadata.frontmatter;
            // Render only dynamic backlinks in simplified system
            await this.renderDynamicBacklinksBlock(context);
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Default layout rendering failed: ${error}`);
        }
    }
    async renderDynamicBacklinksBlock(context) {
        const backlinksContainer = context.container.createDiv({
            cls: "exocortex-block exocortex-block-dynamic-backlinks",
        });
        const backlinksContent = backlinksContainer.createDiv({
            cls: "exocortex-block-content",
        });
        const rendererResult = this.blockRendererFactory.createRenderer("dynamic-backlinks");
        if (rendererResult.isSuccess) {
            const renderer = rendererResult.getValue();
            const blockContext = {
                container: backlinksContent,
                config: {
                    type: "dynamic-backlinks",
                    excludeProperties: ["exo__Asset_id", "exo__Instance_class"],
                    showEmptyProperties: false,
                },
                file: context.file,
                frontmatter: context.metadata.frontmatter,
                dataviewApi: context.dataviewApi,
            };
            await renderer.render(blockContext);
        }
    }
    renderError(container, error) {
        container.createEl("div", {
            text: `Layout Error: ${error}`,
            cls: "exocortex-error notice-error",
        });
        return Result_1.Result.fail(error);
    }
    cleanClassName(className) {
        if (!className)
            return "";
        const str = Array.isArray(className) ? className[0] : className;
        return str?.toString().replace(/\[\[|\]\]/g, "") || "";
    }
}
exports.DefaultLayoutRenderingStrategy = DefaultLayoutRenderingStrategy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9zdHJhdGVnaWVzL0RlZmF1bHRMYXlvdXRSZW5kZXJpbmdTdHJhdGVneS50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxxREFBa0Q7QUFXbEQsTUFBYSw4QkFBOEI7SUFHekMsWUFBNkIsb0JBQTJDO1FBQTNDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBdUI7SUFBRyxDQUFDO0lBRTVFLFNBQVMsQ0FBQyxNQUEwQjtRQUNsQyxPQUFPLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLFNBQVMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUErQjtRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUN0QixPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQUMscUNBQXFDLENBQUMsQ0FBQztTQUMzRDtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRTtZQUNsQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQ3JCLE9BQU8sQ0FBQyxTQUFTLEVBQ2pCLHFDQUFxQyxDQUN0QyxDQUFDO1NBQ0g7UUFFRCxJQUFJO1lBQ0YsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFFakQscURBQXFEO1lBQ3JELE1BQU0sSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWhELE9BQU8sZUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxPQUFPLGVBQU0sQ0FBQyxJQUFJLENBQUMsb0NBQW9DLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLDJCQUEyQixDQUN2QyxPQUErQjtRQUUvQixNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1lBQ3JELEdBQUcsRUFBRSxtREFBbUQ7U0FDekQsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxrQkFBa0IsQ0FBQyxTQUFTLENBQUM7WUFDcEQsR0FBRyxFQUFFLHlCQUF5QjtTQUMvQixDQUFDLENBQUM7UUFFSCxNQUFNLGNBQWMsR0FDbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2hFLElBQUksY0FBYyxDQUFDLFNBQVMsRUFBRTtZQUM1QixNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDM0MsTUFBTSxZQUFZLEdBQTBCO2dCQUMxQyxTQUFTLEVBQUUsZ0JBQWdCO2dCQUMzQixNQUFNLEVBQUU7b0JBQ04sSUFBSSxFQUFFLG1CQUFtQjtvQkFDekIsaUJBQWlCLEVBQUUsQ0FBQyxlQUFlLEVBQUUscUJBQXFCLENBQUM7b0JBQzNELG1CQUFtQixFQUFFLEtBQUs7aUJBQzNCO2dCQUNELElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtnQkFDbEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVztnQkFDekMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxXQUFXO2FBQ2pDLENBQUM7WUFFRixNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBRU8sV0FBVyxDQUFDLFNBQXNCLEVBQUUsS0FBYTtRQUN2RCxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtZQUN4QixJQUFJLEVBQUUsaUJBQWlCLEtBQUssRUFBRTtZQUM5QixHQUFHLEVBQUUsOEJBQThCO1NBQ3BDLENBQUMsQ0FBQztRQUNILE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU8sY0FBYyxDQUFDLFNBQWM7UUFDbkMsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUMxQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNoRSxPQUFPLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0NBQ0Y7QUE1RUQsd0VBNEVDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3NyYy9wcmVzZW50YXRpb24vc3RyYXRlZ2llcy9EZWZhdWx0TGF5b3V0UmVuZGVyaW5nU3RyYXRlZ3kudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzdWx0IH0gZnJvbSBcIi4uLy4uL2RvbWFpbi9jb3JlL1Jlc3VsdFwiO1xuaW1wb3J0IHsgQ2xhc3NMYXlvdXQgfSBmcm9tIFwiLi4vLi4vZG9tYWluL2VudGl0aWVzL0NsYXNzTGF5b3V0XCI7XG5pbXBvcnQge1xuICBJTGF5b3V0UmVuZGVyaW5nU3RyYXRlZ3ksXG4gIExheW91dFJlbmRlcmluZ0NvbnRleHQsXG59IGZyb20gXCIuL0lMYXlvdXRSZW5kZXJpbmdTdHJhdGVneVwiO1xuaW1wb3J0IHtcbiAgSUJsb2NrUmVuZGVyZXJGYWN0b3J5LFxuICBCbG9ja1JlbmRlcmluZ0NvbnRleHQsXG59IGZyb20gXCIuLi9mYWN0b3JpZXMvSUJsb2NrUmVuZGVyZXJGYWN0b3J5XCI7XG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0TGF5b3V0UmVuZGVyaW5nU3RyYXRlZ3lcbiAgaW1wbGVtZW50cyBJTGF5b3V0UmVuZGVyaW5nU3RyYXRlZ3lcbntcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBibG9ja1JlbmRlcmVyRmFjdG9yeTogSUJsb2NrUmVuZGVyZXJGYWN0b3J5KSB7fVxuXG4gIGNhbkhhbmRsZShsYXlvdXQ6IENsYXNzTGF5b3V0IHwgbnVsbCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBsYXlvdXQgPT09IG51bGwgfHwgbGF5b3V0ID09PSB1bmRlZmluZWQ7XG4gIH1cblxuICBhc3luYyByZW5kZXIoY29udGV4dDogTGF5b3V0UmVuZGVyaW5nQ29udGV4dCk6IFByb21pc2U8UmVzdWx0PHZvaWQ+PiB7XG4gICAgaWYgKCFjb250ZXh0LmNvbnRhaW5lcikge1xuICAgICAgcmV0dXJuIFJlc3VsdC5mYWlsKFwiQ29udGFpbmVyIGlzIHJlcXVpcmVkIGZvciByZW5kZXJpbmdcIik7XG4gICAgfVxuXG4gICAgaWYgKCFjb250ZXh0Lm1ldGFkYXRhPy5mcm9udG1hdHRlcikge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRXJyb3IoXG4gICAgICAgIGNvbnRleHQuY29udGFpbmVyLFxuICAgICAgICBcIk5vIG1ldGFkYXRhIGF2YWlsYWJsZSBmb3IgdGhpcyBmaWxlXCIsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBmcm9udG1hdHRlciA9IGNvbnRleHQubWV0YWRhdGEuZnJvbnRtYXR0ZXI7XG5cbiAgICAgIC8vIFJlbmRlciBvbmx5IGR5bmFtaWMgYmFja2xpbmtzIGluIHNpbXBsaWZpZWQgc3lzdGVtXG4gICAgICBhd2FpdCB0aGlzLnJlbmRlckR5bmFtaWNCYWNrbGlua3NCbG9jayhjb250ZXh0KTtcblxuICAgICAgcmV0dXJuIFJlc3VsdC5vaygpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwoYERlZmF1bHQgbGF5b3V0IHJlbmRlcmluZyBmYWlsZWQ6ICR7ZXJyb3J9YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZW5kZXJEeW5hbWljQmFja2xpbmtzQmxvY2soXG4gICAgY29udGV4dDogTGF5b3V0UmVuZGVyaW5nQ29udGV4dCxcbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgYmFja2xpbmtzQ29udGFpbmVyID0gY29udGV4dC5jb250YWluZXIuY3JlYXRlRGl2KHtcbiAgICAgIGNsczogXCJleG9jb3J0ZXgtYmxvY2sgZXhvY29ydGV4LWJsb2NrLWR5bmFtaWMtYmFja2xpbmtzXCIsXG4gICAgfSk7XG4gICAgY29uc3QgYmFja2xpbmtzQ29udGVudCA9IGJhY2tsaW5rc0NvbnRhaW5lci5jcmVhdGVEaXYoe1xuICAgICAgY2xzOiBcImV4b2NvcnRleC1ibG9jay1jb250ZW50XCIsXG4gICAgfSk7XG5cbiAgICBjb25zdCByZW5kZXJlclJlc3VsdCA9XG4gICAgICB0aGlzLmJsb2NrUmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKFwiZHluYW1pYy1iYWNrbGlua3NcIik7XG4gICAgaWYgKHJlbmRlcmVyUmVzdWx0LmlzU3VjY2Vzcykge1xuICAgICAgY29uc3QgcmVuZGVyZXIgPSByZW5kZXJlclJlc3VsdC5nZXRWYWx1ZSgpO1xuICAgICAgY29uc3QgYmxvY2tDb250ZXh0OiBCbG9ja1JlbmRlcmluZ0NvbnRleHQgPSB7XG4gICAgICAgIGNvbnRhaW5lcjogYmFja2xpbmtzQ29udGVudCxcbiAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgdHlwZTogXCJkeW5hbWljLWJhY2tsaW5rc1wiLFxuICAgICAgICAgIGV4Y2x1ZGVQcm9wZXJ0aWVzOiBbXCJleG9fX0Fzc2V0X2lkXCIsIFwiZXhvX19JbnN0YW5jZV9jbGFzc1wiXSxcbiAgICAgICAgICBzaG93RW1wdHlQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgZmlsZTogY29udGV4dC5maWxlLFxuICAgICAgICBmcm9udG1hdHRlcjogY29udGV4dC5tZXRhZGF0YS5mcm9udG1hdHRlcixcbiAgICAgICAgZGF0YXZpZXdBcGk6IGNvbnRleHQuZGF0YXZpZXdBcGksXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCByZW5kZXJlci5yZW5kZXIoYmxvY2tDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbmRlckVycm9yKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIGVycm9yOiBzdHJpbmcpOiBSZXN1bHQ8dm9pZD4ge1xuICAgIGNvbnRhaW5lci5jcmVhdGVFbChcImRpdlwiLCB7XG4gICAgICB0ZXh0OiBgTGF5b3V0IEVycm9yOiAke2Vycm9yfWAsXG4gICAgICBjbHM6IFwiZXhvY29ydGV4LWVycm9yIG5vdGljZS1lcnJvclwiLFxuICAgIH0pO1xuICAgIHJldHVybiBSZXN1bHQuZmFpbChlcnJvcik7XG4gIH1cblxuICBwcml2YXRlIGNsZWFuQ2xhc3NOYW1lKGNsYXNzTmFtZTogYW55KTogc3RyaW5nIHtcbiAgICBpZiAoIWNsYXNzTmFtZSkgcmV0dXJuIFwiXCI7XG4gICAgY29uc3Qgc3RyID0gQXJyYXkuaXNBcnJheShjbGFzc05hbWUpID8gY2xhc3NOYW1lWzBdIDogY2xhc3NOYW1lO1xuICAgIHJldHVybiBzdHI/LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxbXFxbfFxcXVxcXS9nLCBcIlwiKSB8fCBcIlwiO1xuICB9XG59XG4iXSwidmVyc2lvbiI6M30=