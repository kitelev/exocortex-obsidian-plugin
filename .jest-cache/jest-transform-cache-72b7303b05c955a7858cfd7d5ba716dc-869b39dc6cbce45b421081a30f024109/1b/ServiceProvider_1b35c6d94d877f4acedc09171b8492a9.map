{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/providers/ServiceProvider.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/providers/ServiceProvider.ts"],"sourcesContent":["import { Plugin } from \"obsidian\";\nimport { IServiceProvider } from \"../../application/ports/IServiceProvider\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { ExocortexSettings } from \"../../domain/entities/ExocortexSettings\";\nimport { DIContainer } from \"../container/DIContainer\";\nimport { RDFService } from \"../../application/services/RDFService\";\nimport { LayoutRenderer } from \"../../presentation/renderers/LayoutRenderer\";\nimport { PropertyRenderer } from \"../../presentation/components/PropertyRenderer\";\nimport { IClassLayoutRepository } from \"../../domain/repositories/IClassLayoutRepository\";\nimport { PropertyEditingUseCase } from \"../../application/use-cases/PropertyEditingUseCase\";\n\n/**\n * Service Provider following Creator Pattern (GRASP)\n * Single Responsibility: Create and manage application services\n */\nexport class ServiceProvider implements IServiceProvider {\n  private readonly services = new Map<string, any>();\n  private container: DIContainer;\n\n  constructor(\n    private readonly plugin: Plugin,\n    private readonly graph: Graph,\n    private readonly settings: ExocortexSettings,\n  ) {}\n\n  async initializeServices(): Promise<void> {\n    // Initialize DI container\n    DIContainer.initialize(this.plugin.app, this.plugin as any);\n    this.container = DIContainer.getInstance();\n\n    // Initialize RDF service from container\n    const rdfService = this.container.resolve<RDFService>(\"RDFService\");\n    this.services.set(\"RDFService\", rdfService);\n\n    // Initialize Layout Renderer with proper dependencies\n    const layoutRepository = this.container.resolve<IClassLayoutRepository>(\n      \"IClassLayoutRepository\",\n    );\n    const layoutRenderer = new LayoutRenderer(\n      this.plugin.app,\n      layoutRepository,\n    );\n    this.services.set(\"LayoutRenderer\", layoutRenderer);\n\n    // Initialize Property Renderer\n    const propertyEditingUseCase = this.container.getPropertyEditingUseCase();\n    const propertyRenderer = new PropertyRenderer(\n      this.plugin.app,\n      propertyEditingUseCase,\n    );\n    this.services.set(\"PropertyRenderer\", propertyRenderer);\n\n    // Setup global ExoUIRender function for DataviewJS integration\n    this.setupGlobalFunctions();\n  }\n\n  getService<T>(serviceType: string): T {\n    const service = this.services.get(serviceType);\n    if (!service) {\n      throw new Error(`Service ${serviceType} not found`);\n    }\n    return service as T;\n  }\n\n  hasService(serviceType: string): boolean {\n    return this.services.has(serviceType);\n  }\n\n  async cleanup(): Promise<void> {\n    // Clean up global ExoUIRender function\n    if ((window as any).ExoUIRender) {\n      delete (window as any).ExoUIRender;\n    }\n\n    this.services.clear();\n  }\n\n  /**\n   * Update services with new settings\n   */\n  updateServices(settings: ExocortexSettings): void {\n    try {\n      // Re-initialize DI container to pick up new settings\n      DIContainer.initialize(this.plugin.app, this.plugin as any);\n      this.container = DIContainer.getInstance();\n    } catch (error) {\n      console.error(\"Error updating services:\", error);\n    }\n  }\n\n  private setupGlobalFunctions(): void {\n    const layoutRenderer = this.getService<LayoutRenderer>(\"LayoutRenderer\");\n\n    // Export ExoUIRender function to global window object for DataviewJS integration\n    (window as any).ExoUIRender = async (dv: any, ctx: any) => {\n      try {\n        const file = this.plugin.app.workspace.getActiveFile();\n        if (!file) {\n          ctx.container.createEl(\"p\", {\n            text: \"Error: No active file found\",\n            cls: \"exocortex-error\",\n          });\n          return;\n        }\n\n        const metadata = this.plugin.app.metadataCache.getFileCache(file);\n        await layoutRenderer.renderLayout(ctx.container, file, metadata, dv);\n      } catch (error) {\n        console.error(\"ExoUIRender error:\", error);\n        ctx.container.createEl(\"p\", {\n          text: `Error rendering layout: ${error.message}`,\n          cls: \"exocortex-error\",\n        });\n      }\n    };\n  }\n}\n"],"version":3}