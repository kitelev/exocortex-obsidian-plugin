213405314e69554eb4a2c0066634454c
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock dependencies
jest.mock('../../../../src/domain/errors/ErrorAnalyzer');
jest.mock('obsidian', () => ({
    Notice: jest.fn()
}));
const ErrorHandlerService_1 = require("../../../../src/application/services/ErrorHandlerService");
const ExocortexError_1 = require("../../../../src/domain/errors/ExocortexError");
const ErrorAnalyzer_1 = require("../../../../src/domain/errors/ErrorAnalyzer");
const obsidian_1 = require("obsidian");
describe('ErrorHandlerService', () => {
    let errorHandlerService;
    let mockAnalyzer;
    let mockNotice;
    let consoleErrorSpy;
    let consoleWarnSpy;
    let consoleInfoSpy;
    let consoleLogSpy;
    beforeEach(() => {
        mockAnalyzer = ErrorAnalyzer_1.ErrorAnalyzer;
        mockNotice = obsidian_1.Notice;
        // Mock console methods
        consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation();
        consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation();
        consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation();
        consoleLogSpy = jest.spyOn(console, 'log').mockImplementation();
        jest.clearAllMocks();
    });
    afterEach(() => {
        consoleErrorSpy.mockRestore();
        consoleWarnSpy.mockRestore();
        consoleInfoSpy.mockRestore();
        consoleLogSpy.mockRestore();
    });
    describe('constructor', () => {
        it('should create service with default options', () => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.totalErrors).toBe(0);
            expect(metrics.errorsBySeverity[ExocortexError_1.ErrorSeverity.CRITICAL]).toBe(0);
            expect(metrics.errorsByCategory[ExocortexError_1.ErrorCategory.SYSTEM]).toBe(0);
        });
        it('should create service with custom options', () => {
            const options = {
                showUserNotification: false,
                logToConsole: false,
                trackMetrics: false,
                autoRecover: true
            };
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService(options);
            expect(errorHandlerService).toBeDefined();
        });
        it('should merge custom options with defaults', () => {
            const options = {
                showUserNotification: false
            };
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService(options);
            expect(errorHandlerService).toBeDefined();
        });
        it('should initialize empty error history', () => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
            const history = errorHandlerService.getErrorHistory();
            expect(history).toEqual([]);
        });
        it('should initialize metrics with zero values', () => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.totalErrors).toBe(0);
            expect(metrics.averageResolutionTime).toBe(0);
            expect(metrics.lastError).toBeUndefined();
        });
    });
    describe('handleError', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should handle string error successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError('Test error message');
            expect(result.isSuccess).toBe(true);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith('Test error message');
        }));
        it('should handle Error object successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const errorObject = new Error('Test error');
            const result = yield errorHandlerService.handleError(errorObject);
            expect(result.isSuccess).toBe(true);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith(errorObject);
        }));
        it('should handle ExocortexError directly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const exocortexError = createMockExocortexError();
            const result = yield errorHandlerService.handleError(exocortexError);
            expect(result.isSuccess).toBe(true);
            expect(mockAnalyzer.analyze).not.toHaveBeenCalled();
        }));
        it('should merge context when provided', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const context = {
                userId: 'user123',
                sessionId: 'session456'
            };
            const result = yield errorHandlerService.handleError('Test error', context);
            expect(result.isSuccess).toBe(true);
        }));
        it('should update metrics when tracking enabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.totalErrors).toBe(1);
            expect(metrics.errorsBySeverity[ExocortexError_1.ErrorSeverity.ERROR]).toBe(1);
            expect(metrics.errorsByCategory[ExocortexError_1.ErrorCategory.VALIDATION]).toBe(1);
        }));
        it('should skip metrics when tracking disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService({ trackMetrics: false });
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.totalErrors).toBe(0);
        }));
        it('should log to console when enabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            expect(consoleErrorSpy).toHaveBeenCalled();
        }));
        it('should skip console logging when disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService({ logToConsole: false });
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            expect(consoleErrorSpy).not.toHaveBeenCalled();
        }));
        it('should show user notification when enabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            expect(mockNotice).toHaveBeenCalled();
        }));
        it('should skip user notification when disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService({ showUserNotification: false });
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            expect(mockNotice).not.toHaveBeenCalled();
        }));
        it('should add error to history', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            const history = errorHandlerService.getErrorHistory();
            expect(history).toHaveLength(1);
            expect(history[0]).toEqual(mockError);
        }));
        it('should attempt recovery when enabled and error is recoverable', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService({ autoRecover: true });
            const mockSuggestion = {
                title: 'Auto Fix',
                description: 'Automatic fix suggestion',
                confidence: 0.95,
                action: {
                    label: 'Apply Fix',
                    handler: jest.fn().mockResolvedValue(undefined)
                }
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: true, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Recoverable error');
            expect(mockSuggestion.action.handler).toHaveBeenCalled();
        }));
        it('should skip recovery when disabled', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'Auto Fix',
                description: 'Automatic fix suggestion',
                confidence: 0.95,
                action: {
                    label: 'Apply Fix',
                    handler: jest.fn().mockResolvedValue(undefined)
                }
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: true, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Recoverable error');
            expect(mockSuggestion.action.handler).not.toHaveBeenCalled();
        }));
        it('should handle error in error handler gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAnalyzer.analyze.mockImplementation(() => {
                throw new Error('Analyzer failed');
            });
            const result = yield errorHandlerService.handleError('Test error');
            expect(result.isFailure).toBe(true);
            expect(result.error).toContain('Failed to handle the error properly');
            expect(consoleErrorSpy).toHaveBeenCalledWith('Error in error handler:', expect.any(Error));
        }));
    });
    describe('markErrorResolved', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should track resolution time', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            // Handle error and mark as resolved
            yield errorHandlerService.handleError('Test error');
            // Add a small delay to ensure resolution time > 0
            yield new Promise(resolve => setTimeout(resolve, 1));
            errorHandlerService.markErrorResolved(mockError.id);
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.averageResolutionTime).toBeGreaterThanOrEqual(0);
        }));
        it('should handle non-existent error ID gracefully', () => {
            expect(() => {
                errorHandlerService.markErrorResolved('non-existent-id');
            }).not.toThrow();
        });
        it('should calculate average resolution time correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError1 = Object.assign(Object.assign({}, createMockExocortexError()), { id: 'error1' });
            const mockError2 = Object.assign(Object.assign({}, createMockExocortexError()), { id: 'error2' });
            mockAnalyzer.analyze.mockReturnValueOnce(mockError1).mockReturnValueOnce(mockError2);
            yield errorHandlerService.handleError('Error 1');
            yield new Promise(resolve => setTimeout(resolve, 10)); // Small delay
            yield errorHandlerService.handleError('Error 2');
            errorHandlerService.markErrorResolved('error1');
            errorHandlerService.markErrorResolved('error2');
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.averageResolutionTime).toBeGreaterThan(0);
        }));
        it('should limit resolution time history to 100 entries', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Create 101 errors
            for (let i = 0; i < 101; i++) {
                const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { id: `error${i}` });
                mockAnalyzer.analyze.mockReturnValue(mockError);
                yield errorHandlerService.handleError(`Error ${i}`);
                // Add tiny delay to ensure resolution time > 0
                if (i === 0) {
                    yield new Promise(resolve => setTimeout(resolve, 1));
                }
                errorHandlerService.markErrorResolved(`error${i}`);
            }
            // Should maintain only 100 resolution times
            const metrics = errorHandlerService.getMetrics();
            expect(metrics.averageResolutionTime).toBeGreaterThanOrEqual(0);
        }));
    });
    describe('logging methods', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should log critical errors to console.error', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { severity: ExocortexError_1.ErrorSeverity.CRITICAL });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Critical error');
            expect(consoleErrorSpy).toHaveBeenCalled();
        }));
        it('should log warnings to console.warn', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { severity: ExocortexError_1.ErrorSeverity.WARNING });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Warning error');
            expect(consoleWarnSpy).toHaveBeenCalled();
        }));
        it('should log info messages to console.info', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { severity: ExocortexError_1.ErrorSeverity.INFO });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Info message');
            expect(consoleInfoSpy).toHaveBeenCalled();
        }));
        it('should format error message with location', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { context: {
                    operation: 'test',
                    timestamp: new Date(),
                    location: { line: 42, column: 10, file: 'test.sparql' }
                } });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Error with location');
            expect(consoleErrorSpy).toHaveBeenCalledWith(expect.stringContaining('(Line 42:10)'), expect.any(Object));
        }));
        it('should handle string location context', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { context: {
                    operation: 'test',
                    timestamp: new Date(),
                    location: 'Some location string'
                } });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Error with string location');
            expect(consoleErrorSpy).toHaveBeenCalled();
        }));
    });
    describe('user notifications', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should show longer notification for critical errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { severity: ExocortexError_1.ErrorSeverity.CRITICAL });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Critical error');
            expect(mockNotice).toHaveBeenCalledWith(expect.any(String), 10000);
        }));
        it('should show shorter notification for info messages', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { severity: ExocortexError_1.ErrorSeverity.INFO });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Info message');
            expect(mockNotice).toHaveBeenCalledWith(expect.any(String), 3000);
        }));
        it('should include suggestion in notification message', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'Quick Fix',
                description: 'Try this solution'
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Error with suggestion');
            expect(mockNotice).toHaveBeenCalledWith(expect.stringContaining('💡 Quick Fix'), expect.any(Number));
        }));
        it('should handle error without suggestions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { suggestions: [] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Error without suggestions');
            expect(mockNotice).toHaveBeenCalledWith(expect.not.stringContaining('💡'), expect.any(Number));
        }));
    });
    describe('error history management', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should maintain error history in LIFO order', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError1 = Object.assign(Object.assign({}, createMockExocortexError()), { id: 'error1', title: 'First Error' });
            const mockError2 = Object.assign(Object.assign({}, createMockExocortexError()), { id: 'error2', title: 'Second Error' });
            mockAnalyzer.analyze.mockReturnValueOnce(mockError1).mockReturnValueOnce(mockError2);
            yield errorHandlerService.handleError('First error');
            yield errorHandlerService.handleError('Second error');
            const history = errorHandlerService.getErrorHistory();
            expect(history[0].title).toBe('Second Error');
            expect(history[1].title).toBe('First Error');
        }));
        it('should limit history to maximum size', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Add 101 errors to exceed the limit
            for (let i = 0; i < 101; i++) {
                const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { id: `error${i}` });
                mockAnalyzer.analyze.mockReturnValue(mockError);
                yield errorHandlerService.handleError(`Error ${i}`);
            }
            const history = errorHandlerService.getErrorHistory();
            expect(history).toHaveLength(100);
        }));
        it('should clear history successfully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            expect(errorHandlerService.getErrorHistory()).toHaveLength(1);
            errorHandlerService.clearHistory();
            expect(errorHandlerService.getErrorHistory()).toHaveLength(0);
        }));
        it('should clear error start times when clearing history', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Test error');
            errorHandlerService.clearHistory();
            // Should not throw when trying to mark resolved after clear
            expect(() => {
                errorHandlerService.markErrorResolved(mockError.id);
            }).not.toThrow();
        }));
    });
    describe('getSuggestions', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should return suggestions for string error', () => {
            const mockSuggestions = [
                { title: 'Fix 1', description: 'First fix' },
                { title: 'Fix 2', description: 'Second fix' }
            ];
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { suggestions: mockSuggestions });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const suggestions = errorHandlerService.getSuggestions('Test error');
            expect(suggestions).toEqual(mockSuggestions);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith('Test error');
        });
        it('should return suggestions for Error object', () => {
            const mockSuggestions = [
                { title: 'Error Fix', description: 'Fix for error object' }
            ];
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { suggestions: mockSuggestions });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const errorObject = new Error('Test error object');
            const suggestions = errorHandlerService.getSuggestions(errorObject);
            expect(suggestions).toEqual(mockSuggestions);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith(errorObject);
        });
        it('should return empty array when no suggestions available', () => {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { suggestions: undefined });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const suggestions = errorHandlerService.getSuggestions('Error without suggestions');
            expect(suggestions).toEqual([]);
        });
    });
    describe('analyzeError', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should return analyzed ExocortexError for string', () => {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const analyzed = errorHandlerService.analyzeError('Test error');
            expect(analyzed).toEqual(mockError);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith('Test error');
        });
        it('should return analyzed ExocortexError for Error object', () => {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const errorObject = new Error('Test error object');
            const analyzed = errorHandlerService.analyzeError(errorObject);
            expect(analyzed).toEqual(mockError);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith(errorObject);
        });
    });
    describe('recovery mechanism', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService({ autoRecover: true });
        });
        it('should not attempt recovery for non-recoverable errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'Manual Fix',
                description: 'Requires manual intervention',
                confidence: 0.95,
                action: {
                    label: 'Apply',
                    handler: jest.fn()
                }
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: false, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Non-recoverable error');
            expect(mockSuggestion.action.handler).not.toHaveBeenCalled();
        }));
        it('should not attempt recovery for low-confidence suggestions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'Uncertain Fix',
                description: 'Low confidence fix',
                confidence: 0.5,
                action: {
                    label: 'Try',
                    handler: jest.fn()
                }
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: true, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Low confidence error');
            expect(mockSuggestion.action.handler).not.toHaveBeenCalled();
        }));
        it('should handle recovery failure gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'Failing Fix',
                description: 'This fix will fail',
                confidence: 0.95,
                action: {
                    label: 'Apply',
                    handler: jest.fn().mockRejectedValue(new Error('Recovery failed'))
                }
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: true, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError('Failing recovery error');
            expect(result.isSuccess).toBe(true); // Main error handling should still succeed
            expect(consoleErrorSpy).toHaveBeenCalledWith('Auto-recovery failed:', expect.any(Error));
        }));
        it('should show recovery notification on success', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'Successful Fix',
                description: 'This fix will succeed',
                confidence: 0.95,
                action: {
                    label: 'Apply',
                    handler: jest.fn().mockResolvedValue(undefined)
                }
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: true, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            yield errorHandlerService.handleError('Recoverable error');
            expect(mockNotice).toHaveBeenCalledWith('Auto-recovery: Successful Fix', 3000);
        }));
    });
    describe('edge cases and boundary conditions', () => {
        beforeEach(() => {
            errorHandlerService = new ErrorHandlerService_1.ErrorHandlerService();
        });
        it('should handle empty string error', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError('');
            expect(result.isSuccess).toBe(true);
            expect(mockAnalyzer.analyze).toHaveBeenCalledWith('');
        }));
        it('should handle null context gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = createMockExocortexError();
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError('Test error', null);
            expect(result.isSuccess).toBe(true);
        }));
        it('should handle undefined suggestions array', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { suggestions: undefined });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError('Error without suggestions');
            expect(result.isSuccess).toBe(true);
        }));
        it('should handle error with null action in suggestion', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockSuggestion = {
                title: 'No Action Fix',
                description: 'Suggestion without action',
                confidence: 0.95,
                action: null
            };
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { recoverable: true, suggestions: [mockSuggestion] });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError('Error with null action');
            expect(result.isSuccess).toBe(true);
        }));
        it('should handle very large error messages', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const largeMessage = 'Large error message: ' + 'x'.repeat(10000);
            const mockError = Object.assign(Object.assign({}, createMockExocortexError()), { message: largeMessage });
            mockAnalyzer.analyze.mockReturnValue(mockError);
            const result = yield errorHandlerService.handleError(largeMessage);
            expect(result.isSuccess).toBe(true);
        }));
    });
    // Helper function to create mock ExocortexError
    function createMockExocortexError() {
        return {
            id: 'test-error-id',
            severity: ExocortexError_1.ErrorSeverity.ERROR,
            category: ExocortexError_1.ErrorCategory.VALIDATION,
            title: 'Test Error',
            message: 'This is a test error message',
            context: {
                operation: 'test-operation',
                timestamp: new Date()
            },
            recoverable: false
        };
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,