{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Result.ts","mappings":";;;AAAA;;;GAGG;AACH,MAAa,MAAM;IAMjB,YAAoB,SAAkB,EAAE,KAAc,EAAE,KAAS;QAC/D,IAAI,SAAS,IAAI,KAAK,EAAE;YACtB,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QACD,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE;YACxB,MAAM,IAAI,KAAK,CACb,sEAAsE,CACvE,CAAC;SACH;QAED,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,CAAC,SAAS,CAAC;QAC5B,IAAI,CAAC,KAAK,GAAG,KAAe,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAU,CAAC;QAEzB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAEM,QAAQ;QACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,MAAM,IAAI,KAAK,CACb,mEAAmE,CACpE,CAAC;SACH;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,UAAU;QACf,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,eAAe;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,QAAQ;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEM,MAAM,CAAC,EAAE,CAAI,KAAS;QAC3B,OAAO,IAAI,MAAM,CAAI,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAEM,MAAM,CAAC,IAAI,CAAI,KAAa;QACjC,OAAO,IAAI,MAAM,CAAI,KAAK,EAAE,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,MAAM,CAAC,OAAO,CAAC,OAAsB;QAC1C,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC5B,IAAI,MAAM,CAAC,SAAS;gBAAE,OAAO,MAAM,CAAC;SACrC;QACD,OAAO,MAAM,CAAC,EAAE,EAAE,CAAC;IACrB,CAAC;CACF;AA9DD,wBA8DC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/Result.ts"],"sourcesContent":["/**\n * Result class for handling success and failure states\n * Following functional programming patterns for error handling\n */\nexport class Result<T> {\n  public isSuccess: boolean;\n  public isFailure: boolean;\n  public error: string;\n  private _value: T;\n\n  private constructor(isSuccess: boolean, error?: string, value?: T) {\n    if (isSuccess && error) {\n      throw new Error(\n        \"InvalidOperation: A result cannot be successful and contain an error\",\n      );\n    }\n    if (!isSuccess && !error) {\n      throw new Error(\n        \"InvalidOperation: A failing result needs to contain an error message\",\n      );\n    }\n\n    this.isSuccess = isSuccess;\n    this.isFailure = !isSuccess;\n    this.error = error as string;\n    this._value = value as T;\n\n    Object.freeze(this);\n  }\n\n  public getValue(): T {\n    if (!this.isSuccess) {\n      throw new Error(\n        `Can't get the value of an error result. Use 'errorValue' instead.`,\n      );\n    }\n\n    return this._value;\n  }\n\n  public errorValue(): string {\n    return this.error;\n  }\n\n  public getErrorMessage(): string {\n    return this.error;\n  }\n\n  public getError(): string {\n    return this.error;\n  }\n\n  public static ok<U>(value?: U): Result<U> {\n    return new Result<U>(true, undefined, value);\n  }\n\n  public static fail<U>(error: string): Result<U> {\n    return new Result<U>(false, error);\n  }\n\n  public static combine(results: Result<any>[]): Result<any> {\n    for (const result of results) {\n      if (result.isFailure) return result;\n    }\n    return Result.ok();\n  }\n}\n"],"version":3}