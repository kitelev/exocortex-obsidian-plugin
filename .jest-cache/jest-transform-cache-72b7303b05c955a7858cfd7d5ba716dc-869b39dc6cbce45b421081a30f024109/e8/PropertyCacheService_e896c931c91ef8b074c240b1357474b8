7bc97bcd39401a1cba65e46516c49aad
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyCacheService = void 0;
/**
 * Performance-optimized caching service for property definitions
 * Reduces file system reads during asset creation
 */
class PropertyCacheService {
    constructor() {
        this.propertyCache = new Map();
        this.classPropertyIndex = new Map();
        this.lastCacheUpdate = 0;
        this.CACHE_TTL = 5 * 60 * 1000; // 5 minutes
        this.MAX_CACHE_SIZE = 1000;
        this.setupPerformanceMonitoring();
    }
    static getInstance() {
        if (!PropertyCacheService.instance) {
            PropertyCacheService.instance = new PropertyCacheService();
        }
        return PropertyCacheService.instance;
    }
    /**
     * Gets cached properties for a class with performance optimization
     * @param className The class to get properties for
     * @returns Array of property definitions
     */
    getPropertiesForClass(className) {
        const cacheKey = `class:${className}`;
        // Check cache first
        if (this.isCacheValid() && this.propertyCache.has(cacheKey)) {
            const cached = this.propertyCache.get(cacheKey);
            console.debug(`Cache hit for ${className}: ${cached.length} properties`);
            return [...cached]; // Return copy to prevent mutation
        }
        console.debug(`Cache miss for ${className}, returning empty array`);
        return [];
    }
    /**
     * Updates cache with property definitions for a class
     * @param className The class name
     * @param properties Array of property definitions
     */
    updateClassProperties(className, properties) {
        const cacheKey = `class:${className}`;
        // Implement cache size limit
        if (this.propertyCache.size >= this.MAX_CACHE_SIZE) {
            this.evictOldestEntries();
        }
        // Cache the properties
        this.propertyCache.set(cacheKey, [...properties]);
        // Update class-property index for faster lookups
        const propertyNames = properties.map(p => p.name);
        this.classPropertyIndex.set(className, propertyNames);
        this.lastCacheUpdate = Date.now();
        console.debug(`Cached ${properties.length} properties for ${className}`);
    }
    /**
     * Bulk update cache with multiple classes at once
     * @param classPropertiesMap Map of class name to property definitions
     */
    bulkUpdateCache(classPropertiesMap) {
        const startTime = performance.now();
        for (const [className, properties] of classPropertiesMap) {
            this.updateClassProperties(className, properties);
        }
        const duration = performance.now() - startTime;
        console.debug(`Bulk cache update completed in ${duration.toFixed(2)}ms for ${classPropertiesMap.size} classes`);
    }
    /**
     * Checks if a class has cached properties
     * @param className The class name to check
     * @returns True if properties are cached and valid
     */
    hasPropertiesForClass(className) {
        return this.isCacheValid() && this.propertyCache.has(`class:${className}`);
    }
    /**
     * Gets all cached class names
     * @returns Array of class names in cache
     */
    getCachedClasses() {
        if (!this.isCacheValid()) {
            return [];
        }
        return Array.from(this.classPropertyIndex.keys());
    }
    /**
     * Invalidates cache for a specific class
     * @param className The class to invalidate
     */
    invalidateClass(className) {
        const cacheKey = `class:${className}`;
        this.propertyCache.delete(cacheKey);
        this.classPropertyIndex.delete(className);
        console.debug(`Invalidated cache for ${className}`);
    }
    /**
     * Clears all cached data
     */
    clearCache() {
        this.propertyCache.clear();
        this.classPropertyIndex.clear();
        this.lastCacheUpdate = 0;
        console.debug("Cache cleared");
    }
    /**
     * Gets cache statistics for performance monitoring
     * @returns Cache performance metrics
     */
    getCacheStats() {
        return {
            size: this.propertyCache.size,
            classCount: this.classPropertyIndex.size,
            lastUpdate: this.lastCacheUpdate,
            isValid: this.isCacheValid(),
            hitRate: this.calculateHitRate(),
            memoryUsage: this.estimateMemoryUsage(),
        };
    }
    /**
     * Preloads properties for common classes to improve performance
     * @param priorityClasses Array of class names to prioritize
     */
    async preloadPriorityClasses(priorityClasses) {
        console.debug(`Preloading ${priorityClasses.length} priority classes`);
        const startTime = performance.now();
        const preloadMap = new Map();
        // For now, set empty arrays to indicate classes are "loaded"
        // In a real implementation, this would fetch from the vault
        for (const className of priorityClasses) {
            if (!this.hasPropertiesForClass(className)) {
                preloadMap.set(className, []);
            }
        }
        if (preloadMap.size > 0) {
            this.bulkUpdateCache(preloadMap);
        }
        const duration = performance.now() - startTime;
        console.debug(`Preload completed in ${duration.toFixed(2)}ms`);
    }
    /**
     * Checks if cache is still valid based on TTL
     */
    isCacheValid() {
        if (this.lastCacheUpdate === 0) {
            return false;
        }
        return (Date.now() - this.lastCacheUpdate) < this.CACHE_TTL;
    }
    /**
     * Evicts oldest cache entries to maintain size limit
     */
    evictOldestEntries() {
        const entriesToEvict = Math.floor(this.MAX_CACHE_SIZE * 0.2); // Remove 20%
        const entries = Array.from(this.propertyCache.keys());
        for (let i = 0; i < entriesToEvict && entries.length > 0; i++) {
            const keyToEvict = entries[i];
            this.propertyCache.delete(keyToEvict);
            // Extract class name from cache key
            const className = keyToEvict.replace('class:', '');
            this.classPropertyIndex.delete(className);
        }
        console.debug(`Evicted ${entriesToEvict} cache entries`);
    }
    /**
     * Calculates cache hit rate for performance monitoring
     */
    calculateHitRate() {
        // This would be tracked in a real implementation
        return 0.85; // Placeholder
    }
    /**
     * Estimates memory usage of cached data
     */
    estimateMemoryUsage() {
        let totalSize = 0;
        for (const [key, properties] of this.propertyCache) {
            totalSize += key.length * 2; // String characters as bytes
            totalSize += properties.length * 200; // Estimated property object size
        }
        return totalSize;
    }
    /**
     * Sets up performance monitoring and cleanup
     */
    setupPerformanceMonitoring() {
        // Auto-cleanup old cache entries every 10 minutes
        if (typeof setInterval !== 'undefined') {
            setInterval(() => {
                if (!this.isCacheValid()) {
                    this.clearCache();
                }
            }, 10 * 60 * 1000);
        }
    }
}
exports.PropertyCacheService = PropertyCacheService;
PropertyCacheService.instance = null;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,