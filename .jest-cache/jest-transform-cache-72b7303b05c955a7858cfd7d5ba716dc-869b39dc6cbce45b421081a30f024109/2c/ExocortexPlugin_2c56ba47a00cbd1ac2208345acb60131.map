{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/ExocortexPlugin.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/ExocortexPlugin.ts"],"sourcesContent":["import { Plugin } from \"obsidian\";\nimport { LifecycleRegistry } from \"./infrastructure/lifecycle/LifecycleRegistry\";\nimport { CommandRegistry } from \"./presentation/command-controllers/CommandRegistry\";\nimport { ServiceProvider } from \"./infrastructure/providers/ServiceProvider\";\nimport { SettingsLifecycleManager } from \"./infrastructure/lifecycle/SettingsLifecycleManager\";\nimport { GraphLifecycleManager } from \"./infrastructure/lifecycle/GraphLifecycleManager\";\nimport { ProcessorLifecycleManager } from \"./infrastructure/lifecycle/ProcessorLifecycleManager\";\nimport { AssetCommandController } from \"./presentation/command-controllers/AssetCommandController\";\nimport { SPARQLCommandController } from \"./presentation/command-controllers/SPARQLCommandController\";\nimport { RDFCommandController } from \"./presentation/command-controllers/RDFCommandController\";\nimport { TaskCommandController } from \"./presentation/command-controllers/TaskCommandController\";\nimport { ExocortexSettings } from \"./domain/entities/ExocortexSettings\";\n\n/**\n * Main Plugin Class following Single Responsibility Principle\n * Single Responsibility: Coordinate plugin initialization and cleanup\n *\n * This refactored version demonstrates:\n * - Single Responsibility Principle: Only handles plugin coordination\n * - Open/Closed Principle: Extensible through registries\n * - Dependency Inversion: Depends on abstractions, not concretions\n * - Interface Segregation: Uses specific interfaces for different concerns\n * - GRASP Patterns: Controller, Creator, Pure Fabrication\n */\nexport default class ExocortexPlugin extends Plugin {\n  private lifecycleRegistry: LifecycleRegistry;\n  private commandRegistry: CommandRegistry;\n  private serviceProvider: ServiceProvider;\n\n  // Managers\n  private settingsManager: SettingsLifecycleManager;\n  private graphManager: GraphLifecycleManager;\n  private processorManager: ProcessorLifecycleManager;\n\n  async onload(): Promise<void> {\n    try {\n      // Initialize registries\n      this.lifecycleRegistry = new LifecycleRegistry(this);\n      this.commandRegistry = new CommandRegistry(this);\n\n      // Initialize and register lifecycle managers\n      await this.initializeLifecycleManagers();\n\n      // Initialize service provider\n      await this.initializeServiceProvider();\n\n      // Initialize and register command controllers\n      await this.initializeCommandControllers();\n\n      // Initialize all managers\n      await this.lifecycleRegistry.initializeAll();\n\n      // Wire up cache invalidation callback\n      this.setupCacheInvalidation();\n\n      // Initialize all commands\n      await this.commandRegistry.initializeAll();\n\n      console.log(\"üîç Exocortex Plugin initialized successfully\");\n    } catch (error) {\n      console.error(\"Failed to initialize Exocortex Plugin:\", error);\n      throw error;\n    }\n  }\n\n  async onunload(): Promise<void> {\n    try {\n      // Cleanup in reverse order\n      await this.commandRegistry?.cleanupAll();\n      await this.serviceProvider?.cleanup();\n      await this.lifecycleRegistry?.cleanupAll();\n\n      console.log(\"üîç Exocortex Plugin cleaned up successfully\");\n    } catch (error) {\n      console.error(\"Error during plugin cleanup:\", error);\n    }\n  }\n\n  /**\n   * Get plugin settings (exposed for settings tab)\n   */\n  get settings(): ExocortexSettings {\n    return this.settingsManager?.getSettings();\n  }\n\n  /**\n   * Save plugin settings (exposed for settings tab)\n   */\n  async saveSettings(): Promise<void> {\n    await this.settingsManager?.saveSettings();\n\n    // Update dependent services\n    this.serviceProvider?.updateServices(this.settings);\n    this.processorManager?.updateCacheConfig(this.settings);\n  }\n\n  /**\n   * Update container (exposed for settings tab)\n   */\n  updateContainer(): void {\n    this.serviceProvider?.updateServices(this.settings);\n    this.processorManager?.updateCacheConfig(this.settings);\n  }\n\n  /**\n   * Get SPARQL processor (exposed for testing)\n   */\n  get sparqlProcessor() {\n    return this.processorManager?.getSPARQLProcessor();\n  }\n\n  private async initializeLifecycleManagers(): Promise<void> {\n    // Create and register lifecycle managers\n    this.settingsManager = new SettingsLifecycleManager(this);\n    this.graphManager = new GraphLifecycleManager(this);\n\n    this.lifecycleRegistry.registerManager(this.settingsManager);\n    this.lifecycleRegistry.registerManager(this.graphManager);\n\n    // Initialize settings first (others depend on it)\n    await this.settingsManager.initialize();\n\n    // Create processor manager (depends on settings and graph)\n    this.processorManager = new ProcessorLifecycleManager(\n      this,\n      this.graphManager.getGraph(),\n      this.settingsManager.getSettings(),\n    );\n    this.lifecycleRegistry.registerManager(this.processorManager);\n  }\n\n  private async initializeServiceProvider(): Promise<void> {\n    this.serviceProvider = new ServiceProvider(\n      this,\n      this.graphManager.getGraph(),\n      this.settingsManager.getSettings(),\n    );\n    await this.serviceProvider.initializeServices();\n  }\n\n  private async initializeCommandControllers(): Promise<void> {\n    // Create and register command controllers\n    const assetController = new AssetCommandController(this);\n    const sparqlController = new SPARQLCommandController(\n      this,\n      this.processorManager.getSPARQLProcessor(),\n    );\n    const rdfController = new RDFCommandController(\n      this,\n      this.graphManager.getGraph(),\n      this.serviceProvider.getService(\"RDFService\"),\n      this.processorManager.getSPARQLProcessor(),\n    );\n    const taskController = new TaskCommandController(\n      this,\n      this.graphManager.getGraph(),\n    );\n\n    this.commandRegistry.registerController(assetController);\n    this.commandRegistry.registerController(sparqlController);\n    this.commandRegistry.registerController(rdfController);\n    this.commandRegistry.registerController(taskController);\n  }\n\n  private setupCacheInvalidation(): void {\n    // Setup cache invalidation callback from graph to SPARQL processor\n    this.graphManager.setCacheInvalidationCallback(() => {\n      this.processorManager.getSPARQLProcessor()?.invalidateCache();\n    });\n  }\n}\n"],"version":3}