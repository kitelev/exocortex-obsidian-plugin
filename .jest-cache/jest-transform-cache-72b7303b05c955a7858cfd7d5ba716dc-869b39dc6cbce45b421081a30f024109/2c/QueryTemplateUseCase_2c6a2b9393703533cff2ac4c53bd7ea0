c7f4c7ecdb0f92ca3039bd456d122e26
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryTemplateUseCase = void 0;
const QueryTemplate_1 = require("../../domain/visual/QueryTemplate");
const VisualQueryNode_1 = require("../../domain/visual/VisualQueryNode");
const VisualQueryEdge_1 = require("../../domain/visual/VisualQueryEdge");
class QueryTemplateUseCase {
    constructor(templateRepository) {
        this.templateRepository = templateRepository;
    }
    getTemplateRepository() {
        return this.templateRepository;
    }
    async getAllTemplates() {
        return await this.templateRepository.findAll();
    }
    async getTemplateById(id) {
        return await this.templateRepository.findById(id);
    }
    async searchTemplates(criteria) {
        return await this.templateRepository.findByCriteria(criteria);
    }
    async getTemplatesByCategory(category) {
        return await this.templateRepository.findByCategory(category);
    }
    async getBuiltInTemplates() {
        return await this.templateRepository.getBuiltInTemplates();
    }
    async getCustomTemplates() {
        return await this.templateRepository.getCustomTemplates();
    }
    async getRecentTemplates(limit) {
        return await this.templateRepository.getRecentlyUsed(limit);
    }
    async saveTemplate(template) {
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot save built-in templates");
        }
        return await this.templateRepository.save(template);
    }
    async createCustomTemplate(nodes, edges, viewport, name, description, category = QueryTemplate_1.TemplateCategory.CUSTOM, tags = []) {
        const metadata = {
            name,
            description,
            category,
            tags: [...tags, "custom"],
            difficulty: "intermediate",
            createdAt: new Date(),
            updatedAt: new Date(),
            version: "1.0.0",
        };
        const template = QueryTemplate_1.QueryTemplate.fromCanvas(nodes, edges, viewport, {
            name,
            description,
            category,
            difficulty: QueryTemplate_1.TemplateDifficulty.INTERMEDIATE,
            tags,
        });
        return await this.templateRepository.create(template);
    }
    async cloneTemplate(templateId, newName) {
        const template = await this.templateRepository.findById(templateId);
        if (!template) {
            throw new Error(`Template with ID ${templateId} not found`);
        }
        let cloned = template.clone();
        if (newName) {
            cloned = cloned.updateMetadata({
                name: newName,
            });
        }
        return await this.templateRepository.create(cloned);
    }
    async deleteTemplate(id) {
        const template = await this.templateRepository.findById(id);
        if (!template) {
            return false;
        }
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot delete built-in templates");
        }
        return await this.templateRepository.delete(id);
    }
    async instantiateTemplate(template) {
        const validation = template.validateParameters();
        if (!validation.isValid) {
            throw new Error(`Template parameters are invalid: ${validation.errors.join(", ")}`);
        }
        await this.templateRepository.recordUsage(template.getId());
        const instantiated = template.instantiate({});
        return {
            nodes: instantiated.layout?.nodes?.map((node) => {
                // Convert serialized nodes back to VisualQueryNode instances
                return new VisualQueryNode_1.VisualQueryNode({
                    id: node.id,
                    type: node.type,
                    label: node.label,
                    position: node.position,
                    variableName: node.variableName,
                    uri: node.uri,
                    dimensions: node.dimensions,
                });
            }) || [],
            edges: instantiated.layout?.edges?.map((edge) => {
                // Convert serialized edges back to VisualQueryEdge instances
                return new VisualQueryEdge_1.VisualQueryEdge({
                    id: edge.id,
                    sourceNodeId: edge.sourceNodeId,
                    targetNodeId: edge.targetNodeId,
                    type: edge.type,
                    label: edge.label,
                    propertyUri: edge.propertyUri,
                });
            }) || [],
        };
    }
    async exportTemplates(templateIds) {
        const templates = await this.templateRepository.exportTemplates(templateIds);
        return JSON.stringify(templates, null, 2);
    }
    async importTemplates(jsonData) {
        try {
            const templatesData = JSON.parse(jsonData);
            if (!Array.isArray(templatesData)) {
                throw new Error("Invalid JSON format: expected array of templates");
            }
            return await this.templateRepository.importTemplates(templatesData);
        }
        catch (error) {
            throw new Error(`Failed to import templates: ${error.message}`);
        }
    }
    async getUsageStatistics(templateId) {
        return await this.templateRepository.getUsageStats(templateId);
    }
    async updateTemplateMetadata(templateId, updates) {
        const template = await this.templateRepository.findById(templateId);
        if (!template) {
            throw new Error(`Template with ID ${templateId} not found`);
        }
        if (template.isBuiltInTemplate()) {
            throw new Error("Cannot modify built-in templates");
        }
        const updatedTemplate = template.updateMetadata(updates);
        return await this.templateRepository.update(updatedTemplate);
    }
    async validateTemplateParameters(template) {
        const validation = template.validateParameters();
        const parameters = template.getParameters();
        const parameterValues = template.getParameterValues();
        const missingParameters = [];
        const invalidParameters = [];
        parameters.forEach((param) => {
            const paramId = param.id || `param_${param.name}`;
            if (param.required && !parameterValues.has(paramId)) {
                missingParameters.push(param.name);
            }
            const value = parameterValues.get(paramId);
            if (value && param.constraints) {
                // Additional validation could be added here
            }
        });
        return {
            isValid: validation.isValid,
            errors: validation.errors,
            missingParameters,
            invalidParameters,
        };
    }
    async getTemplatePreview(templateId) {
        const template = await this.templateRepository.findById(templateId);
        if (!template) {
            throw new Error(`Template with ID ${templateId} not found`);
        }
        const layout = template.getLayout();
        const parameters = template.getParameters();
        const nodeCount = layout.nodes.length;
        const edgeCount = layout.edges.length;
        // Determine complexity based on various factors
        let complexity = "simple";
        const totalElements = nodeCount + edgeCount + parameters.length;
        if (totalElements <= 5) {
            complexity = "simple";
        }
        else if (totalElements <= 10) {
            complexity = "moderate";
        }
        else {
            complexity = "complex";
        }
        // Generate example SPARQL if pattern is available
        let sparqlQuery = template.getMetadata().sparqlPattern || "";
        // Replace parameter placeholders with example values
        parameters.forEach((param) => {
            const paramId = param.id || `param_${param.name}`;
            const placeholder = `{${paramId.toUpperCase()}}`;
            const exampleValue = param.defaultValue || `{${param.name}}`;
            sparqlQuery = sparqlQuery.replace(new RegExp(placeholder, "g"), exampleValue);
        });
        return {
            sparqlQuery,
            nodeCount,
            edgeCount,
            parameterCount: parameters.length,
            complexity,
        };
    }
    async refreshTemplateCache() {
        await this.templateRepository.refresh();
    }
}
exports.QueryTemplateUseCase = QueryTemplateUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,