aa48ba7f0c07f722352439e187d27fc9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancedResult = void 0;
const Result_1 = require("./Result");
const ExocortexError_1 = require("../errors/ExocortexError");
class EnhancedResult {
    constructor(result, errorDetails) {
        this._result = result;
        this._errorDetails = errorDetails;
    }
    get isSuccess() {
        return this._result.isSuccess;
    }
    get isFailure() {
        return this._result.isFailure;
    }
    get error() {
        return this._result.error;
    }
    getValue() {
        return this._result.getValue();
    }
    errorValue() {
        return this._result.errorValue();
    }
    getErrorDetails() {
        return this._errorDetails;
    }
    static okEnhanced(value) {
        const result = Result_1.Result.ok(value);
        return new EnhancedResult(result);
    }
    static failEnhanced(error) {
        let errorMessage;
        let errorDetails;
        if (typeof error === 'string') {
            errorMessage = error;
            errorDetails = ExocortexError_1.ErrorBuilder.create()
                .withTitle('Operation Failed')
                .withMessage(error)
                .withSeverity(ExocortexError_1.ErrorSeverity.ERROR)
                .withCategory(ExocortexError_1.ErrorCategory.SYSTEM)
                .withContext({
                operation: 'Unknown',
                timestamp: new Date()
            })
                .build();
        }
        else {
            errorMessage = error.message;
            errorDetails = error;
        }
        const result = Result_1.Result.fail(errorMessage);
        return new EnhancedResult(result, errorDetails);
    }
    mapError(fn) {
        if (this.isSuccess) {
            return this;
        }
        const currentError = this._errorDetails || ExocortexError_1.ErrorBuilder.create()
            .withMessage(this.error)
            .withSeverity(ExocortexError_1.ErrorSeverity.ERROR)
            .withCategory(ExocortexError_1.ErrorCategory.SYSTEM)
            .withContext({
            operation: 'Unknown',
            timestamp: new Date()
        })
            .build();
        const mappedError = fn(currentError);
        return EnhancedResult.failEnhanced(mappedError);
    }
    chain(fn) {
        if (this.isFailure) {
            return EnhancedResult.failEnhanced(this._errorDetails || this.error);
        }
        return fn(this.getValue());
    }
    static combineEnhanced(results) {
        const errors = [];
        for (const result of results) {
            if (result.isFailure) {
                const errorDetails = result.getErrorDetails();
                if (errorDetails) {
                    errors.push(errorDetails);
                }
            }
        }
        if (errors.length > 0) {
            const combinedError = ExocortexError_1.ErrorBuilder.create()
                .withTitle('Multiple Errors Occurred')
                .withMessage(`${errors.length} error(s) occurred during operation`)
                .withSeverity(ExocortexError_1.ErrorSeverity.ERROR)
                .withCategory(ExocortexError_1.ErrorCategory.SYSTEM)
                .withContext({
                operation: 'Combined Operation',
                timestamp: new Date(),
                metadata: {
                    errorCount: errors.length,
                    errors: errors.map(e => ({ id: e.id, title: e.title }))
                }
            })
                .withInnerError(errors[0])
                .build();
            return EnhancedResult.failEnhanced(combinedError);
        }
        return EnhancedResult.okEnhanced();
    }
    withContext(context) {
        if (this.isSuccess) {
            return this;
        }
        const currentError = this._errorDetails;
        if (!currentError) {
            return this;
        }
        const updatedError = Object.assign(Object.assign({}, currentError), { context: Object.assign(Object.assign({}, currentError.context), context) });
        return EnhancedResult.failEnhanced(updatedError);
    }
}
exports.EnhancedResult = EnhancedResult;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,