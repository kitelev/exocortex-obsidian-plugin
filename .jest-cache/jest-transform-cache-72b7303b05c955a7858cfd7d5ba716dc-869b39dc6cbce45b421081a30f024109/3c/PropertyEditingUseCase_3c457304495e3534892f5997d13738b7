b42afda9a5e7b7efcb83acc9bc15aff1
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertyEditingUseCase = void 0;
const tslib_1 = require("tslib");
const Result_1 = require("../../domain/core/Result");
const AssetId_1 = require("../../domain/value-objects/AssetId");
class PropertyEditingUseCase {
    constructor(assetRepository, plugin // Reference to main plugin for property discovery
    ) {
        this.assetRepository = assetRepository;
        this.plugin = plugin;
    }
    execute(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Validate request
            if (!request.assetId) {
                return Result_1.Result.fail('Asset ID is required');
            }
            if (!request.propertyName) {
                return Result_1.Result.fail('Property name is required');
            }
            // Validate property value
            const validationResult = this.validatePropertyValue(request.value, request.propertyDefinition);
            if (validationResult.isFailure) {
                return Result_1.Result.fail(validationResult.error);
            }
            try {
                // If assetId looks like a file path, use direct update method
                if (request.assetId.includes('/') || request.assetId.endsWith('.md')) {
                    // Use the new direct update method
                    const repo = this.assetRepository;
                    if (repo.updateFrontmatterByPath) {
                        console.log(`Updating property ${request.propertyName} to ${request.value} for file ${request.assetId}`);
                        yield repo.updateFrontmatterByPath(request.assetId, {
                            [request.propertyName]: request.value
                        });
                        return Result_1.Result.ok({
                            success: true,
                            updatedValue: request.value
                        });
                    }
                }
                // Fallback to original logic for asset IDs
                let asset = null;
                // First try as UUID
                const assetIdResult = AssetId_1.AssetId.create(request.assetId);
                if (assetIdResult.isSuccess) {
                    asset = yield this.assetRepository.findById(assetIdResult.getValue());
                }
                // If not found by ID, try by filename
                if (!asset) {
                    asset = yield this.assetRepository.findByFilename(request.assetId);
                }
                if (!asset) {
                    return Result_1.Result.fail(`Asset not found: ${request.assetId}`);
                }
                // Update the property
                asset.setProperty(request.propertyName, request.value);
                // Save the asset
                yield this.assetRepository.save(asset);
                return Result_1.Result.ok({
                    success: true,
                    updatedValue: request.value
                });
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to update property: ${error}`);
            }
        });
    }
    /**
     * Validate property value based on its definition
     */
    validatePropertyValue(value, definition) {
        var _a;
        // Check required
        if (definition.isRequired && (value === null || value === undefined || value === '')) {
            return Result_1.Result.fail(`${definition.label} is required`);
        }
        // Skip further validation if value is empty and not required
        if (!definition.isRequired && (value === null || value === undefined || value === '')) {
            return Result_1.Result.ok();
        }
        // Validate based on range/type
        if (definition.range === 'number') {
            if (isNaN(Number(value))) {
                return Result_1.Result.fail(`${definition.label} must be a number`);
            }
        }
        if (definition.range === 'date') {
            if (isNaN(Date.parse(value))) {
                return Result_1.Result.fail(`${definition.label} must be a valid date`);
            }
        }
        if (definition.range === 'boolean') {
            if (typeof value !== 'boolean') {
                return Result_1.Result.fail(`${definition.label} must be true or false`);
            }
        }
        if ((_a = definition.range) === null || _a === void 0 ? void 0 : _a.startsWith('enum:')) {
            const allowedValues = definition.range.substring(5).split(',').map(v => v.trim());
            if (!allowedValues.includes(value)) {
                return Result_1.Result.fail(`${definition.label} must be one of: ${allowedValues.join(', ')}`);
            }
        }
        // Custom validation regex
        if (definition.validation) {
            try {
                const regex = new RegExp(definition.validation);
                if (!regex.test(String(value))) {
                    return Result_1.Result.fail(`${definition.label} format is invalid`);
                }
            }
            catch (e) {
                // Invalid regex, skip validation
            }
        }
        return Result_1.Result.ok();
    }
    /**
     * Get properties for a class (delegating to plugin for now)
     */
    getPropertiesForClass(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const properties = yield this.plugin.findPropertiesForClass(className);
                return Result_1.Result.ok(properties);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to get properties: ${error.message}`);
            }
        });
    }
    /**
     * Get assets for a class (for dropdowns)
     */
    getAssetsForClass(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const assets = yield this.plugin.findAssetsByClass(className, true);
                return Result_1.Result.ok(assets);
            }
            catch (error) {
                return Result_1.Result.fail(`Failed to get assets: ${error.message}`);
            }
        });
    }
}
exports.PropertyEditingUseCase = PropertyEditingUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,