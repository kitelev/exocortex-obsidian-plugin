f2cc8797ba00938a7178a1c4e3a4802a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const CreateAssetUseCase_1 = require("../../../../src/application/use-cases/CreateAssetUseCase");
const Asset_1 = require("../../../../src/domain/entities/Asset");
const AssetId_1 = require("../../../../src/domain/value-objects/AssetId");
const OntologyPrefix_1 = require("../../../../src/domain/value-objects/OntologyPrefix");
const Result_1 = require("../../../../src/domain/core/Result");
describe('CreateAssetUseCase', () => {
    let useCase;
    let mockAssetRepository;
    let mockOntologyRepository;
    beforeEach(() => {
        // Setup mock repositories
        mockAssetRepository = {
            save: jest.fn(),
            findById: jest.fn(),
            findByFilename: jest.fn(),
            findAll: jest.fn(),
            delete: jest.fn(),
            exists: jest.fn(),
            updateFrontmatterByPath: jest.fn()
        };
        mockOntologyRepository = {
            save: jest.fn(),
            findByPrefix: jest.fn(),
            findAll: jest.fn(),
            delete: jest.fn(),
            exists: jest.fn()
        };
        useCase = new CreateAssetUseCase_1.CreateAssetUseCase(mockAssetRepository, mockOntologyRepository);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('Basic Functionality', () => {
        test('should create useCase with repositories', () => {
            expect(useCase).toBeDefined();
            expect(useCase.execute).toBeDefined();
        });
        test('should accept valid repositories in constructor', () => {
            const newUseCase = new CreateAssetUseCase_1.CreateAssetUseCase(mockAssetRepository, mockOntologyRepository);
            expect(newUseCase).toBeInstanceOf(CreateAssetUseCase_1.CreateAssetUseCase);
        });
    });
    describe('Successful Asset Creation', () => {
        beforeEach(() => {
            // Mock successful ontology lookup
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue(),
                getLabel: () => 'Exocortex Core'
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            mockAssetRepository.save.mockResolvedValue(undefined);
        });
        test('should create asset successfully with minimal data', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
            expect(response.assetId).toBeDefined();
            expect(response.message).toBe('Created asset: Test Asset');
            expect(mockOntologyRepository.findByPrefix).toHaveBeenCalled();
            expect(mockAssetRepository.save).toHaveBeenCalled();
        }));
        test('should create asset with properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Task',
                ontologyPrefix: 'exo',
                properties: {
                    priority: 'high',
                    status: 'active',
                    description: 'A test task'
                }
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
            expect(response.assetId).toBeDefined();
            expect(response.message).toBe('Created asset: Test Asset');
            expect(mockAssetRepository.save).toHaveBeenCalledWith(expect.objectContaining({
                props: expect.objectContaining({
                    properties: expect.any(Map)
                })
            }));
            // Verify the properties Map contains the expected values
            const savedAsset = mockAssetRepository.save.mock.calls[0][0];
            expect(savedAsset.props.properties.get('priority')).toBe('high');
            expect(savedAsset.props.properties.get('status')).toBe('active');
            expect(savedAsset.props.properties.get('description')).toBe('A test task');
        }));
        test('should handle empty properties object', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {}
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
            expect(mockAssetRepository.save).toHaveBeenCalled();
        }));
        test('should handle null properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: undefined
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
            expect(mockAssetRepository.save).toHaveBeenCalled();
        }));
        test('should generate unique asset IDs', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            const response1 = yield useCase.execute(request);
            const response2 = yield useCase.execute(request);
            expect(response1.assetId).not.toBe(response2.assetId);
        }));
        test('should preserve exact title in response', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const specialTitle = 'Asset with Special Chars: éñ中文!@#$%^&*()';
            const request = {
                title: specialTitle,
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            const response = yield useCase.execute(request);
            expect(response.message).toBe(`Created asset: ${specialTitle}`);
        }));
        test('should handle long titles', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const longTitle = 'A'.repeat(1000);
            const request = {
                title: longTitle,
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
            expect(response.message).toBe(`Created asset: ${longTitle}`);
        }));
        test('should handle complex property values', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Complex Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {
                    tags: ['tag1', 'tag2', 'tag3'],
                    metadata: {
                        nested: 'value',
                        count: 42
                    },
                    isActive: true,
                    score: 3.14,
                    description: null,
                    emptyArray: [],
                    emptyObject: {}
                }
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
            expect(mockAssetRepository.save).toHaveBeenCalledWith(expect.objectContaining({
                props: expect.objectContaining({
                    properties: expect.any(Map)
                })
            }));
            // Verify the properties Map contains the expected complex values
            const savedAsset = mockAssetRepository.save.mock.calls[0][0];
            expect(savedAsset.props.properties.get('tags')).toEqual(['tag1', 'tag2', 'tag3']);
            expect(savedAsset.props.properties.get('metadata')).toEqual({
                nested: 'value',
                count: 42
            });
            expect(savedAsset.props.properties.get('isActive')).toBe(true);
            expect(savedAsset.props.properties.get('score')).toBe(3.14);
            expect(savedAsset.props.properties.get('description')).toBe(null);
            expect(savedAsset.props.properties.get('emptyArray')).toEqual([]);
            expect(savedAsset.props.properties.get('emptyObject')).toEqual({});
        }));
    });
    describe('Request Validation', () => {
        beforeEach(() => {
            // Mock successful ontology lookup for valid cases
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
        });
        test('should throw error for empty title', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: '',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Asset title is required');
        }));
        test('should throw error for whitespace-only title', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: '   \t\n   ',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Asset title is required');
        }));
        test('should throw error for missing className', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: '',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Asset class is required');
        }));
        test('should throw error for null className', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: null,
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Asset class is required');
        }));
        test('should throw error for missing ontologyPrefix', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: ''
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Ontology prefix is required');
        }));
        test('should throw error for null ontologyPrefix', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: null
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Ontology prefix is required');
        }));
        test('should validate multiple fields at once', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: '',
                className: '',
                ontologyPrefix: ''
            };
            // Should fail on the first validation error (title)
            yield expect(useCase.execute(request)).rejects.toThrow('Asset title is required');
        }));
        test('should handle undefined request properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset'
                // Missing other required properties
            };
            yield expect(useCase.execute(request)).rejects.toThrow();
        }));
    });
    describe('Value Object Creation', () => {
        beforeEach(() => {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
        });
        test('should handle valid className creation', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__ValidClass',
                ontologyPrefix: 'exo'
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should throw error for invalid className format', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'invalid-class-name!@#',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow();
        }));
        test('should handle valid ontologyPrefix creation', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'valid'
            };
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('valid').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should throw error for invalid ontologyPrefix format', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'invalid-prefix!@#'
            };
            yield expect(useCase.execute(request)).rejects.toThrow();
        }));
        test('should handle long but valid identifiers', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const longButValidClass = 'exo__' + 'A'.repeat(100);
            const longButValidPrefix = 'a' + 'b'.repeat(50);
            const request = {
                title: 'Test Asset',
                className: longButValidClass,
                ontologyPrefix: longButValidPrefix
            };
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create(longButValidPrefix).getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
    });
    describe('Ontology Repository Integration', () => {
        test('should verify ontology exists before creating asset', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield useCase.execute(request);
            expect(mockOntologyRepository.findByPrefix).toHaveBeenCalledWith(expect.objectContaining({
                value: 'exo'
            }));
        }));
        test('should throw error when ontology not found', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockOntologyRepository.findByPrefix.mockResolvedValue(null);
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'nonexistent'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Ontology nonexistent not found');
        }));
        test('should handle ontology repository errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockOntologyRepository.findByPrefix.mockRejectedValue(new Error('Database connection failed'));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Database connection failed');
        }));
        test('should handle ontology with different prefix formats', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const prefixes = ['exo', 'rdfs', 'owl', 'foaf', 'dc'];
            for (const prefix of prefixes) {
                const mockOntology = {
                    getPrefix: () => OntologyPrefix_1.OntologyPrefix.create(prefix).getValue()
                };
                mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
                const request = {
                    title: 'Test Asset',
                    className: `${prefix}__Asset`,
                    ontologyPrefix: prefix
                };
                const response = yield useCase.execute(request);
                expect(response.success).toBe(true);
            }
        }));
    });
    describe('Asset Repository Integration', () => {
        beforeEach(() => {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
        });
        test('should save asset to repository', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.save.mockResolvedValue(undefined);
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield useCase.execute(request);
            expect(mockAssetRepository.save).toHaveBeenCalledTimes(1);
            expect(mockAssetRepository.save).toHaveBeenCalledWith(expect.any(Asset_1.Asset));
        }));
        test('should handle repository save errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.save.mockRejectedValue(new Error('Save failed'));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Save failed');
        }));
        test('should save asset with correct properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.save.mockResolvedValue(undefined);
            const request = {
                title: 'Test Asset',
                className: 'exo__Task',
                ontologyPrefix: 'exo',
                properties: {
                    priority: 'high',
                    dueDate: '2024-12-31'
                }
            };
            yield useCase.execute(request);
            expect(mockAssetRepository.save).toHaveBeenCalledWith(expect.objectContaining({
                props: expect.objectContaining({
                    label: 'Test Asset',
                    className: expect.objectContaining({
                        value: 'exo__Task'
                    }),
                    ontology: expect.objectContaining({
                        value: 'exo'
                    }),
                    properties: expect.any(Map)
                })
            }));
        }));
        test('should handle concurrent repository operations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.save.mockImplementation(() => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                yield new Promise(resolve => setTimeout(resolve, 10));
            }));
            const requests = Array(5).fill(null).map((_, i) => ({
                title: `Test Asset ${i}`,
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            }));
            const promises = requests.map(req => useCase.execute(req));
            const responses = yield Promise.all(promises);
            expect(responses).toHaveLength(5);
            responses.forEach(response => {
                expect(response.success).toBe(true);
            });
            expect(mockAssetRepository.save).toHaveBeenCalledTimes(5);
        }));
    });
    describe('Asset Creation Process', () => {
        beforeEach(() => {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
        });
        test('should create asset with generated ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            let savedAsset;
            mockAssetRepository.save.mockImplementation((asset) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                savedAsset = asset;
            }));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield useCase.execute(request);
            expect(savedAsset).toBeDefined();
            expect(savedAsset.getId()).toBeInstanceOf(AssetId_1.AssetId);
            expect(savedAsset.getId().toString()).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);
        }));
        test('should create asset with correct label', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            let savedAsset;
            mockAssetRepository.save.mockImplementation((asset) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                savedAsset = asset;
            }));
            const request = {
                title: 'My Special Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield useCase.execute(request);
            expect(savedAsset.getTitle()).toBe('My Special Asset');
        }));
        test('should create asset with correct class and ontology', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            let savedAsset;
            mockAssetRepository.save.mockImplementation((asset) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                savedAsset = asset;
            }));
            const request = {
                title: 'Test Asset',
                className: 'exo__Task',
                ontologyPrefix: 'exo'
            };
            yield useCase.execute(request);
            expect(savedAsset.getClassName().value).toBe('exo__Task');
            expect(savedAsset.getOntologyPrefix().value).toBe('exo');
        }));
        test('should handle asset creation failure', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Mock Asset.create to return failure
            const originalCreate = Asset_1.Asset.create;
            Asset_1.Asset.create = jest.fn().mockReturnValue(Result_1.Result.fail('Asset creation failed'));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Asset creation failed');
            // Restore original method
            Asset_1.Asset.create = originalCreate;
        }));
    });
    describe('Response Generation', () => {
        beforeEach(() => {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            mockAssetRepository.save.mockResolvedValue(undefined);
        });
        test('should return correct response structure', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            const response = yield useCase.execute(request);
            expect(response).toEqual({
                success: true,
                assetId: expect.any(String),
                message: 'Created asset: Test Asset'
            });
        }));
        test('should return valid UUID in assetId', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            const response = yield useCase.execute(request);
            expect(response.assetId).toMatch(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);
        }));
        test('should include asset title in success message', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const titles = [
                'Simple Asset',
                'Asset with Spaces',
                'Asset-with-Dashes',
                'Asset_with_Underscores',
                'Asset123',
                'Ässet with Ünicode'
            ];
            for (const title of titles) {
                const request = {
                    title,
                    className: 'exo__Asset',
                    ontologyPrefix: 'exo'
                };
                const response = yield useCase.execute(request);
                expect(response.message).toBe(`Created asset: ${title}`);
            }
        }));
    });
    describe('Error Scenarios', () => {
        test('should handle repository timeout', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockOntologyRepository.findByPrefix.mockImplementation(() => new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout')), 100)));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Timeout');
        }));
        test('should handle memory constraints', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            mockAssetRepository.save.mockRejectedValue(new Error('Out of memory'));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Out of memory');
        }));
        test('should handle network errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockOntologyRepository.findByPrefix.mockRejectedValue(new Error('Network unreachable'));
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Network unreachable');
        }));
        test('should handle permission errors', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockAssetRepository.save.mockRejectedValue(new Error('Permission denied'));
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield expect(useCase.execute(request)).rejects.toThrow('Permission denied');
        }));
    });
    describe('Edge Cases', () => {
        beforeEach(() => {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            mockAssetRepository.save.mockResolvedValue(undefined);
        });
        test('should handle extremely long property values', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const longValue = 'A'.repeat(10000);
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {
                    longProperty: longValue
                }
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should handle deeply nested property objects', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const deepObject = {};
            let current = deepObject;
            for (let i = 0; i < 10; i++) {
                current.level = i;
                current.next = {};
                current = current.next;
            }
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {
                    deepObject
                }
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should handle large number of properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const properties = {};
            for (let i = 0; i < 1000; i++) {
                properties[`prop${i}`] = `value${i}`;
            }
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should handle special property names', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {
                    '': 'empty key',
                    ' ': 'space key',
                    '__proto__': 'prototype key',
                    'constructor': 'constructor key',
                    'toString': 'toString key',
                    '123': 'numeric key',
                    'key.with.dots': 'dotted key',
                    'key-with-dashes': 'dashed key',
                    'key_with_underscores': 'underscored key'
                }
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should handle circular references in properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const obj1 = { name: 'obj1' };
            const obj2 = { name: 'obj2', ref: obj1 };
            obj1.ref = obj2; // Create circular reference
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {
                    circular: obj1
                }
            };
            // This should not throw an error but may serialize differently
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
        test('should handle null and undefined mixed properties', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo',
                properties: {
                    nullValue: null,
                    undefinedValue: undefined,
                    emptyString: '',
                    zero: 0,
                    false: false,
                    emptyArray: [],
                    emptyObject: {}
                }
            };
            const response = yield useCase.execute(request);
            expect(response.success).toBe(true);
        }));
    });
    describe('Performance Tests', () => {
        beforeEach(() => {
            const mockOntology = {
                getPrefix: () => OntologyPrefix_1.OntologyPrefix.create('exo').getValue()
            };
            mockOntologyRepository.findByPrefix.mockResolvedValue(mockOntology);
            mockAssetRepository.save.mockResolvedValue(undefined);
        });
        test('should complete within reasonable time', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const startTime = Date.now();
            const request = {
                title: 'Test Asset',
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            };
            yield useCase.execute(request);
            const endTime = Date.now();
            const duration = endTime - startTime;
            expect(duration).toBeLessThan(1000); // Should complete within 1 second
        }));
        test('should handle batch operations efficiently', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const startTime = Date.now();
            const requests = Array(100).fill(null).map((_, i) => ({
                title: `Test Asset ${i}`,
                className: 'exo__Asset',
                ontologyPrefix: 'exo'
            }));
            const promises = requests.map(req => useCase.execute(req));
            yield Promise.all(promises);
            const endTime = Date.now();
            const duration = endTime - startTime;
            expect(duration).toBeLessThan(5000); // Should complete within 5 seconds for 100 operations
        }));
        test('should not accumulate memory over multiple executions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const initialMemory = process.memoryUsage().heapUsed;
            for (let i = 0; i < 50; i++) {
                const request = {
                    title: `Test Asset ${i}`,
                    className: 'exo__Asset',
                    ontologyPrefix: 'exo'
                };
                yield useCase.execute(request);
            }
            // Force garbage collection if possible
            if (global.gc) {
                global.gc();
            }
            const finalMemory = process.memoryUsage().heapUsed;
            const memoryIncrease = finalMemory - initialMemory;
            // Memory increase should be reasonable (less than 10MB)
            expect(memoryIncrease).toBeLessThan(10 * 1024 * 1024);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,