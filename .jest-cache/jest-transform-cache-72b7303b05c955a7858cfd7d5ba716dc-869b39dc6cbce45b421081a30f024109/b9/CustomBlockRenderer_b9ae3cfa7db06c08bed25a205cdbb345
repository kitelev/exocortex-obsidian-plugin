ff36c4aa57c192649fc1fd0494d9c6cb
"use strict";

/* istanbul ignore next */
function cov_fo046xlkg() {
  var path = "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/CustomBlockRenderer.ts";
  var hash = "701ff5e3317901f8f580dfa467ea92e507e93b3b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/CustomBlockRenderer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 32
        }
      },
      "3": {
        start: {
          line: 5,
          column: 19
        },
        end: {
          line: 5,
          column: 38
        }
      },
      "4": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 23
        }
      },
      "5": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 41,
          column: 11
        }
      },
      "6": {
        start: {
          line: 12,
          column: 33
        },
        end: {
          line: 12,
          column: 39
        }
      },
      "7": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "8": {
        start: {
          line: 15,
          column: 16
        },
        end: {
          line: 18,
          column: 17
        }
      },
      "9": {
        start: {
          line: 16,
          column: 20
        },
        end: {
          line: 16,
          column: 107
        }
      },
      "10": {
        start: {
          line: 17,
          column: 20
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "11": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 23,
          column: 17
        }
      },
      "12": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 94
        }
      },
      "13": {
        start: {
          line: 22,
          column: 20
        },
        end: {
          line: 22,
          column: 27
        }
      },
      "14": {
        start: {
          line: 25,
          column: 16
        },
        end: {
          line: 28,
          column: 17
        }
      },
      "15": {
        start: {
          line: 26,
          column: 20
        },
        end: {
          line: 26,
          column: 111
        }
      },
      "16": {
        start: {
          line: 27,
          column: 20
        },
        end: {
          line: 27,
          column: 27
        }
      },
      "17": {
        start: {
          line: 29,
          column: 16
        },
        end: {
          line: 32,
          column: 19
        }
      },
      "18": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 38,
          column: 19
        }
      },
      "19": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 60
        }
      },
      "20": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 61,
          column: 11
        }
      },
      "21": {
        start: {
          line: 46,
          column: 33
        },
        end: {
          line: 46,
          column: 83
        }
      },
      "22": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "23": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "24": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 23
        }
      },
      "25": {
        start: {
          line: 55,
          column: 36
        },
        end: {
          line: 55,
          column: 75
        }
      },
      "26": {
        start: {
          line: 57,
          column: 37
        },
        end: {
          line: 57,
          column: 102
        }
      },
      "27": {
        start: {
          line: 59,
          column: 34
        },
        end: {
          line: 59,
          column: 55
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 101
        }
      },
      "29": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "30": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 71,
          column: 13
        }
      },
      "31": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "32": {
        start: {
          line: 70,
          column: 16
        },
        end: {
          line: 70,
          column: 23
        }
      },
      "33": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "34": {
        start: {
          line: 74,
          column: 36
        },
        end: {
          line: 74,
          column: 96
        }
      },
      "35": {
        start: {
          line: 78,
          column: 35
        },
        end: {
          line: 78,
          column: 59
        }
      },
      "36": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "37": {
        start: {
          line: 81,
          column: 39
        },
        end: {
          line: 81,
          column: 75
        }
      },
      "38": {
        start: {
          line: 82,
          column: 38
        },
        end: {
          line: 82,
          column: 80
        }
      },
      "39": {
        start: {
          line: 83,
          column: 39
        },
        end: {
          line: 83,
          column: 69
        }
      },
      "40": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 98,
          column: 21
        }
      },
      "41": {
        start: {
          line: 85,
          column: 39
        },
        end: {
          line: 85,
          column: 58
        }
      },
      "42": {
        start: {
          line: 86,
          column: 39
        },
        end: {
          line: 86,
          column: 100
        }
      },
      "43": {
        start: {
          line: 86,
          column: 86
        },
        end: {
          line: 86,
          column: 94
        }
      },
      "44": {
        start: {
          line: 88,
          column: 38
        },
        end: {
          line: 88,
          column: 54
        }
      },
      "45": {
        start: {
          line: 89,
          column: 24
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "46": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "47": {
        start: {
          line: 94,
          column: 71
        },
        end: {
          line: 97,
          column: 25
        }
      },
      "48": {
        start: {
          line: 96,
          column: 47
        },
        end: {
          line: 96,
          column: 57
        }
      },
      "49": {
        start: {
          line: 100,
          column: 21
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "50": {
        start: {
          line: 102,
          column: 38
        },
        end: {
          line: 102,
          column: 80
        }
      },
      "51": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 107,
          column: 21
        }
      },
      "52": {
        start: {
          line: 104,
          column: 39
        },
        end: {
          line: 104,
          column: 58
        }
      },
      "53": {
        start: {
          line: 105,
          column: 38
        },
        end: {
          line: 105,
          column: 54
        }
      },
      "54": {
        start: {
          line: 106,
          column: 24
        },
        end: {
          line: 106,
          column: 49
        }
      },
      "55": {
        start: {
          line: 111,
          column: 42
        },
        end: {
          line: 113,
          column: 34
        }
      },
      "56": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 89
        }
      },
      "57": {
        start: {
          line: 114,
          column: 31
        },
        end: {
          line: 114,
          column: 74
        }
      },
      "58": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 46
        }
      },
      "59": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 122,
          column: 19
        }
      },
      "60": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 155,
          column: 11
        }
      },
      "61": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "62": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "63": {
        start: {
          line: 137,
          column: 42
        },
        end: {
          line: 137,
          column: 80
        }
      },
      "64": {
        start: {
          line: 138,
          column: 44
        },
        end: {
          line: 138,
          column: 84
        }
      },
      "65": {
        start: {
          line: 142,
          column: 38
        },
        end: {
          line: 144,
          column: 30
        }
      },
      "66": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 143,
          column: 85
        }
      },
      "67": {
        start: {
          line: 145,
          column: 27
        },
        end: {
          line: 145,
          column: 77
        }
      },
      "68": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 52
        }
      },
      "69": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 152,
          column: 19
        }
      },
      "70": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 61
        }
      },
      "71": {
        start: {
          line: 158,
          column: 24
        },
        end: {
          line: 158,
          column: 32
        }
      },
      "72": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 76
        }
      },
      "73": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 72
        }
      },
      "74": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "75": {
        start: {
          line: 164,
          column: 26
        },
        end: {
          line: 164,
          column: 42
        }
      },
      "76": {
        start: {
          line: 165,
          column: 26
        },
        end: {
          line: 165,
          column: 68
        }
      },
      "77": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 166,
          column: 74
        }
      },
      "78": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 30
        }
      },
      "79": {
        start: {
          line: 170,
          column: 8
        },
        end: {
          line: 170,
          column: 81
        }
      },
      "80": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 81
        }
      },
      "81": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 172,
          column: 81
        }
      },
      "82": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 25
        }
      },
      "83": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 177,
          column: 22
        }
      },
      "84": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 22
        }
      },
      "85": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "86": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 65
        }
      },
      "87": {
        start: {
          line: 179,
          column: 34
        },
        end: {
          line: 179,
          column: 52
        }
      },
      "88": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 38
        }
      },
      "89": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 185,
          column: 22
        }
      },
      "90": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 185,
          column: 22
        }
      },
      "91": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 36
        }
      },
      "92": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 45
        }
      },
      "93": {
        start: {
          line: 190,
          column: 0
        },
        end: {
          line: 190,
          column: 50
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 21
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 53
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 10
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 11,
            column: 55
          },
          end: {
            line: 11,
            column: 56
          }
        },
        loc: {
          start: {
            line: 11,
            column: 68
          },
          end: {
            line: 41,
            column: 9
          }
        },
        line: 11
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 67
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 43
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 55
          },
          end: {
            line: 44,
            column: 56
          }
        },
        loc: {
          start: {
            line: 44,
            column: 68
          },
          end: {
            line: 61,
            column: 9
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 63,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        loc: {
          start: {
            line: 63,
            column: 46
          },
          end: {
            line: 125,
            column: 5
          }
        },
        line: 63
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 64,
            column: 55
          },
          end: {
            line: 64,
            column: 56
          }
        },
        loc: {
          start: {
            line: 64,
            column: 68
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 64
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 86,
            column: 81
          },
          end: {
            line: 86,
            column: 82
          }
        },
        loc: {
          start: {
            line: 86,
            column: 86
          },
          end: {
            line: 86,
            column: 94
          }
        },
        line: 86
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 94,
            column: 64
          },
          end: {
            line: 94,
            column: 65
          }
        },
        loc: {
          start: {
            line: 94,
            column: 71
          },
          end: {
            line: 97,
            column: 25
          }
        },
        line: 94
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 96,
            column: 42
          },
          end: {
            line: 96,
            column: 43
          }
        },
        loc: {
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 57
          }
        },
        line: 96
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 111,
            column: 64
          },
          end: {
            line: 111,
            column: 65
          }
        },
        loc: {
          start: {
            line: 111,
            column: 76
          },
          end: {
            line: 113,
            column: 21
          }
        },
        line: 111
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 112,
            column: 71
          },
          end: {
            line: 112,
            column: 72
          }
        },
        loc: {
          start: {
            line: 112,
            column: 84
          },
          end: {
            line: 112,
            column: 87
          }
        },
        line: 112
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 65
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 126
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 127,
            column: 55
          },
          end: {
            line: 127,
            column: 56
          }
        },
        loc: {
          start: {
            line: 127,
            column: 68
          },
          end: {
            line: 155,
            column: 9
          }
        },
        line: 127
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 137,
            column: 29
          },
          end: {
            line: 137,
            column: 30
          }
        },
        loc: {
          start: {
            line: 137,
            column: 42
          },
          end: {
            line: 137,
            column: 80
          }
        },
        line: 137
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 138,
            column: 31
          },
          end: {
            line: 138,
            column: 32
          }
        },
        loc: {
          start: {
            line: 138,
            column: 44
          },
          end: {
            line: 138,
            column: 84
          }
        },
        line: 138
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 142,
            column: 60
          },
          end: {
            line: 142,
            column: 61
          }
        },
        loc: {
          start: {
            line: 142,
            column: 72
          },
          end: {
            line: 144,
            column: 17
          }
        },
        line: 142
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 143,
            column: 67
          },
          end: {
            line: 143,
            column: 68
          }
        },
        loc: {
          start: {
            line: 143,
            column: 80
          },
          end: {
            line: 143,
            column: 83
          }
        },
        line: 143
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 58
          },
          end: {
            line: 174,
            column: 5
          }
        },
        line: 157
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 163,
            column: 41
          },
          end: {
            line: 163,
            column: 42
          }
        },
        loc: {
          start: {
            line: 163,
            column: 48
          },
          end: {
            line: 167,
            column: 9
          }
        },
        line: 163
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 175,
            column: 5
          }
        },
        loc: {
          start: {
            line: 175,
            column: 23
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 175
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 179,
            column: 29
          },
          end: {
            line: 179,
            column: 30
          }
        },
        loc: {
          start: {
            line: 179,
            column: 34
          },
          end: {
            line: 179,
            column: 52
          }
        },
        line: 179
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 22
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 183
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 18,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 18,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 15
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 23,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 23,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      },
      "2": {
        loc: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 28,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 28,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "3": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 12
          },
          end: {
            line: 71,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 116,
            column: 17
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 98,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "7": {
        loc: {
          start: {
            line: 86,
            column: 39
          },
          end: {
            line: 86,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 52
          },
          end: {
            line: 86,
            column: 95
          }
        }, {
          start: {
            line: 86,
            column: 98
          },
          end: {
            line: 86,
            column: 100
          }
        }],
        line: 86
      },
      "8": {
        loc: {
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 92,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 24
          },
          end: {
            line: 92,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 47
          },
          end: {
            line: 96,
            column: 51
          }
        }, {
          start: {
            line: 96,
            column: 55
          },
          end: {
            line: 96,
            column: 57
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: 109,
            column: 21
          },
          end: {
            line: 116,
            column: 17
          }
        }],
        line: 100
      },
      "11": {
        loc: {
          start: {
            line: 103,
            column: 20
          },
          end: {
            line: 107,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 103,
            column: 20
          },
          end: {
            line: 107,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 103
      },
      "12": {
        loc: {
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 177,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 8
          },
          end: {
            line: 177,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "13": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 26
          }
        }, {
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 176,
            column: 49
          }
        }],
        line: 176
      },
      "14": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "15": {
        loc: {
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 185,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 8
          },
          end: {
            line: 185,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/CustomBlockRenderer.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/presentation/renderers/CustomBlockRenderer.ts"],
      sourcesContent: ["import { App, TFile } from 'obsidian';\nimport { CustomBlockConfig } from '../../domain/entities/LayoutBlock';\n\nexport class CustomBlockRenderer {\n    constructor(private app: App) {}\n\n    async render(\n        container: HTMLElement,\n        config: any,\n        file: TFile,\n        frontmatter: any,\n        dv: any\n    ): Promise<void> {\n        const customConfig = config as CustomBlockConfig;\n        \n        try {\n            // Option 1: Render from template file\n            if (customConfig.templatePath) {\n                await this.renderTemplate(container, customConfig.templatePath, file, frontmatter, dv);\n                return;\n            }\n            \n            // Option 2: Execute Dataview query\n            if (customConfig.dataviewQuery) {\n                await this.renderDataviewQuery(container, customConfig.dataviewQuery, dv);\n                return;\n            }\n            \n            // Option 3: Execute custom script\n            if (customConfig.customScript) {\n                await this.renderCustomScript(container, customConfig.customScript, file, frontmatter, dv);\n                return;\n            }\n            \n            container.createEl('p', {\n                text: 'Custom block has no content configured',\n                cls: 'exocortex-empty'\n            });\n            \n        } catch (error) {\n            container.createEl('p', {\n                text: `Error rendering custom block: ${error}`,\n                cls: 'exocortex-error'\n            });\n            console.error('Custom block error:', error);\n        }\n    }\n\n    private async renderTemplate(\n        container: HTMLElement,\n        templatePath: string,\n        file: TFile,\n        frontmatter: any,\n        dv: any\n    ): Promise<void> {\n        // Find template file\n        const templateFile = this.app.vault.getAbstractFileByPath(templatePath);\n        \n        if (!(templateFile instanceof TFile)) {\n            container.createEl('p', {\n                text: `Template not found: ${templatePath}`,\n                cls: 'exocortex-error'\n            });\n            return;\n        }\n        \n        // Read template content\n        const templateContent = await this.app.vault.read(templateFile);\n        \n        // Process template variables\n        const processedContent = this.processTemplateVariables(\n            templateContent,\n            file,\n            frontmatter\n        );\n        \n        // Render as markdown\n        const tempContainer = container.createDiv();\n        await (this.app as any).markdown.renderMarkdown(\n            processedContent,\n            tempContainer,\n            file.path,\n            null\n        );\n    }\n\n    private async renderDataviewQuery(\n        container: HTMLElement,\n        query: string,\n        dv: any\n    ): Promise<void> {\n        if (!dv) {\n            container.createEl('p', {\n                text: 'Dataview is not available',\n                cls: 'exocortex-error'\n            });\n            return;\n        }\n        \n        try {\n            // Create a wrapper for Dataview output\n            const dvContainer = container.createDiv({ cls: 'exocortex-dataview-container' });\n            \n            // Execute the query\n            // Note: This is a simplified version. Real implementation would need\n            // to properly integrate with Dataview API\n            const queryLines = query.trim().split('\\n');\n            \n            if (queryLines[0].startsWith('table')) {\n                // Parse table query\n                const tableMatch = query.match(/table\\s+(.+?)\\s+from/s);\n                const fromMatch = query.match(/from\\s+(.+?)(?:\\s+where|$)/s);\n                const whereMatch = query.match(/where\\s+(.+?)$/s);\n                \n                if (fromMatch) {\n                    const source = fromMatch[1].trim();\n                    const fields = tableMatch ? tableMatch[1].split(',').map(f => f.trim()) : [];\n                    \n                    // Use Dataview API to execute query\n                    const pages = dv.pages(source);\n                    \n                    if (whereMatch) {\n                        // Apply where clause (simplified)\n                        // In real implementation, would need proper expression evaluation\n                    }\n                    \n                    // Render table\n                    dv.table(['File', ...fields], \n                        pages.map((p: any) => [\n                            p.file.link,\n                            ...fields.map(f => p[f] || '')\n                        ])\n                    );\n                }\n            } else if (queryLines[0].startsWith('list')) {\n                // Parse list query\n                const fromMatch = query.match(/from\\s+(.+?)(?:\\s+where|$)/s);\n                \n                if (fromMatch) {\n                    const source = fromMatch[1].trim();\n                    const pages = dv.pages(source);\n                    dv.list(pages.file.link);\n                }\n            } else {\n                // Try to execute as raw JavaScript\n                const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n                const fn = new AsyncFunction('dv', 'container', query);\n                await fn(dv, dvContainer);\n            }\n        } catch (error) {\n            container.createEl('p', {\n                text: `Dataview query error: ${error}`,\n                cls: 'exocortex-error'\n            });\n        }\n    }\n\n    private async renderCustomScript(\n        container: HTMLElement,\n        script: string,\n        file: TFile,\n        frontmatter: any,\n        dv: any\n    ): Promise<void> {\n        try {\n            // Create a sandboxed context for the script\n            const context = {\n                app: this.app,\n                file,\n                frontmatter,\n                dv,\n                container,\n                console: {\n                    log: (...args: any[]) => console.log('[Custom Block]', ...args),\n                    error: (...args: any[]) => console.error('[Custom Block]', ...args)\n                }\n            };\n            \n            // Execute the script in a controlled way\n            const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n            const fn = new AsyncFunction(\n                ...Object.keys(context),\n                script\n            );\n            \n            await fn(...Object.values(context));\n            \n        } catch (error) {\n            container.createEl('p', {\n                text: `Script execution error: ${error}`,\n                cls: 'exocortex-error'\n            });\n            console.error('Custom script error:', error);\n        }\n    }\n\n    private processTemplateVariables(\n        template: string,\n        file: TFile,\n        frontmatter: any\n    ): string {\n        let processed = template;\n        \n        // Replace file variables\n        processed = processed.replace(/\\{\\{file\\.name\\}\\}/g, file.basename);\n        processed = processed.replace(/\\{\\{file\\.path\\}\\}/g, file.path);\n        \n        // Replace frontmatter variables\n        Object.keys(frontmatter).forEach(key => {\n            const value = frontmatter[key];\n            const regex = new RegExp(`\\\\{\\\\{fm\\\\.${key}\\\\}\\\\}`, 'g');\n            processed = processed.replace(regex, this.formatValue(value));\n        });\n        \n        // Replace date variables\n        const now = new Date();\n        processed = processed.replace(/\\{\\{date\\}\\}/g, now.toLocaleDateString());\n        processed = processed.replace(/\\{\\{time\\}\\}/g, now.toLocaleTimeString());\n        processed = processed.replace(/\\{\\{datetime\\}\\}/g, now.toLocaleString());\n        \n        return processed;\n    }\n\n    private formatValue(value: any): string {\n        if (value === null || value === undefined) return '';\n        \n        if (Array.isArray(value)) {\n            return value.map(v => this.cleanValue(v)).join(', ');\n        }\n        \n        return this.cleanValue(value);\n    }\n\n    private cleanValue(value: any): string {\n        if (!value) return '';\n        const str = value.toString();\n        return str.replace(/\\[\\[|\\]\\]/g, '');\n    }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "701ff5e3317901f8f580dfa467ea92e507e93b3b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_fo046xlkg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_fo046xlkg();
cov_fo046xlkg().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_fo046xlkg().s[1]++;
exports.CustomBlockRenderer = void 0;
const tslib_1 =
/* istanbul ignore next */
(cov_fo046xlkg().s[2]++, require("tslib"));
const obsidian_1 =
/* istanbul ignore next */
(cov_fo046xlkg().s[3]++, require("obsidian"));
class CustomBlockRenderer {
  constructor(app) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[0]++;
    cov_fo046xlkg().s[4]++;
    this.app = app;
  }
  render(container, config, file, frontmatter, dv) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[1]++;
    cov_fo046xlkg().s[5]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_fo046xlkg().f[2]++;
      const customConfig =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[6]++, config);
      /* istanbul ignore next */
      cov_fo046xlkg().s[7]++;
      try {
        /* istanbul ignore next */
        cov_fo046xlkg().s[8]++;
        // Option 1: Render from template file
        if (customConfig.templatePath) {
          /* istanbul ignore next */
          cov_fo046xlkg().b[0][0]++;
          cov_fo046xlkg().s[9]++;
          yield this.renderTemplate(container, customConfig.templatePath, file, frontmatter, dv);
          /* istanbul ignore next */
          cov_fo046xlkg().s[10]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_fo046xlkg().b[0][1]++;
        }
        // Option 2: Execute Dataview query
        cov_fo046xlkg().s[11]++;
        if (customConfig.dataviewQuery) {
          /* istanbul ignore next */
          cov_fo046xlkg().b[1][0]++;
          cov_fo046xlkg().s[12]++;
          yield this.renderDataviewQuery(container, customConfig.dataviewQuery, dv);
          /* istanbul ignore next */
          cov_fo046xlkg().s[13]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_fo046xlkg().b[1][1]++;
        }
        // Option 3: Execute custom script
        cov_fo046xlkg().s[14]++;
        if (customConfig.customScript) {
          /* istanbul ignore next */
          cov_fo046xlkg().b[2][0]++;
          cov_fo046xlkg().s[15]++;
          yield this.renderCustomScript(container, customConfig.customScript, file, frontmatter, dv);
          /* istanbul ignore next */
          cov_fo046xlkg().s[16]++;
          return;
        } else
        /* istanbul ignore next */
        {
          cov_fo046xlkg().b[2][1]++;
        }
        cov_fo046xlkg().s[17]++;
        container.createEl('p', {
          text: 'Custom block has no content configured',
          cls: 'exocortex-empty'
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_fo046xlkg().s[18]++;
        container.createEl('p', {
          text: `Error rendering custom block: ${error}`,
          cls: 'exocortex-error'
        });
        /* istanbul ignore next */
        cov_fo046xlkg().s[19]++;
        console.error('Custom block error:', error);
      }
    });
  }
  renderTemplate(container, templatePath, file, frontmatter, dv) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[3]++;
    cov_fo046xlkg().s[20]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_fo046xlkg().f[4]++;
      // Find template file
      const templateFile =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[21]++, this.app.vault.getAbstractFileByPath(templatePath));
      /* istanbul ignore next */
      cov_fo046xlkg().s[22]++;
      if (!(templateFile instanceof obsidian_1.TFile)) {
        /* istanbul ignore next */
        cov_fo046xlkg().b[3][0]++;
        cov_fo046xlkg().s[23]++;
        container.createEl('p', {
          text: `Template not found: ${templatePath}`,
          cls: 'exocortex-error'
        });
        /* istanbul ignore next */
        cov_fo046xlkg().s[24]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_fo046xlkg().b[3][1]++;
      }
      // Read template content
      const templateContent =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[25]++, yield this.app.vault.read(templateFile));
      // Process template variables
      const processedContent =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[26]++, this.processTemplateVariables(templateContent, file, frontmatter));
      // Render as markdown
      const tempContainer =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[27]++, container.createDiv());
      /* istanbul ignore next */
      cov_fo046xlkg().s[28]++;
      yield this.app.markdown.renderMarkdown(processedContent, tempContainer, file.path, null);
    });
  }
  renderDataviewQuery(container, query, dv) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[5]++;
    cov_fo046xlkg().s[29]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_fo046xlkg().f[6]++;
      cov_fo046xlkg().s[30]++;
      if (!dv) {
        /* istanbul ignore next */
        cov_fo046xlkg().b[4][0]++;
        cov_fo046xlkg().s[31]++;
        container.createEl('p', {
          text: 'Dataview is not available',
          cls: 'exocortex-error'
        });
        /* istanbul ignore next */
        cov_fo046xlkg().s[32]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_fo046xlkg().b[4][1]++;
      }
      cov_fo046xlkg().s[33]++;
      try {
        // Create a wrapper for Dataview output
        const dvContainer =
        /* istanbul ignore next */
        (cov_fo046xlkg().s[34]++, container.createDiv({
          cls: 'exocortex-dataview-container'
        }));
        // Execute the query
        // Note: This is a simplified version. Real implementation would need
        // to properly integrate with Dataview API
        const queryLines =
        /* istanbul ignore next */
        (cov_fo046xlkg().s[35]++, query.trim().split('\n'));
        /* istanbul ignore next */
        cov_fo046xlkg().s[36]++;
        if (queryLines[0].startsWith('table')) {
          /* istanbul ignore next */
          cov_fo046xlkg().b[5][0]++;
          // Parse table query
          const tableMatch =
          /* istanbul ignore next */
          (cov_fo046xlkg().s[37]++, query.match(/table\s+(.+?)\s+from/s));
          const fromMatch =
          /* istanbul ignore next */
          (cov_fo046xlkg().s[38]++, query.match(/from\s+(.+?)(?:\s+where|$)/s));
          const whereMatch =
          /* istanbul ignore next */
          (cov_fo046xlkg().s[39]++, query.match(/where\s+(.+?)$/s));
          /* istanbul ignore next */
          cov_fo046xlkg().s[40]++;
          if (fromMatch) {
            /* istanbul ignore next */
            cov_fo046xlkg().b[6][0]++;
            const source =
            /* istanbul ignore next */
            (cov_fo046xlkg().s[41]++, fromMatch[1].trim());
            const fields =
            /* istanbul ignore next */
            (cov_fo046xlkg().s[42]++, tableMatch ?
            /* istanbul ignore next */
            (cov_fo046xlkg().b[7][0]++, tableMatch[1].split(',').map(f => {
              /* istanbul ignore next */
              cov_fo046xlkg().f[7]++;
              cov_fo046xlkg().s[43]++;
              return f.trim();
            })) :
            /* istanbul ignore next */
            (cov_fo046xlkg().b[7][1]++, []));
            // Use Dataview API to execute query
            const pages =
            /* istanbul ignore next */
            (cov_fo046xlkg().s[44]++, dv.pages(source));
            /* istanbul ignore next */
            cov_fo046xlkg().s[45]++;
            if (whereMatch) {
              /* istanbul ignore next */
              cov_fo046xlkg().b[8][0]++;
            } // Apply where clause (simplified)
            // In real implementation, would need proper expression evaluation
            else
            /* istanbul ignore next */
            {
              cov_fo046xlkg().b[8][1]++;
            }
            // Render table
            cov_fo046xlkg().s[46]++;
            dv.table(['File', ...fields], pages.map(p => {
              /* istanbul ignore next */
              cov_fo046xlkg().f[8]++;
              cov_fo046xlkg().s[47]++;
              return [p.file.link, ...fields.map(f => {
                /* istanbul ignore next */
                cov_fo046xlkg().f[9]++;
                cov_fo046xlkg().s[48]++;
                return /* istanbul ignore next */(cov_fo046xlkg().b[9][0]++, p[f]) ||
                /* istanbul ignore next */
                (cov_fo046xlkg().b[9][1]++, '');
              })];
            }));
          } else
          /* istanbul ignore next */
          {
            cov_fo046xlkg().b[6][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_fo046xlkg().b[5][1]++;
          cov_fo046xlkg().s[49]++;
          if (queryLines[0].startsWith('list')) {
            /* istanbul ignore next */
            cov_fo046xlkg().b[10][0]++;
            // Parse list query
            const fromMatch =
            /* istanbul ignore next */
            (cov_fo046xlkg().s[50]++, query.match(/from\s+(.+?)(?:\s+where|$)/s));
            /* istanbul ignore next */
            cov_fo046xlkg().s[51]++;
            if (fromMatch) {
              /* istanbul ignore next */
              cov_fo046xlkg().b[11][0]++;
              const source =
              /* istanbul ignore next */
              (cov_fo046xlkg().s[52]++, fromMatch[1].trim());
              const pages =
              /* istanbul ignore next */
              (cov_fo046xlkg().s[53]++, dv.pages(source));
              /* istanbul ignore next */
              cov_fo046xlkg().s[54]++;
              dv.list(pages.file.link);
            } else
            /* istanbul ignore next */
            {
              cov_fo046xlkg().b[11][1]++;
            }
          } else {
            /* istanbul ignore next */
            cov_fo046xlkg().b[10][1]++;
            // Try to execute as raw JavaScript
            const AsyncFunction =
            /* istanbul ignore next */
            (cov_fo046xlkg().s[55]++, Object.getPrototypeOf(function () {
              /* istanbul ignore next */
              cov_fo046xlkg().f[10]++;
              cov_fo046xlkg().s[56]++;
              return tslib_1.__awaiter(this, void 0, void 0, function* () {
                /* istanbul ignore next */
                cov_fo046xlkg().f[11]++;
              });
            }).constructor);
            const fn =
            /* istanbul ignore next */
            (cov_fo046xlkg().s[57]++, new AsyncFunction('dv', 'container', query));
            /* istanbul ignore next */
            cov_fo046xlkg().s[58]++;
            yield fn(dv, dvContainer);
          }
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_fo046xlkg().s[59]++;
        container.createEl('p', {
          text: `Dataview query error: ${error}`,
          cls: 'exocortex-error'
        });
      }
    });
  }
  renderCustomScript(container, script, file, frontmatter, dv) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[12]++;
    cov_fo046xlkg().s[60]++;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
      /* istanbul ignore next */
      cov_fo046xlkg().f[13]++;
      cov_fo046xlkg().s[61]++;
      try {
        // Create a sandboxed context for the script
        const context =
        /* istanbul ignore next */
        (cov_fo046xlkg().s[62]++, {
          app: this.app,
          file,
          frontmatter,
          dv,
          container,
          console: {
            log: (...args) => {
              /* istanbul ignore next */
              cov_fo046xlkg().f[14]++;
              cov_fo046xlkg().s[63]++;
              return console.log('[Custom Block]', ...args);
            },
            error: (...args) => {
              /* istanbul ignore next */
              cov_fo046xlkg().f[15]++;
              cov_fo046xlkg().s[64]++;
              return console.error('[Custom Block]', ...args);
            }
          }
        });
        // Execute the script in a controlled way
        const AsyncFunction =
        /* istanbul ignore next */
        (cov_fo046xlkg().s[65]++, Object.getPrototypeOf(function () {
          /* istanbul ignore next */
          cov_fo046xlkg().f[16]++;
          cov_fo046xlkg().s[66]++;
          return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /* istanbul ignore next */
            cov_fo046xlkg().f[17]++;
          });
        }).constructor);
        const fn =
        /* istanbul ignore next */
        (cov_fo046xlkg().s[67]++, new AsyncFunction(...Object.keys(context), script));
        /* istanbul ignore next */
        cov_fo046xlkg().s[68]++;
        yield fn(...Object.values(context));
      } catch (error) {
        /* istanbul ignore next */
        cov_fo046xlkg().s[69]++;
        container.createEl('p', {
          text: `Script execution error: ${error}`,
          cls: 'exocortex-error'
        });
        /* istanbul ignore next */
        cov_fo046xlkg().s[70]++;
        console.error('Custom script error:', error);
      }
    });
  }
  processTemplateVariables(template, file, frontmatter) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[18]++;
    let processed =
    /* istanbul ignore next */
    (cov_fo046xlkg().s[71]++, template);
    // Replace file variables
    /* istanbul ignore next */
    cov_fo046xlkg().s[72]++;
    processed = processed.replace(/\{\{file\.name\}\}/g, file.basename);
    /* istanbul ignore next */
    cov_fo046xlkg().s[73]++;
    processed = processed.replace(/\{\{file\.path\}\}/g, file.path);
    // Replace frontmatter variables
    /* istanbul ignore next */
    cov_fo046xlkg().s[74]++;
    Object.keys(frontmatter).forEach(key => {
      /* istanbul ignore next */
      cov_fo046xlkg().f[19]++;
      const value =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[75]++, frontmatter[key]);
      const regex =
      /* istanbul ignore next */
      (cov_fo046xlkg().s[76]++, new RegExp(`\\{\\{fm\\.${key}\\}\\}`, 'g'));
      /* istanbul ignore next */
      cov_fo046xlkg().s[77]++;
      processed = processed.replace(regex, this.formatValue(value));
    });
    // Replace date variables
    const now =
    /* istanbul ignore next */
    (cov_fo046xlkg().s[78]++, new Date());
    /* istanbul ignore next */
    cov_fo046xlkg().s[79]++;
    processed = processed.replace(/\{\{date\}\}/g, now.toLocaleDateString());
    /* istanbul ignore next */
    cov_fo046xlkg().s[80]++;
    processed = processed.replace(/\{\{time\}\}/g, now.toLocaleTimeString());
    /* istanbul ignore next */
    cov_fo046xlkg().s[81]++;
    processed = processed.replace(/\{\{datetime\}\}/g, now.toLocaleString());
    /* istanbul ignore next */
    cov_fo046xlkg().s[82]++;
    return processed;
  }
  formatValue(value) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[20]++;
    cov_fo046xlkg().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_fo046xlkg().b[13][0]++, value === null) ||
    /* istanbul ignore next */
    (cov_fo046xlkg().b[13][1]++, value === undefined)) {
      /* istanbul ignore next */
      cov_fo046xlkg().b[12][0]++;
      cov_fo046xlkg().s[84]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_fo046xlkg().b[12][1]++;
    }
    cov_fo046xlkg().s[85]++;
    if (Array.isArray(value)) {
      /* istanbul ignore next */
      cov_fo046xlkg().b[14][0]++;
      cov_fo046xlkg().s[86]++;
      return value.map(v => {
        /* istanbul ignore next */
        cov_fo046xlkg().f[21]++;
        cov_fo046xlkg().s[87]++;
        return this.cleanValue(v);
      }).join(', ');
    } else
    /* istanbul ignore next */
    {
      cov_fo046xlkg().b[14][1]++;
    }
    cov_fo046xlkg().s[88]++;
    return this.cleanValue(value);
  }
  cleanValue(value) {
    /* istanbul ignore next */
    cov_fo046xlkg().f[22]++;
    cov_fo046xlkg().s[89]++;
    if (!value) {
      /* istanbul ignore next */
      cov_fo046xlkg().b[15][0]++;
      cov_fo046xlkg().s[90]++;
      return '';
    } else
    /* istanbul ignore next */
    {
      cov_fo046xlkg().b[15][1]++;
    }
    const str =
    /* istanbul ignore next */
    (cov_fo046xlkg().s[91]++, value.toString());
    /* istanbul ignore next */
    cov_fo046xlkg().s[92]++;
    return str.replace(/\[\[|\]\]/g, '');
  }
}
/* istanbul ignore next */
cov_fo046xlkg().s[93]++;
exports.CustomBlockRenderer = CustomBlockRenderer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,