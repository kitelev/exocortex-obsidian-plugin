0d589b0b187802ef2a33fb44ed9fc9bf
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock the ClassLayout.create static method
jest.mock('../../../../src/domain/entities/ClassLayout', () => {
    return {
        ClassLayout: {
            create: jest.fn().mockImplementation((params) => {
                const mockClassLayout = {
                    id: params.id || { equals: jest.fn(), toString: () => 'test-id' },
                    targetClass: params.targetClass || { equals: jest.fn(), value: 'TestClass' },
                    isEnabled: params.isEnabled !== undefined ? params.isEnabled : true,
                    priority: params.priority !== undefined ? params.priority : 1,
                    blocks: params.blocks || []
                };
                return {
                    isSuccess: true,
                    getValue: () => mockClassLayout
                };
            })
        }
    };
});
const obsidian_1 = require("obsidian");
const ObsidianClassLayoutRepository_1 = require("../../../../src/infrastructure/repositories/ObsidianClassLayoutRepository");
const ClassName_1 = require("../../../../src/domain/value-objects/ClassName");
const AssetId_1 = require("../../../../src/domain/value-objects/AssetId");
describe('ObsidianClassLayoutRepository', () => {
    let repository;
    let mockApp;
    let mockVault;
    let mockMetadataCache;
    beforeEach(() => {
        // Reset time
        jest.useFakeTimers();
        jest.setSystemTime(new Date('2024-01-01'));
        // Create mock vault
        mockVault = {
            getFiles: jest.fn(),
            getAbstractFileByPath: jest.fn(),
            create: jest.fn(),
            modify: jest.fn(),
            delete: jest.fn()
        };
        // Create mock metadata cache
        mockMetadataCache = {
            getFileCache: jest.fn()
        };
        // Create mock app
        mockApp = {
            vault: mockVault,
            metadataCache: mockMetadataCache
        };
        repository = new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(mockApp, 'test-layouts');
    });
    afterEach(() => {
        jest.clearAllMocks();
        jest.useRealTimers();
    });
    describe('Constructor and Initialization', () => {
        it('should initialize with default layouts folder path', () => {
            const repo = new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(mockApp);
            expect(repo).toBeInstanceOf(ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository);
        });
        it('should initialize with custom layouts folder path', () => {
            const repo = new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(mockApp, 'custom-layouts');
            expect(repo).toBeInstanceOf(ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository);
        });
        it('should handle null app gracefully', () => {
            expect(() => new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(null)).not.toThrow();
        });
    });
    describe('Cache Management', () => {
        beforeEach(() => {
            mockVault.getFiles.mockReturnValue([]);
        });
        it('should load cache on first access', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getFiles.mockReturnValue([]);
            yield repository.findAll();
            expect(mockVault.getFiles).toHaveBeenCalled();
        }));
        it('should use cache within TTL period', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield repository.findAll();
            // Reset mock call count
            mockVault.getFiles.mockClear();
            // Call again immediately
            yield repository.findAll();
            // Should not call vault again
            expect(mockVault.getFiles).not.toHaveBeenCalled();
        }));
        it('should refresh cache after TTL expires', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield repository.findAll();
            // Advance time beyond TTL (30 seconds)
            jest.advanceTimersByTime(35000);
            mockVault.getFiles.mockClear();
            yield repository.findAll();
            expect(mockVault.getFiles).toHaveBeenCalled();
        }));
        it('should clear cache on loadLayoutsFromFiles', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // This test verifies that cache behaves properly
            // After implementation changes, manually added layouts are preserved
            // but the cache refresh mechanism still works
            // Force initial load
            yield repository.findAll();
            expect(mockVault.getFiles).toHaveBeenCalled();
            // Clear mock call count
            mockVault.getFiles.mockClear();
            // Advance time to trigger refresh
            jest.advanceTimersByTime(35000);
            // Create new repository without manually added layouts to test file loading
            const freshRepository = new ObsidianClassLayoutRepository_1.ObsidianClassLayoutRepository(mockApp, 'test-layouts');
            yield freshRepository.findAll();
            // Should call getFiles for fresh repository
            expect(mockVault.getFiles).toHaveBeenCalled();
        }));
    });
    describe('findByClass', () => {
        const mockClassName = ClassName_1.ClassName.create('TestClass').getValue();
        beforeEach(() => {
            setupMockLayoutFiles();
        });
        it('should find layouts for specific class', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield repository.findByClass(mockClassName);
            expect(result).toBeDefined();
            expect(Array.isArray(result)).toBe(true);
        }));
        it('should return only enabled layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield repository.findByClass(mockClassName);
            result.forEach(layout => {
                expect(layout.isEnabled).toBe(true);
            });
        }));
        it('should sort layouts by priority (higher first)', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const layout1 = createMockLayout('id1', mockClassName, true, 1);
            const layout2 = createMockLayout('id2', mockClassName, true, 3);
            const layout3 = createMockLayout('id3', mockClassName, true, 2);
            yield repository.save(layout1);
            yield repository.save(layout2);
            yield repository.save(layout3);
            const result = yield repository.findByClass(mockClassName);
            // Should be sorted by priority: 3, 2, 1
            expect(result[0].priority).toBe(3);
            expect(result[1].priority).toBe(2);
            expect(result[2].priority).toBe(1);
        }));
        it('should return empty array for non-existent class', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const nonExistentClass = ClassName_1.ClassName.create('NonExistent').getValue();
            const result = yield repository.findByClass(nonExistentClass);
            expect(result).toEqual([]);
        }));
        it('should filter out disabled layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const enabledLayout = createMockLayout('enabled', mockClassName, true);
            const disabledLayout = createMockLayout('disabled', mockClassName, false);
            yield repository.save(enabledLayout);
            yield repository.save(disabledLayout);
            const result = yield repository.findByClass(mockClassName);
            expect(result).toHaveLength(1);
            expect(result[0].isEnabled).toBe(true);
        }));
    });
    describe('findById', () => {
        const mockId = AssetId_1.AssetId.create('test-id').getValue();
        const mockClassName = ClassName_1.ClassName.create('TestClass').getValue();
        beforeEach(() => {
            setupMockLayoutFiles();
        });
        it('should find layout by ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const layout = createMockLayout('test-id', mockClassName);
            yield repository.save(layout);
            const result = yield repository.findById(mockId);
            expect(result).toBeDefined();
            expect(result === null || result === void 0 ? void 0 : result.id.equals(mockId)).toBe(true);
        }));
        it('should return null for non-existent ID', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const nonExistentId = AssetId_1.AssetId.create('non-existent').getValue();
            const result = yield repository.findById(nonExistentId);
            expect(result).toBeNull();
        }));
    });
    describe('findAll', () => {
        beforeEach(() => {
            setupMockLayoutFiles();
        });
        it('should return all layouts from cache', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const className1 = ClassName_1.ClassName.create('Class1').getValue();
            const className2 = ClassName_1.ClassName.create('Class2').getValue();
            yield repository.save(createMockLayout('id1', className1));
            yield repository.save(createMockLayout('id2', className2));
            const result = yield repository.findAll();
            expect(result).toHaveLength(2);
        }));
        it('should return empty array when no layouts exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield repository.findAll();
            expect(result).toEqual([]);
        }));
    });
    describe('findEnabledByClass', () => {
        const mockClassName = ClassName_1.ClassName.create('TestClass').getValue();
        it('should return only enabled layouts', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const enabledLayout = createMockLayout('enabled', mockClassName, true);
            const disabledLayout = createMockLayout('disabled', mockClassName, false);
            yield repository.save(enabledLayout);
            yield repository.save(disabledLayout);
            const result = yield repository.findEnabledByClass(mockClassName);
            expect(result).toHaveLength(1);
            expect(result[0].isEnabled).toBe(true);
        }));
        it('should return empty array when no enabled layouts exist', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const disabledLayout = createMockLayout('disabled', mockClassName, false);
            yield repository.save(disabledLayout);
            const result = yield repository.findEnabledByClass(mockClassName);
            expect(result).toEqual([]);
        }));
    });
    describe('save', () => {
        const mockClassName = ClassName_1.ClassName.create('TestClass').getValue();
        it('should save new layout to cache', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const layout = createMockLayout('new-id', mockClassName);
            yield repository.save(layout);
            const result = yield repository.findById(layout.id);
            expect(result).toBe(layout);
        }));
        it('should update existing layout in cache', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const layout = createMockLayout('existing-id', mockClassName);
            yield repository.save(layout);
            const updatedLayout = Object.assign(Object.assign({}, layout), { priority: 5 });
            yield repository.save(updatedLayout);
            const result = yield repository.findById(layout.id);
            expect(result === null || result === void 0 ? void 0 : result.priority).toBe(5);
        }));
        it('should maintain cache structure by class name', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const class1 = ClassName_1.ClassName.create('Class1').getValue();
            const class2 = ClassName_1.ClassName.create('Class2').getValue();
            yield repository.save(createMockLayout('id1', class1));
            yield repository.save(createMockLayout('id2', class2));
            const class1Layouts = yield repository.findByClass(class1);
            const class2Layouts = yield repository.findByClass(class2);
            expect(class1Layouts).toHaveLength(1);
            expect(class2Layouts).toHaveLength(1);
        }));
    });
    describe('delete', () => {
        const mockClassName = ClassName_1.ClassName.create('TestClass').getValue();
        it('should remove layout from cache', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const layout = createMockLayout('to-delete', mockClassName);
            yield repository.save(layout);
            yield repository.delete(layout.id);
            const result = yield repository.findById(layout.id);
            expect(result).toBeNull();
        }));
        it('should handle deletion of non-existent layout gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const nonExistentId = AssetId_1.AssetId.create('non-existent').getValue();
            yield expect(repository.delete(nonExistentId)).resolves.not.toThrow();
        }));
        it('should maintain other layouts after deletion', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const layout1 = createMockLayout('keep', mockClassName);
            const layout2 = createMockLayout('delete', mockClassName);
            yield repository.save(layout1);
            yield repository.save(layout2);
            yield repository.delete(layout2.id);
            const remaining = yield repository.findByClass(mockClassName);
            expect(remaining).toHaveLength(1);
            expect(remaining[0].id).toBe(layout1.id);
        }));
    });
    describe('Layout File Parsing', () => {
        const mockFile = new obsidian_1.TFile('layouts/Layout - TestClass.md');
        it('should identify layout files correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Instance_class': '[[ui__ClassLayout]]',
                    'ui__ClassLayout_targetClass': '[[TestClass]]'
                }
            });
            yield repository.findAll();
            expect(mockMetadataCache.getFileCache).toHaveBeenCalledWith(mockFile);
        }));
        it('should parse layout blocks correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockBlocks = [
                {
                    id: 'properties-block',
                    type: 'properties',
                    title: 'Properties',
                    order: 0,
                    config: {
                        includedProperties: ['name', 'description'],
                        editableProperties: ['name']
                    },
                    isVisible: true
                },
                {
                    id: 'query-block',
                    type: 'query',
                    title: 'Related Items',
                    order: 1,
                    config: {
                        query: 'SELECT * WHERE { ?s ?p ?o }',
                        maxResults: 10
                    }
                }
            ];
            mockVault.getFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Instance_class': 'ui__ClassLayout',
                    'ui__ClassLayout_targetClass': 'TestClass',
                    'ui__ClassLayout_blocks': mockBlocks,
                    'exo__Asset_uid': 'test-uid'
                }
            });
            yield repository.findAll();
            // Verify ClassLayout.create was called with parsed blocks
            const { ClassLayout } = require('../../../../src/domain/entities/ClassLayout');
            expect(ClassLayout.create).toHaveBeenCalledWith(expect.objectContaining({
                blocks: expect.arrayContaining([
                    expect.objectContaining({
                        id: 'properties-block',
                        type: 'properties',
                        title: 'Properties'
                    })
                ])
            }));
        }));
        it('should handle missing frontmatter gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockReturnValue(null);
            const result = yield repository.findAll();
            expect(result).toEqual([]);
        }));
        it('should filter out non-layout files', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const nonLayoutFile = new obsidian_1.TFile('regular-note.md');
            mockVault.getFiles.mockReturnValue([nonLayoutFile]);
            mockMetadataCache.getFileCache.mockReturnValue({
                frontmatter: {
                    'exo__Instance_class': 'SomeOtherClass'
                }
            });
            const result = yield repository.findAll();
            expect(result).toEqual([]);
        }));
        it('should handle different block types correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const blockConfigs = {
                query: {
                    type: 'query',
                    query: 'SELECT * WHERE { ?s ?p ?o }',
                    maxResults: 50
                },
                properties: {
                    type: 'properties',
                    includedProperties: ['name'],
                    editableProperties: []
                },
                relations: {
                    type: 'relations',
                    relationProperty: 'relatedTo',
                    showBacklinks: true
                },
                backlinks: {
                    type: 'backlinks',
                    maxResults: 25
                },
                custom: {
                    type: 'custom',
                    templatePath: 'templates/custom.md'
                }
            };
            Object.entries(blockConfigs).forEach(([type, config]) => {
                const result = repository.parseBlockConfig(type, config);
                expect(result.type).toBe(type);
            });
        }));
    });
    describe('Error Handling and Edge Cases', () => {
        it('should handle vault getFiles error gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockVault.getFiles.mockImplementation(() => {
                throw new Error('Vault error');
            });
            yield expect(repository.findAll()).rejects.toThrow('Vault error');
        }));
        it('should handle metadata cache errors gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockFile = new obsidian_1.TFile('test.md');
            mockVault.getFiles.mockReturnValue([mockFile]);
            mockMetadataCache.getFileCache.mockImplementation(() => {
                throw new Error('Metadata error');
            });
            yield expect(repository.findAll()).rejects.toThrow('Metadata error');
        }));
        it('should handle malformed block configurations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const malformedBlocks = [
                null,
                undefined,
                { /* missing required fields */},
                { id: 'test', /* missing type */ }
            ];
            const result = repository.parseBlocks(malformedBlocks);
            // Should filter out invalid blocks and assign defaults
            expect(Array.isArray(result)).toBe(true);
            result.forEach(block => {
                expect(block.id).toBeDefined();
                expect(block.type).toBeDefined();
            });
        }));
        it('should handle non-array blocks data', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = repository.parseBlocks('not-an-array');
            expect(result).toEqual([]);
        }));
        it('should handle empty or null property filters', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = repository.parsePropertyFilters(null);
            expect(result).toEqual([]);
            const result2 = repository.parsePropertyFilters('not-an-array');
            expect(result2).toEqual([]);
        }));
        it('should clean class names correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const testCases = [
                { input: '[[TestClass]]', expected: 'TestClass' },
                { input: 'TestClass', expected: 'TestClass' },
                { input: ['[[TestClass]]'], expected: 'TestClass' },
                { input: null, expected: '' },
                { input: undefined, expected: '' }
            ];
            testCases.forEach(({ input, expected }) => {
                const result = repository.cleanClassName(input);
                expect(result).toBe(expected);
            });
        }));
    });
    describe('Performance and Concurrency', () => {
        it('should handle concurrent cache access', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            setupMockLayoutFiles();
            const promises = [
                repository.findAll(),
                repository.findAll(),
                repository.findAll()
            ];
            const results = yield Promise.all(promises);
            // All should succeed and return the same structure
            results.forEach(result => {
                expect(Array.isArray(result)).toBe(true);
            });
        }));
        it('should handle concurrent save operations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const className = ClassName_1.ClassName.create('TestClass').getValue();
            const layouts = [
                createMockLayout('concurrent1', className),
                createMockLayout('concurrent2', className),
                createMockLayout('concurrent3', className)
            ];
            const promises = layouts.map(layout => repository.save(layout));
            yield Promise.all(promises);
            const result = yield repository.findByClass(className);
            expect(result).toHaveLength(3);
        }));
    });
    // Helper functions
    function createMockLayout(id, targetClass, isEnabled = true, priority = 1) {
        const assetId = {
            equals: (other) => other && other.toString && other.toString() === id,
            toString: () => id
        };
        const targetClassObject = {
            equals: (other) => other && other.value === targetClass.value,
            value: targetClass.value
        };
        return {
            id: assetId,
            targetClass: targetClassObject,
            isEnabled,
            priority,
            blocks: []
        };
    }
    function setupMockLayoutFiles() {
        mockVault.getFiles.mockReturnValue([]);
    }
    describe('Data Consistency and Validation', () => {
        it('should validate layout data consistency across operations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const className = ClassName_1.ClassName.create('ConsistencyTest').getValue();
            const originalLayout = createMockLayout('consistency-test', className, true, 5);
            originalLayout.blocks = [
                {
                    id: 'test-block',
                    type: 'properties',
                    title: 'Test Properties',
                    order: 0,
                    config: { includedProperties: ['name', 'description'] },
                    isVisible: true
                }
            ];
            // Save layout
            yield repository.save(originalLayout);
            // Retrieve and verify
            const retrieved = yield repository.findById(originalLayout.id);
            expect(retrieved).toBeDefined();
            expect(retrieved === null || retrieved === void 0 ? void 0 : retrieved.targetClass.value).toBe(className.value);
            expect(retrieved === null || retrieved === void 0 ? void 0 : retrieved.priority).toBe(5);
            expect(retrieved === null || retrieved === void 0 ? void 0 : retrieved.isEnabled).toBe(true);
            expect(retrieved === null || retrieved === void 0 ? void 0 : retrieved.blocks).toHaveLength(1);
            // Update layout
            const updatedLayout = Object.assign(Object.assign({}, originalLayout), { priority: 10, isEnabled: false });
            yield repository.save(updatedLayout);
            // Verify update
            const afterUpdate = yield repository.findById(originalLayout.id);
            expect(afterUpdate === null || afterUpdate === void 0 ? void 0 : afterUpdate.priority).toBe(10);
            expect(afterUpdate === null || afterUpdate === void 0 ? void 0 : afterUpdate.isEnabled).toBe(false);
            // Verify it doesn't appear in enabled layouts
            const enabledLayouts = yield repository.findEnabledByClass(className);
            expect(enabledLayouts).toHaveLength(0);
            // Verify it still appears in all layouts for class
            const allClassLayouts = yield repository.findByClass(className);
            expect(allClassLayouts).toHaveLength(0); // Filtered out because disabled
        }));
        it('should handle layout priority conflicts gracefully', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const className = ClassName_1.ClassName.create('PriorityTest').getValue();
            const layouts = [
                createMockLayout('priority1', className, true, 1),
                createMockLayout('priority2', className, true, 1),
                createMockLayout('priority3', className, true, 2),
                createMockLayout('priority4', className, true, 2),
                createMockLayout('priority5', className, true, 3)
            ];
            // Save all layouts
            yield Promise.all(layouts.map(layout => repository.save(layout)));
            // Retrieve sorted by priority
            const result = yield repository.findByClass(className);
            expect(result).toHaveLength(5);
            expect(result[0].priority).toBe(3); // Highest priority first
            expect(result[1].priority).toBe(2);
            expect(result[2].priority).toBe(2);
            expect(result[3].priority).toBe(1);
            expect(result[4].priority).toBe(1);
        }));
        it('should maintain data integrity during concurrent modifications', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const className = ClassName_1.ClassName.create('ConcurrentMod').getValue();
            const baseLayout = createMockLayout('concurrent-base', className, true, 1);
            // Simulate concurrent save operations without setTimeout (which doesn't work well with fake timers)
            const modifications = [
                Object.assign(Object.assign({}, baseLayout), { priority: 5 }),
                Object.assign(Object.assign({}, baseLayout), { priority: 3 }),
                Object.assign(Object.assign({}, baseLayout), { isEnabled: false }),
                Object.assign(Object.assign({}, baseLayout), { priority: 7, isEnabled: true })
            ];
            // Use Promise.resolve to create proper async behavior
            const savePromises = modifications.map((mod) => Promise.resolve().then(() => repository.save(mod)));
            yield Promise.all(savePromises);
            // Final state should reflect one of the concurrent operations
            const finalState = yield repository.findById(baseLayout.id);
            expect(finalState).toBeDefined();
            // Should have one of the expected states
            const expectedStates = modifications.map(mod => ({
                priority: mod.priority,
                isEnabled: mod.isEnabled
            }));
            const actualState = {
                priority: finalState === null || finalState === void 0 ? void 0 : finalState.priority,
                isEnabled: finalState === null || finalState === void 0 ? void 0 : finalState.isEnabled
            };
            expect(expectedStates).toContainEqual(actualState);
        }), 10000); // Add reasonable timeout
        it('should handle repository state after multiple cache refreshes', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const className = ClassName_1.ClassName.create('CacheRefreshTest').getValue();
            const persistentLayout = createMockLayout('persistent', className, true, 1);
            const transientLayout = createMockLayout('transient', className, true, 2);
            // Setup initial mock response
            mockVault.getFiles.mockReturnValue([]);
            // Save layouts to memory-only cache
            yield repository.save(persistentLayout);
            yield repository.save(transientLayout);
            // Verify initial state
            let layouts = yield repository.findByClass(className);
            expect(layouts).toHaveLength(2);
            // Force cache refresh by advancing time
            jest.advanceTimersByTime(35000);
            // Mock file system returning empty (simulating all layouts removed)
            mockVault.getFiles.mockReturnValue([]);
            layouts = yield repository.findByClass(className);
            // After implementation changes, manually added layouts are preserved
            // This reflects the new behavior where in-memory layouts persist
            expect(layouts).toHaveLength(2);
        }));
    });
    describe('Memory Management and Performance', () => {
        it('should handle large cache sizes efficiently', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Setup mock to return empty array for getFiles to avoid filter error
            mockVault.getFiles.mockReturnValue([]);
            const startTime = Date.now();
            const largeDataset = [];
            // Create large dataset
            for (let classIndex = 0; classIndex < 10; classIndex++) {
                const className = ClassName_1.ClassName.create(`Class${classIndex}`).getValue();
                for (let layoutIndex = 0; layoutIndex < 5; layoutIndex++) {
                    largeDataset.push(createMockLayout(`class${classIndex}-layout${layoutIndex}`, className, layoutIndex % 2 === 0, // Alternate enabled/disabled
                    layoutIndex + 1));
                }
            }
            // Save all layouts (50 layouts total)
            yield Promise.all(largeDataset.map(layout => repository.save(layout)));
            const saveTime = Date.now();
            // Perform various operations
            const allLayouts = yield repository.findAll();
            const class1Layouts = yield repository.findByClass(ClassName_1.ClassName.create('Class1').getValue());
            const enabledClass1 = yield repository.findEnabledByClass(ClassName_1.ClassName.create('Class1').getValue());
            const operationTime = Date.now();
            // Verify results
            expect(allLayouts).toHaveLength(50);
            expect(class1Layouts).toHaveLength(3); // Only enabled layouts (indices 0, 2, 4)
            expect(enabledClass1).toHaveLength(3);
            // Performance assertions (operations should complete reasonably quickly)
            const totalTime = operationTime - startTime;
            expect(totalTime).toBeLessThan(5000); // Should complete within 5 seconds
        }));
        it('should clean up cache efficiently during delete operations', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            // Setup mock to return empty array for getFiles to avoid filter error
            mockVault.getFiles.mockReturnValue([]);
            const className = ClassName_1.ClassName.create('CleanupTest').getValue();
            const layouts = [];
            // Create moderate dataset
            for (let i = 0; i < 20; i++) {
                layouts.push(createMockLayout(`cleanup-${i}`, className, true, i + 1));
            }
            // Save all layouts
            yield Promise.all(layouts.map(layout => repository.save(layout)));
            // Verify initial state
            let allLayouts = yield repository.findAll();
            expect(allLayouts).toHaveLength(20);
            // Delete half the layouts
            const layoutsToDelete = layouts.slice(0, 10);
            yield Promise.all(layoutsToDelete.map(layout => repository.delete(layout.id)));
            // Verify deletions
            allLayouts = yield repository.findAll();
            expect(allLayouts).toHaveLength(10);
            // Verify specific layouts are gone
            for (const deletedLayout of layoutsToDelete) {
                const found = yield repository.findById(deletedLayout.id);
                expect(found).toBeNull();
            }
            // Verify remaining layouts are still accessible
            const remainingLayouts = layouts.slice(10);
            for (const remainingLayout of remainingLayouts) {
                const found = yield repository.findById(remainingLayout.id);
                expect(found).toBe(remainingLayout);
            }
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,