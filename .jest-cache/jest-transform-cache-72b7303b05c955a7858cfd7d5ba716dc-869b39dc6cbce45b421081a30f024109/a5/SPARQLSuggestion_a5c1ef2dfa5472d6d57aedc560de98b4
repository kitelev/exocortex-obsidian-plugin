1dc757a79cc8d56835466e79664d7035
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPARQLSuggestion = exports.SuggestionType = void 0;
var SuggestionType;
(function (SuggestionType) {
    SuggestionType["KEYWORD"] = "keyword";
    SuggestionType["FUNCTION"] = "function";
    SuggestionType["PREFIX"] = "prefix";
    SuggestionType["VARIABLE"] = "variable";
    SuggestionType["PROPERTY"] = "property";
    SuggestionType["CLASS"] = "class";
    SuggestionType["NAMESPACE"] = "namespace";
    SuggestionType["OPERATOR"] = "operator";
    SuggestionType["TEMPLATE"] = "template";
})(SuggestionType = exports.SuggestionType || (exports.SuggestionType = {}));
class SPARQLSuggestion {
    constructor(id, text, insertText, type, confidence, contextualScore, metadata) {
        this.id = id;
        this.text = text;
        this.insertText = insertText;
        this.type = type;
        this.confidence = confidence;
        this.contextualScore = contextualScore;
        this.metadata = metadata;
        Object.freeze(this);
    }
    getId() {
        return this.id;
    }
    getText() {
        return this.text;
    }
    getInsertText() {
        return this.insertText;
    }
    getType() {
        return this.type;
    }
    getConfidence() {
        return this.confidence;
    }
    getContextualScore() {
        return this.contextualScore;
    }
    getMetadata() {
        return this.metadata;
    }
    calculateFinalScore(boostFactor = 1.0) {
        return (this.confidence * 0.6 + this.contextualScore * 0.4) * boostFactor;
    }
    static create(params) {
        return new SPARQLSuggestion(params.id, params.text, params.insertText || params.text, params.type, params.confidence, params.contextualScore, params.metadata);
    }
}
exports.SPARQLSuggestion = SPARQLSuggestion;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL2RvbWFpbi9hdXRvY29tcGxldGUvU1BBUlFMU3VnZ2VzdGlvbi50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFZLGNBVVg7QUFWRCxXQUFZLGNBQWM7SUFDeEIscUNBQW1CLENBQUE7SUFDbkIsdUNBQXFCLENBQUE7SUFDckIsbUNBQWlCLENBQUE7SUFDakIsdUNBQXFCLENBQUE7SUFDckIsdUNBQXFCLENBQUE7SUFDckIsaUNBQWUsQ0FBQTtJQUNmLHlDQUF1QixDQUFBO0lBQ3ZCLHVDQUFxQixDQUFBO0lBQ3JCLHVDQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFWVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQVV6QjtBQVdELE1BQWEsZ0JBQWdCO0lBQzNCLFlBQ21CLEVBQVUsRUFDVixJQUFZLEVBQ1osVUFBa0IsRUFDbEIsSUFBb0IsRUFDcEIsVUFBa0IsRUFDbEIsZUFBdUIsRUFDdkIsUUFBNkI7UUFON0IsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLFNBQUksR0FBSixJQUFJLENBQWdCO1FBQ3BCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDbEIsb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFFOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQsbUJBQW1CLENBQUMsY0FBc0IsR0FBRztRQUMzQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsR0FBRyxXQUFXLENBQUM7SUFDNUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFRYjtRQUNDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FDekIsTUFBTSxDQUFDLEVBQUUsRUFDVCxNQUFNLENBQUMsSUFBSSxFQUNYLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLElBQUksRUFDaEMsTUFBTSxDQUFDLElBQUksRUFDWCxNQUFNLENBQUMsVUFBVSxFQUNqQixNQUFNLENBQUMsZUFBZSxFQUN0QixNQUFNLENBQUMsUUFBUSxDQUNoQixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBaEVELDRDQWdFQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvZG9tYWluL2F1dG9jb21wbGV0ZS9TUEFSUUxTdWdnZXN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIFN1Z2dlc3Rpb25UeXBlIHtcbiAgS0VZV09SRCA9IFwia2V5d29yZFwiLFxuICBGVU5DVElPTiA9IFwiZnVuY3Rpb25cIixcbiAgUFJFRklYID0gXCJwcmVmaXhcIixcbiAgVkFSSUFCTEUgPSBcInZhcmlhYmxlXCIsXG4gIFBST1BFUlRZID0gXCJwcm9wZXJ0eVwiLFxuICBDTEFTUyA9IFwiY2xhc3NcIixcbiAgTkFNRVNQQUNFID0gXCJuYW1lc3BhY2VcIixcbiAgT1BFUkFUT1IgPSBcIm9wZXJhdG9yXCIsXG4gIFRFTVBMQVRFID0gXCJ0ZW1wbGF0ZVwiLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN1Z2dlc3Rpb25NZXRhZGF0YSB7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICB1c2FnZT86IHN0cmluZztcbiAgZXhhbXBsZXM/OiBzdHJpbmdbXTtcbiAgbmFtZXNwYWNlPzogc3RyaW5nO1xuICBkZXByZWNhdGVkPzogYm9vbGVhbjtcbiAgZG9jdW1lbnRhdGlvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFNQQVJRTFN1Z2dlc3Rpb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbnNlcnRUZXh0OiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSB0eXBlOiBTdWdnZXN0aW9uVHlwZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZGVuY2U6IG51bWJlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHR1YWxTY29yZTogbnVtYmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbWV0YWRhdGE/OiBTdWdnZXN0aW9uTWV0YWRhdGEsXG4gICkge1xuICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gIH1cblxuICBnZXRJZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgZ2V0VGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnRleHQ7XG4gIH1cblxuICBnZXRJbnNlcnRUZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0VGV4dDtcbiAgfVxuXG4gIGdldFR5cGUoKTogU3VnZ2VzdGlvblR5cGUge1xuICAgIHJldHVybiB0aGlzLnR5cGU7XG4gIH1cblxuICBnZXRDb25maWRlbmNlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlkZW5jZTtcbiAgfVxuXG4gIGdldENvbnRleHR1YWxTY29yZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHR1YWxTY29yZTtcbiAgfVxuXG4gIGdldE1ldGFkYXRhKCk6IFN1Z2dlc3Rpb25NZXRhZGF0YSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMubWV0YWRhdGE7XG4gIH1cblxuICBjYWxjdWxhdGVGaW5hbFNjb3JlKGJvb3N0RmFjdG9yOiBudW1iZXIgPSAxLjApOiBudW1iZXIge1xuICAgIHJldHVybiAodGhpcy5jb25maWRlbmNlICogMC42ICsgdGhpcy5jb250ZXh0dWFsU2NvcmUgKiAwLjQpICogYm9vc3RGYWN0b3I7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKHBhcmFtczoge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGluc2VydFRleHQ/OiBzdHJpbmc7XG4gICAgdHlwZTogU3VnZ2VzdGlvblR5cGU7XG4gICAgY29uZmlkZW5jZTogbnVtYmVyO1xuICAgIGNvbnRleHR1YWxTY29yZTogbnVtYmVyO1xuICAgIG1ldGFkYXRhPzogU3VnZ2VzdGlvbk1ldGFkYXRhO1xuICB9KTogU1BBUlFMU3VnZ2VzdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBTUEFSUUxTdWdnZXN0aW9uKFxuICAgICAgcGFyYW1zLmlkLFxuICAgICAgcGFyYW1zLnRleHQsXG4gICAgICBwYXJhbXMuaW5zZXJ0VGV4dCB8fCBwYXJhbXMudGV4dCxcbiAgICAgIHBhcmFtcy50eXBlLFxuICAgICAgcGFyYW1zLmNvbmZpZGVuY2UsXG4gICAgICBwYXJhbXMuY29udGV4dHVhbFNjb3JlLFxuICAgICAgcGFyYW1zLm1ldGFkYXRhLFxuICAgICk7XG4gIH1cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==