{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/offline/OfflineDataManager.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/offline/OfflineDataManager.ts"],"sourcesContent":["import { Result } from \"../../domain/core/Result\";\nimport { PlatformDetector } from \"../utils/PlatformDetector\";\n\n/**\n * Offline Storage Strategy\n */\nexport type OfflineStorageStrategy = \"indexeddb\" | \"localstorage\" | \"memory\";\n\n/**\n * Sync Status\n */\nexport type SyncStatus = \"synced\" | \"pending\" | \"conflict\" | \"error\";\n\n/**\n * Offline Data Entry\n */\nexport interface OfflineDataEntry<T = any> {\n  id: string;\n  data: T;\n  timestamp: number;\n  version: number;\n  syncStatus: SyncStatus;\n  lastSyncAttempt?: number;\n  checksum?: string;\n  metadata?: Record<string, any>;\n}\n\n/**\n * Sync Operation\n */\nexport interface SyncOperation {\n  id: string;\n  type: \"create\" | \"update\" | \"delete\";\n  collection: string;\n  data: any;\n  timestamp: number;\n  retryCount: number;\n  maxRetries: number;\n}\n\n/**\n * Offline Configuration\n */\nexport interface OfflineConfig {\n  /** Storage strategy to use */\n  strategy: OfflineStorageStrategy;\n  /** Maximum storage size in MB */\n  maxStorageMB: number;\n  /** Maximum age of cached data in ms */\n  maxAge: number;\n  /** Enable automatic sync when online */\n  autoSync: boolean;\n  /** Sync interval in ms */\n  syncIntervalMs: number;\n  /** Enable conflict resolution */\n  enableConflictResolution: boolean;\n  /** Enable compression for large data */\n  enableCompression: boolean;\n}\n\n/**\n * Storage Interface\n */\ninterface IOfflineStorage {\n  get<T>(key: string): Promise<OfflineDataEntry<T> | null>;\n  set<T>(key: string, entry: OfflineDataEntry<T>): Promise<void>;\n  delete(key: string): Promise<void>;\n  clear(): Promise<void>;\n  keys(): Promise<string[]>;\n  size(): Promise<number>;\n}\n\n/**\n * IndexedDB Storage Implementation\n */\nclass IndexedDBStorage implements IOfflineStorage {\n  private dbName = \"ExocortexOfflineDB\";\n  private version = 1;\n  private storeName = \"offlineData\";\n  private db?: IDBDatabase;\n\n  private async getDB(): Promise<IDBDatabase> {\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this.db);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          const store = db.createObjectStore(this.storeName, { keyPath: \"id\" });\n          store.createIndex(\"timestamp\", \"timestamp\");\n          store.createIndex(\"syncStatus\", \"syncStatus\");\n        }\n      };\n    });\n  }\n\n  async get<T>(key: string): Promise<OfflineDataEntry<T> | null> {\n    const db = await this.getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], \"readonly\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.get(key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || null);\n    });\n  }\n\n  async set<T>(key: string, entry: OfflineDataEntry<T>): Promise<void> {\n    const db = await this.getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], \"readwrite\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.put({ ...entry, id: key });\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async delete(key: string): Promise<void> {\n    const db = await this.getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], \"readwrite\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.delete(key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async clear(): Promise<void> {\n    const db = await this.getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], \"readwrite\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.clear();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async keys(): Promise<string[]> {\n    const db = await this.getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], \"readonly\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.getAllKeys();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result as string[]);\n    });\n  }\n\n  async size(): Promise<number> {\n    const db = await this.getDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([this.storeName], \"readonly\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.count();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n    });\n  }\n}\n\n/**\n * LocalStorage Implementation (fallback)\n */\nclass LocalStorageStorage implements IOfflineStorage {\n  private prefix = \"exocortex_offline_\";\n\n  async get<T>(key: string): Promise<OfflineDataEntry<T> | null> {\n    try {\n      const stored = localStorage.getItem(this.prefix + key);\n      return stored ? JSON.parse(stored) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  async set<T>(key: string, entry: OfflineDataEntry<T>): Promise<void> {\n    try {\n      localStorage.setItem(this.prefix + key, JSON.stringify(entry));\n    } catch (error) {\n      throw new Error(`LocalStorage quota exceeded: ${error}`);\n    }\n  }\n\n  async delete(key: string): Promise<void> {\n    localStorage.removeItem(this.prefix + key);\n  }\n\n  async clear(): Promise<void> {\n    const keys = Object.keys(localStorage).filter((k) =>\n      k.startsWith(this.prefix),\n    );\n    keys.forEach((key) => localStorage.removeItem(key));\n  }\n\n  async keys(): Promise<string[]> {\n    return Object.keys(localStorage)\n      .filter((k) => k.startsWith(this.prefix))\n      .map((k) => k.substring(this.prefix.length));\n  }\n\n  async size(): Promise<number> {\n    return (await this.keys()).length;\n  }\n}\n\n/**\n * Memory Storage Implementation (for testing)\n */\nclass MemoryStorage implements IOfflineStorage {\n  private data = new Map<string, OfflineDataEntry<any>>();\n\n  async get<T>(key: string): Promise<OfflineDataEntry<T> | null> {\n    return this.data.get(key) || null;\n  }\n\n  async set<T>(key: string, entry: OfflineDataEntry<T>): Promise<void> {\n    this.data.set(key, entry);\n  }\n\n  async delete(key: string): Promise<void> {\n    this.data.delete(key);\n  }\n\n  async clear(): Promise<void> {\n    this.data.clear();\n  }\n\n  async keys(): Promise<string[]> {\n    return Array.from(this.data.keys());\n  }\n\n  async size(): Promise<number> {\n    return this.data.size;\n  }\n}\n\n/**\n * Offline Data Manager\n * Provides offline-first data storage with automatic synchronization\n */\nexport class OfflineDataManager {\n  private storage: IOfflineStorage;\n  private config: OfflineConfig;\n  private syncQueue: SyncOperation[] = [];\n  private isOnline = navigator.onLine;\n  private syncInterval?: NodeJS.Timeout;\n  private listeners = new Map<string, Set<(data: any) => void>>();\n\n  constructor(config?: Partial<OfflineConfig>) {\n    this.config = {\n      strategy: this.detectBestStrategy(),\n      maxStorageMB: PlatformDetector.isMobile() ? 50 : 200,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      autoSync: true,\n      syncIntervalMs: 30000, // 30 seconds\n      enableConflictResolution: true,\n      enableCompression: false,\n      ...config,\n    };\n\n    this.storage = this.createStorage(this.config.strategy);\n    this.setupNetworkListeners();\n    this.setupAutoSync();\n  }\n\n  /**\n   * Store data offline\n   */\n  async store<T>(\n    collection: string,\n    id: string,\n    data: T,\n    metadata?: Record<string, any>,\n  ): Promise<Result<void>> {\n    try {\n      const now = Date.now();\n      const key = `${collection}:${id}`;\n\n      // Check if entry exists to determine version\n      const existing = await this.storage.get<T>(key);\n      const version = existing ? existing.version + 1 : 1;\n\n      const entry: OfflineDataEntry<T> = {\n        id: key,\n        data,\n        timestamp: now,\n        version,\n        syncStatus: \"pending\",\n        checksum: this.calculateChecksum(data),\n        metadata,\n      };\n\n      await this.storage.set(key, entry);\n\n      // Add to sync queue if auto-sync is enabled\n      if (this.config.autoSync) {\n        this.addToSyncQueue({\n          id: key,\n          type: existing ? \"update\" : \"create\",\n          collection,\n          data,\n          timestamp: now,\n          retryCount: 0,\n          maxRetries: 3,\n        });\n      }\n\n      // Notify listeners\n      this.notifyListeners(collection, data);\n\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Failed to store offline data: ${error}`);\n    }\n  }\n\n  /**\n   * Retrieve data from offline storage\n   */\n  async retrieve<T>(collection: string, id: string): Promise<Result<T | null>> {\n    try {\n      const key = `${collection}:${id}`;\n      const entry = await this.storage.get<T>(key);\n\n      if (!entry) {\n        return Result.ok<T | null>(null);\n      }\n\n      // Check if data is too old\n      if (Date.now() - entry.timestamp > this.config.maxAge) {\n        await this.storage.delete(key);\n        return Result.ok<T | null>(null);\n      }\n\n      return Result.ok<T | null>(entry.data);\n    } catch (error) {\n      return Result.fail<T | null>(`Failed to retrieve offline data: ${error}`);\n    }\n  }\n\n  /**\n   * List all items in a collection\n   */\n  async list<T>(collection: string): Promise<Result<T[]>> {\n    try {\n      const keys = await this.storage.keys();\n      const collectionKeys = keys.filter((k) => k.startsWith(`${collection}:`));\n\n      const items: T[] = [];\n      for (const key of collectionKeys) {\n        const entry = await this.storage.get<T>(key);\n        if (entry && Date.now() - entry.timestamp <= this.config.maxAge) {\n          items.push(entry.data);\n        }\n      }\n\n      return Result.ok<T[]>(items);\n    } catch (error) {\n      return Result.fail<T[]>(`Failed to list offline data: ${error}`);\n    }\n  }\n\n  /**\n   * Delete data from offline storage\n   */\n  async delete(collection: string, id: string): Promise<Result<void>> {\n    try {\n      const key = `${collection}:${id}`;\n      await this.storage.delete(key);\n\n      // Add delete operation to sync queue\n      if (this.config.autoSync) {\n        this.addToSyncQueue({\n          id: key,\n          type: \"delete\",\n          collection,\n          data: null,\n          timestamp: Date.now(),\n          retryCount: 0,\n          maxRetries: 3,\n        });\n      }\n\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Failed to delete offline data: ${error}`);\n    }\n  }\n\n  /**\n   * Force synchronization with server\n   */\n  async sync(): Promise<Result<void>> {\n    if (!this.isOnline) {\n      return Result.fail<void>(\"Cannot sync while offline\");\n    }\n\n    try {\n      const operations = [...this.syncQueue];\n      const results: Array<{\n        success: boolean;\n        operation: SyncOperation;\n        error?: string;\n      }> = [];\n\n      for (const operation of operations) {\n        try {\n          // Here you would implement actual sync with your backend\n          // For now, we'll simulate successful sync\n          await this.simulateServerSync(operation);\n\n          // Mark as synced\n          if (operation.type !== \"delete\") {\n            const entry = await this.storage.get(operation.id);\n            if (entry) {\n              entry.syncStatus = \"synced\";\n              entry.lastSyncAttempt = Date.now();\n              await this.storage.set(operation.id, entry);\n            }\n          }\n\n          // Remove from sync queue\n          this.removeSyncOperation(operation.id);\n          results.push({ success: true, operation });\n        } catch (error) {\n          operation.retryCount++;\n          if (operation.retryCount >= operation.maxRetries) {\n            // Mark as error and remove from queue\n            const entry = await this.storage.get(operation.id);\n            if (entry) {\n              entry.syncStatus = \"error\";\n              entry.lastSyncAttempt = Date.now();\n              await this.storage.set(operation.id, entry);\n            }\n            this.removeSyncOperation(operation.id);\n          }\n          results.push({ success: false, operation, error: String(error) });\n        }\n      }\n\n      console.log(\"Sync completed:\", results);\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Sync failed: ${error}`);\n    }\n  }\n\n  /**\n   * Get sync status for debugging\n   */\n  async getSyncStatus(): Promise<{\n    pendingOperations: number;\n    totalItems: number;\n    lastSync: number | null;\n    isOnline: boolean;\n  }> {\n    const totalItems = await this.storage.size();\n    return {\n      pendingOperations: this.syncQueue.length,\n      totalItems,\n      lastSync: null, // Could be tracked separately\n      isOnline: this.isOnline,\n    };\n  }\n\n  /**\n   * Clear all offline data\n   */\n  async clearAll(): Promise<Result<void>> {\n    try {\n      await this.storage.clear();\n      this.syncQueue.length = 0;\n      return Result.ok<void>();\n    } catch (error) {\n      return Result.fail<void>(`Failed to clear offline data: ${error}`);\n    }\n  }\n\n  /**\n   * Subscribe to data changes in a collection\n   */\n  subscribe<T>(collection: string, listener: (data: T) => void): () => void {\n    if (!this.listeners.has(collection)) {\n      this.listeners.set(collection, new Set());\n    }\n\n    this.listeners.get(collection)!.add(listener);\n\n    // Return unsubscribe function\n    return () => {\n      const collectionListeners = this.listeners.get(collection);\n      if (collectionListeners) {\n        collectionListeners.delete(listener);\n        if (collectionListeners.size === 0) {\n          this.listeners.delete(collection);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get storage usage statistics\n   */\n  async getStorageStats(): Promise<{\n    usedBytes: number;\n    totalItems: number;\n    oldestItem: number | null;\n    newestItem: number | null;\n  }> {\n    const keys = await this.storage.keys();\n    let usedBytes = 0;\n    let oldestTimestamp: number | null = null;\n    let newestTimestamp: number | null = null;\n\n    for (const key of keys) {\n      const entry = await this.storage.get(key);\n      if (entry) {\n        usedBytes += this.estimateSize(entry);\n\n        if (!oldestTimestamp || entry.timestamp < oldestTimestamp) {\n          oldestTimestamp = entry.timestamp;\n        }\n\n        if (!newestTimestamp || entry.timestamp > newestTimestamp) {\n          newestTimestamp = entry.timestamp;\n        }\n      }\n    }\n\n    return {\n      usedBytes,\n      totalItems: keys.length,\n      oldestItem: oldestTimestamp,\n      newestItem: newestTimestamp,\n    };\n  }\n\n  private detectBestStrategy(): OfflineStorageStrategy {\n    // Check IndexedDB support\n    if (typeof indexedDB !== \"undefined\") {\n      return \"indexeddb\";\n    }\n\n    // Fallback to localStorage\n    if (typeof localStorage !== \"undefined\") {\n      return \"localstorage\";\n    }\n\n    // Final fallback to memory\n    return \"memory\";\n  }\n\n  private createStorage(strategy: OfflineStorageStrategy): IOfflineStorage {\n    switch (strategy) {\n      case \"indexeddb\":\n        return new IndexedDBStorage();\n      case \"localstorage\":\n        return new LocalStorageStorage();\n      case \"memory\":\n        return new MemoryStorage();\n      default:\n        throw new Error(`Unknown storage strategy: ${strategy}`);\n    }\n  }\n\n  private setupNetworkListeners(): void {\n    window.addEventListener(\"online\", () => {\n      this.isOnline = true;\n      console.log(\"Back online - triggering sync\");\n      if (this.config.autoSync) {\n        this.sync();\n      }\n    });\n\n    window.addEventListener(\"offline\", () => {\n      this.isOnline = false;\n      console.log(\"Gone offline - entering offline mode\");\n    });\n  }\n\n  private setupAutoSync(): void {\n    if (this.config.autoSync) {\n      this.syncInterval = setInterval(() => {\n        if (this.isOnline && this.syncQueue.length > 0) {\n          this.sync();\n        }\n      }, this.config.syncIntervalMs);\n    }\n  }\n\n  private addToSyncQueue(operation: SyncOperation): void {\n    // Remove any existing operation for the same item\n    this.removeSyncOperation(operation.id);\n    this.syncQueue.push(operation);\n  }\n\n  private removeSyncOperation(id: string): void {\n    const index = this.syncQueue.findIndex((op) => op.id === id);\n    if (index !== -1) {\n      this.syncQueue.splice(index, 1);\n    }\n  }\n\n  private async simulateServerSync(operation: SyncOperation): Promise<void> {\n    // Simulate network delay\n    await new Promise((resolve) =>\n      setTimeout(resolve, 100 + Math.random() * 200),\n    );\n\n    // Simulate occasional failures for testing\n    if (Math.random() < 0.1) {\n      throw new Error(\"Simulated server error\");\n    }\n\n    console.log(`Simulated sync: ${operation.type} ${operation.id}`);\n  }\n\n  private calculateChecksum(data: any): string {\n    // Simple checksum implementation\n    const str = JSON.stringify(data);\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash.toString(36);\n  }\n\n  private estimateSize(entry: OfflineDataEntry): number {\n    return new Blob([JSON.stringify(entry)]).size;\n  }\n\n  private notifyListeners(collection: string, data: any): void {\n    const collectionListeners = this.listeners.get(collection);\n    if (collectionListeners) {\n      collectionListeners.forEach((listener) => {\n        try {\n          listener(data);\n        } catch (error) {\n          console.warn(\"Error in offline data listener:\", error);\n        }\n      });\n    }\n  }\n\n  /**\n   * Cleanup resources\n   */\n  destroy(): void {\n    if (this.syncInterval) {\n      clearInterval(this.syncInterval);\n    }\n\n    window.removeEventListener(\"online\", this.setupNetworkListeners);\n    window.removeEventListener(\"offline\", this.setupNetworkListeners);\n\n    this.listeners.clear();\n  }\n}\n"],"version":3}