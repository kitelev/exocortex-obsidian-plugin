4b39246ebeb15afbce551be1397c1268
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateAssetModal = void 0;
const tslib_1 = require("tslib");
const obsidian_1 = require("obsidian");
const DIContainer_1 = require("../../infrastructure/container/DIContainer");
/**
 * Modal for creating new ExoAssets
 * Presentation layer component that delegates to use cases
 */
class CreateAssetModal extends obsidian_1.Modal {
    constructor(app) {
        super(app);
        this.assetTitle = '';
        this.assetClass = 'exo__Asset';
        this.assetOntology = '';
        this.propertyValues = new Map();
        this.propertiesContainer = null;
        this.properties = []; // Store current properties for testing
        this.container = DIContainer_1.DIContainer.getInstance();
        this.createAssetUseCase = this.container.getCreateAssetUseCase();
        this.ontologyRepository = this.container.resolve('IOntologyRepository');
        this.classViewRepository = this.container.resolve('IClassViewRepository');
    }
    onOpen() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { contentEl } = this;
            contentEl.createEl("h2", { text: "Create ExoAsset" });
            yield this.setupTitleField(contentEl);
            yield this.setupClassField(contentEl);
            yield this.setupOntologyField(contentEl);
            yield this.setupPropertiesSection(contentEl);
            this.setupActionButtons(contentEl);
        });
    }
    setupTitleField(containerEl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            new obsidian_1.Setting(containerEl)
                .setName("Title")
                .setDesc("Asset title")
                .addText(text => text
                .setPlaceholder("Enter asset title")
                .setValue(this.assetTitle)
                .onChange(value => this.assetTitle = value));
        });
    }
    setupClassField(containerEl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Get all class files from the vault
            const files = this.app.vault.getMarkdownFiles();
            const classes = [];
            // Find all class definitions (files with exo__Class frontmatter)
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    const instanceClass = cache.frontmatter['exo__Instance_class'];
                    if (instanceClass === '[[exo__Class]]' || instanceClass === 'exo__Class') {
                        const className = file.basename;
                        const displayName = cache.frontmatter['rdfs__label'] || className;
                        classes.push({ className, displayName });
                    }
                }
            }
            // Add default classes if none found
            if (classes.length === 0) {
                classes.push({ className: 'exo__Asset', displayName: 'Asset' }, { className: 'exo__Class', displayName: 'Class' }, { className: 'exo__Property', displayName: 'Property' });
            }
            new obsidian_1.Setting(containerEl)
                .setName("Class")
                .setDesc("Select the type of asset")
                .addDropdown(dropdown => {
                for (const classInfo of classes) {
                    dropdown.addOption(classInfo.className, classInfo.displayName);
                }
                dropdown.setValue(this.assetClass);
                dropdown.onChange((value) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                    this.assetClass = value;
                    yield this.updatePropertiesForClass(value);
                }));
            });
        });
    }
    setupOntologyField(containerEl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // Get all ontology files from the vault
            const files = this.app.vault.getMarkdownFiles();
            const ontologies = [];
            // Find all ontology definitions (files starting with ! or having exo__Ontology_prefix)
            for (const file of files) {
                if (file.name.startsWith('!')) {
                    const cache = this.app.metadataCache.getFileCache(file);
                    if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                        const prefix = cache.frontmatter['exo__Ontology_prefix'] || file.basename.substring(1);
                        const displayName = cache.frontmatter['rdfs__label'] || prefix;
                        ontologies.push({ prefix, displayName });
                    }
                }
            }
            // Add default ontologies if none found
            if (ontologies.length === 0) {
                ontologies.push({ prefix: 'exo', displayName: 'Exocortex Core' }, { prefix: 'ui', displayName: 'User Interface' }, { prefix: 'rdfs', displayName: 'RDF Schema' });
            }
            const defaultOntology = 'exo';
            // Set default ontology when no ontologies found in vault
            if (ontologies.length > 0 && !this.assetOntology) {
                this.assetOntology = defaultOntology;
            }
            new obsidian_1.Setting(containerEl)
                .setName("Ontology")
                .setDesc("Select which knowledge graph this asset belongs to")
                .addDropdown(dropdown => {
                for (const ontology of ontologies) {
                    dropdown.addOption(ontology.prefix, ontology.displayName);
                }
                // Set default ontology
                if (defaultOntology && ontologies.some((o) => o.prefix === defaultOntology)) {
                    this.assetOntology = defaultOntology;
                    dropdown.setValue(defaultOntology);
                }
                else if (ontologies.length > 0) {
                    this.assetOntology = ontologies[0].prefix;
                    dropdown.setValue(ontologies[0].prefix);
                }
                dropdown.onChange(value => {
                    this.assetOntology = value;
                });
            });
        });
    }
    setupPropertiesSection(containerEl) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            containerEl.createEl("h3", {
                text: "Properties",
                cls: "exocortex-properties-header"
            });
            this.propertiesContainer = containerEl.createDiv({
                cls: "exocortex-properties-container"
            });
            yield this.updatePropertiesForClass(this.assetClass);
        });
    }
    updatePropertiesForClass(className) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.propertiesContainer)
                return;
            console.log(`Updating properties for class: ${className}`);
            // Clear the container - try Obsidian method first, fallback to DOM
            if ('empty' in this.propertiesContainer && typeof this.propertiesContainer.empty === 'function') {
                this.propertiesContainer.empty();
            }
            else {
                // Fallback to standard DOM method - use innerHTML for complete cleanup
                this.propertiesContainer.innerHTML = '';
            }
            this.propertyValues.clear();
            // Get properties for this class
            this.properties = [];
            const files = this.app.vault.getMarkdownFiles();
            console.log(`Scanning ${files.length} files for properties...`);
            // Find all property definitions related to this class
            for (const file of files) {
                const cache = this.app.metadataCache.getFileCache(file);
                if (cache === null || cache === void 0 ? void 0 : cache.frontmatter) {
                    const instanceClass = cache.frontmatter['exo__Instance_class'];
                    if (instanceClass === '[[exo__Property]]' || instanceClass === 'exo__Property') {
                        const domain = cache.frontmatter['rdfs__domain'];
                        // Check if this property belongs to the current class
                        if (domain === `[[${className}]]` || domain === className ||
                            (Array.isArray(domain) && (domain.includes(className) || domain.includes(`[[${className}]]`)))) {
                            const propertyName = file.basename;
                            const label = cache.frontmatter['rdfs__label'] || propertyName;
                            const description = cache.frontmatter['rdfs__comment'] || '';
                            const range = cache.frontmatter['rdfs__range'] || 'string';
                            const isRequired = cache.frontmatter['exo__Property_isRequired'] || false;
                            const options = cache.frontmatter['exo__Property_options'] || null;
                            console.log(`Found property ${propertyName} for class ${className}`);
                            // Determine property type based on range and options
                            let type = this.mapRangeToType(range);
                            if (options && Array.isArray(options)) {
                                type = 'enum';
                            }
                            else if (range === 'select' && options) {
                                type = 'enum';
                            }
                            this.properties.push({
                                name: propertyName,
                                label: label,
                                description: description,
                                type: type,
                                isRequired: isRequired,
                                range: range,
                                options: options
                            });
                        }
                    }
                }
            }
            console.log(`Found ${this.properties.length} properties for class ${className}`);
            // Add some default properties for common classes
            if (this.properties.length === 0 && className === 'exo__Asset') {
                this.properties.push({
                    name: 'description',
                    label: 'Description',
                    description: 'A brief description of the asset',
                    type: 'text',
                    isRequired: false
                }, {
                    name: 'tags',
                    label: 'Tags',
                    description: 'Tags for categorization',
                    type: 'array',
                    isRequired: false
                });
            }
            if (this.properties.length === 0) {
                this.propertiesContainer.createEl("p", {
                    text: "No specific properties for this class",
                    cls: "exocortex-no-properties"
                });
                return;
            }
            // Create fields for all properties (including defaults)
            for (const prop of this.properties) {
                this.createPropertyField(prop);
            }
        });
    }
    mapRangeToType(range) {
        // Map RDF/OWL ranges to input types
        if (range === 'select')
            return 'enum';
        if (range.includes('boolean'))
            return 'boolean';
        if (range.includes('date') || range.includes('Date'))
            return 'date';
        if (range.includes('integer') || range.includes('decimal') || range.includes('float'))
            return 'number';
        if (range.includes('string') && range.includes('[]'))
            return 'array';
        if (range.includes('text') || range.includes('Text'))
            return 'text';
        return 'string'; // default
    }
    createPropertyField(property) {
        if (!this.propertiesContainer)
            return;
        const setting = new obsidian_1.Setting(this.propertiesContainer)
            .setName(property.label + (property.isRequired ? ' *' : ''))
            .setDesc(property.description);
        // Create appropriate input based on property type
        switch (property.type) {
            case 'enum':
                this.createEnumField(setting, property);
                break;
            case 'boolean':
                this.createBooleanField(setting, property);
                break;
            case 'date':
                this.createDateField(setting, property);
                break;
            case 'number':
                this.createNumberField(setting, property);
                break;
            case 'text':
                this.createTextAreaField(setting, property);
                break;
            case 'array':
                this.createArrayField(setting, property);
                break;
            default:
                this.createTextField(setting, property);
        }
    }
    createEnumField(setting, property) {
        setting.addDropdown(dropdown => {
            dropdown.addOption('', '-- Select --');
            for (const option of property.options) {
                dropdown.addOption(option, option);
            }
            dropdown.onChange(value => {
                if (value) {
                    this.propertyValues.set(property.name, value);
                }
                else {
                    this.propertyValues.delete(property.name);
                }
            });
        });
    }
    createBooleanField(setting, property) {
        setting.addToggle(toggle => {
            toggle.onChange(value => {
                this.propertyValues.set(property.name, value);
            });
        });
    }
    createDateField(setting, property) {
        setting.addText(text => {
            text.setPlaceholder('YYYY-MM-DD')
                .onChange(value => {
                if (value) {
                    this.propertyValues.set(property.name, value);
                }
                else {
                    this.propertyValues.delete(property.name);
                }
            });
            // Set the input type to date
            text.inputEl.type = 'date';
        });
    }
    createNumberField(setting, property) {
        setting.addText(text => {
            text.setPlaceholder('Enter number')
                .onChange(value => {
                if (value) {
                    const num = parseFloat(value);
                    if (!isNaN(num)) {
                        this.propertyValues.set(property.name, num);
                    }
                }
                else {
                    this.propertyValues.delete(property.name);
                }
            });
        });
    }
    createTextAreaField(setting, property) {
        setting.addTextArea(text => {
            text.setPlaceholder('Enter ' + property.label.toLowerCase())
                .onChange(value => {
                if (value) {
                    this.propertyValues.set(property.name, value);
                }
                else {
                    this.propertyValues.delete(property.name);
                }
            });
        });
    }
    createArrayField(setting, property) {
        setting.addText(text => {
            text.setPlaceholder('Comma-separated values or [[links]]')
                .onChange(value => {
                if (value) {
                    if (value.includes('[[')) {
                        const links = value.match(/\[\[([^\]]+)\]\]/g) || [];
                        this.propertyValues.set(property.name, links);
                    }
                    else {
                        const items = value.split(',').map(s => s.trim()).filter(s => s);
                        this.propertyValues.set(property.name, items);
                    }
                }
                else {
                    this.propertyValues.delete(property.name);
                }
            });
        });
    }
    createTextField(setting, property) {
        setting.addText(text => {
            text.setPlaceholder('Enter ' + property.label.toLowerCase())
                .onChange(value => {
                if (value) {
                    this.propertyValues.set(property.name, value);
                }
                else {
                    this.propertyValues.delete(property.name);
                }
            });
        });
    }
    setupActionButtons(containerEl) {
        new obsidian_1.Setting(containerEl)
            .addButton(btn => btn
            .setButtonText("Create")
            .setCta()
            .onClick(() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.createAsset();
        })));
    }
    createAsset() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Convert property values to plain object
                const properties = {};
                for (const [key, value] of this.propertyValues) {
                    properties[key] = value;
                }
                // Execute use case
                const response = yield this.createAssetUseCase.execute({
                    title: this.assetTitle,
                    className: this.assetClass,
                    ontologyPrefix: this.assetOntology,
                    properties
                });
                if (response.success) {
                    new obsidian_1.Notice(response.message);
                    this.close();
                }
                else {
                    new obsidian_1.Notice(`Failed to create asset`);
                }
            }
            catch (error) {
                new obsidian_1.Notice(`Error: ${error.message}`);
            }
        });
    }
    onClose() {
        const { contentEl } = this;
        // Clear content - try Obsidian method first, fallback to DOM
        if ('empty' in contentEl && typeof contentEl.empty === 'function') {
            contentEl.empty();
        }
        else {
            // Fallback to standard DOM method - use innerHTML for complete cleanup
            contentEl.innerHTML = '';
        }
    }
}
exports.CreateAssetModal = CreateAssetModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,