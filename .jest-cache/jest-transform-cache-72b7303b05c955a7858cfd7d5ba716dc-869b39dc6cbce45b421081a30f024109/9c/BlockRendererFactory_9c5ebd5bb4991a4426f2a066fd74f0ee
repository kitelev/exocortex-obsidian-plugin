52afbd00941e271f0325c50bbc69e015
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockRendererFactory = void 0;
const Result_1 = require("../../domain/core/Result");
const DynamicBacklinksBlockRenderer_1 = require("../renderers/DynamicBacklinksBlockRenderer");
// Adapter pattern to bridge old block renderers to new interface
class BlockRendererAdapter {
    constructor(legacyRenderer, blockType) {
        this.legacyRenderer = legacyRenderer;
        this.blockType = blockType;
    }
    async render(context) {
        try {
            // Adapt new context to legacy renderer interface
            await this.legacyRenderer.render(context.container, context.config, context.file, context.frontmatter, context.dataviewApi);
            return Result_1.Result.ok();
        }
        catch (error) {
            return Result_1.Result.fail(`Block rendering failed for ${this.blockType}: ${error}`);
        }
    }
}
class BlockRendererFactory {
    constructor(app) {
        this.app = app;
        this.renderers = new Map();
        // Initialize only dynamic backlinks renderer
        this.renderers.set("dynamic-backlinks", new DynamicBacklinksBlockRenderer_1.DynamicBacklinksBlockRenderer(app));
    }
    createRenderer(blockType) {
        const legacyRenderer = this.renderers.get(blockType);
        if (!legacyRenderer) {
            return Result_1.Result.fail(`No renderer found for block type: ${blockType}`);
        }
        // Wrap legacy renderer with adapter
        const adapter = new BlockRendererAdapter(legacyRenderer, blockType);
        return Result_1.Result.ok(adapter);
    }
    getSupportedBlockTypes() {
        return Array.from(this.renderers.keys());
    }
    // Allow runtime registration of custom renderers
    registerRenderer(blockType, renderer) {
        this.renderers.set(blockType, renderer);
    }
    // Remove renderer (useful for testing)
    unregisterRenderer(blockType) {
        return this.renderers.delete(blockType);
    }
}
exports.BlockRendererFactory = BlockRendererFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vc3JjL3ByZXNlbnRhdGlvbi9mYWN0b3JpZXMvQmxvY2tSZW5kZXJlckZhY3RvcnkudHMiLCJtYXBwaW5ncyI6Ijs7O0FBRUEscURBQWtEO0FBTWxELDhGQUEyRjtBQUUzRixpRUFBaUU7QUFDakUsTUFBTSxvQkFBb0I7SUFDeEIsWUFDbUIsY0FBbUIsRUFDbkIsU0FBb0I7UUFEcEIsbUJBQWMsR0FBZCxjQUFjLENBQUs7UUFDbkIsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUNwQyxDQUFDO0lBRUosS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUE4QjtRQUN6QyxJQUFJO1lBQ0YsaURBQWlEO1lBQ2pELE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQzlCLE9BQU8sQ0FBQyxTQUFTLEVBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLElBQUksRUFDWixPQUFPLENBQUMsV0FBVyxFQUNuQixPQUFPLENBQUMsV0FBVyxDQUNwQixDQUFDO1lBQ0YsT0FBTyxlQUFNLENBQUMsRUFBRSxFQUFFLENBQUM7U0FDcEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FDaEIsOEJBQThCLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFLENBQ3pELENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRjtBQUVELE1BQWEsb0JBQW9CO0lBRy9CLFlBQTZCLEdBQVE7UUFBUixRQUFHLEdBQUgsR0FBRyxDQUFLO1FBRnBCLGNBQVMsR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUcxRCw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQ2hCLG1CQUFtQixFQUNuQixJQUFJLDZEQUE2QixDQUFDLEdBQUcsQ0FBQyxDQUN2QyxDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxTQUFvQjtRQUNqQyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ25CLE9BQU8sZUFBTSxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUN0RTtRQUVELG9DQUFvQztRQUNwQyxNQUFNLE9BQU8sR0FBRyxJQUFJLG9CQUFvQixDQUFDLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRSxPQUFPLGVBQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELHNCQUFzQjtRQUNwQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxpREFBaUQ7SUFDakQsZ0JBQWdCLENBQUMsU0FBb0IsRUFBRSxRQUFhO1FBQ2xELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsdUNBQXVDO0lBQ3ZDLGtCQUFrQixDQUFDLFNBQW9CO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGO0FBcENELG9EQW9DQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2l0ZWxldi9Eb2N1bWVudHMvZXhvY29ydGV4LW9ic2lkaWFuLXBsdWdpbi9zcmMvcHJlc2VudGF0aW9uL2ZhY3Rvcmllcy9CbG9ja1JlbmRlcmVyRmFjdG9yeS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IEJsb2NrVHlwZSB9IGZyb20gXCIuLi8uLi9kb21haW4vZW50aXRpZXMvTGF5b3V0QmxvY2tcIjtcbmltcG9ydCB7IFJlc3VsdCB9IGZyb20gXCIuLi8uLi9kb21haW4vY29yZS9SZXN1bHRcIjtcbmltcG9ydCB7XG4gIElCbG9ja1JlbmRlcmVyRmFjdG9yeSxcbiAgSUJsb2NrUmVuZGVyZXIsXG4gIEJsb2NrUmVuZGVyaW5nQ29udGV4dCxcbn0gZnJvbSBcIi4vSUJsb2NrUmVuZGVyZXJGYWN0b3J5XCI7XG5pbXBvcnQgeyBEeW5hbWljQmFja2xpbmtzQmxvY2tSZW5kZXJlciB9IGZyb20gXCIuLi9yZW5kZXJlcnMvRHluYW1pY0JhY2tsaW5rc0Jsb2NrUmVuZGVyZXJcIjtcblxuLy8gQWRhcHRlciBwYXR0ZXJuIHRvIGJyaWRnZSBvbGQgYmxvY2sgcmVuZGVyZXJzIHRvIG5ldyBpbnRlcmZhY2VcbmNsYXNzIEJsb2NrUmVuZGVyZXJBZGFwdGVyIGltcGxlbWVudHMgSUJsb2NrUmVuZGVyZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxlZ2FjeVJlbmRlcmVyOiBhbnksXG4gICAgcHJpdmF0ZSByZWFkb25seSBibG9ja1R5cGU6IEJsb2NrVHlwZSxcbiAgKSB7fVxuXG4gIGFzeW5jIHJlbmRlcihjb250ZXh0OiBCbG9ja1JlbmRlcmluZ0NvbnRleHQpOiBQcm9taXNlPFJlc3VsdDx2b2lkPj4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBBZGFwdCBuZXcgY29udGV4dCB0byBsZWdhY3kgcmVuZGVyZXIgaW50ZXJmYWNlXG4gICAgICBhd2FpdCB0aGlzLmxlZ2FjeVJlbmRlcmVyLnJlbmRlcihcbiAgICAgICAgY29udGV4dC5jb250YWluZXIsXG4gICAgICAgIGNvbnRleHQuY29uZmlnLFxuICAgICAgICBjb250ZXh0LmZpbGUsXG4gICAgICAgIGNvbnRleHQuZnJvbnRtYXR0ZXIsXG4gICAgICAgIGNvbnRleHQuZGF0YXZpZXdBcGksXG4gICAgICApO1xuICAgICAgcmV0dXJuIFJlc3VsdC5vaygpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwoXG4gICAgICAgIGBCbG9jayByZW5kZXJpbmcgZmFpbGVkIGZvciAke3RoaXMuYmxvY2tUeXBlfTogJHtlcnJvcn1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsb2NrUmVuZGVyZXJGYWN0b3J5IGltcGxlbWVudHMgSUJsb2NrUmVuZGVyZXJGYWN0b3J5IHtcbiAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlcnM6IE1hcDxCbG9ja1R5cGUsIGFueT4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHA6IEFwcCkge1xuICAgIC8vIEluaXRpYWxpemUgb25seSBkeW5hbWljIGJhY2tsaW5rcyByZW5kZXJlclxuICAgIHRoaXMucmVuZGVyZXJzLnNldChcbiAgICAgIFwiZHluYW1pYy1iYWNrbGlua3NcIixcbiAgICAgIG5ldyBEeW5hbWljQmFja2xpbmtzQmxvY2tSZW5kZXJlcihhcHApLFxuICAgICk7XG4gIH1cblxuICBjcmVhdGVSZW5kZXJlcihibG9ja1R5cGU6IEJsb2NrVHlwZSk6IFJlc3VsdDxJQmxvY2tSZW5kZXJlcj4ge1xuICAgIGNvbnN0IGxlZ2FjeVJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcnMuZ2V0KGJsb2NrVHlwZSk7XG5cbiAgICBpZiAoIWxlZ2FjeVJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gUmVzdWx0LmZhaWwoYE5vIHJlbmRlcmVyIGZvdW5kIGZvciBibG9jayB0eXBlOiAke2Jsb2NrVHlwZX1gKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwIGxlZ2FjeSByZW5kZXJlciB3aXRoIGFkYXB0ZXJcbiAgICBjb25zdCBhZGFwdGVyID0gbmV3IEJsb2NrUmVuZGVyZXJBZGFwdGVyKGxlZ2FjeVJlbmRlcmVyLCBibG9ja1R5cGUpO1xuICAgIHJldHVybiBSZXN1bHQub2soYWRhcHRlcik7XG4gIH1cblxuICBnZXRTdXBwb3J0ZWRCbG9ja1R5cGVzKCk6IEJsb2NrVHlwZVtdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnJlbmRlcmVycy5rZXlzKCkpO1xuICB9XG5cbiAgLy8gQWxsb3cgcnVudGltZSByZWdpc3RyYXRpb24gb2YgY3VzdG9tIHJlbmRlcmVyc1xuICByZWdpc3RlclJlbmRlcmVyKGJsb2NrVHlwZTogQmxvY2tUeXBlLCByZW5kZXJlcjogYW55KTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlcnMuc2V0KGJsb2NrVHlwZSwgcmVuZGVyZXIpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHJlbmRlcmVyICh1c2VmdWwgZm9yIHRlc3RpbmcpXG4gIHVucmVnaXN0ZXJSZW5kZXJlcihibG9ja1R5cGU6IEJsb2NrVHlwZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVycy5kZWxldGUoYmxvY2tUeXBlKTtcbiAgfVxufVxuIl0sInZlcnNpb24iOjN9