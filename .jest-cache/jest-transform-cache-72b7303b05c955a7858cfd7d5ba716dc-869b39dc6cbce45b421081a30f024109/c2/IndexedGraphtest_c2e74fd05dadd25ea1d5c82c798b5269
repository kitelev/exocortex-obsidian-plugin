822d3e01a2eccda302e64ad1bbcd15bb
"use strict";
/**
 * Performance tests for IndexedGraph
 * Validates O(1) lookup performance and optimization strategies
 */
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const IndexedGraph_1 = require("../../../../src/domain/semantic/core/IndexedGraph");
const Triple_1 = require("../../../../src/domain/semantic/core/Triple");
describe('IndexedGraph Performance', () => {
    let graph;
    beforeEach(() => {
        graph = new IndexedGraph_1.IndexedGraph();
    });
    describe('Batch Operations', () => {
        it('should handle batch inserts efficiently', () => {
            const startTime = performance.now();
            graph.beginBatch();
            // Add 1000 triples
            for (let i = 0; i < 1000; i++) {
                const triple = new Triple_1.Triple(new Triple_1.IRI(`http://example.org/subject${i}`), new Triple_1.IRI('http://example.org/predicate'), new Triple_1.Literal(`value${i}`));
                graph.add(triple);
            }
            graph.commitBatch();
            const elapsed = performance.now() - startTime;
            expect(graph.size()).toBe(1000);
            expect(elapsed).toBeLessThan(500); // Should complete in under 500ms
            expect(graph.getMetrics().lastIndexTime).toBeGreaterThan(0);
        });
        it('should rollback batch on error', () => {
            graph.beginBatch();
            for (let i = 0; i < 10; i++) {
                const triple = new Triple_1.Triple(new Triple_1.IRI(`http://example.org/subject${i}`), new Triple_1.IRI('http://example.org/predicate'), new Triple_1.Literal(`value${i}`));
                graph.add(triple);
            }
            graph.rollbackBatch();
            expect(graph.size()).toBe(0);
        });
    });
    describe('Query Performance', () => {
        beforeEach(() => {
            // Setup test data
            graph.beginBatch();
            for (let i = 0; i < 100; i++) {
                for (let j = 0; j < 10; j++) {
                    const triple = new Triple_1.Triple(new Triple_1.IRI(`http://example.org/subject${i}`), new Triple_1.IRI(`http://example.org/predicate${j}`), new Triple_1.Literal(`value${i}_${j}`));
                    graph.add(triple);
                }
            }
            graph.commitBatch();
        });
        it('should have O(1) lookup performance', () => {
            const warmupRuns = 10;
            const measurementRuns = 100;
            const times = [];
            // Warmup phase - discard these measurements to stabilize JIT
            for (let i = 0; i < warmupRuns; i++) {
                graph.query(`http://example.org/subject${i % 10}`, 'http://example.org/predicate5');
            }
            // Measurement phase - collect all timings, even very small ones
            for (let i = 0; i < measurementRuns; i++) {
                const startTime = performance.now();
                graph.query(`http://example.org/subject${i % 10}`, 'http://example.org/predicate5');
                const endTime = performance.now();
                times.push(endTime - startTime);
            }
            // We should have all measurements (no filtering by precision)
            expect(times.length).toBe(measurementRuns);
            // Basic performance validation - focus on outliers rather than precision
            times.sort((a, b) => a - b);
            const avg = times.reduce((a, b) => a + b, 0) / times.length;
            const median = times[Math.floor(times.length / 2)];
            const p95 = times[Math.floor(times.length * 0.95)];
            const max = times[times.length - 1];
            // O(1) performance characteristics - very lenient thresholds
            // Focus on worst-case performance rather than timing precision
            expect(median).toBeLessThan(10.0); // Median < 10ms (very generous)
            expect(p95).toBeLessThan(50.0); // 95th percentile < 50ms
            expect(max).toBeLessThan(100.0); // Maximum < 100ms
            // Ensure most queries are reasonably fast (rule out O(n) behavior)
            const fastQueries = times.filter(t => t < 5.0).length;
            const fastQueryRatio = fastQueries / times.length;
            expect(fastQueryRatio).toBeGreaterThan(0.7); // At least 70% of queries < 5ms
            // Verify cache is working by checking some queries are very fast
            const veryFastQueries = times.filter(t => t < 0.1).length;
            expect(veryFastQueries).toBeGreaterThan(0); // At least some cache hits
            // Log performance stats for debugging
            console.log(`Performance stats: avg=${avg.toFixed(3)}ms, median=${median.toFixed(3)}ms, p95=${p95.toFixed(3)}ms, max=${max.toFixed(3)}ms`);
        });
        it('should cache query results', () => {
            // First query - cache miss
            const result1 = graph.query('http://example.org/subject1');
            // Second identical query - cache hit
            const result2 = graph.query('http://example.org/subject1');
            expect(result1).toEqual(result2);
            expect(graph.getMetrics().cacheHitRate).toBeGreaterThan(0);
        });
        it('should handle parallel queries efficiently', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const patterns = [
                { s: 'http://example.org/subject1' },
                { s: 'http://example.org/subject2' },
                { s: 'http://example.org/subject3' },
                { p: 'http://example.org/predicate1' },
                { o: 'value50_5' }
            ];
            const startTime = performance.now();
            const results = yield graph.parallelQuery(patterns);
            const elapsed = performance.now() - startTime;
            expect(results).toHaveLength(5);
            expect(elapsed).toBeLessThan(100); // Parallel queries should be fast
        }));
    });
    describe('Statistics', () => {
        it('should calculate statistics efficiently', () => {
            // Add test data
            graph.beginBatch();
            for (let i = 0; i < 50; i++) {
                const triple = new Triple_1.Triple(new Triple_1.IRI(`http://example.org/subject${i % 10}`), new Triple_1.IRI(`http://example.org/predicate${i % 5}`), new Triple_1.Literal(`value${i}`));
                graph.add(triple);
            }
            graph.commitBatch();
            const stats = graph.getStatistics();
            expect(stats.totalTriples).toBe(50);
            expect(stats.uniqueSubjects).toBe(10);
            expect(stats.uniquePredicates).toBe(5);
            expect(stats.uniqueObjects).toBe(50);
        });
        it('should cache statistics', () => {
            graph.add(new Triple_1.Triple(new Triple_1.IRI('http://example.org/s'), new Triple_1.IRI('http://example.org/p'), new Triple_1.Literal('o')));
            const stats1 = graph.getStatistics();
            const stats2 = graph.getStatistics();
            expect(stats1).toBe(stats2); // Same object reference (cached)
        });
    });
    describe('Optimization', () => {
        it('should optimize indexes', () => {
            // Add and remove many triples to fragment indexes
            for (let i = 0; i < 100; i++) {
                const triple = new Triple_1.Triple(new Triple_1.IRI(`http://example.org/subject${i}`), new Triple_1.IRI('http://example.org/predicate'), new Triple_1.Literal(`value${i}`));
                graph.add(triple);
                if (i % 2 === 0) {
                    graph.remove(triple);
                }
            }
            const beforeOptimize = graph.getMetrics().lastIndexTime;
            graph.optimize();
            const afterOptimize = graph.getMetrics().lastIndexTime;
            expect(graph.size()).toBe(50); // Only odd-numbered triples remain
            expect(afterOptimize).toBeGreaterThan(0);
        });
    });
    describe('Stream API', () => {
        it('should stream results efficiently', () => {
            graph.beginBatch();
            for (let i = 0; i < 1000; i++) {
                graph.add(new Triple_1.Triple(new Triple_1.IRI(`http://example.org/subject${i}`), new Triple_1.IRI('http://example.org/predicate'), new Triple_1.Literal(`value${i}`)));
            }
            graph.commitBatch();
            let count = 0;
            for (const triple of graph.stream()) {
                count++;
                if (count >= 10)
                    break; // Only process first 10
            }
            expect(count).toBe(10);
        });
    });
    describe('Factory Methods', () => {
        it('should create optimized graph from triples', () => {
            const triples = Array.from({ length: 100 }, (_, i) => new Triple_1.Triple(new Triple_1.IRI(`http://example.org/s${i}`), new Triple_1.IRI('http://example.org/p'), new Triple_1.Literal(`v${i}`)));
            const optimizedGraph = IndexedGraph_1.GraphFactory.createOptimized(triples);
            expect(optimizedGraph.size()).toBe(100);
            expect(optimizedGraph.getMetrics().lastIndexTime).toBeGreaterThan(0);
        });
    });
    describe('Large Scale Performance', () => {
        it('should handle 10,000 triples efficiently', () => {
            const startTime = performance.now();
            graph.beginBatch();
            for (let i = 0; i < 10000; i++) {
                graph.add(new Triple_1.Triple(new Triple_1.IRI(`http://example.org/s${i % 1000}`), new Triple_1.IRI(`http://example.org/p${i % 100}`), new Triple_1.Literal(`value${i}`)));
            }
            graph.commitBatch();
            const indexTime = performance.now() - startTime;
            // Query performance test
            const queryStart = performance.now();
            const results = graph.query('http://example.org/s500');
            const queryTime = performance.now() - queryStart;
            expect(graph.size()).toBe(10000);
            expect(indexTime).toBeLessThan(5000); // Should index in under 5 seconds
            expect(queryTime).toBeLessThan(10); // Query should be under 10ms
            expect(results.length).toBeGreaterThan(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,