bc8cd3be35f45196c1f74bc578f23ffb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryTemplateUseCase = void 0;
const tslib_1 = require("tslib");
const QueryTemplate_1 = require("../../domain/visual/QueryTemplate");
const VisualQueryNode_1 = require("../../domain/visual/VisualQueryNode");
const VisualQueryEdge_1 = require("../../domain/visual/VisualQueryEdge");
class QueryTemplateUseCase {
    constructor(templateRepository) {
        this.templateRepository = templateRepository;
    }
    getTemplateRepository() {
        return this.templateRepository;
    }
    getAllTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.findAll();
        });
    }
    getTemplateById(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.findById(id);
        });
    }
    searchTemplates(criteria) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.findByCriteria(criteria);
        });
    }
    getTemplatesByCategory(category) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.findByCategory(category);
        });
    }
    getBuiltInTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.getBuiltInTemplates();
        });
    }
    getCustomTemplates() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.getCustomTemplates();
        });
    }
    getRecentTemplates(limit) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.getRecentlyUsed(limit);
        });
    }
    saveTemplate(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot save built-in templates');
            }
            return yield this.templateRepository.save(template);
        });
    }
    createCustomTemplate(nodes, edges, viewport, name, description, category = QueryTemplate_1.TemplateCategory.CUSTOM, tags = []) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const metadata = {
                name,
                description,
                category,
                tags: [...tags, 'custom'],
                difficulty: 'intermediate',
                createdAt: new Date(),
                updatedAt: new Date(),
                version: '1.0.0'
            };
            const template = QueryTemplate_1.QueryTemplate.fromCanvas(nodes, edges, viewport, {
                name,
                description,
                category,
                difficulty: QueryTemplate_1.TemplateDifficulty.INTERMEDIATE,
                tags
            });
            return yield this.templateRepository.create(template);
        });
    }
    cloneTemplate(templateId, newName) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const template = yield this.templateRepository.findById(templateId);
            if (!template) {
                throw new Error(`Template with ID ${templateId} not found`);
            }
            let cloned = template.clone();
            if (newName) {
                cloned = cloned.updateMetadata({
                    name: newName
                });
            }
            return yield this.templateRepository.create(cloned);
        });
    }
    deleteTemplate(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const template = yield this.templateRepository.findById(id);
            if (!template) {
                return false;
            }
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot delete built-in templates');
            }
            return yield this.templateRepository.delete(id);
        });
    }
    instantiateTemplate(template) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const validation = template.validateParameters();
            if (!validation.isValid) {
                throw new Error(`Template parameters are invalid: ${validation.errors.join(', ')}`);
            }
            yield this.templateRepository.recordUsage(template.getId());
            const instantiated = template.instantiate({});
            return {
                nodes: ((_b = (_a = instantiated.layout) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.map(node => {
                    // Convert serialized nodes back to VisualQueryNode instances
                    return new VisualQueryNode_1.VisualQueryNode({
                        id: node.id,
                        type: node.type,
                        label: node.label,
                        position: node.position,
                        variableName: node.variableName,
                        uri: node.uri,
                        dimensions: node.dimensions
                    });
                })) || [],
                edges: ((_d = (_c = instantiated.layout) === null || _c === void 0 ? void 0 : _c.edges) === null || _d === void 0 ? void 0 : _d.map(edge => {
                    // Convert serialized edges back to VisualQueryEdge instances
                    return new VisualQueryEdge_1.VisualQueryEdge({
                        id: edge.id,
                        sourceNodeId: edge.sourceNodeId,
                        targetNodeId: edge.targetNodeId,
                        type: edge.type,
                        label: edge.label,
                        propertyUri: edge.propertyUri
                    });
                })) || []
            };
        });
    }
    exportTemplates(templateIds) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const templates = yield this.templateRepository.exportTemplates(templateIds);
            return JSON.stringify(templates, null, 2);
        });
    }
    importTemplates(jsonData) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const templatesData = JSON.parse(jsonData);
                if (!Array.isArray(templatesData)) {
                    throw new Error('Invalid JSON format: expected array of templates');
                }
                return yield this.templateRepository.importTemplates(templatesData);
            }
            catch (error) {
                throw new Error(`Failed to import templates: ${error.message}`);
            }
        });
    }
    getUsageStatistics(templateId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield this.templateRepository.getUsageStats(templateId);
        });
    }
    updateTemplateMetadata(templateId, updates) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const template = yield this.templateRepository.findById(templateId);
            if (!template) {
                throw new Error(`Template with ID ${templateId} not found`);
            }
            if (template.isBuiltInTemplate()) {
                throw new Error('Cannot modify built-in templates');
            }
            const updatedTemplate = template.updateMetadata(updates);
            return yield this.templateRepository.update(updatedTemplate);
        });
    }
    validateTemplateParameters(template) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const validation = template.validateParameters();
            const parameters = template.getParameters();
            const parameterValues = template.getParameterValues();
            const missingParameters = [];
            const invalidParameters = [];
            parameters.forEach(param => {
                const paramId = param.id || `param_${param.name}`;
                if (param.required && !parameterValues.has(paramId)) {
                    missingParameters.push(param.name);
                }
                const value = parameterValues.get(paramId);
                if (value && param.constraints) {
                    // Additional validation could be added here
                }
            });
            return {
                isValid: validation.isValid,
                errors: validation.errors,
                missingParameters,
                invalidParameters
            };
        });
    }
    getTemplatePreview(templateId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const template = yield this.templateRepository.findById(templateId);
            if (!template) {
                throw new Error(`Template with ID ${templateId} not found`);
            }
            const layout = template.getLayout();
            const parameters = template.getParameters();
            const nodeCount = layout.nodes.length;
            const edgeCount = layout.edges.length;
            // Determine complexity based on various factors
            let complexity = 'simple';
            const totalElements = nodeCount + edgeCount + parameters.length;
            if (totalElements <= 5) {
                complexity = 'simple';
            }
            else if (totalElements <= 10) {
                complexity = 'moderate';
            }
            else {
                complexity = 'complex';
            }
            // Generate example SPARQL if pattern is available
            let sparqlQuery = template.getMetadata().sparqlPattern || '';
            // Replace parameter placeholders with example values
            parameters.forEach(param => {
                const paramId = param.id || `param_${param.name}`;
                const placeholder = `{${paramId.toUpperCase()}}`;
                const exampleValue = param.defaultValue || `{${param.name}}`;
                sparqlQuery = sparqlQuery.replace(new RegExp(placeholder, 'g'), exampleValue);
            });
            return {
                sparqlQuery,
                nodeCount,
                edgeCount,
                parameterCount: parameters.length,
                complexity
            };
        });
    }
    refreshTemplateCache() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.templateRepository.refresh();
        });
    }
}
exports.QueryTemplateUseCase = QueryTemplateUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,