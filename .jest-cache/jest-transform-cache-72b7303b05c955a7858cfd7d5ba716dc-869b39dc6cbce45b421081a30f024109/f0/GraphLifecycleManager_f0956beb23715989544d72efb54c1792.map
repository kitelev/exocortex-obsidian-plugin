{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/GraphLifecycleManager.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/infrastructure/lifecycle/GraphLifecycleManager.ts"],"sourcesContent":["import { Plugin, TFile, Notice } from \"obsidian\";\nimport { ILifecycleManager } from \"../../application/ports/ILifecycleManager\";\nimport { Graph } from \"../../domain/semantic/core/Graph\";\nimport { Triple, IRI, Literal } from \"../../domain/semantic/core/Triple\";\n\n/**\n * Callback type for cache invalidation\n */\ntype CacheInvalidationCallback = () => void;\n\n/**\n * Graph Lifecycle Manager following Pure Fabrication Pattern (GRASP)\n * Single Responsibility: Manage knowledge graph lifecycle and file synchronization\n */\nexport class GraphLifecycleManager implements ILifecycleManager {\n  private graph: Graph;\n  private cacheInvalidationCallback?: CacheInvalidationCallback;\n\n  constructor(private readonly plugin: Plugin) {\n    this.graph = new Graph();\n  }\n\n  async initialize(): Promise<void> {\n    // Load vault data into graph\n    try {\n      await this.loadVaultIntoGraph();\n    } catch (error) {\n      // Vault loading failed - plugin should still function\n      console.warn(\"Failed to load vault into graph:\", error);\n    }\n\n    // Register file modification handlers\n    this.registerFileHandlers();\n\n    new Notice(\"üîç Exocortex: Knowledge graph loaded!\");\n  }\n\n  async cleanup(): Promise<void> {\n    if (this.graph) {\n      this.graph.clear();\n    }\n  }\n\n  getManagerId(): string {\n    return \"GraphLifecycleManager\";\n  }\n\n  getGraph(): Graph {\n    return this.graph;\n  }\n\n  /**\n   * Set callback for cache invalidation when graph changes\n   */\n  setCacheInvalidationCallback(callback: CacheInvalidationCallback): void {\n    this.cacheInvalidationCallback = callback;\n  }\n\n  private async loadVaultIntoGraph(): Promise<void> {\n    // Loading vault data\n    const startTime = Date.now();\n    let triplesCount = 0;\n\n    try {\n      const files = this.plugin.app.vault.getMarkdownFiles();\n\n      for (const file of files) {\n        try {\n          const content = await this.plugin.app.vault.read(file);\n          const triples = this.extractTriplesFromFile(file, content);\n\n          for (const triple of triples) {\n            this.graph.add(triple);\n            triplesCount++;\n          }\n        } catch (err) {\n          // File processing failed - continue with next file\n        }\n      }\n    } catch (err) {\n      // Vault access failed - plugin should still function\n      console.warn(\n        \"Failed to access vault files during graph initialization:\",\n        err,\n      );\n      new Notice(\"Exocortex: Unable to load vault files into graph\");\n      return;\n    }\n\n    const loadTime = Date.now() - startTime;\n    // Vault data loaded\n  }\n\n  private registerFileHandlers(): void {\n    // Register file modification handler to update graph\n    this.plugin.registerEvent(\n      this.plugin.app.vault.on(\"modify\", async (file) => {\n        if (file instanceof TFile && file.extension === \"md\") {\n          await this.updateFileInGraph(file);\n        }\n      }),\n    );\n\n    // Register file creation handler\n    this.plugin.registerEvent(\n      this.plugin.app.vault.on(\"create\", async (file) => {\n        if (file instanceof TFile && file.extension === \"md\") {\n          await this.updateFileInGraph(file);\n        }\n      }),\n    );\n\n    // Register file deletion handler\n    this.plugin.registerEvent(\n      this.plugin.app.vault.on(\"delete\", async (file) => {\n        if (file instanceof TFile && file.extension === \"md\") {\n          this.removeFileFromGraph(file);\n        }\n      }),\n    );\n  }\n\n  private async updateFileInGraph(file: TFile): Promise<void> {\n    try {\n      // Remove old triples for this file\n      this.removeFileFromGraph(file);\n\n      // Add new triples\n      const content = await this.plugin.app.vault.read(file);\n      const triples = this.extractTriplesFromFile(file, content);\n\n      for (const triple of triples) {\n        this.graph.add(triple);\n      }\n\n      // Invalidate cache when graph changes\n      this.cacheInvalidationCallback?.();\n    } catch (err) {\n      // File update failed\n    }\n  }\n\n  private removeFileFromGraph(file: TFile): void {\n    const subject = new IRI(`file://${file.basename}`);\n    const triplesToRemove = this.graph.match(subject, null, null);\n\n    for (const triple of triplesToRemove) {\n      this.graph.remove(triple);\n    }\n\n    // Invalidate cache when graph changes\n    this.cacheInvalidationCallback?.();\n  }\n\n  private extractTriplesFromFile(file: TFile, content: string): Triple[] {\n    const triples: Triple[] = [];\n    const subject = new IRI(`file://${file.basename}`);\n\n    // Extract frontmatter\n    const frontmatterMatch = content.match(/^---\\n([\\s\\S]*?)\\n---/);\n\n    if (frontmatterMatch) {\n      const frontmatter = this.parseFrontmatter(frontmatterMatch[1]);\n\n      for (const [key, value] of Object.entries(frontmatter)) {\n        if (Array.isArray(value)) {\n          for (const v of value) {\n            triples.push(\n              new Triple(subject, new IRI(key), Literal.string(String(v))),\n            );\n          }\n        } else if (value !== null && value !== undefined) {\n          triples.push(\n            new Triple(subject, new IRI(key), Literal.string(String(value))),\n          );\n        }\n      }\n    }\n\n    // Add basic file metadata\n    triples.push(\n      new Triple(subject, new IRI(\"file_path\"), Literal.string(file.path)),\n    );\n\n    triples.push(\n      new Triple(subject, new IRI(\"file_name\"), Literal.string(file.name)),\n    );\n\n    return triples;\n  }\n\n  private parseFrontmatter(yaml: string): Record<string, any> {\n    const result: Record<string, any> = {};\n    const lines = yaml.split(\"\\n\");\n    let currentKey: string | null = null;\n    let currentValue: any = null;\n    let inArray = false;\n\n    for (const line of lines) {\n      const trimmed = line.trim();\n\n      if (!trimmed) continue;\n\n      // Check for array item\n      if (line.startsWith(\"  - \") || line.startsWith(\"    - \")) {\n        if (currentKey && inArray) {\n          const value = line.substring(line.indexOf(\"- \") + 2).trim();\n          const cleanValue = value\n            .replace(/^[\"']|[\"']$/g, \"\")\n            .replace(/\\[\\[|\\]\\]/g, \"\");\n          if (!Array.isArray(currentValue)) {\n            currentValue = [];\n          }\n          currentValue.push(cleanValue);\n        }\n        continue;\n      }\n\n      // Check for key:value pair\n      if (trimmed.includes(\":\")) {\n        // Save previous key-value if exists\n        if (currentKey !== null && currentValue !== null) {\n          result[currentKey] = currentValue;\n        }\n\n        const colonIndex = trimmed.indexOf(\":\");\n        currentKey = trimmed.substring(0, colonIndex).trim();\n        const valueStr = trimmed.substring(colonIndex + 1).trim();\n\n        if (!valueStr) {\n          // Value will be on next lines (array)\n          inArray = true;\n          currentValue = [];\n        } else {\n          // Single value\n          inArray = false;\n          currentValue = valueStr\n            .replace(/^[\"']|[\"']$/g, \"\")\n            .replace(/\\[\\[|\\]\\]/g, \"\");\n        }\n      }\n    }\n\n    // Save last key-value\n    if (currentKey !== null && currentValue !== null) {\n      result[currentKey] = currentValue;\n    }\n\n    return result;\n  }\n}\n"],"version":3}