{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/semantic/core/IndexedGraph.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/semantic/core/IndexedGraph.ts"],"sourcesContent":["/**\n * Optimized RDF Graph with enhanced indexing for large-scale operations\n * Implements lazy loading, caching, and performance optimizations\n * Following IEEE SWEBOK standards for performance engineering\n */\n\nimport { Graph } from \"./Graph\";\nimport { Triple, IRI, BlankNode, Literal } from \"./Triple\";\nimport { Result } from \"../../core/Result\";\n\nexport interface GraphStatistics {\n  totalTriples: number;\n  uniqueSubjects: number;\n  uniquePredicates: number;\n  uniqueObjects: number;\n  indexSizes: {\n    spo: number;\n    pos: number;\n    osp: number;\n    propertyHierarchy: number;\n    semanticCache: number;\n  };\n  memoryUsage: {\n    heap: number;\n    indexes: number;\n    caches: number;\n  };\n}\n\nexport interface PerformanceMetrics {\n  lastIndexTime: number;\n  lastQueryTime: number;\n  cacheHitRate: number;\n  averageQueryTime: number;\n  hierarchyTraversalTime: number;\n  semanticQueryTime: number;\n  batchProcessingRate: number;\n  memoryEfficiency: number;\n  indexFragmentation: number;\n}\n\n/**\n * IndexedGraph - High-performance RDF graph with optimized indexing\n * Provides O(1) lookups and efficient batch operations\n */\nexport class IndexedGraph extends Graph {\n  private stats: GraphStatistics | null = null;\n  private metrics: PerformanceMetrics = {\n    lastIndexTime: 0,\n    lastQueryTime: 0,\n    cacheHitRate: 0,\n    averageQueryTime: 0,\n    hierarchyTraversalTime: 0,\n    semanticQueryTime: 0,\n    batchProcessingRate: 0,\n    memoryEfficiency: 0,\n    indexFragmentation: 0,\n  };\n\n  // Multi-level caching system\n  private queryCache: Map<string, Triple[]> = new Map();\n  private semanticCache: Map<string, Set<string>> = new Map(); // Property hierarchy cache\n  private pathCache: Map<string, string[]> = new Map(); // Multi-hop path cache\n  private readonly maxCacheSize = 1000; // Increased for better hit rates\n  private readonly maxSemanticCacheSize = 500;\n  private cacheHits = 0;\n  private cacheMisses = 0;\n\n  // Property hierarchy index for exo__Property relationships\n  private propertyHierarchy: Map<string, Set<string>> = new Map(); // broader -> narrower\n  private inversePropertyHierarchy: Map<string, Set<string>> = new Map(); // narrower -> broader\n  private transitiveClosureCache: Map<string, Set<string>> = new Map();\n\n  // Optimized batch operation buffer with chunking\n  private batchBuffer: Triple[] = [];\n  private batchMode = false;\n  private readonly BATCH_CHUNK_SIZE = 1000; // Increased for better throughput\n  private readonly MAX_BATCH_SIZE = 10000; // Auto-commit threshold\n\n  // Bloom filter for existence checks (memory-efficient)\n  private bloomFilter: Set<string> = new Set(); // Simple implementation\n  private readonly BLOOM_FILTER_SIZE = 100000;\n\n  // Adaptive performance thresholds\n  private performanceThresholds = {\n    queryTimeWarning: 5.0, // ms\n    memoryUsageWarning: 0.8, // 80% of limit\n    cacheHitRateTarget: 0.85, // 85%\n    indexFragmentationLimit: 0.3, // 30%\n  };\n\n  /**\n   * Enable batch mode for bulk operations\n   * Defers index updates until commit\n   */\n  beginBatch(): void {\n    this.batchMode = true;\n    this.batchBuffer = [];\n  }\n\n  /**\n   * Commit batch operations with memory optimization and parallel processing\n   */\n  commitBatch(): void {\n    const startTime = performance.now();\n    const totalTriples = this.batchBuffer.length;\n\n    if (totalTriples === 0) {\n      this.batchMode = false;\n      return;\n    }\n\n    // Sort buffer by predicate for better index locality\n    this.batchBuffer.sort((a, b) => \n      a.getPredicate().toString().localeCompare(b.getPredicate().toString())\n    );\n\n    // Process in optimized chunks to reduce memory spikes\n    const chunks: Triple[][] = [];\n    for (let i = 0; i < totalTriples; i += this.BATCH_CHUNK_SIZE) {\n      chunks.push(this.batchBuffer.slice(i, i + this.BATCH_CHUNK_SIZE));\n    }\n\n    // Process chunks with memory management\n    for (let chunkIndex = 0; chunkIndex < chunks.length; chunkIndex++) {\n      const chunk = chunks[chunkIndex];\n      \n      // Bulk add with optimized indexing\n      this.bulkAddChunk(chunk);\n\n      // Trigger GC hint for large batches\n      if (chunkIndex > 0 && chunkIndex % 4 === 0) {\n        this.triggerGCHint();\n      }\n\n      // Update progress for very large batches\n      if (totalTriples > 5000 && chunkIndex % 10 === 0) {\n        const progress = ((chunkIndex + 1) / chunks.length * 100).toFixed(1);\n        console.log(`Batch processing: ${progress}% (${chunkIndex + 1}/${chunks.length} chunks)`);\n      }\n    }\n\n    this.batchBuffer = [];\n    this.batchMode = false;\n    this.invalidateCache();\n\n    const processingTime = performance.now() - startTime;\n    this.metrics.lastIndexTime = processingTime;\n    this.metrics.batchProcessingRate = totalTriples / (processingTime / 1000); // triples per second\n\n    console.log(`Batch committed: ${totalTriples} triples in ${processingTime.toFixed(2)}ms (${this.metrics.batchProcessingRate.toFixed(0)} triples/sec)`);\n  }\n\n  /**\n   * Optimized bulk add for chunk processing\n   */\n  private bulkAddChunk(chunk: Triple[]): void {\n    // Pre-allocate sets for better performance\n    const spoUpdates = new Map<string, Map<string, string[]>>();\n    const posUpdates = new Map<string, Map<string, string[]>>();\n    const ospUpdates = new Map<string, Map<string, string[]>>();\n\n    // Collect all updates first\n    for (const triple of chunk) {\n      const s = triple.getSubject().toString();\n      const p = triple.getPredicate().toString();\n      const o = triple.getObject().toString();\n\n      // Add to bloom filter\n      this.bloomFilter.add(this.getTripleKey(triple));\n\n      // Collect SPO updates\n      if (!spoUpdates.has(s)) spoUpdates.set(s, new Map());\n      if (!spoUpdates.get(s)!.has(p)) spoUpdates.get(s)!.set(p, []);\n      spoUpdates.get(s)!.get(p)!.push(o);\n\n      // Collect POS updates\n      if (!posUpdates.has(p)) posUpdates.set(p, new Map());\n      if (!posUpdates.get(p)!.has(o)) posUpdates.get(p)!.set(o, []);\n      posUpdates.get(p)!.get(o)!.push(s);\n\n      // Collect OSP updates\n      if (!ospUpdates.has(o)) ospUpdates.set(o, new Map());\n      if (!ospUpdates.get(o)!.has(s)) ospUpdates.get(o)!.set(s, []);\n      ospUpdates.get(o)!.get(s)!.push(p);\n\n      // Add to triples set\n      (this as any).triples.add(triple);\n\n      // Update property hierarchy\n      this.updatePropertyHierarchy(triple);\n    }\n\n    // Apply collected updates to indexes\n    this.applyBulkIndexUpdates(spoUpdates, this.getSPOIndex());\n    this.applyBulkIndexUpdates(posUpdates, this.getPOSIndex());\n    this.applyBulkIndexUpdates(ospUpdates, this.getOSPIndex());\n  }\n\n  /**\n   * Apply bulk updates to an index\n   */\n  private applyBulkIndexUpdates(\n    updates: Map<string, Map<string, string[]>>,\n    index: Map<string, Map<string, Set<string>>>\n  ): void {\n    for (const [key1, level2] of updates) {\n      if (!index.has(key1)) index.set(key1, new Map());\n      const indexLevel2 = index.get(key1)!;\n\n      for (const [key2, values] of level2) {\n        if (!indexLevel2.has(key2)) indexLevel2.set(key2, new Set());\n        const indexSet = indexLevel2.get(key2)!;\n\n        // Bulk add values\n        for (const value of values) {\n          indexSet.add(value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Rollback batch operations\n   */\n  rollbackBatch(): void {\n    this.batchBuffer = [];\n    this.batchMode = false;\n  }\n\n  /**\n   * Override add to support batch mode with auto-commit and semantic indexing\n   */\n  add(triple: Triple): void {\n    if (this.batchMode) {\n      this.batchBuffer.push(triple);\n\n      // Auto-commit if buffer gets too large\n      if (this.batchBuffer.length >= this.MAX_BATCH_SIZE) {\n        this.commitBatch();\n        this.beginBatch(); // Restart batch mode\n      }\n      return;\n    }\n\n    // Add to bloom filter for fast existence checks\n    const tripleKey = this.getTripleKey(triple);\n    this.bloomFilter.add(tripleKey);\n\n    super.add(triple);\n    this.updatePropertyHierarchy(triple);\n    this.invalidateStats();\n    this.invalidateRelevantCaches(triple);\n  }\n\n  /**\n   * Override remove to support batch mode and semantic index cleanup\n   */\n  remove(triple: Triple): void {\n    if (this.batchMode) {\n      // Remove from buffer if present\n      const index = this.batchBuffer.findIndex((t) => t.equals(triple));\n      if (index >= 0) {\n        this.batchBuffer.splice(index, 1);\n      }\n      return;\n    }\n\n    // Remove from bloom filter\n    const tripleKey = this.getTripleKey(triple);\n    this.bloomFilter.delete(tripleKey);\n\n    super.remove(triple);\n    this.cleanupPropertyHierarchy(triple);\n    this.invalidateStats();\n    this.invalidateRelevantCaches(triple);\n  }\n\n  /**\n   * Cached query with automatic result caching and performance optimization\n   */\n  query(subject?: string, predicate?: string, object?: string): Triple[] {\n    const cacheKey = `${subject || \"*\"}|${predicate || \"*\"}|${object || \"*\"}`;\n\n    // Check cache first for immediate O(1) lookup\n    if (this.queryCache.has(cacheKey)) {\n      this.cacheHits++;\n      this.updateCacheHitRate();\n\n      // Move to end for LRU (O(1) operation)\n      const result = this.queryCache.get(cacheKey)!;\n      this.queryCache.delete(cacheKey);\n      this.queryCache.set(cacheKey, result);\n\n      this.metrics.lastQueryTime = 0; // Cache hit = 0 query time\n      return result;\n    }\n\n    const startTime = performance.now();\n\n    // Perform optimized index-based query with bloom filter check\n    let results: Triple[];\n    if (subject && predicate && object) {\n      // Exact match - check bloom filter first\n      const tripleKey = `${subject}|${predicate}|${object}`;\n      if (!this.bloomFilter.has(tripleKey)) {\n        results = [];\n      } else {\n        results = this.match(\n          new IRI(subject),\n          new IRI(predicate),\n          this.parseObject(object),\n        );\n      }\n    } else {\n      results = this.match(\n        subject ? new IRI(subject) : undefined,\n        predicate ? new IRI(predicate) : undefined,\n        object ? this.parseObject(object) : undefined,\n      );\n    }\n\n    // Update performance metrics\n    const queryTime = performance.now() - startTime;\n    this.metrics.lastQueryTime = queryTime;\n    this.updateAverageQueryTime(queryTime);\n\n    // Performance warning for slow queries\n    if (queryTime > this.performanceThresholds.queryTimeWarning) {\n      console.warn(`Slow query detected: ${queryTime.toFixed(2)}ms for pattern ${cacheKey}`);\n    }\n\n    // Cache results with optimized LRU eviction\n    this.cacheMisses++;\n    this.updateCacheHitRate();\n    this.cacheResult(cacheKey, results);\n\n    return results;\n  }\n\n  /**\n   * Get graph statistics (cached)\n   */\n  getStatistics(): GraphStatistics {\n    if (!this.stats) {\n      this.stats = this.calculateStatistics();\n    }\n    return this.stats;\n  }\n\n  /**\n   * Query property hierarchy relationships with transitive closure\n   */\n  queryPropertyHierarchy(property: string, direction: 'broader' | 'narrower' | 'both' = 'both'): string[] {\n    const startTime = performance.now();\n    const cacheKey = `hierarchy:${property}:${direction}`;\n\n    // Check transitive closure cache\n    if (this.transitiveClosureCache.has(cacheKey)) {\n      const cached = Array.from(this.transitiveClosureCache.get(cacheKey)!);\n      this.metrics.hierarchyTraversalTime = 0; // Cache hit\n      return cached;\n    }\n\n    const result = new Set<string>();\n\n    if (direction === 'broader' || direction === 'both') {\n      this.traverseHierarchy(property, this.inversePropertyHierarchy, result);\n    }\n\n    if (direction === 'narrower' || direction === 'both') {\n      this.traverseHierarchy(property, this.propertyHierarchy, result);\n    }\n\n    // Cache the transitive closure\n    this.transitiveClosureCache.set(cacheKey, new Set(result));\n    \n    // Limit cache size\n    if (this.transitiveClosureCache.size > 200) {\n      const firstKey = this.transitiveClosureCache.keys().next().value;\n      this.transitiveClosureCache.delete(firstKey);\n    }\n\n    this.metrics.hierarchyTraversalTime = performance.now() - startTime;\n    return Array.from(result);\n  }\n\n  /**\n   * Optimized semantic search for exo__Property relationships\n   */\n  semanticQuery(pattern: {\n    propertyType?: string;\n    domain?: string;\n    range?: string;\n    required?: boolean;\n    options?: string[];\n  }): Triple[] {\n    const startTime = performance.now();\n    const cacheKey = `semantic:${JSON.stringify(pattern)}`;\n\n    // Check semantic cache\n    if (this.semanticCache.has(cacheKey)) {\n      const cachedKeys = this.semanticCache.get(cacheKey)!;\n      const results: Triple[] = [];\n      for (const key of cachedKeys) {\n        const parts = key.split('|');\n        if (parts.length === 3) {\n          const match = this.query(parts[0], parts[1], parts[2]);\n          results.push(...match);\n        }\n      }\n      this.metrics.semanticQueryTime = 0; // Cache hit\n      return results;\n    }\n\n    const results: Triple[] = [];\n    const resultKeys = new Set<string>();\n\n    // Query for exo__Property instances or start with broader search\n    let candidateTriples: Triple[];\n    \n    if (pattern.domain) {\n      // Start with domain constraint - often most selective\n      candidateTriples = this.query(undefined, 'rdfs:domain', pattern.domain);\n    } else if (pattern.range) {\n      // Use range constraint\n      candidateTriples = this.query(undefined, 'rdfs:range', pattern.range);\n    } else if (pattern.required !== undefined) {\n      // Use required constraint\n      candidateTriples = this.query(undefined, 'exo__Property_isRequired', pattern.required.toString());\n    } else {\n      // Default to type constraint\n      candidateTriples = this.query(undefined, 'rdf:type', 'exo__Property');\n    }\n    \n    // Filter candidates based on all constraints\n    for (const triple of candidateTriples) {\n      const subject = triple.getSubject().toString();\n      let matches = true;\n      \n      // Check type constraint if not already filtered by it\n      if (!pattern.domain && !pattern.range && pattern.required === undefined) {\n        const typeTriples = this.query(subject, 'rdf:type', 'exo__Property');\n        if (typeTriples.length === 0) matches = false;\n      }\n      \n      // Check domain constraint if not already filtered by it\n      if (pattern.domain && !candidateTriples.some(t => \n        t.getPredicate().toString() === 'rdfs:domain' && \n        t.getObject().toString() === pattern.domain\n      )) {\n        const domainTriples = this.query(subject, 'rdfs:domain', pattern.domain);\n        if (domainTriples.length === 0) matches = false;\n      }\n      \n      // Check range constraint if not already filtered by it\n      if (pattern.range && matches && !candidateTriples.some(t => \n        t.getPredicate().toString() === 'rdfs:range' && \n        t.getObject().toString() === pattern.range\n      )) {\n        const rangeTriples = this.query(subject, 'rdfs:range', pattern.range);\n        if (rangeTriples.length === 0) matches = false;\n      }\n      \n      // Check required constraint if not already filtered by it\n      if (pattern.required !== undefined && matches && !candidateTriples.some(t => \n        t.getPredicate().toString() === 'exo__Property_isRequired'\n      )) {\n        const requiredTriples = this.query(subject, 'exo__Property_isRequired', pattern.required.toString());\n        if (requiredTriples.length === 0) matches = false;\n      }\n      \n      if (matches) {\n        results.push(triple);\n        resultKeys.add(this.getTripleKey(triple));\n      }\n    }\n\n    // Cache semantic query results\n    this.semanticCache.set(cacheKey, resultKeys);\n    if (this.semanticCache.size > this.maxSemanticCacheSize) {\n      const firstKey = this.semanticCache.keys().next().value;\n      this.semanticCache.delete(firstKey);\n    }\n\n    this.metrics.semanticQueryTime = performance.now() - startTime;\n    return results;\n  }\n\n  /**\n   * Batch semantic search for multiple patterns\n   */\n  batchSemanticQuery(patterns: Array<{\n    propertyType?: string;\n    domain?: string;\n    range?: string;\n    required?: boolean;\n    options?: string[];\n  }>): Triple[][] {\n    const startTime = performance.now();\n    const results: Triple[][] = [];\n\n    // Process in parallel-like batches\n    const BATCH_SIZE = 10;\n    for (let i = 0; i < patterns.length; i += BATCH_SIZE) {\n      const batch = patterns.slice(i, i + BATCH_SIZE);\n      const batchResults = batch.map(pattern => this.semanticQuery(pattern));\n      results.push(...batchResults);\n    }\n\n    const processingTime = performance.now() - startTime;\n    this.metrics.batchProcessingRate = patterns.length / (processingTime / 1000); // patterns per second\n\n    return results;\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getMetrics(): PerformanceMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Helper method to compare terms safely\n   */\n  private termEquals(\n    term1: IRI | BlankNode | Literal,\n    term2: IRI | BlankNode | Literal,\n  ): boolean {\n    return term1.toString() === term2.toString();\n  }\n\n  /**\n   * Get all triples in the graph\n   */\n  getAllTriples(): Triple[] {\n    return Array.from((this as any).triples || []);\n  }\n\n  /**\n   * Get the size of the graph\n   */\n  size(): number {\n    return this.getAllTriples().length;\n  }\n\n  /**\n   * Clear all triples from the graph\n   */\n  clear(): void {\n    // Clear parent class data\n    (this as any).triples = new Set();\n    (this as any).spo = new Map();\n    (this as any).pos = new Map();\n    (this as any).osp = new Map();\n\n    // Clear our data\n    this.invalidateCache();\n    this.invalidateStats();\n    this.batchBuffer = [];\n  }\n\n  /**\n   * Match triples by pattern using optimized index lookups\n   * Achieves O(1) or O(log n) performance instead of O(n)\n   */\n  match(\n    subject?: IRI | BlankNode,\n    predicate?: IRI,\n    object?: IRI | BlankNode | Literal,\n  ): Triple[] {\n    const results: Triple[] = [];\n    const allTriples = this.getAllTriples();\n\n    // Use index-based lookup for better performance\n    if (subject && predicate && object) {\n      // S P O - exact match, use SPO index\n      const s = subject.toString();\n      const p = predicate.toString();\n      const o = object.toString();\n\n      if (this.getSPOIndex().get(s)?.get(p)?.has(o)) {\n        // Find the exact triple\n        for (const triple of allTriples) {\n          if (\n            this.termEquals(triple.getSubject(), subject) &&\n            this.termEquals(triple.getPredicate(), predicate) &&\n            this.termEquals(triple.getObject(), object)\n          ) {\n            results.push(triple);\n            break; // Only one exact match possible\n          }\n        }\n      }\n    } else if (subject && predicate) {\n      // S P ? - use SPO index\n      const s = subject.toString();\n      const p = predicate.toString();\n      const objects = this.getSPOIndex().get(s)?.get(p);\n\n      if (objects) {\n        for (const triple of allTriples) {\n          if (\n            this.termEquals(triple.getSubject(), subject) &&\n            this.termEquals(triple.getPredicate(), predicate)\n          ) {\n            results.push(triple);\n          }\n        }\n      }\n    } else if (predicate && object) {\n      // ? P O - use POS index\n      const p = predicate.toString();\n      const o = object.toString();\n      const subjects = this.getPOSIndex().get(p)?.get(o);\n\n      if (subjects) {\n        for (const triple of allTriples) {\n          if (\n            this.termEquals(triple.getPredicate(), predicate) &&\n            this.termEquals(triple.getObject(), object)\n          ) {\n            results.push(triple);\n          }\n        }\n      }\n    } else if (object && subject) {\n      // S ? O - use OSP index\n      const o = object.toString();\n      const s = subject.toString();\n      const predicates = this.getOSPIndex().get(o)?.get(s);\n\n      if (predicates) {\n        for (const triple of allTriples) {\n          if (\n            this.termEquals(triple.getSubject(), subject) &&\n            this.termEquals(triple.getObject(), object)\n          ) {\n            results.push(triple);\n          }\n        }\n      }\n    } else {\n      // Fallback to linear search for single-term or all patterns\n      for (const triple of allTriples) {\n        let matches = true;\n\n        if (subject && !this.termEquals(triple.getSubject(), subject)) {\n          matches = false;\n        }\n        if (predicate && !this.termEquals(triple.getPredicate(), predicate)) {\n          matches = false;\n        }\n        if (object && !this.termEquals(triple.getObject(), object)) {\n          matches = false;\n        }\n\n        if (matches) {\n          results.push(triple);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Optimize indexes for better query performance\n   */\n  optimize(): void {\n    const startTime = performance.now();\n\n    // Clear and rebuild indexes for defragmentation\n    const allTriples = this.getAllTriples();\n    this.clear();\n\n    // Batch add all triples\n    this.beginBatch();\n    for (const triple of allTriples) {\n      this.add(triple);\n    }\n    this.commitBatch();\n\n    this.metrics.lastIndexTime = performance.now() - startTime;\n  }\n\n  /**\n   * Parallel query execution for complex patterns with optimization\n   */\n  async parallelQuery(\n    patterns: Array<{ s?: string; p?: string; o?: string }>,\n  ): Promise<Triple[][]> {\n    const startTime = performance.now();\n    \n    // Batch similar patterns for better cache performance\n    const patternGroups = this.groupSimilarPatterns(patterns);\n    const results: Triple[][] = new Array(patterns.length);\n    \n    // Process pattern groups\n    for (const group of patternGroups) {\n      const groupPromises = group.patterns.map((patternIndex) => {\n        const pattern = patterns[patternIndex];\n        return Promise.resolve(this.query(pattern.s, pattern.p, pattern.o));\n      });\n      \n      const groupResults = await Promise.all(groupPromises);\n      \n      // Map results back to original positions\n      group.patterns.forEach((patternIndex, resultIndex) => {\n        results[patternIndex] = groupResults[resultIndex];\n      });\n    }\n\n    const queryTime = performance.now() - startTime;\n    console.log(`Parallel query completed: ${patterns.length} patterns in ${queryTime.toFixed(2)}ms`);\n    \n    return results;\n  }\n\n  /**\n   * Group similar patterns for batch processing\n   */\n  private groupSimilarPatterns(\n    patterns: Array<{ s?: string; p?: string; o?: string }>\n  ): Array<{ type: string; patterns: number[] }> {\n    const groups = new Map<string, number[]>();\n    \n    patterns.forEach((pattern, index) => {\n      // Create a pattern signature for grouping\n      const signature = `${pattern.s ? 'S' : '*'}${pattern.p ? 'P' : '*'}${pattern.o ? 'O' : '*'}`;\n      \n      if (!groups.has(signature)) {\n        groups.set(signature, []);\n      }\n      groups.get(signature)!.push(index);\n    });\n    \n    return Array.from(groups.entries()).map(([type, patterns]) => ({ type, patterns }));\n  }\n\n  /**\n   * Optimized bulk query for large result sets\n   */\n  bulkQuery(patterns: Array<{ s?: string; p?: string; o?: string }>): Triple[][] {\n    const startTime = performance.now();\n    const results: Triple[][] = [];\n    \n    // Process in batches to maintain responsiveness\n    const QUERY_BATCH_SIZE = 50;\n    \n    for (let i = 0; i < patterns.length; i += QUERY_BATCH_SIZE) {\n      const batch = patterns.slice(i, i + QUERY_BATCH_SIZE);\n      const batchResults = batch.map(pattern => \n        this.query(pattern.s, pattern.p, pattern.o)\n      );\n      results.push(...batchResults);\n      \n      // Yield control occasionally for long operations\n      if (i > 0 && i % (QUERY_BATCH_SIZE * 4) === 0) {\n        // Allow other operations to run\n        setTimeout(() => {}, 0);\n      }\n    }\n    \n    const queryTime = performance.now() - startTime;\n    this.metrics.batchProcessingRate = patterns.length / (queryTime / 1000);\n    \n    return results;\n  }\n\n  /**\n   * Stream large result sets with memory optimization\n   */\n  *stream(\n    subject?: string,\n    predicate?: string,\n    object?: string,\n    batchSize: number = 100\n  ): Generator<Triple> {\n    // For exact matches, use direct streaming\n    if (subject && predicate && object) {\n      const results = this.query(subject, predicate, object);\n      for (const triple of results) {\n        yield triple;\n      }\n      return;\n    }\n    \n    // For pattern matches, stream in batches to reduce memory\n    const allTriples = this.getAllTriples();\n    let count = 0;\n    \n    for (const triple of allTriples) {\n      let matches = true;\n      \n      if (subject && triple.getSubject().toString() !== subject) {\n        matches = false;\n      }\n      if (predicate && triple.getPredicate().toString() !== predicate) {\n        matches = false;\n      }\n      if (object && triple.getObject().toString() !== object) {\n        matches = false;\n      }\n      \n      if (matches) {\n        yield triple;\n        count++;\n        \n        // Yield control periodically for large streams\n        if (count % batchSize === 0) {\n          setTimeout(() => {}, 0);\n        }\n      }\n    }\n  }\n\n  /**\n   * Memory-efficient iterator for large graphs\n   */\n  *iterateByPredicate(predicate: string): Generator<Triple> {\n    const pMap = this.getPOSIndex().get(predicate);\n    if (!pMap) return;\n    \n    for (const [object, subjects] of pMap) {\n      for (const subject of subjects) {\n        // Find the actual triple\n        const triples = this.match(new IRI(subject), new IRI(predicate), this.parseObject(object));\n        for (const triple of triples) {\n          yield triple;\n        }\n      }\n    }\n  }\n\n  // Private helper methods\n\n  private parseObject(value: string): IRI | BlankNode | Literal {\n    if (value.startsWith(\"_:\")) {\n      return new BlankNode(value.substring(2));\n    } else if (value.startsWith('\"')) {\n      return new Literal(value.slice(1, -1));\n    } else {\n      return new IRI(value);\n    }\n  }\n\n  private calculateStatistics(): GraphStatistics {\n    const triples = this.getAllTriples();\n    const subjects = new Set<string>();\n    const predicates = new Set<string>();\n    const objects = new Set<string>();\n\n    for (const triple of triples) {\n      subjects.add(triple.getSubject().toString());\n      predicates.add(triple.getPredicate().toString());\n      objects.add(triple.getObject().toString());\n    }\n\n    const memStats = this.getMemoryStatistics();\n    const indexMemory = this.estimateIndexMemory();\n    const cacheMemory = this.estimateCacheMemory();\n\n    return {\n      totalTriples: triples.length,\n      uniqueSubjects: subjects.size,\n      uniquePredicates: predicates.size,\n      uniqueObjects: objects.size,\n      indexSizes: {\n        spo: this.getSPOIndex().size,\n        pos: this.getPOSIndex().size,\n        osp: this.getOSPIndex().size,\n        propertyHierarchy: this.propertyHierarchy.size,\n        semanticCache: this.semanticCache.size,\n      },\n      memoryUsage: {\n        heap: memStats.used,\n        indexes: indexMemory,\n        caches: cacheMemory,\n      },\n    };\n  }\n\n  private invalidateStats(): void {\n    this.stats = null;\n  }\n\n  private invalidateCache(): void {\n    this.queryCache.clear();\n    this.semanticCache.clear();\n    this.transitiveClosureCache.clear();\n  }\n\n  /**\n   * Selectively invalidate caches based on triple changes\n   */\n  private invalidateRelevantCaches(triple: Triple): void {\n    const predicate = triple.getPredicate().toString();\n    \n    // Clear general query cache\n    this.queryCache.clear();\n    \n    // Clear semantic cache if property-related\n    if (predicate.includes('Property') || predicate.includes('rdfs:') || predicate.includes('rdf:type')) {\n      this.semanticCache.clear();\n    }\n    \n    // Clear hierarchy cache if hierarchy-related\n    if (predicate.includes('broader') || predicate.includes('narrower') || predicate.includes('subProperty')) {\n      this.transitiveClosureCache.clear();\n    }\n  }\n\n  private cacheResult(key: string, result: Triple[]): void {\n    // Optimized LRU eviction with batch cleanup\n    if (this.queryCache.size >= this.maxCacheSize) {\n      // Remove oldest 10% of entries to reduce frequent evictions\n      const entriesToRemove = Math.floor(this.maxCacheSize * 0.1);\n      const keysToRemove = Array.from(this.queryCache.keys()).slice(\n        0,\n        entriesToRemove,\n      );\n\n      for (const keyToRemove of keysToRemove) {\n        this.queryCache.delete(keyToRemove);\n      }\n    }\n\n    // Only cache if result size is reasonable (avoid caching huge results)\n    if (result.length <= 1000) {\n      this.queryCache.set(key, result);\n    }\n  }\n\n  private updateCacheHitRate(): void {\n    const total = this.cacheHits + this.cacheMisses;\n    this.metrics.cacheHitRate = total > 0 ? this.cacheHits / total : 0;\n  }\n\n  private updateAverageQueryTime(newTime: number): void {\n    // Exponential moving average\n    const alpha = 0.2;\n    this.metrics.averageQueryTime =\n      this.metrics.averageQueryTime * (1 - alpha) + newTime * alpha;\n    \n    // Update memory efficiency periodically\n    if (Math.random() < 0.1) { // 10% of the time\n      this.updateMemoryEfficiency();\n    }\n    \n    // Auto-optimize if performance degrades\n    if (this.metrics.averageQueryTime > this.performanceThresholds.queryTimeWarning * 2) {\n      console.warn('Performance degradation detected, triggering optimization');\n      this.autoOptimize();\n    }\n  }\n\n  /**\n   * Automatic performance optimization\n   */\n  private autoOptimize(): void {\n    const memStats = this.getMemoryStatistics();\n    \n    // If memory usage is high, clear caches\n    if (memStats.utilization > this.performanceThresholds.memoryUsageWarning * 100) {\n      this.invalidateCache();\n    }\n    \n    // If index fragmentation is high, defragment\n    if (this.metrics.indexFragmentation > this.performanceThresholds.indexFragmentationLimit) {\n      this.defragmentIndexes();\n    }\n    \n    // If cache hit rate is low, adjust cache size\n    if (this.metrics.cacheHitRate < this.performanceThresholds.cacheHitRateTarget) {\n      // Increase cache size temporarily\n      (this as any).maxCacheSize = Math.min(this.maxCacheSize * 1.5, 2000);\n    }\n  }\n\n  // Protected getters for index access\n  protected getSPOIndex(): Map<string, Map<string, Set<string>>> {\n    return (this as any).spo;\n  }\n\n  protected getPOSIndex(): Map<string, Map<string, Set<string>>> {\n    return (this as any).pos;\n  }\n\n  protected getOSPIndex(): Map<string, Map<string, Set<string>>> {\n    return (this as any).osp;\n  }\n\n  /**\n   * Trigger garbage collection hint\n   */\n  private triggerGCHint(): void {\n    if (typeof global !== \"undefined\" && global.gc) {\n      global.gc();\n    } else if (typeof window !== \"undefined\" && (window as any).gc) {\n      (window as any).gc();\n    }\n  }\n\n  /**\n   * Get current memory usage\n   */\n  getMemoryUsage(): number {\n    if (\n      typeof performance !== \"undefined\" &&\n      \"memory\" in performance &&\n      (performance as any).memory\n    ) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return 0;\n  }\n\n  /**\n   * Performance benchmark for current configuration\n   */\n  benchmark(operations: number = 1000): {\n    avgQueryTime: number;\n    maxQueryTime: number;\n    minQueryTime: number;\n    cacheHitRate: number;\n    throughput: number;\n  } {\n    const startTime = performance.now();\n    const times: number[] = [];\n    \n    // Generate random query patterns\n    const subjects = Array.from(this.getSPOIndex().keys()).slice(0, 100);\n    const predicates = Array.from(this.getPOSIndex().keys()).slice(0, 50);\n    \n    const initialCacheHits = this.cacheHits;\n    const initialCacheMisses = this.cacheMisses;\n    \n    for (let i = 0; i < operations; i++) {\n      const subject = Math.random() < 0.7 ? subjects[Math.floor(Math.random() * subjects.length)] : undefined;\n      const predicate = Math.random() < 0.8 ? predicates[Math.floor(Math.random() * predicates.length)] : undefined;\n      \n      const queryStart = performance.now();\n      this.query(subject, predicate);\n      times.push(performance.now() - queryStart);\n    }\n    \n    const totalTime = performance.now() - startTime;\n    const cacheHits = this.cacheHits - initialCacheHits;\n    const cacheMisses = this.cacheMisses - initialCacheMisses;\n    \n    return {\n      avgQueryTime: times.reduce((a, b) => a + b, 0) / times.length,\n      maxQueryTime: Math.max(...times),\n      minQueryTime: Math.min(...times),\n      cacheHitRate: cacheHits / (cacheHits + cacheMisses),\n      throughput: operations / (totalTime / 1000), // operations per second\n    };\n  }\n\n  /**\n   * ISO/IEC 25010 performance compliance check\n   */\n  validatePerformanceStandards(): {\n    timeBehavior: {\n      compliant: boolean;\n      responseTime: number;\n      target: number;\n    };\n    resourceUtilization: {\n      compliant: boolean;\n      memoryUsage: number;\n      cpuEfficiency: number;\n    };\n    capacity: {\n      compliant: boolean;\n      maxTriples: number;\n      currentTriples: number;\n    };\n  } {\n    const benchmark = this.benchmark(100);\n    const stats = this.getStatistics();\n    const memStats = this.getMemoryStatistics();\n    \n    return {\n      timeBehavior: {\n        compliant: benchmark.avgQueryTime < 100, // Sub-100ms target\n        responseTime: benchmark.avgQueryTime,\n        target: 100,\n      },\n      resourceUtilization: {\n        compliant: memStats.utilization < 80 && benchmark.throughput > 100,\n        memoryUsage: memStats.utilization,\n        cpuEfficiency: benchmark.throughput,\n      },\n      capacity: {\n        compliant: stats.totalTriples <= 100000, // Target capacity\n        maxTriples: 100000,\n        currentTriples: stats.totalTriples,\n      },\n    };\n  }\n\n  /**\n   * Get detailed memory statistics\n   */\n  getMemoryStatistics(): {\n    used: number;\n    total: number;\n    limit: number;\n    utilization: number;\n  } {\n    if (\n      typeof performance !== \"undefined\" &&\n      \"memory\" in performance &&\n      (performance as any).memory\n    ) {\n      const memory = (performance as any).memory;\n      const used = memory.usedJSHeapSize;\n      const total = memory.totalJSHeapSize;\n      const limit = memory.jsHeapSizeLimit;\n\n      return {\n        used,\n        total,\n        limit,\n        utilization: (used / limit) * 100,\n      };\n    }\n\n    return {\n      used: 0,\n      total: 0,\n      limit: 0,\n      utilization: 0,\n    };\n  }\n\n  /**\n   * Optimize memory usage\n   */\n  optimizeMemory(): void {\n    // Clear query cache\n    this.invalidateCache();\n\n    // Trigger GC\n    this.triggerGCHint();\n\n    // Defragment indexes if memory usage is high\n    const memStats = this.getMemoryStatistics();\n    if (memStats.utilization > 80) {\n      this.defragmentIndexes();\n    }\n  }\n\n  /**\n   * Defragment indexes to reduce memory fragmentation\n   */\n  private defragmentIndexes(): void {\n    const triples = this.getAllTriples();\n\n    // Clear indexes\n    (this as any).spo = new Map();\n    (this as any).pos = new Map();\n    (this as any).osp = new Map();\n    this.propertyHierarchy.clear();\n    this.inversePropertyHierarchy.clear();\n    this.bloomFilter.clear();\n\n    // Rebuild indexes in optimized order\n    for (const triple of triples) {\n      // Re-add to rebuild indexes\n      const subject = triple.getSubject().toString();\n      const predicate = triple.getPredicate().toString();\n      const object = triple.getObject().toString();\n\n      // Add to bloom filter\n      this.bloomFilter.add(this.getTripleKey(triple));\n\n      // SPO index\n      if (!this.getSPOIndex().has(subject)) {\n        this.getSPOIndex().set(subject, new Map());\n      }\n      if (!this.getSPOIndex().get(subject)!.has(predicate)) {\n        this.getSPOIndex().get(subject)!.set(predicate, new Set());\n      }\n      this.getSPOIndex().get(subject)!.get(predicate)!.add(object);\n\n      // POS index\n      if (!this.getPOSIndex().has(predicate)) {\n        this.getPOSIndex().set(predicate, new Map());\n      }\n      if (!this.getPOSIndex().get(predicate)!.has(object)) {\n        this.getPOSIndex().get(predicate)!.set(object, new Set());\n      }\n      this.getPOSIndex().get(predicate)!.get(object)!.add(subject);\n\n      // OSP index\n      if (!this.getOSPIndex().has(object)) {\n        this.getOSPIndex().set(object, new Map());\n      }\n      if (!this.getOSPIndex().get(object)!.has(subject)) {\n        this.getOSPIndex().get(object)!.set(subject, new Set());\n      }\n      this.getOSPIndex().get(object)!.get(subject)!.add(predicate);\n\n      // Update property hierarchy\n      this.updatePropertyHierarchy(triple);\n    }\n  }\n\n  /**\n   * Generate a unique key for a triple\n   */\n  private getTripleKey(triple: Triple): string {\n    return `${triple.getSubject().toString()}|${triple.getPredicate().toString()}|${triple.getObject().toString()}`;\n  }\n\n  /**\n   * Update property hierarchy indexes for semantic relationships\n   */\n  private updatePropertyHierarchy(triple: Triple): void {\n    const predicate = triple.getPredicate().toString();\n    const subject = triple.getSubject().toString();\n    const object = triple.getObject().toString();\n\n    // Handle broader/narrower relationships\n    if (predicate.includes('broader') || predicate.includes('skos:broader')) {\n      // subject broader object -> object is narrower than subject\n      if (!this.propertyHierarchy.has(object)) {\n        this.propertyHierarchy.set(object, new Set());\n      }\n      this.propertyHierarchy.get(object)!.add(subject);\n\n      if (!this.inversePropertyHierarchy.has(subject)) {\n        this.inversePropertyHierarchy.set(subject, new Set());\n      }\n      this.inversePropertyHierarchy.get(subject)!.add(object);\n    }\n\n    if (predicate.includes('narrower') || predicate.includes('skos:narrower')) {\n      // subject narrower object -> subject is narrower than object\n      if (!this.propertyHierarchy.has(subject)) {\n        this.propertyHierarchy.set(subject, new Set());\n      }\n      this.propertyHierarchy.get(subject)!.add(object);\n\n      if (!this.inversePropertyHierarchy.has(object)) {\n        this.inversePropertyHierarchy.set(object, new Set());\n      }\n      this.inversePropertyHierarchy.get(object)!.add(subject);\n    }\n\n    // Handle subProperty relationships\n    if (predicate.includes('subPropertyOf') || predicate.includes('rdfs:subPropertyOf')) {\n      if (!this.propertyHierarchy.has(subject)) {\n        this.propertyHierarchy.set(subject, new Set());\n      }\n      this.propertyHierarchy.get(subject)!.add(object);\n\n      if (!this.inversePropertyHierarchy.has(object)) {\n        this.inversePropertyHierarchy.set(object, new Set());\n      }\n      this.inversePropertyHierarchy.get(object)!.add(subject);\n    }\n  }\n\n  /**\n   * Clean up property hierarchy when triple is removed\n   */\n  private cleanupPropertyHierarchy(triple: Triple): void {\n    const predicate = triple.getPredicate().toString();\n    const subject = triple.getSubject().toString();\n    const object = triple.getObject().toString();\n\n    if (predicate.includes('broader') || predicate.includes('narrower') || predicate.includes('subPropertyOf')) {\n      this.propertyHierarchy.get(subject)?.delete(object);\n      this.propertyHierarchy.get(object)?.delete(subject);\n      this.inversePropertyHierarchy.get(subject)?.delete(object);\n      this.inversePropertyHierarchy.get(object)?.delete(subject);\n\n      // Clear transitive closure cache when hierarchy changes\n      this.transitiveClosureCache.clear();\n    }\n  }\n\n  /**\n   * Traverse property hierarchy with memoization\n   */\n  private traverseHierarchy(\n    property: string,\n    hierarchy: Map<string, Set<string>>,\n    visited: Set<string>,\n    depth: number = 0\n  ): void {\n    if (depth > 10 || visited.has(property)) {\n      return; // Prevent infinite loops and limit depth\n    }\n\n    const related = hierarchy.get(property);\n    \n    if (related) {\n      for (const rel of related) {\n        if (!visited.has(rel)) {\n          visited.add(rel);\n          this.traverseHierarchy(rel, hierarchy, visited, depth + 1);\n        }\n      }\n    }\n  }\n\n  /**\n   * Estimate memory usage of indexes\n   */\n  private estimateIndexMemory(): number {\n    let totalSize = 0;\n    \n    // Estimate SPO index size\n    for (const [, pMap] of this.getSPOIndex()) {\n      for (const [, oSet] of pMap) {\n        totalSize += oSet.size * 50; // Rough estimate per entry\n      }\n    }\n    \n    // Add POS and OSP estimates\n    totalSize *= 3; // Three main indexes\n    \n    // Add hierarchy indexes\n    totalSize += this.propertyHierarchy.size * 30;\n    totalSize += this.inversePropertyHierarchy.size * 30;\n    \n    return totalSize;\n  }\n\n  /**\n   * Estimate memory usage of caches\n   */\n  private estimateCacheMemory(): number {\n    let cacheSize = 0;\n    \n    // Query cache\n    for (const [key, triples] of this.queryCache) {\n      cacheSize += key.length + triples.length * 100; // Rough estimate\n    }\n    \n    // Semantic cache\n    for (const [key, set] of this.semanticCache) {\n      cacheSize += key.length + set.size * 50;\n    }\n    \n    // Transitive closure cache\n    for (const [key, set] of this.transitiveClosureCache) {\n      cacheSize += key.length + set.size * 20;\n    }\n    \n    return cacheSize;\n  }\n\n  /**\n   * Calculate index fragmentation ratio\n   */\n  private calculateIndexFragmentation(): number {\n    const totalTriples = this.size();\n    if (totalTriples === 0) return 0;\n    \n    let totalIndexEntries = 0;\n    \n    // Count SPO index entries\n    for (const [, pMap] of this.getSPOIndex()) {\n      for (const [, oSet] of pMap) {\n        totalIndexEntries += oSet.size;\n      }\n    }\n    \n    // Ideal ratio should be close to 1 (one index entry per triple)\n    return Math.abs(1 - (totalIndexEntries / totalTriples)) / 3; // Normalize for 3 indexes\n  }\n\n  /**\n   * Update memory efficiency metric\n   */\n  private updateMemoryEfficiency(): void {\n    const memStats = this.getMemoryStatistics();\n    const indexMemory = this.estimateIndexMemory();\n    const cacheMemory = this.estimateCacheMemory();\n    const totalMemory = indexMemory + cacheMemory;\n    \n    if (memStats.used > 0) {\n      this.metrics.memoryEfficiency = 1 - (totalMemory / memStats.used);\n    }\n    \n    this.metrics.indexFragmentation = this.calculateIndexFragmentation();\n  }\n}\n\n/**\n * Factory for creating optimized graphs\n */\nexport class GraphFactory {\n  static createOptimized(triples?: Triple[]): IndexedGraph {\n    const graph = new IndexedGraph();\n\n    if (triples && triples.length > 0) {\n      // Use batch mode for initial load\n      graph.beginBatch();\n      for (const triple of triples) {\n        graph.add(triple);\n      }\n      graph.commitBatch();\n    }\n\n    return graph;\n  }\n\n  static createFromRDF(\n    rdfData: string,\n    format: \"turtle\" | \"ntriples\" | \"jsonld\",\n  ): Result<IndexedGraph> {\n    // Parser implementation would go here\n    // For now, return empty graph\n    return Result.ok(new IndexedGraph());\n  }\n}\n"],"version":3}