44ae500baff3bc6c15b3709c025d9403
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisualQueryEdge = exports.EdgeType = void 0;
var EdgeType;
(function (EdgeType) {
    EdgeType["PROPERTY"] = "property";
    EdgeType["OPTIONAL"] = "optional";
    EdgeType["UNION"] = "union";
    EdgeType["FILTER_CONDITION"] = "filter_condition";
})(EdgeType = exports.EdgeType || (exports.EdgeType = {}));
class VisualQueryEdge {
    constructor(params) {
        this.selected = false;
        this.valid = true;
        this.errors = [];
        this.id = params.id;
        this.sourceNodeId = params.sourceNodeId;
        this.targetNodeId = params.targetNodeId;
        this.type = params.type;
        this.label = params.label;
        this.propertyUri = params.propertyUri;
        Object.freeze(this.id);
        Object.freeze(this.sourceNodeId);
        Object.freeze(this.targetNodeId);
        Object.freeze(this.type);
    }
    getId() {
        return this.id;
    }
    getSourceNodeId() {
        return this.sourceNodeId;
    }
    getTargetNodeId() {
        return this.targetNodeId;
    }
    getType() {
        return this.type;
    }
    getLabel() {
        return this.label;
    }
    setLabel(label) {
        this.label = label;
    }
    getPropertyUri() {
        return this.propertyUri;
    }
    setPropertyUri(uri) {
        this.propertyUri = uri;
    }
    isSelected() {
        return this.selected;
    }
    setSelected(selected) {
        this.selected = selected;
    }
    isValid() {
        return this.valid;
    }
    setValid(valid, errors) {
        this.valid = valid;
        this.errors = errors || [];
    }
    getErrors() {
        return [...this.errors];
    }
    isOptional() {
        return this.type === EdgeType.OPTIONAL;
    }
    toSPARQLPredicate() {
        if (this.propertyUri) {
            return `<${this.propertyUri}>`;
        }
        if (this.label.startsWith("?")) {
            return this.label;
        }
        if (this.label.includes(":")) {
            return this.label;
        }
        return `?${this.label.toLowerCase().replace(/\s+/g, "_")}`;
    }
    calculatePath(sourceNode, targetNode) {
        const sourcePoint = sourceNode.getConnectionPoints();
        const targetPoint = targetNode.getConnectionPoints();
        // Simple direct path for now - can be enhanced with curved paths
        const sx = sourcePoint.right.x;
        const sy = sourcePoint.right.y;
        const tx = targetPoint.left.x;
        const ty = targetPoint.left.y;
        // Calculate control points for smooth curve
        const dx = tx - sx;
        const dy = ty - sy;
        const cx1 = sx + dx * 0.5;
        const cy1 = sy;
        const cx2 = sx + dx * 0.5;
        const cy2 = ty;
        return `M ${sx} ${sy} C ${cx1} ${cy1}, ${cx2} ${cy2}, ${tx} ${ty}`;
    }
    getLabelPosition(sourceNode, targetNode) {
        const sourcePoint = sourceNode.getConnectionPoints().right;
        const targetPoint = targetNode.getConnectionPoints().left;
        return {
            x: (sourcePoint.x + targetPoint.x) / 2,
            y: (sourcePoint.y + targetPoint.y) / 2,
        };
    }
    clone() {
        return new VisualQueryEdge({
            id: `${this.id}_clone_${Date.now()}`,
            sourceNodeId: this.sourceNodeId,
            targetNodeId: this.targetNodeId,
            type: this.type,
            label: this.label,
            propertyUri: this.propertyUri,
        });
    }
    static createProperty(sourceNodeId, targetNodeId, label, propertyUri) {
        return new VisualQueryEdge({
            id: `edge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            sourceNodeId,
            targetNodeId,
            type: EdgeType.PROPERTY,
            label,
            propertyUri,
        });
    }
    static createOptional(sourceNodeId, targetNodeId, label, propertyUri) {
        return new VisualQueryEdge({
            id: `optional_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            sourceNodeId,
            targetNodeId,
            type: EdgeType.OPTIONAL,
            label,
            propertyUri,
        });
    }
    static createFilterCondition(sourceNodeId, targetNodeId, label) {
        return new VisualQueryEdge({
            id: `filter_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            sourceNodeId,
            targetNodeId,
            type: EdgeType.FILTER_CONDITION,
            label,
        });
    }
}
exports.VisualQueryEdge = VisualQueryEdge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,