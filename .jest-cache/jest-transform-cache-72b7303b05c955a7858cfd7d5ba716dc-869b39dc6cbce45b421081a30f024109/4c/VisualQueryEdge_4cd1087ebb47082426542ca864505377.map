{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/VisualQueryEdge.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/visual/VisualQueryEdge.ts"],"sourcesContent":["import { VisualQueryNode } from \"./VisualQueryNode\";\n\nexport enum EdgeType {\n  PROPERTY = \"property\",\n  OPTIONAL = \"optional\",\n  UNION = \"union\",\n  FILTER_CONDITION = \"filter_condition\",\n}\n\nexport class VisualQueryEdge {\n  private readonly id: string;\n  private readonly sourceNodeId: string;\n  private readonly targetNodeId: string;\n  private readonly type: EdgeType;\n  private label: string;\n  private propertyUri?: string;\n  private selected: boolean = false;\n  private valid: boolean = true;\n  private errors: string[] = [];\n\n  constructor(params: {\n    id: string;\n    sourceNodeId: string;\n    targetNodeId: string;\n    type: EdgeType;\n    label: string;\n    propertyUri?: string;\n  }) {\n    this.id = params.id;\n    this.sourceNodeId = params.sourceNodeId;\n    this.targetNodeId = params.targetNodeId;\n    this.type = params.type;\n    this.label = params.label;\n    this.propertyUri = params.propertyUri;\n    Object.freeze(this.id);\n    Object.freeze(this.sourceNodeId);\n    Object.freeze(this.targetNodeId);\n    Object.freeze(this.type);\n  }\n\n  getId(): string {\n    return this.id;\n  }\n\n  getSourceNodeId(): string {\n    return this.sourceNodeId;\n  }\n\n  getTargetNodeId(): string {\n    return this.targetNodeId;\n  }\n\n  getType(): EdgeType {\n    return this.type;\n  }\n\n  getLabel(): string {\n    return this.label;\n  }\n\n  setLabel(label: string): void {\n    this.label = label;\n  }\n\n  getPropertyUri(): string | undefined {\n    return this.propertyUri;\n  }\n\n  setPropertyUri(uri: string): void {\n    this.propertyUri = uri;\n  }\n\n  isSelected(): boolean {\n    return this.selected;\n  }\n\n  setSelected(selected: boolean): void {\n    this.selected = selected;\n  }\n\n  isValid(): boolean {\n    return this.valid;\n  }\n\n  setValid(valid: boolean, errors?: string[]): void {\n    this.valid = valid;\n    this.errors = errors || [];\n  }\n\n  getErrors(): string[] {\n    return [...this.errors];\n  }\n\n  isOptional(): boolean {\n    return this.type === EdgeType.OPTIONAL;\n  }\n\n  toSPARQLPredicate(): string {\n    if (this.propertyUri) {\n      return `<${this.propertyUri}>`;\n    }\n\n    if (this.label.startsWith(\"?\")) {\n      return this.label;\n    }\n\n    if (this.label.includes(\":\")) {\n      return this.label;\n    }\n\n    return `?${this.label.toLowerCase().replace(/\\s+/g, \"_\")}`;\n  }\n\n  calculatePath(\n    sourceNode: VisualQueryNode,\n    targetNode: VisualQueryNode,\n  ): string {\n    const sourcePoint = sourceNode.getConnectionPoints();\n    const targetPoint = targetNode.getConnectionPoints();\n\n    // Simple direct path for now - can be enhanced with curved paths\n    const sx = sourcePoint.right.x;\n    const sy = sourcePoint.right.y;\n    const tx = targetPoint.left.x;\n    const ty = targetPoint.left.y;\n\n    // Calculate control points for smooth curve\n    const dx = tx - sx;\n    const dy = ty - sy;\n    const cx1 = sx + dx * 0.5;\n    const cy1 = sy;\n    const cx2 = sx + dx * 0.5;\n    const cy2 = ty;\n\n    return `M ${sx} ${sy} C ${cx1} ${cy1}, ${cx2} ${cy2}, ${tx} ${ty}`;\n  }\n\n  getLabelPosition(\n    sourceNode: VisualQueryNode,\n    targetNode: VisualQueryNode,\n  ): { x: number; y: number } {\n    const sourcePoint = sourceNode.getConnectionPoints().right;\n    const targetPoint = targetNode.getConnectionPoints().left;\n\n    return {\n      x: (sourcePoint.x + targetPoint.x) / 2,\n      y: (sourcePoint.y + targetPoint.y) / 2,\n    };\n  }\n\n  clone(): VisualQueryEdge {\n    return new VisualQueryEdge({\n      id: `${this.id}_clone_${Date.now()}`,\n      sourceNodeId: this.sourceNodeId,\n      targetNodeId: this.targetNodeId,\n      type: this.type,\n      label: this.label,\n      propertyUri: this.propertyUri,\n    });\n  }\n\n  static createProperty(\n    sourceNodeId: string,\n    targetNodeId: string,\n    label: string,\n    propertyUri?: string,\n  ): VisualQueryEdge {\n    return new VisualQueryEdge({\n      id: `edge_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      sourceNodeId,\n      targetNodeId,\n      type: EdgeType.PROPERTY,\n      label,\n      propertyUri,\n    });\n  }\n\n  static createOptional(\n    sourceNodeId: string,\n    targetNodeId: string,\n    label: string,\n    propertyUri?: string,\n  ): VisualQueryEdge {\n    return new VisualQueryEdge({\n      id: `optional_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      sourceNodeId,\n      targetNodeId,\n      type: EdgeType.OPTIONAL,\n      label,\n      propertyUri,\n    });\n  }\n\n  static createFilterCondition(\n    sourceNodeId: string,\n    targetNodeId: string,\n    label: string,\n  ): VisualQueryEdge {\n    return new VisualQueryEdge({\n      id: `filter_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      sourceNodeId,\n      targetNodeId,\n      type: EdgeType.FILTER_CONDITION,\n      label,\n    });\n  }\n}\n"],"version":3}