701f74ec568061cb1f87e140b10fbcab
/**
 * Jest Test Setup
 * Configures the testing environment for CI and local development
 */
// Note: jest-dom is not available, using custom DOM extensions
// Setup DOM globals that might be missing in CI
Object.defineProperty(global, "ResizeObserver", {
    writable: true,
    value: jest.fn().mockImplementation(() => ({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn(),
    })),
});
// Mock HTMLElement methods that might not exist in JSDOM
if (typeof HTMLElement !== "undefined") {
    HTMLElement.prototype.scrollIntoView = jest.fn();
    HTMLElement.prototype.scrollTo = jest.fn();
    HTMLElement.prototype.focus = jest.fn();
    HTMLElement.prototype.blur = jest.fn();
    // Add addClass/removeClass methods for compatibility with Obsidian
    HTMLElement.prototype.addClass = function (className) {
        this.classList.add(className);
        return this;
    };
    HTMLElement.prototype.removeClass = function (className) {
        this.classList.remove(className);
        return this;
    };
    HTMLElement.prototype.toggleClass = function (className, force) {
        this.classList.toggle(className, force);
        return this;
    };
    HTMLElement.prototype.hasClass = function (className) {
        return this.classList.contains(className);
    };
}
// Mock window.matchMedia if it doesn't exist
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query) => ({
        matches: false,
        media: query,
        onchange: null,
        addListener: jest.fn(),
        removeListener: jest.fn(),
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        dispatchEvent: jest.fn(),
    })),
});
// Mock window.getComputedStyle
Object.defineProperty(window, "getComputedStyle", {
    value: jest.fn().mockImplementation(() => ({
        getPropertyValue: jest.fn().mockReturnValue(""),
        setProperty: jest.fn(),
        removeProperty: jest.fn(),
    })),
});
// Suppress console logs during tests unless explicitly enabled
const originalConsoleLog = console.log;
const originalConsoleWarn = console.warn;
const originalConsoleError = console.error;
beforeEach(() => {
    if (process.env.CI && !process.env.JEST_VERBOSE) {
        // Suppress logs in CI unless verbose mode is enabled
        console.log = jest.fn();
        console.warn = jest.fn();
        console.error = jest.fn();
    }
});
afterEach(() => {
    // Restore console methods after each test
    console.log = originalConsoleLog;
    console.warn = originalConsoleWarn;
    console.error = originalConsoleError;
});
// Global CI environment detection
global.isCI =
    process.env.CI === "true" || process.env.GITHUB_ACTIONS === "true";
// Note: Removed automatic fake timers as they can cause timeout issues in CI
// Individual tests should use jest.useFakeTimers() when needed
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tpdGVsZXYvRG9jdW1lbnRzL2V4b2NvcnRleC1vYnNpZGlhbi1wbHVnaW4vdGVzdHMvc2V0dXAudHMiLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsK0RBQStEO0FBRS9ELGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRTtJQUM5QyxRQUFRLEVBQUUsSUFBSTtJQUNkLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN6QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNsQixTQUFTLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNwQixVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUN0QixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCx5REFBeUQ7QUFDekQsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7SUFDdEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ2pELFdBQVcsQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztJQUMzQyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7SUFDeEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBRXZDLG1FQUFtRTtJQUNuRSxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRyxVQUFVLFNBQWlCO1FBQzFELElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQyxDQUFDO0lBRUYsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBVSxTQUFpQjtRQUM3RCxJQUFJ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QUFLLE1BQU0sQ0FBQztBQUVyRSw2RUFBNkU7QUFDN0UsK0RBQStEIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9raXRlbGV2L0RvY3VtZW50cy9leG9jb3J0ZXgtb2JzaWRpYW4tcGx1Z2luL3Rlc3RzL3NldHVwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSmVzdCBUZXN0IFNldHVwXG4gKiBDb25maWd1cmVzIHRoZSB0ZXN0aW5nIGVudmlyb25tZW50IGZvciBDSSBhbmQgbG9jYWwgZGV2ZWxvcG1lbnRcbiAqL1xuXG4vLyBOb3RlOiBqZXN0LWRvbSBpcyBub3QgYXZhaWxhYmxlLCB1c2luZyBjdXN0b20gRE9NIGV4dGVuc2lvbnNcblxuLy8gU2V0dXAgRE9NIGdsb2JhbHMgdGhhdCBtaWdodCBiZSBtaXNzaW5nIGluIENJXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZ2xvYmFsLCBcIlJlc2l6ZU9ic2VydmVyXCIsIHtcbiAgd3JpdGFibGU6IHRydWUsXG4gIHZhbHVlOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+ICh7XG4gICAgb2JzZXJ2ZTogamVzdC5mbigpLFxuICAgIHVub2JzZXJ2ZTogamVzdC5mbigpLFxuICAgIGRpc2Nvbm5lY3Q6IGplc3QuZm4oKSxcbiAgfSkpLFxufSk7XG5cbi8vIE1vY2sgSFRNTEVsZW1lbnQgbWV0aG9kcyB0aGF0IG1pZ2h0IG5vdCBleGlzdCBpbiBKU0RPTVxuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBIVE1MRWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBqZXN0LmZuKCk7XG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxUbyA9IGplc3QuZm4oKTtcbiAgSFRNTEVsZW1lbnQucHJvdG90eXBlLmZvY3VzID0gamVzdC5mbigpO1xuICBIVE1MRWxlbWVudC5wcm90b3R5cGUuYmx1ciA9IGplc3QuZm4oKTtcblxuICAvLyBBZGQgYWRkQ2xhc3MvcmVtb3ZlQ2xhc3MgbWV0aG9kcyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIE9ic2lkaWFuXG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS5hZGRDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVDbGFzcyA9IGZ1bmN0aW9uIChjbGFzc05hbWU6IHN0cmluZykge1xuICAgIHRoaXMuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEhUTUxFbGVtZW50LnByb3RvdHlwZS50b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgICBmb3JjZT86IGJvb2xlYW4sXG4gICkge1xuICAgIHRoaXMuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUsIGZvcmNlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBIVE1MRWxlbWVudC5wcm90b3R5cGUuaGFzQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgfTtcbn1cblxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYSBpZiBpdCBkb2Vzbid0IGV4aXN0XG5PYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBcIm1hdGNoTWVkaWFcIiwge1xuICB3cml0YWJsZTogdHJ1ZSxcbiAgdmFsdWU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKHF1ZXJ5KSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICB9KSksXG59KTtcblxuLy8gTW9jayB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgXCJnZXRDb21wdXRlZFN0eWxlXCIsIHtcbiAgdmFsdWU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBnZXRQcm9wZXJ0eVZhbHVlOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKFwiXCIpLFxuICAgIHNldFByb3BlcnR5OiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlUHJvcGVydHk6IGplc3QuZm4oKSxcbiAgfSkpLFxufSk7XG5cbi8vIFN1cHByZXNzIGNvbnNvbGUgbG9ncyBkdXJpbmcgdGVzdHMgdW5sZXNzIGV4cGxpY2l0bHkgZW5hYmxlZFxuY29uc3Qgb3JpZ2luYWxDb25zb2xlTG9nID0gY29uc29sZS5sb2c7XG5jb25zdCBvcmlnaW5hbENvbnNvbGVXYXJuID0gY29uc29sZS53YXJuO1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgaWYgKHByb2Nlc3MuZW52LkNJICYmICFwcm9jZXNzLmVudi5KRVNUX1ZFUkJPU0UpIHtcbiAgICAvLyBTdXBwcmVzcyBsb2dzIGluIENJIHVubGVzcyB2ZXJib3NlIG1vZGUgaXMgZW5hYmxlZFxuICAgIGNvbnNvbGUubG9nID0gamVzdC5mbigpO1xuICAgIGNvbnNvbGUud2FybiA9IGplc3QuZm4oKTtcbiAgICBjb25zb2xlLmVycm9yID0gamVzdC5mbigpO1xuICB9XG59KTtcblxuYWZ0ZXJFYWNoKCgpID0+IHtcbiAgLy8gUmVzdG9yZSBjb25zb2xlIG1ldGhvZHMgYWZ0ZXIgZWFjaCB0ZXN0XG4gIGNvbnNvbGUubG9nID0gb3JpZ2luYWxDb25zb2xlTG9nO1xuICBjb25zb2xlLndhcm4gPSBvcmlnaW5hbENvbnNvbGVXYXJuO1xuICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxDb25zb2xlRXJyb3I7XG59KTtcblxuLy8gR2xvYmFsIENJIGVudmlyb25tZW50IGRldGVjdGlvblxuKGdsb2JhbCBhcyBhbnkpLmlzQ0kgPVxuICBwcm9jZXNzLmVudi5DSSA9PT0gXCJ0cnVlXCIgfHwgcHJvY2Vzcy5lbnYuR0lUSFVCX0FDVElPTlMgPT09IFwidHJ1ZVwiO1xuXG4vLyBOb3RlOiBSZW1vdmVkIGF1dG9tYXRpYyBmYWtlIHRpbWVycyBhcyB0aGV5IGNhbiBjYXVzZSB0aW1lb3V0IGlzc3VlcyBpbiBDSVxuLy8gSW5kaXZpZHVhbCB0ZXN0cyBzaG91bGQgdXNlIGplc3QudXNlRmFrZVRpbWVycygpIHdoZW4gbmVlZGVkXG4iXSwidmVyc2lvbiI6M30=