{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/AggregateRoot.ts","mappings":";;;AAAA,qCAAkC;AAElC;;;GAGG;AACH,MAAsB,aAAiB,SAAQ,eAAS;IACtD,YAAsB,KAAQ;QAC5B,KAAK,CAAC,KAAK,CAAC,CAAC;IACf,CAAC;IAED;;OAEG;IACI,oBAAoB;QACzB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACK,0BAA0B,CAAC,WAAgB;QACjD,kEAAkE;QAClE,iDAAiD;QACjD,MAAM,WAAW,GAAG;YAClB,GAAG,WAAW;YACd,gBAAgB,EAAE,IAAI,IAAI,EAAE;YAC5B,WAAW,EAAE,IAAI,CAAC,GAAG;SACtB,CAAC;QAEF,4EAA4E;QAC5E,OAAO,CAAC,GAAG,CAAC,mCAAmC,EAAE,WAAW,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACI,qBAAqB;QAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;CACF;AAlCD,sCAkCC","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/domain/core/AggregateRoot.ts"],"sourcesContent":["import { Entity } from \"./Entity\";\n\n/**\n * Aggregate Root base class for Domain-Driven Design\n * Aggregate roots are the entry points to aggregates\n */\nexport abstract class AggregateRoot<T> extends Entity<T> {\n  protected constructor(props: T) {\n    super(props);\n  }\n\n  /**\n   * Get all domain events (inherits from Entity)\n   */\n  public getUncommittedEvents(): any[] {\n    return this.getDomainEvents();\n  }\n\n  /**\n   * Mark domain event for dispatch\n   */\n  private markDomainEventForDispatch(domainEvent: any): void {\n    // This would integrate with an event bus in a full implementation\n    // For now, we just mark it as ready for dispatch\n    const markedEvent = {\n      ...domainEvent,\n      dateTimeOccurred: new Date(),\n      aggregateId: this._id,\n    };\n\n    // In a real implementation, this would be sent to a domain event dispatcher\n    console.log(\"Domain event marked for dispatch:\", markedEvent);\n  }\n\n  /**\n   * Commit events\n   */\n  public markEventsAsCommitted(): void {\n    this.clearDomainEvents();\n  }\n}\n"],"version":3}