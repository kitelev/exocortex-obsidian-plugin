5369ce4588447cde736105f9cbdd2eb8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCurrentProjectUseCase = void 0;
const tslib_1 = require("tslib");
const ClassName_1 = require("../../domain/value-objects/ClassName");
/**
 * Use case for getting current project context
 * Implements intelligent project detection based on user context
 * Following TOGAF principles for business capability
 */
class GetCurrentProjectUseCase {
    constructor(assetRepository, focusService, graph) {
        this.assetRepository = assetRepository;
        this.focusService = focusService;
        this.graph = graph;
    }
    execute(request) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Get all available projects
                const availableProjects = yield this.getAvailableProjects((_b = (_a = request.preferences) === null || _a === void 0 ? void 0 : _a.includeCompleted) !== null && _b !== void 0 ? _b : false, (_d = (_c = request.preferences) === null || _c === void 0 ? void 0 : _c.maxResults) !== null && _d !== void 0 ? _d : 10);
                // Detect current project based on context
                const currentProject = yield this.detectCurrentProject(request, availableProjects);
                // Determine detection strategy and confidence
                const context = this.buildContextInfo(request, currentProject);
                return {
                    success: true,
                    currentProject,
                    availableProjects,
                    context
                };
            }
            catch (error) {
                return {
                    success: false,
                    availableProjects: [],
                    context: {
                        strategy: 'error',
                        confidence: 0,
                        reasoning: `Failed to get project context: ${error.message}`
                    },
                    message: error.message
                };
            }
        });
    }
    /**
     * Get all available projects from the system
     */
    getAvailableProjects(includeCompleted, maxResults) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Find assets with Project class
                const projectClassName = ClassName_1.ClassName.create('ems__Project');
                if (projectClassName.isFailure) {
                    return [];
                }
                const projectAssets = yield this.assetRepository.findByClass(projectClassName.getValue());
                // Convert to response format and filter
                const projects = projectAssets
                    .filter(asset => {
                    if (!includeCompleted) {
                        const status = asset.getProperty('status');
                        return status !== 'completed' && status !== 'cancelled';
                    }
                    return true;
                })
                    .map(asset => ({
                    id: asset.getId().toString(),
                    title: asset.getTitle(),
                    status: asset.getProperty('status') || 'active',
                    priority: asset.getProperty('priority') || 'medium',
                    description: asset.getProperty('description'),
                    isActive: asset.getProperty('status') === 'active',
                    lastUpdated: asset.getProperty('updatedAt') || new Date().toISOString()
                }))
                    .sort((a, b) => {
                    // Sort by active status first, then by last updated
                    if (a.isActive && !b.isActive)
                        return -1;
                    if (!a.isActive && b.isActive)
                        return 1;
                    return new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime();
                })
                    .slice(0, maxResults);
                return projects;
            }
            catch (error) {
                console.warn('Failed to get available projects:', error);
                return [];
            }
        });
    }
    /**
     * Detect current project based on context clues
     */
    detectCurrentProject(request, availableProjects) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const strategy = ((_a = request.preferences) === null || _a === void 0 ? void 0 : _a.selectionStrategy) || 'context';
            switch (strategy) {
                case 'context':
                    return this.detectByContext(request, availableProjects);
                case 'recent':
                    return this.detectByRecentActivity(availableProjects);
                case 'active':
                    return this.detectByActiveStatus(availableProjects);
                case 'priority':
                    return this.detectByPriority(availableProjects);
                default:
                    return this.detectByContext(request, availableProjects);
            }
        });
    }
    /**
     * Detect project by analyzing current file context
     */
    detectByContext(request, availableProjects) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!request.activeFile) {
                return this.detectByRecentActivity(availableProjects);
            }
            try {
                // Check if current file is a project file
                const currentAsset = yield this.assetRepository.findByFilename(request.activeFile);
                if (currentAsset) {
                    const className = currentAsset.getClassName().toString();
                    if (className === 'ems__Project') {
                        return this.assetToProjectResponse(currentAsset);
                    }
                    // Check if current asset has project relationship
                    const projectId = currentAsset.getProperty('projectId') ||
                        currentAsset.getProperty('exo__Effort_parent');
                    if (projectId) {
                        const cleanProjectId = projectId.toString().replace(/\[\[|\]\]/g, '');
                        const project = availableProjects.find(p => p.id === cleanProjectId);
                        if (project) {
                            return project;
                        }
                    }
                }
                // Use RDF graph to find project relationships
                const projectFromGraph = yield this.findProjectFromGraph(request.activeFile, availableProjects);
                if (projectFromGraph) {
                    return projectFromGraph;
                }
                // Fallback to recent activity
                return this.detectByRecentActivity(availableProjects);
            }
            catch (error) {
                console.warn('Context-based project detection failed:', error);
                return this.detectByRecentActivity(availableProjects);
            }
        });
    }
    /**
     * Detect project using RDF graph relationships
     */
    findProjectFromGraph(activeFile, availableProjects) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                // Clean file path for IRI
                const fileIRI = activeFile.replace(/\.md$/, '').replace(/\s+/g, '_');
                // Query for project relationships
                const projectTriples = this.graph.query(fileIRI, 'exo__Effort_parent');
                if (projectTriples.length > 0) {
                    const projectIRI = projectTriples[0].getObject().toString();
                    const project = availableProjects.find(p => p.id === projectIRI || p.title.replace(/\s+/g, '_') === projectIRI);
                    if (project) {
                        return project;
                    }
                }
                // Check reverse relationships (project -> task)
                const taskTriples = this.graph.query(undefined, 'exo__Effort_parent', fileIRI);
                for (const triple of taskTriples) {
                    const potentialProject = triple.getSubject().toString();
                    const project = availableProjects.find(p => p.id === potentialProject || p.title.replace(/\s+/g, '_') === potentialProject);
                    if (project) {
                        return project;
                    }
                }
                return undefined;
            }
            catch (error) {
                console.warn('Graph-based project detection failed:', error);
                return undefined;
            }
        });
    }
    /**
     * Detect project by recent activity
     */
    detectByRecentActivity(availableProjects) {
        const recentProjects = availableProjects
            .filter(p => p.isActive)
            .sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime());
        return recentProjects[0];
    }
    /**
     * Detect project by active status
     */
    detectByActiveStatus(availableProjects) {
        return availableProjects.find(p => p.isActive);
    }
    /**
     * Detect project by priority
     */
    detectByPriority(availableProjects) {
        const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };
        return availableProjects
            .filter(p => p.isActive)
            .sort((a, b) => (priorityOrder[b.priority] || 2) - (priorityOrder[a.priority] || 2))[0];
    }
    /**
     * Build context information for response
     */
    buildContextInfo(request, currentProject) {
        var _a;
        const strategy = ((_a = request.preferences) === null || _a === void 0 ? void 0 : _a.selectionStrategy) || 'context';
        let confidence = 0;
        let reasoning = '';
        if (currentProject) {
            switch (strategy) {
                case 'context':
                    confidence = request.activeFile ? 0.8 : 0.3;
                    reasoning = request.activeFile
                        ? `Detected from current file context: ${request.activeFile}`
                        : 'Used most recent active project';
                    break;
                case 'recent':
                    confidence = 0.6;
                    reasoning = 'Selected most recently updated active project';
                    break;
                case 'active':
                    confidence = 0.5;
                    reasoning = 'Selected first active project';
                    break;
                case 'priority':
                    confidence = 0.7;
                    reasoning = 'Selected highest priority active project';
                    break;
            }
        }
        else {
            reasoning = 'No suitable project found';
        }
        return {
            strategy,
            confidence,
            reasoning
        };
    }
    /**
     * Convert Asset to project response format
     */
    assetToProjectResponse(asset) {
        return {
            id: asset.getId().toString(),
            title: asset.getTitle(),
            status: asset.getProperty('status') || 'active',
            priority: asset.getProperty('priority') || 'medium',
            description: asset.getProperty('description')
        };
    }
}
exports.GetCurrentProjectUseCase = GetCurrentProjectUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,