274c7b1bd8958d25116891c9cb22d5e4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderClassButtonsUseCase = void 0;
const Result_1 = require("../../domain/core/Result");
const ClassName_1 = require("../../domain/value-objects/ClassName");
class RenderClassButtonsUseCase {
    constructor(classViewRepository, buttonRepository) {
        this.classViewRepository = classViewRepository;
        this.buttonRepository = buttonRepository;
    }
    async execute(request) {
        // Validate request
        if (!request.className) {
            return Result_1.Result.fail("Class name is required");
        }
        // Create ClassName value object
        const classNameResult = ClassName_1.ClassName.create(request.className);
        if (classNameResult.isFailure) {
            return Result_1.Result.fail(classNameResult.error);
        }
        const className = classNameResult.getValue();
        // Find ClassView configuration
        const classViewResult = await this.classViewRepository.findByClassName(className);
        if (classViewResult.isFailure) {
            return Result_1.Result.fail(`Failed to load class view: ${classViewResult.error}`);
        }
        const classView = classViewResult.getValue();
        // If no ClassView configured, return empty buttons
        if (!classView) {
            return Result_1.Result.ok({
                buttons: [],
                displayOptions: {
                    position: "top",
                    showButtons: false,
                },
            });
        }
        // Check if buttons should be shown
        if (!classView.displayOptions.showButtons) {
            return Result_1.Result.ok({
                buttons: [],
                displayOptions: {
                    position: classView.displayOptions.buttonPosition,
                    showButtons: false,
                },
            });
        }
        // Get enabled buttons
        const enabledButtons = classView.getEnabledButtons();
        // Load commands for each button
        const buttonRenderData = [];
        for (const button of enabledButtons) {
            const commandResult = await this.buttonRepository.findCommandById(button.commandId);
            if (commandResult.isFailure) {
                console.warn(`Failed to load command for button ${button.id}: ${commandResult.error}`);
                continue;
            }
            const command = commandResult.getValue();
            if (!command) {
                console.warn(`Command not found for button ${button.id}`);
                continue;
            }
            // Check if command can be executed in current context
            const canExecute = command.canExecute({
                currentClass: request.className,
                hasSelection: request.context?.hasSelection || false,
            });
            // Only include button if it can be executed
            if (canExecute) {
                buttonRenderData.push({
                    buttonId: button.id.toString(),
                    label: button.label,
                    tooltip: button.tooltip,
                    isEnabled: button.isEnabled,
                    order: button.order,
                    command: {
                        id: command.id.toString(),
                        type: command.type,
                        requiresInput: command.requiresInput,
                        parameters: command.parameters,
                    },
                });
            }
        }
        // Sort buttons by order
        buttonRenderData.sort((a, b) => a.order - b.order);
        return Result_1.Result.ok({
            buttons: buttonRenderData,
            displayOptions: {
                position: classView.displayOptions.buttonPosition,
                showButtons: true,
            },
        });
    }
}
exports.RenderClassButtonsUseCase = RenderClassButtonsUseCase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,