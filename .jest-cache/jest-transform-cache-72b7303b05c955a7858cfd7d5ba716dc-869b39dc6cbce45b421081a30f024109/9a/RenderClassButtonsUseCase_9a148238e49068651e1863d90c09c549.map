{"file":"/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/RenderClassButtonsUseCase.ts","mappings":"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","names":[],"sources":["/Users/kitelev/Documents/exocortex-obsidian-plugin/src/application/use-cases/RenderClassButtonsUseCase.ts"],"sourcesContent":["import { UseCase } from \"../core/UseCase\";\nimport { Result } from \"../../domain/core/Result\";\nimport { IClassViewRepository } from \"../../domain/repositories/IClassViewRepository\";\nimport { IButtonRepository } from \"../../domain/repositories/IButtonRepository\";\nimport { ClassName } from \"../../domain/value-objects/ClassName\";\nimport { UIButton } from \"../../domain/entities/UIButton\";\nimport { ButtonCommand } from \"../../domain/entities/ButtonCommand\";\n\n/**\n * Use Case for rendering buttons in an asset view\n * Following Clean Architecture - orchestrates domain logic\n */\nexport interface RenderClassButtonsRequest {\n  className: string;\n  assetId?: string;\n  context?: {\n    hasSelection: boolean;\n    currentUser?: string;\n  };\n}\n\nexport interface ButtonRenderData {\n  buttonId: string;\n  label: string;\n  tooltip?: string;\n  isEnabled: boolean;\n  order: number;\n  command: {\n    id: string;\n    type: string;\n    requiresInput: boolean;\n    parameters: any[];\n  };\n}\n\nexport interface RenderClassButtonsResponse {\n  buttons: ButtonRenderData[];\n  displayOptions: {\n    position: \"top\" | \"bottom\" | \"floating\";\n    showButtons: boolean;\n  };\n}\n\nexport class RenderClassButtonsUseCase\n  implements UseCase<RenderClassButtonsRequest, RenderClassButtonsResponse>\n{\n  constructor(\n    private classViewRepository: IClassViewRepository,\n    private buttonRepository: IButtonRepository,\n  ) {}\n\n  async execute(\n    request: RenderClassButtonsRequest,\n  ): Promise<Result<RenderClassButtonsResponse>> {\n    // Validate request\n    if (!request.className) {\n      return Result.fail<RenderClassButtonsResponse>(\"Class name is required\");\n    }\n\n    // Create ClassName value object\n    const classNameResult = ClassName.create(request.className);\n    if (classNameResult.isFailure) {\n      return Result.fail<RenderClassButtonsResponse>(classNameResult.error);\n    }\n    const className = classNameResult.getValue();\n\n    // Find ClassView configuration\n    const classViewResult =\n      await this.classViewRepository.findByClassName(className);\n    if (classViewResult.isFailure) {\n      return Result.fail<RenderClassButtonsResponse>(\n        `Failed to load class view: ${classViewResult.error}`,\n      );\n    }\n\n    const classView = classViewResult.getValue();\n\n    // If no ClassView configured, return empty buttons\n    if (!classView) {\n      return Result.ok<RenderClassButtonsResponse>({\n        buttons: [],\n        displayOptions: {\n          position: \"top\",\n          showButtons: false,\n        },\n      });\n    }\n\n    // Check if buttons should be shown\n    if (!classView.displayOptions.showButtons) {\n      return Result.ok<RenderClassButtonsResponse>({\n        buttons: [],\n        displayOptions: {\n          position: classView.displayOptions.buttonPosition,\n          showButtons: false,\n        },\n      });\n    }\n\n    // Get enabled buttons\n    const enabledButtons = classView.getEnabledButtons();\n\n    // Load commands for each button\n    const buttonRenderData: ButtonRenderData[] = [];\n\n    for (const button of enabledButtons) {\n      const commandResult = await this.buttonRepository.findCommandById(\n        button.commandId,\n      );\n\n      if (commandResult.isFailure) {\n        console.warn(\n          `Failed to load command for button ${button.id}: ${commandResult.error}`,\n        );\n        continue;\n      }\n\n      const command = commandResult.getValue();\n      if (!command) {\n        console.warn(`Command not found for button ${button.id}`);\n        continue;\n      }\n\n      // Check if command can be executed in current context\n      const canExecute = command.canExecute({\n        currentClass: request.className,\n        hasSelection: request.context?.hasSelection || false,\n      });\n\n      // Only include button if it can be executed\n      if (canExecute) {\n        buttonRenderData.push({\n          buttonId: button.id.toString(),\n          label: button.label,\n          tooltip: button.tooltip,\n          isEnabled: button.isEnabled,\n          order: button.order,\n          command: {\n            id: command.id.toString(),\n            type: command.type,\n            requiresInput: command.requiresInput,\n            parameters: command.parameters,\n          },\n        });\n      }\n    }\n\n    // Sort buttons by order\n    buttonRenderData.sort((a, b) => a.order - b.order);\n\n    return Result.ok<RenderClassButtonsResponse>({\n      buttons: buttonRenderData,\n      displayOptions: {\n        position: classView.displayOptions.buttonPosition,\n        showButtons: true,\n      },\n    });\n  }\n}\n"],"version":3}