0c293530001b1beb6df0c1109dbeb5a4
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
// Mock DIContainer
jest.mock('../../../src/infrastructure/container/DIContainer');
// Mock Notice
jest.mock('obsidian', () => {
    const actual = jest.requireActual('obsidian');
    return Object.assign(Object.assign({}, actual), { Notice: jest.fn() });
});
const obsidian_1 = require("obsidian");
const CreateAssetModal_1 = require("../../../src/presentation/modals/CreateAssetModal");
const DIContainer_1 = require("../../../src/infrastructure/container/DIContainer");
// Add Obsidian DOM extensions to HTMLElement prototype
beforeAll(() => {
    HTMLElement.prototype.createEl = jest.fn().mockImplementation((tag, attrs) => {
        const element = document.createElement(tag);
        if (attrs === null || attrs === void 0 ? void 0 : attrs.text)
            element.textContent = attrs.text;
        if (attrs === null || attrs === void 0 ? void 0 : attrs.cls)
            element.className = attrs.cls;
        return element;
    });
    HTMLElement.prototype.createDiv = jest.fn().mockImplementation((attrs) => {
        const element = document.createElement('div');
        if (attrs === null || attrs === void 0 ? void 0 : attrs.cls)
            element.className = attrs.cls;
        return element;
    });
    HTMLElement.prototype.empty = jest.fn().mockImplementation(() => {
        // Mock empty implementation - in real Obsidian this clears the element
    });
});
describe('CreateAssetModal', () => {
    let app;
    let modal;
    let mockCreateAssetUseCase;
    let mockContainer;
    beforeEach(() => {
        // Setup app mock
        app = new obsidian_1.App();
        // Setup CreateAssetUseCase mock
        mockCreateAssetUseCase = {
            execute: jest.fn()
        };
        // Setup DIContainer mock
        mockContainer = {
            getCreateAssetUseCase: jest.fn().mockReturnValue(mockCreateAssetUseCase),
            getInstance: jest.fn().mockReturnThis(),
            resolve: jest.fn().mockImplementation((token) => {
                // Return empty mock repositories
                return {};
            })
        };
        DIContainer_1.DIContainer.getInstance.mockReturnValue(mockContainer);
        // Create modal instance
        modal = new CreateAssetModal_1.CreateAssetModal(app);
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    describe('Modal Initialization', () => {
        test('should create modal with default values', () => {
            expect(modal).toBeDefined();
            expect(modal.app).toBe(app);
        });
        test('should initialize with DIContainer', () => {
            expect(DIContainer_1.DIContainer.getInstance).toHaveBeenCalled();
            expect(mockContainer.getCreateAssetUseCase).toHaveBeenCalled();
        });
        test('should have default asset values', () => {
            expect(modal.assetTitle).toBe('');
            expect(modal.assetClass).toBe('exo__Asset');
            expect(modal.assetOntology).toBe('');
            expect(modal.propertyValues).toBeInstanceOf(Map);
        });
    });
    describe('Modal Opening', () => {
        test('should setup UI elements when opened', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockContentEl = document.createElement('div');
            modal.contentEl = mockContentEl;
            yield modal.onOpen();
            expect(mockContentEl.createEl).toHaveBeenCalledWith('h2', { text: 'Create ExoAsset' });
        }));
        test('should setup all required fields', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockContentEl = document.createElement('div');
            modal.contentEl = mockContentEl;
            const setupTitleFieldSpy = jest.spyOn(modal, 'setupTitleField');
            const setupClassFieldSpy = jest.spyOn(modal, 'setupClassField');
            const setupOntologyFieldSpy = jest.spyOn(modal, 'setupOntologyField');
            const setupPropertiesSectionSpy = jest.spyOn(modal, 'setupPropertiesSection');
            const setupActionButtonsSpy = jest.spyOn(modal, 'setupActionButtons');
            yield modal.onOpen();
            expect(setupTitleFieldSpy).toHaveBeenCalled();
            expect(setupClassFieldSpy).toHaveBeenCalled();
            expect(setupOntologyFieldSpy).toHaveBeenCalled();
            expect(setupPropertiesSectionSpy).toHaveBeenCalled();
            expect(setupActionButtonsSpy).toHaveBeenCalled();
        }));
    });
    describe('Title Field', () => {
        test('should setup title field correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            yield modal.setupTitleField(containerEl);
            // Verify Setting was created for title field
            expect(obsidian_1.Setting).toBeDefined();
        }));
        test('should update assetTitle when title changes', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            yield modal.setupTitleField(containerEl);
            // Simulate title change
            const testTitle = 'Test Asset Title';
            modal.assetTitle = testTitle;
            expect(modal.assetTitle).toBe(testTitle);
        }));
    });
    describe('Class Field', () => {
        test('should setup class field correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            yield modal.setupClassField(containerEl);
            expect(obsidian_1.Setting).toBeDefined();
        }));
        test('should have default class value', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            expect(modal.assetClass).toBe('exo__Asset');
        }));
        test('should update properties when class changes', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            const updatePropertiesForClassSpy = jest.spyOn(modal, 'updatePropertiesForClass');
            yield modal.setupClassField(containerEl);
            // Simulate class change
            const newClass = 'exo__Task';
            modal.assetClass = newClass;
            expect(modal.assetClass).toBe(newClass);
        }));
    });
    describe('Ontology Field', () => {
        test('should setup ontology field correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            yield modal.setupOntologyField(containerEl);
            expect(obsidian_1.Setting).toBeDefined();
        }));
        test('should handle empty ontology list', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            yield modal.setupOntologyField(containerEl);
            // Should not crash with empty ontologies list
            expect(containerEl).toBeDefined();
        }));
    });
    describe('Properties Section', () => {
        test('should setup properties section correctly', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            yield modal.setupPropertiesSection(containerEl);
            expect(containerEl.createEl).toHaveBeenCalledWith('h3', {
                text: 'Properties',
                cls: 'exocortex-properties-header'
            });
            expect(containerEl.createDiv).toHaveBeenCalledWith({
                cls: 'exocortex-properties-container'
            });
        }));
        test('should update properties for default class', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const containerEl = document.createElement('div');
            const updatePropertiesForClassSpy = jest.spyOn(modal, 'updatePropertiesForClass');
            yield modal.setupPropertiesSection(containerEl);
            expect(updatePropertiesForClassSpy).toHaveBeenCalledWith('exo__Asset');
        }));
    });
    describe('Properties Management', () => {
        test('should clear existing properties when updating for new class', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockPropertiesContainer = document.createElement('div');
            modal.propertiesContainer = mockPropertiesContainer;
            modal.propertyValues.set('test', 'value');
            yield modal.updatePropertiesForClass('exo__Task');
            expect(mockPropertiesContainer.empty).toHaveBeenCalled();
            expect(modal.propertyValues.size).toBe(0);
        }));
        test('should add default properties for exo__Asset class', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const mockPropertiesContainer = document.createElement('div');
            mockPropertiesContainer.createEl = jest.fn().mockReturnValue(document.createElement('div'));
            mockPropertiesContainer.empty = jest.fn();
            modal.propertiesContainer = mockPropertiesContainer;
            yield modal.updatePropertiesForClass('exo__Asset');
            // Should have added default properties for exo__Asset (description and tags)
            expect(modal.propertyValues).toBeDefined();
            // Should have created property fields in the container
            expect(mockPropertiesContainer.createEl).not.toHaveBeenCalledWith('p', {
                text: 'No specific properties for this class',
                cls: 'exocortex-no-properties'
            });
        }));
    });
    describe('Property Field Creation', () => {
        let mockPropertiesContainer;
        beforeEach(() => {
            mockPropertiesContainer = document.createElement('div');
            modal.propertiesContainer = mockPropertiesContainer;
        });
        test('should create text field for text property', () => {
            const property = {
                name: 'description',
                label: 'Description',
                type: 'text',
                isRequired: false,
                description: 'Asset description'
            };
            modal.createPropertyField(property);
            // Should create Setting instance
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should create enum field for enum property', () => {
            const property = {
                name: 'status',
                label: 'Status',
                type: 'enum',
                options: ['active', 'inactive'],
                isRequired: true,
                description: 'Asset status'
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should create boolean field for boolean property', () => {
            const property = {
                name: 'completed',
                label: 'Completed',
                type: 'boolean',
                isRequired: false,
                description: 'Whether task is completed'
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should create date field for date property', () => {
            const property = {
                name: 'dueDate',
                label: 'Due Date',
                type: 'date',
                isRequired: false,
                description: 'Task due date'
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should create number field for number property', () => {
            const property = {
                name: 'effort',
                label: 'Effort',
                type: 'number',
                isRequired: false,
                description: 'Estimated effort in hours'
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should create textarea field for text property', () => {
            const property = {
                name: 'notes',
                label: 'Notes',
                type: 'text',
                isRequired: false,
                description: 'Additional notes'
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should create array field for array property', () => {
            const property = {
                name: 'tags',
                label: 'Tags',
                type: 'array',
                isRequired: false,
                description: 'Asset tags'
            };
            modal.createPropertyField(property);
            expect(obsidian_1.Setting).toBeDefined();
        });
        test('should show required indicator for required fields', () => {
            const property = {
                name: 'title',
                label: 'Title',
                type: 'text',
                isRequired: true,
                description: 'Asset title'
            };
            modal.createPropertyField(property);
            // The field label should include the required indicator " *"
            expect(obsidian_1.Setting).toBeDefined();
        });
    });
    describe('Asset Creation', () => {
        test('should call createAssetUseCase.execute when creating asset', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: true,
                assetId: 'test-id',
                message: 'Asset created successfully'
            });
            modal.assetTitle = 'Test Asset';
            modal.assetClass = 'exo__Task';
            modal.assetOntology = 'exo';
            modal.propertyValues.set('priority', 'high');
            const closeSpy = jest.spyOn(modal, 'close').mockImplementation(() => { });
            yield modal.createAsset();
            expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith({
                title: 'Test Asset',
                className: 'exo__Task',
                ontologyPrefix: 'exo',
                properties: {
                    priority: 'high'
                }
            });
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Asset created successfully');
            expect(closeSpy).toHaveBeenCalled();
        }));
        test('should show error notice when asset creation fails', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: false,
                assetId: '',
                message: 'Creation failed'
            });
            modal.assetTitle = 'Test Asset';
            yield modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Failed to create asset');
        }));
        test('should handle errors during asset creation', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const error = new Error('Network error');
            mockCreateAssetUseCase.execute.mockRejectedValue(error);
            modal.assetTitle = 'Test Asset';
            yield modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Error: Network error');
        }));
        test('should convert property values to plain object', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateAssetUseCase.execute.mockResolvedValue({
                success: true,
                assetId: 'test-id',
                message: 'Success'
            });
            modal.assetTitle = 'Test Asset';
            modal.propertyValues.set('prop1', 'value1');
            modal.propertyValues.set('prop2', 'value2');
            yield modal.createAsset();
            expect(mockCreateAssetUseCase.execute).toHaveBeenCalledWith(expect.objectContaining({
                properties: {
                    prop1: 'value1',
                    prop2: 'value2'
                }
            }));
        }));
    });
    describe('Modal Cleanup', () => {
        test('should clear content on close', () => {
            const mockContentEl = document.createElement('div');
            const emptySpy = jest.spyOn(mockContentEl, 'empty');
            modal.contentEl = mockContentEl;
            modal.onClose();
            expect(emptySpy).toHaveBeenCalled();
        });
    });
    describe('Input Validation', () => {
        test('should handle empty title field', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error('Asset title is required'));
            modal.assetTitle = '';
            yield modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Error: Asset title is required');
        }));
        test('should handle missing class field', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error('Asset class is required'));
            modal.assetTitle = 'Test';
            modal.assetClass = '';
            yield modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Error: Asset class is required');
        }));
        test('should handle missing ontology field', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            mockCreateAssetUseCase.execute.mockRejectedValue(new Error('Ontology prefix is required'));
            modal.assetTitle = 'Test';
            modal.assetOntology = '';
            yield modal.createAsset();
            expect(obsidian_1.Notice).toHaveBeenCalledWith('Error: Ontology prefix is required');
        }));
    });
    describe('Property Value Handling', () => {
        test('should handle array values correctly', () => {
            const containerEl = document.createElement('div');
            modal.propertiesContainer = containerEl;
            const property = {
                name: 'tags',
                label: 'Tags',
                type: 'array',
                isRequired: false,
                description: 'Asset tags'
            };
            modal.createArrayField = jest.fn().mockImplementation((setting, prop) => {
                // Simulate adding comma-separated values
                modal.propertyValues.set(prop.name, ['tag1', 'tag2', 'tag3']);
            });
            modal.createPropertyField(property);
            modal.createArrayField(null, property);
            const values = modal.propertyValues.get('tags');
            expect(values).toEqual(['tag1', 'tag2', 'tag3']);
        });
        test('should handle wiki link values correctly', () => {
            const containerEl = document.createElement('div');
            modal.propertiesContainer = containerEl;
            const property = {
                name: 'relatedTasks',
                label: 'Related Tasks',
                type: 'array',
                isRequired: false,
                description: 'Related task links'
            };
            modal.createArrayField = jest.fn().mockImplementation((setting, prop) => {
                // Simulate adding wiki links
                modal.propertyValues.set(prop.name, ['[[Task 1]]', '[[Task 2]]']);
            });
            modal.createPropertyField(property);
            modal.createArrayField(null, property);
            const values = modal.propertyValues.get('relatedTasks');
            expect(values).toEqual(['[[Task 1]]', '[[Task 2]]']);
        });
        test('should handle number parsing correctly', () => {
            const containerEl = document.createElement('div');
            modal.propertiesContainer = containerEl;
            modal.createNumberField = jest.fn().mockImplementation((setting, prop) => {
                // Simulate valid number input
                modal.propertyValues.set(prop.name, 42);
            });
            const property = {
                name: 'effort',
                label: 'Effort',
                type: 'number',
                isRequired: false,
                description: 'Effort in hours'
            };
            modal.createPropertyField(property);
            modal.createNumberField(null, property);
            const value = modal.propertyValues.get('effort');
            expect(value).toBe(42);
            expect(typeof value).toBe('number');
        });
        test('should clear property values when empty', () => {
            modal.propertyValues.set('test', 'value');
            // Simulate clearing a field
            modal.propertyValues.delete('test');
            expect(modal.propertyValues.has('test')).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,