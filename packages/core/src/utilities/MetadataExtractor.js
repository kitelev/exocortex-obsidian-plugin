export class MetadataExtractor {
    constructor(metadataCache) {
        this.metadataCache = metadataCache;
    }
    extractMetadata(file) {
        if (!file)
            return {};
        const cache = this.metadataCache.getFileCache(file);
        return cache?.frontmatter || {};
    }
    extractInstanceClass(metadata) {
        return metadata.exo__Instance_class || null;
    }
    extractStatus(metadata) {
        return metadata.ems__Effort_status || null;
    }
    extractIsArchived(metadata) {
        const archived = metadata.exo__Asset_isArchived;
        if (archived === true || archived === 1)
            return true;
        if (typeof archived === "string") {
            const lowerValue = archived.toLowerCase();
            return lowerValue === "true" || lowerValue === "yes";
        }
        return false;
    }
    static extractIsDefinedBy(sourceMetadata) {
        let isDefinedBy = sourceMetadata.exo__Asset_isDefinedBy || '""';
        if (Array.isArray(isDefinedBy)) {
            isDefinedBy = isDefinedBy[0] || '""';
        }
        return isDefinedBy;
    }
    extractExpectedFolder(metadata) {
        const isDefinedBy = metadata.exo__Asset_isDefinedBy;
        if (!isDefinedBy)
            return null;
        const definedByValue = Array.isArray(isDefinedBy) ? isDefinedBy[0] : isDefinedBy;
        if (!definedByValue || typeof definedByValue !== "string")
            return null;
        const cleanValue = definedByValue.replace(/["'[\]]/g, "").trim();
        if (!cleanValue)
            return null;
        const parts = cleanValue.split("/");
        parts.pop();
        return parts.join("/");
    }
    extractCommandVisibilityContext(file) {
        const metadata = this.extractMetadata(file);
        const instanceClass = this.extractInstanceClass(metadata);
        const currentStatus = this.extractStatus(metadata);
        const isArchived = this.extractIsArchived(metadata);
        const currentFolder = file.parent?.path || "";
        const expectedFolder = this.extractExpectedFolder(metadata);
        return {
            instanceClass,
            currentStatus,
            metadata,
            isArchived,
            currentFolder,
            expectedFolder,
        };
    }
    extractCache(file) {
        if (!file)
            return null;
        return this.metadataCache.getFileCache(file);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWV0YWRhdGFFeHRyYWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJNZXRhZGF0YUV4dHJhY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8saUJBQWlCO0lBQzVCLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQUVwRCxlQUFlLENBQUMsSUFBa0I7UUFDaEMsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVyQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwRCxPQUFPLEtBQUssRUFBRSxXQUFXLElBQUksRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxRQUE2QjtRQUNoRCxPQUFPLFFBQVEsQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUM7SUFDOUMsQ0FBQztJQUVELGFBQWEsQ0FBQyxRQUE2QjtRQUN6QyxPQUFPLFFBQVEsQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUM7SUFDN0MsQ0FBQztJQUVELGlCQUFpQixDQUFDLFFBQTZCO1FBQzdDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQztRQUNoRCxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLENBQUM7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNyRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQ2pDLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMxQyxPQUFPLFVBQVUsS0FBSyxNQUFNLElBQUksVUFBVSxLQUFLLEtBQUssQ0FBQztRQUN2RCxDQUFDO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGNBQW1DO1FBQzNELElBQUksV0FBVyxHQUFHLGNBQWMsQ0FBQyxzQkFBc0IsSUFBSSxJQUFJLENBQUM7UUFDaEUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7WUFDL0IsV0FBVyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUM7UUFDdkMsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxxQkFBcUIsQ0FBQyxRQUE2QjtRQUNqRCxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsc0JBQXNCLENBQUM7UUFDcEQsSUFBSSxDQUFDLFdBQVc7WUFBRSxPQUFPLElBQUksQ0FBQztRQUU5QixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNqRixJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sY0FBYyxLQUFLLFFBQVE7WUFBRSxPQUFPLElBQUksQ0FBQztRQUV2RSxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqRSxJQUFJLENBQUMsVUFBVTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRTdCLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ1osT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCwrQkFBK0IsQ0FBQyxJQUFXO1FBQ3pDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkQsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM5QyxNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUQsT0FBTztZQUNMLGFBQWE7WUFDYixhQUFhO1lBQ2IsUUFBUTtZQUNSLFVBQVU7WUFDVixhQUFhO1lBQ2IsY0FBYztTQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsWUFBWSxDQUFDLElBQWtCO1FBQzdCLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDdkIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBURmlsZSwgTWV0YWRhdGFDYWNoZSwgQ2FjaGVkTWV0YWRhdGEgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IENvbW1hbmRWaXNpYmlsaXR5Q29udGV4dCB9IGZyb20gXCIuLi9kb21haW4vY29tbWFuZHMvQ29tbWFuZFZpc2liaWxpdHlcIjtcblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhRXh0cmFjdG9yIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXRhZGF0YUNhY2hlOiBNZXRhZGF0YUNhY2hlKSB7fVxuXG4gIGV4dHJhY3RNZXRhZGF0YShmaWxlOiBURmlsZSB8IG51bGwpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICBpZiAoIWZpbGUpIHJldHVybiB7fTtcblxuICAgIGNvbnN0IGNhY2hlID0gdGhpcy5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICByZXR1cm4gY2FjaGU/LmZyb250bWF0dGVyIHx8IHt9O1xuICB9XG5cbiAgZXh0cmFjdEluc3RhbmNlQ2xhc3MobWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bGwge1xuICAgIHJldHVybiBtZXRhZGF0YS5leG9fX0luc3RhbmNlX2NsYXNzIHx8IG51bGw7XG4gIH1cblxuICBleHRyYWN0U3RhdHVzKG1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHwgc3RyaW5nW10gfCBudWxsIHtcbiAgICByZXR1cm4gbWV0YWRhdGEuZW1zX19FZmZvcnRfc3RhdHVzIHx8IG51bGw7XG4gIH1cblxuICBleHRyYWN0SXNBcmNoaXZlZChtZXRhZGF0YTogUmVjb3JkPHN0cmluZywgYW55Pik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGFyY2hpdmVkID0gbWV0YWRhdGEuZXhvX19Bc3NldF9pc0FyY2hpdmVkO1xuICAgIGlmIChhcmNoaXZlZCA9PT0gdHJ1ZSB8fCBhcmNoaXZlZCA9PT0gMSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHR5cGVvZiBhcmNoaXZlZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgbG93ZXJWYWx1ZSA9IGFyY2hpdmVkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gbG93ZXJWYWx1ZSA9PT0gXCJ0cnVlXCIgfHwgbG93ZXJWYWx1ZSA9PT0gXCJ5ZXNcIjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGV4dHJhY3RJc0RlZmluZWRCeShzb3VyY2VNZXRhZGF0YTogUmVjb3JkPHN0cmluZywgYW55Pik6IHN0cmluZyB7XG4gICAgbGV0IGlzRGVmaW5lZEJ5ID0gc291cmNlTWV0YWRhdGEuZXhvX19Bc3NldF9pc0RlZmluZWRCeSB8fCAnXCJcIic7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaXNEZWZpbmVkQnkpKSB7XG4gICAgICBpc0RlZmluZWRCeSA9IGlzRGVmaW5lZEJ5WzBdIHx8ICdcIlwiJztcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmaW5lZEJ5O1xuICB9XG5cbiAgZXh0cmFjdEV4cGVjdGVkRm9sZGVyKG1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHwgbnVsbCB7XG4gICAgY29uc3QgaXNEZWZpbmVkQnkgPSBtZXRhZGF0YS5leG9fX0Fzc2V0X2lzRGVmaW5lZEJ5O1xuICAgIGlmICghaXNEZWZpbmVkQnkpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgZGVmaW5lZEJ5VmFsdWUgPSBBcnJheS5pc0FycmF5KGlzRGVmaW5lZEJ5KSA/IGlzRGVmaW5lZEJ5WzBdIDogaXNEZWZpbmVkQnk7XG4gICAgaWYgKCFkZWZpbmVkQnlWYWx1ZSB8fCB0eXBlb2YgZGVmaW5lZEJ5VmFsdWUgIT09IFwic3RyaW5nXCIpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgY2xlYW5WYWx1ZSA9IGRlZmluZWRCeVZhbHVlLnJlcGxhY2UoL1tcIidbXFxdXS9nLCBcIlwiKS50cmltKCk7XG4gICAgaWYgKCFjbGVhblZhbHVlKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IHBhcnRzID0gY2xlYW5WYWx1ZS5zcGxpdChcIi9cIik7XG4gICAgcGFydHMucG9wKCk7XG4gICAgcmV0dXJuIHBhcnRzLmpvaW4oXCIvXCIpO1xuICB9XG5cbiAgZXh0cmFjdENvbW1hbmRWaXNpYmlsaXR5Q29udGV4dChmaWxlOiBURmlsZSk6IENvbW1hbmRWaXNpYmlsaXR5Q29udGV4dCB7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aGlzLmV4dHJhY3RNZXRhZGF0YShmaWxlKTtcbiAgICBjb25zdCBpbnN0YW5jZUNsYXNzID0gdGhpcy5leHRyYWN0SW5zdGFuY2VDbGFzcyhtZXRhZGF0YSk7XG4gICAgY29uc3QgY3VycmVudFN0YXR1cyA9IHRoaXMuZXh0cmFjdFN0YXR1cyhtZXRhZGF0YSk7XG4gICAgY29uc3QgaXNBcmNoaXZlZCA9IHRoaXMuZXh0cmFjdElzQXJjaGl2ZWQobWV0YWRhdGEpO1xuICAgIGNvbnN0IGN1cnJlbnRGb2xkZXIgPSBmaWxlLnBhcmVudD8ucGF0aCB8fCBcIlwiO1xuICAgIGNvbnN0IGV4cGVjdGVkRm9sZGVyID0gdGhpcy5leHRyYWN0RXhwZWN0ZWRGb2xkZXIobWV0YWRhdGEpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGluc3RhbmNlQ2xhc3MsXG4gICAgICBjdXJyZW50U3RhdHVzLFxuICAgICAgbWV0YWRhdGEsXG4gICAgICBpc0FyY2hpdmVkLFxuICAgICAgY3VycmVudEZvbGRlcixcbiAgICAgIGV4cGVjdGVkRm9sZGVyLFxuICAgIH07XG4gIH1cblxuICBleHRyYWN0Q2FjaGUoZmlsZTogVEZpbGUgfCBudWxsKTogQ2FjaGVkTWV0YWRhdGEgfCBudWxsIHtcbiAgICBpZiAoIWZpbGUpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB0aGlzLm1ldGFkYXRhQ2FjaGUuZ2V0RmlsZUNhY2hlKGZpbGUpO1xuICB9XG59XG4iXX0=