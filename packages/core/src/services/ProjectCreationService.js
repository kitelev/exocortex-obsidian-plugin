import { v4 as uuidv4 } from "uuid";
import { WikiLinkHelpers } from "../utilities/WikiLinkHelpers";
import { AssetClass } from '../domain/constants';
import { DateFormatter } from "../utilities/DateFormatter";
import { MetadataExtractor } from "../utilities/MetadataExtractor";
import { MetadataHelpers } from "../utilities/MetadataHelpers";
/**
 * Mapping of source class to effort property name
 * Implements Strategy pattern for property selection
 */
const EFFORT_PROPERTY_MAP = {
    [AssetClass.AREA]: "ems__Effort_area",
    [AssetClass.INITIATIVE]: "ems__Effort_parent",
    [AssetClass.PROJECT]: "ems__Effort_parent",
};
export class ProjectCreationService {
    constructor(vault) {
        this.vault = vault;
    }
    async createProject(sourceFile, sourceMetadata, sourceClass, label) {
        const uid = uuidv4();
        const fileName = `${uid}.md`;
        const frontmatter = this.generateProjectFrontmatter(sourceMetadata, sourceFile.basename, sourceClass, label, uid);
        const fileContent = MetadataHelpers.buildFileContent(frontmatter);
        const folderPath = sourceFile.parent?.path || "";
        const filePath = folderPath ? `${folderPath}/${fileName}` : fileName;
        const createdFile = await this.vault.create(filePath, fileContent);
        return createdFile;
    }
    generateProjectFrontmatter(sourceMetadata, sourceName, sourceClass, label, uid) {
        const now = new Date();
        const timestamp = DateFormatter.toLocalTimestamp(now);
        const isDefinedBy = MetadataExtractor.extractIsDefinedBy(sourceMetadata);
        // Get appropriate effort property name based on source class
        const cleanSourceClass = WikiLinkHelpers.normalize(sourceClass);
        const effortProperty = EFFORT_PROPERTY_MAP[cleanSourceClass] || "ems__Effort_area";
        const frontmatter = {};
        frontmatter["exo__Asset_isDefinedBy"] = MetadataHelpers.ensureQuoted(isDefinedBy);
        frontmatter["exo__Asset_uid"] = uid || uuidv4();
        frontmatter["exo__Asset_createdAt"] = timestamp;
        frontmatter["exo__Instance_class"] = [`"[[${AssetClass.PROJECT}]]"`];
        frontmatter["ems__Effort_status"] = '"[[ems__EffortStatusDraft]]"';
        frontmatter[effortProperty] = `"[[${sourceName}]]"`;
        if (label && label.trim() !== "") {
            const trimmedLabel = label.trim();
            frontmatter["exo__Asset_label"] = trimmedLabel;
            frontmatter["aliases"] = [trimmedLabel];
        }
        return frontmatter;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvamVjdENyZWF0aW9uU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlByb2plY3RDcmVhdGlvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRS9EOzs7R0FHRztBQUNILE1BQU0sbUJBQW1CLEdBQTJCO0lBQ2xELENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLGtCQUFrQjtJQUNyQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxvQkFBb0I7SUFDN0MsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsb0JBQW9CO0NBQzNDLENBQUM7QUFFRixNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDLFlBQW9CLEtBQVk7UUFBWixVQUFLLEdBQUwsS0FBSyxDQUFPO0lBQUcsQ0FBQztJQUVwQyxLQUFLLENBQUMsYUFBYSxDQUNqQixVQUFpQixFQUNqQixjQUFtQyxFQUNuQyxXQUFtQixFQUNuQixLQUFjO1FBRWQsTUFBTSxHQUFHLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDckIsTUFBTSxRQUFRLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztRQUM3QixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQ2pELGNBQWMsRUFDZCxVQUFVLENBQUMsUUFBUSxFQUNuQixXQUFXLEVBQ1gsS0FBSyxFQUNMLEdBQUcsQ0FDSixDQUFDO1FBQ0YsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFFckUsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFbkUsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELDBCQUEwQixDQUN4QixjQUFtQyxFQUNuQyxVQUFrQixFQUNsQixXQUFtQixFQUNuQixLQUFjLEVBQ2QsR0FBWTtRQUVaLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRELE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpFLDZEQUE2RDtRQUM3RCxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEUsTUFBTSxjQUFjLEdBQ2xCLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLElBQUksa0JBQWtCLENBQUM7UUFFOUQsTUFBTSxXQUFXLEdBQXdCLEVBQUUsQ0FBQztRQUM1QyxXQUFXLENBQUMsd0JBQXdCLENBQUMsR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xGLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNoRCxXQUFXLENBQUMsc0JBQXNCLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDaEQsV0FBVyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLDhCQUE4QixDQUFDO1FBQ25FLFdBQVcsQ0FBQyxjQUFjLENBQUMsR0FBRyxNQUFNLFVBQVUsS0FBSyxDQUFDO1FBRXBELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNqQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsWUFBWSxDQUFDO1lBQy9DLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBURmlsZSwgVmF1bHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgeyBXaWtpTGlua0hlbHBlcnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1dpa2lMaW5rSGVscGVyc1wiO1xuaW1wb3J0IHsgQXNzZXRDbGFzcyB9IGZyb20gJy4uL2RvbWFpbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgRGF0ZUZvcm1hdHRlciB9IGZyb20gXCIuLi91dGlsaXRpZXMvRGF0ZUZvcm1hdHRlclwiO1xuaW1wb3J0IHsgTWV0YWRhdGFFeHRyYWN0b3IgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL01ldGFkYXRhRXh0cmFjdG9yXCI7XG5pbXBvcnQgeyBNZXRhZGF0YUhlbHBlcnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL01ldGFkYXRhSGVscGVyc1wiO1xuXG4vKipcbiAqIE1hcHBpbmcgb2Ygc291cmNlIGNsYXNzIHRvIGVmZm9ydCBwcm9wZXJ0eSBuYW1lXG4gKiBJbXBsZW1lbnRzIFN0cmF0ZWd5IHBhdHRlcm4gZm9yIHByb3BlcnR5IHNlbGVjdGlvblxuICovXG5jb25zdCBFRkZPUlRfUFJPUEVSVFlfTUFQOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICBbQXNzZXRDbGFzcy5BUkVBXTogXCJlbXNfX0VmZm9ydF9hcmVhXCIsXG4gIFtBc3NldENsYXNzLklOSVRJQVRJVkVdOiBcImVtc19fRWZmb3J0X3BhcmVudFwiLFxuICBbQXNzZXRDbGFzcy5QUk9KRUNUXTogXCJlbXNfX0VmZm9ydF9wYXJlbnRcIixcbn07XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0Q3JlYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2YXVsdDogVmF1bHQpIHt9XG5cbiAgYXN5bmMgY3JlYXRlUHJvamVjdChcbiAgICBzb3VyY2VGaWxlOiBURmlsZSxcbiAgICBzb3VyY2VNZXRhZGF0YTogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBzb3VyY2VDbGFzczogc3RyaW5nLFxuICAgIGxhYmVsPzogc3RyaW5nLFxuICApOiBQcm9taXNlPFRGaWxlPiB7XG4gICAgY29uc3QgdWlkID0gdXVpZHY0KCk7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBgJHt1aWR9Lm1kYDtcbiAgICBjb25zdCBmcm9udG1hdHRlciA9IHRoaXMuZ2VuZXJhdGVQcm9qZWN0RnJvbnRtYXR0ZXIoXG4gICAgICBzb3VyY2VNZXRhZGF0YSxcbiAgICAgIHNvdXJjZUZpbGUuYmFzZW5hbWUsXG4gICAgICBzb3VyY2VDbGFzcyxcbiAgICAgIGxhYmVsLFxuICAgICAgdWlkLFxuICAgICk7XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBNZXRhZGF0YUhlbHBlcnMuYnVpbGRGaWxlQ29udGVudChmcm9udG1hdHRlcik7XG5cbiAgICBjb25zdCBmb2xkZXJQYXRoID0gc291cmNlRmlsZS5wYXJlbnQ/LnBhdGggfHwgXCJcIjtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGZvbGRlclBhdGggPyBgJHtmb2xkZXJQYXRofS8ke2ZpbGVOYW1lfWAgOiBmaWxlTmFtZTtcblxuICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdGhpcy52YXVsdC5jcmVhdGUoZmlsZVBhdGgsIGZpbGVDb250ZW50KTtcblxuICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgfVxuXG4gIGdlbmVyYXRlUHJvamVjdEZyb250bWF0dGVyKFxuICAgIHNvdXJjZU1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIHNvdXJjZU5hbWU6IHN0cmluZyxcbiAgICBzb3VyY2VDbGFzczogc3RyaW5nLFxuICAgIGxhYmVsPzogc3RyaW5nLFxuICAgIHVpZD86IHN0cmluZyxcbiAgKTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlRm9ybWF0dGVyLnRvTG9jYWxUaW1lc3RhbXAobm93KTtcblxuICAgIGNvbnN0IGlzRGVmaW5lZEJ5ID0gTWV0YWRhdGFFeHRyYWN0b3IuZXh0cmFjdElzRGVmaW5lZEJ5KHNvdXJjZU1ldGFkYXRhKTtcblxuICAgIC8vIEdldCBhcHByb3ByaWF0ZSBlZmZvcnQgcHJvcGVydHkgbmFtZSBiYXNlZCBvbiBzb3VyY2UgY2xhc3NcbiAgICBjb25zdCBjbGVhblNvdXJjZUNsYXNzID0gV2lraUxpbmtIZWxwZXJzLm5vcm1hbGl6ZShzb3VyY2VDbGFzcyk7XG4gICAgY29uc3QgZWZmb3J0UHJvcGVydHkgPVxuICAgICAgRUZGT1JUX1BST1BFUlRZX01BUFtjbGVhblNvdXJjZUNsYXNzXSB8fCBcImVtc19fRWZmb3J0X2FyZWFcIjtcblxuICAgIGNvbnN0IGZyb250bWF0dGVyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X2lzRGVmaW5lZEJ5XCJdID0gTWV0YWRhdGFIZWxwZXJzLmVuc3VyZVF1b3RlZChpc0RlZmluZWRCeSk7XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X3VpZFwiXSA9IHVpZCB8fCB1dWlkdjQoKTtcbiAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfY3JlYXRlZEF0XCJdID0gdGltZXN0YW1wO1xuICAgIGZyb250bWF0dGVyW1wiZXhvX19JbnN0YW5jZV9jbGFzc1wiXSA9IFtgXCJbWyR7QXNzZXRDbGFzcy5QUk9KRUNUfV1dXCJgXTtcbiAgICBmcm9udG1hdHRlcltcImVtc19fRWZmb3J0X3N0YXR1c1wiXSA9ICdcIltbZW1zX19FZmZvcnRTdGF0dXNEcmFmdF1dXCInO1xuICAgIGZyb250bWF0dGVyW2VmZm9ydFByb3BlcnR5XSA9IGBcIltbJHtzb3VyY2VOYW1lfV1dXCJgO1xuXG4gICAgaWYgKGxhYmVsICYmIGxhYmVsLnRyaW0oKSAhPT0gXCJcIikge1xuICAgICAgY29uc3QgdHJpbW1lZExhYmVsID0gbGFiZWwudHJpbSgpO1xuICAgICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X2xhYmVsXCJdID0gdHJpbW1lZExhYmVsO1xuICAgICAgZnJvbnRtYXR0ZXJbXCJhbGlhc2VzXCJdID0gW3RyaW1tZWRMYWJlbF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyb250bWF0dGVyO1xuICB9XG59XG4iXX0=