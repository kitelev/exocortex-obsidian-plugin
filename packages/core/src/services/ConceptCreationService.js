import { v4 as uuidv4 } from "uuid";
import { DateFormatter } from "../utilities/DateFormatter";
import { MetadataHelpers } from "../utilities/MetadataHelpers";
import { AssetClass } from '../domain/constants';
export class ConceptCreationService {
    constructor(vault) {
        this.vault = vault;
    }
    async createNarrowerConcept(parentFile, fileName, definition, aliases) {
        const uid = uuidv4();
        const fullFileName = fileName.endsWith(".md") ? fileName : `${fileName}.md`;
        const frontmatter = this.generateConceptFrontmatter(parentFile.basename, definition, aliases, uid);
        const fileContent = MetadataHelpers.buildFileContent(frontmatter);
        const folderPath = "concepts";
        const filePath = `${folderPath}/${fullFileName}`;
        const folder = this.vault.getAbstractFileByPath(folderPath);
        if (!folder) {
            await this.vault.createFolder(folderPath);
        }
        const createdFile = await this.vault.create(filePath, fileContent);
        return createdFile;
    }
    generateConceptFrontmatter(parentConceptName, definition, aliases, uid) {
        const now = new Date();
        const timestamp = DateFormatter.toLocalTimestamp(now);
        const frontmatter = {};
        frontmatter["exo__Asset_isDefinedBy"] = '"[[!concepts]]"';
        frontmatter["exo__Asset_uid"] = uid;
        frontmatter["exo__Asset_createdAt"] = timestamp;
        frontmatter["exo__Instance_class"] = [`"[[${AssetClass.CONCEPT}]]"`];
        frontmatter["ims__Concept_broader"] = `"[[${parentConceptName}]]"`;
        frontmatter["ims__Concept_definition"] = definition;
        if (aliases.length > 0) {
            frontmatter["aliases"] = aliases;
        }
        return frontmatter;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uY2VwdENyZWF0aW9uU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNvbmNlcHRDcmVhdGlvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakQsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQyxZQUFvQixLQUFZO1FBQVosVUFBSyxHQUFMLEtBQUssQ0FBTztJQUFHLENBQUM7SUFFcEMsS0FBSyxDQUFDLHFCQUFxQixDQUN6QixVQUFpQixFQUNqQixRQUFnQixFQUNoQixVQUFrQixFQUNsQixPQUFpQjtRQUVqQixNQUFNLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNyQixNQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxLQUFLLENBQUM7UUFFNUUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUNqRCxVQUFVLENBQUMsUUFBUSxFQUNuQixVQUFVLEVBQ1YsT0FBTyxFQUNQLEdBQUcsQ0FDSixDQUFDO1FBRUYsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM5QixNQUFNLFFBQVEsR0FBRyxHQUFHLFVBQVUsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVqRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNaLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRW5FLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFTywwQkFBMEIsQ0FDaEMsaUJBQXlCLEVBQ3pCLFVBQWtCLEVBQ2xCLE9BQWlCLEVBQ2pCLEdBQVc7UUFFWCxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV0RCxNQUFNLFdBQVcsR0FBd0IsRUFBRSxDQUFDO1FBQzVDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLGlCQUFpQixDQUFDO1FBQzFELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNwQyxXQUFXLENBQUMsc0JBQXNCLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDaEQsV0FBVyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxPQUFPLEtBQUssQ0FBQyxDQUFDO1FBQ3JFLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLE1BQU0saUJBQWlCLEtBQUssQ0FBQztRQUNuRSxXQUFXLENBQUMseUJBQXlCLENBQUMsR0FBRyxVQUFVLENBQUM7UUFFcEQsSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3ZCLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUM7UUFDbkMsQ0FBQztRQUVELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRGaWxlLCBWYXVsdCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IERhdGVGb3JtYXR0ZXIgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL0RhdGVGb3JtYXR0ZXJcIjtcbmltcG9ydCB7IE1ldGFkYXRhSGVscGVycyB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWV0YWRhdGFIZWxwZXJzXCI7XG5pbXBvcnQgeyBBc3NldENsYXNzIH0gZnJvbSAnLi4vZG9tYWluL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjbGFzcyBDb25jZXB0Q3JlYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2YXVsdDogVmF1bHQpIHt9XG5cbiAgYXN5bmMgY3JlYXRlTmFycm93ZXJDb25jZXB0KFxuICAgIHBhcmVudEZpbGU6IFRGaWxlLFxuICAgIGZpbGVOYW1lOiBzdHJpbmcsXG4gICAgZGVmaW5pdGlvbjogc3RyaW5nLFxuICAgIGFsaWFzZXM6IHN0cmluZ1tdLFxuICApOiBQcm9taXNlPFRGaWxlPiB7XG4gICAgY29uc3QgdWlkID0gdXVpZHY0KCk7XG4gICAgY29uc3QgZnVsbEZpbGVOYW1lID0gZmlsZU5hbWUuZW5kc1dpdGgoXCIubWRcIikgPyBmaWxlTmFtZSA6IGAke2ZpbGVOYW1lfS5tZGA7XG5cbiAgICBjb25zdCBmcm9udG1hdHRlciA9IHRoaXMuZ2VuZXJhdGVDb25jZXB0RnJvbnRtYXR0ZXIoXG4gICAgICBwYXJlbnRGaWxlLmJhc2VuYW1lLFxuICAgICAgZGVmaW5pdGlvbixcbiAgICAgIGFsaWFzZXMsXG4gICAgICB1aWQsXG4gICAgKTtcblxuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gTWV0YWRhdGFIZWxwZXJzLmJ1aWxkRmlsZUNvbnRlbnQoZnJvbnRtYXR0ZXIpO1xuXG4gICAgY29uc3QgZm9sZGVyUGF0aCA9IFwiY29uY2VwdHNcIjtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGAke2ZvbGRlclBhdGh9LyR7ZnVsbEZpbGVOYW1lfWA7XG5cbiAgICBjb25zdCBmb2xkZXIgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmb2xkZXJQYXRoKTtcbiAgICBpZiAoIWZvbGRlcikge1xuICAgICAgYXdhaXQgdGhpcy52YXVsdC5jcmVhdGVGb2xkZXIoZm9sZGVyUGF0aCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3JlYXRlZEZpbGUgPSBhd2FpdCB0aGlzLnZhdWx0LmNyZWF0ZShmaWxlUGF0aCwgZmlsZUNvbnRlbnQpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZWRGaWxlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUNvbmNlcHRGcm9udG1hdHRlcihcbiAgICBwYXJlbnRDb25jZXB0TmFtZTogc3RyaW5nLFxuICAgIGRlZmluaXRpb246IHN0cmluZyxcbiAgICBhbGlhc2VzOiBzdHJpbmdbXSxcbiAgICB1aWQ6IHN0cmluZyxcbiAgKTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlRm9ybWF0dGVyLnRvTG9jYWxUaW1lc3RhbXAobm93KTtcblxuICAgIGNvbnN0IGZyb250bWF0dGVyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X2lzRGVmaW5lZEJ5XCJdID0gJ1wiW1shY29uY2VwdHNdXVwiJztcbiAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfdWlkXCJdID0gdWlkO1xuICAgIGZyb250bWF0dGVyW1wiZXhvX19Bc3NldF9jcmVhdGVkQXRcIl0gPSB0aW1lc3RhbXA7XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0luc3RhbmNlX2NsYXNzXCJdID0gW2BcIltbJHtBc3NldENsYXNzLkNPTkNFUFR9XV1cImBdO1xuICAgIGZyb250bWF0dGVyW1wiaW1zX19Db25jZXB0X2Jyb2FkZXJcIl0gPSBgXCJbWyR7cGFyZW50Q29uY2VwdE5hbWV9XV1cImA7XG4gICAgZnJvbnRtYXR0ZXJbXCJpbXNfX0NvbmNlcHRfZGVmaW5pdGlvblwiXSA9IGRlZmluaXRpb247XG5cbiAgICBpZiAoYWxpYXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBmcm9udG1hdHRlcltcImFsaWFzZXNcIl0gPSBhbGlhc2VzO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9udG1hdHRlcjtcbiAgfVxufVxuIl19