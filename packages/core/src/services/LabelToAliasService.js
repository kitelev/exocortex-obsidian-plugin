export class LabelToAliasService {
    constructor(vault) {
        this.vault = vault;
    }
    async copyLabelToAliases(file) {
        const fileContent = await this.vault.read(file);
        const label = this.extractLabel(fileContent);
        if (!label) {
            throw new Error("No exo__Asset_label found in file");
        }
        const updatedContent = this.addLabelToAliases(fileContent, label);
        await this.vault.modify(file, updatedContent);
    }
    extractLabel(content) {
        const frontmatterRegex = /^---\r?\n([\s\S]*?)\r?\n---/;
        const match = content.match(frontmatterRegex);
        if (!match)
            return null;
        const frontmatterContent = match[1];
        const labelMatch = frontmatterContent.match(/exo__Asset_label:\s*["']?([^"'\r\n]+)["']?/);
        if (labelMatch && labelMatch[1]) {
            return labelMatch[1].trim();
        }
        return null;
    }
    addLabelToAliases(content, label) {
        const frontmatterRegex = /^---\r?\n([\s\S]*?)\r?\n---/;
        const match = content.match(frontmatterRegex);
        const lineEnding = content.includes('\r\n') ? '\r\n' : '\n';
        if (!match) {
            const newFrontmatter = `---${lineEnding}aliases:${lineEnding}  - "${label}"${lineEnding}---${lineEnding}${content}`;
            return newFrontmatter;
        }
        const frontmatterContent = match[1];
        let updatedFrontmatter = frontmatterContent;
        if (updatedFrontmatter.includes("aliases:")) {
            const aliasesMatch = updatedFrontmatter.match(/(aliases:\r?\n(?: {2}- .*\r?\n)*)/);
            if (aliasesMatch) {
                updatedFrontmatter = updatedFrontmatter.replace(/(aliases:\r?\n(?: {2}- .*\r?\n)*)/, `$1  - "${label}"${lineEnding}`);
            }
        }
        else {
            updatedFrontmatter += `${lineEnding}aliases:${lineEnding}  - "${label}"`;
        }
        return content.replace(frontmatterRegex, `---${lineEnding}${updatedFrontmatter}${lineEnding}---`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGFiZWxUb0FsaWFzU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkxhYmVsVG9BbGlhc1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFvQixLQUFZO1FBQVosVUFBSyxHQUFMLEtBQUssQ0FBTztJQUFHLENBQUM7SUFFcEMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQVc7UUFDbEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNYLE1BQU0sSUFBSSxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsRSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU8sWUFBWSxDQUFDLE9BQWU7UUFDbEMsTUFBTSxnQkFBZ0IsR0FBRyw2QkFBNkIsQ0FBQztRQUN2RCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFOUMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLElBQUksQ0FBQztRQUV4QixNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQUUxRixJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8saUJBQWlCLENBQUMsT0FBZSxFQUFFLEtBQWE7UUFDdEQsTUFBTSxnQkFBZ0IsR0FBRyw2QkFBNkIsQ0FBQztRQUN2RCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFOUMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFNUQsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ1gsTUFBTSxjQUFjLEdBQUcsTUFBTSxVQUFVLFdBQVcsVUFBVSxRQUFRLEtBQUssSUFBSSxVQUFVLE1BQU0sVUFBVSxHQUFHLE9BQU8sRUFBRSxDQUFDO1lBQ3BILE9BQU8sY0FBYyxDQUFDO1FBQ3hCLENBQUM7UUFFRCxNQUFNLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQyxJQUFJLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBRTVDLElBQUksa0JBQWtCLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7WUFDNUMsTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7WUFDbkYsSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDakIsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxDQUM3QyxtQ0FBbUMsRUFDbkMsVUFBVSxLQUFLLElBQUksVUFBVSxFQUFFLENBQ2hDLENBQUM7WUFDSixDQUFDO1FBQ0gsQ0FBQzthQUFNLENBQUM7WUFDTixrQkFBa0IsSUFBSSxHQUFHLFVBQVUsV0FBVyxVQUFVLFFBQVEsS0FBSyxHQUFHLENBQUM7UUFDM0UsQ0FBQztRQUVELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FDcEIsZ0JBQWdCLEVBQ2hCLE1BQU0sVUFBVSxHQUFHLGtCQUFrQixHQUFHLFVBQVUsS0FBSyxDQUN4RCxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEZpbGUsIFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBMYWJlbFRvQWxpYXNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2YXVsdDogVmF1bHQpIHt9XG5cbiAgYXN5bmMgY29weUxhYmVsVG9BbGlhc2VzKGZpbGU6IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmV4dHJhY3RMYWJlbChmaWxlQ29udGVudCk7XG5cbiAgICBpZiAoIWxhYmVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBleG9fX0Fzc2V0X2xhYmVsIGZvdW5kIGluIGZpbGVcIik7XG4gICAgfVxuXG4gICAgY29uc3QgdXBkYXRlZENvbnRlbnQgPSB0aGlzLmFkZExhYmVsVG9BbGlhc2VzKGZpbGVDb250ZW50LCBsYWJlbCk7XG4gICAgYXdhaXQgdGhpcy52YXVsdC5tb2RpZnkoZmlsZSwgdXBkYXRlZENvbnRlbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0TGFiZWwoY29udGVudDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXJSZWdleCA9IC9eLS0tXFxyP1xcbihbXFxzXFxTXSo/KVxccj9cXG4tLS0vO1xuICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaChmcm9udG1hdHRlclJlZ2V4KTtcblxuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgZnJvbnRtYXR0ZXJDb250ZW50ID0gbWF0Y2hbMV07XG4gICAgY29uc3QgbGFiZWxNYXRjaCA9IGZyb250bWF0dGVyQ29udGVudC5tYXRjaCgvZXhvX19Bc3NldF9sYWJlbDpcXHMqW1wiJ10/KFteXCInXFxyXFxuXSspW1wiJ10/Lyk7XG5cbiAgICBpZiAobGFiZWxNYXRjaCAmJiBsYWJlbE1hdGNoWzFdKSB7XG4gICAgICByZXR1cm4gbGFiZWxNYXRjaFsxXS50cmltKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFkZExhYmVsVG9BbGlhc2VzKGNvbnRlbnQ6IHN0cmluZywgbGFiZWw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXJSZWdleCA9IC9eLS0tXFxyP1xcbihbXFxzXFxTXSo/KVxccj9cXG4tLS0vO1xuICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaChmcm9udG1hdHRlclJlZ2V4KTtcblxuICAgIGNvbnN0IGxpbmVFbmRpbmcgPSBjb250ZW50LmluY2x1ZGVzKCdcXHJcXG4nKSA/ICdcXHJcXG4nIDogJ1xcbic7XG5cbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb25zdCBuZXdGcm9udG1hdHRlciA9IGAtLS0ke2xpbmVFbmRpbmd9YWxpYXNlczoke2xpbmVFbmRpbmd9ICAtIFwiJHtsYWJlbH1cIiR7bGluZUVuZGluZ30tLS0ke2xpbmVFbmRpbmd9JHtjb250ZW50fWA7XG4gICAgICByZXR1cm4gbmV3RnJvbnRtYXR0ZXI7XG4gICAgfVxuXG4gICAgY29uc3QgZnJvbnRtYXR0ZXJDb250ZW50ID0gbWF0Y2hbMV07XG4gICAgbGV0IHVwZGF0ZWRGcm9udG1hdHRlciA9IGZyb250bWF0dGVyQ29udGVudDtcblxuICAgIGlmICh1cGRhdGVkRnJvbnRtYXR0ZXIuaW5jbHVkZXMoXCJhbGlhc2VzOlwiKSkge1xuICAgICAgY29uc3QgYWxpYXNlc01hdGNoID0gdXBkYXRlZEZyb250bWF0dGVyLm1hdGNoKC8oYWxpYXNlczpcXHI/XFxuKD86IHsyfS0gLipcXHI/XFxuKSopLyk7XG4gICAgICBpZiAoYWxpYXNlc01hdGNoKSB7XG4gICAgICAgIHVwZGF0ZWRGcm9udG1hdHRlciA9IHVwZGF0ZWRGcm9udG1hdHRlci5yZXBsYWNlKFxuICAgICAgICAgIC8oYWxpYXNlczpcXHI/XFxuKD86IHsyfS0gLipcXHI/XFxuKSopLyxcbiAgICAgICAgICBgJDEgIC0gXCIke2xhYmVsfVwiJHtsaW5lRW5kaW5nfWAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZWRGcm9udG1hdHRlciArPSBgJHtsaW5lRW5kaW5nfWFsaWFzZXM6JHtsaW5lRW5kaW5nfSAgLSBcIiR7bGFiZWx9XCJgO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50LnJlcGxhY2UoXG4gICAgICBmcm9udG1hdHRlclJlZ2V4LFxuICAgICAgYC0tLSR7bGluZUVuZGluZ30ke3VwZGF0ZWRGcm9udG1hdHRlcn0ke2xpbmVFbmRpbmd9LS0tYCxcbiAgICApO1xuICB9XG59XG4iXX0=