import { v4 as uuidv4 } from "uuid";
import { AssetClass } from '../domain/constants';
import { DateFormatter } from "../utilities/DateFormatter";
import { MetadataExtractor } from "../utilities/MetadataExtractor";
import { MetadataHelpers } from "../utilities/MetadataHelpers";
export class AreaCreationService {
    constructor(vault) {
        this.vault = vault;
    }
    async createChildArea(sourceFile, sourceMetadata, label) {
        const uid = uuidv4();
        const fileName = `${uid}.md`;
        const frontmatter = this.generateChildAreaFrontmatter(sourceMetadata, sourceFile.basename, label, uid);
        const fileContent = MetadataHelpers.buildFileContent(frontmatter);
        const folderPath = sourceFile.parent?.path || "";
        const filePath = folderPath ? `${folderPath}/${fileName}` : fileName;
        const createdFile = await this.vault.create(filePath, fileContent);
        return createdFile;
    }
    generateChildAreaFrontmatter(sourceMetadata, sourceName, label, uid) {
        const now = new Date();
        const timestamp = DateFormatter.toLocalTimestamp(now);
        const isDefinedBy = MetadataExtractor.extractIsDefinedBy(sourceMetadata);
        const frontmatter = {};
        frontmatter["exo__Asset_isDefinedBy"] = MetadataHelpers.ensureQuoted(isDefinedBy);
        frontmatter["exo__Asset_uid"] = uid || uuidv4();
        frontmatter["exo__Asset_createdAt"] = timestamp;
        frontmatter["exo__Instance_class"] = [`"[[${AssetClass.AREA}]]"`];
        frontmatter["ems__Area_parent"] = `"[[${sourceName}]]"`;
        if (label && label.trim() !== "") {
            const trimmedLabel = label.trim();
            frontmatter["exo__Asset_label"] = trimmedLabel;
            frontmatter["aliases"] = [trimmedLabel];
        }
        return frontmatter;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJlYUNyZWF0aW9uU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkFyZWFDcmVhdGlvblNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEVBQUUsSUFBSSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFL0QsTUFBTSxPQUFPLG1CQUFtQjtJQUM5QixZQUFvQixLQUFZO1FBQVosVUFBSyxHQUFMLEtBQUssQ0FBTztJQUFHLENBQUM7SUFFcEMsS0FBSyxDQUFDLGVBQWUsQ0FDbkIsVUFBaUIsRUFDakIsY0FBbUMsRUFDbkMsS0FBYztRQUVkLE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ3JCLE1BQU0sUUFBUSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDN0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUNuRCxjQUFjLEVBQ2QsVUFBVSxDQUFDLFFBQVEsRUFDbkIsS0FBSyxFQUNMLEdBQUcsQ0FDSixDQUFDO1FBQ0YsTUFBTSxXQUFXLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNqRCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxJQUFJLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFFckUsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFbkUsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVELDRCQUE0QixDQUMxQixjQUFtQyxFQUNuQyxVQUFrQixFQUNsQixLQUFjLEVBQ2QsR0FBWTtRQUVaLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRELE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRXpFLE1BQU0sV0FBVyxHQUF3QixFQUFFLENBQUM7UUFDNUMsV0FBVyxDQUFDLHdCQUF3QixDQUFDLEdBQUcsZUFBZSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNsRixXQUFXLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7UUFDaEQsV0FBVyxDQUFDLHNCQUFzQixDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQ2hELFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQztRQUNsRSxXQUFXLENBQUMsa0JBQWtCLENBQUMsR0FBRyxNQUFNLFVBQVUsS0FBSyxDQUFDO1FBRXhELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNqQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsWUFBWSxDQUFDO1lBQy9DLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBURmlsZSwgVmF1bHQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgeyBBc3NldENsYXNzIH0gZnJvbSAnLi4vZG9tYWluL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBEYXRlRm9ybWF0dGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9EYXRlRm9ybWF0dGVyXCI7XG5pbXBvcnQgeyBNZXRhZGF0YUV4dHJhY3RvciB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWV0YWRhdGFFeHRyYWN0b3JcIjtcbmltcG9ydCB7IE1ldGFkYXRhSGVscGVycyB9IGZyb20gXCIuLi91dGlsaXRpZXMvTWV0YWRhdGFIZWxwZXJzXCI7XG5cbmV4cG9ydCBjbGFzcyBBcmVhQ3JlYXRpb25TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2YXVsdDogVmF1bHQpIHt9XG5cbiAgYXN5bmMgY3JlYXRlQ2hpbGRBcmVhKFxuICAgIHNvdXJjZUZpbGU6IFRGaWxlLFxuICAgIHNvdXJjZU1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGxhYmVsPzogc3RyaW5nLFxuICApOiBQcm9taXNlPFRGaWxlPiB7XG4gICAgY29uc3QgdWlkID0gdXVpZHY0KCk7XG4gICAgY29uc3QgZmlsZU5hbWUgPSBgJHt1aWR9Lm1kYDtcbiAgICBjb25zdCBmcm9udG1hdHRlciA9IHRoaXMuZ2VuZXJhdGVDaGlsZEFyZWFGcm9udG1hdHRlcihcbiAgICAgIHNvdXJjZU1ldGFkYXRhLFxuICAgICAgc291cmNlRmlsZS5iYXNlbmFtZSxcbiAgICAgIGxhYmVsLFxuICAgICAgdWlkLFxuICAgICk7XG4gICAgY29uc3QgZmlsZUNvbnRlbnQgPSBNZXRhZGF0YUhlbHBlcnMuYnVpbGRGaWxlQ29udGVudChmcm9udG1hdHRlcik7XG5cbiAgICBjb25zdCBmb2xkZXJQYXRoID0gc291cmNlRmlsZS5wYXJlbnQ/LnBhdGggfHwgXCJcIjtcbiAgICBjb25zdCBmaWxlUGF0aCA9IGZvbGRlclBhdGggPyBgJHtmb2xkZXJQYXRofS8ke2ZpbGVOYW1lfWAgOiBmaWxlTmFtZTtcblxuICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdGhpcy52YXVsdC5jcmVhdGUoZmlsZVBhdGgsIGZpbGVDb250ZW50KTtcblxuICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgfVxuXG4gIGdlbmVyYXRlQ2hpbGRBcmVhRnJvbnRtYXR0ZXIoXG4gICAgc291cmNlTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgc291cmNlTmFtZTogc3RyaW5nLFxuICAgIGxhYmVsPzogc3RyaW5nLFxuICAgIHVpZD86IHN0cmluZyxcbiAgKTogUmVjb3JkPHN0cmluZywgYW55PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCB0aW1lc3RhbXAgPSBEYXRlRm9ybWF0dGVyLnRvTG9jYWxUaW1lc3RhbXAobm93KTtcblxuICAgIGNvbnN0IGlzRGVmaW5lZEJ5ID0gTWV0YWRhdGFFeHRyYWN0b3IuZXh0cmFjdElzRGVmaW5lZEJ5KHNvdXJjZU1ldGFkYXRhKTtcblxuICAgIGNvbnN0IGZyb250bWF0dGVyOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X2lzRGVmaW5lZEJ5XCJdID0gTWV0YWRhdGFIZWxwZXJzLmVuc3VyZVF1b3RlZChpc0RlZmluZWRCeSk7XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X3VpZFwiXSA9IHVpZCB8fCB1dWlkdjQoKTtcbiAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfY3JlYXRlZEF0XCJdID0gdGltZXN0YW1wO1xuICAgIGZyb250bWF0dGVyW1wiZXhvX19JbnN0YW5jZV9jbGFzc1wiXSA9IFtgXCJbWyR7QXNzZXRDbGFzcy5BUkVBfV1dXCJgXTtcbiAgICBmcm9udG1hdHRlcltcImVtc19fQXJlYV9wYXJlbnRcIl0gPSBgXCJbWyR7c291cmNlTmFtZX1dXVwiYDtcblxuICAgIGlmIChsYWJlbCAmJiBsYWJlbC50cmltKCkgIT09IFwiXCIpIHtcbiAgICAgIGNvbnN0IHRyaW1tZWRMYWJlbCA9IGxhYmVsLnRyaW0oKTtcbiAgICAgIGZyb250bWF0dGVyW1wiZXhvX19Bc3NldF9sYWJlbFwiXSA9IHRyaW1tZWRMYWJlbDtcbiAgICAgIGZyb250bWF0dGVyW1wiYWxpYXNlc1wiXSA9IFt0cmltbWVkTGFiZWxdO1xuICAgIH1cblxuICAgIHJldHVybiBmcm9udG1hdHRlcjtcbiAgfVxufVxuIl19