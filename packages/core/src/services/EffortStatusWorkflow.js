import { AssetClass, EffortStatus } from '../domain/constants';
export class EffortStatusWorkflow {
    getPreviousStatus(currentStatus, instanceClass) {
        const normalizedStatus = this.normalizeStatus(currentStatus);
        if (normalizedStatus === EffortStatus.DRAFT) {
            return null;
        }
        if (normalizedStatus === EffortStatus.BACKLOG) {
            return this.wrapStatus(EffortStatus.DRAFT);
        }
        if (normalizedStatus === EffortStatus.ANALYSIS) {
            return this.wrapStatus(EffortStatus.BACKLOG);
        }
        if (normalizedStatus === EffortStatus.TODO) {
            return this.wrapStatus(EffortStatus.ANALYSIS);
        }
        if (normalizedStatus === EffortStatus.DOING) {
            const isProject = this.hasInstanceClass(instanceClass, AssetClass.PROJECT);
            return isProject
                ? this.wrapStatus(EffortStatus.TODO)
                : this.wrapStatus(EffortStatus.BACKLOG);
        }
        if (normalizedStatus === EffortStatus.DONE) {
            return this.wrapStatus(EffortStatus.DOING);
        }
        return undefined;
    }
    normalizeStatus(status) {
        return status.replace(/["'[\]]/g, "").trim();
    }
    wrapStatus(status) {
        return `"[[${status}]]"`;
    }
    hasInstanceClass(instanceClass, targetClass) {
        if (!instanceClass)
            return false;
        const classes = Array.isArray(instanceClass)
            ? instanceClass
            : [instanceClass];
        return classes.some((cls) => cls.replace(/["'[\]]/g, "").trim() === targetClass);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWZmb3J0U3RhdHVzV29ya2Zsb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJFZmZvcnRTdGF0dXNXb3JrZmxvdy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRS9ELE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsaUJBQWlCLENBQ2YsYUFBcUIsRUFDckIsYUFBdUM7UUFFdkMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRTdELElBQUksZ0JBQWdCLEtBQUssWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVDLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUVELElBQUksZ0JBQWdCLEtBQUssWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzlDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUVELElBQUksZ0JBQWdCLEtBQUssWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0MsQ0FBQztRQUVELElBQUksZ0JBQWdCLEtBQUssWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUVELElBQUksZ0JBQWdCLEtBQUssWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNFLE9BQU8sU0FBUztnQkFDZCxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO2dCQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUVELElBQUksZ0JBQWdCLEtBQUssWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzNDLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxlQUFlLENBQUMsTUFBYztRQUM1QixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxVQUFVLENBQUMsTUFBYztRQUN2QixPQUFPLE1BQU0sTUFBTSxLQUFLLENBQUM7SUFDM0IsQ0FBQztJQUVPLGdCQUFnQixDQUN0QixhQUF1QyxFQUN2QyxXQUF1QjtRQUV2QixJQUFJLENBQUMsYUFBYTtZQUFFLE9BQU8sS0FBSyxDQUFDO1FBRWpDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1lBQzFDLENBQUMsQ0FBQyxhQUFhO1lBQ2YsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssV0FBVyxDQUM1RCxDQUFDO0lBQ0osQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXRDbGFzcywgRWZmb3J0U3RhdHVzIH0gZnJvbSAnLi4vZG9tYWluL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjbGFzcyBFZmZvcnRTdGF0dXNXb3JrZmxvdyB7XG4gIGdldFByZXZpb3VzU3RhdHVzKFxuICAgIGN1cnJlbnRTdGF0dXM6IHN0cmluZyxcbiAgICBpbnN0YW5jZUNsYXNzOiBzdHJpbmcgfCBzdHJpbmdbXSB8IG51bGwsXG4gICk6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRTdGF0dXMgPSB0aGlzLm5vcm1hbGl6ZVN0YXR1cyhjdXJyZW50U3RhdHVzKTtcblxuICAgIGlmIChub3JtYWxpemVkU3RhdHVzID09PSBFZmZvcnRTdGF0dXMuRFJBRlQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkU3RhdHVzID09PSBFZmZvcnRTdGF0dXMuQkFDS0xPRykge1xuICAgICAgcmV0dXJuIHRoaXMud3JhcFN0YXR1cyhFZmZvcnRTdGF0dXMuRFJBRlQpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkU3RhdHVzID09PSBFZmZvcnRTdGF0dXMuQU5BTFlTSVMpIHtcbiAgICAgIHJldHVybiB0aGlzLndyYXBTdGF0dXMoRWZmb3J0U3RhdHVzLkJBQ0tMT0cpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkU3RhdHVzID09PSBFZmZvcnRTdGF0dXMuVE9ETykge1xuICAgICAgcmV0dXJuIHRoaXMud3JhcFN0YXR1cyhFZmZvcnRTdGF0dXMuQU5BTFlTSVMpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkU3RhdHVzID09PSBFZmZvcnRTdGF0dXMuRE9JTkcpIHtcbiAgICAgIGNvbnN0IGlzUHJvamVjdCA9IHRoaXMuaGFzSW5zdGFuY2VDbGFzcyhpbnN0YW5jZUNsYXNzLCBBc3NldENsYXNzLlBST0pFQ1QpO1xuICAgICAgcmV0dXJuIGlzUHJvamVjdFxuICAgICAgICA/IHRoaXMud3JhcFN0YXR1cyhFZmZvcnRTdGF0dXMuVE9ETylcbiAgICAgICAgOiB0aGlzLndyYXBTdGF0dXMoRWZmb3J0U3RhdHVzLkJBQ0tMT0cpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkU3RhdHVzID09PSBFZmZvcnRTdGF0dXMuRE9ORSkge1xuICAgICAgcmV0dXJuIHRoaXMud3JhcFN0YXR1cyhFZmZvcnRTdGF0dXMuRE9JTkcpO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBub3JtYWxpemVTdGF0dXMoc3RhdHVzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdGF0dXMucmVwbGFjZSgvW1wiJ1tcXF1dL2csIFwiXCIpLnRyaW0oKTtcbiAgfVxuXG4gIHdyYXBTdGF0dXMoc3RhdHVzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgXCJbWyR7c3RhdHVzfV1dXCJgO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNJbnN0YW5jZUNsYXNzKFxuICAgIGluc3RhbmNlQ2xhc3M6IHN0cmluZyB8IHN0cmluZ1tdIHwgbnVsbCxcbiAgICB0YXJnZXRDbGFzczogQXNzZXRDbGFzcyxcbiAgKTogYm9vbGVhbiB7XG4gICAgaWYgKCFpbnN0YW5jZUNsYXNzKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gQXJyYXkuaXNBcnJheShpbnN0YW5jZUNsYXNzKVxuICAgICAgPyBpbnN0YW5jZUNsYXNzXG4gICAgICA6IFtpbnN0YW5jZUNsYXNzXTtcbiAgICByZXR1cm4gY2xhc3Nlcy5zb21lKFxuICAgICAgKGNscykgPT4gY2xzLnJlcGxhY2UoL1tcIidbXFxdXS9nLCBcIlwiKS50cmltKCkgPT09IHRhcmdldENsYXNzLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==