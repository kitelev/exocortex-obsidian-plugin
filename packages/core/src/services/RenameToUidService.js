export class RenameToUidService {
    constructor(app) {
        this.app = app;
    }
    async renameToUid(file, metadata) {
        const uid = metadata.exo__Asset_uid;
        if (!uid) {
            throw new Error("Asset has no exo__Asset_uid property");
        }
        const currentBasename = file.basename;
        const targetBasename = uid;
        if (currentBasename === targetBasename) {
            throw new Error("File is already named according to UID");
        }
        const currentLabel = metadata.exo__Asset_label;
        const needsLabelUpdate = !currentLabel || currentLabel.trim() === "";
        if (needsLabelUpdate) {
            await this.updateLabel(file, currentBasename);
        }
        const folderPath = file.parent?.path || "";
        const newPath = folderPath ? `${folderPath}/${targetBasename}.md` : `${targetBasename}.md`;
        await this.app.fileManager.renameFile(file, newPath);
    }
    async updateLabel(file, label) {
        await this.app.vault.process(file, (content) => {
            const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
            const match = content.match(frontmatterRegex);
            if (!match) {
                return content;
            }
            const frontmatterContent = match[1];
            const newFrontmatter = `${frontmatterContent}\nexo__Asset_label: ${label}\naliases:\n  - ${label}`;
            return content.replace(frontmatterRegex, `---\n${newFrontmatter}\n---`);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVuYW1lVG9VaWRTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVuYW1lVG9VaWRTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFBb0IsR0FBUTtRQUFSLFFBQUcsR0FBSCxHQUFHLENBQUs7SUFBRyxDQUFDO0lBRWhDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBVyxFQUFFLFFBQTZCO1FBQzFELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUM7UUFFcEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3RDLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQztRQUUzQixJQUFJLGVBQWUsS0FBSyxjQUFjLEVBQUUsQ0FBQztZQUN2QyxNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUVELE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztRQUMvQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFFckUsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3JCLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDaEQsQ0FBQztRQUVELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMzQyxNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsVUFBVSxJQUFJLGNBQWMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLGNBQWMsS0FBSyxDQUFDO1FBRTNGLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU8sS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFXLEVBQUUsS0FBYTtRQUNsRCxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUM3QyxNQUFNLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDO1lBQ2pELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUU5QyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ1gsT0FBTyxPQUFPLENBQUM7WUFDakIsQ0FBQztZQUVELE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sY0FBYyxHQUFHLEdBQUcsa0JBQWtCLHVCQUF1QixLQUFLLG1CQUFtQixLQUFLLEVBQUUsQ0FBQztZQUVuRyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxjQUFjLE9BQU8sQ0FBQyxDQUFDO1FBQzFFLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEZpbGUsIEFwcCB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgY2xhc3MgUmVuYW1lVG9VaWRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhcHA6IEFwcCkge31cblxuICBhc3luYyByZW5hbWVUb1VpZChmaWxlOiBURmlsZSwgbWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB1aWQgPSBtZXRhZGF0YS5leG9fX0Fzc2V0X3VpZDtcblxuICAgIGlmICghdWlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBc3NldCBoYXMgbm8gZXhvX19Bc3NldF91aWQgcHJvcGVydHlcIik7XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmVudEJhc2VuYW1lID0gZmlsZS5iYXNlbmFtZTtcbiAgICBjb25zdCB0YXJnZXRCYXNlbmFtZSA9IHVpZDtcblxuICAgIGlmIChjdXJyZW50QmFzZW5hbWUgPT09IHRhcmdldEJhc2VuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGaWxlIGlzIGFscmVhZHkgbmFtZWQgYWNjb3JkaW5nIHRvIFVJRFwiKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXJyZW50TGFiZWwgPSBtZXRhZGF0YS5leG9fX0Fzc2V0X2xhYmVsO1xuICAgIGNvbnN0IG5lZWRzTGFiZWxVcGRhdGUgPSAhY3VycmVudExhYmVsIHx8IGN1cnJlbnRMYWJlbC50cmltKCkgPT09IFwiXCI7XG5cbiAgICBpZiAobmVlZHNMYWJlbFVwZGF0ZSkge1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGVMYWJlbChmaWxlLCBjdXJyZW50QmFzZW5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGZvbGRlclBhdGggPSBmaWxlLnBhcmVudD8ucGF0aCB8fCBcIlwiO1xuICAgIGNvbnN0IG5ld1BhdGggPSBmb2xkZXJQYXRoID8gYCR7Zm9sZGVyUGF0aH0vJHt0YXJnZXRCYXNlbmFtZX0ubWRgIDogYCR7dGFyZ2V0QmFzZW5hbWV9Lm1kYDtcblxuICAgIGF3YWl0IHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnJlbmFtZUZpbGUoZmlsZSwgbmV3UGF0aCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHVwZGF0ZUxhYmVsKGZpbGU6IFRGaWxlLCBsYWJlbDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5hcHAudmF1bHQucHJvY2VzcyhmaWxlLCAoY29udGVudCkgPT4ge1xuICAgICAgY29uc3QgZnJvbnRtYXR0ZXJSZWdleCA9IC9eLS0tXFxuKFtcXHNcXFNdKj8pXFxuLS0tLztcbiAgICAgIGNvbnN0IG1hdGNoID0gY29udGVudC5tYXRjaChmcm9udG1hdHRlclJlZ2V4KTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZnJvbnRtYXR0ZXJDb250ZW50ID0gbWF0Y2hbMV07XG4gICAgICBjb25zdCBuZXdGcm9udG1hdHRlciA9IGAke2Zyb250bWF0dGVyQ29udGVudH1cXG5leG9fX0Fzc2V0X2xhYmVsOiAke2xhYmVsfVxcbmFsaWFzZXM6XFxuICAtICR7bGFiZWx9YDtcblxuICAgICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShmcm9udG1hdHRlclJlZ2V4LCBgLS0tXFxuJHtuZXdGcm9udG1hdHRlcn1cXG4tLS1gKTtcbiAgICB9KTtcbiAgfVxufVxuIl19