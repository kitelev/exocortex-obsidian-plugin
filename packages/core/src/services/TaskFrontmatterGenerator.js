import { v4 as uuidv4 } from "uuid";
import { DateFormatter } from "../utilities/DateFormatter";
import { WikiLinkHelpers } from "../utilities/WikiLinkHelpers";
import { MetadataExtractor } from "../utilities/MetadataExtractor";
import { MetadataHelpers } from "../utilities/MetadataHelpers";
import { AssetClass } from '../domain/constants';
const EFFORT_PROPERTY_MAP = {
    [AssetClass.AREA]: "ems__Effort_area",
    [AssetClass.PROJECT]: "ems__Effort_parent",
    [AssetClass.TASK_PROTOTYPE]: "ems__Effort_prototype",
    [AssetClass.MEETING_PROTOTYPE]: "ems__Effort_prototype",
};
const INSTANCE_CLASS_MAP = {
    [AssetClass.AREA]: AssetClass.TASK,
    [AssetClass.PROJECT]: AssetClass.TASK,
    [AssetClass.TASK_PROTOTYPE]: AssetClass.TASK,
    [AssetClass.MEETING_PROTOTYPE]: AssetClass.MEETING,
};
export class TaskFrontmatterGenerator {
    generateTaskFrontmatter(sourceMetadata, sourceName, sourceClass, label, uid, taskSize) {
        const now = new Date();
        const timestamp = DateFormatter.toLocalTimestamp(now);
        const isDefinedBy = MetadataExtractor.extractIsDefinedBy(sourceMetadata);
        const cleanSourceClass = WikiLinkHelpers.normalize(sourceClass);
        const effortProperty = EFFORT_PROPERTY_MAP[cleanSourceClass] || "ems__Effort_area";
        const instanceClass = INSTANCE_CLASS_MAP[cleanSourceClass] || AssetClass.TASK;
        const frontmatter = {};
        frontmatter["exo__Asset_isDefinedBy"] = MetadataHelpers.ensureQuoted(isDefinedBy);
        frontmatter["exo__Asset_uid"] = uid || uuidv4();
        frontmatter["exo__Asset_createdAt"] = timestamp;
        frontmatter["exo__Instance_class"] = [`"[[${instanceClass}]]"`];
        frontmatter["ems__Effort_status"] = '"[[ems__EffortStatusDraft]]"';
        frontmatter[effortProperty] = `"[[${sourceName}]]"`;
        let finalLabel = label;
        if (instanceClass === AssetClass.MEETING && (!label || label.trim() === "")) {
            const baseLabel = sourceMetadata.exo__Asset_label || sourceName;
            const dateStr = DateFormatter.toDateString(now);
            finalLabel = `${baseLabel} ${dateStr}`;
        }
        if (finalLabel && finalLabel.trim() !== "") {
            const trimmedLabel = finalLabel.trim();
            frontmatter["exo__Asset_label"] = trimmedLabel;
            frontmatter["aliases"] = [trimmedLabel];
        }
        if (taskSize) {
            frontmatter["ems__Task_size"] = taskSize;
        }
        return frontmatter;
    }
    generateRelatedTaskFrontmatter(sourceMetadata, sourceName, label, uid, taskSize) {
        const now = new Date();
        const timestamp = DateFormatter.toLocalTimestamp(now);
        const isDefinedBy = MetadataExtractor.extractIsDefinedBy(sourceMetadata);
        const frontmatter = {};
        frontmatter["exo__Asset_isDefinedBy"] = MetadataHelpers.ensureQuoted(isDefinedBy);
        frontmatter["exo__Asset_uid"] = uid || uuidv4();
        frontmatter["exo__Asset_createdAt"] = timestamp;
        frontmatter["exo__Instance_class"] = [`"[[${AssetClass.TASK}]]"`];
        frontmatter["ems__Effort_status"] = '"[[ems__EffortStatusDraft]]"';
        frontmatter["exo__Asset_relates"] = [`"[[${sourceName}]]"`];
        if (label && label.trim() !== "") {
            const trimmedLabel = label.trim();
            frontmatter["exo__Asset_label"] = trimmedLabel;
            frontmatter["aliases"] = [trimmedLabel];
        }
        if (taskSize) {
            frontmatter["ems__Task_size"] = taskSize;
        }
        return frontmatter;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0Zyb250bWF0dGVyR2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVGFza0Zyb250bWF0dGVyR2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxFQUFFLElBQUksTUFBTSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCxNQUFNLG1CQUFtQixHQUEyQjtJQUNsRCxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxrQkFBa0I7SUFDckMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsb0JBQW9CO0lBQzFDLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxFQUFFLHVCQUF1QjtJQUNwRCxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLHVCQUF1QjtDQUN4RCxDQUFDO0FBRUYsTUFBTSxrQkFBa0IsR0FBMkI7SUFDakQsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxDQUFDLElBQUk7SUFDbEMsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUUsVUFBVSxDQUFDLElBQUk7SUFDckMsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUUsVUFBVSxDQUFDLElBQUk7SUFDNUMsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsRUFBRSxVQUFVLENBQUMsT0FBTztDQUNuRCxDQUFDO0FBRUYsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyx1QkFBdUIsQ0FDckIsY0FBbUMsRUFDbkMs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RyxTQUFTLENBQUM7UUFDaEQsV0FBVyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxNQUFNLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDO1FBQ2xFLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLDhCQUE4QixDQUFDO1FBQ25FLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxVQUFVLEtBQUssQ0FBQyxDQUFDO1FBRTVELElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztZQUNqQyxNQUFNLFlBQVksR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbEMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsWUFBWSxDQUFDO1lBQy9DLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFFRCxJQUFJLFFBQVEsRUFBRSxDQUFDO1lBQ2IsV0FBVyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsUUFBUSxDQUFDO1FBQzNDLENBQUM7UUFFRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuaW1wb3J0IHsgRGF0ZUZvcm1hdHRlciB9IGZyb20gXCIuLi91dGlsaXRpZXMvRGF0ZUZvcm1hdHRlclwiO1xuaW1wb3J0IHsgV2lraUxpbmtIZWxwZXJzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9XaWtpTGlua0hlbHBlcnNcIjtcbmltcG9ydCB7IE1ldGFkYXRhRXh0cmFjdG9yIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9NZXRhZGF0YUV4dHJhY3RvclwiO1xuaW1wb3J0IHsgTWV0YWRhdGFIZWxwZXJzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9NZXRhZGF0YUhlbHBlcnNcIjtcbmltcG9ydCB7IEFzc2V0Q2xhc3MgfSBmcm9tICcuLi9kb21haW4vY29uc3RhbnRzJztcblxuY29uc3QgRUZGT1JUX1BST1BFUlRZX01BUDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgW0Fzc2V0Q2xhc3MuQVJFQV06IFwiZW1zX19FZmZvcnRfYXJlYVwiLFxuICBbQXNzZXRDbGFzcy5QUk9KRUNUXTogXCJlbXNfX0VmZm9ydF9wYXJlbnRcIixcbiAgW0Fzc2V0Q2xhc3MuVEFTS19QUk9UT1RZUEVdOiBcImVtc19fRWZmb3J0X3Byb3RvdHlwZVwiLFxuICBbQXNzZXRDbGFzcy5NRUVUSU5HX1BST1RPVFlQRV06IFwiZW1zX19FZmZvcnRfcHJvdG90eXBlXCIsXG59O1xuXG5jb25zdCBJTlNUQU5DRV9DTEFTU19NQVA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIFtBc3NldENsYXNzLkFSRUFdOiBBc3NldENsYXNzLlRBU0ssXG4gIFtBc3NldENsYXNzLlBST0pFQ1RdOiBBc3NldENsYXNzLlRBU0ssXG4gIFtBc3NldENsYXNzLlRBU0tfUFJPVE9UWVBFXTogQXNzZXRDbGFzcy5UQVNLLFxuICBbQXNzZXRDbGFzcy5NRUVUSU5HX1BST1RPVFlQRV06IEFzc2V0Q2xhc3MuTUVFVElORyxcbn07XG5cbmV4cG9ydCBjbGFzcyBUYXNrRnJvbnRtYXR0ZXJHZW5lcmF0b3Ige1xuICBnZW5lcmF0ZVRhc2tGcm9udG1hdHRlcihcbiAgICBzb3VyY2VNZXRhZGF0YTogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBzb3VyY2VOYW1lOiBzdHJpbmcsXG4gICAgc291cmNlQ2xhc3M6IHN0cmluZyxcbiAgICBsYWJlbD86IHN0cmluZyxcbiAgICB1aWQ/OiBzdHJpbmcsXG4gICAgdGFza1NpemU/OiBzdHJpbmcgfCBudWxsLFxuICApOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGVGb3JtYXR0ZXIudG9Mb2NhbFRpbWVzdGFtcChub3cpO1xuXG4gICAgY29uc3QgaXNEZWZpbmVkQnkgPSBNZXRhZGF0YUV4dHJhY3Rvci5leHRyYWN0SXNEZWZpbmVkQnkoc291cmNlTWV0YWRhdGEpO1xuXG4gICAgY29uc3QgY2xlYW5Tb3VyY2VDbGFzcyA9IFdpa2lMaW5rSGVscGVycy5ub3JtYWxpemUoc291cmNlQ2xhc3MpO1xuICAgIGNvbnN0IGVmZm9ydFByb3BlcnR5ID1cbiAgICAgIEVGRk9SVF9QUk9QRVJUWV9NQVBbY2xlYW5Tb3VyY2VDbGFzc10gfHwgXCJlbXNfX0VmZm9ydF9hcmVhXCI7XG4gICAgY29uc3QgaW5zdGFuY2VDbGFzcyA9XG4gICAgICBJTlNUQU5DRV9DTEFTU19NQVBbY2xlYW5Tb3VyY2VDbGFzc10gfHwgQXNzZXRDbGFzcy5UQVNLO1xuXG4gICAgY29uc3QgZnJvbnRtYXR0ZXI6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfaXNEZWZpbmVkQnlcIl0gPSBNZXRhZGF0YUhlbHBlcnMuZW5zdXJlUXVvdGVkKGlzRGVmaW5lZEJ5KTtcbiAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfdWlkXCJdID0gdWlkIHx8IHV1aWR2NCgpO1xuICAgIGZyb250bWF0dGVyW1wiZXhvX19Bc3NldF9jcmVhdGVkQXRcIl0gPSB0aW1lc3RhbXA7XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0luc3RhbmNlX2NsYXNzXCJdID0gW2BcIltbJHtpbnN0YW5jZUNsYXNzfV1dXCJgXTtcbiAgICBmcm9udG1hdHRlcltcImVtc19fRWZmb3J0X3N0YXR1c1wiXSA9ICdcIltbZW1zX19FZmZvcnRTdGF0dXNEcmFmdF1dXCInO1xuICAgIGZyb250bWF0dGVyW2VmZm9ydFByb3BlcnR5XSA9IGBcIltbJHtzb3VyY2VOYW1lfV1dXCJgO1xuXG4gICAgbGV0IGZpbmFsTGFiZWwgPSBsYWJlbDtcbiAgICBpZiAoaW5zdGFuY2VDbGFzcyA9PT0gQXNzZXRDbGFzcy5NRUVUSU5HICYmICghbGFiZWwgfHwgbGFiZWwudHJpbSgpID09PSBcIlwiKSkge1xuICAgICAgY29uc3QgYmFzZUxhYmVsID0gc291cmNlTWV0YWRhdGEuZXhvX19Bc3NldF9sYWJlbCB8fCBzb3VyY2VOYW1lO1xuICAgICAgY29uc3QgZGF0ZVN0ciA9IERhdGVGb3JtYXR0ZXIudG9EYXRlU3RyaW5nKG5vdyk7XG4gICAgICBmaW5hbExhYmVsID0gYCR7YmFzZUxhYmVsfSAke2RhdGVTdHJ9YDtcbiAgICB9XG5cbiAgICBpZiAoZmluYWxMYWJlbCAmJiBmaW5hbExhYmVsLnRyaW0oKSAhPT0gXCJcIikge1xuICAgICAgY29uc3QgdHJpbW1lZExhYmVsID0gZmluYWxMYWJlbC50cmltKCk7XG4gICAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfbGFiZWxcIl0gPSB0cmltbWVkTGFiZWw7XG4gICAgICBmcm9udG1hdHRlcltcImFsaWFzZXNcIl0gPSBbdHJpbW1lZExhYmVsXTtcbiAgICB9XG5cbiAgICBpZiAodGFza1NpemUpIHtcbiAgICAgIGZyb250bWF0dGVyW1wiZW1zX19UYXNrX3NpemVcIl0gPSB0YXNrU2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbnRtYXR0ZXI7XG4gIH1cblxuICBnZW5lcmF0ZVJlbGF0ZWRUYXNrRnJvbnRtYXR0ZXIoXG4gICAgc291cmNlTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgc291cmNlTmFtZTogc3RyaW5nLFxuICAgIGxhYmVsPzogc3RyaW5nLFxuICAgIHVpZD86IHN0cmluZyxcbiAgICB0YXNrU2l6ZT86IHN0cmluZyB8IG51bGwsXG4gICk6IFJlY29yZDxzdHJpbmcsIGFueT4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZUZvcm1hdHRlci50b0xvY2FsVGltZXN0YW1wKG5vdyk7XG5cbiAgICBjb25zdCBpc0RlZmluZWRCeSA9IE1ldGFkYXRhRXh0cmFjdG9yLmV4dHJhY3RJc0RlZmluZWRCeShzb3VyY2VNZXRhZGF0YSk7XG5cbiAgICBjb25zdCBmcm9udG1hdHRlcjogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICAgIGZyb250bWF0dGVyW1wiZXhvX19Bc3NldF9pc0RlZmluZWRCeVwiXSA9IE1ldGFkYXRhSGVscGVycy5lbnN1cmVRdW90ZWQoaXNEZWZpbmVkQnkpO1xuICAgIGZyb250bWF0dGVyW1wiZXhvX19Bc3NldF91aWRcIl0gPSB1aWQgfHwgdXVpZHY0KCk7XG4gICAgZnJvbnRtYXR0ZXJbXCJleG9fX0Fzc2V0X2NyZWF0ZWRBdFwiXSA9IHRpbWVzdGFtcDtcbiAgICBmcm9udG1hdHRlcltcImV4b19fSW5zdGFuY2VfY2xhc3NcIl0gPSBbYFwiW1ske0Fzc2V0Q2xhc3MuVEFTS31dXVwiYF07XG4gICAgZnJvbnRtYXR0ZXJbXCJlbXNfX0VmZm9ydF9zdGF0dXNcIl0gPSAnXCJbW2Vtc19fRWZmb3J0U3RhdHVzRHJhZnRdXVwiJztcbiAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfcmVsYXRlc1wiXSA9IFtgXCJbWyR7c291cmNlTmFtZX1dXVwiYF07XG5cbiAgICBpZiAobGFiZWwgJiYgbGFiZWwudHJpbSgpICE9PSBcIlwiKSB7XG4gICAgICBjb25zdCB0cmltbWVkTGFiZWwgPSBsYWJlbC50cmltKCk7XG4gICAgICBmcm9udG1hdHRlcltcImV4b19fQXNzZXRfbGFiZWxcIl0gPSB0cmltbWVkTGFiZWw7XG4gICAgICBmcm9udG1hdHRlcltcImFsaWFzZXNcIl0gPSBbdHJpbW1lZExhYmVsXTtcbiAgICB9XG5cbiAgICBpZiAodGFza1NpemUpIHtcbiAgICAgIGZyb250bWF0dGVyW1wiZW1zX19UYXNrX3NpemVcIl0gPSB0YXNrU2l6ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJvbnRtYXR0ZXI7XG4gIH1cbn1cbiJdfQ==