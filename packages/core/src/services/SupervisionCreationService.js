import { v4 as uuidv4 } from "uuid";
import { DateFormatter } from "../utilities/DateFormatter";
export class SupervisionCreationService {
    constructor(vault) {
        this.vault = vault;
    }
    async createSupervision(formData) {
        const uid = uuidv4();
        const fileName = `${uid}.md`;
        const frontmatter = this.generateFrontmatter(uid);
        const body = this.generateBody(formData);
        const fileContent = this.buildFileContent(frontmatter, body);
        const filePath = `01 Inbox/${fileName}`;
        const createdFile = await this.vault.create(filePath, fileContent);
        return createdFile;
    }
    generateFrontmatter(uid) {
        const now = new Date();
        const timestamp = DateFormatter.toLocalTimestamp(now);
        return {
            exo__Asset_isDefinedBy: '"[[!kitelev]]"',
            exo__Asset_uid: uid,
            exo__Asset_createdAt: timestamp,
            exo__Instance_class: ['"[[ztlk__FleetingNote]]"'],
            ztlk__FleetingNote_type: '"[[CBT-Diary Record]]"',
        };
    }
    generateBody(formData) {
        const fields = [
            { label: "Ситуация/триггер", value: formData.situation },
            { label: "Эмоции", value: formData.emotions },
            { label: "Мысли", value: formData.thoughts },
            { label: "Поведение", value: formData.behavior },
            {
                label: "Краткосрочные последствия поведения",
                value: formData.shortTermConsequences,
            },
            {
                label: "Долгосрочные последствия поведения",
                value: formData.longTermConsequences,
            },
        ];
        return fields.map((field) => `- ${field.label}: ${field.value}`).join("\n");
    }
    buildFileContent(frontmatter, body) {
        const frontmatterLines = Object.entries(frontmatter)
            .map(([key, value]) => {
            if (Array.isArray(value)) {
                const arrayItems = value.map((item) => `  - ${item}`).join("\n");
                return `${key}:\n${arrayItems}`;
            }
            return `${key}: ${value}`;
        })
            .join("\n");
        return `---\n${frontmatterLines}\n---\n\n${body}\n`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3VwZXJ2aXNpb25DcmVhdGlvblNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTdXBlcnZpc2lvbkNyZWF0aW9uU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsRUFBRSxJQUFJLE1BQU0sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsTUFBTSxPQUFPLDBCQUEwQjtJQUNyQyxZQUFvQixLQUFZO1FBQVosVUFBSyxHQUFMLEtBQUssQ0FBTztJQUFHLENBQUM7SUFFcEMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFFBQTZCO1FBQ25ELE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBQ3JCLE1BQU0sUUFBUSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDN0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDekMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU3RCxNQUFNLFFBQVEsR0FBRyxZQUFZLFFBQVEsRUFBRSxDQUFDO1FBRXhDLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRW5FLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxHQUFXO1FBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRELE9BQU87WUFDTCxzQkFBc0IsRUFBRSxnQkFBZ0I7WUFDeEMsY0FBYyxFQUFFLEdBQUc7WUFDbkIsb0JBQW9CLEVBQUUsU0FBUztZQUMvQixtQkFBbUIsRUFBRSxDQUFDLDBCQUEwQixDQUFDO1lBQ2pELHVCQUF1QixFQUFFLHdCQUF3QjtTQUNsRCxDQUFDO0lBQ0osQ0FBQztJQUVELFlBQVksQ0FBQyxRQUE2QjtRQUN4QyxNQUFNLE1BQU0sR0FBRztZQUNiLEVBQUUsS0FBSyxFQUFFLGtCQUFrQixFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3hELEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUM3QyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDNUMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQ2hEO2dCQUNFLEtBQUssRUFBRSxxQ0FBcUM7Z0JBQzVDLEtBQUssRUFBRSxRQUFRLENBQUMscUJBQXFCO2FBQ3RDO1lBQ0Q7Z0JBQ0UsS0FBSyxFQUFFLG9DQUFvQztnQkFDM0MsS0FBSyxFQUFFLFFBQVEsQ0FBQyxvQkFBb0I7YUFDckM7U0FDRixDQUFDO1FBRUYsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFTyxnQkFBZ0IsQ0FDdEIsV0FBZ0MsRUFDaEMsSUFBWTtRQUVaLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7YUFDakQsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtZQUNwQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDekIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDakUsT0FBTyxHQUFHLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQztZQUNsQyxDQUFDO1lBQ0QsT0FBTyxHQUFHLEdBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFZCxPQUFPLFFBQVEsZ0JBQWdCLFlBQVksSUFBSSxJQUFJLENBQUM7SUFDdEQsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVEZpbGUsIFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuaW1wb3J0IHsgU3VwZXJ2aXNpb25Gb3JtRGF0YSB9IGZyb20gXCIuLi90eXBlcy9TdXBlcnZpc2lvbkZvcm1EYXRhXCI7XG5pbXBvcnQgeyBEYXRlRm9ybWF0dGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9EYXRlRm9ybWF0dGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBTdXBlcnZpc2lvbkNyZWF0aW9uU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmF1bHQ6IFZhdWx0KSB7fVxuXG4gIGFzeW5jIGNyZWF0ZVN1cGVydmlzaW9uKGZvcm1EYXRhOiBTdXBlcnZpc2lvbkZvcm1EYXRhKTogUHJvbWlzZTxURmlsZT4ge1xuICAgIGNvbnN0IHVpZCA9IHV1aWR2NCgpO1xuICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7dWlkfS5tZGA7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXIgPSB0aGlzLmdlbmVyYXRlRnJvbnRtYXR0ZXIodWlkKTtcbiAgICBjb25zdCBib2R5ID0gdGhpcy5nZW5lcmF0ZUJvZHkoZm9ybURhdGEpO1xuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gdGhpcy5idWlsZEZpbGVDb250ZW50KGZyb250bWF0dGVyLCBib2R5KTtcblxuICAgIGNvbnN0IGZpbGVQYXRoID0gYDAxIEluYm94LyR7ZmlsZU5hbWV9YDtcblxuICAgIGNvbnN0IGNyZWF0ZWRGaWxlID0gYXdhaXQgdGhpcy52YXVsdC5jcmVhdGUoZmlsZVBhdGgsIGZpbGVDb250ZW50KTtcblxuICAgIHJldHVybiBjcmVhdGVkRmlsZTtcbiAgfVxuXG4gIGdlbmVyYXRlRnJvbnRtYXR0ZXIodWlkOiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBhbnk+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGVGb3JtYXR0ZXIudG9Mb2NhbFRpbWVzdGFtcChub3cpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4b19fQXNzZXRfaXNEZWZpbmVkQnk6ICdcIltbIWtpdGVsZXZdXVwiJyxcbiAgICAgIGV4b19fQXNzZXRfdWlkOiB1aWQsXG4gICAgICBleG9fX0Fzc2V0X2NyZWF0ZWRBdDogdGltZXN0YW1wLFxuICAgICAgZXhvX19JbnN0YW5jZV9jbGFzczogWydcIltbenRsa19fRmxlZXRpbmdOb3RlXV1cIiddLFxuICAgICAgenRsa19fRmxlZXRpbmdOb3RlX3R5cGU6ICdcIltbQ0JULURpYXJ5IFJlY29yZF1dXCInLFxuICAgIH07XG4gIH1cblxuICBnZW5lcmF0ZUJvZHkoZm9ybURhdGE6IFN1cGVydmlzaW9uRm9ybURhdGEpOiBzdHJpbmcge1xuICAgIGNvbnN0IGZpZWxkcyA9IFtcbiAgICAgIHsgbGFiZWw6IFwi0KHQuNGC0YPQsNGG0LjRjy/RgtGA0LjQs9Cz0LXRgFwiLCB2YWx1ZTogZm9ybURhdGEuc2l0dWF0aW9uIH0sXG4gICAgICB7IGxhYmVsOiBcItCt0LzQvtGG0LjQuFwiLCB2YWx1ZTogZm9ybURhdGEuZW1vdGlvbnMgfSxcbiAgICAgIHsgbGFiZWw6IFwi0JzRi9GB0LvQuFwiLCB2YWx1ZTogZm9ybURhdGEudGhvdWdodHMgfSxcbiAgICAgIHsgbGFiZWw6IFwi0J/QvtCy0LXQtNC10L3QuNC1XCIsIHZhbHVlOiBmb3JtRGF0YS5iZWhhdmlvciB9LFxuICAgICAge1xuICAgICAgICBsYWJlbDogXCLQmtGA0LDRgtC60L7RgdGA0L7Rh9C90YvQtSDQv9C+0YHQu9C10LTRgdGC0LLQuNGPINC/0L7QstC10LTQtdC90LjRj1wiLFxuICAgICAgICB2YWx1ZTogZm9ybURhdGEuc2hvcnRUZXJtQ29uc2VxdWVuY2VzLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbGFiZWw6IFwi0JTQvtC70LPQvtGB0YDQvtGH0L3Ri9C1INC/0L7RgdC70LXQtNGB0YLQstC40Y8g0L/QvtCy0LXQtNC10L3QuNGPXCIsXG4gICAgICAgIHZhbHVlOiBmb3JtRGF0YS5sb25nVGVybUNvbnNlcXVlbmNlcyxcbiAgICAgIH0sXG4gICAgXTtcblxuICAgIHJldHVybiBmaWVsZHMubWFwKChmaWVsZCkgPT4gYC0gJHtmaWVsZC5sYWJlbH06ICR7ZmllbGQudmFsdWV9YCkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRGaWxlQ29udGVudChcbiAgICBmcm9udG1hdHRlcjogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBib2R5OiBzdHJpbmcsXG4gICk6IHN0cmluZyB7XG4gICAgY29uc3QgZnJvbnRtYXR0ZXJMaW5lcyA9IE9iamVjdC5lbnRyaWVzKGZyb250bWF0dGVyKVxuICAgICAgLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGNvbnN0IGFycmF5SXRlbXMgPSB2YWx1ZS5tYXAoKGl0ZW0pID0+IGAgIC0gJHtpdGVtfWApLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgcmV0dXJuIGAke2tleX06XFxuJHthcnJheUl0ZW1zfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGAke2tleX06ICR7dmFsdWV9YDtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlxcblwiKTtcblxuICAgIHJldHVybiBgLS0tXFxuJHtmcm9udG1hdHRlckxpbmVzfVxcbi0tLVxcblxcbiR7Ym9keX1cXG5gO1xuICB9XG59XG4iXX0=