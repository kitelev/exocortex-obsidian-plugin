import { Command } from 'commander';
import chalk from 'chalk';
import ora from 'ora';
import * as path from 'path';
import { TaskCreationService, AssetClass } from '@exocortex/core';
import { NodeFsAdapter } from '../adapters/NodeFsAdapter.js';
export function createTaskCommand() {
    const cmd = new Command('task');
    cmd
        .description('Create a new task from an area or project')
        .requiredOption('-s, --source <path>', 'Path to source file (area or project)')
        .option('-l, --label <label>', 'Task label')
        .option('--size <size>', 'Task size')
        .option('-r, --root <path>', 'Root directory of vault', process.cwd())
        .action(async (options) => {
        const spinner = ora('Creating task...').start();
        try {
            const adapter = new NodeFsAdapter(options.root);
            const service = new TaskCreationService(adapter);
            const sourcePath = path.relative(options.root, options.source);
            const metadata = await adapter.getFileMetadata(sourcePath);
            let sourceClass = AssetClass.AREA;
            if (metadata.exo__Instance_class) {
                const classes = Array.isArray(metadata.exo__Instance_class)
                    ? metadata.exo__Instance_class
                    : [metadata.exo__Instance_class];
                const normalizedClass = classes[0]?.replace(/["'[\]]/g, '').trim();
                if (normalizedClass === AssetClass.PROJECT) {
                    sourceClass = AssetClass.PROJECT;
                }
                else if (normalizedClass === AssetClass.TASK_PROTOTYPE) {
                    sourceClass = AssetClass.TASK_PROTOTYPE;
                }
            }
            const createdPath = await service.createTask(sourcePath, metadata, sourceClass, options.label, options.size || null);
            spinner.succeed(chalk.green(`Task created: ${createdPath}`));
        }
        catch (error) {
            spinner.fail(chalk.red(`Failed to create task: ${error.message}`));
            process.exit(1);
        }
    });
    return cmd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXRhc2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvY3JlYXRlLXRhc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBQ3RCLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFN0QsTUFBTSxVQUFVLGlCQUFpQjtJQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUVoQyxHQUFHO1NBQ0EsV0FBVyxDQUFDLDJDQUEyQyxDQUFDO1NBQ3hELGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSx1Q0FBdUMsQ0FBQztTQUM5RSxNQUFNLENBQUMscUJBQXFCLEVBQUUsWUFBWSxDQUFDO1NBQzNDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDO1NBQ3BDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRSx5QkFBeUIsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDckUsTUFBTSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBRTtRQUN4QixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVoRCxJQUFJLENBQUM7WUFDSCxNQUFNLE9BQU8sR0FBRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVqRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9ELE1BQU0sUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUUzRCxJQUFJLFdBQVcsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ2xDLElBQUksUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUM7Z0JBQ2pDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDO29CQUN6RCxDQUFDLENBQUMsUUFBUSxDQUFDLG1CQUFtQjtvQkFDOUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBRW5DLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNuRSxJQUFJLGVBQWUsS0FBSyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBQzNDLFdBQVcsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDO2dCQUNuQyxDQUFDO3FCQUFNLElBQUksZUFBZSxLQUFLLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztvQkFDekQsV0FBVyxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUM7Z0JBQzFDLENBQUM7WUFDSCxDQUFDO1lBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxPQUFPLENBQUMsVUFBVSxDQUMxQyxVQUFVLEVBQ1YsUUFBUSxFQUNSLFdBQVcsRUFDWCxPQUFPLENBQUMsS0FBSyxFQUNiLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUNyQixDQUFDO1lBRUYsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGlCQUFpQixXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0QsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsMEJBQTJCLEtBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFTCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kIH0gZnJvbSAnY29tbWFuZGVyJztcbmltcG9ydCBjaGFsayBmcm9tICdjaGFsayc7XG5pbXBvcnQgb3JhIGZyb20gJ29yYSc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVGFza0NyZWF0aW9uU2VydmljZSwgQXNzZXRDbGFzcyB9IGZyb20gJ0BleG9jb3J0ZXgvY29yZSc7XG5pbXBvcnQgeyBOb2RlRnNBZGFwdGVyIH0gZnJvbSAnLi4vYWRhcHRlcnMvTm9kZUZzQWRhcHRlci5qcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrQ29tbWFuZCgpOiBDb21tYW5kIHtcbiAgY29uc3QgY21kID0gbmV3IENvbW1hbmQoJ3Rhc2snKTtcblxuICBjbWRcbiAgICAuZGVzY3JpcHRpb24oJ0NyZWF0ZSBhIG5ldyB0YXNrIGZyb20gYW4gYXJlYSBvciBwcm9qZWN0JylcbiAgICAucmVxdWlyZWRPcHRpb24oJy1zLCAtLXNvdXJjZSA8cGF0aD4nLCAnUGF0aCB0byBzb3VyY2UgZmlsZSAoYXJlYSBvciBwcm9qZWN0KScpXG4gICAgLm9wdGlvbignLWwsIC0tbGFiZWwgPGxhYmVsPicsICdUYXNrIGxhYmVsJylcbiAgICAub3B0aW9uKCctLXNpemUgPHNpemU+JywgJ1Rhc2sgc2l6ZScpXG4gICAgLm9wdGlvbignLXIsIC0tcm9vdCA8cGF0aD4nLCAnUm9vdCBkaXJlY3Rvcnkgb2YgdmF1bHQnLCBwcm9jZXNzLmN3ZCgpKVxuICAgIC5hY3Rpb24oYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IHNwaW5uZXIgPSBvcmEoJ0NyZWF0aW5nIHRhc2suLi4nKS5zdGFydCgpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gbmV3IE5vZGVGc0FkYXB0ZXIob3B0aW9ucy5yb290KTtcbiAgICAgICAgY29uc3Qgc2VydmljZSA9IG5ldyBUYXNrQ3JlYXRpb25TZXJ2aWNlKGFkYXB0ZXIpO1xuXG4gICAgICAgIGNvbnN0IHNvdXJjZVBhdGggPSBwYXRoLnJlbGF0aXZlKG9wdGlvbnMucm9vdCwgb3B0aW9ucy5zb3VyY2UpO1xuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IGFkYXB0ZXIuZ2V0RmlsZU1ldGFkYXRhKHNvdXJjZVBhdGgpO1xuXG4gICAgICAgIGxldCBzb3VyY2VDbGFzcyA9IEFzc2V0Q2xhc3MuQVJFQTtcbiAgICAgICAgaWYgKG1ldGFkYXRhLmV4b19fSW5zdGFuY2VfY2xhc3MpIHtcbiAgICAgICAgICBjb25zdCBjbGFzc2VzID0gQXJyYXkuaXNBcnJheShtZXRhZGF0YS5leG9fX0luc3RhbmNlX2NsYXNzKVxuICAgICAgICAgICAgPyBtZXRhZGF0YS5leG9fX0luc3RhbmNlX2NsYXNzXG4gICAgICAgICAgICA6IFttZXRhZGF0YS5leG9fX0luc3RhbmNlX2NsYXNzXTtcblxuICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRDbGFzcyA9IGNsYXNzZXNbMF0/LnJlcGxhY2UoL1tcIidbXFxdXS9nLCAnJykudHJpbSgpO1xuICAgICAgICAgIGlmIChub3JtYWxpemVkQ2xhc3MgPT09IEFzc2V0Q2xhc3MuUFJPSkVDVCkge1xuICAgICAgICAgICAgc291cmNlQ2xhc3MgPSBBc3NldENsYXNzLlBST0pFQ1Q7XG4gICAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkQ2xhc3MgPT09IEFzc2V0Q2xhc3MuVEFTS19QUk9UT1RZUEUpIHtcbiAgICAgICAgICAgIHNvdXJjZUNsYXNzID0gQXNzZXRDbGFzcy5UQVNLX1BST1RPVFlQRTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjcmVhdGVkUGF0aCA9IGF3YWl0IHNlcnZpY2UuY3JlYXRlVGFzayhcbiAgICAgICAgICBzb3VyY2VQYXRoLFxuICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgIHNvdXJjZUNsYXNzLFxuICAgICAgICAgIG9wdGlvbnMubGFiZWwsXG4gICAgICAgICAgb3B0aW9ucy5zaXplIHx8IG51bGxcbiAgICAgICAgKTtcblxuICAgICAgICBzcGlubmVyLnN1Y2NlZWQoY2hhbGsuZ3JlZW4oYFRhc2sgY3JlYXRlZDogJHtjcmVhdGVkUGF0aH1gKSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBzcGlubmVyLmZhaWwoY2hhbGsucmVkKGBGYWlsZWQgdG8gY3JlYXRlIHRhc2s6ICR7KGVycm9yIGFzIEVycm9yKS5tZXNzYWdlfWApKTtcbiAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIHJldHVybiBjbWQ7XG59XG4iXX0=