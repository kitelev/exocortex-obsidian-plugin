import * as fs from 'fs-extra';
import * as path from 'path';
import * as glob from 'glob';
import * as yaml from 'js-yaml';
import { FileNotFoundError, FileAlreadyExistsError } from '@exocortex/core';
export class NodeFsAdapter {
    constructor(rootPath) {
        this.rootPath = rootPath;
    }
    async readFile(filePath) {
        const fullPath = this.resolvePath(filePath);
        if (!await fs.pathExists(fullPath)) {
            throw new FileNotFoundError(filePath);
        }
        return fs.readFile(fullPath, 'utf-8');
    }
    async fileExists(filePath) {
        const fullPath = this.resolvePath(filePath);
        return fs.pathExists(fullPath);
    }
    async getFileMetadata(filePath) {
        const content = await this.readFile(filePath);
        return this.extractFrontmatter(content);
    }
    async createFile(filePath, content) {
        const fullPath = this.resolvePath(filePath);
        if (await fs.pathExists(fullPath)) {
            throw new FileAlreadyExistsError(filePath);
        }
        await fs.ensureDir(path.dirname(fullPath));
        await fs.writeFile(fullPath, content, 'utf-8');
        return filePath;
    }
    async updateFile(filePath, content) {
        const fullPath = this.resolvePath(filePath);
        if (!await fs.pathExists(fullPath)) {
            throw new FileNotFoundError(filePath);
        }
        await fs.writeFile(fullPath, content, 'utf-8');
    }
    async writeFile(filePath, content) {
        const fullPath = this.resolvePath(filePath);
        await fs.ensureDir(path.dirname(fullPath));
        await fs.writeFile(fullPath, content, 'utf-8');
    }
    async deleteFile(filePath) {
        const fullPath = this.resolvePath(filePath);
        if (!await fs.pathExists(fullPath)) {
            throw new FileNotFoundError(filePath);
        }
        await fs.remove(fullPath);
    }
    async renameFile(oldPath, newPath) {
        const fullOldPath = this.resolvePath(oldPath);
        const fullNewPath = this.resolvePath(newPath);
        if (!await fs.pathExists(fullOldPath)) {
            throw new FileNotFoundError(oldPath);
        }
        await fs.ensureDir(path.dirname(fullNewPath));
        await fs.move(fullOldPath, fullNewPath);
    }
    async createDirectory(dirPath) {
        const fullPath = this.resolvePath(dirPath);
        await fs.ensureDir(fullPath);
    }
    async directoryExists(dirPath) {
        const fullPath = this.resolvePath(dirPath);
        if (!await fs.pathExists(fullPath))
            return false;
        const stats = await fs.stat(fullPath);
        return stats.isDirectory();
    }
    async getMarkdownFiles(rootPath) {
        const searchPath = rootPath ? this.resolvePath(rootPath) : this.rootPath;
        const pattern = path.join(searchPath, '**/*.md');
        const files = await glob.glob(pattern, { nodir: true });
        const relativePaths = files.map((f) => path.relative(this.rootPath, f));
        return relativePaths;
    }
    async findFilesByMetadata(query) {
        const allFiles = await this.getMarkdownFiles();
        const matches = [];
        for (const file of allFiles) {
            try {
                const metadata = await this.getFileMetadata(file);
                if (this.matchesQuery(metadata, query)) {
                    matches.push(file);
                }
            }
            catch (error) {
                continue;
            }
        }
        return matches;
    }
    async findFileByUID(uid) {
        const files = await this.findFilesByMetadata({ 'exo__Asset_uid': uid });
        return files.length > 0 ? files[0] : null;
    }
    resolvePath(filePath) {
        if (path.isAbsolute(filePath)) {
            return filePath;
        }
        return path.join(this.rootPath, filePath);
    }
    extractFrontmatter(content) {
        const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
        const match = content.match(frontmatterRegex);
        if (!match) {
            return {};
        }
        try {
            const parsed = yaml.load(match[1]);
            return typeof parsed === 'object' && parsed !== null ? parsed : {};
        }
        catch (error) {
            return {};
        }
    }
    matchesQuery(metadata, query) {
        for (const [key, value] of Object.entries(query)) {
            const metaValue = metadata[key];
            if (Array.isArray(metaValue)) {
                if (!metaValue.some(v => this.normalizeValue(v) === this.normalizeValue(value))) {
                    return false;
                }
            }
            else if (this.normalizeValue(metaValue) !== this.normalizeValue(value)) {
                return false;
            }
        }
        return true;
    }
    normalizeValue(value) {
        if (value === null || value === undefined)
            return '';
        return String(value).replace(/["'[\]]/g, '').trim();
    }
}
//# sourceMappingURL=data:application/json;base64,