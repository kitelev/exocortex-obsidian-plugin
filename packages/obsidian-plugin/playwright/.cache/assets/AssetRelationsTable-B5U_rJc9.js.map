{"version":3,"file":"AssetRelationsTable-B5U_rJc9.js","sources":["../../../src/presentation/components/AssetRelationsTable.tsx"],"sourcesContent":["import React, { useState, useMemo } from \"react\";\n\nexport interface AssetRelation {\n  path: string;\n  title: string;\n  propertyName?: string;\n  isBodyLink: boolean;\n  created: number;\n  modified: number;\n  isArchived?: boolean;\n   \n  metadata: Record<string, any>;\n}\n\nexport interface AssetRelationsTableProps {\n  relations: AssetRelation[];\n  groupByProperty?: boolean;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n  showProperties?: string[];\n  groupSpecificProperties?: Record<string, string[]>;\n  onAssetClick?: (path: string, event: React.MouseEvent) => void;\n  getAssetLabel?: (path: string) => string | null;\n}\n\ninterface SortState {\n  column: string;\n  order: \"asc\" | \"desc\";\n}\n\ninterface SingleTableProps {\n  items: AssetRelation[];\n  sortBy: string;\n  sortOrder: \"asc\" | \"desc\";\n  showProperties: string[];\n  onAssetClick?: (path: string, event: React.MouseEvent) => void;\n  getAssetLabel?: (path: string) => string | null;\n}\n\nconst SingleTable: React.FC<SingleTableProps> = ({\n  items,\n  sortBy,\n  sortOrder,\n  showProperties,\n  onAssetClick,\n  getAssetLabel,\n}) => {\n  const [sortState, setSortState] = useState<SortState>({\n    column: sortBy,\n    order: sortOrder,\n  });\n\n  const handleSort = (column: string) => {\n    setSortState((prev) => ({\n      column,\n      order: prev.column === column && prev.order === \"asc\" ? \"desc\" : \"asc\",\n    }));\n  };\n\n   \n  const getInstanceClass = (metadata: Record<string, any>): WikiLink => {\n    const instanceClassRaw =\n      metadata?.exo__Instance_class || metadata?.[\"exo__Instance_class\"] || \"-\";\n\n    const instanceClass = Array.isArray(instanceClassRaw)\n      ? instanceClassRaw[0] || \"-\"\n      : instanceClassRaw || \"-\";\n\n    if (instanceClass === \"-\") {\n      return { target: \"-\" };\n    }\n\n    const content = String(instanceClass).replace(/^\\[\\[|\\]\\]$/g, \"\");\n    const pipeIndex = content.indexOf(\"|\");\n\n    if (pipeIndex !== -1) {\n      return {\n        target: content.substring(0, pipeIndex).trim(),\n        alias: content.substring(pipeIndex + 1).trim()\n      };\n    }\n\n    return {\n      target: content.trim()\n    };\n  };\n\n  const getDisplayLabel = (relation: AssetRelation): string => {\n    const label = relation.metadata?.exo__Asset_label;\n    if (label && typeof label === \"string\" && label.trim() !== \"\") {\n      return label;\n    }\n    return relation.title;\n  };\n\n  const isWikiLink = (value: any): boolean => {\n    return typeof value === \"string\" && /\\[\\[.*?\\]\\]/.test(value);\n  };\n\n  interface WikiLink {\n    target: string;\n    alias?: string;\n  }\n\n  const parseWikiLink = (value: string): WikiLink => {\n    // Remove [[ and ]]\n    const content = value.replace(/^\\[\\[|\\]\\]$/g, \"\");\n\n    // Check if there's an alias (format: target|alias)\n    const pipeIndex = content.indexOf(\"|\");\n\n    if (pipeIndex !== -1) {\n      return {\n        target: content.substring(0, pipeIndex).trim(),\n        alias: content.substring(pipeIndex + 1).trim()\n      };\n    }\n\n    return {\n      target: content.trim()\n    };\n  };\n\n  const renderPropertyValue = (value: any): React.ReactNode => {\n    if (value === null || value === undefined) {\n      return \"-\";\n    }\n\n    if (typeof value === \"string\" && isWikiLink(value)) {\n      const parsed = parseWikiLink(value);\n      const label = getAssetLabel?.(parsed.target);\n      const displayText = parsed.alias || label || parsed.target;\n\n      return (\n        <a\n          data-href={parsed.target}\n          className=\"internal-link\"\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onAssetClick?.(parsed.target, e);\n          }}\n          style={{ cursor: 'pointer' }}\n        >\n          {displayText}\n        </a>\n      );\n    }\n\n    if (Array.isArray(value)) {\n      return value.map((item, index) => (\n        <React.Fragment key={index}>\n          {renderPropertyValue(item)}\n          {index < value.length - 1 ? \", \" : \"\"}\n        </React.Fragment>\n      ));\n    }\n\n    return String(value);\n  };\n\n  const sortedItems = useMemo(() => {\n    return [...items].sort((a, b) => {\n      let aVal: unknown;\n      let bVal: unknown;\n\n      if (sortState.column === \"title\") {\n        aVal = a.title.toLowerCase();\n        bVal = b.title.toLowerCase();\n      } else if (sortState.column === \"exo__Instance_class\") {\n        const aClass = getInstanceClass(a.metadata);\n        const bClass = getInstanceClass(b.metadata);\n        aVal = (aClass.alias || aClass.target).toLowerCase();\n        bVal = (bClass.alias || bClass.target).toLowerCase();\n      } else {\n        aVal = a[sortState.column as keyof AssetRelation];\n        bVal = b[sortState.column as keyof AssetRelation];\n      }\n\n      if (typeof aVal === \"string\" && typeof bVal === \"string\") {\n        return sortState.order === \"asc\"\n          ? aVal.localeCompare(bVal)\n          : bVal.localeCompare(aVal);\n      }\n\n      if (typeof aVal === \"number\" && typeof bVal === \"number\") {\n        return sortState.order === \"asc\" ? aVal - bVal : bVal - aVal;\n      }\n\n      return 0;\n    });\n  }, [items, sortState]);\n\n  return (\n    <table className=\"exocortex-relations-table\">\n      <thead>\n        <tr>\n          <th onClick={() => handleSort(\"title\")} className=\"sortable\">\n            Name{\" \"}\n            {sortState.column === \"title\" &&\n              (sortState.order === \"asc\" ? \"↑\" : \"↓\")}\n          </th>\n          <th\n            onClick={() => handleSort(\"exo__Instance_class\")}\n            className=\"sortable\"\n          >\n            exo__Instance_class{\" \"}\n            {sortState.column === \"exo__Instance_class\" &&\n              (sortState.order === \"asc\" ? \"↑\" : \"↓\")}\n          </th>\n          {showProperties.map((prop) => (\n            <th key={prop}>{prop}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {sortedItems.map((relation, index) => {\n          const instanceClass = getInstanceClass(relation.metadata);\n          // Use unique key: path + propertyName to handle multiple relations from same asset via different properties\n          const uniqueKey = `${relation.path}-${relation.propertyName || 'body'}-${index}`;\n          const rowClassName = relation.isArchived ? 'archived-asset' : '';\n          return (\n            <tr key={uniqueKey} data-path={relation.path} className={rowClassName}>\n              <td className=\"asset-name\">\n                <a\n                  data-href={relation.path}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    onAssetClick?.(relation.path, e);\n                  }}\n                  className=\"internal-link\"\n                  style={{ cursor: 'pointer' }}\n                >\n                  {getDisplayLabel(relation)}\n                </a>\n              </td>\n              <td className=\"instance-class\">\n                {instanceClass.target !== \"-\" ? (\n                  <a\n                    data-href={instanceClass.target}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      onAssetClick?.(instanceClass.target, e);\n                    }}\n                    className=\"internal-link\"\n                    style={{ cursor: 'pointer' }}\n                  >\n                    {instanceClass.alias || instanceClass.target}\n                  </a>\n                ) : (\n                  \"-\"\n                )}\n              </td>\n              {showProperties.map((prop) => (\n                <td key={prop}>{renderPropertyValue(relation.metadata[prop])}</td>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport const AssetRelationsTable: React.FC<AssetRelationsTableProps> = ({\n  relations,\n  groupByProperty = false,\n  sortBy = \"title\",\n  sortOrder = \"asc\",\n  showProperties = [],\n  groupSpecificProperties = {},\n  onAssetClick,\n  getAssetLabel,\n}) => {\n  const groupedRelations = useMemo(() => {\n    if (!groupByProperty) {\n      return { ungrouped: relations };\n    }\n\n    const grouped = relations.reduce(\n      (acc, relation) => {\n        const group = relation.propertyName || \"Body Links\";\n        if (!acc[group]) acc[group] = [];\n        acc[group].push(relation);\n        return acc;\n      },\n      {} as Record<string, AssetRelation[]>,\n    );\n\n    return grouped;\n  }, [relations, groupByProperty]);\n\n  if (groupByProperty) {\n    return (\n      <div className=\"exocortex-relations-grouped\">\n        {Object.entries(groupedRelations).map(([groupName, items]) => {\n          const groupProps = groupSpecificProperties[groupName] || [];\n          const mergedProperties = [...showProperties, ...groupProps];\n\n          return (\n            <div key={groupName} className=\"relation-group\">\n              <h3 className=\"group-header\">{groupName}</h3>\n              <SingleTable\n                items={items}\n                sortBy={sortBy}\n                sortOrder={sortOrder}\n                showProperties={mergedProperties}\n                onAssetClick={onAssetClick}\n                getAssetLabel={getAssetLabel}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"exocortex-relations\">\n      <SingleTable\n        items={groupedRelations.ungrouped}\n        sortBy={sortBy}\n        sortOrder={sortOrder}\n        showProperties={showProperties}\n        onAssetClick={onAssetClick}\n        getAssetLabel={getAssetLabel}\n      />\n    </div>\n  );\n};\n"],"names":["useState","jsx","jsxs","useMemo"],"mappings":"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"}