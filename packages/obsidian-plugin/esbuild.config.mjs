import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const isDev = !prod;

// Performance optimization plugins
const performancePlugin = {
  name: "performance-optimizer",
  setup(build) {
    let buildStart = 0;
    
    build.onStart(() => {
      buildStart = Date.now();
      if (isDev) {
        console.log("🚀 Starting optimized build...");
      }
    });

    build.onEnd((result) => {
      const buildTime = Date.now() - buildStart;
      
      if (isDev) {
        console.log(`✅ Build completed in ${buildTime}ms`);
        
        // Performance warnings
        if (buildTime > 5000) {
          console.warn(`⚠️  Build time ${buildTime}ms is above optimal threshold (5000ms)`);
        }
      }

      // Bundle size analysis
      if (result.metafile) {
        const bundleSize = fs.statSync(build.initialOptions.outfile).size;
        const bundleSizeMB = (bundleSize / 1024 / 1024).toFixed(2);
        
        if (isDev) {
          console.log(`📦 Bundle size: ${bundleSizeMB}MB`);
        }
        
        // Size warnings
        if (bundleSize > 2 * 1024 * 1024) { // 2MB
          console.warn(`⚠️  Bundle size ${bundleSizeMB}MB exceeds recommended limit (2MB)`);
        }
      }
    });
  }
};

// Development-specific optimizations
const devOptimizationsPlugin = {
  name: "dev-optimizations",
  setup(build) {
    if (!isDev) return;

    // Hot reload optimizations
    build.onResolve({ filter: /^obsidian$/ }, (args) => {
      // Cache obsidian module resolution for faster rebuilds
      return { path: args.path, external: true };
    });

    // Skip unnecessary transforms in development
    build.onLoad({ filter: /\.ts$/ }, async (args) => {
      // Skip type checking in dev mode for speed
      if (args.path.includes('node_modules')) {
        return null; // Let esbuild handle it normally
      }
      
      // For source files, we can add development-specific optimizations
      return null; // Let esbuild handle normally for now
    });
  }
};

// Incremental build cache
const cachePlugin = {
  name: "cache-optimizer",
  setup(build) {
    const cacheDir = ".esbuild-cache";
    
    if (isDev && !fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    build.onStart(() => {
      if (isDev) {
        // Clean old cache files (older than 1 day)
        const oneDayAgo = Date.now() - 24 * 60 * 60 * 1000;
        
        try {
          const files = fs.readdirSync(cacheDir);
          files.forEach(file => {
            const filePath = path.join(cacheDir, file);
            const stats = fs.statSync(filePath);
            
            if (stats.mtime.getTime() < oneDayAgo) {
              fs.unlinkSync(filePath);
            }
          });
        } catch (error) {
          // Ignore cache cleanup errors
        }
      }
    });
  }
};

// Environment-specific configuration
const baseConfig = {
  banner: {
    js: banner,
  },
  entryPoints: ["packages/obsidian-plugin/src/main.ts"],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: isDev ? "info" : "warning",
  treeShaking: true,
  outfile: "packages/obsidian-plugin/main.js",
  plugins: [
    performancePlugin,
    cachePlugin,
    ...(isDev ? [devOptimizationsPlugin] : [])
  ]
};

// Production optimizations
const productionConfig = {
  ...baseConfig,
  minify: true,
  sourcemap: false,
  define: {
    "process.env.NODE_ENV": '"production"',
  },
  // Advanced production optimizations
  metafile: true,
  splitting: false, // Obsidian doesn't support ES modules
  chunkNames: "[name]-[hash]",
  assetNames: "[name]-[hash]",
  mangleProps: /^_/, // Mangle private properties
  reserveProps: /^__/, // Reserve double underscore props
  // Enable advanced minification
  minifyWhitespace: true,
  minifyIdentifiers: true,
  minifySyntax: true,
  // Drop debug code in production
  drop: ["console", "debugger"]
};

// Development optimizations
const developmentConfig = {
  ...baseConfig,
  sourcemap: "inline",
  define: {
    "process.env.NODE_ENV": '"development"',
  },
  // Development-specific optimizations
  incremental: true,
  write: true,
  // Keep names for better debugging
  keepNames: true,
  // Faster builds
  minify: false,
  // Source map optimizations
  sourceRoot: "src/",
  sourcesContent: true
};

const finalConfig = prod ? productionConfig : developmentConfig;

// Performance monitoring
const startTime = Date.now();

try {
  const context = await esbuild.context(finalConfig);

  if (prod) {
    console.log("🏗️  Building for production...");
    const result = await context.rebuild();
    
    if (result.metafile) {
      // Generate build analysis
      const analysis = await esbuild.analyzeMetafile(result.metafile);
      console.log("📊 Bundle Analysis:\n", analysis);
      
      // Save metafile for further analysis
      fs.writeFileSync("build-meta.json", JSON.stringify(result.metafile, null, 2));
    }
    
    const buildTime = Date.now() - startTime;
    console.log(`✅ Production build completed in ${buildTime}ms`);
    
    await context.dispose();
    process.exit(0);
  } else {
    console.log("👀 Starting development watch mode with optimizations...");
    await context.watch();
  }
} catch (error) {
  console.error("❌ Build failed:", error);
  process.exit(1);
}
